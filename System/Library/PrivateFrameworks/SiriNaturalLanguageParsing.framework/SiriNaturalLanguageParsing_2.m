void sub_1C8EBBCBC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C8EBC188);
}

void sub_1C8EBBD88()
{
}

void sub_1C8EBBD90()
{
}

void sub_1C8EBBD9C()
{
}

void sub_1C8EBBDA4()
{
  v2 = (void *)STACK[0x5B0];
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = (unint64_t)v2;
    operator delete(v2);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v0);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&STACK[0x520]);
  JUMPOUT(0x1C8EBC114);
}

void sub_1C8EBBDFC()
{
  v0 = (void *)STACK[0x550];
  if (STACK[0x550])
  {
    STACK[0x558] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C8EBBDF0);
}

void sub_1C8EBBE14()
{
}

void sub_1C8EBBE1C()
{
  v0 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C8EBC114);
}

void sub_1C8EBBE34()
{
}

void sub_1C8EBBE3C()
{
  operator delete(v0);
  JUMPOUT(0x1C8EBC11CLL);
}

void sub_1C8EBBE58()
{
  v0 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C8EBC124);
}

void sub_1C8EBBE70()
{
}

void sub_1C8EBBE78()
{
}

void sub_1C8EBBE80()
{
  STACK[0xAD0] = v0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAD0]);
  JUMPOUT(0x1C8EBC134);
}

void sub_1C8EBBE94()
{
}

void sub_1C8EBBEA0()
{
}

void sub_1C8EBBEB8()
{
  STACK[0x3B0] = v0;
  if (SLOBYTE(STACK[0x16A7]) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  if (SLOBYTE(STACK[0x13D7]) < 0) {
    operator delete((void *)STACK[0x13C0]);
  }
  if (LOBYTE(STACK[0x1498]))
  {
    if (SLOBYTE(STACK[0x1497]) < 0) {
      operator delete((void *)STACK[0x1480]);
    }
  }
  JUMPOUT(0x1C8EBC078);
}

void sub_1C8EBBEC4()
{
  std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>::~pair((uint64_t)&STACK[0xAD0]);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&v0);
  JUMPOUT(0x1C8EBC068);
}

void sub_1C8EBBF10()
{
}

void sub_1C8EBBF28()
{
  uint64_t v0 = *v1;
  uint64_t *v1 = 0;
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  v4 = &v2;
  std::vector<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = &v3;
  JUMPOUT(0x1C8EBC0B8);
}

void sub_1C8EBBF30()
{
}

void sub_1C8EBBF48()
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0xAD0]);
  STACK[0x3E0] = v0;
  JUMPOUT(0x1C8EBC0D8);
}

void sub_1C8EBBF60()
{
}

void sub_1C8EBBF68()
{
  if (*(char *)(v0 + 407) < 0) {
    operator delete((void *)STACK[0x1540]);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0xAD0]);
  JUMPOUT(0x1C8EBBF94);
}

void sub_1C8EBBFE4()
{
  if (SLOBYTE(STACK[0xAE7]) < 0) {
    operator delete((void *)STACK[0xAD0]);
  }
  JUMPOUT(0x1C8EBC0F8);
}

void sub_1C8EBBFFC()
{
}

void sub_1C8EBC004()
{
  if (SLOBYTE(STACK[0xAE7]) < 0) {
    operator delete((void *)STACK[0xAD0]);
  }
  JUMPOUT(0x1C8EBC100);
}

void sub_1C8EBC01C()
{
}

void sub_1C8EBC024()
{
}

void sub_1C8EBC088()
{
  STACK[0x13C0] = (unint64_t)&STACK[0x1480];
  JUMPOUT(0x1C8EBC0B8);
}

void sub_1C8EBC090()
{
  if (SLOBYTE(STACK[0xAE7]) < 0) {
    operator delete((void *)STACK[0xAD0]);
  }
  STACK[0x13C0] = (unint64_t)&STACK[0x1480];
  JUMPOUT(0x1C8EBC0B8);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::validateRequest(void *a1)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  v25.__r_.__value_.__s.__data_[0] = 0;
  char v26 = 0;
  if (!a1[7])
  {
    v17 = "NLv4 request missing request ID";
    goto LABEL_36;
  }
  uint64_t v1 = a1[1];
  if (!v1 || (*(unsigned char *)(v1 + 64) & 4) == 0)
  {
    v17 = "NLv4 request missing valid embeddings";
    goto LABEL_36;
  }
  uint64_t v2 = a1[8];
  if (!v2) {
    goto LABEL_32;
  }
  uint64_t v3 = *(void **)(v2 + 24);
  if (!v3) {
    goto LABEL_32;
  }
  if (!v3[1])
  {
    v17 = "NLv4 request missing valid token chain locale";
    goto LABEL_36;
  }
  if (!*(void *)(v2 + 16))
  {
LABEL_32:
    v17 = "NLv4 request missing valid tokens";
LABEL_36:
    std::string::basic_string[abi:ne180100]<0>(&v25, v17);
    char v26 = 1;
    goto LABEL_37;
  }
  unint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = v3[4] - v3[3];
  if (v4 != v5 >> 3)
  {
    std::to_string(&v21, v4);
    v6 = std::string::insert(&v21, 0, "NLv4 request embeddings num tokens (");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v22, ") does not match actual num tokens (");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5 >> 3);
    v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v24, ")");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v27[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v26)
    {
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v25.__r_.__value_.__r.__words[0] = v15;
      v25.__r_.__value_.__l.__size_ = v27[0];
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v27 + 7);
      *((unsigned char *)&v25.__r_.__value_.__s + 23) = v16;
    }
    else
    {
      v25.__r_.__value_.__r.__words[0] = v15;
      v25.__r_.__value_.__l.__size_ = v27[0];
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v27 + 7);
      *((unsigned char *)&v25.__r_.__value_.__s + 23) = v16;
      char v26 = 1;
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (v26)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v19 = &exception->__vftable;
      if (!v26) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::runtime_error::runtime_error(exception, &v25);
      void *v19 = &unk_1F235F530;
    }
  }
}

void sub_1C8EBC45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(unsigned char *)(v40 - 64))
  {
    if (*(char *)(v40 - 65) < 0) {
      operator delete(*(void **)(v40 - 88));
    }
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::featurizeSpans(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10 = (void *)(a1 + 440);
  std::string::size_type v11 = (unsigned __int8 *)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 440), (unsigned __int8 *)(a1 + 8)))goto LABEL_7; {
  v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v10, v11);
  }
  if (!v12) {
    goto LABEL_11;
  }
  if (*((_DWORD *)v12 + 16) != 1)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v18, "The NLv4 model config does not contain a setting for the maximum number of matching spans, max_num_spans_tokens.  Inference cannot continue.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v19 >= 0) {
      char v16 = (char *)v18;
    }
    else {
      char v16 = (char *)v18[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, v16);
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  long long v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v10, v11);
  if (!v13) {
LABEL_11:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)v13 + 16) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v14 = *((_DWORD *)v13 + 10);
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize((int *)(a1 + 784), (char *)a5, a2, a3, a4, v14);
}

void sub_1C8EBC670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v20);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1)
{
  uint64_t v1 = std::regex_traits<char>::regex_traits(a1);
  v1[2].__ct_ = 0;
  *(_OWORD *)&v1[1].__col_ = 0u;
  *(_OWORD *)&v1[1].__loc_.__locale_ = 0u;
  std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
}

void sub_1C8EBC738(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  v6 = a2;
  v50.__begin_.__i_ = a2;
  v50.__end_.__i_ = a3;
  v50.__pregex_ = a4;
  v50.__flags_ = match_default;
  memset(&v50.__match_.__prefix_, 0, 17);
  memset(&v50.__match_.__suffix_, 0, 17);
  v50.__match_.__ready_ = 0;
  v50.__match_.__position_start_.__i_ = 0;
  memset(&v50.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)a3, (std::vector<std::csub_match> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v6, (uint64_t)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_) {
    operator delete((void *)__p.__begin_.__i_);
  }
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v50, &__p))
  {
    while (v6 != a3)
      std::string::push_back(a1, *v6++);
    goto LABEL_68;
  }
  size_t v8 = strlen(a5);
  std::__wrap_iter<const char *>::iterator_type v9 = 0;
  v10 = 0;
  std::string::size_type v11 = (unsigned __int8 *)&a5[v8];
  size_t v46 = v8;
  while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v50, &__p))
  {
    std::__wrap_iter<const char *>::iterator_type i = v50.__match_.__prefix_.first.__i_;
    std::__wrap_iter<const char *>::iterator_type v13 = v50.__match_.__prefix_.second.__i_;
    if (v50.__match_.__prefix_.first.__i_ != v50.__match_.__prefix_.second.__i_)
    {
      unsigned int v14 = (std::string::value_type *)v50.__match_.__prefix_.first.__i_;
      do
        std::string::push_back(a1, *v14++);
      while (v14 != v13);
    }
    std::vector<std::ssub_match>::pointer begin = v50.__match_.__matches_.__begin_;
    if (v46)
    {
      v10 = (std::string::value_type *)v50.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v9 = v50.__match_.__suffix_.second.__i_;
      std::vector<std::ssub_match>::pointer end = v50.__match_.__matches_.__end_;
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL
          * (((char *)v50.__match_.__matches_.__end_ - (char *)v50.__match_.__matches_.__begin_) >> 3);
      char v16 = a5;
      while (1)
      {
        int v17 = *(unsigned __int8 *)v16;
        if (v17 == 36)
        {
          v18 = (unsigned __int8 *)(v16 + 1);
          if (v16 + 1 == (const char *)v11) {
            goto LABEL_44;
          }
          int v19 = (char)*v18;
          int v17 = *v18;
          if (v19 > 38)
          {
            if (v19 == 39)
            {
              if (v10 != v9)
              {
                std::string v23 = v10;
                do
                  std::string::push_back(a1, *v23++);
                while (v23 != v9);
              }
              goto LABEL_46;
            }
            if (v19 == 96)
            {
              if (i != v13)
              {
                std::string v22 = (std::string::value_type *)i;
                do
                  std::string::push_back(a1, *v22++);
                while (v22 != v13);
              }
              goto LABEL_46;
            }
LABEL_32:
            if ((v17 - 48) <= 9)
            {
              unint64_t v24 = *v18 - 48;
              if (v16 + 2 != (const char *)v11)
              {
                uint64_t v25 = *((unsigned __int8 *)v16 + 2);
                unsigned int v26 = v25 - 48;
                uint64_t v27 = v25 + 10 * (int)v24 - 48;
                if (v26 > 9)
                {
                  v18 = (unsigned __int8 *)(v16 + 1);
                }
                else
                {
                  unint64_t v24 = v27;
                  v18 = (unsigned __int8 *)(v16 + 2);
                }
              }
              v28 = &begin[(int)v24];
              BOOL v29 = v48 > v24;
              p_unmatched = &v50.__match_.__unmatched_;
              if (v29) {
                p_unmatched = v28;
              }
              v31 = (std::string::value_type *)p_unmatched->first.__i_;
              p_second = &v28->second;
              if (!v29) {
                p_second = &v50.__match_.__unmatched_.second;
              }
              v33 = (std::string::value_type *)p_second->__i_;
              while (v31 != v33)
                std::string::push_back(a1, *v31++);
              goto LABEL_46;
            }
LABEL_44:
            LOBYTE(v17) = 36;
            goto LABEL_45;
          }
          if (v19 != 36)
          {
            if (v19 == 38)
            {
              std::string v21 = (std::string::value_type *)begin->first.__i_;
              v20 = (std::string::value_type *)begin->second.__i_;
              while (v21 != v20)
                std::string::push_back(a1, *v21++);
              goto LABEL_46;
            }
            goto LABEL_32;
          }
          ++v16;
        }
LABEL_45:
        std::string::push_back(a1, v17);
        v18 = (unsigned __int8 *)v16;
LABEL_46:
        char v16 = (const char *)(v18 + 1);
        if (v18 + 1 == v11)
        {
          std::vector<std::ssub_match>::pointer v34 = end;
          goto LABEL_49;
        }
      }
    }
    v10 = (std::string::value_type *)v50.__match_.__suffix_.first.__i_;
    std::__wrap_iter<const char *>::iterator_type v9 = v50.__match_.__suffix_.second.__i_;
    std::vector<std::ssub_match>::pointer v34 = v50.__match_.__matches_.__end_;
LABEL_49:
    std::regex_constants::match_flag_type flags = v50.__flags_;
    unsigned __int32 v36 = v50.__flags_ | 0x800;
    v50.__flags_ |= 0x800u;
    BOOL v37 = v34 == begin;
    v38 = &v50.__match_.__unmatched_;
    if (!v37) {
      v38 = begin;
    }
    v39 = &begin->second;
    if (v37) {
      v39 = &v50.__match_.__unmatched_.second;
    }
    uint64_t v40 = (std::sub_match<const char *> *)v39->__i_;
    v41 = (std::sub_match<const char *> *)v50.__end_.__i_;
    if (v38->first.__i_ != v39->__i_) {
      goto LABEL_54;
    }
    if ((std::sub_match<const char *> *)v50.__end_.__i_ == v40)
    {
LABEL_63:
      if (begin) {
        operator delete(begin);
      }
      v50.__match_.__ready_ = 0;
      memset(&v50.__match_, 0, 41);
      memset(&v50.__match_.__prefix_, 0, 17);
      memset(&v50.__match_.__suffix_, 0, 17);
      v50.__match_.__position_start_.__i_ = 0;
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      char v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      char v57 = 0;
      char v58 = 0;
      uint64_t v59 = 0;
      memset(v51, 0, 41);
      char v43 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v50.__pregex_, v40, (std::sub_match<const char *> *)v50.__end_.__i_, v51, flags | 0x860);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v51, 1);
      if (v51[0].__begin_) {
        operator delete(v51[0].__begin_);
      }
      if ((v43 & 1) == 0)
      {
        uint64_t v40 = (std::sub_match<const char *> *)((char *)v40 + 1);
        unsigned __int32 v36 = v50.__flags_;
        v41 = (std::sub_match<const char *> *)v50.__end_.__i_;
LABEL_54:
        v50.__flags_ = v36 | 0x80;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        char v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        char v57 = 0;
        char v58 = 0;
        uint64_t v59 = 0;
        memset(v51, 0, 41);
        char v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v50.__pregex_, v40, v41, v51, v36 | 0x80);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v51, (v36 & 0x800) != 0);
        if (v51[0].__begin_) {
          operator delete(v51[0].__begin_);
        }
        if ((v42 & 1) == 0)
        {
          std::vector<std::ssub_match>::pointer begin = v50.__match_.__matches_.__begin_;
          goto LABEL_63;
        }
      }
    }
  }
  while (v10 != v9)
    std::string::push_back(a1, *v10++);
LABEL_68:
  std::vector<std::ssub_match>::pointer v44 = v50.__match_.__matches_.__begin_;
  if (v50.__match_.__matches_.__begin_)
  {
    operator delete(v44);
  }
}

void sub_1C8EBCC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void nlv4_inference_orchestrator::trees::PlyTreeCreator::~PlyTreeCreator(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::trees::TagExpander::~TagExpander(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t nlv4_inference_orchestrator::trees::TreeNode::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  long long v9 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v9;
  return a1;
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logModelOutput(uint64_t a1, const nlv4_inference_orchestrator::trees::TreeNode *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)v10, a2);
  long long v6 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    long long v7 = v10;
    if (v11 < 0) {
      long long v7 = (void **)v10[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NLv4";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v17 = a4;
    __int16 v18 = 2080;
    int v19 = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] %s[NLv4IO Ply tree] hypothesis=%zu:\n %s", (uint8_t *)&buf, 0x2Au);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  nlv4_inference_orchestrator::trees::join(&buf, *a3, a3[1], (uint64_t)__p);
  if (v15 < 0) {
    operator delete(*(void **)__p);
  }
  long long v8 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 134218242;
    *(void *)&__p[4] = a4;
    __int16 v13 = 2080;
    unsigned int v14 = p_buf;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[NLv4IO Ply tags] hypothesis=%zu:\n %s", __p, 0x16u);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_1C8EBD094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::~TreeManipulations(void **this)
{
  uint64_t v2 = this + 246;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1967) < 0) {
    operator delete(this[243]);
  }
  if (*((char *)this + 1943) < 0) {
    operator delete(this[240]);
  }
  if (*((char *)this + 1919) < 0) {
    operator delete(this[237]);
  }
  if (*((char *)this + 1887) < 0) {
    operator delete(this[233]);
  }
  if (*((char *)this + 1863) < 0) {
    operator delete(this[230]);
  }
  if (*((char *)this + 1839) < 0) {
    operator delete(this[227]);
  }
  if (*((char *)this + 1807) < 0) {
    operator delete(this[223]);
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::~ReplaceFromPersonRecipientHack(this + 176);
  if (*((char *)this + 1399) < 0) {
    operator delete(this[172]);
  }
  if (*((char *)this + 1375) < 0) {
    operator delete(this[169]);
  }
  if (*((char *)this + 1351) < 0) {
    operator delete(this[166]);
  }
  if (*((unsigned char *)this + 1320) && *((char *)this + 1319) < 0) {
    operator delete(this[162]);
  }
  if (*((char *)this + 1295) < 0) {
    operator delete(this[159]);
  }
  if (*((char *)this + 1271) < 0) {
    operator delete(this[156]);
  }
  if (*((char *)this + 1247) < 0) {
    operator delete(this[153]);
  }
  if (*((char *)this + 1223) < 0) {
    operator delete(this[150]);
  }
  if (*((char *)this + 1191) < 0) {
    operator delete(this[146]);
  }
  uint64_t v2 = this + 143;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 140;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 137;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1095) < 0) {
    operator delete(this[134]);
  }
  if (*((char *)this + 1071) < 0) {
    operator delete(this[131]);
  }
  if (*((char *)this + 1039) < 0) {
    operator delete(this[127]);
  }
  uint64_t v2 = this + 124;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 121;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 118;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 943) < 0) {
    operator delete(this[115]);
  }
  if (*((char *)this + 919) < 0) {
    operator delete(this[112]);
  }
  if (*((char *)this + 887) < 0) {
    operator delete(this[108]);
  }
  uint64_t v2 = this + 105;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 102;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 807) < 0) {
    operator delete(this[98]);
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::~DefaultValueMediaPlaybackSpeed(this + 27);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 22));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 17));
  uint64_t v2 = this + 14;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t nlv4_inference_orchestrator::trees::printTree(nlv4_inference_orchestrator::trees *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  long long v31 = 0u;
  memset(v30, 0, sizeof(v30));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, a2);
  int v29 = 0;
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(v30, (long long *)&v23);
  v35.__locale_ = (std::locale::__imp *)v28;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = *((void *)&v31 + 1);
  if (*((void *)&v31 + 1))
  {
    long long v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      unint64_t v5 = v3 + v31 - 1;
      uint64_t v6 = *(void *)(v30[1] + 8 * (v5 / 0x1A));
      unint64_t v7 = v5 % 0x1A;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, (const nlv4_inference_orchestrator::trees::TreeNode *)(v6 + 152 * (v5 % 0x1A)));
      int v29 = *(_DWORD *)(v6 + 152 * v7 + 144);
      std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(v30);
      for (std::__wrap_iter<const char *>::iterator_type i = (nlv4_inference_orchestrator::trees::TreeNode *)v28[1];
            i != (nlv4_inference_orchestrator::trees::TreeNode *)v28[0];
            std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(v30, i, &v35))
      {
        std::__wrap_iter<const char *>::iterator_type i = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)i - 144);
        LODWORD(v35.__locale_) = v29 + 1;
      }
      uint64_t v9 = (4 * v29);
      if (v9)
      {
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          --v9;
        }
        while (v9);
      }
      if ((v27 & 0x80u) == 0) {
        v10 = __p;
      }
      else {
        v10 = (void **)__p[0];
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v11 = v27;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v10, v11);
      __int16 v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v14 = &v23;
      }
      else {
        unsigned int v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
      if ((v25 & 0x80u) == 0) {
        __int16 v18 = v24;
      }
      else {
        __int16 v18 = (void **)v24[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v19 = v25;
      }
      else {
        uint64_t v19 = (uint64_t)v24[1];
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      std::string v21 = std::locale::use_facet(&v35, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v35);
      std::ostream::put();
      std::ostream::flush();
      v35.__locale_ = (std::locale::__imp *)v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      if ((char)v27 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v25 < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = *((void *)&v31 + 1);
    }
    while (*((void *)&v31 + 1));
  }
  std::stringbuf::str();
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)v30);
  v32[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB775B50](&v34);
}

void sub_1C8EBD7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse>()
{
}

void sub_1C8EBD8FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

long long *nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::runSystemPromptedContentRuntimeHacks(long long *result, uint64_t *a2, uint64_t *a3, unsigned char *a4, long long *a5, long long **a6, uint64_t *a7)
{
  uint64_t v11 = result;
  uint64_t v12 = *a2;
  if (*a2 == a2[1]) {
    goto LABEL_14;
  }
  __int16 v13 = *(uint64_t **)(v12 + 96);
  if (v13 == *(uint64_t **)(v12 + 104)) {
    goto LABEL_14;
  }
  int v14 = *((char *)v13 + 23);
  if (v14 < 0)
  {
    if (v13[1] != 13)
    {
LABEL_14:
      BOOL v18 = 0;
      goto LABEL_15;
    }
    __int16 v13 = (uint64_t *)*v13;
  }
  else if (v14 != 13)
  {
    goto LABEL_14;
  }
  char v15 = (uint64_t *)*v13;
  uint64_t v16 = *(uint64_t *)((char *)v13 + 5);
  BOOL v18 = v15 == (uint64_t *)0x636E614372657355 && v16 == 0x64656C6C65636E61;
LABEL_15:
  int v19 = *((char *)a3 + 23);
  if (v19 < 0)
  {
    if (a3[1] != 5)
    {
LABEL_30:
      BOOL v22 = 0;
      goto LABEL_32;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v19 != 5)
  {
    goto LABEL_30;
  }
  BOOL v22 = *(_DWORD *)a3 == 1247764842 && *((unsigned char *)a3 + 4) == 80
     || *(_DWORD *)a3 == 1147102564 && *((unsigned char *)a3 + 4) == 69;
LABEL_32:
  if (a4[48])
  {
    if (!v18 || v22)
    {
      long long v41 = *a5;
      uint64_t v42 = *((void *)a5 + 2);
      result = (long long *)nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v41, off_1E6580340, &v39);
      if (v40)
      {
        if (!_os_feature_enabled_impl())
        {
          uint64_t v28 = *((void *)*a6 + 1);
          if (*((void *)*a6 + 2) != v28)
          {
            double v29 = *(double *)(*(void *)v28 + 48);
            uint64_t v30 = **((void **)v39 + 1);
            *(unsigned char *)(v30 + 88) |= 2u;
            *(double *)(v30 + 48) = v29 * 0.9;
          }
          PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse>();
        }
        std::string v23 = v39;
        v39 = 0;
        unint64_t v24 = *a6;
        *a6 = v23;
        if (v24) {
          (*(void (**)(long long *))(*(void *)v24 + 8))(v24);
        }
        unsigned __int8 v25 = (long long *)((char *)v11 + 296);
        unint64_t v26 = a7[1];
        if (v26 >= a7[2])
        {
          uint64_t v27 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v25);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v25);
          uint64_t v27 = v26 + 24;
        }
        a7[1] = v27;
        result = v39;
        if (v39) {
          result = (long long *)(*(uint64_t (**)(long long *))(*(void *)v39 + 8))(v39);
        }
      }
    }
  }
  if (a4[49]) {
    char v31 = v18;
  }
  else {
    char v31 = 1;
  }
  if ((v31 & 1) == 0)
  {
    long long v41 = *a5;
    uint64_t v42 = *((void *)a5 + 2);
    result = (long long *)nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v41, off_1E6580358, &v39);
    if (v40)
    {
      v32 = v11 + 23;
      unint64_t v33 = a7[1];
      if (v33 >= a7[2])
      {
        uint64_t v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v32);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v32);
        uint64_t v34 = v33 + 24;
      }
      a7[1] = v34;
      result = *a6;
      *a6 = v39;
      if (result) {
        result = (long long *)(*(uint64_t (**)(long long *))(*(void *)result + 8))(result);
      }
    }
  }
  if (a4[50]) {
    char v35 = v18;
  }
  else {
    char v35 = 1;
  }
  if ((v35 & 1) == 0)
  {
    long long v41 = *a5;
    uint64_t v42 = *((void *)a5 + 2);
    result = (long long *)nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v41, off_1E6580370, &v39);
    if (v40)
    {
      unsigned __int32 v36 = (long long *)((char *)v11 + 392);
      unint64_t v37 = a7[1];
      if (v37 >= a7[2])
      {
        uint64_t v38 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v36);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v36);
        uint64_t v38 = v37 + 24;
      }
      a7[1] = v38;
      result = *a6;
      *a6 = v39;
      if (result) {
        return (long long *)(*(uint64_t (**)(long long *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_1C8EBDD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::insertExecutedHandcraftedRulesIntoFeatureStore(uint64_t *a1, uint64_t a2)
{
  if (!_os_feature_enabled_impl())
  {
    long long v4 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_9;
    }
    *(_WORD *)unint64_t v7 = 0;
    unint64_t v5 = "Skipping insertion of NLv4 executed handcrafted rules into FeatureStore because SNLPFeatureStoreEnabled feature"
         " flag is disabled";
    goto LABEL_8;
  }
  if (*(unsigned char *)(a2 + 24)) {
    nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getExecutedHandcraftedRules(a1, (sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)v7);
  }
  long long v4 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v7 = 0;
    unint64_t v5 = "nlu_request_id not found so skipping insertion of executed handcrafted rules into FeatureStore";
LABEL_8:
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, v5, v7, 2u);
  }
LABEL_9:
  uint64_t v6 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "Unable to insert NLv4 executed handcrafted rules into FeatureStore", v7, 2u);
  }
}

void std::vector<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<float,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        unint64_t v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getExecutedHandcraftedRules(uint64_t *a1@<X0>, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2@<X8>)
{
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&v9);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = v11;
    do
    {
      if ((unint64_t)v6 >= v12)
      {
        uint64_t v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v10, (long long *)v4);
      }
      else
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
        }
        else
        {
          long long v7 = *(_OWORD *)v4;
          v6->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        ++v6;
      }
      uint64_t v11 = v6;
      v4 += 24;
    }
    while (v4 != v5);
  }
  long long v8 = (sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(a2);
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::makeRules(v8);
  operator new();
}

__n128 std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v10 = *(long long *)((char *)a2 + 24);
  *(void *)(v8 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v11 = a2[3];
  *(void *)(v8 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(v8 + 48) = v11;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(_OWORD *)(v8 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(v8 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  __n128 result = (__n128)a2[7];
  long long v13 = a2[8];
  *(__n128 *)(v8 + 112) = result;
  *(_OWORD *)(v8 + 128) = v13;
  *(_DWORD *)(v8 + 144) = *((_DWORD *)a2 + 36);
  ++a1[5];
  return result;
}

void std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](*(void *)(a1[1] + 8 * (v2 / 0x1A)) + 152 * (v2 % 0x1A));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 26 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x34)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

std::string *std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(void *a1, nlv4_inference_orchestrator::trees::TreeNode *a2, _DWORD *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 26 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    long long v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    long long v10 = (std::string *)(*(void *)(v6 + 8 * (v9 / 0x1A)) + 152 * (v9 % 0x1A));
  }
  __n128 result = nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v10, a2);
  LODWORD(result[6].__r_.__value_.__l.__data_) = *a3;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x1A];
    uint64_t v6 = (uint64_t)*v5 + 152 * (v4 % 0x1A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x1A] + 152 * ((*(void *)(a1 + 40) + v4) % 0x1A);
    if (v6 != v7)
    {
      do
      {
        std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](v6);
        v6 += 152;
        if (v6 - (void)*v5 == 3952)
        {
          uint64_t v8 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 13;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 26;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v40);
      uint64_t v42 = &v41[8 * (v40 >> 2)];
      std::vector<std::ssub_match>::pointer v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        unint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)unint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  int v19 = (char *)a1[3];
  std::string v21 = (char *)*a1;
  BOOL v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    unsigned __int8 v25 = operator new(0xF70uLL);
    unint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
      BOOL v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v55 = (uint64_t *)a1[1];
      uint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        uint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        BOOL v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
      uint64_t v42 = &v41[8 * (v85 >> 2)];
      std::vector<std::ssub_match>::pointer v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      std::regex_iterator<std::__wrap_iter<const char *>, char> v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
  uint64_t v31 = v30;
  v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  uint64_t v34 = operator new(0xF70uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_1C8EBEA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::~ReplaceFromPersonRecipientHack(void **this)
{
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table((uint64_t)(this + 6));
  unint64_t v2 = this + 3;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::~DefaultValueMediaPlaybackSpeed(void **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 66));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 61));
  if (*((char *)this + 487) < 0) {
    operator delete(this[58]);
  }
  if (*((char *)this + 463) < 0) {
    operator delete(this[55]);
  }
  if (*((char *)this + 439) < 0) {
    operator delete(this[52]);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  unint64_t v2 = this + 3;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::trees::join(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  if (a2 == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  else
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v16 = *(std::string *)a2;
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string __p = *(std::string *)a4;
    }
    for (uint64_t i = a2 + 24; i != a3; i += 24)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v17, (const void **)&v16.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
      int v9 = *(char *)(i + 23);
      if (v9 >= 0) {
        uint64_t v10 = (const std::string::value_type *)i;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)i;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *(unsigned __int8 *)(i + 23);
      }
      else {
        std::string::size_type v11 = *(void *)(i + 8);
      }
      BOOL v12 = std::string::append(&v17, v10, v11);
      std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
      v18[0] = v12->__r_.__value_.__l.__size_;
      *(void *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
      char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      v16.__r_.__value_.__r.__words[0] = v13;
      v16.__r_.__value_.__l.__size_ = v18[0];
      *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v18 + 7);
      *((unsigned char *)&v16.__r_.__value_.__s + 23) = v14;
    }
    *a1 = v16;
    memset(&v16, 0, sizeof(v16));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C8EBEF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  unint64_t v4 = v2;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
  {
    BOOL v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      int v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      std::string::size_type v11 = (std::string *)(a4 + v7 + 24);
      BOOL v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(a2 + v7 + 32));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(a4 + v7 + 40) = *(void *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C8EBF0B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  while (v2 != v1)
  {
    v2 -= 48;
    std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  BOOL v3 = (void **)a1;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(48 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        long long v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v8[v9], *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)long long v10 = *(_OWORD *)v11;
          *((void *)v10 + 2) = *(void *)(v11 + 16);
        }
        BOOL v12 = (std::string *)&v8[v9 + 24];
        long long v13 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *v13, *(void *)(a2 + v9 + 32));
        }
        else
        {
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
          *(void *)&v8[v9 + 40] = *(void *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1C8EBF2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = p_match->__matches_.__end_;
  uint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  uint64_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    uint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    BOOL v10 = (void **)&v15;
  }
  else {
    BOOL v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1C8EBF4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1C8EBF8B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    uint64_t v8 = v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    size_t v9 = a1->__end_;
    BOOL v10 = v8 + 1;
    size_t v11 = v8 + 1;
    do
    {
      uint64_t v8 = v11;
      size_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v10 == v8) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 == (char *)a3) {
    return (unsigned __int8 *)a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      char v6 = v3;
      unsigned int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    size_t v9 = a1->__end_;
    BOOL v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    size_t v7 = v6;
    char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    char v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      char v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  BOOL v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      char v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      char v14 = (unsigned __int8 *)&a2[v16];
    }
    if (v14 != (unsigned __int8 *)a2)
    {
LABEL_25:
      if (v14 == (unsigned __int8 *)a2 && v14 != (unsigned __int8 *)a3)
      {
        int v17 = *a2;
        if (v17 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v17 != 40)
        {
          if (v17 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v18 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        size_t v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v19 == a3 || (uint64_t v20 = v19, *v19 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v18);
        --*(_DWORD *)(a1 + 36);
        char v14 = (unsigned __int8 *)(v20 + 1);
      }
      if (v14 != (unsigned __int8 *)a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  char v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v21 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v21);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              size_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            size_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unsigned __int8 v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_136;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    int v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        int v11 = a3;
        goto LABEL_114;
      }
      int v10 = *(unsigned __int8 *)v5;
      int v11 = (char *)v5;
      if (v10 != 93) {
        break;
      }
LABEL_114:
      uint64_t v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      int v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v39.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              int v17 = *v11;
              if (v17 != 93)
              {
                BOOL v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  BOOL v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if (v19 == 92)
                    {
                      if (v5) {
                        size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      }
                      else {
                        size_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
                      }
LABEL_120:
                      BOOL v20 = v21;
LABEL_121:
                      *(_OWORD *)unint64_t v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      std::string::size_type v36 = v39.__r_.__value_.__r.__words[2];
                      std::string v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      uint64_t v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v38.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v41) < 0) {
                        operator delete(v40[0]);
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      char v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v39.__r_.__value_.__l.__data_);
                      }
                      int v11 = v20;
                      if ((v29 & 1) == 0) {
                        goto LABEL_115;
                      }
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  char v29 = 1;
                  BOOL v20 = v11;
                  goto LABEL_111;
                }
                size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
            {
              size_t v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1) {
                goto LABEL_43;
              }
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            int v15 = *v11;
            if (v15 == 92)
            {
              uint64_t v16 = v11 + 1;
              if (v5)
              {
                int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                uint64_t v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (unint64_t i = 0; ; ++i)
          {
            size_t v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
              break;
            }
            if (&v8[-v5] == (char *)i) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
LABEL_135:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v27 = &__p;
          }
          else {
            int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (j = 0; ; ++j)
          {
            size_t v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93) {
              break;
            }
            if (&v8[-v5] == j) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
            goto LABEL_135;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_) {
LABEL_137:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_137;
            }
            uint64_t v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          v32 = (void *)HIBYTE(v41);
          if (v41 < 0) {
            v32 = v40[1];
          }
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v40);
          }
          else
          {
            std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
            }
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v35 = &__p;
              }
              else {
                long long v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v34 = &__p;
              }
              else {
                uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0) {
            operator delete(v40[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v29 = 0;
LABEL_110:
          uint64_t v5 = (uint64_t)(v14 + 2);
          BOOL v20 = v9;
          goto LABEL_111;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    int v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_1C8EC081C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  unsigned int v6 = a2;
  for (unint64_t i = a2; ; v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unsigned int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unsigned int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  size_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              size_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unsigned int v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unsigned int v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unsigned int v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_64;
    }
    unsigned int v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EC1140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 != (char *)a3)
  {
    if ((std::vector<std::ssub_match>::pointer end = a1->__end_,
          unsigned int marked_count = a1->__marked_count_,
          int v9 = (unsigned __int8 *)(a2 + 1),
          int v8 = *a2,
          a2 + 1 == (char *)a3)
      && v8 == 36
      || ((v8 - 46) <= 0x2E
        ? (BOOL v10 = ((1 << (v8 - 46)) & 0x600000000001) == 0)
        : (BOOL v10 = 1),
          !v10))
    {
      std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
      if (v11 == v3)
      {
        if (*v3 == 46) {
          operator new();
        }
        std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      std::string v11 = v3 + 1;
    }
    if (v3 == v11 && v9 != a3 && *v3 == 92)
    {
      if (2 * (v3[1] == 40))
      {
        uint64_t v12 = (uint64_t)&v3[2 * (v3[1] == 40)];
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v13 = a1->__marked_count_;
        do
        {
          std::string::value_type v14 = (unsigned __int8 *)v12;
          uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v12, a3);
        }
        while (v14 != (unsigned __int8 *)v12);
        if (v14 == a3 || v14 + 1 == a3 || *v14 != 92 || v14[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::string v11 = (char *)(v14 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v13);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        std::string v11 = &v3[v16];
      }
    }
    if (v11 != v3)
    {
      if (v11 == (char *)a3) {
        return (char *)a3;
      }
      size_t v17 = a1->__marked_count_ + 1;
      int v18 = *v11;
      if (v18 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return ++v11;
      }
      if (v11 + 1 == (char *)a3 || v18 != 92 || v11[1] != 123) {
        return v11;
      }
      BOOL v20 = (unsigned __int8 *)(v11 + 2);
      int v29 = 0;
      size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20, a3, &v29);
      if (v20 == v21) {
LABEL_46:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v21 != a3)
      {
        BOOL v22 = v21 + 1;
        int v23 = *v21;
        if (v23 == 44)
        {
          int v28 = -1;
          int v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v21 + 1, a3, &v28);
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            size_t v26 = v28;
            size_t v25 = v29;
            if (v28 == -1)
            {
              size_t v26 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_46;
            }
            std::string v11 = (char *)&v24[2 * (v24[1] == 125)];
            int v27 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v27, v25, v26, end, marked_count + 1, v17, 1);
            return v11;
          }
        }
        else if (v22 != a3 && v23 == 92 && *v22 == 125)
        {
          std::string v11 = (char *)(v21 + 2);
          size_t v25 = v29;
          int v27 = a1;
          size_t v26 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_33;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_22:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_22;
  }
  BOOL v8 = v6 == 40;
  unint64_t v7 = (char *)(a2 + 1);
  BOOL v8 = !v8 || v7 == a3;
  if (!v8)
  {
    BOOL v8 = *v7 == 63;
    int v9 = (char *)(a2 + 2);
    if (v8 && v9 != a3)
    {
      int v11 = *v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int marked_count = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v11 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int v13 = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::string::value_type v14 = (unsigned __int8 *)(v12 + 1);
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v46.__traits_.__loc_);
      if (v12 + 1 != (char *)a2) {
        return v14;
      }
    }
  }
LABEL_33:
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  int v21 = (char)*a2;
  int v22 = *a2;
  if (v21 <= 91)
  {
    int v23 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_96;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          int v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --a1->__open_count_;
            int v23 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_91;
          }
LABEL_96:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v29 = a1->__marked_count_;
        ++a1->__open_count_;
        std::string::size_type v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v30 == a3) {
          goto LABEL_96;
        }
        uint64_t v31 = v30;
        if (*v30 != 41) {
          goto LABEL_96;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        --a1->__open_count_;
        int v23 = (unsigned __int8 *)(v31 + 1);
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        operator new();
      default:
        if (v21 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_91;
        }
        if (v21 != 63) {
          goto LABEL_56;
        }
        goto LABEL_58;
    }
  }
  uint64_t v25 = (v21 - 92);
  if (v25 > 0x21) {
    goto LABEL_56;
  }
  int v23 = a2;
  if (((1 << v25) & 0x300000006) != 0) {
    goto LABEL_91;
  }
  if (v25)
  {
    if (v25 == 31) {
LABEL_58:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v22);
    int v23 = a2 + 1;
    goto LABEL_91;
  }
  int v23 = a2;
  if (v22 != 92) {
    goto LABEL_91;
  }
  size_t v26 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v27 = *v26;
  unsigned int v28 = v27 - 48;
  if (v27 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_90:
    int v23 = a2 + 2;
    goto LABEL_91;
  }
  if ((v27 - 49) <= 8)
  {
    int v23 = a2 + 2;
    if (a2 + 2 == (unsigned __int8 *)a3)
    {
      int v23 = (unsigned __int8 *)a3;
    }
    else
    {
      while (1)
      {
        int v32 = *v23;
        if ((v32 - 48) > 9) {
          break;
        }
        if (v28 >= 0x19999999) {
          goto LABEL_97;
        }
        ++v23;
        unsigned int v28 = v32 + 10 * v28 - 48;
        if (v23 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
          break;
        }
      }
      if (!v28) {
LABEL_97:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v28 > v20) {
      goto LABEL_97;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
    if (v26 != (char *)v23) {
      goto LABEL_91;
    }
  }
  int v33 = *v26;
  if (v33 > 99)
  {
    if (v33 == 119)
    {
      uint64_t v34 = a1;
      BOOL v35 = 0;
      goto LABEL_82;
    }
    if (v33 == 115)
    {
      uint64_t v42 = a1;
      BOOL v43 = 0;
      goto LABEL_88;
    }
    if (v33 != 100) {
      goto LABEL_83;
    }
    std::string::size_type v36 = a1;
    BOOL v37 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
    int v39 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v39;
    goto LABEL_90;
  }
  switch(v33)
  {
    case 'D':
      std::string::size_type v36 = a1;
      BOOL v37 = 1;
      goto LABEL_80;
    case 'S':
      uint64_t v42 = a1;
      BOOL v43 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
      int v39 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      uint64_t v34 = a1;
      BOOL v35 = 1;
LABEL_82:
      unint64_t v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      v40->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
      goto LABEL_90;
  }
LABEL_83:
  uint64_t v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v26 == (char *)v41) {
    int v23 = a2;
  }
  else {
    int v23 = (unsigned __int8 *)v41;
  }
LABEL_91:
  std::string::value_type v14 = a2;
  if (v23 == a2) {
    return v14;
  }
  size_t v44 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v23, (unsigned __int8 *)a3, end, v20 + 1, v44);
}

void sub_1C8EC1AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getMulticardinalVocabPathGivenSpanVocabPath(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v5, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v5, (uint64_t)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a3, (uint64_t)__p, (std::__fs::filesystem::path *)(a1 + 176));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EC1B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getVersionYamlPathGivenSpanVocabPath(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v5, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v5, (uint64_t)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a3, (uint64_t)__p, (std::__fs::filesystem::path *)(a1 + 272));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EC1C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8EC1DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C8EC1E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8EC21A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);

  _Unwind_Resume(a1);
}

void sub_1C8EC22B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(void **this)
{
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(void **this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)(this + 54));
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)(this + 54));
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(this);
}

void non-virtual thunk to'nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t v1 = (void **)((char *)this - 432);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(v1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::determineAndValidateModelType(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t result = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(void *)this + 192))(this);
  *((unsigned char *)this + 512) = result;
  if (result)
  {
    if (!*((_DWORD *)this + 2))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v4, "Feature mask rank unset for SubOwl model.");
      std::runtime_error::runtime_error(exception, &v4);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F060;
    }
  }
  return result;
}

void sub_1C8EC2798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertModuleLoadingError::~BertModuleLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setFeaturePoolingMask(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 208, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setUtteranceTokensMask(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 400, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setUtteranceTokens(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 376, a2);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isSubwordEmbeddingsModel(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t v2 = (char *)this + 16;
  unint64_t v3 = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(void *)this + 8))(this, (char *)this + 112);
  if (!nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid((uint64_t)this, (uint64_t)v2))return 0; {
  v27[48] = 0;
  }
  v28[0] = 0;
  v28[48] = 0;
  v29[0] = 0;
  v29[48] = 0;
  v30[0] = 0;
  v30[48] = 0;
  v31[0] = 0;
  v31[48] = 0;
  v32[0] = 0;
  v32[48] = 0;
  memset(__p, 0, sizeof(__p));
  v27[0] = 0;
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100]((uint64_t)v28);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100]((uint64_t)v29);
  std::string v4 = operator new(0x10uLL);
  *((void *)&v22 + 1) = v4 + 2;
  int v23 = v4 + 2;
  void *v4 = 1;
  v4[1] = v3;
  *(void *)&long long v22 = v4;
  int v21 = 0;
  std::vector<float>::vector(&v24, v3, &v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v22;
  __p[2] = v23;
  int v23 = 0;
  long long v22 = 0uLL;
  std::string v5 = __p[3];
  if (__p[3])
  {
    __p[4] = __p[3];
    operator delete(__p[3]);
    std::string v5 = (void *)v22;
  }
  *(_OWORD *)&__p[3] = v24;
  __p[5] = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  if (v5)
  {
    *((void *)&v22 + 1) = v5;
    operator delete(v5);
  }
  int v6 = operator new(0x10uLL);
  *((void *)&v22 + 1) = v6 + 2;
  int v23 = v6 + 2;
  void *v6 = 1;
  v6[1] = v3;
  *(void *)&long long v22 = v6;
  int v21 = 0;
  std::vector<float>::vector(&v24, v3, &v21);
  std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v27, (uint64_t)&v22);
  if ((void)v24)
  {
    *((void *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  if ((void)v22)
  {
    *((void *)&v22 + 1) = v22;
    operator delete((void *)v22);
  }
  int v7 = *((_DWORD *)this + 2);
  if (v7 == 3)
  {
    int v11 = operator new(0x18uLL);
    *((void *)&v22 + 1) = v11 + 3;
    int v23 = v11 + 3;
    *int v11 = 1;
    v11[1] = v3;
    v11[2] = v3;
    *(void *)&long long v22 = v11;
    int v21 = 0;
    std::vector<float>::vector(&v24, v3 * v3, &v21);
    int v9 = v29;
    goto LABEL_17;
  }
  if (v7 == 2)
  {
    BOOL v8 = operator new(0x10uLL);
    *((void *)&v22 + 1) = v8 + 2;
    int v23 = v8 + 2;
    void *v8 = 1;
    v8[1] = v3;
    *(void *)&long long v22 = v8;
    int v21 = 0;
    std::vector<float>::vector(&v24, v3, &v21);
    int v9 = v28;
LABEL_17:
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v9, (uint64_t)&v22);
    if ((void)v24)
    {
      *((void *)&v24 + 1) = v24;
      operator delete((void *)v24);
    }
    if ((void)v22)
    {
      *((void *)&v22 + 1) = v22;
      operator delete((void *)v22);
    }
  }
  (**(void (***)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, void **))this)(v16, this, __p);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  (*(void (**)(long long *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(void *)this + 160))(&v22, this, v2);
  uint64_t v12 = (float *)*((void *)&v24 + 1);
  uint64_t v25 = 0;
  unsigned int v13 = (float *)v24;
  long long v24 = 0uLL;
  if ((void)v22)
  {
    *((void *)&v22 + 1) = v22;
    uint64_t v15 = v12;
    operator delete((void *)v22);
    uint64_t v12 = v15;
  }
  if (v12 == v13) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  BOOL v10 = *v13 != 0.0;
  operator delete(v13);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v32);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v31);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
  if (__p[3])
  {
    __p[4] = __p[3];
    operator delete(__p[3]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1C8EC2C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&a39);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    unint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

uint64_t std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    std::string v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string v5 = *(void **)(a1 + 24);
    if (v5)
    {
      *(void *)(a1 + 32) = v5;
      operator delete(v5);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setInputTensors(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this, nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(void *)this + 200))(this);
  if (!*((unsigned char *)a2 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Invalid utteranceTokensMask!");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t result = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(void *)this + 208))(this, (char *)a2 + 48);
  if (*((unsigned char *)a2 + 152)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((unsigned char *)a2 + 208) == 0;
  }
  if (!v5)
  {
    int v6 = *((_DWORD *)this + 2);
    if (v6 == 2)
    {
      if (!*((unsigned char *)a2 + 152))
      {
        int v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v12, "Invalid featurePoolingMask!");
        std::runtime_error::runtime_error(v11, &v12);
        v11->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
      }
      int v7 = (char *)a2 + 104;
    }
    else
    {
      if (v6 != 3) {
        return result;
      }
      if (!*((unsigned char *)a2 + 208))
      {
        BOOL v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v12, "Invalid featurePoolingMask2D!");
        std::runtime_error::runtime_error(v10, &v12);
        v10->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
      }
      int v7 = (char *)a2 + 160;
    }
    BOOL v8 = *(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(void *)this + 216);
    return v8(this, v7);
  }
  return result;
}

void sub_1C8EC3028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getModuleOutput(uint64_t a1@<X8>)
{
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractFeaturePoolingRank(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t v2 = 0;
  unint64_t v3 = (unsigned __int8 **)((char *)this + 208);
  while (1)
  {
    input_blob_name = (char *)espresso_get_input_blob_name();
    if (!input_blob_name) {
      return 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&__s1, input_blob_name);
    uint64_t v5 = v16;
    unsigned __int8 v6 = v16;
    if ((v16 & 0x80u) == 0) {
      size_t v7 = v16;
    }
    else {
      size_t v7 = __n;
    }
    uint64_t v8 = *((unsigned __int8 *)this + 231);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)this + 27);
    }
    if (v7 == v8)
    {
      if (v9 >= 0) {
        BOOL v10 = (unsigned __int8 *)v3;
      }
      else {
        BOOL v10 = *v3;
      }
      if ((char)v16 < 0)
      {
        std::string v12 = __s1;
        if (memcmp(__s1, v10, __n)) {
          goto LABEL_22;
        }
      }
      else if (v16)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v10)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v10;
          if (!--v5) {
            goto LABEL_19;
          }
        }
        goto LABEL_20;
      }
LABEL_19:
      espresso_network_query_blob_shape();
      nlv4_inference_orchestrator::inference_engine::assertValidFeaturePoolingRank(0);
      unsigned __int8 v6 = v16;
    }
LABEL_20:
    if ((v6 & 0x80) == 0) {
      goto LABEL_23;
    }
    std::string v12 = __s1;
LABEL_22:
    operator delete(v12);
LABEL_23:
    ++v2;
  }
}

void sub_1C8EC3194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractSubwordFeaturesOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t result = (char *)espresso_get_output_blob_name();
    if (!result) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return result;
}

void sub_1C8EC3248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractSentenceFeaturesOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t result = (char *)espresso_get_output_blob_name();
    if (!result) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return result;
}

void sub_1C8EC3318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractRequiresSubwordEmbeddingsOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t result = (char *)espresso_get_output_blob_name();
    if (!result) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return result;
}

void sub_1C8EC33E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractTokenFeaturesOutputName@<W0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (uint64_t i = 0; ; ++i)
  {
    output_blob_name = (char *)espresso_get_output_blob_name();
    if (!output_blob_name) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, output_blob_name);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return nlv4_inference_orchestrator::inference_engine::BertModule::assertValidFeatureExtractionOutputTensorName((uint64_t)this, (uint64_t)a2);
}

void sub_1C8EC34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getSubwordEmbeddings(uint64_t a1@<X8>)
{
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getSentenceEmbeddings(uint64_t a1@<X8>)
{
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getEmbeddings(uint64_t a1@<X8>)
{
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  return 0;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  return *((unsigned __int8 *)this + 512);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getModuleNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(a1 + 432, a2);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::forward(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  std::string v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Executing OWL espresso v1 inference.", (uint8_t *)v5, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)v5, a2);
  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, void **))(*(void *)this + 168))(this, v5);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan((nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *)((char *)this + 432));
  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(void *)this + 176))(this);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v13);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v11);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
  if (__p)
  {
    size_t v7 = __p;
    operator delete(__p);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_1C8EC36DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::BertPreE5MLModule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = (nlv4_inference_orchestrator::inference_engine::BertModule *)((char *)nlv4_inference_orchestrator::inference_engine::BertModule::BertModule((nlv4_inference_orchestrator::inference_engine::BertModule *)a1)
                                                                   + 432);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(v6, a2, a3);
  *(void *)a1 = &unk_1F235EF00;
  *(void *)(a1 + 432) = &unk_1F235EFF8;
  *(unsigned char *)(a1 + 512) = 0;
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(v6);
  nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput((nlv4_inference_orchestrator::inference_engine::BertModule *)a1);
  nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::determineAndValidateModelType((nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *)a1);
  return a1;
}

void sub_1C8EC3790(_Unwind_Exception *a1)
{
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNamesToLabelComponents(void *a1@<X0>, int **a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unsigned __int8 v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      int v8 = *v6;
      nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNameToLabelComponent(a1, *v6, &__p);
      if (v34)
      {
        unint64_t v10 = a4[1];
        unint64_t v9 = a4[2];
        if (v10 >= v9)
        {
          unint64_t v16 = *a4;
          uint64_t v17 = (uint64_t)(v10 - *a4) >> 5;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 59) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v9 - v16;
          if (v19 >> 4 > v18) {
            unint64_t v18 = v19 >> 4;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          BOOL v37 = a4 + 2;
          if (v20)
          {
            if (v20 >> 59) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v21 = (char *)operator new(32 * v20);
          }
          else
          {
            int v21 = 0;
          }
          int v23 = &v21[32 * v17];
          *(void *)std::string buf = v21;
          *(void *)&buf[8] = v23;
          *(void *)&buf[16] = v23;
          std::string::size_type v36 = &v21[32 * v20];
          *(_DWORD *)int v23 = v8;
          long long v24 = (std::string *)(v23 + 8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            unint64_t v16 = *a4;
            unint64_t v10 = a4[1];
            uint64_t v25 = *(char **)&buf[16];
            int v23 = *(char **)&buf[8];
          }
          else
          {
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((void *)v23 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
            uint64_t v25 = v23;
          }
          unint64_t v22 = (unint64_t)(v25 + 32);
          *(void *)&buf[16] = v25 + 32;
          if (v10 == v16)
          {
            int64x2_t v28 = vdupq_n_s64(v16);
          }
          else
          {
            do
            {
              int v26 = *(_DWORD *)(v10 - 32);
              v10 -= 32;
              *((_DWORD *)v23 - 8) = v26;
              v23 -= 32;
              long long v27 = *(_OWORD *)(v10 + 8);
              *((void *)v23 + 3) = *(void *)(v10 + 24);
              *(_OWORD *)(v23 + 8) = v27;
              *(void *)(v10 + 16) = 0;
              *(void *)(v10 + 24) = 0;
              *(void *)(v10 + 8) = 0;
            }
            while (v10 != v16);
            int64x2_t v28 = *(int64x2_t *)a4;
            unint64_t v22 = *(void *)&buf[16];
          }
          *a4 = (unint64_t)v23;
          a4[1] = v22;
          *(int64x2_t *)&buf[8] = v28;
          unsigned int v29 = (char *)a4[2];
          a4[2] = (unint64_t)v36;
          std::string::size_type v36 = v29;
          *(void *)std::string buf = v28.i64[0];
          std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *(_DWORD *)unint64_t v10 = v8;
          uint64_t v11 = (std::string *)(v10 + 8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v10 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          }
          unint64_t v22 = v10 + 32;
          a4[1] = v10 + 32;
        }
        a4[1] = v22;
      }
      else
      {
        uint64_t v13 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *a3;
          if (v14 >= 8)
          {
            std::string::size_type v30 = SNLPOSLoggerForCategory(4);
            BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
            uint64_t v15 = "<UNDEFINED_COMPONENT>";
            if (v31)
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&buf[4] = "<UNDEFINED_COMPONENT>";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v14;
              _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
              uint64_t v15 = "<UNDEFINED_COMPONENT>";
            }
          }
          else
          {
            uint64_t v15 = off_1E65808C8[v14];
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEFAULT, "[%s] Warning: encountered unknown span matcher name: %d", buf, 0x12u);
        }
      }
      if (v34)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_1C8EC3ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  v23[1] = v24;
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  std::string __p = v23;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNameToLabelComponent(void *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string v4 = std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(a1, a2);
  if (v4)
  {
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v4[3], v4[4]);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 3);
      a3->__r_.__value_.__r.__words[2] = v4[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v6;
}

void std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    std::string v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForEntityNode(const siri::ontology::UsoEntityNode *a1@<X1>, std::string *a2@<X8>)
{
  siri::ontology::UsoEntityNode::getIdentifiers((uint64_t *)&v10, a1);
  uint64_t v4 = v10;
  if (v10 == v11)
  {
    BOOL v5 = 1;
    if (v10)
    {
LABEL_11:
      uint64_t v11 = v4;
      operator delete(v4);
    }
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)(*(void *)v10 + 48));
    BOOL v5 = v9 == 0;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        int v6 = v9;
        int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1].__r_.__value_.__s.__data_[0] = 1;
        if (v6 && v7 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *a2 = __p;
        a2[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    uint64_t v4 = v10;
    if (v10) {
      goto LABEL_11;
    }
  }
  if (v5)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_1C8EC3D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 && a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForNode(const void *a1@<X1>, std::string *a2@<X8>)
{
  if ((*(unsigned int (**)(const void *))(*(void *)a1 + 16))(a1) - 2 >= 3)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (!v4) {
      __cxa_bad_cast();
    }
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForEntityNode(v4, a2);
  }
}

void sub_1C8EC3FAC(_Unwind_Exception *a1)
{
}

void sub_1C8EC3FB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::addExtraEntityInformation(siri::ontology::UsoGraph *a1@<X1>, unsigned __int8 *a2@<X2>, std::string *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v27, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>(__p, "|");
  uint64_t v6 = a2[23];
  unsigned __int8 v7 = v6;
  std::string::size_type v8 = *((void *)a2 + 1);
  if ((v6 & 0x80u) == 0) {
    unsigned __int8 v9 = (void *)a2[23];
  }
  else {
    unsigned __int8 v9 = (void *)*((void *)a2 + 1);
  }
  unint64_t v10 = v28;
  if ((v28 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v27[1];
  }
  if (v9 != (void *)v10) {
    goto LABEL_24;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v11 = v27;
  }
  else {
    uint64_t v11 = (void **)v27[0];
  }
  if ((char)v6 < 0)
  {
    uint64_t v13 = *(const std::string::value_type **)a2;
    if (memcmp(*(const void **)a2, v11, *((void *)a2 + 1)))
    {
LABEL_27:
      std::string::__init_copy_ctor_external(a3, v13, v8);
      goto LABEL_28;
    }
  }
  else if ((_BYTE)v6)
  {
    long long v12 = a2;
    while (*v12 == *(unsigned __int8 *)v11)
    {
      ++v12;
      uint64_t v11 = (void **)((char *)v11 + 1);
      if (!--v6) {
        goto LABEL_17;
      }
    }
    goto LABEL_24;
  }
LABEL_17:
  siri::ontology::UsoGraph::getNodes((uint64_t *)&v23, a1);
  uint64_t v14 = (const void **)v23;
  uint64_t v15 = v24;
  if (v23 == v24)
  {
LABEL_21:
    if (v14)
    {
      uint64_t v24 = v14;
      operator delete(v14);
    }
    unsigned __int8 v7 = a2[23];
LABEL_24:
    if ((v7 & 0x80) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      goto LABEL_28;
    }
    uint64_t v13 = *(const std::string::value_type **)a2;
    std::string::size_type v8 = *((void *)a2 + 1);
    goto LABEL_27;
  }
  while (1)
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForNode(*v14, &v21);
    if (v22) {
      break;
    }
    if (++v14 == v15)
    {
      uint64_t v14 = (const void **)v23;
      goto LABEL_21;
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v20, (const void **)a2, (const void **)__p);
  if (!v22) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v21;
  }
  else {
    unint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  unint64_t v18 = std::string::append(&v20, (const std::string::value_type *)v16, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23)
  {
    uint64_t v24 = (const void **)v23;
    operator delete(v23);
  }
LABEL_28:
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_1C8EC41F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a21 && a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 49) < 0) {
    operator delete(*(void **)(v30 - 72));
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getEntityFromUsoGraph(siri::ontology::UsoGraph *this@<X1>, std::string *a2@<X8>)
{
  LOBYTE(__p[0]) = 0;
  char v14 = 0;
  siri::ontology::UsoGraph::getNodes((uint64_t *)&v11, this);
  std::string::size_type size = v11.__r_.__value_.__l.__size_;
  uint64_t v4 = (char *)v11.__r_.__value_.__r.__words[0];
  if (v11.__r_.__value_.__r.__words[0] == v11.__r_.__value_.__l.__size_)
  {
    int v8 = 0;
    BOOL v7 = 1;
    if (v11.__r_.__value_.__r.__words[0])
    {
LABEL_9:
      v11.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
      operator delete(v4);
    }
  }
  else
  {
    while (1)
    {
      int v6 = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
      BOOL v7 = v6 != 2;
      if (v6 == 2) {
        break;
      }
      v4 += 8;
      if (v4 == (char *)size)
      {
        int v8 = 0;
        goto LABEL_8;
      }
    }
    (*(void (**)(long long *__return_ptr))(**(void **)v4 + 48))(&v9);
    *(_OWORD *)std::string __p = v9;
    uint64_t v13 = v10;
    int v8 = 1;
    char v14 = 1;
LABEL_8:
    uint64_t v4 = (char *)v11.__r_.__value_.__r.__words[0];
    if (v11.__r_.__value_.__r.__words[0]) {
      goto LABEL_9;
    }
  }
  if (v7)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::addExtraEntityInformation(this, (unsigned __int8 *)__p, &v11);
    *a2 = v11;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
    if (v8)
    {
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C8EC43DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getLabel(uint64_t a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  v22[3] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "contactType");
    std::string::basic_string[abi:ne180100]<0>(v20, "emailType");
    std::string::basic_string[abi:ne180100]<0>(v21, "personRelationship");
    std::string::basic_string[abi:ne180100]<0>(v22, "phoneType");
    std::unordered_set<std::string>::unordered_set((uint64_t)__p, (unsigned __int8 *)&v18, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v22[i + 2]) < 0) {
        operator delete((void *)v22[i]);
      }
    }
    BOOL v7 = *(unsigned __int8 **)(a1 + 48);
    if (!v7
      || !std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(__p, v7))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v17);
      uint64_t v10 = __p[0];
      __p[0] = 0;
      if (v10) {
        operator delete(v10);
      }
      uint64_t v12 = *a2;
      std::string v11 = (std::__shared_weak_count *)a2[1];
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = v12;
        long long v19 = v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        uint64_t v18 = *a2;
        long long v19 = 0;
      }
      operator new();
    }
    int v8 = *(long long **)(a1 + 48);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      a3->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    }
    a3[1].__r_.__value_.__s.__data_[0] = 1;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v17);
    uint64_t v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    uint64_t v13 = *(long long **)(a1 + 48);
    if (v13)
    {
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        a3->__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
      }
      a3[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[1].__r_.__value_.__s.__data_[0] = 0;
    }
  }
}

void sub_1C8EC467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  if (*(unsigned char *)(a3 + 24))
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v8 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v8 = (size_t)a1[1];
    }
    long long v9 = &v30;
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, v8 + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v9 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *a1;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 43;
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a2;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a2 + 8);
    }
    long long v14 = std::string::append(&v30, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unint64_t v16 = std::string::append(&v31, "=");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (!*(unsigned char *)(a3 + 24)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      long long v19 = (const std::string::value_type *)a3;
    }
    else {
      long long v19 = *(const std::string::value_type **)a3;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a3 + 8);
    }
    std::string v21 = std::string::append(&v32, v19, v20);
    *a4 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      char v22 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v22);
    }
  }
  else
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v23 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v23 = (size_t)a1[1];
    }
    uint64_t v24 = &v32;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v23 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if (v23)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v25 = a1;
      }
      else {
        uint64_t v25 = *a1;
      }
      memmove(v24, v25, v23);
    }
    *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 43;
    int v26 = *(char *)(a2 + 23);
    if (v26 >= 0) {
      long long v27 = (const std::string::value_type *)a2;
    }
    else {
      long long v27 = *(const std::string::value_type **)a2;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(a2 + 8);
    }
    unsigned int v29 = std::string::append(&v32, v27, v28);
    *a4 = *v29;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      char v22 = (void *)v32.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
  }
}

void sub_1C8EC495C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getProcessedSpanLabel(const void **a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, int *a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  LOBYTE(v55) = 0;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(a2, a3, (uint64_t)__p, a6);
  if ((_BYTE)v55 && SHIBYTE(v54) < 0) {
    operator delete(*(void **)__p);
  }
  __p[0] = 0;
  LOBYTE(v55) = 0;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(a1, a3, (uint64_t)__p, &v52);
  if ((_BYTE)v55 && SHIBYTE(v54) < 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a4 + 3), (uint64_t)&v52);
  int8x8_t v12 = (int8x8_t)a4[1];
  if (!*(void *)&v12) {
    goto LABEL_24;
  }
  unint64_t v13 = v11;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = v11;
    if (v11 >= *(void *)&v12) {
      unint64_t v16 = v11 % *(void *)&v12;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v12 - 1) & v11;
  }
  long long v17 = *(uint64_t ***)(*a4 + 8 * v16);
  if (!v17) {
    goto LABEL_24;
  }
  int v18 = *v17;
  if (!*v17) {
    goto LABEL_24;
  }
  uint64_t v19 = (uint64_t)(a4 + 4);
  while (1)
  {
    unint64_t v20 = v18[1];
    if (v13 == v20) {
      break;
    }
    if (v15 > 1)
    {
      if (v20 >= *(void *)&v12) {
        v20 %= *(void *)&v12;
      }
    }
    else
    {
      v20 &= *(void *)&v12 - 1;
    }
    if (v20 != v16) {
      goto LABEL_24;
    }
LABEL_23:
    int v18 = (uint64_t *)*v18;
    if (!v18) {
      goto LABEL_24;
    }
  }
  std::string v21 = v18 + 2;
  if ((std::equal_to<std::string>::operator()[abi:ne180100](v19, (unsigned __int8 *)v18 + 16, (unsigned __int8 *)&v52) & 1) == 0) {
    goto LABEL_23;
  }
  char v22 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *a5;
    if (v24 >= 8)
    {
      int v26 = SNLPOSLoggerForCategory(4);
      uint64_t v25 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v24;
        _os_log_impl(&dword_1C8DA9000, v26, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
      }
    }
    else
    {
      uint64_t v25 = off_1E65808C8[v24];
    }
    long long v27 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v27 = &v52;
    }
    std::string::size_type v28 = v18 + 5;
    if (*((char *)v18 + 63) < 0) {
      std::string::size_type v28 = (void *)*v28;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v25;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&__p[14] = v27;
    __int16 v54 = 2080;
    uint64_t v55 = v28;
    _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_DEBUG, "[%s] Mapping span label '%s' to span label '%s'", __p, 0x20u);
  }
  std::string v31 = (char *)v18[5];
  std::string v30 = v18 + 5;
  unsigned int v29 = v31;
  std::string v32 = (uint64_t *)*(v30 - 3);
  uint64_t v33 = *(v30 - 2);
  if (*((char *)v30 - 1) >= 0)
  {
    std::string v32 = v21;
    uint64_t v33 = *((unsigned __int8 *)v30 - 1);
  }
  int v34 = *((char *)v30 + 23);
  if (v34 >= 0) {
    BOOL v35 = (char *)v30;
  }
  else {
    BOOL v35 = v29;
  }
  if (v34 >= 0) {
    unint64_t v36 = *((unsigned __int8 *)v30 + 23);
  }
  else {
    unint64_t v36 = v30[1];
  }
  int v37 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a6->__r_.__value_.__l.__size_;
  if (v37 >= 0) {
    int v39 = (uint64_t *)a6;
  }
  else {
    int v39 = (uint64_t *)a6->__r_.__value_.__r.__words[0];
  }
  if (v37 >= 0) {
    std::string::size_type size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
  }
  if (size && v33)
  {
    uint64_t v40 = (uint64_t)v32 + v33;
    uint64_t v41 = (uint64_t *)((char *)v39 + size);
    uint64_t v42 = v33 - 1;
    std::string::size_type v43 = size - 1;
    while (1)
    {
      uint64_t v44 = 0;
      while (*((unsigned __int8 *)v39 + v44) == *((unsigned __int8 *)v32 + v44))
      {
        uint64_t v45 = v44 + 1;
        if (v43 != v44 && v42 != v44++) {
          continue;
        }
        uint64_t v47 = (uint64_t)v32 + v45;
        unint64_t v48 = (uint64_t *)((char *)v39 + v45);
        goto LABEL_60;
      }
      uint64_t v47 = (uint64_t)v32 + v44;
      unint64_t v48 = (uint64_t *)((char *)v39 + v44);
LABEL_60:
      if (v47 == v40) {
        break;
      }
      int v39 = (uint64_t *)((char *)v39 + 1);
      --v43;
      if (v39 == v41) {
        goto LABEL_24;
      }
    }
    if (v39 != v48)
    {
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v35, &v35[v36], v36);
      uint64_t v49 = (a6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (uint64_t)a6
          : a6->__r_.__value_.__r.__words[0];
      std::regex_iterator<std::__wrap_iter<const char *>, char> v50 = v54 >= 0 ? __p : *(const std::string::value_type **)__p;
      std::string::size_type v51 = v54 >= 0 ? HIBYTE(v54) : *(void *)&__p[8];
      std::string::replace(a6, (std::string::size_type)v39 - v49, (char *)v48 - (char *)v39, v50, v51);
      if (SHIBYTE(v54) < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
LABEL_24:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EC4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int *a4@<X3>, std::vector<std::string>::pointer *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 24);
  memset(&v43, 0, sizeof(v43));
  if (*(void *)(v7 + 48))
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNamesToLabelComponents(a1, (int **)(v7 + 8), a4, &v41);
    std::vector<std::string>::pointer end = v43.__end_;
    if (v43.__end_ >= v43.__end_cap_.__value_)
    {
      unint64_t v15 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v43.__end_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)a2;
        v43.__end_->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v15 = end + 1;
    }
    v43.__end_ = v15;
    unint64_t v16 = v41;
    uint64_t v17 = v42;
    if (v41 != v42)
    {
      do
      {
        nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getProcessedSpanLabel(*(const void ***)(v7 + 48), (const void **)a2, v16 + 8, a3, a4, &__p);
        std::vector<std::string>::pointer v18 = v43.__end_;
        if (v43.__end_ >= v43.__end_cap_.__value_)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_ - (char *)v43.__begin_) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) > v21) {
            unint64_t v21 = 0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v21;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v43.__end_cap_;
          if (v22) {
            size_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v43.__end_cap_, v22);
          }
          else {
            size_t v23 = 0;
          }
          uint64_t v24 = v23 + v20;
          __v.__first_ = v23;
          __v.__begin_ = v24;
          __v.__end_cap_.__value_ = &v23[v22];
          long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v24->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v24 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v43, &__v);
          int v26 = v43.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v43.__end_ = v26;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v43.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          v43.__end_ = v18 + 1;
        }
        long long v27 = *(long long **)(v7 + 56);
        if (v27)
        {
          if (*((char *)v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((void *)v27 + 1));
          }
          else
          {
            long long v28 = *v27;
            __p.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
          }
          char v39 = 1;
          nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel((const void **)a2, v16 + 8, (uint64_t)&__p, &v40);
          std::vector<std::string>::pointer v29 = v43.__end_;
          if (v43.__end_ >= v43.__end_cap_.__value_)
          {
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_ - (char *)v43.__begin_) >> 3);
            unint64_t v32 = v31 + 1;
            if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) > v32) {
              unint64_t v32 = 0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v33 = v32;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v43.__end_cap_;
            if (v33) {
              int v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v43.__end_cap_, v33);
            }
            else {
              int v34 = 0;
            }
            BOOL v35 = v34 + v31;
            __v.__first_ = v34;
            __v.__begin_ = v35;
            __v.__end_cap_.__value_ = &v34[v33];
            *BOOL v35 = v40;
            memset(&v40, 0, sizeof(v40));
            __v.__end_ = v35 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v43, &__v);
            std::string v30 = v43.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_OWORD *)v43.__end_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
            v29->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
            std::string v30 = v29 + 1;
          }
          v43.__end_ = v30;
          if (v39 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v16 += 32;
      }
      while (v16 != v17);
      unint64_t v15 = v43.__end_;
    }
    value = v43.__end_cap_.__value_;
    *a5 = v43.__begin_;
    a5[1] = v15;
    a5[2] = value;
    memset(&v43, 0, sizeof(v43));
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v41;
    std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    int8x8_t v12 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v13 = (std::string *)*a4;
      if (v13 >= 8)
      {
        int v37 = SNLPOSLoggerForCategory(4);
        uint8x8_t v14 = (std::string *)"<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__v.__first_) = 136315394;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"<UNDEFINED_COMPONENT>";
          WORD2(__v.__begin_) = 2048;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 6) = v13;
          _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__v, 0x16u);
        }
      }
      else
      {
        uint8x8_t v14 = (std::string *)off_1E65808C8[v13];
      }
      LODWORD(__v.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = v14;
      _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[%s] Warning: encountered span missing label", (uint8_t *)&__v, 0xCu);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C8EC52AC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__pa, char a20,uint64_t a21,uint64_t a22,std::__split_buffer<std::string> *a23,uint64_t a24,char a25)
{
  std::string __p = &a22;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (uint64_t *)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(snlp::common::espresso_inference::e5ml::selflogging *this@<X0>, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2@<X1>, void *a3@<X8>)
{
  snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(this, a2);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = +[E5MLModuleSELFLoggingUtils logMilCompilationStartedWithMetadata:](E5MLModuleSELFLoggingUtils, "logMilCompilationStartedWithMetadata:");
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v4, a3);
}

void sub_1C8EC53C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded(snlp::common::espresso_inference::e5ml::selflogging *a1, uint64_t *a2, int *a3)
{
  int v4 = *a3;
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a2);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  int v6 = snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(a1, v5);
  if (v4 == 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2 * (v4 == 2);
  }
  +[E5MLModuleSELFLoggingUtils logMilCompilationEndedWithMetadata:v6 contextId:v8 acquisitionType:v7];
}

void sub_1C8EC5474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed(snlp::common::espresso_inference::e5ml::selflogging *a1, uint64_t *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  if (*((char *)a5 + 23) >= 0) {
    long long v9 = a5;
  }
  else {
    long long v9 = (uint64_t *)*a5;
  }
  id v15 = [NSString stringWithUTF8String:v9];
  if (*a3 == 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2 * (*a3 == 2);
  }
  if ((*a4 - 1) >= 7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *a4;
  }
  int8x8_t v12 = snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a2);
  uint8x8_t v14 = snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(a1, v13);
  +[E5MLModuleSELFLoggingUtils logMilCompilationFailedWithMetadata:v14 contextId:v12 acquisitionType:v10 errorCode:v11 errorMessage:v15];
}

void sub_1C8EC5580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(void *a1@<X8>)
{
  id v3 = +[E5MLModuleSELFLoggingUtils logMilCompilationStarted];
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v3, a1);
}

void sub_1C8EC5604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded(uint64_t *a1)
{
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  +[E5MLModuleSELFLoggingUtils logMilCompilationEnded:acquisitionType:](E5MLModuleSELFLoggingUtils, "logMilCompilationEnded:acquisitionType:");
}

void sub_1C8EC5688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed(uint64_t *a1, int *a2, unsigned int *a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) >= 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = (uint64_t *)*a4;
  }
  id v13 = [NSString stringWithUTF8String:v7];
  int v8 = *a2;
  unsigned int v9 = *a3;
  uint64_t v10 = snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a1);
  if (v9 - 1 >= 7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8 == 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2 * (v8 == 2);
  }
  +[E5MLModuleSELFLoggingUtils logMilCompilationFailed:v10 acquisitionType:v12 errorCode:v11 errorMessage:v13];
}

void sub_1C8EC575C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::buildModel(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, void *a2@<X8>)
{
  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV2E5MLModel(this, &v4);
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV1Model(this, a2);
  }
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV2E5MLModel(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  id v3 = (std::__fs::filesystem::path *)((char *)this + 160);
  std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 160));
  std::__fs::filesystem::__status(&v12, 0);
  BOOL v4 = 0;
  if (v11.__pn_.__r_.__value_.__s.__data_[0] && v11.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v11.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 184));
    std::__fs::filesystem::__status(&v11, 0);
    BOOL v5 = !v10.__r_.__value_.__s.__data_[0] || v10.__r_.__value_.__s.__data_[0] == 255;
    BOOL v4 = !v5;
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_13:
      std::__fs::filesystem::operator/[abi:ne180100](&v10, (uint64_t)this, v3);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v11.__pn_, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
      }
      else {
        v11.__pn_ = v10;
      }
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 184));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v9 = __p;
      }
      operator new();
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  std::__fs::filesystem::__status(&v12, 0);
  BOOL v6 = 0;
  if (v11.__pn_.__r_.__value_.__s.__data_[0] && v11.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v11.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    std::__fs::filesystem::__status(&v11, 0);
    BOOL v7 = !v10.__r_.__value_.__s.__data_[0] || v10.__r_.__value_.__s.__data_[0] == 255;
    BOOL v6 = !v7;
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    if (!v6) {
      return;
    }
LABEL_35:
    std::__fs::filesystem::operator/[abi:ne180100](&v11.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v12.__pn_, v11.__pn_.__r_.__value_.__l.__data_, v11.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::__fs::filesystem::path v12 = v11;
    }
    std::__fs::filesystem::operator/[abi:ne180100](&v9, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    }
    else {
      std::string v10 = v9;
    }
    operator new();
  }
  if (v6) {
    goto LABEL_35;
  }
}

void sub_1C8EC5B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  *uint64_t v42 = 0;
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV1Model(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  id v3 = (std::__fs::filesystem::path *)((char *)this + 88);
  std::__fs::filesystem::operator/[abi:ne180100](&v13.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 88));
  std::__fs::filesystem::__status(&v13, 0);
  BOOL v4 = 0;
  if (v12.__pn_.__r_.__value_.__s.__data_[0] && v12.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 64));
    std::__fs::filesystem::__status(&v12, 0);
    BOOL v5 = !v11.__r_.__value_.__s.__data_[0] || v11.__r_.__value_.__s.__data_[0] == 255;
    BOOL v4 = !v5;
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_13:
      std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, v3);
      if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13.__pn_, v12.__pn_.__r_.__value_.__l.__data_, v12.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::__fs::filesystem::path v13 = v12;
      }
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 64));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v11 = __p;
      }
      operator new();
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v13.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 208));
  std::__fs::filesystem::__status(&v13, 0);
  BOOL v6 = 0;
  if (v12.__pn_.__r_.__value_.__s.__data_[0] && v12.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 232));
    std::__fs::filesystem::__status(&v12, 0);
    BOOL v7 = !v11.__r_.__value_.__s.__data_[0] || v11.__r_.__value_.__s.__data_[0] == 255;
    BOOL v6 = !v7;
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_28:
      std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 208));
      if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13.__pn_, v12.__pn_.__r_.__value_.__l.__data_, v12.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::__fs::filesystem::path v13 = v12;
      }
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 232));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v11 = __p;
      }
      operator new();
    }
  }
  else if (v6)
  {
    goto LABEL_28;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v13.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  std::__fs::filesystem::__status(&v13, 0);
  BOOL v8 = 0;
  if (v12.__pn_.__r_.__value_.__s.__data_[0] && v12.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    std::__fs::filesystem::__status(&v12, 0);
    BOOL v9 = !v11.__r_.__value_.__s.__data_[0] || v11.__r_.__value_.__s.__data_[0] == 255;
    BOOL v8 = !v9;
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
    if (!v8) {
      return;
    }
LABEL_55:
    std::__fs::filesystem::operator/[abi:ne180100](&v12.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v13.__pn_, v12.__pn_.__r_.__value_.__l.__data_, v12.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::__fs::filesystem::path v13 = v12;
    }
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = __p;
    }
    operator new();
  }
  if (v8) {
    goto LABEL_55;
  }
}

void sub_1C8EC622C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  *long long v27 = 0;
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::EspressoTransformerModel(void *a1)
{
  *a1 = &unk_1F235F158;
  operator new();
}

void sub_1C8EC656C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v15 + 8);
  *(void *)(v15 + 8) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8EC66A8()
{
}

void sub_1C8EC66B0()
{
  MEMORY[0x1CB775C40](v0, 0x10A1C4018F07B68);
  JUMPOUT(0x1C8EC6670);
}

void sub_1C8EC66D0()
{
}

void sub_1C8EC66D8()
{
  MEMORY[0x1CB775C40](v0, 0x10A1C4018F07B68);
  JUMPOUT(0x1C8EC66A0);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::~TransformerDecoderModule(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1CB775C40);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::~TransformerEncoderModule(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1CB775C40);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::EspressoTransformerE5MLModel(void *a1)
{
  *a1 = &unk_1F235F1C0;
  uint64_t v2 = a1 + 4;
  std::string::basic_string[abi:ne180100]<0>(a1 + 1, "max_num_utterance_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v2, "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>(a1 + 7, "max_num_spans_tokens");
  std::string::basic_string[abi:ne180100]<0>(a1 + 10, "spans_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>(a1 + 13, "max_num_context_tokens");
  std::string::basic_string[abi:ne180100]<0>(a1 + 16, "context_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>(a1 + 19, "start_symbol_index");
  std::string::basic_string[abi:ne180100]<0>(a1 + 22, "end_symbol_index");
  operator new();
}

void sub_1C8EC6990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100]((uint64_t *)(v19 + 208));
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100]((uint64_t *)(v19 + 200));
  if (*(char *)(v19 + 199) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v19 + 175) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v19 + 151) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v19 + 127) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v19 + 103) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v19 + 79) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v19 + 55) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v19 + 31) < 0) {
    operator delete(*a13);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EC6ACC()
{
}

void sub_1C8EC6AD4()
{
}

void sub_1C8EC6ADC()
{
}

void sub_1C8EC6AE4()
{
}

void sub_1C8EC6AEC()
{
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 591) < 0) {
      operator delete(*(void **)(v1 + 568));
    }
    if (*(char *)(v1 + 567) < 0) {
      operator delete(*(void **)(v1 + 544));
    }
    if (*(char *)(v1 + 543) < 0) {
      operator delete(*(void **)(v1 + 520));
    }
    if (*(char *)(v1 + 519) < 0) {
      operator delete(*(void **)(v1 + 496));
    }
    if (*(char *)(v1 + 495) < 0) {
      operator delete(*(void **)(v1 + 472));
    }
    if (*(char *)(v1 + 471) < 0) {
      operator delete(*(void **)(v1 + 448));
    }
    if (*(char *)(v1 + 447) < 0) {
      operator delete(*(void **)(v1 + 424));
    }
    if (*(char *)(v1 + 423) < 0) {
      operator delete(*(void **)(v1 + 400));
    }
    if (*(char *)(v1 + 399) < 0) {
      operator delete(*(void **)(v1 + 376));
    }
    if (*(char *)(v1 + 375) < 0) {
      operator delete(*(void **)(v1 + 352));
    }
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 543) < 0) {
      operator delete(*(void **)(v1 + 520));
    }
    if (*(char *)(v1 + 519) < 0) {
      operator delete(*(void **)(v1 + 496));
    }
    if (*(char *)(v1 + 495) < 0) {
      operator delete(*(void **)(v1 + 472));
    }
    if (*(char *)(v1 + 471) < 0) {
      operator delete(*(void **)(v1 + 448));
    }
    if (*(char *)(v1 + 447) < 0) {
      operator delete(*(void **)(v1 + 424));
    }
    if (*(char *)(v1 + 423) < 0) {
      operator delete(*(void **)(v1 + 400));
    }
    if (*(char *)(v1 + 399) < 0) {
      operator delete(*(void **)(v1 + 376));
    }
    if (*(char *)(v1 + 375) < 0) {
      operator delete(*(void **)(v1 + 352));
    }
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

double nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  *((_DWORD *)this + 2) = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 152))(this);
  (*(void (**)(long long *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 128))(&v7, this);
  uint64_t v2 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = v7;
  *((void *)this + 4) = v8;
  (*(void (**)(long long *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 120))(&v7, this);
  id v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)id v3 = v7;
  *((void *)this + 7) = v8;
  (*(void (**)(long long *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 136))(&v7, this);
  BOOL v4 = (void **)((char *)this + 64);
  if (*((char *)this + 87) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)BOOL v4 = v7;
  *((void *)this + 10) = v8;
  (*(void (**)(long long *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 144))(&v7, this);
  BOOL v5 = (void **)((char *)this + 88);
  if (*((char *)this + 111) < 0) {
    operator delete(*v5);
  }
  double result = *(double *)&v7;
  *(_OWORD *)BOOL v5 = v7;
  *((void *)this + 13) = v8;
  return result;
}

void nlv4_inference_orchestrator::inference_engine::BertModule::getTensorOutputs(nlv4_inference_orchestrator::inference_engine::BertModule *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  uint64_t v4 = a2 + 104;
  *(unsigned char *)(a2 + 152) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)this + 96))(__p);
  BOOL v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  __p[1] = 0;
  uint64_t v8 = 0;
  __p[0] = 0;
  BOOL v6 = *(void **)(a2 + 24);
  if (v6)
  {
    *(void *)(a2 + 32) = v6;
    operator delete(v6);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    BOOL v6 = __p[0];
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v9;
  *(void *)(a2 + 40) = v10;
  v9[1] = 0;
  uint64_t v10 = 0;
  v9[0] = 0;
  if (v6)
  {
    __p[1] = v6;
    operator delete(v6);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](a2 + 48);
  if (*((unsigned char *)this + 424))
  {
    (*(void (**)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 104))(__p, this);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(a2 + 48, (uint64_t)__p);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](v4);
  if (*((unsigned char *)this + 425))
  {
    (*(void (**)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(void *)this + 112))(__p, this);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(v4, (uint64_t)__p);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1C8EC7030(_Unwind_Exception *a1)
{
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape(uint64_t a1, unint64_t **a2, uint64_t **a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  BOOL v5 = *a2;
  BOOL v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      std::to_string(&__p, *v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
      ++v5;
    }
    while (v5 != v6);
  }
  BOOL v9 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *((char *)a3 + 23);
    std::string v11 = (uint64_t **)*a3;
    std::stringbuf::str();
    uint64_t v12 = (uint64_t)(v10 >= 0 ? a3 : v11);
    std::__fs::filesystem::path v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v22 = v12;
    __int16 v23 = 2080;
    uint64_t v24 = v13;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "shape of %s : %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v20);
}

void sub_1C8EC72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned int *)this + 2);
}

void nlv4_inference_orchestrator::inference_engine::BertModule::tryEnableSubwordFeatures(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  BOOL isSubwordFeatureExtractionOutputTensorNameValid = nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)this + 88);
  *((unsigned char *)this + 425) = isSubwordFeatureExtractionOutputTensorNameValid;
  if (isSubwordFeatureExtractionOutputTensorNameValid)
  {
    id v3 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_DEBUG, "Enabling subword features", v4, 2u);
    }
  }
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 303);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 288);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      BOOL v9 = (unsigned __int8 *)(a1 + 280);
    }
    else {
      BOOL v9 = *(unsigned __int8 **)(a1 + 280);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5)) {
        return 1;
      }
    }
    else
    {
      if (!v4) {
        return 1;
      }
      int v10 = v2;
      uint64_t v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        int v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11) {
          return 1;
        }
      }
    }
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 327);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 312);
  }
  if (v6 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    uint64_t v14 = (unsigned __int8 *)(a1 + 304);
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)(a1 + 304);
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v14, v5) == 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v15 = v4 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    BOOL result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

void nlv4_inference_orchestrator::inference_engine::BertModule::tryEnableSentenceFeatures(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  *((unsigned char *)this + 424) = nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid((uint64_t)this, (uint64_t)this + 64);
  if (*((unsigned char *)this + 425))
  {
    uint64_t v2 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "Enabling sentence features", v3, 2u);
    }
  }
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 351);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 336);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      BOOL v9 = (unsigned __int8 *)(a1 + 328);
    }
    else {
      BOOL v9 = *(unsigned __int8 **)(a1 + 328);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5)) {
        return 1;
      }
    }
    else
    {
      if (!v4) {
        return 1;
      }
      int v10 = v2;
      uint64_t v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        int v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11) {
          return 1;
        }
      }
    }
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 375);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 360);
  }
  if (v6 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    uint64_t v14 = (unsigned __int8 *)(a1 + 352);
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)(a1 + 352);
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v14, v5) == 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v15 = v4 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    BOOL result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned __int8 *)this + 425);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned __int8 *)this + 424);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::assertValidFeatureExtractionOutputTensorName(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  BOOL result = nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid(a1, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "feature extraction output");
    if (*(char *)(a1 + 255) < 0) {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 232), *(void *)(a1 + 240));
    }
    else {
      std::string v12 = *(std::string *)(a1 + 232);
    }
    if (*(char *)(a1 + 279) < 0) {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 256), *(void *)(a1 + 264));
    }
    else {
      std::string v13 = *(std::string *)(a1 + 256);
    }
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v7, (long long *)&v12, 2uLL);
    nlv4_inference_orchestrator::inference_engine::createInvalidTensorNameErrorMessage((uint64_t)__p, a2, v7);
    uint64_t v11 = (void **)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v5 = 0;
    while (1)
    {
      if (SHIBYTE(v13.__r_.__value_.__r.__words[v5 + 2]) < 0) {
        operator delete(*(void **)((char *)&v12 + v5 * 8 + 24));
      }
      v5 -= 3;
      if (v5 == -6)
      {
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, &v10);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F060;
      }
    }
  }
  return result;
}

void sub_1C8EC7840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 255);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 240);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      char v9 = (unsigned __int8 *)(a1 + 232);
    }
    else {
      char v9 = *(unsigned __int8 **)(a1 + 232);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5)) {
        return 1;
      }
    }
    else
    {
      if (!v4) {
        return 1;
      }
      std::string v10 = v2;
      uint64_t v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        std::string v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11) {
          return 1;
        }
      }
    }
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 279);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 264);
  }
  if (v6 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    uint64_t v14 = (unsigned __int8 *)(a1 + 256);
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)(a1 + 256);
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v14, v5) == 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v15 = v4 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    BOOL result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1C8EC7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 183);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 168);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      uint64_t v9 = (unsigned __int8 *)(a1 + 160);
    }
    else {
      uint64_t v9 = *(unsigned __int8 **)(a1 + 160);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5)) {
        return 1;
      }
    }
    else
    {
      if (!v4) {
        return 1;
      }
      uint64_t v10 = v2;
      uint64_t v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        uint64_t v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11) {
          return 1;
        }
      }
    }
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 207);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 192);
  }
  if (v6 != v12) {
    return 0;
  }
  int v16 = *(unsigned __int8 **)(a1 + 184);
  uint64_t v15 = (unsigned __int8 *)(a1 + 184);
  uint64_t v14 = v16;
  if (v13 >= 0) {
    int v17 = v15;
  }
  else {
    int v17 = v14;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v17, v5) == 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v18 = v4 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

void snlp::ssu::candidate::builder::generateAppCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, snlp::ssu::cache::SSUCacheObjectIntentList *a4@<X3>, uint64_t a5@<X8>)
{
  v92[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a5 = *(_DWORD *)a1;
  *(unsigned char *)(a5 + 4) = *(unsigned char *)(a1 + 4);
  uint64_t v71 = a5;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a5 + 8), *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    a5 = v71;
  }
  else
  {
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
    *(void *)(a5 + 24) = *(void *)(a1 + 24);
  }
  *(unsigned char *)(a5 + 32) = *(unsigned char *)(a1 + 32);
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  char v73 = 0;
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    for (uint64_t i = v10 + 88; i != v9; i += 88)
    {
      if (*(void *)(v10 + 32) < *(void *)(i + 32) || *(void *)(v10 + 24) < *(void *)(i + 24)) {
        uint64_t v10 = i;
      }
    }
  }
  if (v9 != v10)
  {
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100]((uint64_t)buf);
    std::__construct_at[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo const&,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo*>(buf, (long long *)v10);
    char v73 = 1;
  }
  int v13 = (std::string *)(v71 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(void *)(v71 + 56) = *(void *)(a2 + 16);
  }
  std::string __str = (std::string *)a2;
  *(unsigned char *)(v71 + 64) = 0;
  *(unsigned char *)(v71 + 128) = 0;
  std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)(v71 + 136), (uint64_t)buf);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  *(void *)(v71 + 232) = 0;
  *(void *)(v71 + 240) = 0;
  v68 = (void *)(v71 + 232);
  *(void *)(v71 + 248) = 0;
  uint64_t v14 = (long long *)*a3;
  v69 = (long long *)a3[1];
  if ((long long *)*a3 == v69) {
    return;
  }
  do
  {
    unint64_t v15 = 0;
    memset(v87, 0, sizeof(v87));
    int v88 = 1065353216;
    __s1.__r_.__value_.__s.__data_[0] = 0;
    int v16 = (const void **)(v14 + 4);
    char v86 = 0;
    while (v15 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 4))
    {
      snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(a4, v15, buf);
      if (!buf[2].__r_.__value_.__s.__data_[0]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      std::string::size_type v17 = buf[0].__r_.__value_.__r.__words[2];
      memset(buf, 0, 48);
      std::string v90 = buf[1];
      v89.__r_.__value_.__r.__words[2] = v17;
      std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      std::string::size_type size = v90.__r_.__value_.__l.__size_;
      for (std::string::size_type j = v90.__r_.__value_.__r.__words[0]; j != size; j += 48)
      {
        uint64_t v20 = *(unsigned __int8 *)(j + 23);
        if ((v20 & 0x80u) == 0) {
          uint64_t v21 = *(unsigned __int8 *)(j + 23);
        }
        else {
          uint64_t v21 = *(void *)(j + 8);
        }
        uint64_t v22 = *((unsigned __int8 *)v14 + 87);
        int v23 = (char)v22;
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *((void *)v14 + 9);
        }
        if (v21 != v22) {
          continue;
        }
        if (v23 >= 0) {
          BOOL v24 = (unsigned __int8 *)(v14 + 4);
        }
        else {
          BOOL v24 = (unsigned __int8 *)*v16;
        }
        if ((v20 & 0x80) != 0)
        {
          if (memcmp(*(const void **)j, v24, *(void *)(j + 8))) {
            continue;
          }
        }
        else if (*(unsigned char *)(j + 23))
        {
          uint64_t v25 = 0;
          while (*(unsigned __int8 *)(j + v25) == v24[v25])
          {
            if (v20 == ++v25) {
              goto LABEL_40;
            }
          }
          continue;
        }
LABEL_40:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v87, (unsigned __int8 *)&v89, (uint64_t)&v89);
        if (!v86)
        {
          std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__s1, (const std::string *)(j + 24));
          if (!v86) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
        }
        uint64_t v26 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v28 = *(unsigned __int8 *)(j + 47);
        int v29 = (char)v28;
        if ((v28 & 0x80u) != 0) {
          uint64_t v28 = *(void *)(j + 32);
        }
        if (v27 == v28)
        {
          if (v29 >= 0) {
            std::string v30 = (unsigned __int8 *)(j + 24);
          }
          else {
            std::string v30 = *(unsigned __int8 **)(j + 24);
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__s1.__r_.__value_.__l.__data_, v30, __s1.__r_.__value_.__l.__size_)) {
              continue;
            }
          }
          else
          {
            if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
              continue;
            }
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v30)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v30;
              if (!--v26) {
                goto LABEL_60;
              }
            }
          }
        }
        unint64_t v32 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C8DA9000, v32, OS_LOG_TYPE_DEBUG, "Warning: SSUCacheObjectParameter entries for different intents have different example values", (uint8_t *)buf, 2u);
        }
LABEL_60:
        ;
      }
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      ++v15;
    }
    if (*(void *)&v87[24])
    {
      long long v33 = *(_OWORD *)v87;
      *(_OWORD *)v87 = 0uLL;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v33;
      *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v87[16];
      LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v88;
      unint64_t v34 = *(void *)(*(void *)&v87[16] + 8);
      if ((*((void *)&v33 + 1) & (*((void *)&v33 + 1) - 1)) != 0)
      {
        if (v34 >= *((void *)&v33 + 1)) {
          v34 %= *((void *)&v33 + 1);
        }
      }
      else
      {
        v34 &= *((void *)&v33 + 1) - 1;
      }
      *(void *)(v33 + 8 * v34) = (char *)&buf[0].__r_.__value_.__l + 16;
      *(_OWORD *)&v87[16] = 0uLL;
      if (!v86) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      *(std::string *)((char *)&buf[1] + 16) = __s1;
      memset(&__s1, 0, sizeof(__s1));
      long long v35 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
      long long v79 = v35;
      unint64_t v36 = (void **)buf[0].__r_.__value_.__r.__words[2];
      v80[0] = (void *)buf[0].__r_.__value_.__r.__words[2];
      v80[1] = buf[1].__r_.__value_.__l.__data_;
      int v81 = buf[1].__r_.__value_.__r.__words[1];
      if (buf[1].__r_.__value_.__r.__words[0])
      {
        unint64_t v37 = *(void *)(buf[0].__r_.__value_.__r.__words[2] + 8);
        if ((*((void *)&v35 + 1) & (*((void *)&v35 + 1) - 1)) != 0)
        {
          if (v37 >= *((void *)&v35 + 1)) {
            v37 %= *((void *)&v35 + 1);
          }
        }
        else
        {
          v37 &= *((void *)&v35 + 1) - 1;
        }
        unint64_t v36 = 0;
        *(void *)(v35 + 8 * v37) = v80;
        buf[0].__r_.__value_.__r.__words[2] = 0;
        buf[1].__r_.__value_.__r.__words[0] = 0;
      }
      long long __p = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[2];
      int64_t v83 = buf[2].__r_.__value_.__l.__size_;
      memset(&buf[1].__r_.__value_.__r.__words[2], 0, sizeof(std::string));
      char v84 = 1;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v36);
      uint64_t v38 = (void *)buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = 0;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      LOBYTE(v79) = 0;
      char v84 = 0;
    }
    if (v86 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v87[16]);
    char v39 = *(void **)v87;
    *(void *)v87 = 0;
    if (v39) {
      operator delete(v39);
    }
    if (v84)
    {
      std::string v40 = std::string::basic_string((std::string *)v87, __str, 0, *((void *)v14 + 3), (std::allocator<char> *)&__s1);
      if (v83 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v83 >= 0) {
        std::string::size_type v42 = HIBYTE(v83);
      }
      else {
        std::string::size_type v42 = *((void *)&__p + 1);
      }
      std::vector<std::string> v43 = std::string::append(v40, p_p, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string(&__s1, __str, *((void *)v14 + 4), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v91);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = &__s1;
      }
      else {
        uint64_t v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v47 = std::string::append(&v89, (const std::string::value_type *)v45, v46);
      std::string::size_type v48 = v47->__r_.__value_.__r.__words[0];
      v92[0] = v47->__r_.__value_.__l.__size_;
      *(void *)((char *)v92 + 7) = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
      char v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if ((v87[23] & 0x80000000) != 0) {
        operator delete(*(void **)v87);
      }
      v89.__r_.__value_.__r.__words[0] = v48;
      v89.__r_.__value_.__l.__size_ = v92[0];
      *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v92 + 7);
      *((unsigned char *)&v89.__r_.__value_.__s + 23) = v49;
      std::unordered_set<std::string>::unordered_set((uint64_t)&v90, (uint64_t)&v79);
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(buf, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      }
      else {
        buf[0] = *__str;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf[1], v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
      }
      else {
        buf[1] = v89;
      }
      std::unordered_set<std::string>::unordered_set((uint64_t)&buf[2], (uint64_t)&v90);
      char v73 = 1;
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v50 = *v14;
        v74.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v50;
      }
      long long v75 = *(long long *)((char *)v14 + 24);
      memset(&v76, 0, sizeof(v76));
      std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>(&v76, *((void *)v14 + 5), *((void *)v14 + 6), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 3));
      if (*((char *)v14 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *((const std::string::value_type **)v14 + 8), *((void *)v14 + 9));
      }
      else
      {
        long long v51 = *(_OWORD *)v16;
        v77.__r_.__value_.__r.__words[2] = *((void *)v14 + 10);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v51;
      }
      char v78 = 1;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v90.__r_.__value_.__r.__words[2]);
      std::string v52 = (void *)v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__r.__words[0] = 0;
      if (v52) {
        operator delete(v52);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      unint64_t v54 = *(void *)(v71 + 240);
      unint64_t v53 = *(void *)(v71 + 248);
      if (v54 < v53)
      {
        std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(*(void *)(v71 + 240), (uint64_t)buf);
        uint64_t v55 = v54 + 192;
        goto LABEL_140;
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v68) >> 6);
      unint64_t v57 = v56 + 1;
      if (v56 + 1 > 0x155555555555555) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v68) >> 6);
      if (2 * v58 > v57) {
        unint64_t v57 = 2 * v58;
      }
      if (v58 >= 0xAAAAAAAAAAAAAALL) {
        unint64_t v59 = 0x155555555555555;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        if (v59 > 0x155555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v60 = (char *)operator new(192 * v59);
      }
      else
      {
        uint64_t v60 = 0;
      }
      uint64_t v61 = (uint64_t)&v60[192 * v56];
      uint64_t v62 = &v60[192 * v59];
      std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(v61, (uint64_t)buf);
      uint64_t v55 = v61 + 192;
      uint64_t v63 = v71;
      uint64_t v65 = *(char **)(v71 + 232);
      v64 = *(char **)(v71 + 240);
      if (v64 == v65)
      {
        *(void *)(v71 + 232) = v61;
        *(void *)(v71 + 240) = v55;
        *(void *)(v71 + 248) = v62;
      }
      else
      {
        do
        {
          v61 -= 192;
          v64 -= 192;
          std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(v61, (uint64_t)v64);
        }
        while (v64 != v65);
        uint64_t v63 = v71;
        v66 = *(char **)(v71 + 232);
        v64 = *(char **)(v71 + 240);
        *(void *)(v71 + 232) = v61;
        *(void *)(v71 + 240) = v55;
        *(void *)(v71 + 248) = v62;
        if (v64 != v66)
        {
          do
          {
            v64 -= 192;
            std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100]((uint64_t)v64);
          }
          while (v64 != v66);
          v64 = v66;
          uint64_t v63 = v71;
          if (!v66) {
            goto LABEL_141;
          }
          goto LABEL_139;
        }
      }
      if (!v64) {
        goto LABEL_141;
      }
LABEL_139:
      operator delete(v64);
LABEL_140:
      uint64_t v63 = v71;
LABEL_141:
      *(void *)(v63 + 240) = v55;
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf[1]);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (v84)
      {
        if (SHIBYTE(v83) < 0) {
          operator delete((void *)__p);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v80[0]);
        v67 = (void *)v79;
        *(void *)&long long v79 = 0;
        if (v67) {
          operator delete(v67);
        }
      }
    }
    uint64_t v14 = (long long *)((char *)v14 + 88);
  }
  while (v14 != v69);
}

void sub_1C8EC858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p)
{
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v27);
  if (*(char *)(v28 + 63) < 0) {
    operator delete(*a9);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(a25 + 31) < 0) {
    operator delete(*a10);
  }
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = (void **)(a1 + 24);
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

__n128 std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(__n128 *)a1 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (*(unsigned char *)(a2 + 184))
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    __n128 result = *(__n128 *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(__n128 *)(a1 + 160) = result;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 160) = 0;
    *(unsigned char *)(a1 + 184) = 1;
  }
  return result;
}

uint64_t std::optional<snlp::ssu::candidate::builder::anonymous namespace'::AppEntityIntentInfo>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1);
  }
  return a1;
}

void std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100](uint64_t a1)
{
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 96);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

BOOL uaap_orchestration::beam_input::isParentLabelSpecialToken(uaap_orchestration::beam_input *this, const nl_featurization::vocabulary::Vocabulary *a2)
{
  uint64_t v4 = (char *)this + 48;
  long long v5 = (char *)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)this + 48, (unsigned __int16 *)this + 12);
  long long v6 = v5;
  uint64_t v7 = (char *)this + 56;
  if ((char *)this + 56 == v5) {
    int v8 = 0;
  }
  else {
    int v8 = (const nl_featurization::vocabulary::Vocabulary *)*((void *)v5 + 7);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)v4, (unsigned __int16 *)this);
  if (v7 == (char *)v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(const nl_featurization::vocabulary::Vocabulary **)(v9 + 56);
  }
  if (v7 != v6 && v8 == a2) {
    return 1;
  }
  return v7 != (char *)v9 && v10 == a2;
}

void uaap_orchestration::beam_input::getRepeatedEntityLabelNames(long long **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uaap_orchestration::grammar::UaapGrammar::getRightLabelsForLabel(a1, a2, v8);
  uint64_t v4 = v8[0];
  uint64_t v5 = v8[1];
  while (v4 != v5)
  {
    if (*(unsigned char *)(v4 + 24))
    {
      unint64_t v6 = a3[1];
      if (v6 >= a3[2])
      {
        uint64_t v7 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (long long *)v4);
      }
      else
      {
        std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)a3, (long long *)v4);
        uint64_t v7 = v6 + 24;
      }
      a3[1] = v7;
    }
    v4 += 32;
  }
  uint64_t v9 = (void **)v8;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1C8EC8B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(long long **a1@<X0>, unsigned __int16 *a2@<X1>, uaap_orchestration::grammar::Path **a3@<X2>, uint64_t *a4@<X8>)
{
  a4[1] = 0;
  a4[2] = 0;
  *a4 = (uint64_t)(a4 + 1);
  uaap_orchestration::labels::buildEntityLabelsFromPaths(a3, a1, v10);
  nl_featurization::bio::buildBeginBioTagsFromEntityLabels(v10, (uint64_t *)v9);
  unint64_t v6 = v9[0];
  uint64_t v7 = v9[1];
  while (v6 != v7)
  {
    uint64_t v8 = nl_featurization::vocabulary::Vocabulary::numericalizeToken(a2, (uint64_t)v6);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a4, v8, v8);
    v6 += 3;
  }
  uint64_t v11 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v9[0] = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v9);
}

void sub_1C8EC8C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<unsigned long>::destroy(*v13);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  unint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void uaap_orchestration::beam_input::buildGrammarMask(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, long long **a3@<X2>, void *a4@<X8>)
{
  unint64_t v9 = *((void *)this + 8);
  std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)a2 + 48, (unsigned __int16 *)a2);
  std::vector<double>::vector(&__p, *((void *)a2 + 8), &kMaskLogicalFalse);
  unint64_t v17 = v9;
  std::vector<std::vector<double>>::vector(a4, v9, (uint64_t)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, (const nl_featurization::vocabulary::Vocabulary *)v10))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v10, &__p);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&__p, (uint64_t *)v20);
        uaap_orchestration::labels::buildEntityLabelsFromPaths(v20, a3, (uint64_t *)v19);
        uint64_t v11 = (const nl_featurization::vocabulary::Vocabulary *)a3;
        nl_featurization::bio::buildAllBioTagsFromEntityLabels((uint64_t *)v19, (uint64_t *)v18);
        int v13 = v18[0];
        uint64_t v12 = v18[1];
        while (v13 != v12)
        {
          unint64_t v14 = nl_featurization::vocabulary::Vocabulary::numericalizeToken((unsigned __int16 *)a2, (uint64_t)v13);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v10) {
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          }
          int v16 = (uint64_t *)(*a4 + 24 * v10);
          uint64_t v15 = *v16;
          if (v14 >= (v16[1] - *v16) >> 3) {
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          }
          *(void *)(v15 + 8 * v14) = 0x3FF0000000000000;
          v13 += 3;
        }
        uint64_t v22 = v18;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        v18[0] = (void **)v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
        v19[0] = (void **)v20;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        a3 = (long long **)v11;
      }
      ++v10;
    }
    while (v10 != v17);
  }
}

void sub_1C8EC8EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<double>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[3 * v7];
    uint64_t v8 = 3 * a2;
    unint64_t v9 = &v6[3 * a2];
    uint64_t v10 = 8 * v8;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v10 -= 24;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_1C8EC9044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C8EC90C4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::beam_input::buildStartEntityMask(uaap_orchestration::beam_input *this@<X0>, void *a2@<X8>)
{
  unint64_t v5 = *((void *)this + 8);
  std::vector<double>::vector(a2, v5, &kMaskLogicalTrue);
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, i, &__p);
      nl_featurization::bio::parseBioTag((uint64_t)&__p, (uint64_t)&v7);
      if (v7 == 3)
      {
        if (i >= (uint64_t)(a2[1] - *a2) >> 3) {
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        }
        *(void *)(*a2 + 8 * i) = 0;
      }
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C8EC91AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100](v24);
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void uaap_orchestration::beam_input::buildInnerEntityTransitionsMask(uaap_orchestration::beam_input *this@<X0>, void *a2@<X8>)
{
  unint64_t v5 = *((void *)this + 8);
  char v39 = 1;
  LODWORD(v37) = 79;
  unint64_t v23 = nl_featurization::vocabulary::Vocabulary::numericalizeToken((unsigned __int16 *)this, (uint64_t)&v37);
  std::vector<double>::vector(&v37, v5, &kMaskLogicalTrue);
  std::vector<std::vector<double>>::vector(a2, v5, (uint64_t)&v37);
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v5)
  {
    unint64_t v6 = 0;
    while (1)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v6, &v40);
      nl_featurization::bio::parseBioTag((uint64_t)&v40, (uint64_t)&v37);
      if (v37 == 3) {
        break;
      }
LABEL_60:
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (++v6 == v5) {
        return;
      }
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v23) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v8 = (uint64_t *)(*a2 + 24 * v23);
    uint64_t v7 = *v8;
    if (v6 >= (v8[1] - *v8) >> 3) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v9 = 0;
    *(void *)(v7 + 8 * v6) = 0;
    while (1)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v9, &v36);
      nl_featurization::bio::parseBioTag((uint64_t)&v36, (uint64_t)&v34);
      if (v34 != 2) {
        goto LABEL_54;
      }
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v37, &v29);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v33, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::basic_string<char16_t> v33 = v29;
      }
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v34, &v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        std::basic_string<char16_t> v28 = v24;
      }
      int v10 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::basic_string<char16_t>::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::basic_string<char16_t>::size_type size = v33.__r_.__value_.__l.__size_;
      }
      std::basic_string<char16_t>::size_type v12 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::basic_string<char16_t>::size_type v12 = v28.__r_.__value_.__l.__size_;
      }
      if (size == v12)
      {
        if (!size)
        {
          BOOL v19 = 0;
          if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_37;
          }
LABEL_36:
          operator delete(v28.__r_.__value_.__l.__data_);
          goto LABEL_37;
        }
        int v13 = (std::basic_string<char16_t> *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v13 = &v28;
        }
        unint64_t v14 = (std::basic_string<char16_t> *)v33.__r_.__value_.__r.__words[0];
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v14 = &v33;
        }
        std::basic_string<char16_t>::size_type v15 = size - 1;
        do
        {
          int v17 = (unsigned __int16)v14->__r_.__value_.__s.__data_[0];
          unint64_t v14 = (std::basic_string<char16_t> *)((char *)v14 + 2);
          int v16 = v17;
          int v18 = (unsigned __int16)v13->__r_.__value_.__s.__data_[0];
          int v13 = (std::basic_string<char16_t> *)((char *)v13 + 2);
          BOOL v19 = v18 != v16;
        }
        while (v18 == v16 && v15-- != 0);
      }
      else
      {
        BOOL v19 = 1;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_36;
      }
LABEL_37:
      if (v27 && v26 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        if (v10 < 0) {
LABEL_49:
        }
          operator delete(v33.__r_.__value_.__l.__data_);
      }
      else if (v10 < 0)
      {
        goto LABEL_49;
      }
      if (v32 && v31 < 0) {
        operator delete(v30);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if (v19)
        {
LABEL_51:
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v9) {
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v22 = (uint64_t *)(*a2 + 24 * v9);
          uint64_t v21 = *v22;
          if (v6 >= (v22[1] - *v22) >> 3) {
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          }
          *(void *)(v21 + 8 * v6) = 0;
        }
      }
      else if (v19)
      {
        goto LABEL_51;
      }
LABEL_54:
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (++v9 == v5) {
        goto LABEL_60;
      }
    }
  }
}

void sub_1C8EC95A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::basic_string<char16_t> v36 = *(void **)(v34 - 184);
  if (v36)
  {
    *(void *)(v34 - 176) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void nl_featurization::bio::BioTagPayload::~BioTagPayload(void **this)
{
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void uaap_orchestration::beam_input::buildUniqueLabels(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  unint64_t v6 = (const nl_featurization::vocabulary::Vocabulary *)*((void *)this + 8);
  char v32 = 0;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; v32 = i)
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, i))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, (unint64_t)i, &v31);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&v31, (uint64_t *)&v29);
        uaap_orchestration::beam_input::getRepeatedEntityLabelNames(a3, (unsigned __int16 *)&v31, (uint64_t *)&v27);
        std::basic_string<char16_t> v24 = 0;
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        std::basic_string<char16_t>::size_type v12 = v29;
        uint64_t v11 = v30;
        if (v29 == v30)
        {
          int v17 = 0;
          int v16 = 0;
        }
        else
        {
          do
          {
            uaap_orchestration::grammar::Path::getFirstComponent((uaap_orchestration::grammar::Path *)v12, (uint64_t)&__p);
            int v13 = v28;
            if (std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(v27, v28, (unsigned __int16 *)&__p) == v13)
            {
              uint64_t v14 = (uint64_t)v25;
              if ((unint64_t)v25 >= v26)
              {
                uint64_t v15 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>((uint64_t *)&v24, v12);
              }
              else
              {
                *uint64_t v25 = 0;
                *(void *)(v14 + 8) = 0;
                *(void *)(v14 + 16) = 0;
                std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v14, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3));
                uint64_t v15 = v14 + 24;
              }
              uint64_t v25 = (long long **)v15;
            }
            if (v23 && v22 < 0) {
              operator delete(__p);
            }
            v12 += 3;
          }
          while (v12 != v11);
          int v16 = v24;
          int v17 = v25;
        }
        memset(v19, 0, sizeof(v19));
        std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>((uint64_t)v19, v16, v17, 0xAAAAAAAAAAAAAAABLL * (v17 - v16));
        uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(a3, (unsigned __int16 *)a2, v19, (uint64_t *)&__p);
        std::basic_string<char16_t> v33 = v19;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        int v18 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)a4, (unint64_t)i, (uint64_t *)&v32)+ 3);
        if (v18 != &__p) {
          std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)v18, __p, &v21);
        }
        std::__tree<unsigned long>::destroy(v21);
        std::basic_string<char16_t> __p = &v24;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::basic_string<char16_t> __p = &v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::basic_string<char16_t> __p = &v29;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      unint64_t i = (const nl_featurization::vocabulary::Vocabulary *)((char *)i + 1);
    }
  }
}

void sub_1C8EC98E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v31 - 96) = &a11;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 96));
  std::basic_string<char16_t> __p = (char *)&a22;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_string<char16_t> __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_string<char16_t> __p = &a30;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

uint64_t std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>(uint64_t result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (void *)result;
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a4);
    uint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[3 * v9];
    std::basic_string<char16_t>::size_type v12 = v7;
    int v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    char v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v7, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
        uint64_t v7 = v13 + 3;
        v13 += 3;
        a2 += 3;
      }
      while (a2 != a3);
      uint64_t v8 = v7;
    }
    char v11 = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::Path>,uaap_orchestration::grammar::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1C8EC9AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unsigned __int16 *std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (result != a2)
  {
    uint64_t v3 = *((unsigned __int8 *)a3 + 23);
    BOOL v4 = (v3 & 0x80u) != 0;
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *((void *)a3 + 1);
    }
    if (v4) {
      unint64_t v5 = *(unsigned __int16 **)a3;
    }
    else {
      unint64_t v5 = a3;
    }
    do
    {
      uint64_t v6 = *((unsigned __int8 *)result + 23);
      int v7 = (char)v6;
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)result + 1);
      }
      if (v6 == v3)
      {
        if (!v3) {
          return result;
        }
        if (v7 >= 0) {
          uint64_t v8 = result;
        }
        else {
          uint64_t v8 = *(unsigned __int16 **)result;
        }
        uint64_t v9 = v3;
        for (unint64_t i = v5; *i == *v8; ++i)
        {
          ++v8;
          if (!--v9) {
            return result;
          }
        }
      }
      result += 12;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  std::basic_string<char16_t>::size_type v12 = a1 + 2;
  unint64_t i = operator new(0x30uLL);
  *unint64_t i = 0;
  i[1] = v5;
  uint64_t v13 = *a3;
  i[5] = 0;
  i[4] = 0;
  i[2] = v13;
  i[3] = i + 4;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v35 = (void *)*a1;
      *a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  uint64_t v21 = (void *)*a1;
  *a1 = (uint64_t)v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  char v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v24) = v12;
    std::basic_string<char16_t> v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*a1 + 8 * v30))
          {
            *(void *)(*a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *char v23 = *v29;
          *std::basic_string<char16_t> v29 = **(void **)(*a1 + 8 * v30);
          **(void **)(*a1 + 8 * v30) = v29;
          std::basic_string<char16_t> v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        char v23 = v29;
        std::basic_string<char16_t> v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v31 = *a1;
  char v32 = *(void **)(*a1 + 8 * v5);
  if (v32)
  {
    *unint64_t i = *v32;
LABEL_72:
    void *v32 = i;
    goto LABEL_73;
  }
  *unint64_t i = *v12;
  void *v12 = i;
  *(void *)(v31 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    char v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C8EC9F48(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint8x8_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      uint64_t v20 = 0;
LABEL_29:
      std::__tree<unsigned long>::destroy(v20);
      goto LABEL_30;
    }
    int v10 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v9);
    if (a2 != a3)
    {
      unint64_t v11 = v9;
      std::basic_string<char16_t>::size_type v12 = a2;
      do
      {
        uint64_t v9 = v10;
        unint64_t v13 = v12[4];
        v11[4] = v13;
        float v14 = *v8;
        float v15 = (uint64_t **)(a1 + 8);
        BOOL v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              float v15 = (uint64_t **)v14;
              if (v13 >= v14[4]) {
                break;
              }
              float v14 = (uint64_t *)*v14;
              BOOL v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }
            float v14 = (uint64_t *)v14[1];
          }
          while (v14);
          BOOL v16 = v15 + 1;
        }
LABEL_14:
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          int v10 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v10);
        }
        else {
          int v10 = 0;
        }
        unint64_t v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            unint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            std::basic_string<char16_t>::size_type v12 = a2;
          }
          while (!v18);
        }
        if (!v9) {
          break;
        }
        unint64_t v11 = v9;
        std::basic_string<char16_t>::size_type v12 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<unsigned long>::destroy(v9);
    if (v10)
    {
      for (unint64_t i = (uint64_t *)v10[2]; i; unint64_t i = (uint64_t *)i[2])
        int v10 = i;
      uint64_t v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    uint64_t v21 = (uint64_t **)(a1 + 8);
    do
    {
      uint64_t v22 = (uint64_t *)operator new(0x28uLL);
      unint64_t v23 = a2[4];
      void v22[4] = v23;
      unint64_t v24 = *v21;
      uint8x8_t v25 = (uint64_t **)(a1 + 8);
      unint64_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            uint8x8_t v25 = (uint64_t **)v24;
            if (v23 >= v24[4]) {
              break;
            }
            unint64_t v24 = (uint64_t *)*v24;
            unint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }
          unint64_t v24 = (uint64_t *)v24[1];
        }
        while (v24);
        unint64_t v26 = v25 + 1;
      }
LABEL_38:
      std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)a1, (uint64_t)v25, v26, v22);
      uint8x8_t v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint8x8_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = *v2;
      std::__tree<unsigned long>::destroy(v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__tree<unsigned long>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    unint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        BOOL v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          BOOL v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>::operator()[abi:ne180100](char a1, void **a2)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::Path>,uaap_orchestration::grammar::Path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = **(void ****)(a1 + 16);
    BOOL v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      unint64_t v5 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void uaap_orchestration::beam_input::buildIndexableLabels(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v6 = (const nl_featurization::vocabulary::Vocabulary *)*((void *)this + 8);
  char v32 = 0;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; v32 = i)
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, i))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, (unint64_t)i, &v31);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&v31, (uint64_t *)&v29);
        uaap_orchestration::beam_input::getRepeatedEntityLabelNames(a3, (unsigned __int16 *)&v31, (uint64_t *)&v27);
        unint64_t v24 = 0;
        uint8x8_t v25 = 0;
        unint64_t v26 = 0;
        std::basic_string<char16_t>::size_type v12 = v29;
        unint64_t v11 = v30;
        if (v29 == v30)
        {
          unint64_t v17 = 0;
          BOOL v16 = 0;
        }
        else
        {
          do
          {
            uaap_orchestration::grammar::Path::getFirstComponent((uaap_orchestration::grammar::Path *)v12, (uint64_t)&__p);
            unint64_t v13 = v28;
            if (std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(v27, v28, (unsigned __int16 *)&__p) != v13&& 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3) >= 2)
            {
              uint64_t v14 = (uint64_t)v25;
              if ((unint64_t)v25 >= v26)
              {
                uint64_t v15 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>((uint64_t *)&v24, v12);
              }
              else
              {
                *uint8x8_t v25 = 0;
                *(void *)(v14 + 8) = 0;
                *(void *)(v14 + 16) = 0;
                std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v14, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3));
                uint64_t v15 = v14 + 24;
              }
              uint8x8_t v25 = (long long **)v15;
            }
            if (v23 && v22 < 0) {
              operator delete(__p);
            }
            v12 += 3;
          }
          while (v12 != v11);
          BOOL v16 = v24;
          unint64_t v17 = v25;
        }
        memset(v19, 0, sizeof(v19));
        std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>((uint64_t)v19, v16, v17, 0xAAAAAAAAAAAAAAABLL * (v17 - v16));
        uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(a3, (unsigned __int16 *)a2, v19, (uint64_t *)&__p);
        unint64_t v33 = v19;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        BOOL v18 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)a4, (unint64_t)i, (uint64_t *)&v32)+ 3);
        if (v18 != &__p) {
          std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)v18, __p, &v21);
        }
        std::__tree<unsigned long>::destroy(v21);
        std::basic_string<char16_t> __p = &v24;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::basic_string<char16_t> __p = &v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::basic_string<char16_t> __p = &v29;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      unint64_t i = (const nl_featurization::vocabulary::Vocabulary *)((char *)i + 1);
    }
  }
}

void sub_1C8ECA528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v31 - 96) = &a11;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 96));
  std::basic_string<char16_t> __p = (char *)&a22;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_string<char16_t> __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_string<char16_t> __p = &a30;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

void uaap_orchestration::beam_input::buildBeamMaskInputs(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, long long **a3@<X2>, void *a4@<X8>)
{
}

void sub_1C8ECA688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v12);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v14;
    operator delete(v14);
  }
  a10 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uaap::UPDataDetector *uaap::UPDataDetector::UPDataDetector(uaap::UPDataDetector *this, const uaap::UPDataDetectorCacheFiles *a2)
{
  *(void *)this = 67584;
  uaap::UPDataDetector::UPDataDetector((uaap::UPDataDetector *)v4, a2, 0);
  uaap::UPDataDetector::~UPDataDetector((uaap::UPDataDetector *)v4);
  return this;
}

{
  unsigned char v4[56];

  *(void *)this = 67584;
  uaap::UPDataDetector::UPDataDetector((uaap::UPDataDetector *)v4, a2, 0);
  uaap::UPDataDetector::~UPDataDetector((uaap::UPDataDetector *)v4);
  return this;
}

uaap::UPDataDetector *uaap::UPDataDetector::UPDataDetector(uaap::UPDataDetector *this, const uaap::UPDataDetectorCacheFiles *a2, const __CFLocale *a3)
{
  unint64_t v5 = this;
  *(void *)this = 67584;
  if (!a3)
  {
    uint64_t v6 = SNLPOSLoggerForCategory(6);
    this = (uaap::UPDataDetector *)os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (this)
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "Missing locale info when init UPDataDetector. Falling back using the system default one.", (uint8_t *)&buf, 2u);
    }
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(this, &buf, a3, 0);
  *((void *)v5 + 1) = v7;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  uint8x8_t v8 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v7, &buf, a3, 1);
  *((void *)v5 + 2) = v8;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 2);
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v9 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v8, &buf, a3, 0);
  *((void *)v5 + 3) = v9;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 95) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 3);
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v9, &buf, a3, 0);
  *((void *)v5 + 4) = v10;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 119) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 4);
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  unint64_t v11 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v10, &buf, a3, 0);
  *((void *)v5 + 5) = v11;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 143) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 5);
  }
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  *((void *)v5 + 6) = uaap::UPDataDetector::tryCreateScanner(v11, &buf, a3, 0);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C8ECB19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void uaap::UPDataDetector::~UPDataDetector(uaap::UPDataDetector *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)*((void *)this + 3);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 4);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 5);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 6);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t uaap::UPDataDetector::tryCreateScanner(uaap::UPDataDetector *this, const std::__fs::filesystem::path *a2, const __CFLocale *a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  std::__fs::filesystem::__status(a2, 0);
  if (buf.__r_.__value_.__s.__data_[0] == 255 || buf.__r_.__value_.__s.__data_[0] == 0)
  {
    if (a4)
    {
      if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string pn = a2->__pn_;
      }
      uint64_t v15 = std::string::insert(&pn, 0, "No cache file exists at ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &buf);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
    }
    uint64_t v9 = SNLPOSLoggerForCategory(6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "No cache file exists at %s but file is optional - skipping", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  else
  {
    CFIndex v11 = strlen((const char *)v7);
    CFURLRef v12 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v7, v11, 0);
    CFErrorRef err = 0;
    uint64_t v13 = DDScannerCreateWithCacheFile();
    uint64_t v10 = v13;
    if (!v13)
    {
      if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = a2->__pn_;
      }
      BOOL v18 = std::string::insert(&__p, 0, "Could not create scanner from cache file: \"");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      pn.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&pn, "\".  ");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!err)
      {
        char v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, &buf);
        __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v23 = CFErrorCopyDescription(err);
      CFRelease(err);
      uaap::toUTF8String(v23, v24);
    }
    DDScannerSetOptions();
    if (a3) {
      DDScannerSetLocale();
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  return v10;
}

void sub_1C8ECB588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (v28) {
    CFRelease(v28);
  }
  _Unwind_Resume(exception_object);
}

void uaap::UPDataDetector::matchSpans(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, a2, 0x8000100u);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v6 = a1[1];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, "A");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v6, &__dst);
  if (v23 < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v7 = a1[2];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&v20, "D");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v7, &v20);
  if (v21 < 0) {
    operator delete((void *)v20);
  }
  uint64_t v8 = a1[3];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, "F");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v8, (long long *)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = a1[4];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v16, (char *)L"MONEY");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v9, (long long *)v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v10 = a1[5];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v14, (char *)L"NUMBER");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v10, (long long *)v14);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v11 = a1[6];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v12, "P");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v11, (long long *)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if (!v5) {
      return;
    }
    goto LABEL_17;
  }
  if (v5) {
LABEL_17:
  }
    CFRelease(v5);
}

void sub_1C8ECB8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v35 - 40) = v34;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 40));
  if (v33) {
    CFRelease(v33);
  }
  _Unwind_Resume(a1);
}

void uaap::UPDataDetector::matchSpansInner(uint64_t a1, char **a2, uint64_t a3, long long *a4)
{
  if (a3 && DDScannerScanString())
  {
    long long v23 = *a4;
    uint64_t v24 = *((void *)a4 + 2);
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    uint64_t v6 = DDScannerCopyResultsWithOptions();
    uint64_t v7 = v6;
    uint64_t v9 = a2[1];
    unint64_t v8 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v8)
    {
      CFURLRef v12 = *a2;
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a2) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x666666666666666) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v12) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x333333333333333) {
        unint64_t v16 = 0x666666666666666;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v17 = (char *)operator new(40 * v16);
      BOOL v18 = &v17[40 * v13];
      char v19 = &v17[40 * v16];
      *(_OWORD *)BOOL v18 = v23;
      *((void *)v18 + 2) = v24;
      *((void *)v18 + 3) = v7;
      *((void *)v18 + 4) = MEMORY[0x1E4F1C278];
      uint64_t v11 = v18 + 40;
      if (v9 == v12)
      {
        *a2 = v18;
        a2[1] = v11;
        a2[2] = v19;
        if (!v9) {
          goto LABEL_19;
        }
      }
      else
      {
        do
        {
          long long v20 = *(_OWORD *)(v9 - 40);
          *((void *)v18 - 3) = *((void *)v9 - 3);
          *(_OWORD *)(v18 - 40) = v20;
          *((void *)v9 - 5) = 0;
          *((void *)v9 - 4) = 0;
          uint64_t v21 = *((void *)v9 - 2);
          *((void *)v9 - 3) = 0;
          *((void *)v9 - 2) = 0;
          *((void *)v18 - 2) = v21;
          *((void *)v18 - 1) = *((void *)v9 - 1);
          v18 -= 40;
          v9 -= 40;
        }
        while (v9 != v12);
        char v22 = *a2;
        uint64_t v9 = a2[1];
        *a2 = v18;
        a2[1] = v11;
        a2[2] = v19;
        if (v9 != v22)
        {
          do
          {
            v9 -= 40;
            std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100]((uint64_t)v9);
          }
          while (v9 != v22);
          uint64_t v9 = v22;
        }
        if (!v9) {
          goto LABEL_19;
        }
      }
      operator delete(v9);
    }
    else
    {
      *((void *)v9 + 2) = v24;
      *(_OWORD *)uint64_t v9 = v23;
      uint64_t v10 = MEMORY[0x1E4F1C278];
      *((void *)v9 + 3) = v6;
      *((void *)v9 + 4) = v10;
      uint64_t v11 = v9 + 40;
      a2[1] = v9 + 40;
    }
LABEL_19:
    a2[1] = v11;
  }
}

void sub_1C8ECBB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    CFStringRef v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      CFStringRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 32))();
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void uaap::UPDataDetectorResult::~UPDataDetectorResult(uaap::UPDataDetectorResult *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*((void (**)(void))this + 4))();
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t uaap::UPDataDetector::labelToUaapType@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, (char *)L"address");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v24, "A");
  long long v25 = *(_OWORD *)__dst;
  uint64_t v26 = v21;
  __dst[1] = 0;
  uint64_t v21 = 0;
  __dst[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v18, (char *)L"datetime");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v27, "D");
  long long v28 = *(_OWORD *)v18;
  uint64_t v29 = v19;
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v16, "f");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v30, "F");
  long long v31 = *(_OWORD *)v16;
  uint64_t v32 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v14, "p");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v33, (char *)L"MONEY");
  long long v34 = *(_OWORD *)v14;
  uint64_t v35 = v15;
  v14[1] = 0;
  uint64_t v15 = 0;
  v14[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v12, "n");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v36, (char *)L"NUMBER");
  long long v37 = *(_OWORD *)v12;
  uint64_t v38 = v13;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, (char *)L"phone-number");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v39, "P");
  uint64_t v4 = 0;
  long long v40 = *(_OWORD *)__p;
  uint64_t v41 = v11;
  int v23 = 1065353216;
  __p[1] = 0;
  uint64_t v11 = 0;
  __p[0] = 0;
  memset(v22, 0, sizeof(v22));
  do
  {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>((uint64_t)v22, (unsigned __int16 *)&v24[v4], (uint64_t)&v24[v4]);
    v4 += 6;
  }
  while (v4 != 36);
  uint64_t v5 = 36;
  do
  {
    uint64_t v6 = &v24[v5];
    if (SHIBYTE(v24[v5 - 1]) < 0) {
      operator delete((void *)*(v6 - 3));
    }
    if (*((char *)v6 - 25) < 0) {
      operator delete((void *)*(v6 - 6));
    }
    v5 -= 6;
  }
  while (v5 * 8);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(v22, a1);
  if (v7)
  {
    if (*((char *)v7 + 63) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *((const std::basic_string<char16_t>::value_type **)v7 + 5), *((void *)v7 + 6));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(v7 + 20);
      *(void *)(a2 + 16) = *((void *)v7 + 7);
    }
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v8;
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v22);
}

void sub_1C8ECBFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::forward(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule *this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2@<X1>, uint64_t a3@<X8>)
{
  memset(v14, 0, sizeof(v14));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  memset(v15, 0, sizeof(v15));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  memset(v16, 0, sizeof(v16));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  memset(v17, 0, sizeof(v17));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  memset(v18, 0, sizeof(v18));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3);
  memset(v19, 0, sizeof(v19));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 2);
  memset(v20, 0, sizeof(v20));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20, *((const void **)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 3);
  memset(v21, 0, sizeof(v21));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21, *((const void **)a2 + 21), *((void *)a2 + 22), (uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 2);
  memset(v22, 0, sizeof(v22));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v22, *((const void **)a2 + 24), *((void *)a2 + 25), (uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 3);
  memset(v23, 0, sizeof(v23));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v23, *((const void **)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtteranceTokensEmbeddings((uint64_t)this, (uint64_t)v14);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setSpanTokens((uint64_t)this, (uint64_t)v16);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setContext((uint64_t)this, (uint64_t)v18);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtterancePaddingMask((uint64_t)this, (uint64_t)v20);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setPositionIds((uint64_t)this, (uint64_t)v22);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(this);
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getFinalHidden((uint64_t)&v10);
  uint64_t v6 = v11;
  *(_OWORD *)(a3 + 48) = v10;
  *(void *)(a3 + 64) = v6;
  uint64_t v7 = v13;
  *(_OWORD *)(a3 + 72) = v12;
  *(void *)(a3 + 88) = v7;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getEncodings((uint64_t)&v10);
  uint64_t v8 = v11;
  *(_OWORD *)a3 = v10;
  *(void *)(a3 + 16) = v8;
  uint64_t v9 = v13;
  *(_OWORD *)(a3 + 24) = v12;
  *(void *)(a3 + 40) = v9;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v14);
}

void sub_1C8ECC334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(v40);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtteranceTokensEmbeddings(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "utterance_tokens_embeddings");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ECC470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setSpanTokens(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "span_tokens");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ECC4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setContext(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "context");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ECC560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtterancePaddingMask(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "padding_mask");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ECC5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setPositionIds(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "position_ids");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ECC650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getFinalHidden(uint64_t a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_init_decoder_hidden");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1C8ECC6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getEncodings(uint64_t a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_encodings");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1C8ECC740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8ECC7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)UPDetectedData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C8ECC874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8ECCA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C8ECCB90(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1C8ECCD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  objc_sync_exit(v19);

  _Unwind_Resume(a1);
}

void sub_1C8ECCEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  objc_sync_exit(v19);

  _Unwind_Resume(a1);
}

void sub_1C8ECD5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  MEMORY[0x1CB775C40](v61, 0x20C40960023A9);
  std::unique_ptr<uaap::UPDataDetector>::reset[abi:ne180100]((uaap::UPDataDetector **)(v62 - 112));
  uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(&a23);
  if (*(char *)(v62 - 153) < 0) {
    operator delete(*(void **)(v62 - 176));
  }

  _Unwind_Resume(a1);
}

uaap::UPDataDetector *std::unique_ptr<uaap::UPDataDetector>::reset[abi:ne180100](uaap::UPDataDetector **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    uaap::UPDataDetector::~UPDataDetector(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::encode(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  if (*a3 == a3[1])
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  else
  {
    nlv4_inference_orchestrator::span_matching::SpanEncoder::applyEncoding(a1, a2, a3, a4, (uint64_t)v8);
    nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens((nlv4_inference_orchestrator::span_matching::TagBucketList *)v8, a1, a3, (char **)a5);
    nlv4_inference_orchestrator::span_matching::TagBucketList::~TagBucketList(v8);
  }
}

void sub_1C8ECDAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::applyEncoding(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  *(_DWORD *)a5 = *a4;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  __p.__r_.__value_.__r.__words[0] = a5 + 16;
  __p.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v12 = v9 - v10;
  BOOL v11 = v12 == 0;
  uint64_t v13 = v12 >> 4;
  unint64_t v14 = 0x8E38E38E38E38E39 * v13;
  *(void *)(a5 + 8) = 0x8E38E38E38E38E39 * v13;
  if (!v11)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100]((void *)(a5 + 16), 0x8E38E38E38E38E39 * v13);
    uint64_t v15 = *(char **)(a5 + 24);
    size_t v16 = 24 * ((24 * v14 - 24) / 0x18) + 24;
    bzero(v15, v16);
    *(void *)(a5 + 24) = &v15[v16];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "[CLS_SPAN]");
  std::string::basic_string[abi:ne180100]<0>(v23, "[SEP_SPAN]");
  std::string::basic_string[abi:ne180100]<0>(v24, "[NO_SPAN]");
  std::unordered_set<std::string>::unordered_set(a5 + 40, (unsigned __int8 *)&__p, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0) {
      operator delete((void *)v24[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 80), "B");
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 104), "I");
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 128), "L");
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 152), "O");
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 176), "U");
  std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 200), "-");
  BOOL v18 = *a2;
  uint64_t v19 = a2[1];
  while (v18 != v19)
  {
    uint64_t v20 = *((void *)v18 + 6);
    if (v20)
    {
      nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(a5, v20, (uint64_t)v18);
      nlv4_inference_orchestrator::span_matching::SpanEncoder::getTopLevelUsoEntityFromDataDetectorSpan(a1, v18, &__p);
      int v21 = LOBYTE(v23[0]);
      if (!*a4 && LOBYTE(v23[0]))
      {
        nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(a5, (uint64_t)&__p, (uint64_t)v18);
        int v21 = LOBYTE(v23[0]);
      }
      if (v21)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    BOOL v18 = (const sirinluinternal::MatchingSpan *)((char *)v18 + 88);
  }
}

void sub_1C8ECDD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList *this@<X1>, uint64_t a2@<X0>, void *a3@<X2>, char **a4@<X8>)
{
  char v4 = a3;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, buf);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 4);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  if (v9 == v10)
  {
    nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, v111);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v11 = a2;
    if (v4[1] != *v4)
    {
      unint64_t v12 = 0;
      v107 = a4;
      v106 = v4;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * (v111[1] - v111[0]) <= v12) {
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v13 = (unint64_t *)&v111[0][3 * v12];
        unint64_t v14 = (const void **)v13[1];
        unint64_t v15 = 126 - 2 * __clz((uint64_t)((uint64_t)v14 - *v13) >> 5);
        if (v14 == (const void **)*v13) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v15;
        }
        std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(*v13, v14, v16, 1);
        unint64_t v18 = *v13;
        uint64_t v17 = (void **)v13[1];
        uint64_t v19 = (void **)(*v13 + 32);
        if ((void **)*v13 == v17 || v19 == v17) {
          goto LABEL_34;
        }
        while (1)
        {
          uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) == 0) {
            uint64_t v22 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            uint64_t v22 = *(void *)(v18 + 8);
          }
          uint64_t v23 = *(unsigned __int8 *)(v18 + 55);
          int v24 = (char)v23;
          if ((v23 & 0x80u) != 0) {
            uint64_t v23 = *(void *)(v18 + 40);
          }
          if (v22 != v23) {
            goto LABEL_33;
          }
          long long v25 = v24 >= 0 ? v19 : (void **)*v19;
          if ((v21 & 0x80) == 0) {
            break;
          }
          if (!memcmp(*(const void **)v18, v25, *(void *)(v18 + 8))) {
            goto LABEL_28;
          }
LABEL_33:
          v19 += 4;
          v18 += 32;
          if (v19 == v17) {
            goto LABEL_34;
          }
        }
        if (*(unsigned char *)(v18 + 23))
        {
          uint64_t v26 = 0;
          while (*(unsigned __int8 *)(v18 + v26) == *((unsigned __int8 *)v25 + v26))
          {
            if (v21 == ++v26) {
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
LABEL_28:
        uint8x8_t v27 = *(void **)(v18 + 24);
        long long v28 = *(void **)(v18 + 56);
        uint64_t v30 = (char *)v27[1];
        uint64_t v29 = (char *)v27[2];
        long long v31 = (_DWORD *)v28[1];
        if (v29 - v30 != v28[2] - (void)v31) {
          goto LABEL_33;
        }
        while (v30 != v29)
        {
          if (*(_DWORD *)v30 != *v31) {
            goto LABEL_33;
          }
          v30 += 4;
          ++v31;
        }
        if (v27[7] != v28[7]) {
          goto LABEL_33;
        }
        if ((void **)v18 != v17)
        {
          unint64_t v85 = v18 + 64;
          if ((void **)(v18 + 64) != v17)
          {
            unint64_t v86 = v18 + 32;
            while (1)
            {
              v87 = (unsigned __int8 *)v85;
              uint64_t v88 = *(unsigned __int8 *)(v18 + 23);
              if ((v88 & 0x80u) == 0) {
                uint64_t v89 = *(unsigned __int8 *)(v18 + 23);
              }
              else {
                uint64_t v89 = *(void *)(v18 + 8);
              }
              uint64_t v90 = *(unsigned __int8 *)(v86 + 55);
              int v91 = (char)v90;
              if ((v90 & 0x80u) != 0) {
                uint64_t v90 = *(void *)(v86 + 40);
              }
              if (v89 != v90) {
                goto LABEL_109;
              }
              if (v91 >= 0) {
                long long v92 = v87;
              }
              else {
                long long v92 = *(unsigned __int8 **)v87;
              }
              if ((v88 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v18, v92, *(void *)(v18 + 8))) {
                  goto LABEL_109;
                }
              }
              else if (*(unsigned char *)(v18 + 23))
              {
                long long v93 = (unsigned __int8 *)v18;
                while (*v93 == *v92)
                {
                  ++v93;
                  ++v92;
                  if (!--v88) {
                    goto LABEL_104;
                  }
                }
LABEL_109:
                v99 = (void **)(v18 + 32);
                if (*(char *)(v18 + 55) < 0) {
                  operator delete(*v99);
                }
                long long v100 = *(_OWORD *)v87;
                *(void *)(v18 + 48) = *((void *)v87 + 2);
                *(_OWORD *)v99 = v100;
                *(unsigned char *)(v86 + 55) = 0;
                unsigned __int8 *v87 = 0;
                *(void *)(v18 + 56) = *(void *)(v86 + 56);
                v18 += 32;
                goto LABEL_112;
              }
LABEL_104:
              uint64_t v94 = *(void **)(v18 + 24);
              long long v95 = *(void **)(v86 + 56);
              long long v97 = (char *)v94[1];
              uint64_t v96 = (char *)v94[2];
              v98 = (_DWORD *)v95[1];
              if (v96 - v97 != v95[2] - (void)v98) {
                goto LABEL_109;
              }
              while (v97 != v96)
              {
                if (*(_DWORD *)v97 != *v98) {
                  goto LABEL_109;
                }
                v97 += 4;
                ++v98;
              }
              if (v94[7] != v95[7]) {
                goto LABEL_109;
              }
              v99 = (void **)v18;
LABEL_112:
              unint64_t v85 = (unint64_t)(v87 + 32);
              unint64_t v86 = (unint64_t)v87;
              if (v87 + 32 == (unsigned __int8 *)v17) {
                goto LABEL_116;
              }
            }
          }
          v99 = (void **)v18;
LABEL_116:
          uint64_t v17 = v99 + 4;
          uint64_t v11 = a2;
        }
LABEL_34:
        long long v109 = 0uLL;
        v110 = 0;
        unint64_t v32 = *v13;
        uint64_t v33 = (uint64_t)v17 - *v13;
        if (v33 < 1)
        {
          unint64_t v47 = 0;
          goto LABEL_47;
        }
        uint64_t v34 = v33 >> 5;
        v118 = &v110;
        uint64_t v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v33 >> 5);
        *(void *)std::string buf = v35;
        *(void *)&buf[8] = v35;
        *(void *)&buf[16] = v35;
        v117 = (char *)v35 + 32 * v36;
        long long v37 = (char *)v35 + 32 * v34;
        uint64_t v38 = 32 * v34;
        do
        {
          if (*(char *)(v32 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)v32, *(void *)(v32 + 8));
          }
          else
          {
            long long v39 = *(_OWORD *)v32;
            v35->__r_.__value_.__r.__words[2] = *(void *)(v32 + 16);
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
          }
          v35[1].__r_.__value_.__r.__words[0] = *(void *)(v32 + 24);
          uint64_t v35 = (std::string *)((char *)v35 + 32);
          v32 += 32;
          v38 -= 32;
        }
        while (v38);
        *(void *)&buf[16] = v37;
        *(void *)&buf[8] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>((uint64_t)&v110, 0, 0, v109, v109, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
        uint64_t v40 = *((void *)&v109 + 1);
        uint64_t v41 = *(void *)&buf[16];
        uint64_t v114 = *(void *)&buf[16];
        uint64_t v115 = *(void *)&buf[16];
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        v112.__r_.__value_.__l.__size_ = (std::string::size_type)&v114;
        v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115;
        if (*((void *)&v109 + 1))
        {
          uint64_t v42 = 0;
          do
          {
            *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
            uint64_t v43 = *(void *)(v42 + 16);
            uint64_t v44 = *(void *)(v42 + 24);
            *(void *)(v42 + 8) = 0;
            *(void *)(v42 + 16) = 0;
            *(void *)uint64_t v42 = 0;
            v42 += 32;
            *(void *)(v41 + 16) = v43;
            *(void *)(v41 + 24) = v44;
            v41 += 32;
          }
          while (v42 != v40);
          uint64_t v115 = v41;
        }
        LOBYTE(v113) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v112);
        long long v45 = v109;
        *(void *)&long long v109 = *(void *)&buf[8];
        *((void *)&v109 + 1) = v41;
        *(_OWORD *)&buf[8] = v45;
        std::string::size_type v46 = v110;
        v110 = v117;
        v117 = v46;
        *(void *)std::string buf = v45;
        std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)buf);
        unint64_t v47 = *((void *)&v109 + 1);
        if ((void)v109 == *((void *)&v109 + 1))
        {
LABEL_47:
          if (*(char *)(v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
            unint64_t v47 = *((void *)&v109 + 1);
          }
          else
          {
            std::string v112 = *(std::string *)v11;
          }
          uint64_t v113 = a2 + 48;
          if (v47 >= (unint64_t)v110)
          {
            uint64_t v49 = (uint64_t)(v47 - v109) >> 5;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 59) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = (uint64_t)&v110[-v109];
            if ((uint64_t)&v110[-v109] >> 4 > v50) {
              unint64_t v50 = v51 >> 4;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v52 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            v118 = &v110;
            unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v52);
            unint64_t v54 = &v53[32 * v49];
            *(void *)std::string buf = v53;
            *(void *)&buf[8] = v54;
            v117 = &v53[32 * v55];
            long long v56 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
            *((void *)v54 + 2) = *((void *)&v112.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v54 = v56;
            memset(&v112, 0, sizeof(v112));
            *((void *)v54 + 3) = v113;
            *(void *)&buf[16] = v54 + 32;
            std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer((uint64_t *)&v109, buf);
            uint64_t v57 = *((void *)&v109 + 1);
            std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)buf);
            *((void *)&v109 + 1) = v57;
            uint64_t v11 = a2;
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v112.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v48 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
            *(void *)(v47 + 16) = *((void *)&v112.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v47 = v48;
            *(void *)(v47 + 24) = v113;
            *((void *)&v109 + 1) = v47 + 32;
          }
        }
        unint64_t v58 = (_OWORD *)(*v4 + 144 * v12);
        MEMORY[0x1CB773EE0](buf, v58);
        long long v59 = v58[6];
        long long v60 = v58[8];
        long long v120 = v58[7];
        long long v121 = v60;
        long long v119 = v59;
        memset(&v122, 0, sizeof(v122));
        std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(&v122, (long long *)v109, *((long long **)&v109 + 1), (uint64_t)(*((void *)&v109 + 1) - v109) >> 5);
        unint64_t v61 = (unint64_t)a4[1];
        unint64_t v62 = (unint64_t)a4[2];
        if (v61 >= v62)
        {
          unint64_t v67 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v61 - (void)*a4) >> 3);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0x186186186186186) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v69 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v62 - (void)*a4) >> 3);
          if (2 * v69 > v68) {
            unint64_t v68 = 2 * v69;
          }
          if (v69 >= 0xC30C30C30C30C3) {
            unint64_t v70 = 0x186186186186186;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            if (v70 > 0x186186186186186) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v71 = (char *)operator new(168 * v70);
          }
          else
          {
            uint64_t v71 = 0;
          }
          uint64_t v72 = &v71[168 * v67];
          char v73 = &v71[168 * v70];
          MEMORY[0x1CB773EE0](v72, buf);
          long long v74 = v120;
          *((_OWORD *)v72 + 6) = v119;
          *((_OWORD *)v72 + 7) = v74;
          long long v75 = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
          *((_OWORD *)v72 + 8) = v121;
          *((_OWORD *)v72 + 9) = v75;
          *((void *)v72 + 20) = *((void *)&v122.__r_.__value_.__l + 2);
          memset(&v122, 0, sizeof(v122));
          uint64_t v66 = (uint64_t)(v72 + 168);
          std::string v77 = *a4;
          std::string v76 = a4[1];
          if (v76 == *a4)
          {
            *a4 = v72;
            a4[1] = (char *)v66;
            a4[2] = v73;
          }
          else
          {
            uint64_t v78 = 0;
            do
            {
              long long v79 = &v72[v78];
              v80 = &v76[v78];
              MEMORY[0x1CB773EE0](&v72[v78 - 168], &v76[v78 - 168]);
              long long v81 = *(_OWORD *)&v76[v78 - 72];
              long long v82 = *(_OWORD *)&v76[v78 - 56];
              *(_OWORD *)(v79 - 40) = *(_OWORD *)&v76[v78 - 40];
              *(_OWORD *)(v79 - 56) = v82;
              *(_OWORD *)(v79 - 72) = v81;
              *((void *)v79 - 2) = 0;
              *((void *)v79 - 1) = 0;
              *((void *)v79 - 3) = 0;
              *(_OWORD *)(v79 - 24) = *(_OWORD *)&v76[v78 - 24];
              *((void *)v79 - 1) = *(void *)&v76[v78 - 8];
              *((void *)v80 - 3) = 0;
              *((void *)v80 - 2) = 0;
              *((void *)v80 - 1) = 0;
              v78 -= 168;
            }
            while (&v76[v78] != v77);
            int64_t v83 = &v72[v78];
            a4 = v107;
            char v84 = *v107;
            std::string v76 = v107[1];
            *v107 = v83;
            v107[1] = (char *)v66;
            v107[2] = v73;
            if (v76 == v84)
            {
              char v4 = v106;
            }
            else
            {
              char v4 = v106;
              do
              {
                v112.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 - 24);
                std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
                MEMORY[0x1CB773EF0](v76 - 168);
                v76 -= 168;
              }
              while (v76 != v84);
              std::string v76 = v84;
            }
          }
          uint64_t v11 = a2;
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          uint64_t v63 = MEMORY[0x1CB773EE0]();
          long long v64 = v119;
          long long v65 = v121;
          *(_OWORD *)(v63 + 112) = v120;
          *(_OWORD *)(v63 + 128) = v65;
          *(_OWORD *)(v63 + 96) = v64;
          *(void *)(v63 + 152) = 0;
          *(void *)(v63 + 160) = 0;
          *(void *)(v63 + 144) = 0;
          *(std::string *)(v63 + 144) = v122;
          memset(&v122, 0, sizeof(v122));
          uint64_t v66 = v63 + 168;
        }
        a4[1] = (char *)v66;
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        MEMORY[0x1CB773EF0](buf);
        *(void *)std::string buf = &v109;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v12;
      }
      while (v12 < 0x8E38E38E38E38E39 * ((uint64_t)(v4[1] - *v4) >> 4));
    }
    *(void *)std::string buf = v111;
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    v101 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      uint64_t v102 = *(int *)(a2 + 40);
      if (v102 >= 8)
      {
        v104 = SNLPOSLoggerForCategory(4);
        v103 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v102;
          _os_log_impl(&dword_1C8DA9000, v104, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v103 = off_1E65808C8[v102];
      }
      nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, &v112);
      unint64_t v105 = 0x8E38E38E38E38E39 * ((uint64_t)(v4[1] - *v4) >> 4);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v103;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0]) >> 3);
      *(_WORD *)&buf[22] = 2048;
      v117 = (char *)v105;
      _os_log_impl(&dword_1C8DA9000, v101, OS_LOG_TYPE_ERROR, "[%s] Span encoding failed; number of buckets (%lu) not matching number of tokens (%lu).\n",
        buf,
        0x20u);
      v111[0] = (void **)&v112;
      std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](v111);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1C8ECE8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::~TagBucketList(void **this)
{
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 5));
  uint64_t v2 = this + 2;
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(unint64_t a1, const void **a2, uint64_t a3, char a4)
{
  uint64_t v323 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v9 = a2 - 4;
    v308 = a2 - 8;
    v305 = a2 - 12;
    unint64_t v10 = a1;
    v316 = a2;
    while (1)
    {
      while (1)
      {
        a1 = v10;
        uint64_t v11 = (uint64_t)a2 - v10;
        unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int v139 = *(char *)(v10 + 23);
              int v140 = *((char *)a2 - 9);
              if (v140 >= 0) {
                size_t v141 = *((unsigned __int8 *)a2 - 9);
              }
              else {
                size_t v141 = (size_t)*(a2 - 3);
              }
              if (v140 >= 0) {
                v142 = v9;
              }
              else {
                v142 = (const void **)*(a2 - 4);
              }
              if (v139 >= 0) {
                size_t v143 = *(unsigned __int8 *)(v10 + 23);
              }
              else {
                size_t v143 = *(void *)(v10 + 8);
              }
              if (v139 >= 0) {
                v144 = (const void *)v10;
              }
              else {
                v144 = *(const void **)v10;
              }
              if (v143 >= v141) {
                size_t v145 = v141;
              }
              else {
                size_t v145 = v143;
              }
              int v146 = memcmp(v142, v144, v145);
              BOOL v147 = v141 < v143;
              if (v146) {
                BOOL v147 = v146 < 0;
              }
              if (v147)
              {
                long long v148 = *(_OWORD *)v10;
                v319 = *(const void **)(v10 + 16);
                *(_OWORD *)std::string __p = v148;
                long long v149 = *(_OWORD *)v9;
                *(void *)(v10 + 16) = v9[2];
                *(_OWORD *)unint64_t v10 = v149;
                long long v150 = *(_OWORD *)__p;
                v9[2] = v319;
                *(_OWORD *)unint64_t v9 = v150;
                v151 = *(const void **)(v10 + 24);
                *(void *)(v10 + 24) = *(a2 - 1);
                *(a2 - 1) = v151;
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)v10, (const void **)(v10 + 32), v9);
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(v10, (long long *)(v10 + 32), (long long *)(v10 + 64), v9);
              break;
            case 5uLL:
              std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(v10, v10 + 32, v10 + 64, (long long *)(v10 + 96), v9);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v11 <= 767)
        {
          if (a4)
          {
            if ((const void **)v10 != a2)
            {
              v152 = (const void **)(v10 + 32);
              if ((const void **)(v10 + 32) != a2)
              {
                uint64_t v153 = 0;
                v154 = (const void **)v10;
                do
                {
                  v155 = v152;
                  int v156 = *((char *)v154 + 23);
                  int v157 = *((char *)v154 + 55);
                  if (v157 >= 0) {
                    size_t v158 = *((unsigned __int8 *)v154 + 55);
                  }
                  else {
                    size_t v158 = (size_t)v154[5];
                  }
                  if (v157 >= 0) {
                    v159 = v152;
                  }
                  else {
                    v159 = (const void **)v154[4];
                  }
                  if (v156 >= 0) {
                    size_t v160 = *((unsigned __int8 *)v154 + 23);
                  }
                  else {
                    size_t v160 = (size_t)v154[1];
                  }
                  if (v156 >= 0) {
                    v161 = v154;
                  }
                  else {
                    v161 = *v154;
                  }
                  if (v160 >= v158) {
                    size_t v162 = v158;
                  }
                  else {
                    size_t v162 = v160;
                  }
                  int v163 = memcmp(v159, v161, v162);
                  BOOL v164 = v158 < v160;
                  if (v163) {
                    BOOL v164 = v163 < 0;
                  }
                  if (v164)
                  {
                    long long v165 = *(_OWORD *)v155;
                    v319 = v155[2];
                    *(_OWORD *)std::string __p = v165;
                    v155[1] = 0;
                    v155[2] = 0;
                    *v155 = 0;
                    v320 = v154[7];
                    if (SHIBYTE(v319) >= 0) {
                      v166 = (void *)HIBYTE(v319);
                    }
                    else {
                      v166 = __p[1];
                    }
                    if (SHIBYTE(v319) >= 0) {
                      v167 = __p;
                    }
                    else {
                      v167 = (void **)__p[0];
                    }
                    uint64_t v168 = v153;
                    while (1)
                    {
                      uint64_t v169 = a1 + v168;
                      v170 = (void **)(a1 + v168 + 32);
                      if (*(char *)(a1 + v168 + 55) < 0) {
                        operator delete(*v170);
                      }
                      *(_OWORD *)v170 = *(_OWORD *)v169;
                      uint64_t v171 = *(void *)(v169 + 24);
                      *(void *)(a1 + v168 + 48) = *(void *)(v169 + 16);
                      *(unsigned char *)(v169 + 23) = 0;
                      *(unsigned char *)uint64_t v169 = 0;
                      *(void *)(v169 + 56) = v171;
                      if (!v168) {
                        break;
                      }
                      int v172 = *(char *)(a1 + v168 - 9);
                      if (v172 >= 0) {
                        size_t v173 = *(unsigned __int8 *)(a1 + v168 - 9);
                      }
                      else {
                        size_t v173 = *(void *)(a1 + v168 - 24);
                      }
                      if (v172 >= 0) {
                        v174 = (const void *)(a1 + v168 - 32);
                      }
                      else {
                        v174 = *(const void **)(a1 + v168 - 32);
                      }
                      if (v173 >= (unint64_t)v166) {
                        size_t v175 = (size_t)v166;
                      }
                      else {
                        size_t v175 = v173;
                      }
                      int v176 = memcmp(v167, v174, v175);
                      BOOL v177 = (unint64_t)v166 < v173;
                      if (v176) {
                        BOOL v177 = v176 < 0;
                      }
                      v168 -= 32;
                      if (!v177)
                      {
                        uint64_t v178 = a1 + v168 + 32;
                        goto LABEL_305;
                      }
                    }
                    uint64_t v178 = a1;
LABEL_305:
                    if (*(char *)(v178 + 23) < 0) {
                      operator delete(*(void **)v178);
                    }
                    long long v179 = *(_OWORD *)__p;
                    *(void *)(v178 + 16) = v319;
                    *(_OWORD *)uint64_t v178 = v179;
                    *(void *)(v178 + 24) = v320;
                  }
                  v152 = v155 + 4;
                  v153 += 32;
                  v154 = v155;
                }
                while (v155 + 4 != v316);
              }
            }
          }
          else if ((const void **)v10 != a2)
          {
            v279 = (const void *)(v10 + 32);
            if ((const void **)(v10 + 32) != a2)
            {
              unint64_t v280 = v10 - 32;
              do
              {
                unint64_t v281 = (unint64_t)v279;
                int v282 = *(char *)(a1 + 23);
                int v283 = *(char *)(a1 + 55);
                if (v283 >= 0) {
                  size_t v284 = *(unsigned __int8 *)(a1 + 55);
                }
                else {
                  size_t v284 = *(void *)(a1 + 40);
                }
                if (v283 >= 0) {
                  v285 = v279;
                }
                else {
                  v285 = *(const void **)(a1 + 32);
                }
                if (v282 >= 0) {
                  size_t v286 = *(unsigned __int8 *)(a1 + 23);
                }
                else {
                  size_t v286 = *(void *)(a1 + 8);
                }
                if (v282 >= 0) {
                  v287 = (const void *)a1;
                }
                else {
                  v287 = *(const void **)a1;
                }
                if (v286 >= v284) {
                  size_t v288 = v284;
                }
                else {
                  size_t v288 = v286;
                }
                int v289 = memcmp(v285, v287, v288);
                BOOL v290 = v284 < v286;
                if (v289) {
                  BOOL v290 = v289 < 0;
                }
                if (v290)
                {
                  long long v291 = *(_OWORD *)v281;
                  v319 = *(const void **)(v281 + 16);
                  *(_OWORD *)std::string __p = v291;
                  *(void *)(v281 + 8) = 0;
                  *(void *)(v281 + 16) = 0;
                  *(void *)unint64_t v281 = 0;
                  v320 = *(const void **)(a1 + 56);
                  if (SHIBYTE(v319) >= 0) {
                    v292 = (void *)HIBYTE(v319);
                  }
                  else {
                    v292 = __p[1];
                  }
                  if (SHIBYTE(v319) >= 0) {
                    v293 = __p;
                  }
                  else {
                    v293 = (void **)__p[0];
                  }
                  v294 = (const void **)v280;
                  do
                  {
                    v295 = (void **)(v294 + 8);
                    if (*((char *)v294 + 87) < 0) {
                      operator delete(*v295);
                    }
                    *(_OWORD *)v295 = *((_OWORD *)v294 + 2);
                    v294[10] = v294[6];
                    *((unsigned char *)v294 + 32) = 0;
                    v296 = v294 + 4;
                    *((unsigned char *)v294 + 55) = 0;
                    v294[11] = v294[7];
                    int v297 = *((char *)v294 + 23);
                    if (v297 >= 0) {
                      size_t v298 = *((unsigned __int8 *)v294 + 23);
                    }
                    else {
                      size_t v298 = (size_t)v294[1];
                    }
                    if (v297 >= 0) {
                      v299 = v294;
                    }
                    else {
                      v299 = *v294;
                    }
                    if (v298 >= (unint64_t)v292) {
                      size_t v300 = (size_t)v292;
                    }
                    else {
                      size_t v300 = v298;
                    }
                    int v301 = memcmp(v293, v299, v300);
                    BOOL v302 = (unint64_t)v292 < v298;
                    if (v301) {
                      BOOL v302 = v301 < 0;
                    }
                    v294 -= 4;
                  }
                  while (v302);
                  if (*((char *)v296 + 23) < 0) {
                    operator delete((void *)*v296);
                  }
                  long long v303 = *(_OWORD *)__p;
                  v296[2] = v319;
                  *(_OWORD *)v296 = v303;
                  v296[3] = v320;
                  a2 = v316;
                }
                v279 = (const void *)(v281 + 32);
                v280 += 32;
                a1 = v281;
              }
              while ((const void **)(v281 + 32) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((const void **)v10 != a2)
          {
            unint64_t v304 = (unint64_t)a2 - v10;
            int64_t v180 = (v12 - 2) >> 1;
            int64_t v181 = v180;
            unint64_t v307 = a1;
            unint64_t v311 = v12;
            do
            {
              int64_t v182 = v181;
              if (v180 >= v181)
              {
                int64_t v314 = v181;
                uint64_t v183 = (2 * v181) | 1;
                unint64_t v184 = a1 + 32 * v183;
                uint64_t v185 = 2 * v181 + 2;
                if (v185 < (uint64_t)v12)
                {
                  char v186 = *(unsigned char *)(v184 + 55);
                  v306 = *(const void **)(v184 + 32);
                  char v187 = *(unsigned char *)(v184 + 23);
                  v309 = *(const void **)v184;
                  if (v187 >= 0) {
                    size_t v188 = *(unsigned __int8 *)(v184 + 23);
                  }
                  else {
                    size_t v188 = *(void *)(v184 + 8);
                  }
                  if (v187 >= 0) {
                    v189 = (const void *)(a1 + 32 * v183);
                  }
                  else {
                    v189 = *(const void **)v184;
                  }
                  if (v186 >= 0) {
                    size_t v190 = *(unsigned __int8 *)(v184 + 55);
                  }
                  else {
                    size_t v190 = *(void *)(v184 + 40);
                  }
                  if (v186 >= 0) {
                    v191 = (const void *)(v184 + 32);
                  }
                  else {
                    v191 = *(const void **)(v184 + 32);
                  }
                  if (v190 >= v188) {
                    size_t v192 = v188;
                  }
                  else {
                    size_t v192 = v190;
                  }
                  int v193 = memcmp(v189, v191, v192);
                  BOOL v194 = v188 < v190;
                  if (v193) {
                    BOOL v194 = v193 < 0;
                  }
                  BOOL v5 = !v194;
                  v195 = v309;
                  if (!v5)
                  {
                    v195 = v306;
                    v184 += 32;
                    uint64_t v183 = v185;
                  }
                }
                else
                {
                  v195 = *(const void **)v184;
                }
                unint64_t v196 = a1 + 32 * v314;
                int v197 = *(char *)(v196 + 23);
                int v198 = *(char *)(v184 + 23);
                if (v198 >= 0) {
                  size_t v199 = *(unsigned __int8 *)(v184 + 23);
                }
                else {
                  size_t v199 = *(void *)(v184 + 8);
                }
                if (v198 >= 0) {
                  v200 = (const void *)v184;
                }
                else {
                  v200 = v195;
                }
                if (v197 >= 0) {
                  size_t v201 = *(unsigned __int8 *)(v196 + 23);
                }
                else {
                  size_t v201 = *(void *)(v196 + 8);
                }
                if (v197 >= 0) {
                  v202 = (const void *)(a1 + 32 * v314);
                }
                else {
                  v202 = *(const void **)v196;
                }
                if (v201 >= v199) {
                  size_t v203 = v199;
                }
                else {
                  size_t v203 = v201;
                }
                int v204 = memcmp(v200, v202, v203);
                int64_t v182 = v314;
                BOOL v205 = v199 < v201;
                if (v204) {
                  BOOL v205 = v204 < 0;
                }
                if (!v205)
                {
                  long long v206 = *(_OWORD *)v196;
                  v319 = *(const void **)(v196 + 16);
                  *(_OWORD *)std::string __p = v206;
                  *(void *)(v196 + 8) = 0;
                  *(void *)(v196 + 16) = 0;
                  *(void *)unint64_t v196 = 0;
                  v320 = *(const void **)(a1 + 32 * v314 + 24);
                  do
                  {
                    unint64_t v207 = v184;
                    if (*(char *)(v196 + 23) < 0) {
                      operator delete(*(void **)v196);
                    }
                    long long v208 = *(_OWORD *)v184;
                    *(void *)(v196 + 16) = *(void *)(v184 + 16);
                    *(_OWORD *)unint64_t v196 = v208;
                    *(unsigned char *)(v184 + 23) = 0;
                    *(unsigned char *)unint64_t v184 = 0;
                    *(void *)(v196 + 24) = *(void *)(v184 + 24);
                    if (v180 < v183) {
                      break;
                    }
                    uint64_t v209 = (2 * v183) | 1;
                    unint64_t v184 = a1 + 32 * v209;
                    uint64_t v183 = 2 * v183 + 2;
                    if (v183 < (uint64_t)v12)
                    {
                      int v210 = *(char *)(v184 + 55);
                      v211 = *(const void **)(v184 + 32);
                      int v212 = *(char *)(v184 + 23);
                      v213 = *(const void **)v184;
                      if (v212 >= 0) {
                        size_t v214 = *(unsigned __int8 *)(v184 + 23);
                      }
                      else {
                        size_t v214 = *(void *)(v184 + 8);
                      }
                      if (v212 >= 0) {
                        v215 = (const void *)(a1 + 32 * v209);
                      }
                      else {
                        v215 = *(const void **)v184;
                      }
                      int64_t v216 = v180;
                      if (v210 >= 0) {
                        size_t v217 = *(unsigned __int8 *)(v184 + 55);
                      }
                      else {
                        size_t v217 = *(void *)(v184 + 40);
                      }
                      if (v210 >= 0) {
                        v218 = (const void *)(v184 + 32);
                      }
                      else {
                        v218 = *(const void **)(v184 + 32);
                      }
                      if (v217 >= v214) {
                        size_t v219 = v214;
                      }
                      else {
                        size_t v219 = v217;
                      }
                      int v220 = memcmp(v215, v218, v219);
                      BOOL v4 = v214 >= v217;
                      int64_t v180 = v216;
                      BOOL v221 = !v4;
                      if (v220) {
                        BOOL v221 = v220 < 0;
                      }
                      BOOL v222 = !v221;
                      v223 = v221 ? v211 : v213;
                      unint64_t v12 = v311;
                      a1 = v307;
                      if (v222) {
                        uint64_t v183 = v209;
                      }
                      else {
                        v184 += 32;
                      }
                    }
                    else
                    {
                      v223 = *(const void **)v184;
                      uint64_t v183 = v209;
                    }
                    int v224 = *(char *)(v184 + 23);
                    if (v224 >= 0) {
                      size_t v225 = *(unsigned __int8 *)(v184 + 23);
                    }
                    else {
                      size_t v225 = *(void *)(v184 + 8);
                    }
                    if (v224 >= 0) {
                      v226 = (const void *)v184;
                    }
                    else {
                      v226 = v223;
                    }
                    if (SHIBYTE(v319) >= 0) {
                      v227 = (void *)HIBYTE(v319);
                    }
                    else {
                      v227 = __p[1];
                    }
                    if (SHIBYTE(v319) >= 0) {
                      v228 = __p;
                    }
                    else {
                      v228 = (void **)__p[0];
                    }
                    if ((unint64_t)v227 >= v225) {
                      size_t v229 = v225;
                    }
                    else {
                      size_t v229 = (size_t)v227;
                    }
                    int v230 = memcmp(v226, v228, v229);
                    BOOL v231 = v225 < (unint64_t)v227;
                    if (v230) {
                      BOOL v231 = v230 < 0;
                    }
                    unint64_t v196 = v207;
                  }
                  while (!v231);
                  if (*(char *)(v207 + 23) < 0) {
                    operator delete(*(void **)v207);
                  }
                  long long v232 = *(_OWORD *)__p;
                  *(void *)(v207 + 16) = v319;
                  *(_OWORD *)unint64_t v207 = v232;
                  *(void *)(v207 + 24) = v320;
                  int64_t v182 = v314;
                }
              }
              int64_t v181 = v182 - 1;
            }
            while (v182);
            uint64_t v233 = v304 >> 5;
            v234 = (void **)v316;
            do
            {
              uint64_t v235 = 0;
              v315 = *(void **)a1;
              *(void *)&long long v321 = *(void *)(a1 + 8);
              *(void *)((char *)&v321 + 7) = *(void *)(a1 + 15);
              char v317 = *(unsigned char *)(a1 + 23);
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              v310 = v234;
              v312 = *(void **)(a1 + 24);
              unint64_t v236 = a1;
              do
              {
                uint64_t v237 = v236 + 32 * v235 + 32;
                uint64_t v238 = 2 * v235;
                uint64_t v235 = (2 * v235) | 1;
                uint64_t v239 = v238 + 2;
                if (v238 + 2 < v233)
                {
                  int v240 = *(char *)(v237 + 55);
                  int v241 = *(char *)(v237 + 23);
                  if (v241 >= 0) {
                    size_t v242 = *(unsigned __int8 *)(v237 + 23);
                  }
                  else {
                    size_t v242 = *(void *)(v237 + 8);
                  }
                  if (v241 >= 0) {
                    v243 = (const void *)v237;
                  }
                  else {
                    v243 = *(const void **)v237;
                  }
                  if (v240 >= 0) {
                    size_t v244 = *(unsigned __int8 *)(v237 + 55);
                  }
                  else {
                    size_t v244 = *(void *)(v237 + 40);
                  }
                  if (v240 >= 0) {
                    v245 = (const void *)(v237 + 32);
                  }
                  else {
                    v245 = *(const void **)(v237 + 32);
                  }
                  if (v244 >= v242) {
                    size_t v246 = v242;
                  }
                  else {
                    size_t v246 = v244;
                  }
                  int v247 = memcmp(v243, v245, v246);
                  BOOL v248 = v242 < v244;
                  if (v247) {
                    BOOL v248 = v247 < 0;
                  }
                  if (v248)
                  {
                    v237 += 32;
                    uint64_t v235 = v239;
                  }
                }
                if (*(char *)(v236 + 23) < 0) {
                  operator delete(*(void **)v236);
                }
                long long v249 = *(_OWORD *)v237;
                *(void *)(v236 + 16) = *(void *)(v237 + 16);
                *(_OWORD *)unint64_t v236 = v249;
                *(unsigned char *)(v237 + 23) = 0;
                *(unsigned char *)uint64_t v237 = 0;
                *(void *)(v236 + 24) = *(void *)(v237 + 24);
                unint64_t v236 = v237;
              }
              while (v235 <= (uint64_t)((unint64_t)(v233 - 2) >> 1));
              v234 = v310 - 4;
              int v250 = *(char *)(v237 + 23);
              if ((void **)v237 == v310 - 4)
              {
                if (v250 < 0) {
                  operator delete(*(void **)v237);
                }
                *(void *)uint64_t v237 = v315;
                uint64_t v277 = *(void *)((char *)&v321 + 7);
                *(void *)(v237 + 8) = v321;
                *(void *)(v237 + 15) = v277;
                *(unsigned char *)(v237 + 23) = v317;
                *(void *)(v237 + 24) = v312;
              }
              else
              {
                if (v250 < 0) {
                  operator delete(*(void **)v237);
                }
                long long v251 = *(_OWORD *)v234;
                *(void *)(v237 + 16) = *(v310 - 2);
                *(_OWORD *)uint64_t v237 = v251;
                *((unsigned char *)v310 - 9) = 0;
                *((unsigned char *)v310 - 32) = 0;
                *(void *)(v237 + 24) = *(v310 - 1);
                if (*((char *)v310 - 9) < 0) {
                  operator delete(*v234);
                }
                *(v310 - 4) = v315;
                v252 = (void *)v321;
                *(void **)((char *)v310 - 17) = *(void **)((char *)&v321 + 7);
                *(v310 - 3) = v252;
                *((unsigned char *)v310 - 9) = v317;
                *(v310 - 1) = v312;
                uint64_t v253 = v237 + 32 - a1;
                if (v253 >= 33)
                {
                  unint64_t v254 = (((unint64_t)v253 >> 5) - 2) >> 1;
                  unint64_t v255 = a1 + 32 * v254;
                  int v256 = *(char *)(v237 + 23);
                  int v257 = *(char *)(v255 + 23);
                  if (v257 >= 0) {
                    size_t v258 = *(unsigned __int8 *)(v255 + 23);
                  }
                  else {
                    size_t v258 = *(void *)(v255 + 8);
                  }
                  if (v257 >= 0) {
                    v259 = (const void *)(a1 + 32 * v254);
                  }
                  else {
                    v259 = *(const void **)v255;
                  }
                  if (v256 >= 0) {
                    size_t v260 = *(unsigned __int8 *)(v237 + 23);
                  }
                  else {
                    size_t v260 = *(void *)(v237 + 8);
                  }
                  if (v256 >= 0) {
                    v261 = (const void *)v237;
                  }
                  else {
                    v261 = *(const void **)v237;
                  }
                  if (v260 >= v258) {
                    size_t v262 = v258;
                  }
                  else {
                    size_t v262 = v260;
                  }
                  int v263 = memcmp(v259, v261, v262);
                  BOOL v264 = v258 < v260;
                  if (v263) {
                    BOOL v264 = v263 < 0;
                  }
                  if (v264)
                  {
                    long long v265 = *(_OWORD *)v237;
                    v319 = *(const void **)(v237 + 16);
                    *(_OWORD *)std::string __p = v265;
                    *(void *)(v237 + 8) = 0;
                    *(void *)(v237 + 16) = 0;
                    *(void *)uint64_t v237 = 0;
                    v320 = *(const void **)(v237 + 24);
                    if (SHIBYTE(v319) >= 0) {
                      v266 = (void *)HIBYTE(v319);
                    }
                    else {
                      v266 = __p[1];
                    }
                    if (SHIBYTE(v319) >= 0) {
                      v267 = __p;
                    }
                    else {
                      v267 = (void **)__p[0];
                    }
                    do
                    {
                      uint64_t v268 = v255;
                      if (*(char *)(v237 + 23) < 0) {
                        operator delete(*(void **)v237);
                      }
                      long long v269 = *(_OWORD *)v255;
                      *(void *)(v237 + 16) = *(void *)(v255 + 16);
                      *(_OWORD *)uint64_t v237 = v269;
                      *(unsigned char *)(v255 + 23) = 0;
                      *(unsigned char *)unint64_t v255 = 0;
                      *(void *)(v237 + 24) = *(void *)(v255 + 24);
                      if (!v254) {
                        break;
                      }
                      unint64_t v254 = (v254 - 1) >> 1;
                      unint64_t v255 = a1 + 32 * v254;
                      int v270 = *(char *)(v255 + 23);
                      if (v270 >= 0) {
                        size_t v271 = *(unsigned __int8 *)(v255 + 23);
                      }
                      else {
                        size_t v271 = *(void *)(v255 + 8);
                      }
                      if (v270 >= 0) {
                        v272 = (const void *)(a1 + 32 * v254);
                      }
                      else {
                        v272 = *(const void **)v255;
                      }
                      if ((unint64_t)v266 >= v271) {
                        size_t v273 = v271;
                      }
                      else {
                        size_t v273 = (size_t)v266;
                      }
                      int v274 = memcmp(v272, v267, v273);
                      BOOL v275 = v271 < (unint64_t)v266;
                      if (v274) {
                        BOOL v275 = v274 < 0;
                      }
                      uint64_t v237 = v268;
                    }
                    while (v275);
                    if (*(char *)(v268 + 23) < 0) {
                      operator delete(*(void **)v268);
                    }
                    long long v276 = *(_OWORD *)__p;
                    *(void *)(v268 + 16) = v319;
                    *(_OWORD *)uint64_t v268 = v276;
                    *(void *)(v268 + 24) = v320;
                    v234 = v310 - 4;
                  }
                }
              }
            }
            while (v233-- > 2);
          }
          return;
        }
        unint64_t v13 = v10 + 32 * (v12 >> 1);
        if ((unint64_t)v11 > 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32 * (v12 >> 1)), v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 32), (const void **)(v13 - 32), v308);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 64), (const void **)(a1 + 32 + 32 * (v12 >> 1)), v305);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(v13 - 32), (const void **)(a1 + 32 * (v12 >> 1)), (const void **)(a1 + 32 + 32 * (v12 >> 1)));
          long long v14 = *(_OWORD *)a1;
          uint64_t v15 = *(void *)(a1 + 24);
          v319 = *(const void **)(a1 + 16);
          *(_OWORD *)std::string __p = v14;
          uint64_t v16 = *(void *)(v13 + 16);
          uint64_t v17 = *(void *)(v13 + 24);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(void *)(a1 + 16) = v16;
          *(void *)(a1 + 24) = v17;
          unint64_t v18 = v319;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v18;
          *(void *)(v13 + 24) = v15;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 32 * (v12 >> 1)), (const void **)a1, v9);
        }
        --a3;
        if (a4) {
          break;
        }
        int v19 = *(char *)(a1 + 23);
        int v20 = *(char *)(a1 - 9);
        if (v20 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 9);
        }
        else {
          size_t v21 = *(void *)(a1 - 24);
        }
        if (v20 >= 0) {
          uint64_t v22 = (const void *)(a1 - 32);
        }
        else {
          uint64_t v22 = *(const void **)(a1 - 32);
        }
        if (v19 >= 0) {
          size_t v23 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v23 = *(void *)(a1 + 8);
        }
        if (v19 >= 0) {
          int v24 = (const void *)a1;
        }
        else {
          int v24 = *(const void **)a1;
        }
        if (v23 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v23;
        }
        int v26 = memcmp(v22, v24, v25);
        BOOL v27 = v21 < v23;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (v27) {
          break;
        }
        long long v82 = *(_OWORD *)a1;
        int64_t v83 = *(const void **)(a1 + 24);
        v319 = *(const void **)(a1 + 16);
        *(_OWORD *)std::string __p = v82;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        v320 = v83;
        size_t v84 = *((unsigned __int8 *)a2 - 9);
        unint64_t v85 = (const void **)*(a2 - 4);
        size_t v86 = (size_t)*(a2 - 3);
        if (SHIBYTE(v319) >= 0) {
          v87 = (void *)HIBYTE(v319);
        }
        else {
          v87 = __p[1];
        }
        if (SHIBYTE(v319) >= 0) {
          uint64_t v88 = __p;
        }
        else {
          uint64_t v88 = (void **)__p[0];
        }
        if ((v84 & 0x80u) == 0) {
          size_t v89 = v84;
        }
        else {
          size_t v89 = v86;
        }
        if ((v84 & 0x80u) == 0) {
          uint64_t v90 = v9;
        }
        else {
          uint64_t v90 = v85;
        }
        if (v89 >= (unint64_t)v87) {
          size_t v91 = (size_t)v87;
        }
        else {
          size_t v91 = v89;
        }
        int v92 = memcmp(v88, v90, v91);
        BOOL v93 = (unint64_t)v87 < v89;
        if (v92) {
          BOOL v93 = v92 < 0;
        }
        if (v93)
        {
          uint64_t v94 = (const void **)(a1 + 32);
          do
          {
            int v95 = *((char *)v94 + 23);
            if (v95 >= 0) {
              size_t v96 = *((unsigned __int8 *)v94 + 23);
            }
            else {
              size_t v96 = (size_t)v94[1];
            }
            if (v95 >= 0) {
              long long v97 = v94;
            }
            else {
              long long v97 = *v94;
            }
            if (v96 >= (unint64_t)v87) {
              size_t v98 = (size_t)v87;
            }
            else {
              size_t v98 = v96;
            }
            int v99 = memcmp(v88, v97, v98);
            BOOL v100 = (unint64_t)v87 < v96;
            if (v99) {
              BOOL v100 = v99 < 0;
            }
            v94 += 4;
          }
          while (!v100);
          unint64_t v10 = (unint64_t)(v94 - 4);
        }
        else
        {
          v101 = (const void **)(a1 + 32);
          do
          {
            unint64_t v10 = (unint64_t)v101;
            if (v101 >= v316) {
              break;
            }
            int v102 = *((char *)v101 + 23);
            if (v102 >= 0) {
              size_t v103 = *((unsigned __int8 *)v101 + 23);
            }
            else {
              size_t v103 = (size_t)v101[1];
            }
            if (v102 >= 0) {
              v104 = v101;
            }
            else {
              v104 = *v101;
            }
            if (v103 >= (unint64_t)v87) {
              size_t v105 = (size_t)v87;
            }
            else {
              size_t v105 = v103;
            }
            int v106 = memcmp(v88, v104, v105);
            BOOL v107 = v106 < 0;
            if (!v106) {
              BOOL v107 = (unint64_t)v87 < v103;
            }
            v101 = (const void **)(v10 + 32);
          }
          while (!v107);
        }
        v108 = v316;
        if (v10 < (unint64_t)v316)
        {
          long long v109 = v9;
          do
          {
            int v110 = *((char *)v109 + 23);
            if (v110 >= 0) {
              size_t v111 = *((unsigned __int8 *)v109 + 23);
            }
            else {
              size_t v111 = (size_t)v109[1];
            }
            if (v110 >= 0) {
              std::string v112 = v109;
            }
            else {
              std::string v112 = *v109;
            }
            if (v111 >= (unint64_t)v87) {
              size_t v113 = (size_t)v87;
            }
            else {
              size_t v113 = v111;
            }
            int v114 = memcmp(v88, v112, v113);
            BOOL v115 = (unint64_t)v87 < v111;
            if (v114) {
              BOOL v115 = v114 < 0;
            }
            v109 -= 4;
          }
          while (v115);
          v108 = v109 + 4;
        }
        while (v10 < (unint64_t)v108)
        {
          long long v116 = *(_OWORD *)v10;
          v322 = *(const void **)(v10 + 16);
          long long v321 = v116;
          long long v117 = *(_OWORD *)v108;
          *(void *)(v10 + 16) = v108[2];
          *(_OWORD *)unint64_t v10 = v117;
          long long v118 = v321;
          v108[2] = v322;
          *(_OWORD *)v108 = v118;
          long long v119 = *(const void **)(v10 + 24);
          *(void *)(v10 + 24) = v108[3];
          v108[3] = v119;
          if (SHIBYTE(v319) >= 0) {
            long long v120 = (void *)HIBYTE(v319);
          }
          else {
            long long v120 = __p[1];
          }
          if (SHIBYTE(v319) >= 0) {
            long long v121 = __p;
          }
          else {
            long long v121 = (void **)__p[0];
          }
          unint64_t v122 = v10 + 32;
          do
          {
            unint64_t v10 = v122;
            size_t v123 = *(unsigned __int8 *)(v122 + 23);
            if ((v123 & 0x80u) == 0) {
              size_t v124 = v123;
            }
            else {
              size_t v124 = *(void *)(v10 + 8);
            }
            if ((v123 & 0x80u) == 0) {
              v125 = (const void *)v10;
            }
            else {
              v125 = *(const void **)v10;
            }
            if (v124 >= (unint64_t)v120) {
              size_t v126 = (size_t)v120;
            }
            else {
              size_t v126 = v124;
            }
            int v127 = memcmp(v121, v125, v126);
            BOOL v128 = v127 < 0;
            if (!v127) {
              BOOL v128 = (unint64_t)v120 < v124;
            }
            unint64_t v122 = v10 + 32;
          }
          while (!v128);
          v129 = v108 - 4;
          do
          {
            v108 = v129;
            size_t v130 = *((unsigned __int8 *)v129 + 23);
            if ((v130 & 0x80u) == 0) {
              size_t v131 = v130;
            }
            else {
              size_t v131 = (size_t)v108[1];
            }
            if ((v130 & 0x80u) == 0) {
              v132 = v108;
            }
            else {
              v132 = *v108;
            }
            if (v131 >= (unint64_t)v120) {
              size_t v133 = (size_t)v120;
            }
            else {
              size_t v133 = v131;
            }
            int v134 = memcmp(v121, v132, v133);
            BOOL v135 = v134 < 0;
            if (!v134) {
              BOOL v135 = (unint64_t)v120 < v131;
            }
            v129 = v108 - 4;
          }
          while (v135);
        }
        v136 = (void **)(v10 - 32);
        BOOL v4 = v10 - 32 >= a1;
        BOOL v5 = v10 - 32 == a1;
        a2 = v316;
        if (v10 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v137 = *(_OWORD *)v136;
          *(void *)(a1 + 16) = *(void *)(v10 - 16);
          *(_OWORD *)a1 = v137;
          *(unsigned char *)(v10 - 9) = 0;
          *(unsigned char *)(v10 - 32) = 0;
          *(void *)(a1 + 24) = *(void *)(v10 - 8);
        }
        if (*(char *)(v10 - 9) < 0) {
          operator delete(*v136);
        }
        long long v138 = *(_OWORD *)__p;
        *(void *)(v10 - 16) = v319;
        *(_OWORD *)v136 = v138;
        HIBYTE(v319) = 0;
        LOBYTE(__p[0]) = 0;
        *(void *)(v10 - 8) = v320;
        if (SHIBYTE(v319) < 0) {
          operator delete(__p[0]);
        }
LABEL_125:
        a4 = 0;
      }
      uint64_t v28 = 0;
      long long v29 = *(_OWORD *)a1;
      uint64_t v30 = *(const void **)(a1 + 24);
      v319 = *(const void **)(a1 + 16);
      *(_OWORD *)std::string __p = v29;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      v320 = v30;
      if (SHIBYTE(v319) >= 0) {
        long long v31 = (void *)HIBYTE(v319);
      }
      else {
        long long v31 = __p[1];
      }
      if (SHIBYTE(v319) >= 0) {
        unint64_t v32 = __p;
      }
      else {
        unint64_t v32 = (void **)__p[0];
      }
      do
      {
        int v33 = *(char *)(a1 + v28 + 55);
        if (v33 >= 0) {
          size_t v34 = *(unsigned __int8 *)(a1 + v28 + 55);
        }
        else {
          size_t v34 = *(void *)(a1 + v28 + 40);
        }
        if (v33 >= 0) {
          uint64_t v35 = (const void *)(a1 + v28 + 32);
        }
        else {
          uint64_t v35 = *(const void **)(a1 + v28 + 32);
        }
        if ((unint64_t)v31 >= v34) {
          size_t v36 = v34;
        }
        else {
          size_t v36 = (size_t)v31;
        }
        int v37 = memcmp(v35, v32, v36);
        BOOL v38 = v34 < (unint64_t)v31;
        if (v37) {
          BOOL v38 = v37 < 0;
        }
        v28 += 32;
      }
      while (v38);
      unint64_t v39 = a1 + v28;
      uint64_t v40 = a1 + v28 - 32;
      uint64_t v41 = v9;
      if (v40 == a1)
      {
        uint64_t v41 = v9;
        while (1)
        {
          unint64_t v48 = (unint64_t)(v41 + 4);
          if (v39 >= (unint64_t)(v41 + 4)) {
            break;
          }
          int v49 = *((char *)v41 + 23);
          if (v49 >= 0) {
            size_t v50 = *((unsigned __int8 *)v41 + 23);
          }
          else {
            size_t v50 = (size_t)v41[1];
          }
          if (v49 >= 0) {
            uint64_t v51 = v41;
          }
          else {
            uint64_t v51 = *v41;
          }
          if ((unint64_t)v31 >= v50) {
            size_t v52 = v50;
          }
          else {
            size_t v52 = (size_t)v31;
          }
          int v53 = memcmp(v51, v32, v52);
          BOOL v54 = v50 < (unint64_t)v31;
          if (v53) {
            BOOL v54 = v53 < 0;
          }
          v41 -= 4;
          if (v54) {
            goto LABEL_76;
          }
        }
        uint64_t v81 = a3;
      }
      else
      {
        do
        {
          int v42 = *((char *)v41 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v41 + 23);
          }
          else {
            size_t v43 = (size_t)v41[1];
          }
          if (v42 >= 0) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = *v41;
          }
          if ((unint64_t)v31 >= v43) {
            size_t v45 = v43;
          }
          else {
            size_t v45 = (size_t)v31;
          }
          int v46 = memcmp(v44, v32, v45);
          BOOL v47 = v43 < (unint64_t)v31;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          v41 -= 4;
        }
        while (!v47);
LABEL_76:
        uint64_t v81 = a3;
        unint64_t v48 = (unint64_t)(v41 + 4);
      }
      uint64_t v55 = v9;
      unint64_t v10 = v39;
      if (v39 < v48)
      {
        long long v56 = (void *)v48;
        do
        {
          long long v57 = *(_OWORD *)v10;
          v322 = *(const void **)(v10 + 16);
          long long v321 = v57;
          long long v58 = *(_OWORD *)v56;
          *(void *)(v10 + 16) = v56[2];
          *(_OWORD *)unint64_t v10 = v58;
          long long v59 = v321;
          v56[2] = v322;
          *(_OWORD *)long long v56 = v59;
          uint64_t v60 = *(void *)(v10 + 24);
          *(void *)(v10 + 24) = v56[3];
          v56[3] = v60;
          if (SHIBYTE(v319) >= 0) {
            unint64_t v61 = (void *)HIBYTE(v319);
          }
          else {
            unint64_t v61 = __p[1];
          }
          if (SHIBYTE(v319) >= 0) {
            unint64_t v62 = __p;
          }
          else {
            unint64_t v62 = (void **)__p[0];
          }
          unint64_t v63 = v10 + 32;
          do
          {
            unint64_t v10 = v63;
            size_t v64 = *(unsigned __int8 *)(v63 + 23);
            if ((v64 & 0x80u) == 0) {
              size_t v65 = v64;
            }
            else {
              size_t v65 = *(void *)(v10 + 8);
            }
            if ((v64 & 0x80u) == 0) {
              uint64_t v66 = (const void *)v10;
            }
            else {
              uint64_t v66 = *(const void **)v10;
            }
            if ((unint64_t)v61 >= v65) {
              size_t v67 = v65;
            }
            else {
              size_t v67 = (size_t)v61;
            }
            int v68 = memcmp(v66, v62, v67);
            BOOL v69 = v68 < 0;
            if (!v68) {
              BOOL v69 = v65 < (unint64_t)v61;
            }
            unint64_t v63 = v10 + 32;
          }
          while (v69);
          unint64_t v70 = (unsigned __int8 *)(v56 - 4);
          do
          {
            long long v56 = v70;
            size_t v71 = v70[23];
            if ((v71 & 0x80u) == 0) {
              size_t v72 = v71;
            }
            else {
              size_t v72 = v56[1];
            }
            if ((v71 & 0x80u) == 0) {
              char v73 = v56;
            }
            else {
              char v73 = (const void *)*v56;
            }
            if ((unint64_t)v61 >= v72) {
              size_t v74 = v72;
            }
            else {
              size_t v74 = (size_t)v61;
            }
            int v75 = memcmp(v73, v62, v74);
            BOOL v76 = v75 < 0;
            if (!v75) {
              BOOL v76 = v72 < (unint64_t)v61;
            }
            unint64_t v70 = (unsigned __int8 *)(v56 - 4);
          }
          while (!v76);
        }
        while (v10 < (unint64_t)v56);
      }
      std::string v77 = (void **)(v10 - 32);
      unint64_t v9 = v55;
      a3 = v81;
      if (v10 - 32 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v78 = *(_OWORD *)v77;
        *(void *)(a1 + 16) = *(void *)(v10 - 16);
        *(_OWORD *)a1 = v78;
        *(unsigned char *)(v10 - 9) = 0;
        *(unsigned char *)(v10 - 32) = 0;
        *(void *)(a1 + 24) = *(void *)(v10 - 8);
      }
      if (*(char *)(v10 - 9) < 0) {
        operator delete(*v77);
      }
      long long v79 = *(_OWORD *)__p;
      *(void *)(v10 - 16) = v319;
      *(_OWORD *)std::string v77 = v79;
      HIBYTE(v319) = 0;
      LOBYTE(__p[0]) = 0;
      *(void *)(v10 - 8) = v320;
      if (SHIBYTE(v319) < 0) {
        operator delete(__p[0]);
      }
      BOOL v4 = v39 >= v48;
      a2 = v316;
      if (!v4)
      {
LABEL_124:
        std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(a1, v10 - 32, v81, a4 & 1);
        goto LABEL_125;
      }
      BOOL v80 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (const void **)(v10 - 32));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(v10, v316))
      {
        break;
      }
      if (!v80) {
        goto LABEL_124;
      }
    }
    a2 = (const void **)(v10 - 32);
    if (!v80) {
      continue;
    }
    break;
  }
}

void std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::~pair(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 144);
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1CB773EF0);
}

void std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 168;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v7);
        MEMORY[0x1CB773EF0](v6);
        BOOL v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    uint64_t v17 = a3;
  }
  else {
    uint64_t v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  uint64_t result = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (result) {
    BOOL v20 = (int)result < 0;
  }
  if (v14)
  {
    if (v20)
    {
      size_t v21 = (uint64_t *)(a1 + 3);
      uint64_t v22 = a1[2];
      long long v23 = *(_OWORD *)a1;
      int v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v24;
LABEL_72:
      *(_OWORD *)a3 = v23;
      a3[2] = v22;
      long long v29 = (uint64_t *)(a3 + 3);
      goto LABEL_73;
    }
    uint64_t v41 = a1[2];
    long long v42 = *(_OWORD *)a1;
    size_t v43 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v43;
    *(_OWORD *)a2 = v42;
    a2[2] = v41;
    size_t v21 = (uint64_t *)(a2 + 3);
    uint64_t v44 = a1[3];
    a1[3] = a2[3];
    a2[3] = v44;
    int v45 = *((char *)a2 + 23);
    int v46 = *((char *)a3 + 23);
    if (v46 >= 0) {
      size_t v47 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v47 = (size_t)a3[1];
    }
    if (v46 >= 0) {
      unint64_t v48 = a3;
    }
    else {
      unint64_t v48 = *a3;
    }
    if (v45 >= 0) {
      size_t v49 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v49 = (size_t)a2[1];
    }
    if (v45 >= 0) {
      size_t v50 = a2;
    }
    else {
      size_t v50 = *a2;
    }
    if (v49 >= v47) {
      size_t v51 = v47;
    }
    else {
      size_t v51 = v49;
    }
    uint64_t result = memcmp(v48, v50, v51);
    BOOL v52 = v47 < v49;
    if (result) {
      BOOL v52 = (int)result < 0;
    }
    if (v52)
    {
      uint64_t v22 = a2[2];
      long long v23 = *(_OWORD *)a2;
      int v53 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v53;
      goto LABEL_72;
    }
  }
  else if (v20)
  {
    size_t v25 = a2[2];
    long long v26 = *(_OWORD *)a2;
    BOOL v27 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v27;
    *(_OWORD *)a3 = v26;
    a3[2] = v25;
    long long v29 = (uint64_t *)(a2 + 3);
    uint64_t v28 = a2[3];
    a2[3] = a3[3];
    a3[3] = v28;
    int v30 = *((char *)a1 + 23);
    int v31 = *((char *)a2 + 23);
    if (v31 >= 0) {
      size_t v32 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v32 = (size_t)a2[1];
    }
    if (v31 >= 0) {
      int v33 = a2;
    }
    else {
      int v33 = *a2;
    }
    if (v30 >= 0) {
      size_t v34 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v34 = (size_t)a1[1];
    }
    if (v30 >= 0) {
      uint64_t v35 = a1;
    }
    else {
      uint64_t v35 = *a1;
    }
    if (v34 >= v32) {
      size_t v36 = v32;
    }
    else {
      size_t v36 = v34;
    }
    uint64_t result = memcmp(v33, v35, v36);
    BOOL v37 = v32 < v34;
    if (result) {
      BOOL v37 = (int)result < 0;
    }
    if (v37)
    {
      BOOL v38 = a1[2];
      long long v39 = *(_OWORD *)a1;
      uint64_t v40 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v40;
      *(_OWORD *)a2 = v39;
      a2[2] = v38;
      size_t v21 = (uint64_t *)(a1 + 3);
LABEL_73:
      uint64_t v54 = *v21;
      *size_t v21 = *v29;
      *long long v29 = v54;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    int v13 = a3;
  }
  else {
    int v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    size_t v18 = (const void *)*((void *)a3 + 2);
    long long v19 = *a3;
    BOOL v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    size_t v21 = (const void *)*((void *)a3 + 3);
    *((void *)a3 + 3) = a4[3];
    a4[3] = v21;
    int v22 = *((char *)a2 + 23);
    int v23 = *((char *)a3 + 23);
    if (v23 >= 0) {
      size_t v24 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v24 = *((void *)a3 + 1);
    }
    if (v23 >= 0) {
      size_t v25 = a3;
    }
    else {
      size_t v25 = *(const void **)a3;
    }
    if (v22 >= 0) {
      size_t v26 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v26 = *((void *)a2 + 1);
    }
    if (v22 >= 0) {
      BOOL v27 = a2;
    }
    else {
      BOOL v27 = *(const void **)a2;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v25, v27, v28);
    BOOL v30 = v24 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30)
    {
      uint64_t v31 = *((void *)a2 + 2);
      long long v32 = *a2;
      uint64_t v33 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v33;
      *a3 = v32;
      *((void *)a3 + 2) = v31;
      uint64_t v34 = *((void *)a2 + 3);
      *((void *)a2 + 3) = *((void *)a3 + 3);
      *((void *)a3 + 3) = v34;
      int v35 = *(char *)(a1 + 23);
      int v36 = *((char *)a2 + 23);
      if (v36 >= 0) {
        size_t v37 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v37 = *((void *)a2 + 1);
      }
      if (v36 >= 0) {
        BOOL v38 = a2;
      }
      else {
        BOOL v38 = *(const void **)a2;
      }
      if (v35 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v39 = *(void *)(a1 + 8);
      }
      if (v35 >= 0) {
        uint64_t v40 = (const void *)a1;
      }
      else {
        uint64_t v40 = *(const void **)a1;
      }
      if (v39 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v39;
      }
      int v42 = memcmp(v38, v40, v41);
      BOOL v43 = v37 < v39;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (v43)
      {
        uint64_t v44 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v45 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(void *)(a1 + 16) = v45;
        *a2 = (__int128)result;
        *((void *)a2 + 2) = v44;
        uint64_t v46 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *((void *)a2 + 3) = v46;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    int v13 = a5;
  }
  else {
    int v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v14 = *((void *)a4 + 1);
  }
  if (v10 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = *(long long **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    BOOL v20 = (const void *)*((void *)a4 + 2);
    long long v21 = *a4;
    int v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    int v23 = (const void *)*((void *)a4 + 3);
    *((void *)a4 + 3) = a5[3];
    a5[3] = v23;
    int v24 = *(char *)(a3 + 23);
    int v25 = *((char *)a4 + 23);
    if (v25 >= 0) {
      size_t v26 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v26 = *((void *)a4 + 1);
    }
    if (v25 >= 0) {
      BOOL v27 = a4;
    }
    else {
      BOOL v27 = *(long long **)a4;
    }
    if (v24 >= 0) {
      size_t v28 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v28 = *(void *)(a3 + 8);
    }
    if (v24 >= 0) {
      int v29 = (const void *)a3;
    }
    else {
      int v29 = *(const void **)a3;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      uint64_t v33 = *(void *)(a3 + 16);
      long long v34 = *(_OWORD *)a3;
      uint64_t v35 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(void *)(a3 + 16) = v35;
      *a4 = v34;
      *((void *)a4 + 2) = v33;
      uint64_t v36 = *(void *)(a3 + 24);
      *(void *)(a3 + 24) = *((void *)a4 + 3);
      *((void *)a4 + 3) = v36;
      int v37 = *(char *)(a2 + 23);
      int v38 = *(char *)(a3 + 23);
      if (v38 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v39 = *(void *)(a3 + 8);
      }
      if (v38 >= 0) {
        uint64_t v40 = (const void *)a3;
      }
      else {
        uint64_t v40 = *(const void **)a3;
      }
      if (v37 >= 0) {
        size_t v41 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v41 = *(void *)(a2 + 8);
      }
      if (v37 >= 0) {
        int v42 = (const void *)a2;
      }
      else {
        int v42 = *(const void **)a2;
      }
      if (v41 >= v39) {
        size_t v43 = v39;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v40, v42, v43);
      BOOL v45 = v39 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      if (v45)
      {
        uint64_t v46 = *(void *)(a2 + 16);
        long long v47 = *(_OWORD *)a2;
        uint64_t v48 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v48;
        *(_OWORD *)a3 = v47;
        *(void *)(a3 + 16) = v46;
        uint64_t v49 = *(void *)(a2 + 24);
        *(void *)(a2 + 24) = *(void *)(a3 + 24);
        *(void *)(a3 + 24) = v49;
        int v50 = *(char *)(a1 + 23);
        int v51 = *(char *)(a2 + 23);
        if (v51 >= 0) {
          size_t v52 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v52 = *(void *)(a2 + 8);
        }
        if (v51 >= 0) {
          int v53 = (const void *)a2;
        }
        else {
          int v53 = *(const void **)a2;
        }
        if (v50 >= 0) {
          size_t v54 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v54 = *(void *)(a1 + 8);
        }
        if (v50 >= 0) {
          uint64_t v55 = (const void *)a1;
        }
        else {
          uint64_t v55 = *(const void **)a1;
        }
        if (v54 >= v52) {
          size_t v56 = v52;
        }
        else {
          size_t v56 = v54;
        }
        int v57 = memcmp(v53, v55, v56);
        BOOL v58 = v52 < v54;
        if (v57) {
          BOOL v58 = v57 < 0;
        }
        if (v58)
        {
          uint64_t v59 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v60 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v60;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v59;
          uint64_t v61 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + 24) = v61;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 4;
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 9);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 9);
      }
      else {
        size_t v9 = (size_t)*(a2 - 3);
      }
      if (v8 >= 0) {
        int v10 = a2 - 4;
      }
      else {
        int v10 = (const void **)*(a2 - 4);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15)
      {
        size_t v16 = *(const void **)(a1 + 16);
        long long v17 = *(_OWORD *)a1;
        uint64_t v18 = (uint64_t)*(a2 - 2);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v18;
        *(_OWORD *)int v6 = v17;
        *(a2 - 2) = v16;
        BOOL v19 = *(const void **)(a1 + 24);
        *(void *)(a1 + 24) = *(a2 - 1);
        *(a2 - 1) = v19;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), a2 - 4);
      return 1;
    default:
      BOOL v20 = (const void **)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32), (const void **)(a1 + 64));
      long long v21 = (const void **)(a1 + 96);
      if ((const void **)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      break;
  }
  while (1)
  {
    int v24 = *((char *)v20 + 23);
    int v25 = *((char *)v21 + 23);
    if (v25 >= 0) {
      size_t v26 = *((unsigned __int8 *)v21 + 23);
    }
    else {
      size_t v26 = (size_t)v21[1];
    }
    if (v25 >= 0) {
      BOOL v27 = v21;
    }
    else {
      BOOL v27 = *v21;
    }
    if (v24 >= 0) {
      size_t v28 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      size_t v28 = (size_t)v20[1];
    }
    if (v24 >= 0) {
      int v29 = v20;
    }
    else {
      int v29 = *v20;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      long long v48 = *(_OWORD *)v21;
      uint64_t v33 = v21[2];
      long long v34 = v21[3];
      v21[1] = 0;
      v21[2] = 0;
      *long long v21 = 0;
      uint64_t v49 = v33;
      uint64_t v50 = (uint64_t)v34;
      uint64_t v35 = v22;
      while (1)
      {
        uint64_t v36 = a1 + v35;
        int v37 = (void **)(a1 + v35 + 96);
        if (*(char *)(a1 + v35 + 119) < 0) {
          operator delete(*v37);
        }
        *(_OWORD *)int v37 = *(_OWORD *)(v36 + 64);
        *(void *)(a1 + v35 + 112) = *(void *)(v36 + 80);
        *(unsigned char *)(v36 + 87) = 0;
        *(unsigned char *)(v36 + 64) = 0;
        *(void *)(v36 + 120) = *(void *)(v36 + 88);
        if (v35 == -64) {
          break;
        }
        int v38 = *(char *)(a1 + v35 + 55);
        if (SHIBYTE(v49) >= 0) {
          size_t v39 = HIBYTE(v49);
        }
        else {
          size_t v39 = *((void *)&v48 + 1);
        }
        if (SHIBYTE(v49) >= 0) {
          uint64_t v40 = &v48;
        }
        else {
          uint64_t v40 = (long long *)v48;
        }
        if (v38 >= 0) {
          size_t v41 = *(unsigned __int8 *)(a1 + v35 + 55);
        }
        else {
          size_t v41 = *(void *)(a1 + v35 + 40);
        }
        if (v38 >= 0) {
          int v42 = (const void *)(a1 + v35 + 32);
        }
        else {
          int v42 = *(const void **)(a1 + v35 + 32);
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v35 -= 32;
        if (!v45)
        {
          uint64_t v46 = a1 + v35 + 96;
          goto LABEL_65;
        }
      }
      uint64_t v46 = a1;
LABEL_65:
      if (*(char *)(v46 + 23) < 0) {
        operator delete(*(void **)v46);
      }
      *(_OWORD *)uint64_t v46 = v48;
      uint64_t v47 = v50;
      *(void *)(v46 + 16) = v49;
      *(void *)(v46 + 24) = v47;
      if (++v23 == 8) {
        return v21 + 4 == a2;
      }
    }
    BOOL v20 = v21;
    v22 += 32;
    v21 += 4;
    if (v21 == a2) {
      return 1;
    }
  }
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanEncoder::getTopLevelUsoEntityFromDataDetectorSpan@<X0>(uint64_t this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_DWORD *)*((void *)a2 + 1);
  BOOL v5 = (_DWORD *)*((void *)a2 + 2);
  if (v4 == v5) {
    goto LABEL_11;
  }
  while (*v4)
  {
    if (++v4 == v5) {
      goto LABEL_11;
    }
  }
  int v6 = (const sirinluexternal::UsoGraph *)*((void *)a2 + 8);
  if (!v6 || *((void *)v6 + 11) - *((void *)v6 + 10) <= 8uLL)
  {
LABEL_11:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    int v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphProtoReader::fromProtobuf(&v15, (siri::ontology::UsoGraphProtoReader *)(this + 24), v6);
    siri::ontology::oname::graph::ontology_init::Argument_entity(v7);
    siri::ontology::UsoGraph::getSuccessors();
    if (__p == v14
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[1].__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      uint64_t v9 = v8[3];
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 8);
        v16.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
        *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a3, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        int v11 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
        a3[1].__r_.__value_.__s.__data_[0] = 1;
        if (v11 < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *a3 = v16;
        a3[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    if (__p) {
      operator delete(__p);
    }
    this = v15;
    uint64_t v15 = 0;
    if (this)
    {
      uint64_t v12 = MEMORY[0x1CB774F40]();
      return MEMORY[0x1CB775C40](v12, 0x10A0C403D23BABBLL);
    }
  }
  return this;
}

void sub_1C8ED09A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, long long __p, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 1)
  {
    long long v21 = __cxa_begin_catch(a1);
    uint64_t v22 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      ComponentString = snlp::common::logging::getComponentString(*(_DWORD *)(v18 + 40));
      uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
      LODWORD(__p) = 136315394;
      *(void *)((char *)&__p + 4) = ComponentString;
      WORD6(__p) = 2080;
      *(void *)((char *)&__p + 14) = v24;
      _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_DEBUG, "[%s] A data detector span contained a USO graph with an invalid entity node.  This data detector span was ignored by the span matching featurizer.  Error: %s.\n", (uint8_t *)&__p, 0x16u);
    }
    unsigned char *v17 = 0;
    v17[24] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C8ED0968);
  }
  if (a9) {
    operator delete(a9);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::getNoSpansLabel(nlv4_inference_orchestrator::span_matching::SpanEncoder *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t snlp::ssu::matcher::lookupCategoryTypeByString(const void **a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  BOOL v5 = (const void **)*a1;
  uint64_t v4 = a1[1];
  while (1)
  {
    size_t v6 = strlen(EnumNamesSSUCategoryType(void)::names[v2]);
    size_t v7 = v6;
    if ((v3 & 0x80) == 0) {
      break;
    }
    if ((const void *)v6 == v4)
    {
      int v8 = v5;
      if (v4 == (const void *)-1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      goto LABEL_7;
    }
LABEL_8:
    if (++v2 == 3)
    {
      LOBYTE(v2) = 0;
      int v9 = 0;
      return v2 | (v9 << 8);
    }
  }
  int v8 = a1;
  if (v7 != v3) {
    goto LABEL_8;
  }
LABEL_7:
  if (memcmp(v8, EnumNamesSSUCategoryType(void)::names[v2], v7)) {
    goto LABEL_8;
  }
  int v9 = 1;
  return v2 | (v9 << 8);
}

void snlp::ssu::matcher::logSimilaritySearchConfiguration(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 12)) {
    std::to_string(&v12, *(float *)(a2 + 8));
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v12, "missing");
  }
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v5 = a1;
    }
    else {
      BOOL v5 = (uint64_t *)*a1;
    }
    double v6 = *(float *)a2;
    double v7 = *(float *)(a2 + 4);
    int v8 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    double v9 = *(float *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    double v11 = *(float *)(a2 + 32);
    *(_DWORD *)std::string buf = 136316674;
    int v14 = v5;
    __int16 v15 = 2048;
    double v16 = v6;
    __int16 v17 = 2048;
    double v18 = v7;
    __int16 v19 = 2080;
    BOOL v20 = v8;
    __int16 v21 = 2048;
    double v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2048;
    double v26 = v11;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Loaded similarity search configuration for category %s with calibratedScoreSigmoidParam=%f, calibratedScoreThreshold=%f, calibratedScoreThresholdAppShortcutAlwaysTrigger=%s, exactMatchThreshold=%f, maxAppMatchCount=%lu, negativeScoreClipMinimum=%f.", buf, 0x48u);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void snlp::ssu::matcher::loadSimilaritySearchConfigurations(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *((unsigned char *)&v76.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v76, "params");
  size_t v89 = a1;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0x8000000000000000;
  int v5 = *a1;
  if (v5 == 1)
  {
    uint64_t v90 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((void *)a1 + 1), &v76);
  }
  else if (v5 == 2)
  {
    uint64_t v91 = *(void *)(*((void *)a1 + 1) + 8);
  }
  else
  {
    unint64_t v92 = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v87, "Error reading SSU matcher config file: ");
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v76.__r_.__value_.__r.__words[2] = 0;
  unint64_t v77 = 0x8000000000000000;
  int v6 = *a1;
  if (v6 == 2)
  {
    v76.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a1 + 1) + 8);
  }
  else if (v6 == 1)
  {
    v76.__r_.__value_.__l.__size_ = *((void *)a1 + 1) + 8;
  }
  else
  {
    unint64_t v77 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, &v89)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v76);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  double v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89);
  *((unsigned char *)&v76.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v76, "perCategory");
  int64_t v83 = v7;
  size_t v84 = 0;
  uint64_t v85 = 0;
  unint64_t v86 = 0x8000000000000000;
  int v8 = *v7;
  if (v8 == 1)
  {
    size_t v84 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((void *)v7 + 1), &v76);
  }
  else if (v8 == 2)
  {
    uint64_t v85 = *(void *)(*((void *)v7 + 1) + 8);
  }
  else
  {
    unint64_t v86 = 1;
  }
  double v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89);
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = (unint64_t)v9;
  v76.__r_.__value_.__r.__words[2] = 0;
  unint64_t v77 = 0x8000000000000000;
  int v10 = *v9;
  if (v10 == 2)
  {
    v76.__r_.__value_.__r.__words[2] = *(void *)(*((void *)v9 + 1) + 8);
  }
  else if (v10 == 1)
  {
    v76.__r_.__value_.__l.__size_ = *((void *)v9 + 1) + 8;
  }
  else
  {
    unint64_t v77 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, &v83)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83) != 1)
  {
    int v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, &v76);
    v53->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  double v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83);
  uint64_t v12 = *v11;
  if (*v11)
  {
    if (v12 == 1)
    {
      uint64_t v12 = *(void *)(*((void *)v11 + 1) + 16);
    }
    else if (v12 == 2)
    {
      uint64_t v12 = (uint64_t)(*(void *)(*((void *)v11 + 1) + 8) - **((void **)v11 + 1)) >> 4;
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, vcvtps_u32_f32((float)(unint64_t)v12 / *(float *)(a2 + 32)));
  size_t v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83);
  int v14 = v13;
  long long v69 = (unint64_t)v13;
  uint64_t v70 = 0;
  unint64_t v71 = 0x8000000000000000;
  int v15 = *v13;
  if (*v13)
  {
    if (v15 == 2)
    {
      uint64_t v70 = **((void **)v13 + 1);
    }
    else if (v15 == 1)
    {
      *((void *)&v69 + 1) = **((void **)v13 + 1);
    }
    else
    {
      unint64_t v71 = 0;
    }
  }
  else
  {
    unint64_t v71 = 1;
  }
  nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value((uint64_t)&v76, &v69);
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = (unint64_t)v14;
  v67.__r_.__value_.__r.__words[2] = 0;
  unint64_t v68 = 0x8000000000000000;
  int v16 = *v14;
  if (v16 == 2)
  {
    v67.__r_.__value_.__r.__words[2] = *(void *)(*((void *)v14 + 1) + 8);
  }
  else if (v16 == 1)
  {
    v67.__r_.__value_.__l.__size_ = *((void *)v14 + 1) + 8;
  }
  else
  {
    unint64_t v68 = 1;
  }
  nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value((uint64_t)&v69, &v67);
  __int16 v17 = (void *)(a2 + 16);
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, (unsigned __int8 **)&v69))
  {
    int v18 = *v76.__r_.__value_.__l.__data_;
    if (v18 == 1)
    {
      p_p = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(1, v76.__r_.__value_.__l.__size_);
    }
    else
    {
      p_p = (std::string *)&v81;
      if (v18 == 2)
      {
        p_p = &__p;
        if (v78 != v79)
        {
          std::to_string(&v67, v78);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v67;
          unint64_t v79 = v78;
          p_p = &__p;
        }
      }
    }
    BOOL v20 = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v76);
    if (v20->__r_.__value_.__s.__data_[0] != 1)
    {
      uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v67.__r_.__value_.__l.__data_, v87, "category config value is not of object type");
      std::runtime_error::runtime_error(v50, &v67);
      v50->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
    }
    unsigned __int16 v21 = snlp::ssu::matcher::lookupCategoryTypeByString((const void **)&p_p->__r_.__value_.__l.__data_);
    if (v21 <= 0xFFu)
    {
      int v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      int v45 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]);
      if (v45 >= 0) {
        uint64_t v46 = (const std::string::value_type *)p_p;
      }
      else {
        uint64_t v46 = (const std::string::value_type *)p_p->__r_.__value_.__r.__words[0];
      }
      if (v45 >= 0) {
        std::string::size_type size = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = p_p->__r_.__value_.__l.__size_;
      }
      long long v48 = std::string::append((std::string *)&v64, v46, size);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v44, &v67);
      v44->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
    }
    signed __int8 v22 = v21;
    snlp::common::config::loadJsonConfig((uint64_t)&v67, v20, 6u);
    std::string::basic_string[abi:ne180100]<0>(v62, "calibratedScoreSigmoidParam");
    LODWORD(v64) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v62);
    std::string::basic_string[abi:ne180100]<0>(v60, "calibratedScoreThreshold");
    DWORD1(v64) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v60);
    std::string::basic_string[abi:ne180100]<0>(v58, "calibratedScoreThresholdAppShortcutAlwaysTrigger");
    if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v67, (unsigned __int8 *)v58))
    {
      uint64_t v23 = COERCE_UNSIGNED_INT(snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v58)) | 0x100000000;
    }
    else
    {
      uint64_t v23 = 0;
    }
    *((void *)&v64 + 1) = v23;
    std::string::basic_string[abi:ne180100]<0>(v56, "exactMatchThreshold");
    LODWORD(v65) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v56);
    std::string::basic_string[abi:ne180100]<0>(v54, "maxAppMatchCount");
    uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v67, (unsigned __int8 *)v54);
    if (!v24)
    {
      int v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v51, &v94);
      v51->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
    if (*((_DWORD *)v24 + 16) != 1)
    {
      size_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v42 = std::string::append(&v93, " is not of expected type");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v41, &v94);
      v41->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
    *((void *)&v65 + 1) = *((unsigned int *)v24 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v94, "negativeScoreClipMinimum");
    float Config = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    snlp::ssu::matcher::logSimilaritySearchConfiguration((uint64_t *)p_p, (uint64_t)&v64);
    unint64_t v25 = *(void *)(a2 + 8);
    if (v25)
    {
      uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        unint64_t v2 = v22;
        if (v25 <= v22) {
          unint64_t v2 = v22 % v25;
        }
      }
      else
      {
        unint64_t v2 = (v25 - 1) & v22;
      }
      uint64_t v27 = *(void ***)(*(void *)a2 + 8 * v2);
      if (v27)
      {
        size_t v28 = (unsigned __int8 *)*v27;
        if (*v27)
        {
          do
          {
            unint64_t v29 = *((void *)v28 + 1);
            if (v29 == v22)
            {
              if (v28[16] == v22) {
                goto LABEL_109;
              }
            }
            else
            {
              if (v26.u32[0] > 1uLL)
              {
                if (v29 >= v25) {
                  v29 %= v25;
                }
              }
              else
              {
                v29 &= v25 - 1;
              }
              if (v29 != v2) {
                break;
              }
            }
            size_t v28 = *(unsigned __int8 **)v28;
          }
          while (v28);
        }
      }
    }
    size_t v28 = (unsigned __int8 *)operator new(0x40uLL);
    *(void *)size_t v28 = 0;
    *((void *)v28 + 1) = v22;
    v28[16] = v22;
    *(_OWORD *)(v28 + 24) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *((void *)v28 + 7) = 0;
    float v30 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
    float v31 = *(float *)(a2 + 32);
    if (!v25 || (float)(v31 * (float)v25) < v30)
    {
      BOOL v32 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3) {
        BOOL v32 = 1;
      }
      unint64_t v33 = v32 | (2 * v25);
      unint64_t v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34) {
        size_t v35 = v34;
      }
      else {
        size_t v35 = v33;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, v35);
      unint64_t v25 = *(void *)(a2 + 8);
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v25 <= v22) {
          unint64_t v2 = v22 % v25;
        }
        else {
          unint64_t v2 = v22;
        }
      }
      else
      {
        unint64_t v2 = (v25 - 1) & v22;
      }
    }
    uint64_t v36 = *(void *)a2;
    int v37 = *(void **)(*(void *)a2 + 8 * v2);
    if (v37)
    {
      *(void *)size_t v28 = *v37;
LABEL_107:
      *int v37 = v28;
      goto LABEL_108;
    }
    *(void *)size_t v28 = *v17;
    void *v17 = v28;
    *(void *)(v36 + 8 * v2) = v17;
    if (*(void *)v28)
    {
      unint64_t v38 = *(void *)(*(void *)v28 + 8);
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v38 >= v25) {
          v38 %= v25;
        }
      }
      else
      {
        v38 &= v25 - 1;
      }
      int v37 = (void *)(*(void *)a2 + 8 * v38);
      goto LABEL_107;
    }
LABEL_108:
    ++*(void *)(a2 + 24);
LABEL_109:
    float v39 = Config;
    long long v40 = v65;
    *(_OWORD *)(v28 + 24) = v64;
    *(_OWORD *)(v28 + 40) = v40;
    *((float *)v28 + 14) = v39;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&v67);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v76);
    ++v78;
  }
  if (v75 < 0) {
    operator delete(v74);
  }
  if (v73 < 0) {
    operator delete(v72);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v88 < 0) {
    operator delete((void *)v87[0]);
  }
}

void sub_1C8ED17F0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 185) < 0) {
    operator delete(*(void **)(v2 - 208));
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(unsigned __int8 **a1)
{
  BOOL result = *a1;
  int v3 = *result;
  if (v3 == 2) {
    return a1[2];
  }
  if (v3 == 1) {
    return a1[1] + 56;
  }
  if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v5);
  }
  return result;
}

void sub_1C8ED1AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      double v9 = a2;
    }
    else {
      double v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a1, v9, v6);
  }
  int v10 = (char *)a1 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

void snlp::common::config::loadJsonConfig(uint64_t a1, std::string *a2, unsigned int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3 >= 8)
  {
    size_t v7 = SNLPOSLoggerForCategory(4);
    size_t v6 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (int)a3;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    size_t v6 = off_1E65808C8[a3];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  unint64_t v29 = a2;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  int v8 = a2->__r_.__value_.__s.__data_[0];
  if (a2->__r_.__value_.__s.__data_[0])
  {
    if (v8 == 2)
    {
      uint64_t v31 = *(void *)a2->__r_.__value_.__l.__size_;
    }
    else if (v8 == 1)
    {
      uint64_t v30 = *(void *)a2->__r_.__value_.__l.__size_;
    }
    else
    {
      unint64_t v32 = 0;
    }
  }
  else
  {
    unint64_t v32 = 1;
  }
  while (1)
  {
    buf.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v37[0] = 0x8000000000000000;
    if (v8 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = *(void *)(a2->__r_.__value_.__l.__size_ + 8);
    }
    else if (v8 == 1)
    {
      buf.__r_.__value_.__l.__size_ = a2->__r_.__value_.__l.__size_ + 8;
    }
    else
    {
      v37[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v29, (unsigned __int8 **)&buf))
    {
      break;
    }
    uint64_t v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(v29->__r_.__value_.__s.__data_[0], v30);
    if (*(char *)(v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      v28.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v10;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 5)
    {
      double v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v11, (int *)&buf);
      int data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v28;
      }
      LODWORD(v37[0]) = data;
      int v38 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 6)
    {
      size_t v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v13, (unsigned int *)&buf);
      int v14 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v28;
      }
      LODWORD(v37[0]) = v14;
      int v38 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 7)
    {
      int v15 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v15, (float *)&buf);
      int v16 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v28;
      }
      LODWORD(v37[0]) = v16;
      int v38 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 4)
    {
      __int16 v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v17, &buf);
      std::string::value_type v18 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v28;
      }
      LOBYTE(v37[0]) = v18;
      int v38 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_55:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v37);
      goto LABEL_56;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29))
      {
        std::operator+<char>();
        unsigned __int16 v21 = std::string::append(&v35, ".");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_56;
        }
        uint64_t v24 = __p;
        if (v34 < 0) {
          uint64_t v24 = (void **)__p[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        std::operator+<char>();
        uint8x8_t v26 = std::string::append(&v35, " is null.  This is currently expected behaviour.");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_56;
        }
        uint64_t v24 = __p;
        if (v34 < 0) {
          uint64_t v24 = (void **)__p[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
      }
      LODWORD(v35.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v35, 0x16u);
LABEL_56:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_59;
      }
      BOOL v20 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_58;
    }
    __int16 v19 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v35, v19);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (long long *)&v28, (long long *)&v35);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v37);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v20 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_58:
      operator delete(v20);
    }
LABEL_59:
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v29);
    LOBYTE(v8) = a2->__r_.__value_.__s.__data_[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  unint64_t v29 = &buf;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(a1, (unsigned __int8 *)&buf, (long long **)&v29, &v28);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ED224C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v39);
  _Unwind_Resume(a1);
}

float snlp::ssu::utilities::getConfigValue<float>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (*((_DWORD *)v2 + 16) != 2)
  {
    int v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    size_t v6 = std::string::append(&v8, " is not of expected type");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v5, &v9);
    v5->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  return *((float *)v2 + 10);
}

void sub_1C8ED247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::~iteration_proxy_value(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "0");
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void snlp::ssu::matcher::SSUMatcherConfig::loadMatcherConfig(snlp::ssu::matcher::SSUMatcherConfig *this@<X0>, std::string *a2@<X8>)
{
  v57[19] = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::operator/[abi:ne180100](&v53, (uint64_t)this, (std::__fs::filesystem::path *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((uint64_t *)__p);
  std::string::basic_string[abi:ne180100]<0>(v51, "Error reading SSU matcher config file: ");
  if (!v56)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v35.__r_.__value_.__l.__data_, (const void **)v51, "config file could not be opened");
    std::runtime_error::runtime_error(exception, &v35);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    uint8x8_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v35.__r_.__value_.__l.__data_, (const void **)v51, "config file could not be read");
    std::runtime_error::runtime_error(v26, &v35);
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  v49[0] = 0;
  uint64_t v50 = 0;
  nlohmann::operator>>(__p, v49);
  *((unsigned char *)&v35.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v35, "params");
  int v45 = v49;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0x8000000000000000;
  if (v49[0] == 1)
  {
    uint64_t v46 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)v50, &v35);
    unint64_t v36 = 0x8000000000000000;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = (unint64_t)(v50 + 1);
  }
  else if (v49[0] == 2)
  {
    uint64_t v47 = v50[1];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v49;
    unint64_t v36 = 0x8000000000000000;
    v35.__r_.__value_.__r.__words[2] = v50[1];
  }
  else
  {
    unint64_t v48 = 1;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v49;
    v35.__r_.__value_.__r.__words[2] = 0;
    unint64_t v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v45)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45) != 1)
  {
    char v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, &v35);
    v22->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  int v5 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45);
  *((unsigned char *)&v35.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v35, "perCategory");
  size_t v41 = v5;
  int v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0x8000000000000000;
  int v6 = *v5;
  if (v6 == 1)
  {
    int v42 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((void *)v5 + 1), &v35);
  }
  else if (v6 == 2)
  {
    uint64_t v43 = *(void *)(*((void *)v5 + 1) + 8);
  }
  else
  {
    unint64_t v44 = 1;
  }
  long long v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45);
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v7;
  v35.__r_.__value_.__r.__words[2] = 0;
  unint64_t v36 = 0x8000000000000000;
  int v8 = *v7;
  if (v8 == 2)
  {
    v35.__r_.__value_.__r.__words[2] = *(void *)(*((void *)v7 + 1) + 8);
  }
  else if (v8 == 1)
  {
    v35.__r_.__value_.__l.__size_ = *((void *)v7 + 1) + 8;
  }
  else
  {
    unint64_t v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v41)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41) != 1)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, &v35);
    v23->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  std::string v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41);
  int v37 = v9;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0x8000000000000000;
  int v10 = *v9;
  if (v10 == 1)
  {
    uint64_t v11 = *((void *)v9 + 1);
    uint64_t v14 = *(void *)(v11 + 8);
    uint64_t v12 = v11 + 8;
    uint64_t v13 = v14;
    uint64_t v38 = v12;
    if (!v14) {
      goto LABEL_34;
    }
    uint64_t v15 = v12;
    do
    {
      int v16 = std::string::compare((const std::string *)(v13 + 32), "APP_SHORTCUT");
      __int16 v17 = (uint64_t *)(v13 + 8);
      if (v16 >= 0)
      {
        __int16 v17 = (uint64_t *)v13;
        uint64_t v15 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v15 == v12 || std::string::compare((const std::string *)(v15 + 32), "APP_SHORTCUT") >= 1) {
LABEL_34:
    }
      uint64_t v15 = v12;
    uint64_t v38 = v15;
  }
  else if (v10 == 2)
  {
    uint64_t v39 = *(void *)(*((void *)v9 + 1) + 8);
  }
  else
  {
    unint64_t v40 = 1;
  }
  std::string::value_type v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41);
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v18;
  v35.__r_.__value_.__r.__words[2] = 0;
  unint64_t v36 = 0x8000000000000000;
  int v19 = *v18;
  if (v19 == 2)
  {
    v35.__r_.__value_.__r.__words[2] = *(void *)(*((void *)v18 + 1) + 8);
  }
  else if (v19 == 1)
  {
    v35.__r_.__value_.__l.__size_ = *((void *)v18 + 1) + 8;
  }
  else
  {
    unint64_t v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v37)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v37) != 1)
  {
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, &v35);
    v24->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  BOOL v20 = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v37);
  snlp::common::config::loadJsonConfig((uint64_t)&v35, v20, 6u);
  char v33 = 6;
  strcpy((char *)v32, "locale");
  unsigned __int16 v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v35, (unsigned __int8 *)v32);
  if (!v21)
  {
    long long v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v27, &v31);
    v27->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (*((_DWORD *)v21 + 16) != 4)
  {
    std::string v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v29 = std::string::append(&v54, " is not of expected type");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v28, &v31);
    v28->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if ((char)v21[63] < 0) {
    std::string::__init_copy_ctor_external(&v34, *((const std::string::value_type **)v21 + 5), *((void *)v21 + 6));
  }
  else {
    std::string v34 = *(std::string *)(v21 + 40);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  snlp::ssu::matcher::loadSimilaritySearchConfigurations(v49, (uint64_t)&v31);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(a2, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    *a2 = v34;
  }
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&a2[1], (uint64_t)&v31);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8]
                                                                                                 + 24);
  MEMORY[0x1CB7756B0](&__p[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1CB775B50](v57);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED2E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (v65) {
    __cxa_free_exception(v64);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v63, a43);
  if (a50 < 0) {
    operator delete(a45);
  }
  std::ifstream::~ifstream(&a63);
  if (a56 < 0) {
    operator delete(a51);
  }
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, *(char **)a2, (char *)(*(void *)a2 + *(void *)(a2 + 8)));
  return a1;
}

void sub_1C8ED3090(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 212, (uint64_t)v7);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    long long v3 = a1[2];
    uint64_t v4 = a2[2];
  }
  else if (v2 == 1)
  {
    long long v3 = a1[1];
    uint64_t v4 = a2[1];
  }
  else
  {
    long long v3 = a1[3];
    uint64_t v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1C8ED317C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned char *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*(uint64_t a1)
{
  uint64_t result = *(unsigned char **)a1;
  int v3 = *result;
  if (v3 == 1) {
    return (unsigned char *)(*(void *)(a1 + 8) + 56);
  }
  if (v3 == 2) {
    return *(unsigned char **)(a1 + 16);
  }
  if (!*result)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v6);
  }
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v4, 214, (uint64_t)v6);
  }
  return result;
}

void sub_1C8ED32C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, int *a2@<X1>, sirinluinternalitfm::ITFMParserResponse *a3@<X8>)
{
  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v10);
  unint64_t v6 = *a2;
  v14 |= 3u;
  int v12 = v6;
  int v13 = 1065353216;
  if (*a1)
  {
    itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(*a1, v6, &v9);
    sirinluinternalitfm::ITFMHypothesis::makeStringLabel((uint64_t)v10);
    uint64_t v7 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    long long v8 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *(void *)(v7 + 16) = *((void *)&v9.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse(a3);
  PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>();
}

void sub_1C8ED3AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB773F60](&a16);
  _Unwind_Resume(a1);
}

uint64_t psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaMessagePayloadPromptOverride@<X0>(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[56] = 0;
  uint64_t result = *(void *)(a2 + 32);
  if (result)
  {
    uint64_t result = snlp::common::text_uso_graph::isMessageContentPrompt(result);
    if (result)
    {
      int v5 = 0;
      psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse(a1, &v5, (sirinluinternalitfm::ITFMParserResponse *)buf);
    }
  }
  return result;
}

void sub_1C8ED3C30(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  if (*(unsigned char *)(v1 + 56)) {
    MEMORY[0x1CB773FB0](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaIntercomPayloadPromptOverride@<X0>(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[56] = 0;
  uint64_t result = *(void *)(a2 + 32);
  if (result)
  {
    uint64_t result = snlp::common::text_uso_graph::isIntercomPayloadPrompt(result);
    if (result)
    {
      int v5 = 0;
      psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse(a1, &v5, (sirinluinternalitfm::ITFMParserResponse *)buf);
    }
  }
  return result;
}

void sub_1C8ED3E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  if (*(unsigned char *)(v11 + 56)) {
    MEMORY[0x1CB773FB0](v11);
  }
  _Unwind_Resume(exception_object);
}

void psc_inference_orchestrator::orchestration::PSCOverrideGenerator::generateOverrideResponse(itfm_inference_orchestrator::vocabulary::Vocabulary **this@<X0>, const sirinluinternalitfm::ITFMParserRequest *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[56] = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v6 = *((void *)a2 + 9);
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(v6 + 136);
  if (v7)
  {
    long long v8 = *(void **)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = v8[10];
      uint64_t v10 = *(void *)(v6 + 128);
      if (v10) {
        BOOL v11 = *(void *)(v10 + 32) != 0;
      }
      else {
        BOOL v11 = 0;
      }
      uint64_t v15 = v8[11];
      uint64_t v14 = v8[12];
      sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v22);
      if (v9 || v11) {
        goto LABEL_13;
      }
      if (v14 - v15 == 8)
      {
        sirinluexternal::SystemDialogActGroup::makeSystemDialogAct((sirinluexternal::SystemDialogActGroup *)v22);
        operator new();
      }
      goto LABEL_14;
    }
  }
  uint64_t v12 = *(void *)(v6 + 128);
  if (!v12)
  {
LABEL_9:
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v22);
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v12 + 32);
  sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v22);
  if (v13) {
LABEL_13:
  }
    sirinluexternal::SystemDialogActGroup::operator=();
LABEL_14:
  psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaMessagePayloadPromptOverride(this, (uint64_t)v22, &__p);
  std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a3, (uint64_t)&__p);
  if (v21) {
    MEMORY[0x1CB773FB0](&__p);
  }
  if (!a3[56])
  {
    psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaIntercomPayloadPromptOverride(this, (uint64_t)v22, &__p);
    std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a3, (uint64_t)&__p);
    if (v21) {
      MEMORY[0x1CB773FB0](&__p);
    }
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v20 = 0;
  uint64_t v16 = *((void *)a2 + 5);
  if (v16)
  {
    __int16 v17 = *(const std::string **)(v16 + 16);
    if (v17) {
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__p, v17);
    }
  }
  int v18 = 4;
  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(v23, (uint64_t)&__p, &v18);
  if (v20 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1CB773CE0](v22);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C8ED40C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  MEMORY[0x1CB773CE0](&a22);
  std::string __p = (void *)(v23 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(unsigned char *)(v22 + 56)) {
    MEMORY[0x1CB773FB0](v22);
  }
  _Unwind_Resume(a1);
}

void *nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(a1, " => ");
  nlv4_inference_orchestrator::pre_processing::Reformulator::readReformulations(v2, (void *)v2 + 3);
  return a1;
}

void sub_1C8ED416C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::pre_processing::Reformulator::readReformulations@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  v40[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v38);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!v39[15]) {
    goto LABEL_59;
  }
  memset(&__str, 0, sizeof(__str));
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[0] - 24)));
    uint64_t v4 = std::locale::use_facet(&v31.__loc_, MEMORY[0x1E4FBA258]);
    unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v31.__loc_);
    uint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)&__str, v5);
    std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    long long v8 = (std::string *)__str.__r_.__value_.__r.__words[0];
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size) {
      BOOL v11 = (std::string *)((char *)&p_str->__r_.__value_.__l.__data_ + 1);
    }
    else {
      BOOL v11 = p_str;
    }
    if (size)
    {
      uint64_t v12 = p_str;
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v12;
        uint64_t v15 = (unsigned __int8 *)v12;
        while (1)
        {
          int v16 = *v15++;
          if (v16 == 35) {
            break;
          }
          uint64_t v14 = (std::string *)v15;
          if (v15 == (unsigned __int8 *)v11)
          {
            uint64_t v14 = v13;
            goto LABEL_17;
          }
        }
        uint64_t v12 = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
        uint64_t v13 = v14;
      }
      while (v15 != (unsigned __int8 *)v11);
LABEL_17:
      if (v14 != v11 && v14 == p_str) {
        continue;
      }
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::size_type v7 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
LABEL_23:
        uint64_t v17 = a1[23];
        int v18 = *(unsigned __int8 **)a1;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *((void *)a1 + 1);
        }
        else {
          int v18 = a1;
        }
        int v19 = (unsigned __int8 *)v8 + v7;
        if (v17)
        {
          char v20 = v8;
          char v21 = (std::string *)v19;
          do
          {
            if (v20->__r_.__value_.__s.__data_[0] == *v18)
            {
              uint64_t v22 = 1;
              while (v17 != v22)
              {
                if ((unsigned __int8 *)((char *)v20 + v22) == v19) {
                  goto LABEL_38;
                }
                int v23 = v20->__r_.__value_.__s.__data_[v22];
                int v24 = v18[v22++];
                if (v23 != v24) {
                  goto LABEL_29;
                }
              }
              char v21 = v20;
            }
LABEL_29:
            char v20 = (std::string *)((char *)v20 + 1);
          }
          while (v20 != (std::string *)v19);
        }
        else
        {
          char v21 = (std::string *)v19;
        }
LABEL_38:
        if (v21 != (std::string *)v19 || v17 == 0)
        {
          std::string::size_type v26 = (char *)v21 - (char *)v8;
          if ((char *)v21 - (char *)v8 != -1)
          {
            std::string::basic_string(&v36, &__str, 0, (char *)v21 - (char *)v8, (std::allocator<char> *)&v31);
            std::string::basic_string(&v35, &__str, v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if ((char)a1[23] < 0) {
              std::string::size_type v27 = *((void *)a1 + 1);
            }
            else {
              std::string::size_type v27 = a1[23];
            }
            std::string::erase(&v35, 0, v27);
            std::string::size_type v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
            if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v28 = v36.__r_.__value_.__l.__size_;
            }
            if (v28)
            {
              std::regex_traits<char>::regex_traits(&v31);
              uint64_t v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
              std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v30);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      long long v8 = &__str;
      goto LABEL_23;
    }
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v38 + *(void *)(v38[0] - 24)), *(_DWORD *)((char *)&v39[2] + *(void *)(v38[0] - 24)) | 4);
  }
LABEL_59:
  v38[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v39);
  std::istream::~istream();
  return MEMORY[0x1CB775B50](v40);
}

void sub_1C8ED48D0()
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v0);
  JUMPOUT(0x1C8ED493CLL);
}

void sub_1C8ED48D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](&a16);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44);
  JUMPOUT(0x1C8ED493CLL);
}

void sub_1C8ED4934()
{
}

void sub_1C8ED496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  std::locale::~locale(&a27);
  if (v29 < 0) {
    operator delete(v28[25]);
  }
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](v28);
  std::ifstream::~ifstream(&v30);
  _Unwind_Resume(a1);
}

std::locale *std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>::pair[abi:ne180100](std::locale *a1, uint64_t a2)
{
  uint64_t v4 = std::locale::locale(a1, (const std::locale *)a2);
  *(_OWORD *)&v4[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v4[3].__locale_ = *(_OWORD *)(a2 + 24);
  unsigned __int8 v5 = *(atomic_ullong **)(a2 + 48);
  v4[5].__locale_ = *(std::locale::__imp **)(a2 + 40);
  v4[6].__locale_ = (std::locale::__imp *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  a1[7].__locale_ = *(std::locale::__imp **)(a2 + 56);
  uint64_t v6 = (std::string *)&a1[8];
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    a1[10].__locale_ = *(std::locale::__imp **)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1C8ED4A34(_Unwind_Exception *a1)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100]((std::locale *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::pre_processing::Reformulator::applyReformulationToToken(nlv4_inference_orchestrator::pre_processing::Reformulator *this@<X0>, const nlv4_inference_orchestrator::orchestration::Token *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v15 = *(std::string *)a2;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 4);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v8 = *((unsigned __int8 *)a2 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (std::string::value_type *)a2;
      }
      else {
        uint64_t v9 = *(std::string::value_type **)a2;
      }
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)a2 + 1);
      }
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      char v22 = 0;
      char v23 = 0;
      uint64_t v24 = 0;
      memset(__p, 0, 41);
      int v10 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>((std::sub_match<const char *> *)v9, (std::sub_match<const char *> *)&v9[v8], (uint64_t)__p, v6);
      if (__p[0].__r_.__value_.__r.__words[0]) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v10) {
        break;
      }
      v6 += 88;
      if (v6 == v7) {
        goto LABEL_26;
      }
    }
    memset(__p, 0, 24);
    uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = (char *)a2;
    }
    else {
      uint64_t v12 = *(char **)a2;
    }
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    if (*(char *)(v6 + 87) >= 0) {
      uint64_t v13 = (const char *)(v6 + 64);
    }
    else {
      uint64_t v13 = *(const char **)(v6 + 64);
    }
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(__p, v12, &v12[v11], (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v6, v13);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string v15 = __p[0];
  }
LABEL_26:
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *((void *)a2 + 2);
  }
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)(a3 + 35) = *(_OWORD *)((char *)a2 + 35);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  long long v14 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a3 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a3 + 96) = v14;
  std::string::operator=((std::string *)a3, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED4C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::labels::buildSimpleEntityLabelFromPath(const std::basic_string<char16_t>::value_type **this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, ".");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v5 = *this;
  if (*this != this[1])
  {
    int v6 = *((char *)v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = *this;
    }
    else {
      uint64_t v7 = *(const std::basic_string<char16_t>::value_type **)v5;
    }
    if (v6 >= 0) {
      std::basic_string<char16_t>::size_type v8 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v8 = *((void *)v5 + 1);
    }
    std::basic_string<char16_t>::append(a2, v7, v8);
    unsigned __int8 v5 = *this;
  }
  for (uint64_t i = v5 + 12; i != this[1]; i += 12)
  {
    if ((v16 & 0x80u) == 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      std::basic_string<char16_t>::size_type v11 = v16;
    }
    else {
      std::basic_string<char16_t>::size_type v11 = (std::basic_string<char16_t>::size_type)__p[1];
    }
    std::basic_string<char16_t>::append(a2, (const std::basic_string<char16_t>::value_type *)v10, v11);
    int v12 = *((char *)i + 23);
    if (v12 >= 0) {
      uint64_t v13 = i;
    }
    else {
      uint64_t v13 = *(const std::basic_string<char16_t>::value_type **)i;
    }
    if (v12 >= 0) {
      std::basic_string<char16_t>::size_type v14 = *((unsigned __int8 *)i + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v14 = *((void *)i + 1);
    }
    std::basic_string<char16_t>::append(a2, v13, v14);
  }
  if ((v16 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8ED4DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::labels::buildEntityLabelsFromSimpleLabelAndEnumChoices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, ":");
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*(char *)(a1 + 23) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::basic_string<char16_t> __p = *(std::basic_string<char16_t> *)a1;
      }
      if ((v18 & 0x80u) == 0) {
        std::basic_string<char16_t>::size_type v8 = __dst;
      }
      else {
        std::basic_string<char16_t>::size_type v8 = (void **)__dst[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::basic_string<char16_t>::size_type v9 = v18;
      }
      else {
        std::basic_string<char16_t>::size_type v9 = (std::basic_string<char16_t>::size_type)__dst[1];
      }
      std::basic_string<char16_t>::append(&__p, (const std::basic_string<char16_t>::value_type *)v8, v9);
      int v10 = *(char *)(v6 + 23);
      if (v10 >= 0) {
        std::basic_string<char16_t>::size_type v11 = (const std::basic_string<char16_t>::value_type *)v6;
      }
      else {
        std::basic_string<char16_t>::size_type v11 = *(const std::basic_string<char16_t>::value_type **)v6;
      }
      if (v10 >= 0) {
        std::basic_string<char16_t>::size_type v12 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v12 = *(void *)(v6 + 8);
      }
      std::basic_string<char16_t>::append(&__p, v11, v12);
      unint64_t v13 = a3[1];
      if (v13 >= a3[2])
      {
        uint64_t v15 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (long long *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v13 = v14;
        }
        uint64_t v15 = v13 + 24;
        a3[1] = v13 + 24;
      }
      a3[1] = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  if ((char)v18 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C8ED4F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void uaap_orchestration::labels::buildEntityLabelsFromPaths(uaap_orchestration::grammar::Path **a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uaap_orchestration::grammar::Path::getLastComponent(v3, (uint64_t)v14);
      if (v16)
      {
        uaap_orchestration::labels::buildSimpleEntityLabelFromPath((const std::basic_string<char16_t>::value_type **)v3, &__p);
        uaap_orchestration::grammar::UaapGrammar::getEnumChoicesForLabel(a2, (unsigned __int16 *)v14, v12);
        if (v12[0] == v12[1])
        {
          unint64_t v7 = a3[1];
          if (v7 >= a3[2])
          {
            uint64_t v9 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (long long *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v7 = v8;
            }
            uint64_t v9 = v7 + 24;
            a3[1] = v7 + 24;
          }
          a3[1] = v9;
        }
        else
        {
          uaap_orchestration::labels::buildEntityLabelsFromSimpleLabelAndEnumChoices((uint64_t)&__p, v12, (uint64_t *)&v10);
          std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(a3, (std::basic_string<char16_t> *)a3[1], (long long *)v10, v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 3));
          uint64_t v17 = &v10;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
        }
        int v10 = (void **)v12;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
      }
      uint64_t v3 = (uaap_orchestration::grammar::Path *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
}

void sub_1C8ED5100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  v26[1] = v27;
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  a21 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setInputTensors(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this, nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(&__p, "tokens");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v4, (unint64_t **)a2, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 376, (uint64_t)a2);
  unsigned __int8 v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting utteranceTokens", (uint8_t *)&__p, 0x16u);
  }
  if (!*((unsigned char *)a2 + 264))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for tokenTypeIds input!");
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v6 = std::string::basic_string[abi:ne180100]<0>(&__p, "tokensTypeIds");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v6, (unint64_t **)a2 + 27, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((unsigned char *)a2 + 264)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 856, (uint64_t)a2 + 216);
  unint64_t v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting tokenTypeIds", (uint8_t *)&__p, 0x16u);
  }
  if (!*((unsigned char *)a2 + 320))
  {
    uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for excludeSpecialTokensMask input!");
    std::runtime_error::runtime_error(v17, &__p);
    v17->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  long long v8 = std::string::basic_string[abi:ne180100]<0>(&__p, "excludeSpecialTokensMask");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v8, (unint64_t **)a2 + 34, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((unsigned char *)a2 + 320)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 880, (uint64_t)a2 + 272);
  uint64_t v9 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting excludeSpecialTokensMask", (uint8_t *)&__p, 0x16u);
  }
  if (!*((unsigned char *)a2 + 376) || *((void *)a2 + 44) == *((void *)a2 + 45))
  {
    char v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for sequence length input!");
    std::runtime_error::runtime_error(v15, &__p);
    v15->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  int v10 = std::string::basic_string[abi:ne180100]<0>(&__p, "seqLen");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v10, (unint64_t **)a2 + 41, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((unsigned char *)a2 + 376)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v19, *((const void **)a2 + 41), *((void *)a2 + 42), (uint64_t)(*((void *)a2 + 42) - *((void *)a2 + 41)) >> 3);
  char v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v22, *((const void **)a2 + 44), *((void *)a2 + 45), (uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 2);
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setSeqLen((uint64_t)this, (uint64_t)&v19);
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  std::basic_string<char16_t>::size_type v11 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting seqLen", (uint8_t *)&__p, 0x16u);
  }
  if (!*((unsigned char *)a2 + 208))
  {
    unsigned __int8 v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for featurePoolingMask2D input!");
    std::runtime_error::runtime_error(v18, &__p);
    v18->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  std::basic_string<char16_t>::size_type v12 = std::string::basic_string[abi:ne180100]<0>(&__p, "featurPoolingMask2D");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v12, (unint64_t **)a2 + 20, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((unsigned char *)a2 + 208)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 208, (uint64_t)a2 + 160);
  unint64_t v13 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting featurePoolingMask2D", (uint8_t *)&__p, 0x16u);
  }
  if (!*((unsigned char *)a2 + 376)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setPositionEmbeddings((const void **)this, (unint64_t)**((float **)a2 + 44));
  long long v14 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting positionEmbeddings", (uint8_t *)&__p, 0x16u);
  }
}

void sub_1C8ED583C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setSeqLen(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(float **)(a2 + 24);
  if (v2 == *(float **)(a2 + 32) || (unint64_t v3 = *(void *)(a1 + 952), v3 > (unint64_t)*v2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Sequence length input tensor invalid!");
    std::runtime_error::runtime_error(exception, &v8);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  float *v2 = *v2 - (float)v3;
  unsigned __int8 v5 = (unsigned __int8 *)(a1 + 832);
  uint64_t v6 = a1 + 432;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(v6, v5, a2);
}

void sub_1C8ED59C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setPositionEmbeddings(const void **this, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*((uint64_t (**)(const void **, char *))*this + 1))(this, (char *)this + 784);
  unsigned __int8 v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEFAULT, "query seqLen = %zu, hiddenDim=%lu", buf, 0x16u);
  }
  uint64_t v6 = v4 * a2;
  *(_DWORD *)std::string buf = 0;
  std::vector<float>::vector(&__dst, v4 * a2, buf);
  unint64_t v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEFAULT, "copying part of trimmed position embeddings.", buf, 2u);
  }
  if (v6) {
    memmove(__dst, this[116], 4 * v6);
  }
  std::string v8 = std::string::basic_string[abi:ne180100]<0>(buf, "FullPositionEmbeddings");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v8, (unint64_t **)this + 113, (uint64_t **)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v9 = operator new(0x18uLL);
  *uint64_t v9 = 1;
  v9[1] = a2;
  v9[2] = v4;
  *(void *)std::string buf = v9;
  *(void *)&uint8_t buf[8] = v9 + 3;
  *(void *)&buf[16] = v9 + 3;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v16, __dst, (uint64_t)v14, (v14 - (unsigned char *)__dst) >> 2);
  int v10 = std::string::basic_string[abi:ne180100]<0>(__p, "trimmedPositionEmbeddings");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v10, (unint64_t **)buf, (uint64_t **)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)(this + 54), (unsigned __int8 *)this + 808, (uint64_t)buf);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (__dst)
  {
    long long v14 = __dst;
    operator delete(__dst);
  }
}

void sub_1C8ED5C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::~BertReshapableE5MLModule(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this)
{
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::~BertReshapableE5MLModule(this);
  JUMPOUT(0x1CB775C40);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F235F088;
  uint64_t v2 = (void *)*((void *)this + 116);
  if (v2)
  {
    *((void *)this + 117) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 113);
  if (v3)
  {
    *((void *)this + 114) = v3;
    operator delete(v3);
  }
  nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule((void **)this);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this)
{
  return 1;
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::forward(E5RT::ExecutionStreamOperation **this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  uint64_t v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Executing reshapable E5-ML inference.", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)buf, a2);
  if (!v80 || v78 == v79)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v67, "sequence Length tensor incorrectly specified for Dynamic E5ML module, Bert reshape failed!");
    std::runtime_error::runtime_error(exception, &v67);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::reshapeStream((nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *)this, (unint64_t)*v78, (uint64_t)&v67);
  unsigned __int8 v5 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v6 = os_signpost_id_generate(v5);
  unint64_t v7 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Reshaping Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v9 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"Reshaping Bert E5ML Inference network\"", v66, 2u);
  }
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  int v10 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::basic_string<char16_t>::size_type v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v11, OS_SIGNPOST_INTERVAL_END, v6, "Reshaping Bert E5ML Inference network", "", v66, 2u);
    }
  }
  char v12 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEFAULT, "END \"Reshaping Bert E5ML Inference network\"", v66, 2u);
  }
  unint64_t v13 = this + 54;
  long long v14 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v15 = os_signpost_id_generate(v14);
  int v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Binding to Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"Binding to Bert E5ML Inference network\"", v66, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this + 54);
  uint64_t v19 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v20 = v19;
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v20, OS_SIGNPOST_INTERVAL_END, v15, "Binding to Bert E5ML Inference network", "", v66, 2u);
    }
  }
  int v21 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEFAULT, "END \"Binding to Bert E5ML Inference network\"", v66, 2u);
  }
  char v22 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v23 = os_signpost_id_generate(v22);
  uint64_t v24 = SNLPOSLoggerForCategory(7);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v25 = v24;
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v23, "Setting inputs of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v26 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v26, OS_LOG_TYPE_DEFAULT, "BEGIN \"Setting inputs of Bert E5ML Inference network\"", v66, 2u);
  }
  (*((void (**)(E5RT::ExecutionStreamOperation **, uint8_t *))*this + 21))(this, buf);
  uint64_t v27 = SNLPOSLoggerForCategory(7);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string::size_type v28 = v27;
    if (os_signpost_enabled(v27))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v28, OS_SIGNPOST_INTERVAL_END, v23, "Setting inputs of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  char v29 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_DEFAULT, "END \"Setting inputs of Bert E5ML Inference network\"", v66, 2u);
  }
  uint64_t v30 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v31 = os_signpost_id_generate(v30);
  long long v32 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v33 = v32;
    if (os_signpost_enabled(v32))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v31, "Encode Operation of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encode Operation of Bert E5ML Inference network\"", v66, 2u);
  }
  std::string v35 = (std::__shared_weak_count *)this[77];
  char v65 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  std::string v36 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v37 = v36;
    if (os_signpost_enabled(v36))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v37, OS_SIGNPOST_INTERVAL_END, v31, "Encode Operation of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v38 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v38, OS_LOG_TYPE_DEFAULT, "END \"Encode Operation of Bert E5ML Inference network\"", v66, 2u);
  }
  uint64_t v39 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v40 = os_signpost_id_generate(v39);
  size_t v41 = SNLPOSLoggerForCategory(7);
  if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v42 = v41;
    if (os_signpost_enabled(v41))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v42, OS_SIGNPOST_INTERVAL_BEGIN, v40, "Execute Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v43 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v43, OS_LOG_TYPE_DEFAULT, "BEGIN \"Execute Bert E5ML Inference network\"", v66, 2u);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[57]);
  std::locale v44 = SNLPOSLoggerForCategory(7);
  if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v45 = v44;
    if (os_signpost_enabled(v44))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v45, OS_SIGNPOST_INTERVAL_END, v40, "Execute Bert E5ML Inference network", "", v66, 2u);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v46, OS_LOG_TYPE_DEFAULT, "END \"Execute Bert E5ML Inference network\"", v66, 2u);
  }
  uint64_t v47 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v48 = os_signpost_id_generate(v47);
  long long v49 = SNLPOSLoggerForCategory(7);
  if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v50 = v49;
    if (os_signpost_enabled(v49))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v50, OS_SIGNPOST_INTERVAL_BEGIN, v48, "Reset Bert E5ML Inference network", "", v66, 2u);
    }
  }
  int v51 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v51, OS_LOG_TYPE_DEFAULT, "BEGIN \"Reset Bert E5ML Inference network\"", v66, 2u);
  }
  E5RT::ExecutionStream::ResetStream(this[57]);
  char v52 = SNLPOSLoggerForCategory(7);
  if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v53 = v52;
    if (os_signpost_enabled(v52))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v53, OS_SIGNPOST_INTERVAL_END, v48, "Reset Bert E5ML Inference network", "", v66, 2u);
    }
  }
  std::string v54 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v54, OS_LOG_TYPE_DEFAULT, "END \"Reset Bert E5ML Inference network\"", v66, 2u);
  }
  char v55 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v56 = os_signpost_id_generate(v55);
  char v57 = SNLPOSLoggerForCategory(7);
  if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v58 = v57;
    if (os_signpost_enabled(v57))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v58, OS_SIGNPOST_INTERVAL_BEGIN, v56, "Get Outputs of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  char v59 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v59, OS_LOG_TYPE_DEFAULT, "BEGIN \"Get Outputs of Bert E5ML Inference network\"", v66, 2u);
  }
  (*((void (**)(E5RT::ExecutionStreamOperation **))*this + 22))(this);
  uint64_t v60 = SNLPOSLoggerForCategory(7);
  if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v61 = v60;
    if (os_signpost_enabled(v60))
    {
      *(_WORD *)uint64_t v66 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v61, OS_SIGNPOST_INTERVAL_END, v56, "Get Outputs of Bert E5ML Inference network", "", v66, 2u);
    }
  }
  unint64_t v62 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v62, OS_LOG_TYPE_DEFAULT, "END \"Get Outputs of Bert E5ML Inference network\"", v66, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(v13);
  char v63 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C8DA9000, v63, OS_LOG_TYPE_DEBUG, "Success Executing reshapable E5-ML inference.", v66, 2u);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v67);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v77);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v75);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v73);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v72);
  if (__p)
  {
    unint64_t v71 = __p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    long long v69 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C8ED6854(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, long long a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1C8ED69A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0) {
        operator delete(a18);
      }
      __cxa_end_catch();
      JUMPOUT(0x1C8ED6890);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void sub_1C8ED6A0C()
{
}

void sub_1C8ED6A14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
LABEL_6:
  JUMPOUT(0x1C8ED6898);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::reshapeStream(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  os_signpost_id_t v6 = (void *)((char *)this + 704);
  unint64_t v7 = (unsigned __int8 *)this + 784;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)this + 88, (unsigned __int8 *)this + 784))
  {
    std::string v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v6, v7);
    if (!v8) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)buf, (uint64_t)(v8 + 40));
    if (v48 == 1)
    {
      uint64_t v9 = *(unsigned int *)buf;
      int v10 = operator new(0x10uLL);
      std::locale v44 = v10 + 2;
      int v45 = v10 + 2;
      void *v10 = 1;
      v10[1] = a2;
      std::string __p = v10;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 376);
      std::basic_string<char16_t>::size_type v11 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 376, &v49);
      uint64_t v12 = v46;
      uint64_t v46 = 0;
      uint64_t v13 = *((void *)v11 + 5);
      *((void *)v11 + 5) = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v14 = v46;
        uint64_t v46 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
      os_signpost_id_t v15 = operator new(0x10uLL);
      std::locale v44 = v15 + 2;
      int v45 = v15 + 2;
      *os_signpost_id_t v15 = 1;
      v15[1] = a2;
      std::string __p = v15;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 856);
      int v16 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 856, &v49);
      uint64_t v17 = v46;
      uint64_t v46 = 0;
      uint64_t v18 = *((void *)v16 + 5);
      *((void *)v16 + 5) = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        uint64_t v19 = v46;
        uint64_t v46 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
      uint64_t v20 = operator new(0x18uLL);
      std::locale v44 = v20 + 3;
      int v45 = v20 + 3;
      void *v20 = 1;
      v20[1] = a2;
      v20[2] = v9;
      std::string __p = v20;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 808);
      int v21 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 808, &v49);
      uint64_t v22 = v46;
      uint64_t v46 = 0;
      uint64_t v23 = *((void *)v21 + 5);
      *((void *)v21 + 5) = v22;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        uint64_t v24 = v46;
        uint64_t v46 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
      unint64_t v25 = operator new(0x18uLL);
      std::locale v44 = v25 + 3;
      int v45 = v25 + 3;
      *unint64_t v25 = 1;
      v25[1] = a2;
      v25[2] = a2;
      std::string __p = v25;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 208);
      uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 208, &v49);
      uint64_t v27 = v46;
      uint64_t v46 = 0;
      uint64_t v28 = *((void *)v26 + 5);
      *((void *)v26 + 5) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        uint64_t v29 = v46;
        uint64_t v46 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
      uint64_t v30 = operator new(0x10uLL);
      std::locale v44 = v30 + 2;
      int v45 = v30 + 2;
      *uint64_t v30 = 1;
      v30[1] = a2;
      std::string __p = v30;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 880);
      os_signpost_id_t v31 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 880, &v49);
      uint64_t v32 = v46;
      uint64_t v46 = 0;
      uint64_t v33 = *((void *)v31 + 5);
      *((void *)v31 + 5) = v32;
      if (v33)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        uint64_t v34 = v46;
        uint64_t v46 = 0;
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
      std::string v35 = operator new(8uLL);
      *std::string v35 = 1;
      std::locale v44 = v35 + 1;
      int v45 = v35 + 1;
      std::string __p = v35;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      long long v49 = (long long *)((char *)this + 832);
      std::string v36 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 832, &v49);
      uint64_t v37 = v46;
      uint64_t v46 = 0;
      uint64_t v38 = *((void *)v36 + 5);
      *((void *)v36 + 5) = v37;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        uint64_t v39 = v46;
        uint64_t v46 = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        std::locale v44 = __p;
        operator delete(__p);
      }
    }
    else
    {
      size_t v41 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1C8DA9000, v41, OS_LOG_TYPE_ERROR, "Could not reshape because the relevant dimensions could not be read from the config.", (uint8_t *)&__p, 2u);
      }
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  }
  else
  {
    os_signpost_id_t v40 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C8DA9000, v40, OS_LOG_TYPE_ERROR, "Could not reshape because the relevant dimensions could not be found in the config.", buf, 2u);
    }
  }
}

void sub_1C8ED7080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = a14;
  a14 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void sub_1C8ED71A0()
{
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::BertReshapableE5MLModule(nlv4_inference_orchestrator::inference_engine::BertModule *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = nlv4_inference_orchestrator::inference_engine::BertE5MLModule::BertE5MLModule(a1, a2, a3);
  *(void *)uint64_t v4 = &unk_1F235F088;
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::readPositionEmbeddings((uint64_t)v4, (void *)v4 + 113);
  *((void *)a1 + 119) = 2;
  return a1;
}

void sub_1C8ED7204(_Unwind_Exception *a1)
{
  nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::readPositionEmbeddings@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v26[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v24);
  if (*(_DWORD *)&v25[*(void *)(v24[0] - 24) + 16])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Error reading position embeddings file!");
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v4 = (void *)MEMORY[0x1CB775740](v24, &v21);
  if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = v24;
  }
  memset(&__p, 0, sizeof(__p));
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  buf.__r_.__value_.__l.__size_ = v21;
  while (v5)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      std::string v8 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v9 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      int64_t v11 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v12);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        std::string v8 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[4 * v9];
      *(_DWORD *)uint64_t v14 = buf.__r_.__value_.__r.__words[1];
      std::string::size_type v7 = (std::string::size_type)(v14 + 4);
      while ((void *)size != v8)
      {
        int v15 = *(_DWORD *)(size - 4);
        size -= 4;
        *((_DWORD *)v14 - 1) = v15;
        v14 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      __p.__r_.__value_.__l.__size_ = v7;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v13[4 * v12];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[1];
      std::string::size_type v7 = size + 4;
    }
    __p.__r_.__value_.__l.__size_ = v7;
    int v16 = (void *)MEMORY[0x1CB775740](buf.__r_.__value_.__r.__words[0], &buf.__r_.__value_.__r.__words[1]);
    if ((*((unsigned char *)v16 + *(void *)(*v16 - 24) + 32) & 5) != 0)
    {
      unsigned __int8 v5 = 0;
      buf.__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      unsigned __int8 v5 = (uint64_t *)buf.__r_.__value_.__r.__words[0];
    }
  }
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Error reading OWL position embeddings!");
    std::runtime_error::runtime_error(v20, &buf);
    v20->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v17 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (uint64_t)(__p.__r_.__value_.__l.__size_
                                                                                     - __p.__r_.__value_.__r.__words[0]) >> 2;
    _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEFAULT, "Position Embeddings std::string::size_type size = %lu", (uint8_t *)&buf, 0xCu);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)(a1 + 136), *(void *)(a1 + 144), (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v24[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v25);
  std::istream::~istream();
  return MEMORY[0x1CB775B50](v26);
}

void sub_1C8ED7668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a12) {
        operator delete(a12);
      }
      std::ifstream::~ifstream(&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setExcludeSpecialTokensMask(uint64_t a1, uint64_t a2)
{
}

void snlp::ssu::cache::SSUCacheDirectory::withDirectory(std::__fs::filesystem::path *this@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = this;
    }
    else {
      std::string::size_type v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = 136315138;
    unint64_t v10 = v7;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Creating a cache directory instance with root directory: %s", (uint8_t *)&v9, 0xCu);
  }
  if (snlp::ssu::cache::initializeDirectoryV3(this, v6)) {
    operator new();
  }
  std::string v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_ERROR, "Failed to initialize cache directory with v3 format", (uint8_t *)&v9, 2u);
  }
  *a2 = 0;
}

void sub_1C8ED7874(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x1012C40688F0EE3);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::cache::SSUCacheDirectory::SSUCacheDirectory(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  MEMORY[0x1CB775920](&this[1]);
  return this;
}

void sub_1C8ED78F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::buildTemporaryCacheFilePath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  LODWORD(v33) = 0;
  std::string v8 = (int *)boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
  v35[0] = boost::uuids::random_generator_pure::operator()(v8);
  v35[1] = v9;
  boost::uuids::detail::random_provider_base::destroy(v33);
  if (*((char *)a2 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v10 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v12 = a2;
    }
    else {
      unint64_t v12 = *a2;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)a3;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a3 + 8);
  }
  int v16 = std::string::append(&v29, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v30, "_");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = operator new(0x28uLL);
  std::string __p = v20;
  long long v28 = xmmword_1C8F38620;
  _OWORD *v20 = 0u;
  v20[1] = 0u;
  *(void *)((char *)v20 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)v35, v20);
  if (v28 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v28 >= 0) {
    std::string::size_type v22 = HIBYTE(v28);
  }
  else {
    std::string::size_type v22 = v28;
  }
  uint64_t v23 = std::string::append(&v31, p_p, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = std::string::append(&v32, ".ssu_cache_file_in_progress");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v34 = v25->__r_.__value_.__r.__words[2];
  long long v33 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildTemporaryDirectoryPath(a1, &v32);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v31, (char *)&v33);
  std::__fs::filesystem::operator/[abi:ne180100](a4, (uint64_t)&v32, (std::__fs::filesystem::path *)&v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
}

void sub_1C8ED7BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::buildTemporaryDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *this@<X0>, std::string *a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kTemporaryDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED7CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesForAllLocales(snlp::ssu::cache::SSUCacheDirectory *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Clearing cache files for all locales", (uint8_t *)&__p, 2u);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(this, &__p);
  long long v3 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock(v3);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (v8 == 2)
  {
    uint64_t v4 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      size_t v10 = p_p;
      _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing locales directory: %s", buf, 0xCu);
    }
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__p, 0);
  }
  std::recursive_mutex::unlock(v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C8ED7E54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf)
{
  if (a2 == 1)
  {
    long long v17 = __cxa_begin_catch(a1);
    uint64_t v18 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8ED7E10);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *this@<X0>, std::string *a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED7F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(snlp::ssu::cache::SSUCacheDirectory *a1, unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2[23] & 0x80u) == 0) {
      std::string::size_type v5 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v5 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Clearing cache files for all locales except %s", (uint8_t *)&buf, 0xCu);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(a1, &buf);
  os_signpost_id_t v6 = (std::recursive_mutex *)((char *)a1 + 24);
  std::recursive_mutex::lock(v6);
  MEMORY[0x1CB7759B0](&v25, &buf, 0, 0);
  std::string::size_type v7 = v25;
  char v8 = v26;
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = v26;
    v24.__imp_.__ptr_ = v7;
    v24.__imp_.__cntrl_ = v8;
    if (v26)
    {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    v24.__imp_.__ptr_ = v25;
    v24.__imp_.__cntrl_ = 0;
  }
  while (1)
  {
    BOOL v10 = v24.__imp_.__ptr_ == 0;
    if (!v24.__imp_.__ptr_) {
      break;
    }
    uint64_t v11 = std::__fs::filesystem::directory_iterator::__dereference(&v24);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v11->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v11->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v28 = __p;
      }
      uint64_t v15 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = a2[23];
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *((void *)a2 + 1);
      }
      if (size != v17) {
        goto LABEL_40;
      }
      if (v18 >= 0) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v28.__r_.__value_.__l.__data_, v19, v28.__r_.__value_.__l.__size_)) {
          goto LABEL_40;
        }
      }
      else if (*((unsigned char *)&v28.__r_.__value_.__s + 23))
      {
        uint64_t v20 = &v28;
        while (v20->__r_.__value_.__s.__data_[0] == *v19)
        {
          uint64_t v20 = (std::string *)((char *)v20 + 1);
          ++v19;
          if (!--v15) {
            goto LABEL_46;
          }
        }
LABEL_40:
        std::string::size_type v21 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          if ((v11->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = (std::string::size_type)v11;
          }
          else {
            std::string::size_type v22 = v11->__p_.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v22;
          _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing locale directory: %s", (uint8_t *)&__p, 0xCu);
        }
        std::__fs::filesystem::__remove_all(&v11->__p_, 0);
      }
LABEL_46:
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      goto LABEL_48;
    }
    unint64_t v12 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((v11->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = (std::string::size_type)v11;
      }
      else {
        std::string::size_type v14 = v11->__p_.__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v14;
      _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered bad cache directory state: the locales directory %s contains a non-directory file: %s. Ignoring.", (uint8_t *)&v28, 0x16u);
    }
LABEL_48:
    std::__fs::filesystem::directory_iterator::__increment(&v24, 0);
  }
  if (v24.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24.__imp_.__cntrl_);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::recursive_mutex::unlock(v6);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1C8ED83BC()
{
}

void sub_1C8ED83D4()
{
}

void sub_1C8ED83E0()
{
}

void sub_1C8ED83F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x1C8ED840CLL);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  std::recursive_mutex::unlock(v24);
  if (a2 == 1)
  {
    uint64_t v27 = __cxa_begin_catch(v31);
    std::string v28 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v25 - 105) >= 0) {
        uint64_t v29 = v25 - 128;
      }
      else {
        uint64_t v29 = *(void *)(v25 - 128);
      }
      uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
      int v34 = 136315394;
      uint64_t v35 = v29;
      __int16 v36 = 2080;
      uint64_t v37 = v30;
      _os_log_impl(&dword_1C8DA9000, v28, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error during iteration over %s: %s)", (uint8_t *)&v34, 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8ED836CLL);
  }
  JUMPOUT(0x1C8ED84FCLL);
}

void sub_1C8ED8414()
{
}

BOOL std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](const std::__fs::filesystem::path *a1)
{
  if (((1 << a1[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
  {
    std::__fs::filesystem::__status(a1, 0);
    int v1 = v3;
  }
  else
  {
    int v1 = a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
  return v1 == 2;
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::removeCacheFilesForApp(uint64_t a1, char *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0) {
      std::string::size_type v5 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v5 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Attempting to removing cache files across all locales for app: %s", (uint8_t *)&buf, 0xCu);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, &buf);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  MEMORY[0x1CB7759B0](&v21, &buf, 0, 0);
  os_signpost_id_t v6 = v21;
  std::string::size_type v7 = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    char v8 = v22;
    v20.__imp_.__ptr_ = v6;
    v20.__imp_.__cntrl_ = v7;
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    v20.__imp_.__ptr_ = v21;
    v20.__imp_.__cntrl_ = 0;
  }
  uint64_t v9 = 0;
  while (v20.__imp_.__ptr_)
  {
    BOOL v10 = std::__fs::filesystem::directory_iterator::__dereference(&v20);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v10->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v10->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v25 = __p;
      }
      snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, (char *)&v25, a2, &__p);
      std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
      if (v23[0] == 2)
      {
        std::string::size_type v14 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v23 = 136315138;
          std::__fs::filesystem::directory_iterator v24 = p_p;
          _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing app bundle directory: %s", v23, 0xCu);
        }
        std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__p, 0);
        ++v9;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v11 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v13 = (std::string::size_type)v10;
        }
        else {
          std::string::size_type v13 = v10->__p_.__pn_.__r_.__value_.__r.__words[0];
        }
        LODWORD(v25.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v13;
        _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered bad cache directory state: the locales directory %s contains a non-directory file: %s. Ignoring.", (uint8_t *)&v25, 0x16u);
      }
    }
    std::__fs::filesystem::directory_iterator::__increment(&v20, 0);
  }
  if (v20.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20.__imp_.__cntrl_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
  if (!v9)
  {
    int v16 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        std::string::size_type v17 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v17 = *(void *)a2;
      }
      LODWORD(v25.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = v17;
      _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Found no cache files for app: %s. Doing nothing.", (uint8_t *)&v25, 0xCu);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  return v9 | 0x100000000 | v9 & 0xFFFFFF00;
}

void sub_1C8ED890C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,long long buf,int a29,__int16 a30,char a31,char a32)
{
  std::recursive_mutex::unlock(v32);
  if (a2 == 1)
  {
    __int16 v36 = __cxa_begin_catch(a1);
    uint64_t v37 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v38;
      _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8ED88B8);
  }
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(a1, &v10);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v8.__pn_, a2);
  std::__fs::filesystem::operator/[abi:ne180100](&v9, (uint64_t)&v10, &v8);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  std::__fs::filesystem::operator/[abi:ne180100](a4, (uint64_t)&v9, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED8B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForLocale(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = (uint64_t)a1;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(a1, &buf);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::operator/[abi:ne180100](&v81.__pn_, (uint64_t)&buf, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v70 = (std::recursive_mutex *)(v4 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 24));
  std::__fs::filesystem::__status(&v81, 0);
  if (buf.__r_.__value_.__s.__data_[0] != 2)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    std::recursive_mutex::unlock(v70);
    goto LABEL_84;
  }
  MEMORY[0x1CB7759B0](&v78, &v81, 0, 0);
  std::string::size_type v5 = v78;
  os_signpost_id_t v6 = v79;
  if (v79)
  {
    atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v7 = v79;
    v77.__imp_.__ptr_ = v5;
    v77.__imp_.__cntrl_ = v6;
    if (v79)
    {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    v77.__imp_.__ptr_ = v78;
    v77.__imp_.__cntrl_ = 0;
  }
  uint64_t v74 = v4;
  uint64_t v73 = a2;
  while (v77.__imp_.__ptr_)
  {
    std::__fs::filesystem::path v8 = std::__fs::filesystem::directory_iterator::__dereference(&v77);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v8->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v8->__p_, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v82, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v82 = buf;
      }
      snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(v4, a2, (std::__fs::filesystem::path *)&v82, (uint64_t)&v75);
      std::string::size_type v13 = v75;
      unint64_t v12 = v76;
      if (v75 == v76)
      {
        std::string::size_type v21 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          if ((v8->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = (std::string::size_type)v8;
          }
          else {
            std::string::size_type v22 = v8->__p_.__pn_.__r_.__value_.__r.__words[0];
          }
          uint64_t v23 = &v82;
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v23 = (std::string *)v82.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
          _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_ERROR, "Failed to find any cache files for directory: %s (app bundle ID: %s). Skipping.", (uint8_t *)&buf, 0x16u);
        }
        goto LABEL_76;
      }
      if ((char *)v76 - (char *)v75 >= 1)
      {
        uint64_t v14 = ((char *)v76 - (char *)v75) / 104;
        long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        int64_t v16 = (int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 104;
        std::string::size_type v17 = __p.__r_.__value_.__r.__words[0] + 104 * v16;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 3) < v14)
        {
          unint64_t v18 = v16 + v14;
          if ((unint64_t)(v16 + v14) > 0x276276276276276) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          if (0x9D89D89D89D89D8ALL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3) > v18)
            unint64_t v18 = 0x9D89D89D89D89D8ALL
                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3)) >= 0x13B13B13B13B13BLL)
            unint64_t v19 = 0x276276276276276;
          else {
            unint64_t v19 = v18;
          }
          uint64_t v85 = &__p.__r_.__value_.__s.__data_[16];
          if (v19) {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          std::string::size_type v28 = v19 + 104 * v16;
          buf.__r_.__value_.__r.__words[0] = v19;
          buf.__r_.__value_.__l.__size_ = v28;
          buf.__r_.__value_.__r.__words[2] = v28;
          std::string::size_type v84 = v19 + 104 * v20;
          uint64_t v29 = 104 * v14;
          std::string::size_type v30 = v28 + v29;
          do
          {
            snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(v28, (uint64_t)v13);
            v28 += 104;
            std::string::size_type v13 = (const std::string *)((char *)v13 + 104);
            v29 -= 104;
          }
          while (v29);
          buf.__r_.__value_.__r.__words[2] = v30;
          std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v17, v17, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)__p.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__l.__size_);
          buf.__r_.__value_.__l.__size_ = v31;
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          std::string::size_type v33 = buf.__r_.__value_.__r.__words[2];
          if (v17 == __p.__r_.__value_.__l.__size_)
          {
            uint64_t v4 = v74;
          }
          else
          {
            uint64_t v4 = v74;
            do
            {
              *(unsigned char *)std::string::size_type v33 = *(unsigned char *)v17;
              long long v34 = *(_OWORD *)(v17 + 8);
              *(void *)(v33 + 24) = *(void *)(v17 + 24);
              *(_OWORD *)(v33 + 8) = v34;
              *(void *)(v17 + 16) = 0;
              *(void *)(v17 + 24) = 0;
              *(void *)(v17 + 8) = 0;
              long long v35 = *(_OWORD *)(v17 + 32);
              *(void *)(v33 + 48) = *(void *)(v17 + 48);
              *(_OWORD *)(v33 + 32) = v35;
              *(void *)(v17 + 40) = 0;
              *(void *)(v17 + 48) = 0;
              *(void *)(v17 + 32) = 0;
              long long v36 = *(_OWORD *)(v17 + 56);
              *(void *)(v33 + 72) = *(void *)(v17 + 72);
              *(_OWORD *)(v33 + 56) = v36;
              *(void *)(v17 + 64) = 0;
              *(void *)(v17 + 72) = 0;
              *(void *)(v17 + 56) = 0;
              long long v37 = *(_OWORD *)(v17 + 80);
              *(void *)(v33 + 96) = *(void *)(v17 + 96);
              *(_OWORD *)(v33 + 80) = v37;
              *(void *)(v17 + 80) = 0;
              *(void *)(v17 + 88) = 0;
              *(void *)(v17 + 96) = 0;
              v33 += 104;
              v17 += 104;
            }
            while (v17 != size);
            std::string::size_type v31 = buf.__r_.__value_.__l.__size_;
            std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
          }
          std::string::size_type v38 = __p.__r_.__value_.__r.__words[0];
          std::string::size_type v39 = __p.__r_.__value_.__r.__words[2];
          __p.__r_.__value_.__r.__words[0] = v31;
          __p.__r_.__value_.__l.__size_ = v33;
          __p.__r_.__value_.__r.__words[2] = v84;
          buf.__r_.__value_.__r.__words[2] = v17;
          std::string::size_type v84 = v39;
          buf.__r_.__value_.__r.__words[0] = v38;
          buf.__r_.__value_.__l.__size_ = v38;
          std::__split_buffer<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::~__split_buffer((uint64_t)&buf);
          goto LABEL_76;
        }
        uint64_t v24 = __p.__r_.__value_.__l.__size_ - v17;
        int64_t v72 = (int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 104;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v17) >> 3) >= v14)
        {
          std::string v25 = (const std::string *)((char *)v75 + 104 * v14);
          std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
LABEL_60:
          std::string::size_type v41 = v27 - 104 * v14;
          std::string::size_type v42 = v27;
          while (v41 < *((void *)&v15 + 1))
          {
            *(unsigned char *)std::string::size_type v42 = *(unsigned char *)v41;
            long long v43 = *(_OWORD *)(v41 + 8);
            *(void *)(v42 + 24) = *(void *)(v41 + 24);
            *(_OWORD *)(v42 + 8) = v43;
            *(void *)(v41 + 16) = 0;
            *(void *)(v41 + 24) = 0;
            *(void *)(v41 + 8) = 0;
            long long v44 = *(_OWORD *)(v41 + 32);
            *(void *)(v42 + 48) = *(void *)(v41 + 48);
            *(_OWORD *)(v42 + 32) = v44;
            *(void *)(v41 + 40) = 0;
            *(void *)(v41 + 48) = 0;
            *(void *)(v41 + 32) = 0;
            long long v45 = *(_OWORD *)(v41 + 56);
            *(void *)(v42 + 72) = *(void *)(v41 + 72);
            *(_OWORD *)(v42 + 56) = v45;
            *(void *)(v41 + 64) = 0;
            *(void *)(v41 + 72) = 0;
            *(void *)(v41 + 56) = 0;
            long long v46 = *(_OWORD *)(v41 + 80);
            *(void *)(v42 + 96) = *(void *)(v41 + 96);
            *(_OWORD *)(v42 + 80) = v46;
            *(void *)(v41 + 80) = 0;
            *(void *)(v41 + 88) = 0;
            *(void *)(v41 + 96) = 0;
            v42 += 104;
            v41 += 104;
          }
          std::string::size_type v47 = v17 + 104 * v14;
          __p.__r_.__value_.__l.__size_ = v42;
          if (v27 != v47)
          {
            uint64_t v48 = 0;
            uint64_t v49 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v27 - v47) >> 3);
            uint64_t v50 = -104 * v49;
            uint64_t v51 = v15 + 104 * v49 + 104 * v72;
            do
            {
              uint64_t v52 = v51 + v48;
              std::string::size_type v53 = v27 + v48;
              *(unsigned char *)(v27 + v48 - 104) = *(unsigned char *)(v51 + v48 - 104);
              std::string v54 = (void **)(v27 + v48 - 96);
              if (*(char *)(v27 + v48 - 73) < 0) {
                operator delete(*v54);
              }
              long long v55 = *(_OWORD *)(v52 - 96);
              *(void *)(v27 + v48 - 80) = *(void *)(v52 - 80);
              *(_OWORD *)std::string v54 = v55;
              *(unsigned char *)(v52 - 73) = 0;
              *(unsigned char *)(v52 - 96) = 0;
              os_signpost_id_t v56 = (void **)(v53 - 72);
              if (*(char *)(v53 - 49) < 0) {
                operator delete(*v56);
              }
              char v57 = (long long *)(v52 - 72);
              uint64_t v58 = v51 + v48;
              long long v59 = *v57;
              *(void *)(v53 - 56) = *((void *)v57 + 2);
              *(_OWORD *)os_signpost_id_t v56 = v59;
              *(unsigned char *)(v51 + v48 - 49) = 0;
              *(unsigned char *)char v57 = 0;
              std::string::size_type v60 = v27 + v48;
              char v61 = (void **)(v27 + v48 - 48);
              if (*(char *)(v27 + v48 - 25) < 0) {
                operator delete(*v61);
              }
              long long v62 = *(_OWORD *)(v58 - 48);
              *(void *)(v27 + v48 - 32) = *(void *)(v58 - 32);
              *(_OWORD *)char v61 = v62;
              *(unsigned char *)(v58 - 25) = 0;
              *(unsigned char *)(v58 - 48) = 0;
              char v63 = (void **)(v60 - 24);
              if (*(char *)(v60 - 1) < 0) {
                operator delete(*v63);
              }
              uint64_t v64 = v51 + v48;
              long long v65 = *(_OWORD *)(v51 + v48 - 24);
              *(void *)(v60 - 8) = *(void *)(v51 + v48 - 8);
              *(_OWORD *)char v63 = v65;
              *(unsigned char *)(v64 - 1) = 0;
              *(unsigned char *)(v64 - 24) = 0;
              v48 -= 104;
            }
            while (v50 != v48);
          }
          a2 = v73;
          uint64_t v4 = v74;
          if (v13 != v25)
          {
            do
            {
              std::string::value_type v67 = v13->__r_.__value_.__s.__data_[0];
              uint64_t v66 = (const std::string *)&v13->__r_.__value_.__r.__words[1];
              *(unsigned char *)std::string::size_type v17 = v67;
              unint64_t v68 = (std::string *)(v17 + 8);
              std::string::operator=(v68++, v66);
              std::string::operator=(v68, v66 + 1);
              long long v69 = v66 + 2;
              std::string::operator=(++v68, v66 + 2);
              std::string::operator=(v68 + 1, v66 + 3);
              std::string::size_type v13 = v66 + 4;
              std::string::size_type v17 = (std::string::size_type)&v68[2];
            }
            while (&v69[2] != v25);
          }
          goto LABEL_76;
        }
        std::string v25 = (const std::string *)((char *)v75 + 8 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v17) >> 3));
        if (v25 == v76)
        {
          std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v26 = 0;
          do
          {
            snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(*((void *)&v15 + 1) + v26, (uint64_t)v25 + v26);
            v26 += 104;
          }
          while ((const std::string *)((char *)v25 + v26) != v12);
          std::string::size_type v27 = *((void *)&v15 + 1) + v26;
          uint64_t v4 = v74;
        }
        __p.__r_.__value_.__l.__size_ = v27;
        BOOL v40 = v24 < 1;
        a2 = v73;
        if (!v40) {
          goto LABEL_60;
        }
      }
LABEL_76:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
      std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      goto LABEL_78;
    }
    std::string v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      std::string v10 = &v81;
      if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v10 = (std::__fs::filesystem::path *)v81.__pn_.__r_.__value_.__r.__words[0];
      }
      if ((v8->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v11 = (std::string::size_type)v8;
      }
      else {
        std::string::size_type v11 = v8->__p_.__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "Found non-directory entry in directory %s: %s. Skipping.", (uint8_t *)&buf, 0x16u);
    }
LABEL_78:
    std::__fs::filesystem::directory_iterator::__increment(&v77, 0);
  }
  if (v77.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77.__imp_.__cntrl_);
  }
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  std::recursive_mutex::unlock(v70);
  *a3 = __p;
  memset(&__p, 0, sizeof(__p));
LABEL_84:
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED9394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  std::recursive_mutex::unlock(a9);
  if (a2 == 1)
  {
    std::string::size_type v41 = __cxa_begin_catch(a1);
    std::string::size_type v42 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = (*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
      *(_DWORD *)(v38 - 176) = 136315138;
      *(void *)(v38 - 172) = v43;
      _os_log_impl(&dword_1C8DA9000, v42, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s", (uint8_t *)(v38 - 176), 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8ED9314);
  }
  *(void *)(v38 - 176) = &a25;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 176));
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(uint64_t a1@<X0>, char *a2@<X1>, std::__fs::filesystem::path *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, (char *)a3, &v41.__pn_);
  long long v39 = 0uLL;
  uint64_t v40 = 0;
  long long v34 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  std::__fs::filesystem::__status(&v41, 0);
  if (v45[0] == 2)
  {
    MEMORY[0x1CB7759B0](&v37, &v41, 0, 0);
    std::string::size_type v7 = v37;
    std::__fs::filesystem::path v8 = v38;
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string v9 = v38;
      v36.__imp_.__ptr_ = v7;
      v36.__imp_.__cntrl_ = v8;
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      v36.__imp_.__ptr_ = v37;
      v36.__imp_.__cntrl_ = 0;
    }
    while (v36.__imp_.__ptr_)
    {
      std::string v10 = std::__fs::filesystem::directory_iterator::__dereference(&v36);
      if (std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](&v10->__p_))
      {
        if (SHIBYTE(v10->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&p, v10->__p_.__pn_.__r_.__value_.__l.__data_, v10->__p_.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string p = (std::string)v10->__p_;
        }
        snlp::ssu::cache::SSUCacheDirectory::buildResultForCacheFile(a1, a3, (uint64_t)&v41, (snlp::ssu::cache::SSUCacheDirectory *)&p);
      }
      std::string::size_type v11 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = &v41;
        if ((v41.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v12 = (std::__fs::filesystem::path *)v41.__pn_.__r_.__value_.__r.__words[0];
        }
        if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v13 = v10;
        }
        else {
          std::string::size_type v13 = (const std::__fs::filesystem::directory_entry *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v43 = 2080;
        long long v44 = v13;
        _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_ERROR, "Found non-regular-file entry in directory %s: %s. Skipping.", buf, 0x16u);
      }
      std::__fs::filesystem::directory_iterator::__increment(&v36, 0);
    }
    if (v36.__imp_.__cntrl_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36.__imp_.__cntrl_);
    }
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    std::recursive_mutex::unlock(v34);
    long long v14 = v39;
    if ((void)v39 == *((void *)&v39 + 1))
    {
      uint64_t v32 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v33 = &v41;
        if ((v41.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v33 = (std::__fs::filesystem::path *)v41.__pn_.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v33;
        _os_log_impl(&dword_1C8DA9000, v32, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Could not find any cache files in directory: %s", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = *(unsigned __int8 *)(v39 + 55);
      size_t v16 = *(void *)(v39 + 40);
      if ((v15 & 0x80u) == 0) {
        uint64_t v17 = *(unsigned __int8 *)(v39 + 55);
      }
      else {
        uint64_t v17 = *(void *)(v39 + 40);
      }
      uint64_t v18 = v39;
      while (1)
      {
        uint64_t v19 = *(unsigned __int8 *)(v18 + 55);
        int v20 = (char)v19;
        if ((v19 & 0x80u) != 0) {
          uint64_t v19 = *(void *)(v18 + 40);
        }
        if (v17 != v19) {
          break;
        }
        if (v20 >= 0) {
          std::string::size_type v21 = (unsigned __int8 *)(v18 + 32);
        }
        else {
          std::string::size_type v21 = *(unsigned __int8 **)(v18 + 32);
        }
        if ((v15 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v14 + 32), v21, v16)) {
            break;
          }
        }
        else if (v15)
        {
          std::string::size_type v22 = (unsigned __int8 *)(v14 + 32);
          uint64_t v23 = v15;
          while (*v22 == *v21)
          {
            ++v22;
            ++v21;
            if (!--v23) {
              goto LABEL_43;
            }
          }
          break;
        }
LABEL_43:
        uint64_t v24 = *(unsigned __int8 *)(v14 + 79);
        if ((v24 & 0x80u) == 0) {
          uint64_t v25 = *(unsigned __int8 *)(v14 + 79);
        }
        else {
          uint64_t v25 = *(void *)(v14 + 64);
        }
        uint64_t v26 = *(unsigned __int8 *)(v18 + 79);
        int v27 = (char)v26;
        if ((v26 & 0x80u) != 0) {
          uint64_t v26 = *(void *)(v18 + 64);
        }
        if (v25 != v26) {
          break;
        }
        if (v27 >= 0) {
          std::string::size_type v28 = (unsigned __int8 *)(v18 + 56);
        }
        else {
          std::string::size_type v28 = *(unsigned __int8 **)(v18 + 56);
        }
        if ((v24 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v14 + 56), v28, *(void *)(v14 + 64))) {
            break;
          }
        }
        else if (*(unsigned char *)(v14 + 79))
        {
          uint64_t v29 = (unsigned __int8 *)(v14 + 56);
          while (*v29 == *v28)
          {
            ++v29;
            ++v28;
            if (!--v24) {
              goto LABEL_59;
            }
          }
          break;
        }
LABEL_59:
        v18 += 104;
        if (v18 == *((void *)&v14 + 1))
        {
          *(_OWORD *)a4 = v14;
          *(void *)(a4 + 16) = v40;
          uint64_t v40 = 0;
          long long v39 = 0uLL;
          goto LABEL_71;
        }
      }
      std::string::size_type v30 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v31 = &v41;
        if ((v41.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v31 = (std::__fs::filesystem::path *)v41.__pn_.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered cache files of different versions in directory: %s", buf, 0xCu);
      }
    }
    snlp::ssu::cache::SSUCacheDirectory::healByRemovingDirectory((snlp::ssu::cache::SSUCacheDirectory *)a1, &v41);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::recursive_mutex::unlock(v34);
  }
LABEL_71:
  *(void *)std::string buf = &v39;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1C8ED9B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void **buf)
{
  std::string buf = (void **)&a25;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&buf);
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C8ED9BF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,long long a34)
{
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a34);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  std::recursive_mutex::unlock(a10);
  if (a2 == 1)
  {
    std::__fs::filesystem::directory_iterator v36 = __cxa_begin_catch(a1);
    long long v37 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
      LODWORD(a34) = 136315138;
      *(void *)((char *)&a34 + 4) = v38;
      _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&a34, 0xCu);
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C8ED9B38);
  }
  JUMPOUT(0x1C8ED9BA4);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  os_signpost_id_t v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::__fs::filesystem::path v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C8ED9E10(_Unwind_Exception *a1)
{
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    char v8 = *(unsigned char *)(a3 - 104);
    a3 -= 104;
    *(unsigned char *)(a7 - 104) = v8;
    a7 -= 104;
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a7 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    long long v10 = *(_OWORD *)(a3 + 32);
    *(void *)(a7 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a7 + 32) = v10;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    long long v11 = *(_OWORD *)(a3 + 56);
    *(void *)(a7 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(a7 + 56) = v11;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    __n128 result = *(__n128 *)(a3 + 80);
    *(void *)(a7 + 96) = *(void *)(a3 + 96);
    *(__n128 *)(a7 + 80) = result;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
  }
  return result;
}

BOOL std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](const std::__fs::filesystem::path *a1)
{
  if (((1 << a1[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
  {
    std::__fs::filesystem::__status(a1, 0);
    int v1 = v3;
  }
  else
  {
    int v1 = a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
  return v1 == 1;
}

void snlp::ssu::cache::SSUCacheDirectory::buildResultForCacheFile(uint64_t a1, const std::__fs::filesystem::path *a2, uint64_t a3, snlp::ssu::cache::SSUCacheDirectory *a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheDirectory::extractMetadataFromCacheFileName(a4, a2);
}

void sub_1C8EDA1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<snlp::ssu::cache::SSUCacheFileVersion,SSUCategoryType>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::healByRemovingDirectory(snlp::ssu::cache::SSUCacheDirectory *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v5 = a2;
    }
    else {
      long long v5 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uintmax_t v18 = (uintmax_t)v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Attempting to heal a corrupted cache by removing all contents under: %s", buf, 0xCu);
  }
  os_signpost_id_t v6 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock(v6);
  std::__fs::filesystem::__status(a2, 0);
  if (v16 == 2)
  {
    uintmax_t v7 = std::__fs::filesystem::__remove_all(a2, 0);
    char v8 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v9 = a2;
      }
      else {
        long long v9 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 134218242;
      uintmax_t v18 = v7;
      __int16 v19 = 2080;
      int v20 = v9;
      long long v10 = "[SSUCacheDirectory] Successfully removed %lu files/directories under %s";
      long long v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      uint32_t v13 = 22;
LABEL_17:
      _os_log_impl(&dword_1C8DA9000, v11, v12, v10, buf, v13);
    }
  }
  else
  {
    long long v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uintmax_t v18 = (uintmax_t)v15;
      long long v10 = "[SSUCacheDirectory] Error: cannot remove non-existing directory: %s";
      long long v11 = v14;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 12;
      goto LABEL_17;
    }
  }
  std::recursive_mutex::unlock(v6);
}

void sub_1C8EDA3D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  std::recursive_mutex::unlock(v11);
  if (a2 == 1)
  {
    long long v14 = __cxa_begin_catch(a1);
    uint64_t v15 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EDA3A0);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::extractMetadataFromCacheFileName(snlp::ssu::cache::SSUCacheDirectory *this, const std::__fs::filesystem::path *a2)
{
  v10[1] = *(std::locale *)MEMORY[0x1E4F143B8];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)v4, "([0-9a-f]+)%s([0-9_]+|unknown)%s([0-9]+)%s");
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v4);
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v4);
  v2[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v2[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v2[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v4);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v3, (uint64_t *)v4);
  if (v9)
  {
    std::locale::~locale(v10);
    char v9 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v8);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  v2[0].__loc_.__locale_ = (std::locale::__imp *)v4;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v2);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v2);
}

void sub_1C8EDAA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,std::locale a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a9);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a70) {
    operator delete(a70);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a45);
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<snlp::ssu::cache::SSUCacheFileVersion,SSUCategoryType>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>(void *a1, uint64_t *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a2, a2[1]);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFileForCategory(uint64_t a1@<X0>, char *a2@<X1>, std::__fs::filesystem::path *a3@<X2>, unsigned __int8 a4@<W3>, size_t *a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = a4;
  os_log_type_t v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0) {
      uint32_t v13 = a2;
    }
    else {
      uint32_t v13 = *(char **)a2;
    }
    if ((a3->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v14 = a3;
    }
    else {
      long long v14 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v11 <= 3) {
      uint64_t v15 = EnumNamesSSUCategoryType(void)::names[v11];
    }
    else {
      uint64_t v15 = "";
    }
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v16 = a5;
    }
    else {
      uint64_t v16 = (void *)*a5;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v14;
    __int16 v38 = 2080;
    long long v39 = v15;
    __int16 v40 = 2080;
    std::__fs::filesystem::path v41 = v16;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "Looking up cache file for locale=%s, appBundleId=%s, category=%s, encoderAssetVersion=%s", buf, 0x2Au);
  }
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(a1, a2, a3, (uint64_t)buf);
  long long v34 = a6;
  uint64_t v17 = *(unsigned __int8 **)buf;
  uintmax_t v18 = *(unsigned __int8 **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    uint64_t v19 = *((unsigned __int8 *)a5 + 23);
    size_t v20 = a5[1];
    std::string __s1 = (void *)*a5;
    if ((v19 & 0x80u) == 0) {
      size_t v21 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v21 = a5[1];
    }
    while (1)
    {
      std::string::size_type v22 = v17 + 32;
      uint64_t v23 = v17[55];
      int v24 = (char)v23;
      uint64_t v25 = *((void *)v17 + 5);
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)v17 + 5);
      }
      if (v21 == v23)
      {
        if (v24 >= 0) {
          uint64_t v26 = v17 + 32;
        }
        else {
          uint64_t v26 = *(unsigned __int8 **)v22;
        }
        if ((v19 & 0x80) != 0)
        {
          if (!memcmp(__s1, v26, v20)) {
            goto LABEL_42;
          }
        }
        else
        {
          if (!v19) {
            goto LABEL_42;
          }
          int v27 = a5;
          uint64_t v28 = v19;
          while (*(unsigned __int8 *)v27 == *v26)
          {
            int v27 = (size_t *)((char *)v27 + 1);
            ++v26;
            if (!--v28) {
              goto LABEL_42;
            }
          }
        }
      }
      if (v24 < 0)
      {
        if (v25 != 7) {
          goto LABEL_43;
        }
        std::string::size_type v22 = *(unsigned __int8 **)v22;
      }
      else if (v24 != 7)
      {
        goto LABEL_43;
      }
      if (*(_DWORD *)v22 == 1852534389 && *(_DWORD *)(v22 + 3) == 1853321070)
      {
LABEL_42:
        if (*v17 == v11) {
          break;
        }
      }
LABEL_43:
      v17 += 104;
      if (v17 == v18) {
        goto LABEL_49;
      }
    }
  }
  if (v18 == v17)
  {
LABEL_49:
    std::string::size_type v33 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::__fs::filesystem::directory_iterator v36 = 0;
      _os_log_impl(&dword_1C8DA9000, v33, OS_LOG_TYPE_DEBUG, "Did not find relevant cache file", v36, 2u);
    }
    char v32 = 0;
    uint64_t v31 = (uint64_t)v34;
    *long long v34 = 0;
  }
  else
  {
    std::string::size_type v30 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::__fs::filesystem::directory_iterator v36 = 0;
      _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_DEBUG, "Found relevant cache file.", v36, 2u);
    }
    uint64_t v31 = snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult((uint64_t)v34, (uint64_t)v17);
    char v32 = 1;
  }
  *(unsigned char *)(v31 + 104) = v32;
  *(void *)std::__fs::filesystem::directory_iterator v36 = buf;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
}

void sub_1C8EDAFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::insertCacheFile(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  os_log_type_t v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v13 = a2[23] >= 0 ? (std::string::size_type)a2 : *(void *)a2;
    std::string::size_type v14 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    snlp::ssu::cache::SSUCacheFileVersion::toString(&__p, a4);
    uint64_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v16 = a5 <= 3 ? EnumNamesSSUCategoryType(void)::names[a5] : "";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v14;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    std::string::size_type v30 = v15;
    __int16 v31 = 2080;
    char v32 = v16;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Inserting cache file for locale %s, appBundleId %s, version %s and category %s", (uint8_t *)&buf, 0x2Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  snlp::ssu::cache::SSUCacheDirectory::prepareAppBundleDirectoryForInsertion((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, (std::__fs::filesystem::path *)a3, a5, &buf);
  snlp::ssu::cache::SSUCacheDirectory::buildCacheFilePath((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, (char *)a3, a4, a5, &__p);
  uint64_t v17 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a6 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else {
      std::string v23 = *(std::string *)a6;
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uintmax_t v18 = &v23;
    }
    else {
      uintmax_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v22 = __p;
    }
    uint64_t v19 = &v22;
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v24 = 136315394;
    uint64_t v25 = v18;
    __int16 v26 = 2080;
    int v27 = v19;
    _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Atomically renaming temporary file %s to final location %s", v24, 0x16u);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)a6, (const std::__fs::filesystem::path *)&__p, 0);
  int v20 = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
  return v20 | 0x100u;
}

void sub_1C8EDB2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,long long buf,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete((void *)buf);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::recursive_mutex::unlock(v35);
  if (a2 == 1)
  {
    __int16 v38 = __cxa_begin_catch(a1);
    long long v39 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v40;
      _os_log_impl(&dword_1C8DA9000, v39, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EDB27CLL);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::prepareAppBundleDirectoryForInsertion(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, std::__fs::filesystem::path *a3@<X2>, unsigned __int8 a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp((uint64_t)a1, a2, a3, (uint64_t)&v18);
  uint64_t v10 = v19;
  if (v18 == v19)
  {
    char v11 = 0;
  }
  else
  {
    char v11 = 0;
    int v12 = a4;
    std::string::size_type v13 = v18 + 80;
    do
    {
      if (*(unsigned __int8 *)(v13 - 80) == v12)
      {
        std::string::size_type v14 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v15 = v13;
          if (*(char *)(v13 + 23) < 0) {
            std::string::size_type v15 = *(void *)v13;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
          _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing existing cache file before inserting new one: %s", (uint8_t *)&buf, 0xCu);
        }
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)v13, 0);
        char v11 = 1;
      }
      std::string::size_type v16 = v13 + 24;
      v13 += 104;
    }
    while (v16 != v10);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(a1, a2, (char *)a3, &buf);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&buf, 0);
  if (v20 != 2) {
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&buf, 0);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a5, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    int v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    a5[1].__r_.__value_.__s.__data_[0] = v11;
    if (v17 < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a5 = buf;
    a5[1].__r_.__value_.__s.__data_[0] = v11;
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1C8EDB5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a11;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildCacheFilePath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(a1, a2, a3, &v34);
  std::to_string(&v33, a5);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v32 = *(std::string *)a4;
  }
  std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  uint64_t v10 = &v32;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
    uint64_t v10 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v10->__r_.__value_.__s.__data_[0] == 46) {
      v10->__r_.__value_.__s.__data_[0] = 95;
    }
    uint64_t v10 = (std::string *)((char *)v10 + 1);
  }
  if (*(char *)(a4 + 47) >= 0) {
    size_t v11 = *(unsigned __int8 *)(a4 + 47);
  }
  else {
    size_t v11 = *(void *)(a4 + 32);
  }
  int v12 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v11 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*(char *)(a4 + 47) >= 0) {
      std::string::size_type v13 = (const void *)(a4 + 24);
    }
    else {
      std::string::size_type v13 = *(const void **)(a4 + 24);
    }
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = &v32;
  }
  else {
    std::string::size_type v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v32.__r_.__value_.__l.__size_;
  }
  std::string::size_type v16 = std::string::append(&v26, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v27, ".");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v20 = &v33;
  }
  else {
    char v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v22 = std::string::append(&v28, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = std::string::append(&v29, ".ssu_cache_file");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v29, (char *)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a6, (uint64_t)&v34, (std::__fs::filesystem::path *)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EDB87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 81) < 0) {
    operator delete(*(void **)(v42 - 104));
  }
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  _Unwind_Resume(exception_object);
}

const void **nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(void *__s2, uint64_t a2, int a3, void *a4)
{
  __n128 result = (const void **)a4[6];
  if (result)
  {
    if (*((char *)result + 23) < 0)
    {
      __n128 result = (const void **)*result;
      size_t v8 = *(void *)(a4[6] + 8);
    }
    else
    {
      size_t v8 = *((unsigned __int8 *)result + 23);
    }
    if (v8 == a2 && !memcmp(result, __s2, v8))
    {
      char v9 = (_DWORD *)a4[1];
      uint64_t v10 = (_DWORD *)a4[2];
      if (v9 != v10)
      {
        while (*v9 != a3)
        {
          if (++v9 == v10)
          {
            char v9 = (_DWORD *)a4[2];
            return (const void **)(v9 != v10);
          }
        }
      }
      return (const void **)(v9 != v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this, const sirinluinternal::MatchingSpan *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "personFullName");
  std::string::basic_string[abi:ne180100]<0>(&v26, "personRelationship");
  unsigned __int8 v3 = v30;
  if ((v30 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v5 = v30;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  unsigned __int8 v6 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v4, v5, 2, this);
  uint64_t v7 = v28;
  size_t v8 = v26;
  size_t v9 = v27;
  if ((v28 & 0x80u) == 0) {
    uint64_t v10 = &v26;
  }
  else {
    uint64_t v10 = (void **)v26;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v11 = v28;
  }
  else {
    uint64_t v11 = v27;
  }
  unsigned int v12 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v10, v11, 2, this);
  std::string::size_type v13 = (unsigned __int8 **)*((void *)this + 6);
  std::string::size_type v14 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    std::string::size_type v14 = v13[1];
  }
  if ((unsigned __int8 *)v11 != v14) {
    goto LABEL_26;
  }
  if (v15 >= 0) {
    std::string::size_type v16 = (unsigned __int8 *)*((void *)this + 6);
  }
  else {
    std::string::size_type v16 = *v13;
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(v8, v16, v9)) {
      goto LABEL_27;
    }
LABEL_26:
    BOOL v19 = 0;
    goto LABEL_35;
  }
  if (v7)
  {
    long long v17 = &v26;
    uint64_t v18 = v7;
    while (*(unsigned __int8 *)v17 == *v16)
    {
      long long v17 = (void **)((char *)v17 + 1);
      ++v16;
      if (!--v18) {
        goto LABEL_27;
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  char v20 = (_DWORD *)*((void *)this + 1);
  std::string::size_type v21 = (_DWORD *)*((void *)this + 2);
  if (v20 != v21)
  {
    while (*v20 != 3 && *v20 != 8)
    {
      if (++v20 == v21)
      {
        char v20 = (_DWORD *)*((void *)this + 2);
        break;
      }
    }
  }
  BOOL v19 = v21 != v20;
LABEL_35:
  unsigned int v23 = v12 | v19;
  if (v6) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v23;
  }
  if ((v7 & 0x80) != 0)
  {
    operator delete(v8);
    if ((v30 & 0x80) == 0) {
      return v24;
    }
LABEL_42:
    operator delete(__p[0]);
    return v24;
  }
  if ((v3 & 0x80) != 0) {
    goto LABEL_42;
  }
  return v24;
}

void sub_1C8EDBB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isSpanFromVocRepo(uint64_t a1)
{
  int v1 = *(_DWORD **)(a1 + 8);
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  if (v1 != v2)
  {
    while (*v1 != 3 && *v1 != 8)
    {
      if (++v1 == v2)
      {
        int v1 = *(_DWORD **)(a1 + 16);
        return v2 != v1;
      }
    }
  }
  return v2 != v1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = siri::ontology::oname::graph::ontology_init::common_Person(this);
  uint64_t v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    uint64_t v5 = *((void *)v2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v3 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 **)(v3 + 8);
  size_t v8 = (unsigned __int8 *)(v3 + 8);
  size_t v9 = v10;
  if (v7 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)v2, v11, *((void *)v2 + 1)) == 0;
  }
  if (!*((unsigned char *)v2 + 23)) {
    return 1;
  }
  uint64_t v12 = v4 - 1;
  do
  {
    int v14 = *(unsigned __int8 *)v2;
    uint64_t v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v2 + 1);
    int v13 = v14;
    int v16 = *v11++;
    int v15 = v16;
    BOOL v18 = v12-- != 0;
    BOOL result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

void sub_1C8EDCB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a72 = (uint64_t)&a23;
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  a58 = &STACK[0x2A0];
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  a58 = (void *)(v72 - 232);
  std::vector<uaap_orchestration::grammar::Rule>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  if (*(char *)(v72 - 185) < 0) {
    operator delete(*(void **)(v72 - 208));
  }
  if (*(char *)(v72 - 161) < 0) {
    operator delete(*(void **)(v72 - 184));
  }

  _Unwind_Resume(a1);
}

uint64_t std::allocator<nl_featurization::SpanMatcherPattern>::construct[abi:ne180100]<nl_featurization::SpanMatcherPattern,nl_featurization::SpanMatcherPattern>(std::basic_string<char16_t> *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return std::unordered_set<std::basic_string<char16_t>>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
}

void sub_1C8EDD02C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nl_featurization::SpanMatcherPattern::~SpanMatcherPattern(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nl_featurization::vocabulary::Vocabulary::~Vocabulary(nl_featurization::vocabulary::Vocabulary *this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void nl_featurization::FeaturizerConfig::~FeaturizerConfig(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this + 4;
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::unordered_set<std::basic_string<char16_t>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int16 **)(a2 + 16); i; uint64_t i = *(unsigned __int16 **)i)
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_1C8EDD268(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nl_featurization::SpanMatcherPattern>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::~EspressoBertModel(void **this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::~EspressoBertModel(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  void *v3;

  *this = &unk_1F235F018;
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v2 = (uint64_t)this[10];
  this[10] = 0;
  if (v2) {
    std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100]((void **)this + 2, 0);
  uint64_t v3 = this[1];
  this[1] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 88))(v3);
  }
}

void **std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::EspressoBertModel(uint64_t a1, char *a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F235F018;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 730643660;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 96), "position_embedding_vector.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 120), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [43],void>((std::string *)(a1 + 144), "model.bundle/universal.bundle/universal.e5");
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 168), "model.bundle/universal.bundle/main/segment_0__cpu/model.espresso.net", "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 192), "properties");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 216), "fast_reshape");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 240), "1");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 264), "hidden_size");
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::createModule((std::__fs::filesystem::path *)a1, a2, a4);
}

void sub_1C8EDD954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(char *)(v48 + 287) < 0) {
    operator delete(*v50);
  }
  uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(a10);
  if (*(char *)(v48 + 119) < 0) {
    operator delete(*a9);
  }
  uint64_t v52 = *(void *)(v48 + 80);
  *(void *)(v48 + 80) = 0;
  if (v52) {
    std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v52);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a11);
  std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](a12, 0);
  uint64_t v53 = *v49;
  *uint64_t v49 = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 88))(v53);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::createModule(std::__fs::filesystem::path *a1, char *a2, void *a3)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  snlp::common::e5ml::asset_finder::AssetFinder::findAssetTypesPresent(a1 + 5, &v40, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v41, "locale");
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)v41);
  if (v5 && *((_DWORD *)v5 + 16) == 4)
  {
    if ((char)v5[63] < 0) {
      std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)v5 + 5), *((void *)v5 + 6));
    }
    else {
      std::string v43 = *(std::string *)(v5 + 40);
    }
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    v43.__r_.__value_.__s.__data_[0] = 0;
  }
  char v44 = v6;
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "os_release");
  int v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)v41);
  if (v7 && *((_DWORD *)v7 + 16) == 1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 10) & 0xFFFFFF00;
    int v9 = *((_DWORD *)v7 + 10);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    int v9 = 0;
    unsigned int v8 = 0;
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[0]);
  }
  char v11 = v10 ^ 1;
  if (!v44) {
    char v11 = 1;
  }
  if (v11) {
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "zh_CN");
  uint64_t v12 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  int v14 = (void *)HIBYTE(v42);
  int v15 = SHIBYTE(v42);
  if (v42 < 0) {
    int v14 = v41[1];
  }
  if ((void *)size != v14) {
    goto LABEL_43;
  }
  unsigned int v16 = v8 | v9;
  long long v17 = v41[0];
  if (v42 >= 0) {
    BOOL v18 = v41;
  }
  else {
    BOOL v18 = (void **)v41[0];
  }
  if ((*((unsigned char *)&v43.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v43.__r_.__value_.__l.__data_, v18, v43.__r_.__value_.__l.__size_) || v16 <= 0xC83) {
      goto LABEL_43;
    }
  }
  else
  {
    if (*((unsigned char *)&v43.__r_.__value_.__s + 23))
    {
      BOOL v19 = &v43;
      while (v19->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
      {
        BOOL v19 = (std::string *)((char *)v19 + 1);
        BOOL v18 = (void **)((char *)v18 + 1);
        if (!--v12) {
          goto LABEL_35;
        }
      }
      goto LABEL_43;
    }
LABEL_35:
    if (v16 < 0xC84)
    {
LABEL_43:
      if (v15 < 0) {
        operator delete(v41[0]);
      }
      goto LABEL_45;
    }
  }
  if (v15 < 0) {
    operator delete(v17);
  }
  if (v16 < 0xCE4)
  {
    int v20 = 1;
LABEL_46:
    if (v44 && SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (v20)
    {
      std::string::size_type v21 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "CN OWL asset fix to [SydneyE, Dawn), Asset Type identified as non-reshapable E5ML OWL", (uint8_t *)&v43, 2u);
      }
      if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2))
      {
        operator new();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2))
    {
      unsigned int v23 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEBUG, "Asset Type identified as Reshapable E5ML OWL", (uint8_t *)&v43, 2u);
      }
      if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2))
      {
        if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&pn, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string pn = v40.__pn_;
        }
        long long v25 = std::string::append(&pn, "/");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::pointer data = a1[4].__pn_.__r_.__value_.__l.__data_;
        unsigned __int8 v28 = a1 + 4;
        size_t v27 = data;
        int v30 = SHIBYTE(v28->__pn_.__r_.__value_.__r.__words[2]);
        if (v30 >= 0) {
          std::string::size_type v31 = (const std::string::value_type *)v28;
        }
        else {
          std::string::size_type v31 = v27;
        }
        if (v30 >= 0) {
          std::string::size_type v32 = HIBYTE(v28->__pn_.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v32 = v28->__pn_.__r_.__value_.__l.__size_;
        }
        std::string v33 = std::string::append(&v38, v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        int64_t v42 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::__fs::filesystem::path v41 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        operator new();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(v22, *((unint64_t *)&v22 + 1), 1))
    {
      uint64_t v24 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "Asset Type identified as non-reshapable E5ML OWL", (uint8_t *)&v43, 2u);
      }
      if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 1))
      {
        operator new();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(v22, *((unint64_t *)&v22 + 1), 0))
    {
      long long v35 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v35, OS_LOG_TYPE_DEBUG, "Asset Type identified as pre-E5ML OWL", (uint8_t *)&v43, 2u);
      }
      if (std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0))
      {
        operator new();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::string::basic_string[abi:ne180100]<0>(&v43, "Could not find v1 espresso assets or E5-ML espresso assets for OWL.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v43);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
LABEL_45:
  int v20 = 0;
  goto LABEL_46;
}

void sub_1C8EDE27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&a23);
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EDE3F0()
{
}

void sub_1C8EDE3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1C8EDE3E4);
  }
  JUMPOUT(0x1C8EDE3E8);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getConfigVocabSize(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v12, "vocab_size");
  uint64_t v2 = (void *)((char *)this + 40);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v2, (unsigned __int8 *)v12))
  {
    uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v2, (unsigned __int8 *)v12);
    if (!v3) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v3 + 16) != 1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v4 = *((unsigned int *)v3 + 10);
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::to_string(&v14, v4);
  uint64_t v5 = std::string::insert(&v14, 0, "Vocab size to pre-allocate: ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v11 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  int v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v8 = __p;
    if (v11 < 0) {
      unsigned int v8 = (void **)__p[0];
    }
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v14, 0xCu);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v4;
}

void sub_1C8EDE590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return *(void *)(*((void *)this + 10) + 112);
  }
  uint64_t v3 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "[PAD]");
  int v4 = (*(uint64_t (**)(void))(**(void **)v3 + 504))();
  if (v7 < 0) {
    operator delete(__p);
  }
  return v4;
}

void sub_1C8EDE6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return (*(int (**)(void))(***((void ***)this + 2) + 560))(**((void **)this + 2));
  }
  else {
    return *(void *)(*((void *)this + 10) + 96);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (BOOL result = *v5; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::numericalizeWholeWordToken(uint64_t a1, uint64_t a2)
{
  return nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*(void *)(a1 + 80), a2);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordTokens(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    memset(v6, 0, sizeof(v6));
    nl_sentencepiece::SentencepieceModel::encodeUtterance(a3, **(void **)(a1 + 16), a2);
    unint64_t v7 = (void **)v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1C8EDE8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordID(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = **(void **)(a1 + 16);
  uint64_t v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 504))(v2, a2, v4);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordIDs(uint64_t a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    unint64_t v7 = *a2;
    unsigned int v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        int v9 = *((char *)v7 + 23);
        if (v9 >= 0) {
          char v10 = v7;
        }
        else {
          char v10 = (uint64_t *)*v7;
        }
        if (v9 >= 0) {
          uint64_t v11 = *((unsigned __int8 *)v7 + 23);
        }
        else {
          uint64_t v11 = v7[1];
        }
        int v12 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(***(void ***)(a1 + 16) + 504))(**(void **)(a1 + 16), v10, v11);
        int v13 = v12;
        uint64_t v15 = a3[1];
        unint64_t v14 = (unint64_t)a3[2];
        if ((unint64_t)v15 >= v14)
        {
          long long v17 = *a3;
          uint64_t v18 = (v15 - *a3) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v14 - (void)v17;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v21);
            long long v17 = *a3;
            uint64_t v15 = a3[1];
          }
          else
          {
            long long v22 = 0;
          }
          unsigned int v23 = &v22[4 * v18];
          *(_DWORD *)unsigned int v23 = v13;
          unsigned int v16 = v23 + 4;
          while (v15 != v17)
          {
            int v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *a3 = v23;
          a3[1] = v16;
          a3[2] = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v15 = v12;
          unsigned int v16 = v15 + 4;
        }
        a3[1] = v16;
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
}

void sub_1C8EDEAC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v1 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "max_seq_length");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v1 + 8))(v1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C8EDEB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::tryEnableSentenceFeatures(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::tryEnableSubwordFeatures(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 56))();
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 64))();
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "▁");
  std::vector<int>::size_type v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(a3, v6, &__x);
  unsigned int v8 = *a2;
  unint64_t v7 = a2[1];
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    int v10 = -1;
    do
    {
      int v11 = (char)v8[23];
      if (v11 >= 0) {
        int v12 = v8;
      }
      else {
        int v12 = *(unsigned __int8 **)v8;
      }
      if (v11 >= 0) {
        uint64_t v13 = v8[23];
      }
      else {
        uint64_t v13 = *((void *)v8 + 1);
      }
      int v14 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(***(void ***)(a1 + 16) + 504))(**(void **)(a1 + 16), v12, v13);
      if ((char)v8[23] < 0)
      {
        unsigned int v16 = *(unsigned __int8 **)v8;
        unint64_t v15 = *((void *)v8 + 1);
      }
      else
      {
        unint64_t v15 = v8[23];
        unsigned int v16 = v8;
      }
      unint64_t v17 = v30;
      uint64_t v18 = (void **)__p[0];
      if ((v30 & 0x80u) != 0) {
        unint64_t v17 = (unint64_t)__p[1];
      }
      else {
        uint64_t v18 = __p;
      }
      if (v15 >= v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = v15;
      }
      uint64_t v20 = &v16[v19];
      if (v17) {
        BOOL v21 = v19 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        int v24 = &v16[v19];
      }
      else
      {
        unsigned int v23 = v16;
        int v24 = &v16[v19];
        do
        {
          if (*v23 == *(unsigned __int8 *)v18)
          {
            uint64_t v25 = 1;
            while (v17 != v25)
            {
              if (&v23[v25] == v20) {
                goto LABEL_24;
              }
              int v26 = v23[v25];
              int v27 = *((unsigned __int8 *)v18 + v25++);
              if (v26 != v27) {
                goto LABEL_36;
              }
            }
            int v24 = v23;
          }
LABEL_36:
          ++v23;
        }
        while (v23 != v20);
      }
LABEL_24:
      BOOL v22 = v24 != v20 || v17 == 0;
      if (v22 && v24 == v16 || v14 < *(_DWORD *)(*(void *)(a1 + 16) + 8) && *(void *)(a1 + 32) != v14) {
        ++v10;
      }
      a3->__begin_[v9++] = v10;
      v8 += 24;
    }
    while (v8 != v7);
  }
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8EDEE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordFeaturePoolingMask2D(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8))) {
    unint64_t MaxNumTokens = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  else {
    unint64_t MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(a1, (unsigned __int8 **)a2, &v26);
  int v23 = 0;
  std::vector<float>::vector(&__p, MaxNumTokens, &v23);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v27 = a3;
  char v28 = 0;
  if (MaxNumTokens)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](a3, MaxNumTokens);
    unint64_t v7 = (void *)a3[1];
    unsigned int v8 = &v7[3 * MaxNumTokens];
    uint64_t v9 = 24 * MaxNumTokens;
    do
    {
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v7, __p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 2);
      v7 += 3;
      v9 -= 24;
    }
    while (v9);
    a3[1] = v8;
  }
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  if (MaxNumTokens)
  {
    for (uint64_t i = 0; i != MaxNumTokens; ++i)
    {
      std::vector<int>::pointer begin = v26.__begin_;
      uint64_t v12 = *a3;
      if (v26.__end_ != v26.__begin_)
      {
        uint64_t v13 = 0;
        unint64_t v14 = v26.__end_ - v26.__begin_;
        unint64_t v15 = (void *)(v12 + 24 * i);
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          if (i == begin[v13]) {
            *(_DWORD *)(*v15 + 4 * v13) = 1065353216;
          }
          ++v13;
        }
        while (v14 != v13);
        uint64_t v12 = *a3;
      }
      unsigned int v16 = (float **)(v12 + 24 * i);
      unint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      float v19 = 0.0;
      while (v17 != v18)
      {
        float v20 = *v17++;
        float v19 = v19 + v20;
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8))
        && fabsf(v19) > *(float *)(a1 + 88))
      {
        BOOL v21 = *(float **)(*a3 + 24 * i);
        unint64_t v22 = MaxNumTokens;
        do
        {
          *BOOL v21 = *v21 / v19;
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
  }
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_1C8EDF0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateUnpaddedE5MLBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<int>::size_type v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  unsigned int v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Unpadded E5ML Input", "", (uint8_t *)&buf, 2u);
    }
  }
  int v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Unpadded E5ML Input\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v11 = *((void *)this + 1);
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Unpadded input not compatible with available owl asset!");
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (!*((unsigned char *)a2 + 160))
  {
    uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid subword ids provided!");
    std::runtime_error::runtime_error(v48, &buf);
    v48->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v12 = *((void *)a2 + 18) - *((void *)a2 + 17);
  uint64_t v13 = v12 >> 2;
  unint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<float>::reserve((void **)&v71, v12 >> 2);
  uint64_t v14 = *((void *)a2 + 17);
  if (*((void *)a2 + 18) != v14)
  {
    unint64_t v15 = 0;
    unsigned int v16 = v72;
    do
    {
      float v17 = (float)*(int *)(v14 + 4 * v15);
      if (v16 >= v73)
      {
        float v19 = v71;
        uint64_t v20 = v16 - v71;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = (char *)v73 - (char *)v71;
        if (((char *)v73 - (char *)v71) >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73, v23);
          float v19 = v71;
          unsigned int v16 = v72;
        }
        else
        {
          int v24 = 0;
        }
        uint64_t v25 = (float *)&v24[4 * v20];
        *uint64_t v25 = v17;
        uint64_t v18 = v25 + 1;
        while (v16 != v19)
        {
          int v26 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v25-- - 1) = v26;
        }
        unint64_t v71 = v25;
        uint64_t v72 = v18;
        uint64_t v73 = (float *)&v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unsigned int v16 = v17;
        uint64_t v18 = v16 + 1;
      }
      uint64_t v72 = v18;
      ++v15;
      uint64_t v14 = *((void *)a2 + 17);
      unsigned int v16 = v18;
    }
    while (v15 < (*((void *)a2 + 18) - v14) >> 2);
  }
  if (!*((unsigned char *)a2 + 128))
  {
    uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid subwordFeaturePoolingMask2D provided!, E5ML fast_reshape compatible assets require 2D feature pooling mask.");
    std::runtime_error::runtime_error(v49, &buf);
    v49->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v68, *((void *)a2 + 13), *((void *)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3));
  std::vector<float>::vector(&v66, v13 * v13);
  uint64_t v27 = v68;
  if (v69 != v68)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = (v69 - v68) / 24;
    std::string::size_type v31 = v66;
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    do
    {
      std::string::size_type v32 = *(int **)(v27 + 24 * v28);
      uint64_t v33 = *(void *)(v27 + 24 * v28 + 8) - (void)v32;
      if (v33)
      {
        unint64_t v34 = v33 >> 2;
        if (v34 <= 1) {
          unint64_t v34 = 1;
        }
        do
        {
          int v35 = *v32++;
          v31[v29++] = v35;
          --v34;
        }
        while (v34);
      }
      ++v28;
    }
    while (v28 != v30);
  }
  if ((unint64_t)v12 < 8)
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "expectedSeqLen should be at least 2!");
    std::runtime_error::runtime_error(v50, &buf);
    v50->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::vector(&v64, v12 >> 2, &buf);
  LODWORD(buf.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v62, v12 >> 2, &buf);
  std::__fs::filesystem::directory_iterator v36 = v62;
  uint64_t v37 = v63 - (unsigned char *)v62;
  if (v63 == v62 || (*(_DWORD *)long long v62 = 0, v13 - 1 >= (unint64_t)(v37 >> 2))) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  v36[v13 - 1] = 0;
  std::string v38 = operator new(0x10uLL);
  void *v38 = 1;
  v38[1] = v13;
  uint64_t v39 = operator new(0x18uLL);
  void *v39 = 1;
  v39[1] = v13;
  v39[2] = v13;
  std::__fs::filesystem::path v40 = operator new(0x10uLL);
  *std::__fs::filesystem::path v40 = 1;
  v40[1] = v13;
  std::__fs::filesystem::path v41 = operator new(0x10uLL);
  void *v41 = 1;
  v41[1] = v13;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a3, v38, (uint64_t)(v38 + 2), 2uLL);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a3 + 24), v71, (uint64_t)v72, v72 - v71);
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  memset(&buf, 0, sizeof(buf));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&buf, v39, (uint64_t)(v39 + 3), 3uLL);
  v60[0] = 0;
  v60[1] = 0;
  uint64_t v61 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v60, v66, (uint64_t)v67, (v67 - (unsigned char *)v66) >> 2);
  *(std::string *)(a3 + 160) = buf;
  memset(&buf, 0, sizeof(buf));
  *(_OWORD *)(a3 + 184) = *(_OWORD *)v60;
  *(void *)(a3 + 200) = v61;
  v60[1] = 0;
  uint64_t v61 = 0;
  v60[0] = 0;
  *(unsigned char *)(a3 + 208) = 1;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v56 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v55, v40, (uint64_t)(v40 + 2), 2uLL);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v58 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v64, (uint64_t)v65, (v65 - (unsigned char *)v64) >> 2);
  *(_OWORD *)(a3 + 216) = *(_OWORD *)v55;
  *(void *)(a3 + 232) = v56;
  v55[1] = 0;
  uint64_t v56 = 0;
  v55[0] = 0;
  *(_OWORD *)(a3 + 240) = *(_OWORD *)__p;
  *(void *)(a3 + 256) = v58;
  __p[1] = 0;
  uint64_t v58 = 0;
  __p[0] = 0;
  *(unsigned char *)(a3 + 264) = 1;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v51, v41, (uint64_t)(v41 + 2), 2uLL);
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v53, v62, (uint64_t)v63, (v63 - (unsigned char *)v62) >> 2);
  *(_OWORD *)(a3 + 272) = v51;
  *(void *)(a3 + 288) = v52;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  *(_OWORD *)(a3 + 296) = v53;
  *(void *)(a3 + 312) = v54;
  uint64_t v54 = 0;
  long long v53 = 0uLL;
  *(unsigned char *)(a3 + 320) = 1;
  int64_t v42 = operator new(8uLL);
  *int64_t v42 = 1;
  std::string v43 = (float *)operator new(4uLL);
  *std::string v43 = (float)(unint64_t)v13;
  *(void *)(a3 + 328) = v42;
  *(void *)(a3 + 336) = v42 + 1;
  *(void *)(a3 + 344) = v42 + 1;
  *(void *)(a3 + 352) = v43;
  *(void *)(a3 + 360) = v43 + 1;
  *(void *)(a3 + 368) = v43 + 1;
  *(unsigned char *)(a3 + 376) = 1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  char v44 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v45 = v44;
    if (os_signpost_enabled(v44))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v45, OS_SIGNPOST_INTERVAL_END, v7, "OWL Generate Unpadded E5ML Input", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v46, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate Unpadded E5ML Input\"", (uint8_t *)&buf, 2u);
  }
  operator delete(v41);
  operator delete(v40);
  operator delete(v39);
  operator delete(v38);
  if (v62)
  {
    char v63 = v62;
    operator delete(v62);
  }
  if (v64)
  {
    long long v65 = v64;
    operator delete(v64);
  }
  if (v66)
  {
    std::string::value_type v67 = v66;
    operator delete(v66);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_1C8EDF9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      std::__fs::filesystem::path v40 = *(void **)(v38 - 176);
      if (v40)
      {
        *(void *)(v38 - 168) = v40;
        operator delete(v40);
      }
      std::string __p = (void *)(v38 - 152);
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__fs::filesystem::path v41 = *(void **)(v38 - 128);
      if (v41)
      {
        *(void *)(v38 - 120) = v41;
        operator delete(v41);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::size_type v6 = result;
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C8EDFC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C8EDFD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        char v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedSubowlBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  unsigned int v8 = SNLPOSLoggerForCategory(7);
  unint64_t v9 = v7 - 1;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v10 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Padded E5ML Input", "", (uint8_t *)buf, 2u);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Padded E5ML Input\"", (uint8_t *)buf, 2u);
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12 || (*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Bert Module for static E5ML/EspressoV1 Subowl assets!");
    std::runtime_error::runtime_error(exception, buf);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (((*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1)) & 1) == 0)
  {
    uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Bert Module for static E5ML/EspressoV1 Subowl assets!");
    std::runtime_error::runtime_error(v52, buf);
    v52->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(this);
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  uint64_t v72 = 0;
  if (!*((unsigned char *)a2 + 160)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  unint64_t v14 = MaxNumTokens;
  std::string::value_type v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, *((const void **)a2 + 17), *((void *)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2);
  std::vector<float>::reserve((void **)&v70, v68 - v67);
  os_signpost_id_t spid = v7;
  unint64_t v15 = v67;
  if (v68 == v67)
  {
    float v19 = v71;
  }
  else
  {
    unint64_t v16 = 0;
    float v17 = v71;
    do
    {
      float v18 = (float)v15[v16];
      if (v17 >= v72)
      {
        uint64_t v20 = v70;
        uint64_t v21 = v17 - v70;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = (char *)v72 - (char *)v70;
        if (((char *)v72 - (char *)v70) >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v72, v24);
          uint64_t v20 = v70;
          float v17 = v71;
        }
        else
        {
          uint64_t v25 = 0;
        }
        int v26 = (float *)&v25[4 * v21];
        *int v26 = v18;
        float v19 = v26 + 1;
        while (v17 != v20)
        {
          int v27 = *((_DWORD *)v17-- - 1);
          *((_DWORD *)v26-- - 1) = v27;
        }
        uint64_t v70 = v26;
        unint64_t v71 = v19;
        uint64_t v72 = (float *)&v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        float *v17 = v18;
        float v19 = v17 + 1;
      }
      unint64_t v71 = v19;
      ++v16;
      unint64_t v15 = v67;
      float v17 = v19;
    }
    while (v16 < v68 - v67);
  }
  LODWORD(buf[0].__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v65, v19 - v70, buf);
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  char v64 = 0;
  v62[0] = 0;
  v62[48] = 0;
  if (*((unsigned char *)a2 + 96))
  {
    long long v59 = 0;
    std::string::size_type v60 = 0;
    uint64_t v61 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
    int v58 = 0;
    std::vector<float>::vector(v54, v14, &v58);
    uint64_t v28 = *(void **)v54;
    uint64_t v29 = *(void *)&v54[8];
    unint64_t v30 = (int *)v59;
    if (v60 != v59)
    {
      unint64_t v31 = (v60 - (unsigned char *)v59) >> 2;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      std::string::size_type v32 = *(float **)v54;
      do
      {
        int v33 = *v30++;
        *v32++ = (float)v33;
        --v31;
      }
      while (v31);
    }
    unint64_t v34 = operator new(0x10uLL);
    *unint64_t v34 = 1;
    v34[1] = v14;
    memset(v54, 0, sizeof(v54));
    uint64_t v55 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v34, (uint64_t)(v34 + 2), 2uLL);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v57 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v28, v29, (v29 - (uint64_t)v28) >> 2);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)buf, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)v54)
    {
      *(void *)&v54[8] = *(void *)v54;
      operator delete(*(void **)v54);
    }
    operator delete(v34);
    if (v59)
    {
      std::string::size_type v60 = v59;
      operator delete(v59);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (*((unsigned char *)a2 + 128))
  {
    long long v59 = 0;
    std::string::size_type v60 = 0;
    uint64_t v61 = 0;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v59, *((void *)a2 + 13), *((void *)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3));
    std::vector<float>::vector(v54, v14 * v14);
    int v35 = *(_DWORD **)v54;
    uint64_t v36 = *(void *)&v54[8];
    int v37 = v59;
    if (v60 != v59)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = (v60 - (unsigned char *)v59) / 24;
      if (v40 <= 1) {
        unint64_t v40 = 1;
      }
      do
      {
        std::__fs::filesystem::path v41 = (int *)v37[3 * v38];
        uint64_t v42 = v37[3 * v38 + 1] - (void)v41;
        if (v42)
        {
          unint64_t v43 = v42 >> 2;
          if (v43 <= 1) {
            unint64_t v43 = 1;
          }
          do
          {
            int v44 = *v41++;
            v35[v39++] = v44;
            --v43;
          }
          while (v43);
        }
        ++v38;
      }
      while (v38 != v40);
    }
    long long v45 = operator new(0x18uLL);
    void *v45 = 1;
    v45[1] = v14;
    v45[2] = v14;
    memset(v54, 0, sizeof(v54));
    uint64_t v55 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v45, (uint64_t)(v45 + 3), 3uLL);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v57 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v35, v36, (v36 - (uint64_t)v35) >> 2);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v62, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)v54)
    {
      *(void *)&v54[8] = *(void *)v54;
      operator delete(*(void **)v54);
    }
    operator delete(v45);
    *(void *)uint64_t v54 = &v59;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  }
  else
  {
    int v35 = 0;
  }
  *(float *)uint64_t v54 = (float)*((unint64_t *)this + 3);
  std::vector<float>::resize((char **)&v70, v14, v54);
  *(_DWORD *)uint64_t v54 = 0;
  std::vector<float>::resize(&v65, v14, v54);
  uint64_t v46 = operator new(0x10uLL);
  *uint64_t v46 = 1;
  v46[1] = v14;
  std::string::size_type v47 = operator new(0x10uLL);
  *std::string::size_type v47 = 1;
  v47[1] = v14;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a3, v46, (uint64_t)(v46 + 2), 2uLL);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a3 + 24), v70, (uint64_t)v71, v71 - v70);
  memset(v54, 0, sizeof(v54));
  uint64_t v55 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v47, (uint64_t)(v47 + 2), 2uLL);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v57 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v65, (uint64_t)v66, (v66 - v65) >> 2);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v54;
  *(void *)(a3 + 64) = v55;
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  *(_OWORD *)(a3 + 72) = *(_OWORD *)__p;
  *(void *)(a3 + 88) = v57;
  __p[1] = 0;
  uint64_t v57 = 0;
  __p[0] = 0;
  *(unsigned char *)(a3 + 96) = 1;
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100](a3 + 104, (uint64_t)buf);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100](a3 + 160, (uint64_t)v62);
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 320) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 376) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)v54)
  {
    *(void *)&v54[8] = *(void *)v54;
    operator delete(*(void **)v54);
  }
  uint64_t v48 = SNLPOSLoggerForCategory(7);
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v49 = v48;
    if (os_signpost_enabled(v48))
    {
      *(_WORD *)uint64_t v54 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v49, OS_SIGNPOST_INTERVAL_END, spid, "OWL Generate padded E5ML Input", "", v54, 2u);
    }
  }
  uint64_t v50 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_1C8DA9000, v50, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate padded E5ML Input\"", v54, 2u);
  }
  operator delete(v47);
  operator delete(v46);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v62);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if (v35) {
    operator delete(v35);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    unint64_t v71 = v70;
    operator delete(v70);
  }
}

void sub_1C8EE060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  char v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 2)
    {
      unint64_t v24 = &v5[4 * (a2 - v7)];
      uint64_t v25 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)char v5 = *a3;
        v5 += 4;
        v25 -= 4;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v10 - v6;
      unint64_t v12 = (v10 - v6) >> 1;
      if (v12 <= a2) {
        unint64_t v12 = a2;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v13);
      unint64_t v16 = &v14[4 * v7];
      float v17 = &v14[4 * a2];
      uint64_t v18 = 4 * a2 - 4 * v7;
      float v19 = v16;
      do
      {
        *(_DWORD *)float v19 = *a3;
        v19 += 4;
        v18 -= 4;
      }
      while (v18);
      uint64_t v20 = &v14[4 * v15];
      uint64_t v21 = *a1;
      for (uint64_t i = a1[1]; i != v21; i -= 4)
      {
        int v23 = *((_DWORD *)i - 1);
        *((_DWORD *)v16 - 1) = v23;
        v16 -= 4;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedWholeowlEspressoV1BertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  unsigned int v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Padded WholeOwl espressoV1 Input", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Padded WholeOwl espressoV1 Input\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v11 = *((void *)a1 + 1);
  if (!v11 || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 24))(v11))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid Bert Module for EspressoV1 WholeOwl assets!");
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if ((*(unsigned int (**)(void))(**((void **)a1 + 1) + 16))(*((void *)a1 + 1)))
  {
    std::string::size_type v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid Bert Module for EspressoV1 WholeOwl assets!");
    std::runtime_error::runtime_error(v32, &buf);
    v32->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(a1);
  std::string __p = 0;
  unint64_t v40 = 0;
  std::__fs::filesystem::path v41 = 0;
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v38 = 0;
  std::vector<float>::reserve(&__p, MaxNumTokens);
  uint64_t v13 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) == v13)
  {
    float v17 = v40;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = (float *)v40;
    do
    {
      float v16 = (float)*(unint64_t *)(v13 + 112 * v14 + 24);
      if (v15 >= v41)
      {
        uint64_t v18 = (float *)__p;
        uint64_t v19 = ((char *)v15 - (unsigned char *)__p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)v41 - (unsigned char *)__p;
        if (((char *)v41 - (unsigned char *)__p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v22);
          uint64_t v18 = (float *)__p;
          uint64_t v15 = (float *)v40;
        }
        else
        {
          int v23 = 0;
        }
        unint64_t v24 = (float *)&v23[4 * v19];
        *unint64_t v24 = v16;
        float v17 = v24 + 1;
        while (v15 != v18)
        {
          int v25 = *((_DWORD *)v15-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        std::string __p = v24;
        unint64_t v40 = v17;
        std::__fs::filesystem::path v41 = (float *)&v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v15 = v16;
        float v17 = v15 + 1;
      }
      unint64_t v40 = v17;
      ++v14;
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v15 = (float *)v17;
    }
    while (v14 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a2 + 56) - v13) >> 4));
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::resize((char **)&v36, ((unsigned char *)v17 - (unsigned char *)__p) >> 2, &buf);
  *(float *)&buf.__r_.__value_.__l.__data_ = (float)*((unint64_t *)a1 + 3);
  std::vector<float>::resize((char **)&__p, MaxNumTokens, &buf);
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((char **)&v36, MaxNumTokens, &buf);
  int v26 = operator new(0x10uLL);
  *int v26 = 1;
  v26[1] = MaxNumTokens;
  int v27 = operator new(0x10uLL);
  *int v27 = 1;
  v27[1] = MaxNumTokens;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a3, v26, (uint64_t)(v26 + 2), 2uLL);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a3 + 24), __p, (uint64_t)v40, ((unsigned char *)v40 - (unsigned char *)__p) >> 2);
  memset(&buf, 0, sizeof(buf));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&buf, v27, (uint64_t)(v27 + 2), 2uLL);
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v34, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 2);
  *(std::string *)(a3 + 48) = buf;
  *(_OWORD *)(a3 + 72) = v34;
  *(void *)(a3 + 88) = v35;
  *(unsigned char *)(a3 + 96) = 1;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(unsigned char *)(a3 + 208) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 320) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 376) = 0;
  uint64_t v28 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v29 = v28;
    if (os_signpost_enabled(v28))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v29, OS_SIGNPOST_INTERVAL_END, v7, "OWL Generate Padded WholeOwl espressoV1 Input", "", (uint8_t *)&buf, 2u);
    }
  }
  unint64_t v30 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate Padded WholeOwl espressoV1 Input\"", (uint8_t *)&buf, 2u);
  }
  operator delete(v27);
  operator delete(v26);
  if (v36)
  {
    int v37 = v36;
    operator delete(v36);
  }
  if (__p)
  {
    unint64_t v40 = __p;
    operator delete(__p);
  }
}

void sub_1C8EE0EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1)))
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateUnpaddedE5MLBertInput(this, a2, a3);
  }
  else if ((*(unsigned int (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1)))
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedSubowlBertInput(this, a2, a3);
  }
  else
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedWholeowlEspressoV1BertInput(this, (uint64_t)a2, a3);
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forwardAggregatedBySentence(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  os_signpost_id_t v7 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v8 = os_signpost_id_generate(v7);
  uint64_t v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "OWL Input Preprocess Aggregated", "", buf, 2u);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Input Preprocess Aggregated\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(this, a2, (uint64_t)buf);
  unint64_t v12 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)int v95 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v13, OS_SIGNPOST_INTERVAL_END, v8, "OWL Input Preprocess Aggregated", "", v95, 2u);
    }
  }
  unint64_t v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v95 = 0;
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEFAULT, "END \"OWL Input Preprocess Aggregated\"", v95, 2u);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v72.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  float v16 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v17 = os_signpost_id_generate(v16);
  uint64_t v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)int v95 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "OWL Model Forward Aggregated", "", v95, 2u);
    }
  }
  unint64_t v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v95 = 0;
    _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Model Forward Aggregated\"", v95, 2u);
  }
  (***((void (****)(uint8_t *__return_ptr))this + 1))(v95);
  uint64_t v21 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v22 = v21;
    if (os_signpost_enabled(v21))
    {
      *(_WORD *)size_t v89 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v22, OS_SIGNPOST_INTERVAL_END, v17, "OWL Model Forward Aggregated", "", v89, 2u);
    }
  }
  restd::string p = v6.__d_.__rep_;
  unint64_t v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v89 = 0;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEFAULT, "END \"OWL Model Forward Aggregated\"", v89, 2u);
  }
  v71.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v25 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v26 = os_signpost_id_generate(v25);
  int v27 = SNLPOSLoggerForCategory(7);
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v28 = v27;
    if (os_signpost_enabled(v27))
    {
      *(_WORD *)size_t v89 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v28, OS_SIGNPOST_INTERVAL_BEGIN, v26, "OWL Output PostProcess Aggregated", "", v89, 2u);
    }
  }
  uint64_t v29 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v89 = 0;
    _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Output PostProcess Aggregated\"", v89, 2u);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)size_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  memset(&v94, 0, sizeof(v94));
  unint64_t v30 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 8))(*((void *)this + 1), (char *)this + 264);
  uint64_t v32 = *((void *)a2 + 6);
  uint64_t v31 = *((void *)a2 + 7);
  unint64_t v33 = 0x6DB6DB6DB6DB6DB7 * ((v31 - v32) >> 4);
  v87 = 0;
  uint64_t v88 = 0;
  uint64_t v86 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v86, v97, (uint64_t)v97 + 4 * v33 * v30, v33 * v30);
  LODWORD(v82) = 0;
  std::vector<float>::vector(&__p, v30, &v82);
  long long v34 = (char *)__p;
  if (v31 != v32)
  {
    uint64_t v35 = 0;
    uint64_t v36 = (float *)v86;
    if (v33 <= 1) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((v31 - v32) >> 4);
    }
    do
    {
      uint64_t v38 = v36;
      uint64_t v39 = (float *)v34;
      for (unint64_t i = v30; i; --i)
      {
        float v41 = *v38++;
        float *v39 = v41 + *v39;
        ++v39;
      }
      ++v35;
      v36 += v30;
    }
    while (v35 != v37);
    long long v34 = (char *)__p;
  }
  if (v30)
  {
    uint64_t v42 = (float *)v34;
    do
    {
      *uint64_t v42 = *v42 / (float)v33;
      ++v42;
      --v30;
    }
    while (v30);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v89, v34, (uint64_t)v85, (v85 - v34) >> 2);
  *(void *)&long long v92 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
  uint64_t v43 = *(void *)(*(void *)v95 + 16);
  *((void *)&v92 + 1) = 1;
  uint64_t v93 = v43;
  if (v89 != (uint8_t *)a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a3, *(char **)v89, (uint64_t)v90, (uint64_t)&v90[-*(void *)v89] >> 2);
  }
  *(_OWORD *)(a3 + 24) = v92;
  *(void *)(a3 + 40) = v93;
  std::string::operator=((std::string *)(a3 + 48), &v94);
  int v44 = SNLPOSLoggerForCategory(7);
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v45 = v44;
    if (os_signpost_enabled(v44))
    {
      LOWORD(v82) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v45, OS_SIGNPOST_INTERVAL_END, v26, "OWL Output PostProcess Aggregated", "", (uint8_t *)&v82, 2u);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v82) = 0;
    _os_log_impl(&dword_1C8DA9000, v46, OS_LOG_TYPE_DEFAULT, "END \"OWL Output PostProcess Aggregated\"", (uint8_t *)&v82, 2u);
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::to_string(&v75, (v15.__d_.__rep_ - rep) / 1000000);
  uint64_t v48 = std::string::insert(&v75, 0, "\nBERT:\n      pre-process ");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  uint64_t v50 = std::string::append(&v76, "ms\n");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  uint64_t v52 = std::string::append(&v77, "      forward: ");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v74, (v71.__d_.__rep_ - v72.__d_.__rep_) / 1000000);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v54 = &v74;
  }
  else {
    uint64_t v54 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v74.__r_.__value_.__l.__size_;
  }
  uint64_t v56 = std::string::append(&v78, (const std::string::value_type *)v54, size);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  int v58 = std::string::append(&v79, " ms\n");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v60 = std::string::append(&v80, "      aggregate & post-process: ");
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v73, (v47.__d_.__rep_ - v70.__d_.__rep_) / 1000000);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v62 = &v73;
  }
  else {
    long long v62 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = v73.__r_.__value_.__l.__size_;
  }
  char v64 = std::string::append(&v81, (const std::string::value_type *)v62, v63);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  uint64_t v66 = std::string::append(&v111, " ms\n");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  int64_t v83 = v66->__r_.__value_.__r.__words[2];
  long long v82 = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  uint64_t v68 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v69 = &v82;
    if (v83 < 0) {
      uint64_t v69 = (long long *)v82;
    }
    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
    _os_log_impl(&dword_1C8DA9000, v68, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v111, 0xCu);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
  if (__p)
  {
    uint64_t v85 = __p;
    operator delete(__p);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (*(void *)v89)
  {
    uint64_t v90 = *(char **)v89;
    operator delete(*(void **)v89);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v100);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v99);
  if (v97)
  {
    size_t v98 = v97;
    operator delete(v97);
  }
  if (*(void *)v95)
  {
    uint64_t v96 = *(void *)v95;
    operator delete(*(void **)v95);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v110);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v109);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v107);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v106);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v105);
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (*(void *)buf)
  {
    int v102 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C8EE1A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (*(char *)(v77 - 105) < 0) {
    operator delete(*(void **)(v77 - 128));
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a73) {
    operator delete(a73);
  }
  if (a74) {
    operator delete(a74);
  }
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a75);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(v76);
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType((nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *)&a76);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::chrono::steady_clock::time_point v6 = result;
    BOOL result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C8EE1C50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(void **this)
{
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 19));
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forward(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v8 = os_signpost_id_generate(v7);
  uint64_t v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "OWL Input Preprocess", "", buf, 2u);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Input Preprocess\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(this, a2, (uint64_t)buf);
  unint64_t v12 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)uint64_t v99 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v13, OS_SIGNPOST_INTERVAL_END, v8, "OWL Input Preprocess", "", v99, 2u);
    }
  }
  unint64_t v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v99 = 0;
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEFAULT, "END \"OWL Input Preprocess\"", v99, 2u);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  float v16 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v17 = os_signpost_id_generate(v16);
  uint64_t v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)uint64_t v99 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "OWL Model Forward", "", v99, 2u);
    }
  }
  unint64_t v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v99 = 0;
    _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Model Forward\"", v99, 2u);
  }
  (***((void (****)(uint8_t *__return_ptr))this + 1))(v99);
  uint64_t v21 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v22 = v21;
    if (os_signpost_enabled(v21))
    {
      *(_WORD *)uint64_t v93 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v22, OS_SIGNPOST_INTERVAL_END, v17, "OWL Model Forward", "", v93, 2u);
    }
  }
  int v23 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v93 = 0;
    _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEFAULT, "END \"OWL Model Forward\"", v93, 2u);
  }
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v24 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v25 = os_signpost_id_generate(v24);
  os_signpost_id_t v26 = SNLPOSLoggerForCategory(7);
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v27 = v26;
    if (os_signpost_enabled(v26))
    {
      *(_WORD *)uint64_t v93 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v27, OS_SIGNPOST_INTERVAL_BEGIN, v25, "OWL Output PostProcess", "", v93, 2u);
    }
  }
  uint64_t v28 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v93 = 0;
    _os_log_impl(&dword_1C8DA9000, v28, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Output PostProcess\"", v93, 2u);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)uint64_t v93 = 0;
  std::string v94 = 0;
  uint64_t v95 = 0;
  memset(&v98, 0, sizeof(v98));
  std::string::size_type v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  std::string v75 = 0;
  std::string v76 = 0;
  uint64_t v77 = 0;
  std::string v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a3 + 72);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a3 + 152);
  unint64_t v29 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 8))(*((void *)this + 1), (char *)this + 264);
  uint64_t v30 = ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4) * v29;
  std::string v73 = 0;
  uint64_t v74 = 0;
  std::chrono::steady_clock::time_point v72 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v72, v101, (uint64_t)v101 - 0x4924924924924924 * v30, 0x6DB6DB6DB6DB6DB7 * v30);
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v93, (char *)v72, (uint64_t)v73, (v73 - (unsigned char *)v72) >> 2);
  *(void *)&long long v96 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
  if ((unint64_t)(v100 - *(void *)v99) >= 0x11)
  {
    uint64_t v97 = *(void *)(*(void *)v99 + 16);
    *((void *)&v96 + 1) = 1;
  }
  if (v93 != (uint8_t *)a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a3, *(char **)v93, (uint64_t)v94, (uint64_t)&v94[-*(void *)v93] >> 2);
  }
  *(_OWORD *)(a3 + 24) = v96;
  *(void *)(a3 + 40) = v97;
  std::string::operator=((std::string *)(a3 + 48), &v98);
  if (v105)
  {
    int64_t v71 = 0;
    long long __p = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v104, (uint64_t)v104 + 4 * v29, v29);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v84, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
    uint64_t v87 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
    if (!v105) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (v103[1] - v103[0] >= 9uLL) {
      uint64_t v89 = *(void *)(v103[0] + 8);
    }
    uint64_t v88 = 1;
    std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(a3 + 72, (uint64_t)&v84);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  if (v108 && *((unsigned char *)a2 + 160))
  {
    unint64_t v31 = ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2) * v29;
    int64_t v71 = 0;
    long long __p = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v107, (uint64_t)v107 + 4 * v31, v31);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v75, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
    if (!*((unsigned char *)a2 + 160) || (uint64_t v78 = (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2, !v108)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (v106[1] - v106[0] >= 0x11uLL) {
      uint64_t v80 = *(void *)(v106[0] + 16);
    }
    uint64_t v79 = 1;
    std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(a3 + 152, (uint64_t)&v75);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  uint64_t v32 = SNLPOSLoggerForCategory(7);
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v33 = v32;
    if (os_signpost_enabled(v32))
    {
      LOWORD(__p) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v33, OS_SIGNPOST_INTERVAL_END, v25, "OWL Output PostProcess", "", (uint8_t *)&__p, 2u);
    }
  }
  long long v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_DEFAULT, "END \"OWL Output PostProcess\"", (uint8_t *)&__p, 2u);
  }
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::to_string(&v63, (v15.__d_.__rep_ - v6.__d_.__rep_) / 1000000);
  uint64_t v36 = std::string::insert(&v63, 0, "\nBERT:\n      pre-process ");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v64, "ms\n");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  unint64_t v40 = std::string::append(&v65, "      forward: ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v62, (v59.__d_.__rep_ - v60.__d_.__rep_) / 1000000);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v42 = &v62;
  }
  else {
    uint64_t v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v62.__r_.__value_.__l.__size_;
  }
  int v44 = std::string::append(&v66, (const std::string::value_type *)v42, size);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  uint64_t v46 = std::string::append(&v67, " ms\n");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  uint64_t v48 = std::string::append(&v68, "      post-process: ");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v61, (v35.__d_.__rep_ - v58.__d_.__rep_) / 1000000);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v50 = &v61;
  }
  else {
    uint64_t v50 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v51 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v51 = v61.__r_.__value_.__l.__size_;
  }
  uint64_t v52 = std::string::append(&v69, (const std::string::value_type *)v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  uint64_t v54 = std::string::append(&v119, " ms\n");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  int64_t v71 = v54->__r_.__value_.__r.__words[2];
  long long __p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    p_std::string p = &__p;
    if (v71 < 0) {
      p_std::string p = (long long *)__p;
    }
    LODWORD(v119.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1C8DA9000, v56, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v119, 0xCu);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)__p);
  }
  if (v72)
  {
    std::string v73 = v72;
    operator delete(v72);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(v81);
  }
  if (v75)
  {
    std::string v76 = v75;
    operator delete(v75);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(v90);
  }
  if (v84)
  {
    uint64_t v85 = v84;
    operator delete(v84);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (*(void *)v93)
  {
    std::string v94 = *(char **)v93;
    operator delete(*(void **)v93);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v106);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v103);
  if (v101)
  {
    int v102 = v101;
    operator delete(v101);
  }
  if (*(void *)v99)
  {
    uint64_t v100 = *(void *)v99;
    operator delete(*(void **)v99);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v118);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v117);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v116);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v115);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v114);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v113);
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (*(void *)buf)
  {
    uint64_t v110 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C8EE2814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a53);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a62);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a71);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(v71);
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType((nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *)&STACK[0x240]);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

uint64_t std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (a1 != a2) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    std::chrono::steady_clock::time_point v6 = (std::string *)(a1 + 48);
    if (*(char *)(a2 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 48);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_1C8EE2A5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::decodeSubwordPieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)v3 + 152))(&v4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v4);
}

void sub_1C8EE2AE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::buildModel(std::__fs::filesystem::path *this@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV2Model(this, &v8);
  if (v8)
  {
    *a2 = v8;
  }
  else
  {
    uint64_t v4 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = SLODWORD(this[2].__pn_.__r_.__value_.__r.__words[2]);
      if (v5 >= 8)
      {
        long long v7 = SNLPOSLoggerForCategory(4);
        std::chrono::steady_clock::time_point v6 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v10 = "<UNDEFINED_COMPONENT>";
          __int16 v11 = 2048;
          uint64_t v12 = v5;
          _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        std::chrono::steady_clock::time_point v6 = off_1E65808C8[v5];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[%s] Could not find the relevant E5-ML (v2) assets. Falling back onto Espresso v1 assets.", buf, 0xCu);
    }
    itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV1Model(this, a2);
  }
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV2Model(std::__fs::filesystem::path *this@<X0>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v3 = this + 4;
  std::__fs::filesystem::operator/[abi:ne180100](&v6.__pn_, (uint64_t)this, this + 4);
  std::__fs::filesystem::__status(&v6, 0);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
  }
  if (v5.__r_.__value_.__s.__data_[0] && v5.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v5 = __p;
    }
    operator new();
  }
}

void sub_1C8EE2FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  unint64_t v31 = *(void ***)(v29 + 8);
  *(void *)(v29 + 8) = 0;
  if (v31) {
    std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](v31);
  }
  MEMORY[0x1CB775C40](v29, 0x10B3C401575683FLL);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  void *v28 = 0;
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV1Model(std::__fs::filesystem::path *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v3 = this + 3;
  std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)this, this + 3);
  std::__fs::filesystem::__status(&v9, 0);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v9.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      v9.__pn_ = __p;
    }
    operator new();
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)this, this + 5);
  std::__fs::filesystem::__status(&v9, 0);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, this + 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v9.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      v9.__pn_ = __p;
    }
    operator new();
  }
  uint64_t v4 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v5 = SLODWORD(this[2].__pn_.__r_.__value_.__r.__words[2]);
    if (v5 >= 8)
    {
      uint64_t v7 = SNLPOSLoggerForCategory(4);
      std::__fs::filesystem::path v6 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v9.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
        WORD2(v9.__pn_.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v9.__pn_.__r_.__value_.__r.__words[1] + 6) = v5;
        _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v9, 0x16u);
      }
    }
    else
    {
      std::__fs::filesystem::path v6 = off_1E65808C8[v5];
    }
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v9.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_ERROR, "[%s] Unable to initialize the ITFM model using Espresso v1", (uint8_t *)&v9, 0xCu);
  }
}

void sub_1C8EE3880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *uint64_t v21 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::filterMatchingSpans@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v56 = 0u;
  long long v57 = 0u;
  v58[0] = 1065353216;
  std::string::size_type v5 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  if (*(void **)a2 == v4)
  {
    memset(v54, 0, sizeof(v54));
    int v55 = 1065353216;
    goto LABEL_35;
  }
  do
  {
    uint64_t v6 = v5[5];
    if (!v6
      || !*(void *)(v6 + 40)
      || !nlv4_inference_orchestrator::span_matching::hasProbability((uint64_t)v5, (int *)(a1 + 8)))
    {
      goto LABEL_30;
    }
    double v7 = *(double *)(*(void *)(**(void **)(v5[8] + 56) + 24) + 8);
    uint64_t v8 = (long long *)v5[6];
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      *(void *)&uint8_t v54[16] = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v54 = v9;
    }
    unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v57 + 8, (uint64_t)v54);
    unint64_t v11 = *((void *)&v56 + 1);
    if (!*((void *)&v56 + 1)
      || ((unint64_t v12 = v10,
           uint8x8_t v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v56 + 8)),
           v13.i16[0] = vaddlv_u8(v13),
           unint64_t v14 = v13.u32[0],
           v13.u32[0] > 1uLL)
        ? (v10 >= *((void *)&v56 + 1)
         ? (unint64_t v15 = v10 % *((void *)&v56 + 1))
         : (unint64_t v15 = v10))
        : (unint64_t v15 = (*((void *)&v56 + 1) - 1) & v10),
          (float v16 = *(unsigned __int8 ***)(v56 + 8 * v15)) == 0 || (v17 = *v16) == 0))
    {
LABEL_27:
      *(void *)std::string buf = v54;
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&v56, v54, (long long **)buf)+ 5) = v7;
      goto LABEL_28;
    }
    while (1)
    {
      unint64_t v18 = *((void *)v17 + 1);
      if (v18 == v12) {
        break;
      }
      if (v14 > 1)
      {
        if (v18 >= v11) {
          v18 %= v11;
        }
      }
      else
      {
        v18 &= v11 - 1;
      }
      if (v18 != v15) {
        goto LABEL_27;
      }
LABEL_24:
      os_signpost_id_t v17 = *(unsigned __int8 **)v17;
      if (!v17) {
        goto LABEL_27;
      }
    }
    if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v58, v17 + 16, v54) & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)std::string buf = v54;
    if (*((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&v56, v54, (long long **)buf)+ 5) < v7)goto LABEL_27; {
LABEL_28:
    }
    if ((v54[23] & 0x80000000) != 0) {
      operator delete(*(void **)v54);
    }
LABEL_30:
    v5 += 11;
  }
  while (v5 != v4);
  uint64_t v19 = (uint64_t *)v57;
  memset(v54, 0, sizeof(v54));
  int v55 = 1065353216;
  if ((void)v57)
  {
    do
    {
      double v20 = *(double *)(a1 + 16);
      double v21 = *((double *)v19 + 5);
      *(void *)std::string buf = v19 + 2;
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v54, (unsigned __int8 *)v19 + 16, (long long **)buf)+ 5) = v20 * v21;
      uint64_t v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
LABEL_35:
  uint64_t v24 = *(int *)(a1 + 8);
  int v23 = (int *)(a1 + 8);
  uint64_t v22 = v24;
  if (v24 >= 8)
  {
    os_signpost_id_t v26 = SNLPOSLoggerForCategory(4);
    os_signpost_id_t v25 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      __int16 v62 = 2048;
      uint64_t v63 = v22;
      _os_log_impl(&dword_1C8DA9000, v26, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    os_signpost_id_t v25 = off_1E65808C8[v22];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v27 = *(void **)a2;
  uint64_t v28 = *(void **)(a2 + 8);
  if (*(void **)a2 != v28)
  {
    while (2)
    {
      int hasProbability = nlv4_inference_orchestrator::span_matching::hasProbability((uint64_t)v27, v23);
      double v30 = 0.0;
      if (hasProbability) {
        double v30 = *(double *)(*(void *)(**(void **)(v27[8] + 56) + 24) + 8);
      }
      unint64_t v31 = (long long *)v27[6];
      if (*((char *)v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v31, *((void *)v31 + 1));
      }
      else
      {
        long long v32 = *v31;
        v59.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v32;
      }
      uint64_t v33 = v27[5];
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 40);
        BOOL v35 = v34 == 0;
        if (v34 && ((hasProbability ^ 1) & 1) == 0)
        {
          std::chrono::steady_clock::time_point v60 = &v59;
          BOOL v35 = v30 > *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v54, (unsigned __int8 *)&v59, (long long **)&v60)+ 5);
          goto LABEL_51;
        }
      }
      else
      {
        BOOL v35 = 1;
      }
      if (hasProbability)
      {
LABEL_51:
        uint64_t v36 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          long long v37 = __p;
          if (v53 < 0) {
            long long v37 = (void **)__p[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v38 = &v59;
          }
          else {
            uint64_t v38 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = v37;
          __int16 v62 = 2080;
          uint64_t v63 = (uint64_t)v38;
          __int16 v64 = 2048;
          double v65 = v30;
          __int16 v66 = 1024;
          BOOL v67 = v35;
          long long v39 = v36;
          unint64_t v40 = "[%s] Span %s [score %f] was kept?: %{BOOL}d";
          uint32_t v41 = 38;
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v42 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v43 = __p;
          if (v53 < 0) {
            uint64_t v43 = (void **)__p[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v44 = &v59;
          }
          else {
            int v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v43;
          __int16 v62 = 2080;
          uint64_t v63 = (uint64_t)v44;
          __int16 v64 = 1024;
          LODWORD(v65) = v35;
          long long v39 = v42;
          unint64_t v40 = "[%s] Span %s [no score] was kept?: %{BOOL}d";
          uint32_t v41 = 28;
LABEL_65:
          _os_log_impl(&dword_1C8DA9000, v39, OS_LOG_TYPE_DEBUG, v40, buf, v41);
        }
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if (!v35) {
          goto LABEL_71;
        }
      }
      else if (!v35)
      {
LABEL_71:
        v27 += 11;
        if (v27 == v28) {
          goto LABEL_72;
        }
        continue;
      }
      break;
    }
    std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v27);
    goto LABEL_71;
  }
LABEL_72:
  long long v45 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = __p;
    if (v53 < 0) {
      uint64_t v46 = (void **)__p[0];
    }
    uint64_t v47 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    uint64_t v48 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v46;
    __int16 v62 = 2048;
    uint64_t v63 = v47;
    __int16 v64 = 2048;
    double v65 = *(double *)&v48;
    _os_log_impl(&dword_1C8DA9000, v45, OS_LOG_TYPE_DEBUG, "[%s] Span filtering: %lu out of %lu spans kept", buf, 0x20u);
  }
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v54);
  return std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&v56);
}

void sub_1C8EE3F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::hasProbability(uint64_t a1, int *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (v3 >= 8)
  {
    std::string::size_type v5 = SNLPOSLoggerForCategory(4);
    uint64_t v4 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      __int16 v20 = 2048;
      uint64_t v21 = v3;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = off_1E65808C8[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(buf, v4);
  uint64_t v6 = *(void *)(a1 + 64);
  if (!v6)
  {
    long long v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v12 = buf;
      if (v22 < 0) {
        unint64_t v12 = *(unsigned char **)buf;
      }
      int v17 = 136315138;
      unint64_t v18 = v12;
      unint64_t v11 = "[%s] [WARN] MatchingSpan has no USO graph";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(v6 + 56);
  if (v7 == *(void *)(v6 + 64))
  {
    long long v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint8x8_t v13 = buf;
      if (v22 < 0) {
        uint8x8_t v13 = *(unsigned char **)buf;
      }
      int v17 = 136315138;
      unint64_t v18 = v13;
      unint64_t v11 = "[%s] [WARN] MatchingSpan has USO graph with no identifiers";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(*(void *)v7 + 24);
  if (!v8)
  {
    long long v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v14 = buf;
      if (v22 < 0) {
        unint64_t v14 = *(unsigned char **)buf;
      }
      int v17 = 136315138;
      unint64_t v18 = v14;
      unint64_t v11 = "[%s] [WARN] probability missing from identifier";
      goto LABEL_25;
    }
LABEL_26:
    uint64_t v15 = 0;
    goto LABEL_27;
  }
  if ((*(unsigned char *)(v8 + 16) & 1) == 0)
  {
    long long v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v10 = buf;
      if (v22 < 0) {
        unint64_t v10 = *(unsigned char **)buf;
      }
      int v17 = 136315138;
      unint64_t v18 = v10;
      unint64_t v11 = "[%s] [WARN] probability has no value";
LABEL_25:
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v17, 0xCu);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  uint64_t v15 = 1;
LABEL_27:
  if (v22 < 0) {
    operator delete(*(void **)buf);
  }
  return v15;
}

char *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v7 = a1 + 3;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint8x8_t v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v14 + 16, a2))return v14; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  float v16 = (std::string *)(v14 + 16);
  int v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v14 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  uint64_t v19 = a1 + 2;
  *((void *)v14 + 5) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          os_signpost_id_t v26 = operator new(8 * *(void *)&prime);
          int v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v19;
          if (*v19)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = v19;
            BOOL v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *uint64_t v29 = *v35;
                  *BOOL v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  BOOL v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                BOOL v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint32_t v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v3);
  if (v38)
  {
    *(void *)unint64_t v14 = *v38;
LABEL_75:
    void *v38 = v14;
    goto LABEL_76;
  }
  *(void *)unint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v37 + 8 * v3) = v19;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_1C8EE46BC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::~RelativeThresholdMatchingSpansFilter(nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter *this)
{
}

BOOL nlv4_inference_orchestrator::span_matching::isSiriVocabularySpan(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  return v1 && *(void *)(v1 + 40) != 0;
}

uint64_t nlv4_inference_orchestrator::span_matching::scoreOfSpan(uint64_t a1, int *a2)
{
  if (nlv4_inference_orchestrator::span_matching::hasProbability(a1, a2)) {
    return *(void *)(*(void *)(**(void **)(*(void *)(a1 + 64) + 56) + 24) + 8);
  }
  else {
    return 0;
  }
}

uint64_t nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::RelativeThresholdMatchingSpansFilter(uint64_t a1, int *a2, double a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F235ED38;
  *(_DWORD *)(a1 + 8) = *a2;
  *(double *)(a1 + 16) = a3;
  if (a3 < 0.0)
  {
    uint64_t v4 = *a2;
    if (v4 >= 8)
    {
      uint64_t v6 = SNLPOSLoggerForCategory(4);
      std::string::size_type v5 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v16 = 2048;
        uint64_t v17 = v4;
        _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      std::string::size_type v5 = off_1E65808C8[v4];
    }
    std::string::basic_string[abi:ne180100]<0>(buf, v5);
    uint64_t v7 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = buf;
      if (v18 < 0) {
        unint64_t v8 = *(unsigned char **)buf;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      int v11 = 136315394;
      unint64_t v12 = v8;
      __int16 v13 = 2048;
      uint64_t v14 = v9;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] [WARN] Negative relative threshold supplied (%f), span filtering will behave strangely", (uint8_t *)&v11, 0x16u);
    }
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }
  return a1;
}

void *uaap::TimeSpanHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::mapTimeSpanToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapTimeSpanToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"TimeSpan");
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        BOOL result = *(void **)(v5 + 8 * v6);
        if (result)
        {
          if (result) {
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
  }
  return result;
}

void sub_1C8EE4B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uaap::AbstractDateTimeHandler *uaap::TimeSpanHandler::resolveRecurringTimeSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v4 = EntityNode;
    if ((*((void *)a1 + 7) || *((void *)a1 + 8) || *((void *)a1 + 10))
      && (siri::ontology::oname::graph::ontology_init::common_Duration(EntityNode),
          uint64_t v9 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          (EntityNode = uaap::TimeSpanHandler::resolveTimeSpanWithUnit(a1, a2, v9, v10)) != 0))
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v9, a1, v11);
      siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(v12);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime(EntityNode);
    uint64_t v14 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    __int16 v16 = uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, v14, v15);
    if (v16)
    {
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v16);
      siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v19 = *((void *)a1 + 6);
      if (v19 && *(void *)(v19 + 24)) {
        uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, v14, v18);
      }
    }
    else if (!v13)
    {
      return 0;
    }
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v17);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return v4;
}

uaap::AbstractDateTimeHandler *uaap::TimeSpanHandler::resolveTimeSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    return EntityNode;
  }
  siri::ontology::oname::graph::ontology_init::Root(a1);
  uint64_t v7 = siri::ontology::operator!=();
  if (v7) {
    return 0;
  }
  if (!*((void *)a1 + 7) && !*((void *)a1 + 8) && !*((void *)a1 + 10))
  {
    if (!*((void *)a1 + 12)) {
      return 0;
    }
    goto LABEL_11;
  }
  siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
  EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v8);
  siri::ontology::UsoGraphNode::setSuccessor();
  uint64_t v7 = (uint64_t)uaap::TimeSpanHandler::resolveTimeSpanWithUnit(a1, a2, EntityNode, v9);
  if (*((void *)a1 + 12))
  {
LABEL_11:
    siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, EntityNode, v12);
    uaap::TimeHandler::resolveSpecialTimePeriod(a1, a2, EntityNode, v13);
  }
  uint64_t v14 = *((void *)a1 + 6);
  if (v14 && *(void *)(v14 + 24)) {
    uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, EntityNode, v10);
  }
  return EntityNode;
}

uaap::TimeHandler *uaap::TimeSpanHandler::resolveDateTimeRangeSpanGraph(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    unint64_t v3 = this;
    if (*((void *)this + 12))
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime(this);
      EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
      this = uaap::TimeHandler::resolveDateTimeRangeValue(v3, a2, EntityNode, v6);
      if (this)
      {
        unint64_t v8 = this;
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v3, v7);
        siri::ontology::oname::graph::ontology_init::Argument_entity(v9);
        this = (uaap::TimeHandler *)siri::ontology::UsoGraphNode::setSuccessor();
        uint64_t v11 = *((void *)v3 + 6);
        if (v11)
        {
          if (*(void *)(v11 + 24))
          {
            return (uaap::TimeHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v3, a2, v8, v10);
          }
        }
      }
    }
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveTimeSpanWithUnit(uaap::TimeSpanHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  BOOL result = 0;
  if (this && a2 && a3)
  {
    if ((*((void *)this + 7) || *((void *)this + 8) || *((void *)this + 10))
      && (siri::ontology::oname::graph::ontology_init::common_Duration(0),
          uint64_t v8 = siri::ontology::operator!=(),
          (v8 & 1) == 0))
    {
      uint64_t v9 = *((void *)this + 10);
      if (v9)
      {
        unint64_t v10 = *(siri::ontology::oname::graph::ontology_init **)(v9 + 24);
        uint64_t v11 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Second((siri::ontology::oname::graph::ontology_init *)v8);
        BOOL result = uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v10, v11, (uint64_t)a2, (uint64_t)a3, this);
      }
      else
      {
        BOOL result = 0;
      }
      uint64_t v12 = *((void *)this + 8);
      if (v12)
      {
        int v13 = *(siri::ontology::oname::graph::ontology_init **)(v12 + 24);
        uint64_t v14 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute(result);
        BOOL result = uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v13, v14, (uint64_t)a2, (uint64_t)a3, this);
      }
      uint64_t v15 = *((void *)this + 7);
      if (v15)
      {
        __int16 v16 = *(siri::ontology::oname::graph::ontology_init **)(v15 + 24);
        uint64_t v17 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Hour(result);
        return uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v16, v17, (uint64_t)a2, (uint64_t)a3, this);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  siri::ontology::oname::graph::ontology_init::common_TimeUnit_Hour(a1);
  uint64_t v7 = siri::ontology::operator!=();
  if (v7)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7)
    {
      siri::ontology::oname::graph::ontology_init::common_TimeUnit_Second((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t v7 = siri::ontology::operator!=();
      if (v7) {
        return 0;
      }
    }
  }
  siri::ontology::oname::graph::ontology_init::common_DurationComponent((siri::ontology::oname::graph::ontology_init *)v7);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_components(EntityNode);
  uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::common_Integer(v9);
  unint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_value(v10);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::UPDDSpan::extractIntValueFromCFStringRef((const __CFString *)a1, v11);
  IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a5, v13);
  siri::ontology::oname::graph::ontology_init::common_TimeUnit(v14);
  uint64_t v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_unit(v15);
  siri::ontology::UsoGraphNode::setSuccessor();
  __int16 v16 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v16);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v16, a5, v17);
  return EntityNode;
}

void uaap::TimeSpanHandler::~TimeSpanHandler(uaap::TimeSpanHandler *this)
{
}

BOOL uaap::TimeSpanHandler::isRecurringTime(BOOL this, uaap::UPDDTimeSpan *a2)
{
  if (this)
  {
    uint64_t v2 = *(void *)(this + 48);
    return v2 && (unint64_t v3 = *(const void **)(v2 + 24)) != 0 && CFEqual(@"every", v3) != 0;
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveMinutesBeforeTimeSpanWithUnit(CFTypeRef *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (!this) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(this[1], @"MinutesBefore");
  if (!v7) {
    return 0;
  }
  siri::ontology::oname::graph::ontology_init::common_Duration(v7);
  uint64_t v8 = siri::ontology::operator!=();
  if (v8) {
    return 0;
  }
  unint64_t v10 = (siri::ontology::oname::graph::ontology_init *)this[3];
  uint64_t v11 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute((siri::ontology::oname::graph::ontology_init *)v8);
  return uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v10, v11, (uint64_t)a2, (uint64_t)a3, (siri::ontology::UsoEntityNode *)this);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveTimeSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanHandler::resolveTimeSpan(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveRecurringTimeSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanHandler::resolveRecurringTimeSpan(v4, a2, v5, v6);
  }
  return this;
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::EmbedderOrchestrator(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__fs::filesystem::path *)&std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)this, "config.json")[1];
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&v4->__pn_, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)this + 2, "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)this + 3, "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)this + 4, "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)this + 5, "version.yaml");
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v18, (uint64_t)&__p, (std::__fs::filesystem::path *)this);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v18;
  }
  LODWORD(v16.__r_.__value_.__l.__data_) = 2;
  snlp::common::config::loadConfig((uint64_t)this + 144, (uint64_t)&v19, (int *)&v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 23) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v18, (uint64_t)a2, v4);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v18;
  }
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((void *)this + 24);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *((void *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 37) = 0;
  uint64_t v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = (char *)this + 48;
    if (*((char *)this + 71) < 0) {
      uint64_t v7 = (char *)*((void *)this + 6);
    }
    uint64_t v8 = this;
    if (*((char *)this + 23) < 0) {
      uint64_t v8 = *(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator **)this;
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
    HIWORD(v19.__r_.__value_.__r.__words[2]) = 2080;
    float v20 = v8;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEFAULT, "assetDirectoryPath = %s, kAssetPathBertModelFolder = %s, kAssetPathfloat Config = %s", (uint8_t *)&v19, 0x20u);
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v15, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v16, (uint64_t)&v15, (std::__fs::filesystem::path *)this + 3);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v12, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v13, (uint64_t)&v12, (std::__fs::filesystem::path *)this);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  int v11 = 2;
  snlp::common::config::loadConfig((uint64_t)&v19, (uint64_t)&v14, &v11);
  std::__fs::filesystem::operator/[abi:ne180100](&v9, (uint64_t)a2, (std::__fs::filesystem::path *)this + 4);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  operator new();
}

void sub_1C8EE5894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v68 - 144);
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  std::mutex::~mutex(v67);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v66);
  uint64_t v70 = *(void *)(v61 + 184);
  *(void *)(v61 + 184) = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a11);
  if (*(char *)(v61 + 143) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v61 + 119) < 0) {
    operator delete(*v65);
  }
  if (*(char *)(v61 + 95) < 0) {
    operator delete(*v64);
  }
  if (*(char *)(v61 + 71) < 0) {
    operator delete(*v63);
  }
  if (*(char *)(v61 + 47) < 0) {
    operator delete(*v62);
  }
  if (*(char *)(v61 + 23) < 0) {
    operator delete(*(void **)v61);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EE5A68()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  JUMPOUT(0x1C8EE59C4);
}

void sub_1C8EE5A90()
{
}

void sub_1C8EE5A98()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  JUMPOUT(0x1C8EE5AC4);
}

void sub_1C8EE5AD8()
{
}

void sub_1C8EE5AE0()
{
}

void sub_1C8EE5AE8()
{
}

void sub_1C8EE5AF0()
{
}

void sub_1C8EE5AF8()
{
}

void sub_1C8EE5B00()
{
}

uint64_t snlp::common::config::loadConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v44);
  std::string::size_type v5 = *a3;
  if (v5 >= 8)
  {
    uint64_t v7 = SNLPOSLoggerForCategory(4);
    uint64_t v6 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    uint64_t v6 = off_1E65808C8[v5];
  }
  std::string::basic_string[abi:ne180100]<0>(v39, v6);
  if ((v45[*(void *)(v44[0] - 24) + 16] & 5) != 0)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v51, ".");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    std::string v10 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = v39;
      if (v40 < 0) {
        int v11 = (void **)v39[0];
      }
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v51, 0x16u);
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_91;
  }
  v37[0] = 0;
  uint64_t v38 = 0;
  nlohmann::operator>>(v44, v37);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::size_type v13 = *a3;
  if (v13 >= 8)
  {
    std::string v15 = SNLPOSLoggerForCategory(4);
    std::string v14 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    std::string v14 = off_1E65808C8[v13];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
  unint64_t v52 = 0x8000000000000000;
  unsigned __int8 v16 = v37[0];
  if (v37[0])
  {
    if (v37[0] == 2)
    {
      v51.__r_.__value_.__r.__words[2] = *v38;
    }
    else if (v37[0] == 1)
    {
      v51.__r_.__value_.__l.__size_ = *v38;
    }
    else
    {
      unint64_t v52 = 0;
    }
  }
  else
  {
    unint64_t v52 = 1;
  }
  while (1)
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    v49[0] = 0x8000000000000000;
    if (v16 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = v38[1];
    }
    else if (v16 == 1)
    {
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
    }
    else
    {
      v49[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v51, (unsigned __int8 **)&buf))
    {
      break;
    }
    uint64_t v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)v17;
      v41.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 5)
    {
      std::string v19 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v19, (int *)&buf);
      int data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v41;
      }
      LODWORD(v49[0]) = data;
      int v50 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 6)
    {
      uint64_t v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v21, (unsigned int *)&buf);
      int v22 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v41;
      }
      LODWORD(v49[0]) = v22;
      int v50 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 7)
    {
      unint64_t v23 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v23, (float *)&buf);
      int v24 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v41;
      }
      LODWORD(v49[0]) = v24;
      int v50 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 4)
    {
      os_signpost_id_t v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v25, &buf);
      std::string::value_type v26 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = v41;
      }
      LOBYTE(v49[0]) = v26;
      int v50 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_70:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
      goto LABEL_71;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51))
      {
        std::operator+<char>();
        uint64_t v29 = std::string::append(&v47, ".");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        uint8x8_t v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_71;
        }
        unint64_t v32 = __p;
        if (v43 < 0) {
          unint64_t v32 = (void **)__p[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint8x8_t v33 = &buf;
        }
        else {
          uint8x8_t v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        std::operator+<char>();
        uint64_t v34 = std::string::append(&v47, " is null.  This is currently expected behaviour.");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        uint8x8_t v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_71;
        }
        unint64_t v32 = __p;
        if (v43 < 0) {
          unint64_t v32 = (void **)__p[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint8x8_t v33 = &buf;
        }
        else {
          uint8x8_t v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
      }
      LODWORD(v47.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(v47.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
      _os_log_impl(&dword_1C8DA9000, v31, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v47, 0x16u);
LABEL_71:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      uint64_t v28 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_73;
    }
    int v27 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v47, v27);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (long long *)&v41, (long long *)&v47);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v28 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_73:
      operator delete(v28);
    }
LABEL_74:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v51);
    unsigned __int8 v16 = v37[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(a1, (unsigned __int8 *)&buf, (long long **)&v51, &v41);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38, v37[0]);
LABEL_91:
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v44[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v45);
  std::istream::~istream();
  return MEMORY[0x1CB775B50](&v46);
}

void sub_1C8EE6418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, unsigned __int8 a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  if (*(char *)(v33 - 233) < 0) {
    operator delete(*(void **)(v33 - 256));
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, a12);
  if (a19 < 0) {
    operator delete(a14);
  }
  std::ifstream::~ifstream(&a32);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::validateBertModelLoading(nlv4_inference_orchestrator::inference_engine::EspressoBertModel **this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId(this[23]);
  if (!v2 || (uint64_t result = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId(this[23]), !v4))
  {
    std::string::size_type v5 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v7.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "OWL assets not identified.  If this is a unit test, have you pulled all git lfs assets?  If this is a user request, have you ensured the assets are available on the device?", (uint8_t *)&v7, 2u);
    }
    std::string::basic_string[abi:ne180100]<0>(&v7, "Vocabulary special tokens not properly defined");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v7);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F038;
  }
  return result;
}

void sub_1C8EE6638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(void **this)
{
  char v2 = this + 3;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::inference_engine::BertModelLoadingError::~BertModelLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::EmbedderOrchestrator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)a1, "config.json");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(v6 + 1, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 48), "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 72), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 96), "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 120), "version.yaml");
  v8[0] = 2;
  snlp::common::config::loadConfig(a1 + 144, a4, v8);
  *(void *)(a1 + 184) = 0;
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((void *)(a1 + 192));
  *(void *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  int v7 = 2;
  snlp::common::config::loadConfig((uint64_t)v8, a4, &v7);
  operator new();
}

{
  std::string *v6;
  int v7;
  int v8[10];

  uint64_t v6 = std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)a1, "config.json") + 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(v6, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 48), "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 72), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 96), "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 120), "version.yaml");
  v8[0] = 2;
  snlp::common::config::loadConfig(a1 + 144, a4, v8);
  *(void *)(a1 + 184) = 0;
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((void *)(a1 + 192));
  *(void *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  int v7 = 2;
  snlp::common::config::loadConfig((uint64_t)v8, a4, &v7);
  operator new();
}

void sub_1C8EE68B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::mutex::~mutex(v29);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v28);
  uint64_t v31 = *(void *)(v23 + 184);
  *(void *)(v23 + 184) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v27);
  if (*(char *)(v23 + 143) < 0) {
    operator delete(*v26);
  }
  if (*(char *)(v23 + 119) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v23 + 95) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v23 + 71) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v23 + 47) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EE69E8()
{
}

void sub_1C8EE69F0()
{
}

void sub_1C8EE6C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  MEMORY[0x1CB775C40](v26, 0x10B3C4028DAAE2CLL);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a14);
  std::mutex::~mutex(v31);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v30);
  uint64_t v33 = *(void *)(v25 + 184);
  *(void *)(v25 + 184) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v29);
  if (*(char *)(v25 + 143) < 0) {
    operator delete(*v28);
  }
  if (*(char *)(v25 + 119) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v25 + 95) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v25 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v25 + 47) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EE6D34()
{
}

void sub_1C8EE6D3C()
{
}

void sub_1C8EE6D44()
{
}

void *nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getTokenisation@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a3 + 1, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a3[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a3[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
  }
  a3[2].__r_.__value_.__r.__words[0] = 0;
  a3[2].__r_.__value_.__l.__size_ = 0;
  a3[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(a3[2].__r_.__value_.__r.__words, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
}

void sub_1C8EE6E08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken@<X0>(const std::string *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  sirinluinternal::SubwordToken::SubwordToken((sirinluinternal::SubwordToken *)a4);
  uint64_t v8 = *(std::string **)(a4 + 8);
  if (!v8) {
    operator new();
  }
  uint64_t result = std::string::operator=(v8, a1);
  *(unsigned char *)(a4 + 24) |= 3u;
  *(_DWORD *)(a4 + 16) = a3;
  *(_DWORD *)(a4 + 20) = a2;
  return result;
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordTokenChain@<X0>(uint64_t a1@<X0>, void *a2@<X1>, sirinluinternal::SubwordTokenChain *a3@<X8>)
{
  sirinluinternal::SubwordTokenChain::SubwordTokenChain(a3);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 184) + 8) + 16))(*(void *)(*(void *)(a1 + 184) + 8));
  if (result && *a2 != a2[1])
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(*(nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)(a1 + 184));
    uint64_t v6 = (long long *)*a2;
    if (*(char *)(*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v7 = *v6;
      v12.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    }
    uint64_t v8 = a2[1];
    if (*(char *)(v8 - 89) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v8 - 112), *(void *)(v8 - 104));
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 - 112);
      v11.__r_.__value_.__r.__words[2] = *(void *)(v8 - 96);
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    }
    nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken(&v12, 0, 0, (uint64_t)v10);
    PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>();
  }
  return result;
}

void sub_1C8EE719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  MEMORY[0x1CB773EA0](v28);
  _Unwind_Resume(a1);
}

void PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>()
{
}

void sub_1C8EE73A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::reformulateTokens(uint64_t a1@<X0>, const nlv4_inference_orchestrator::orchestration::Token **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::reserve((uint64_t *)a3, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  uint64_t v6 = *a2;
  long long v7 = a2[1];
  if (v6 != v7)
  {
    uint64_t v8 = (nlv4_inference_orchestrator::pre_processing::Reformulator *)(a1 + 192);
    do
    {
      nlv4_inference_orchestrator::pre_processing::Reformulator::applyReformulationToToken(v8, v6, (uint64_t)__p);
      unint64_t v9 = *(void *)(a3 + 8);
      unint64_t v10 = *(void *)(a3 + 16);
      if (v9 >= v10)
      {
        uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - *(void *)a3) >> 4);
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) > 0x249249249249249) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - *(void *)a3) >> 4);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x124924924924924) {
          unint64_t v18 = 0x249249249249249;
        }
        else {
          unint64_t v18 = v16;
        }
        v31[4] = (void **)(a3 + 16);
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v18 + 112 * v15;
        v31[0] = (void **)v18;
        v31[1] = (void **)v20;
        v31[3] = (void **)(v18 + 112 * v19);
        long long v21 = *(_OWORD *)__p;
        *(void *)(v20 + 16) = v25;
        *(_OWORD *)unint64_t v20 = v21;
        __p[1] = 0;
        uint64_t v25 = 0;
        __p[0] = 0;
        long long v22 = v26[0];
        *(_OWORD *)(v20 + 35) = *(_OWORD *)((char *)v26 + 11);
        *(_OWORD *)(v20 + 24) = v22;
        *(void *)(v20 + 64) = 0;
        *(void *)(v20 + 72) = 0;
        *(void *)(v20 + 56) = 0;
        *(_OWORD *)(v20 + 56) = v27;
        *(void *)(v20 + 72) = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        long long v23 = v30;
        *(_OWORD *)(v20 + 80) = v29;
        *(_OWORD *)(v20 + 96) = v23;
        v31[2] = (void **)(v20 + 112);
        std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer((uint64_t *)a3, v31);
        unint64_t v14 = *(void *)(a3 + 8);
        std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)v31);
      }
      else
      {
        long long v11 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v25;
        *(_OWORD *)unint64_t v9 = v11;
        __p[1] = 0;
        uint64_t v25 = 0;
        __p[0] = 0;
        long long v12 = *(_OWORD *)((char *)v26 + 11);
        *(_OWORD *)(v9 + 24) = v26[0];
        *(_OWORD *)(v9 + 35) = v12;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 56) = v27;
        *(void *)(v9 + 72) = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        long long v13 = v30;
        *(_OWORD *)(v9 + 80) = v29;
        *(_OWORD *)(v9 + 96) = v13;
        unint64_t v14 = v9 + 112;
      }
      *(void *)(a3 + 8) = v14;
      v31[0] = (void **)&v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v31);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = (const nlv4_inference_orchestrator::orchestration::Token *)((char *)v6 + 112);
    }
    while (v6 != v7);
  }
}

void sub_1C8EE7634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t i@<X8>)
{
  uint64_t v3 = a2;
  v104[1] = *MEMORY[0x1E4F143B8];
  char v82 = 0;
  LOBYTE(v83) = 0;
  unsigned __int8 v86 = 0;
  LOBYTE(v87[0]) = 0;
  char v88 = 0;
  memset(__str, 0, sizeof(__str));
  memset(v80, 0, 25);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::reformulateTokens(a1, (const nlv4_inference_orchestrator::orchestration::Token **)(a2 + 48), (uint64_t)&v77);
  std::string::basic_string[abi:ne180100]<0>(&v97, "[CLS]");
  *(void *)std::string v98 = 0;
  *(void *)&v98[8] = 0;
  *(_DWORD *)&v98[23] = 0;
  memset(&v98[32], 0, 56);
  *(void *)&v98[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "[SEP]");
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  *(_DWORD *)((char *)v94 + 7) = 0;
  memset(v95, 0, sizeof(v95));
  v94[0] = 0;
  uint64_t v96 = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v99, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v99 = v97;
  }
  *(_OWORD *)uint64_t v100 = *(_OWORD *)v98;
  *(_OWORD *)&v100[11] = *(_OWORD *)&v98[11];
  memset(&v101, 0, sizeof(v101));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, *(long long **)&v98[32], *(long long **)&v98[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v98[40] - *(void *)&v98[32]) >> 3));
  long long v102 = *(_OWORD *)&v98[56];
  long long v103 = *(_OWORD *)&v98[72];
  std::string v75 = 0;
  std::string v76 = 0;
  uint64_t v74 = 0;
  v73.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v74 = (std::string *)operator new(0x70uLL);
  std::string v75 = v74;
  std::string v76 = (std::string *)((char *)v74 + 112);
  uint64_t v68 = a1;
  std::string v75 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)&v76, (uint64_t)&v99, (uint64_t)v104, (uint64_t)v74);
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = v77;
  uint64_t v7 = v78 - v77;
  if (v78 - v77 >= 1)
  {
    uint64_t v8 = v7 / 112;
    unint64_t v9 = v74;
    unint64_t v10 = v75;
    int64_t v11 = ((char *)v75 - (char *)v74) / 112;
    long long v12 = (std::string *)((char *)v74 + 112 * v11);
    if (0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v75) >> 4) >= v7 / 112)
    {
      int64_t v65 = ((char *)v75 - (char *)v74) / 112;
      uint64_t v67 = i;
      uint64_t v16 = (char *)v75 - (char *)v12;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v12) >> 4) >= v8)
      {
        uint64_t v17 = v77 + 112 * v8;
        unint64_t v18 = v75;
      }
      else
      {
        uint64_t v17 = v77 + 16 * (((char *)v75 - (char *)v12) >> 4);
        unint64_t v18 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)&v76, v17, v78, (uint64_t)v75);
        std::string v75 = v18;
        BOOL v19 = v16 < 1;
        unint64_t i = v67;
        if (v19) {
          goto LABEL_41;
        }
      }
      uint64_t v66 = v3;
      unint64_t v20 = (std::string *)((char *)v12 + 112 * v8);
      long long v21 = (char *)v18 - 112 * v8;
      long long v22 = v18;
      if (v21 < (char *)v10)
      {
        long long v22 = v18;
        do
        {
          long long v23 = *(_OWORD *)v21;
          v22->__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          *((void *)v21 + 1) = 0;
          *((void *)v21 + 2) = 0;
          *(void *)long long v21 = 0;
          long long v24 = *(_OWORD *)(v21 + 24);
          *(_OWORD *)((char *)&v22[1].__r_.__value_.__r.__words[1] + 3) = *(_OWORD *)(v21 + 35);
          *(_OWORD *)&v22[1].__r_.__value_.__l.__data_ = v24;
          v22[2].__r_.__value_.__r.__words[2] = 0;
          v22[3].__r_.__value_.__r.__words[0] = 0;
          v22[2].__r_.__value_.__l.__size_ = 0;
          *(_OWORD *)&v22[2].__r_.__value_.__r.__words[1] = *(_OWORD *)(v21 + 56);
          v22[3].__r_.__value_.__r.__words[0] = *((void *)v21 + 9);
          *((void *)v21 + 7) = 0;
          *((void *)v21 + 8) = 0;
          *((void *)v21 + 9) = 0;
          long long v25 = *((_OWORD *)v21 + 6);
          *(_OWORD *)&v22[3].__r_.__value_.__r.__words[1] = *((_OWORD *)v21 + 5);
          *(_OWORD *)&v22[4].__r_.__value_.__l.__data_ = v25;
          long long v22 = (std::string *)((char *)v22 + 112);
          v21 += 112;
        }
        while (v21 < (char *)v10);
      }
      std::string v75 = v22;
      if (v18 != v20)
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0x6DB6DB6DB6DB6DB7 * (((char *)v18 - (char *)v20) >> 4);
        uint64_t v28 = -112 * v27;
        long long v29 = (char *)v9 + 112 * v27 + 112 * v65;
        do
        {
          long long v30 = (char *)v18 + v26;
          uint64_t v31 = (void **)((char *)&v18[-4] + v26 - 16);
          if (*((char *)&v18[-3] + v26 - 17) < 0) {
            operator delete(*v31);
          }
          uint64_t v32 = &v29[v26];
          uint64_t v33 = &v29[v26 - 112];
          long long v34 = *(_OWORD *)v33;
          v18[-4].__r_.__value_.__r.__words[v26 / 8] = *(void *)&v29[v26 - 96];
          *(_OWORD *)uint64_t v31 = v34;
          v29[v26 - 89] = 0;
          char *v33 = 0;
          long long v35 = *(_OWORD *)&v29[v26 - 88];
          *(_OWORD *)(v30 - 77) = *(_OWORD *)&v29[v26 - 77];
          *(_OWORD *)(v30 - 88) = v35;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v30 - 56));
          *(_OWORD *)(v30 - 56) = *(_OWORD *)&v29[v26 - 56];
          *((void *)v30 - 5) = *(void *)&v29[v26 - 40];
          *((void *)v32 - 7) = 0;
          *((void *)v32 - 6) = 0;
          *((void *)v32 - 5) = 0;
          long long v36 = *(_OWORD *)&v29[v26 - 16];
          *((_OWORD *)v30 - 2) = *(_OWORD *)&v29[v26 - 32];
          *((_OWORD *)v30 - 1) = v36;
          v26 -= 112;
        }
        while (v28 != v26);
      }
      uint64_t v3 = v66;
      for (unint64_t i = v67; v6 != v17; v12 = (std::string *)((char *)v12 + 112))
      {
        std::string::operator=(v12, (const std::string *)v6);
        long long v37 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)((char *)&v12[1].__r_.__value_.__r.__words[1] + 3) = *(_OWORD *)(v6 + 35);
        *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = v37;
        if (v12 != (std::string *)v6) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v12[2].__r_.__value_.__r.__words[1], *(std::string **)(v6 + 56), *(long long **)(v6 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 64) - *(void *)(v6 + 56)) >> 3));
        }
        long long v38 = *(_OWORD *)(v6 + 96);
        *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1] = *(_OWORD *)(v6 + 80);
        *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = v38;
        v6 += 112;
      }
    }
    else
    {
      unint64_t v13 = v11 + v8;
      if ((unint64_t)(v11 + v8) > 0x249249249249249) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4) > v13) {
        unint64_t v13 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v74) >> 4)) >= 0x124924924924924) {
        unint64_t v14 = 0x249249249249249;
      }
      else {
        unint64_t v14 = v13;
      }
      *(void *)&v100[8] = &v76;
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v39 = (std::string *)(v14 + 112 * v11);
      v99.__r_.__value_.__r.__words[0] = v14;
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      v99.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
      *(void *)uint64_t v100 = v14 + 112 * v15;
      uint64_t v40 = 112 * v8;
      std::string::size_type v41 = (std::string::size_type)v39 + v40;
      do
      {
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(v39, (long long *)v6);
        unint64_t v39 = (std::string *)((char *)v39 + 112);
        v6 += 112;
        v40 -= 112;
      }
      while (v40);
      v99.__r_.__value_.__r.__words[2] = v41;
      std::string::size_type size = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>((uint64_t)&v76, (uint64_t)v12, (uint64_t)v12, (uint64_t)v74, (uint64_t)v74, v99.__r_.__value_.__l.__size_, v99.__r_.__value_.__l.__size_);
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      char v43 = v75;
      std::string::size_type v44 = v99.__r_.__value_.__r.__words[2];
      if (v12 != v75)
      {
        do
        {
          long long v45 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          *(void *)(v44 + 16) = *((void *)&v12->__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v44 = v45;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          long long v46 = *(_OWORD *)&v12[1].__r_.__value_.__l.__data_;
          *(_OWORD *)(v44 + 35) = *(_OWORD *)((char *)&v12[1].__r_.__value_.__r.__words[1] + 3);
          *(_OWORD *)(v44 + 24) = v46;
          *(void *)(v44 + 64) = 0;
          *(void *)(v44 + 72) = 0;
          *(void *)(v44 + 56) = 0;
          *(_OWORD *)(v44 + 56) = *(_OWORD *)&v12[2].__r_.__value_.__r.__words[1];
          *(void *)(v44 + 72) = v12[3].__r_.__value_.__l.__data_;
          v12[2].__r_.__value_.__l.__size_ = 0;
          v12[2].__r_.__value_.__r.__words[2] = 0;
          v12[3].__r_.__value_.__r.__words[0] = 0;
          long long v47 = *(_OWORD *)&v12[4].__r_.__value_.__l.__data_;
          *(_OWORD *)(v44 + 80) = *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1];
          *(_OWORD *)(v44 + 96) = v47;
          v44 += 112;
          long long v12 = (std::string *)((char *)v12 + 112);
        }
        while (v12 != v43);
        std::string::size_type size = (std::string *)v99.__r_.__value_.__l.__size_;
        long long v12 = v75;
      }
      uint64_t v48 = v74;
      long long v49 = v76;
      uint64_t v74 = size;
      std::string v75 = (std::string *)v44;
      std::string v76 = *(std::string **)v100;
      v99.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
      *(void *)uint64_t v100 = v49;
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
      std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)&v99);
    }
  }
LABEL_41:
  int v50 = v75;
  if (v75 >= v76)
  {
    uint64_t v53 = 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v74) >> 4);
    uint64_t v51 = v68;
    if ((unint64_t)(v53 + 1) > 0x249249249249249) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4);
    if (v54 <= v53 + 1) {
      unint64_t v54 = v53 + 1;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v74) >> 4)) >= 0x124924924924924) {
      unint64_t v55 = 0x249249249249249;
    }
    else {
      unint64_t v55 = v54;
    }
    *(void *)&v100[8] = &v76;
    if (v55) {
      unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v55);
    }
    else {
      uint64_t v56 = 0;
    }
    v99.__r_.__value_.__r.__words[0] = v55;
    v99.__r_.__value_.__l.__size_ = v55 + 112 * v53;
    v99.__r_.__value_.__r.__words[2] = v99.__r_.__value_.__l.__size_;
    *(void *)uint64_t v100 = v55 + 112 * v56;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>((std::string *)v99.__r_.__value_.__l.__size_, &__p);
    v99.__r_.__value_.__r.__words[2] += 112;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer((uint64_t *)&v74, &v99);
    unint64_t v52 = v75;
    std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)&v99);
  }
  else
  {
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(v75, &__p);
    uint64_t v51 = v68;
    unint64_t v52 = (std::string *)((char *)v50 + 112);
  }
  std::string v75 = v52;
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)__p);
  }
  *(void *)&long long __p = &v98[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordTokenChain(v51, &v74, (sirinluinternal::SubwordTokenChain *)&__p);
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v51 + 184) + 8) + 16))(*(void *)(*(void *)(v51 + 184) + 8)))
  {
    memset(&v97, 0, sizeof(v97));
    memset(&v99, 0, sizeof(v99));
    memset(&v73, 0, sizeof(v73));
    uint64_t v70 = 0;
    int64_t v71 = 0;
    unint64_t v72 = 0;
    uint64_t v57 = v91;
    uint64_t v58 = v92;
    if (v91 != v92)
    {
      std::string v59 = 0;
      do
      {
        uint64_t v60 = *(void *)(*(void *)v57 + 8);
        if ((unint64_t)v59 >= v72)
        {
          std::string v59 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v70, (long long *)v60);
        }
        else
        {
          if (*(char *)(v60 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v60, *(void *)(v60 + 8));
          }
          else
          {
            long long v61 = *(_OWORD *)v60;
            v59->__r_.__value_.__r.__words[2] = *(void *)(v60 + 16);
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v61;
          }
          ++v59;
        }
        int64_t v71 = v59;
        v57 += 8;
      }
      while (v57 != v58);
    }
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordIDs(*(void *)(v51 + 184), (uint64_t **)&v70, &v69.__r_.__value_.__l.__data_);
    if (v97.__r_.__value_.__r.__words[0])
    {
      v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    std::string v97 = v69;
    if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v51 + 184) + 8) + 64))(*(void *)(*(void *)(v51 + 184) + 8)) == 2)
    {
      nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(*(void *)(v51 + 184), (unsigned __int8 **)&v70, (std::vector<int> *)&v69);
      if (v99.__r_.__value_.__r.__words[0])
      {
        v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string v99 = v69;
      std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>((uint64_t)&v80[24], (uint64_t)&v99);
    }
    if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v51 + 184) + 8) + 64))(*(void *)(*(void *)(v51 + 184) + 8)) == 3)
    {
      nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordFeaturePoolingMask2D(*(void *)(v51 + 184), (uint64_t)&v70, &v69);
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v73);
      std::string v73 = v69;
      memset(&v69, 0, sizeof(v69));
      uint64_t v89 = &v69;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (v86)
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v83, (uint64_t)v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v83, (uint64_t)v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 3));
        unsigned __int8 v86 = 1;
      }
    }
    std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>((uint64_t)v87, (uint64_t)&v97);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    uint64_t v70 = &v73;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (v97.__r_.__value_.__r.__words[0])
    {
      v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      operator delete(v97.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v63 = v74;
    __int16 v62 = v75;
    while (v63 != v62)
    {
      v63[1].__r_.__value_.__r.__words[0] = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*(void *)(*(void *)(v51 + 184) + 80), (uint64_t)v63);
      uint64_t v63 = (std::string *)((char *)v63 + 112);
    }
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getTokenisation(v3, (uint64_t *)&v74, &v97);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[0].__r_.__value_.__l.__data_);
  }
  __str[0] = v97;
  *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
  v97.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[1].__r_.__value_.__l.__data_);
  }
  __str[1] = *(std::string *)v98;
  v98[23] = 0;
  v98[0] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate((void **)v80);
  *(_OWORD *)uint64_t v80 = *(_OWORD *)&v98[24];
  *(void *)&v80[16] = *(void *)&v98[40];
  memset(&v98[24], 0, 24);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98[24];
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if ((v98[23] & 0x80000000) != 0) {
    operator delete(*(void **)v98);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(i + 104) = 0;
  *(unsigned char *)(i + 96) = 0;
  *(unsigned char *)(i + 128) = 0;
  *(unsigned char *)(i + 136) = 0;
  *(unsigned char *)(i + 160) = 0;
  *(_OWORD *)unint64_t i = 0u;
  *(_OWORD *)(i + 16) = 0u;
  *(_OWORD *)(i + 32) = 0u;
  *(_OWORD *)(i + 48) = 0u;
  *(_OWORD *)(i + 57) = 0u;
  *(void *)(i + 168) = 0;
  *(void *)(i + 176) = 0;
  *(void *)(i + 184) = 0;
  sirinluinternal::SubwordTokenChain::SubwordTokenChain((sirinluinternal::SubwordTokenChain *)(i + 192));
  sirinluinternal::SubwordTokenChain::operator=();
  std::string::operator=((std::string *)i, __str);
  std::string::operator=((std::string *)(i + 24), &__str[1]);
  if (__str != (std::string *)i) {
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(i + 48, *(std::string **)v80, *(std::string **)&v80[8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&v80[8] - *(void *)v80) >> 4));
  }
  std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(i + 72, (uint64_t)&v80[24]);
  if (*(unsigned __int8 *)(i + 128) == v86)
  {
    if (__str != (std::string *)i && *(unsigned char *)(i + 128)) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(i + 104, v83, v84, 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3));
    }
  }
  else
  {
    if (*(unsigned char *)(i + 128))
    {
      v97.__r_.__value_.__r.__words[0] = i + 104;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      char v64 = 0;
    }
    else
    {
      *(void *)(i + 104) = 0;
      *(void *)(i + 112) = 0;
      *(void *)(i + 120) = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((void *)(i + 104), v83, v84, 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3));
      char v64 = 1;
    }
    *(unsigned char *)(i + 128) = v64;
  }
  std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(i + 136, (uint64_t)v87);
  if ((std::string **)(i + 168) != &v74) {
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(i + 168, v74, v75, 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v74) >> 4));
  }
  MEMORY[0x1CB773EA0](&__p);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  if (v88 && v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v86)
  {
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  }
  if (v82 && *(void *)&v80[24])
  {
    uint64_t v81 = *(void *)&v80[24];
    operator delete(*(void **)&v80[24]);
  }
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C8EE833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a21 = (uint64_t)&a25;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&a53);
  nlv4_inference_orchestrator::orchestration::Token::~Token(&__p);
  a53 = (uint64_t)&a28;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType::~EspressoBertModelInputType((nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)&a31);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(__str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  unint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(__str, a3, v9);
  for (uint64_t i = *(void *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](i))
  {
    i -= 112;
  }
  *(void *)(a1 + 8) = v14;
}

void sub_1C8EE86EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C8EE86F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = (v3 - *(void *)a2) >> 2;
      std::string::size_type v5 = *(char **)a2;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput(nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *this)
{
  MEMORY[0x1CB773EA0]((char *)this + 192);
  unint64_t v4 = (void **)((char *)this + 168);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((unsigned char *)this + 160))
  {
    uint64_t v2 = (void *)*((void *)this + 17);
    if (v2)
    {
      *((void *)this + 18) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 128))
  {
    unint64_t v4 = (void **)((char *)this + 104);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*((unsigned char *)this + 96))
  {
    uint64_t v3 = (void *)*((void *)this + 9);
    if (v3)
    {
      *((void *)this + 10) = v3;
      operator delete(v3);
    }
  }
  unint64_t v4 = (void **)((char *)this + 48);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType::~EspressoBertModelInputType(nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *this)
{
  if (*((unsigned char *)this + 160))
  {
    uint64_t v2 = (void *)*((void *)this + 17);
    if (v2)
    {
      *((void *)this + 18) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 128))
  {
    unint64_t v4 = (void **)((char *)this + 104);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*((unsigned char *)this + 96))
  {
    uint64_t v3 = (void *)*((void *)this + 9);
    if (v3)
    {
      *((void *)this + 10) = v3;
      operator delete(v3);
    }
  }
  unint64_t v4 = (void **)((char *)this + 48);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  unint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(a2, a3, v9);
  uint64_t v15 = *(char **)(a1 + 8);
  if (v15 != v14)
  {
    uint64_t v16 = *(char **)(a1 + 8);
    do
    {
      unint64_t v18 = (void *)*((void *)v16 - 3);
      v16 -= 24;
      uint64_t v17 = v18;
      if (v18)
      {
        *((void *)v15 - 2) = v17;
        operator delete(v17);
      }
      uint64_t v15 = v16;
    }
    while (v16 != v14);
  }
  *(void *)(a1 + 8) = v14;
}

void sub_1C8EE8A74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C8EE8A7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      long long v6 = *(_OWORD *)((char *)&v5[1].__r_.__value_.__r.__words[1] + 3);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 3) = v6;
      if (this != v5) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[2].__r_.__value_.__r.__words[1], (std::string *)v5[2].__r_.__value_.__l.__size_, (long long *)v5[2].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2].__r_.__value_.__r.__words[2] - v5[2].__r_.__value_.__l.__size_) >> 3));
      }
      long long v7 = *(_OWORD *)&v5[4].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[1];
      *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
      this = (std::string *)((char *)this + 112);
      uint64_t v5 = (std::string *)((char *)v5 + 112);
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  long long v6 = (long long *)__str;
  p_end_castd::string p = (uint64_t)&a1->__end_cap_;
  std::vector<int>::pointer begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  std::vector<std::string>::pointer end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    unint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        long long v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      std::vector<int>::pointer begin = a1->__end_;
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      long long v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    std::vector<std::string>::pointer end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1C8EE8D24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getEmbeddingsBySentence(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this@<X0>, const nlv4_inference_orchestrator::orchestration::EmbedderRequest *a2@<X1>, uint64_t a3@<X8>)
{
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest((uint64_t)this, (uint64_t)a2, (uint64_t)v22);
  __p[0] = 0;
  __p[1] = 0;
  v20[72] = 0;
  v21[0] = 0;
  v21[72] = 0;
  uint64_t v15 = 0;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  v20[0] = 0;
  std::mutex::lock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forwardAggregatedBySentence(*((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)this + 23), (const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)v22, (uint64_t)v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v6;
  uint64_t v15 = v7;
  v6[1] = 0;
  uint64_t v7 = 0;
  v6[0] = 0;
  long long v16 = v8;
  uint64_t v17 = v9;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  long long v18 = *(_OWORD *)v10;
  uint64_t v19 = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v20, (uint64_t)v12);
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v21, (uint64_t)v13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput((uint64_t)a2, (uint64_t *)__p, v23, (uint64_t)&v24, a3);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)v22);
}

void sub_1C8EE8F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(&a39);
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)&a68);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = a2[3];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[5];
  uint64_t v13 = (const void *)(*a2 + 4 * v12);
  memset(&__p, 0, sizeof(__p));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&__p, v13, v11 + 4 * v12 * (v10 - 1), v12 * (v10 - 1) - v12);
  long long v38 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v14 = a2[5];
  *(void *)&long long v41 = v10 - 2;
  *((void *)&v41 + 1) = 1;
  uint64_t v42 = v14;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (*((unsigned char *)a2 + 224))
  {
    uint64_t v15 = a2[22];
    uint64_t v16 = a2[19];
    uint64_t v17 = a2[24];
    long long v46 = 0;
    uint64_t v47 = 0;
    long long v45 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v45, (const void *)(v16 + 4 * v17), v16 + 4 * v17 * (v15 - 1), v17 * (v15 - 1) - v17);
    memset(&v30, 0, sizeof(v30));
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v30, v45, (uint64_t)v46, (v46 - v45) >> 2);
    std::string::size_type v18 = a2[24];
    v31.__r_.__value_.__r.__words[0] = v15 - 2;
    v31.__r_.__value_.__l.__size_ = 1;
    v31.__r_.__value_.__r.__words[2] = v18;
    if (v45)
    {
      long long v46 = v45;
      operator delete(v45);
    }
    std::string __p = v30;
    std::string v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
  }
  long long v45 = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(&v45, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4));
  uint64_t v19 = v45;
  unint64_t v20 = v46;
  long long v21 = v45 + 112;
  if (v45 + 112 != v46)
  {
    do
    {
      if (v19[23] < 0) {
        operator delete(*(void **)v19);
      }
      *(_OWORD *)uint64_t v19 = *((_OWORD *)v19 + 7);
      *((void *)v19 + 2) = *((void *)v19 + 16);
      v19[112] = 0;
      long long v22 = v19 + 112;
      v19[135] = 0;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v19 + 136);
      *(_OWORD *)(v19 + 35) = *(_OWORD *)(v19 + 147);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + 56));
      *(_OWORD *)(v19 + 56) = *(_OWORD *)(v19 + 168);
      *((void *)v19 + 9) = *((void *)v19 + 23);
      *((void *)v19 + 22) = 0;
      *((void *)v19 + 23) = 0;
      *((void *)v19 + 21) = 0;
      long long v23 = *((_OWORD *)v19 + 13);
      uint64_t v24 = v19 + 224;
      *((_OWORD *)v19 + 5) = *((_OWORD *)v19 + 12);
      *((_OWORD *)v19 + 6) = v23;
      v19 += 112;
    }
    while (v24 != v20);
    long long v21 = v46;
    uint64_t v19 = v22;
  }
  while (v21 != v19)
  {
    v21 -= 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100]((uint64_t)v21);
  }
  long long v46 = v19;
  std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100]((uint64_t)(v19 - 112));
  long long v46 = v19 - 112;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v30 = *(std::string *)a1;
  }
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v31 = *(std::string *)(a1 + 24);
  }
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(&v32, (uint64_t)v45, (uint64_t)v46, 0x6DB6DB6DB6DB6DB7 * ((v46 - v45) >> 4));
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a5, v38, (uint64_t)v39, (v39 - (unsigned char *)v38) >> 2);
  *(_OWORD *)(a5 + 24) = v41;
  *(void *)(a5 + 40) = v42;
  long long v25 = (std::string *)(a5 + 48);
  if (SHIBYTE(v44) < 0)
  {
    std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v43;
    *(void *)(a5 + 64) = v44;
  }
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0;
  unint64_t v26 = (void *)__p.__r_.__value_.__r.__words[0];
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a5 + 72), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  *(std::string *)(a5 + 96) = v35;
  uint64_t v27 = (std::string *)(a5 + 120);
  int v28 = SHIBYTE(v37);
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v36;
    *(void *)(a5 + 136) = v37;
  }
  *(unsigned char *)(a5 + 152) = 0;
  *(unsigned char *)(a5 + 144) = 1;
  *(unsigned char *)(a5 + 224) = 0;
  if (*((unsigned char *)a2 + 144))
  {
    *(void *)(a5 + 152) = 0;
    *(void *)(a5 + 160) = 0;
    *(void *)(a5 + 168) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a5 + 152), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    *(_OWORD *)(a5 + 176) = *((_OWORD *)a2 + 6);
    *(void *)(a5 + 192) = a2[14];
    long long v29 = (std::string *)(a5 + 200);
    if (*((char *)a2 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)a2[15], a2[16]);
    }
    else
    {
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 15);
      *(void *)(a5 + 216) = a2[17];
    }
    *(unsigned char *)(a5 + 224) = 1;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a5 + 232), v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a5 + 232) = v30;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(a5 + 256), v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(a5 + 256) = v31;
  }
  *(void *)(a5 + 280) = 0;
  *(void *)(a5 + 288) = 0;
  *(void *)(a5 + 296) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>((void *)(a5 + 280), v32, *((uint64_t *)&v32 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v32 + 1) - v32) >> 4));
  MEMORY[0x1CB773E80](a5 + 304, a4);
  uint64_t v48 = (void **)&v32;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v28 < 0) {
    operator delete((void *)v36);
  }
  if (v26) {
    operator delete(v26);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
}

void sub_1C8EE94B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v37 = *v34;
  if (*v34)
  {
    *(void *)(v32 + 160) = v37;
    operator delete(v37);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100](v33);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor((void **)v32);
  nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(&__p);
  std::string __p = (void *)(v35 - 120);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a22);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a32);
  _Unwind_Resume(a1);
}

void sub_1C8EE95BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a11) < 0) {
    operator delete(a9);
  }
  JUMPOUT(0x1C8EE9594);
}

void sub_1C8EE95EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8EE95B4);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getEmbeddings(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this@<X0>, const nlv4_inference_orchestrator::orchestration::EmbedderRequest *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  long long v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Request Preprocess", "", buf, 2u);
    }
  }
  uint64_t v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Request Preprocess\"", buf, 2u);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest((uint64_t)this, (uint64_t)a2, (uint64_t)buf);
  uint64_t v11 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v12 = v11;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)std::string v30 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v12, OS_SIGNPOST_INTERVAL_END, v7, "OWL Request Preprocess", "", v30, 2u);
    }
  }
  uint64_t v13 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string v30 = 0;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEFAULT, "END \"OWL Request Preprocess\"", v30, 2u);
  }
  memset(v30, 0, sizeof(v30));
  v36[72] = 0;
  v37[0] = 0;
  v37[72] = 0;
  uint64_t v31 = 0;
  long long __p = 0uLL;
  uint64_t v35 = 0;
  v36[0] = 0;
  std::mutex::lock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forward(*((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)this + 23), (const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)buf, (uint64_t)v22);
  if (*(void *)v30)
  {
    *(void *)&v30[8] = *(void *)v30;
    operator delete(*(void **)v30);
  }
  *(_OWORD *)std::string v30 = *(_OWORD *)v22;
  uint64_t v31 = v23;
  v22[1] = 0;
  uint64_t v23 = 0;
  v22[0] = 0;
  long long v32 = v24;
  uint64_t v33 = v25;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)v26;
  uint64_t v35 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26[0]) = 0;
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v36, (uint64_t)v28);
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v37, (uint64_t)v29);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 240));
  uint64_t v14 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v15 = os_signpost_id_generate(v14);
  uint64_t v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v17 = v16;
    if (os_signpost_enabled(v16))
    {
      LOWORD(v22[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "OWL Response Postprocess", "", (uint8_t *)v22, 2u);
    }
  }
  std::string::size_type v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Response Postprocess\"", (uint8_t *)v22, 2u);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput((uint64_t)a2, (uint64_t *)v30, v39, (uint64_t)&v40, a3);
  uint64_t v19 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v20 = v19;
    if (os_signpost_enabled(v19))
    {
      LOWORD(v22[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v20, OS_SIGNPOST_INTERVAL_END, v15, "OWL Response Postprocess", "", (uint8_t *)v22, 2u);
    }
  }
  long long v21 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEFAULT, "END \"OWL Response Postprocess\"", (uint8_t *)v22, 2u);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v36);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__p);
  }
  if (*(void *)v30)
  {
    *(void *)&v30[8] = *(void *)v30;
    operator delete(*(void **)v30);
  }
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)buf);
}

void sub_1C8EE9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(&a39);
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)&a69);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::isSubOwlModel(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 16))();
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 64))();
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::tryEnableSentenceFeatures(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 48))();
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 32))();
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::tryEnableSubwordFeatures(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 56))();
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 23) + 8) + 40))();
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::decodeSubwordTokens(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1C8EEAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1C8EEAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t snlp::common::text_uso_graph::bottomUpTreeHash(siri::ontology::UsoGraph **this, const UsoGraphNode *a2)
{
  long long __p = 0;
  int v28 = 0;
  long long v29 = 0;
  siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&v24, this[1], (const UsoGraphNode *)this);
  unint64_t v4 = (snlp::common::text_uso_graph **)v24;
  uint64_t v5 = v25;
  if (v24 != v25)
  {
    do
    {
      long long v6 = v4[1];
      uint64_t v7 = snlp::common::text_uso_graph::bottomUpTreeHash(*v4, (const UsoGraphNode *)v3);
      unint64_t v8 = boost::hash<std::string>::operator()((char *)v6 + 32);
      unint64_t v9 = 3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v8) ^ ((0xC6A4A7935BD1E995 * v8) >> 47))) ^ v7);
      uint64_t v10 = v28;
      if (v28 >= v29)
      {
        uint64_t v12 = (char *)__p;
        uint64_t v13 = (v28 - (unsigned char *)__p) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v29 - (unsigned char *)__p;
        if ((v29 - (unsigned char *)__p) >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v3 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v3 = v14;
        }
        if (v3)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v3);
          uint64_t v12 = (char *)__p;
          uint64_t v10 = v28;
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (unint64_t *)&v16[8 * v13];
        unint64_t *v17 = v9;
        uint64_t v11 = (char *)(v17 + 1);
        while (v10 != v12)
        {
          unint64_t v18 = *((void *)v10 - 1);
          v10 -= 8;
          *--uint64_t v17 = v18;
        }
        long long __p = v17;
        int v28 = v11;
        long long v29 = &v16[8 * v3];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(void *)int v28 = v9;
        uint64_t v11 = v10 + 8;
      }
      int v28 = v11;
      v4 += 2;
    }
    while (v4 != v5);
    unint64_t v4 = (snlp::common::text_uso_graph **)v24;
  }
  if (v4)
  {
    uint64_t v25 = v4;
    operator delete(v4);
  }
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*this + 6))(&v24, this);
  unint64_t v19 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v23, (uint64_t)&v24);
  if (v26 < 0) {
    operator delete(v24);
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (__p != v28)
  {
    unint64_t v20 = (char *)__p;
    do
    {
      uint64_t v21 = *(void *)v20;
      v20 += 8;
      unint64_t v19 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))) ^ v19);
    }
    while (v20 != v28);
  }
  if (__p)
  {
    int v28 = (char *)__p;
    operator delete(__p);
  }
  return v19;
}

void sub_1C8EEBE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::createInvalidTensorNameErrorMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid tensor name: ", 21);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet(&v36, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Tensor description: ", 20);
  int v13 = *(char *)(a1 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = *(void *)a1;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  uint64_t v17 = std::locale::use_facet(&v36, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Valid options are: [", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  unint64_t v19 = std::locale::use_facet(&v36, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    long long v22 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      int v23 = *(char *)(v20 + 23);
      if (v23 >= 0) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = *(void *)v20;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v25 = *(void *)(v20 + 8);
      }
      char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      uint64_t v27 = std::locale::use_facet(&v36, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v36);
      std::ostream::put();
      std::ostream::flush();
      v20 += 24;
    }
    while (v20 != v21);
  }
  int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
  long long v29 = std::locale::use_facet(&v36, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v32[0] = *MEMORY[0x1E4FBA408];
  uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v33[0] = v30;
  v33[1] = MEMORY[0x1E4FBA470] + 16;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v35);
}

void sub_1C8EEC348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::assertValidFeaturePoolingRank(uint64_t result)
{
  if ((result & 0xFFFFFFFE) != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Invalid feature pooling rank: ", 30);
    uint64_t v1 = (void *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v3);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F060;
  }
  return result;
}

void sub_1C8EEC458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL nlv4_inference_orchestrator::inference_engine::isFeaturePoolingRankValid(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

void sub_1C8EED4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  unint64_t v52 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v52;
    operator delete(v52);
  }
  uint64_t v53 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v53;
    operator delete(v53);
  }
  nl_featurization::FeaturizerOutput::~FeaturizerOutput((nl_featurization::FeaturizerOutput *)&STACK[0x248]);
  nl_featurization::FeaturizerInput::~FeaturizerInput((void **)&STACK[0x290]);
  a47 = &STACK[0x2C0];
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  STACK[0x290] = (unint64_t)&STACK[0x320];
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);

  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((void **)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void nl_featurization::FeaturizerOutput::~FeaturizerOutput(nl_featurization::FeaturizerOutput *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)this;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void nl_featurization::FeaturizerInput::~FeaturizerInput(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t nl_featurization::tensor::Tensor<unsigned long>::computeAddress(uint64_t *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = (a4 - (uint64_t)a3) >> 3;
  if (v4 != a2 - a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Given coordinates do not match tensor shape");
LABEL_18:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a2 == a1) {
    return 0;
  }
  unint64_t v5 = a2 - a1;
  if (v4 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = (a4 - (uint64_t)a3) >> 3;
  }
  int v7 = (unint64_t *)a3;
  uint64_t v8 = (unint64_t *)a1;
  do
  {
    unint64_t v10 = *v7++;
    unint64_t v9 = v10;
    unint64_t v11 = *v8++;
    if (v9 >= v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Coordinates exceed bounds of tensor");
      goto LABEL_18;
    }
    --v6;
  }
  while (v6);
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  unint64_t v12 = v5 - 1;
  uint64_t v13 = 1;
  do
  {
    if (v4 <= v12) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v14 = *a3++;
    v6 += v14 * v13;
    uint64_t v15 = *a1++;
    v13 *= v15;
    --v5;
  }
  while (v5);
  return v6;
}

void sub_1C8EED9BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<nl_featurization::Token>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      long long v6 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 32) = 0;
      *(unsigned char *)(v4 - 8) = *(unsigned char *)(v3 - 8);
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nl_featurization::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C8EEDB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8EEDF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::span_matching::MatchedSpan>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nl_featurization::span_matching::MatchedSpan>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nl_featurization::span_matching::MatchedSpan>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    uint64_t v8 = *(void *)(a3 - 32);
    a3 -= 32;
    *(void *)(a7 - 32) = v8;
    a7 -= 32;
    __n128 result = *(__n128 *)(a3 + 8);
    *(void *)(a7 + 24) = *(void *)(a3 + 24);
    *(__n128 *)(a7 + 8) = result;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::constructUDA(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 328);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  memset(v27, 0, 56);
  long long v26 = 0u;
  unint64_t v4 = *(void *)(v3 + 104);
  unint64_t v5 = *(void *)(v3 + 96);
  if (v5 >= v4)
  {
    uint64_t v11 = *(void *)(v3 + 88);
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v11) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1C71C71C71C71C7) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v11) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xE38E38E38E38E3) {
      unint64_t v15 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v15 = v13;
    }
    v28[4] = (void **)(v3 + 104);
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = v15 + 144 * v12;
    v28[0] = (void **)v15;
    v28[1] = (void **)v17;
    v28[3] = (void **)(v15 + 144 * v16);
    long long v18 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    *(void *)(v17 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v17 = v18;
    memset(&v22, 0, sizeof(v22));
    long long v19 = v23;
    *(void *)(v17 + 40) = v24;
    *(_OWORD *)(v17 + 24) = v19;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v17 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v17 + 48) = v20;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v17 + 72) = v26;
    *(void *)(v17 + 96) = 0;
    *(void *)(v17 + 104) = 0;
    *(void *)(v17 + 88) = 0;
    *(_OWORD *)(v17 + 88) = v27[0];
    *(void *)(v17 + 104) = *(void *)&v27[1];
    memset(v27, 0, 24);
    long long v21 = *(_OWORD *)((char *)&v27[2] + 8);
    *(_OWORD *)(v17 + 112) = *(_OWORD *)((char *)&v27[1] + 8);
    *(_OWORD *)(v17 + 128) = v21;
    v28[2] = (void **)(v17 + 144);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v3 + 88), v28);
    unint64_t v10 = *(void *)(v3 + 96);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v28);
  }
  else
  {
    long long v6 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    memset(&v22, 0, sizeof(v22));
    uint64_t v7 = v24;
    *(_OWORD *)(v5 + 24) = v23;
    *(void *)(v5 + 40) = v7;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v5 + 48) = v8;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v5 + 72) = v26;
    *(void *)(v5 + 88) = 0;
    *(void *)(v5 + 96) = 0;
    *(void *)(v5 + 104) = 0;
    *(_OWORD *)(v5 + 88) = v27[0];
    *(void *)(v5 + 104) = *(void *)&v27[1];
    memset(v27, 0, 24);
    long long v9 = *(_OWORD *)((char *)&v27[2] + 8);
    *(_OWORD *)(v5 + 112) = *(_OWORD *)((char *)&v27[1] + 8);
    *(_OWORD *)(v5 + 128) = v9;
    unint64_t v10 = v5 + 144;
  }
  *(void *)(v3 + 96) = v10;
  v28[0] = (void **)v27;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EEE3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::constructIntent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 328);
  if (*(char *)(a1 + 239) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 216), *(void *)(a1 + 224));
  }
  else {
    std::string v42 = *(std::string *)(a1 + 216);
  }
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  memset(v48, 0, 40);
  long long v47 = 0u;
  long long v46 = 0u;
  unint64_t v5 = v4[13];
  unint64_t v6 = v4[12];
  if (v6 >= v5)
  {
    uint64_t v12 = v4[11];
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v12) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x1C71C71C71C71C7) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v12) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xE38E38E38E38E3) {
      unint64_t v16 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v53 = v4 + 13;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v16 + 144 * v13;
    long long v49 = (void **)v16;
    unint64_t v50 = v18;
    unint64_t v52 = v16 + 144 * v17;
    long long v19 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(void *)(v18 + 16) = *((void *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v18 = v19;
    memset(&v42, 0, sizeof(v42));
    long long v20 = v43;
    *(void *)(v18 + 40) = v44;
    *(_OWORD *)(v18 + 24) = v20;
    uint64_t v44 = 0;
    long long v43 = 0uLL;
    long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v18 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v18 + 48) = v21;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v18 + 72) = v46;
    *(void *)(v18 + 96) = 0;
    *(void *)(v18 + 104) = 0;
    *(void *)(v18 + 88) = 0;
    *(_OWORD *)(v18 + 88) = v47;
    *(void *)(v18 + 104) = *(void *)&v48[0];
    long long v47 = 0uLL;
    *(void *)&v48[0] = 0;
    long long v22 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v18 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v18 + 128) = v22;
    unint64_t v51 = v18 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v4 + 11, &v49);
    uint64_t v11 = v4[12];
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v49);
  }
  else
  {
    long long v7 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(void *)(v6 + 16) = *((void *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v6 = v7;
    memset(&v42, 0, sizeof(v42));
    uint64_t v8 = v44;
    *(_OWORD *)(v6 + 24) = v43;
    *(void *)(v6 + 40) = v8;
    uint64_t v44 = 0;
    long long v43 = 0uLL;
    long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v6 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v6 + 48) = v9;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v6 + 72) = v46;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    *(_OWORD *)(v6 + 88) = v47;
    *(void *)(v6 + 104) = *(void *)&v48[0];
    long long v47 = 0uLL;
    *(void *)&v48[0] = 0;
    long long v10 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v6 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v6 + 128) = v10;
    uint64_t v11 = v6 + 144;
  }
  v4[12] = v11;
  long long v49 = (void **)&v47;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 328) + 96);
  *(void *)(a1 + 328) = v23 - 144;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v42 = *(std::string *)a2;
  }
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  if (*(char *)(a1 + 263) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 240), *(void *)(a1 + 248));
  }
  else {
    std::string __p = *(std::string *)(a1 + 240);
  }
  memset(v48, 0, 40);
  long long v47 = 0u;
  long long v46 = 0u;
  unint64_t v24 = *(void *)(v23 - 40);
  unint64_t v25 = *(void *)(v23 - 48);
  if (v25 >= v24)
  {
    uint64_t v31 = *(void *)(v23 - 56);
    unint64_t v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - v31) >> 4);
    unint64_t v33 = v32 + 1;
    if (v32 + 1 > 0x1C71C71C71C71C7) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v24 - v31) >> 4);
    if (2 * v34 > v33) {
      unint64_t v33 = 2 * v34;
    }
    if (v34 >= 0xE38E38E38E38E3) {
      unint64_t v35 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v35 = v33;
    }
    uint64_t v53 = (uint64_t *)(v23 - 40);
    if (v35) {
      unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v35);
    }
    else {
      uint64_t v36 = 0;
    }
    unint64_t v37 = v35 + 144 * v32;
    long long v49 = (void **)v35;
    unint64_t v50 = v37;
    unint64_t v52 = v35 + 144 * v36;
    long long v38 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(void *)(v37 + 16) = *((void *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v37 = v38;
    memset(&v42, 0, sizeof(v42));
    long long v39 = v43;
    *(void *)(v37 + 40) = v44;
    *(_OWORD *)(v37 + 24) = v39;
    uint64_t v44 = 0;
    long long v43 = 0uLL;
    long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v37 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v37 + 48) = v40;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v37 + 72) = v46;
    *(void *)(v37 + 96) = 0;
    *(void *)(v37 + 104) = 0;
    *(void *)(v37 + 88) = 0;
    *(_OWORD *)(v37 + 88) = v47;
    *(void *)(v37 + 104) = *(void *)&v48[0];
    long long v47 = 0uLL;
    *(void *)&v48[0] = 0;
    long long v41 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v37 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v37 + 128) = v41;
    unint64_t v51 = v37 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v23 - 56), &v49);
    unint64_t v30 = *(void *)(v23 - 48);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v49);
  }
  else
  {
    long long v26 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(void *)(v25 + 16) = *((void *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v25 = v26;
    memset(&v42, 0, sizeof(v42));
    uint64_t v27 = v44;
    *(_OWORD *)(v25 + 24) = v43;
    *(void *)(v25 + 40) = v27;
    uint64_t v44 = 0;
    long long v43 = 0uLL;
    long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v25 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v25 + 48) = v28;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v25 + 72) = v46;
    *(void *)(v25 + 88) = 0;
    *(void *)(v25 + 96) = 0;
    *(void *)(v25 + 104) = 0;
    *(_OWORD *)(v25 + 88) = v47;
    *(void *)(v25 + 104) = *(void *)&v48[0];
    long long v47 = 0uLL;
    *(void *)&v48[0] = 0;
    long long v29 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v25 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v25 + 128) = v29;
    unint64_t v30 = v25 + 144;
  }
  *(void *)(v23 - 48) = v30;
  long long v49 = (void **)&v47;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 328) = *(void *)(*(void *)(a1 + 328) + 96) - 144;
}

void sub_1C8EEE9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::PlyStateHandler::doMergePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v10 = a1;
  memset(&v38, 0, sizeof(v38));
  if (*(_DWORD *)(a4 + 288) == 1)
  {
    std::string::size_type v11 = *(void *)(a4 + 96);
    unint64_t v12 = *(void *)(a4 + 248);
    if (v12 > v11) {
      std::string::basic_string(&v38, *(const std::string **)(a1 + 320), v11, v12 - v11, (std::allocator<char> *)&v39);
    }
  }
  uint64_t v13 = *a5;
  uint64_t v14 = a5[1];
  if (*a5 != v14)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    char v17 = a6[23];
    if (v17 >= 0) {
      uint64_t v18 = a6[23];
    }
    else {
      uint64_t v18 = *((void *)a6 + 1);
    }
    if (v17 < 0) {
      a6 = *(unsigned char **)a6;
    }
    std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v38.__r_.__value_.__l.__size_;
    }
    std::string::size_type v37 = size;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v20 = &v38;
    }
    else {
      long long v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    while (1)
    {
      uint64_t v21 = *(unsigned __int8 *)(v13 + 71);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v13 + 71);
      }
      else {
        uint64_t v22 = *(void *)(v13 + 56);
      }
      if (v22 != v18) {
        goto LABEL_47;
      }
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v13 + 48), a6, *(void *)(v13 + 56))) {
          goto LABEL_47;
        }
      }
      else if (*(unsigned char *)(v13 + 71))
      {
        uint64_t v23 = 0;
        while (*(unsigned __int8 *)(v13 + v23 + 48) == a6[v23])
        {
          if (v21 == ++v23) {
            goto LABEL_26;
          }
        }
        goto LABEL_47;
      }
LABEL_26:
      if (*(char *)(v13 + 47) < 0)
      {
        if (!*(void *)(v13 + 32))
        {
LABEL_30:
          unint64_t v24 = v20;
          uint64_t v25 = v18;
          uint64_t v26 = a2;
          uint64_t v27 = v16;
          uint64_t v28 = v10;
          uint64_t v29 = a3;
          int v30 = *(unsigned __int8 *)(v13 + 47);
          size_t v31 = *(void *)(v13 + 32);
          if ((v30 & 0x80u) == 0) {
            uint64_t v32 = *(unsigned __int8 *)(v13 + 47);
          }
          else {
            uint64_t v32 = *(void *)(v13 + 32);
          }
          if (v32 == v37)
          {
            if ((v30 & 0x80) != 0)
            {
              uint64_t v36 = v24;
              if (!memcmp(*(const void **)(v13 + 24), v24, v31)) {
                v15 |= v31 != 0;
              }
              a3 = v29;
              uint64_t v10 = v28;
              uint64_t v16 = v27;
              a2 = v26;
              uint64_t v18 = v25;
              long long v20 = v36;
            }
            else
            {
              a3 = v29;
              uint64_t v10 = v28;
              uint64_t v16 = v27;
              a2 = v26;
              uint64_t v18 = v25;
              long long v20 = v24;
              if (*(unsigned char *)(v13 + 47))
              {
                uint64_t v33 = 0;
                while (*(unsigned __int8 *)(v13 + v33 + 24) == v24->__r_.__value_.__s.__data_[v33])
                {
                  if (*(unsigned __int8 *)(v13 + 47) == ++v33) {
                    goto LABEL_39;
                  }
                }
              }
              else
              {
LABEL_39:
                v15 |= v30 != 0;
              }
            }
          }
          else
          {
            a3 = v29;
            uint64_t v10 = v28;
            uint64_t v16 = v27;
            a2 = v26;
            uint64_t v18 = v25;
            long long v20 = v24;
          }
          goto LABEL_44;
        }
      }
      else if (!*(unsigned char *)(v13 + 47))
      {
        goto LABEL_30;
      }
      uint64_t v16 = 1;
LABEL_44:
      v13 += 144;
      if (v13 == v14) {
        goto LABEL_47;
      }
    }
  }
  LOBYTE(v16) = 0;
  LOBYTE(v15) = 0;
LABEL_47:
  if (a2 && a3)
  {
    if (*(unsigned char *)(v10 + 356))
    {
      a2 = 0;
    }
    else if ((*(void *)(v10 + 400) < 2uLL) | v16 & 1)
    {
      std::string::size_type v34 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v34 = v38.__r_.__value_.__l.__size_;
      }
      a2 = (v34 != 0) & v15;
    }
    else
    {
      a2 = 1;
    }
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  return a2;
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::mergePathToTree(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v107 = 0;
  char v108 = 0;
  unint64_t v109 = 0;
  unint64_t v4 = *(void **)(a1 + 328);
  uint64_t v95 = a1 + 24;
  uint64_t v96 = a1 + 360;
  do
  {
    if (!*(void *)(a1 + 400)) {
      break;
    }
    unint64_t v5 = *(void *)(*(void *)(a1 + 368) + 8 * (*(void *)(a1 + 392) / 0xAAuLL))
       + 24 * (*(void *)(a1 + 392) % 0xAAuLL);
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)v5;
      v106.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v6;
    }
    std::deque<std::string>::pop_front(v96);
    if (*(void *)(a1 + 400) || *(_DWORD *)(v2 + 288))
    {
      std::string v97 = v4;
      long long v7 = v108;
      if ((unint64_t)v108 >= v109)
      {
        long long v9 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v107, (long long *)&v106);
      }
      else
      {
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v108, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v8 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          v108->__r_.__value_.__r.__words[2] = v106.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        }
        long long v9 = v7 + 1;
      }
      char v108 = v9;
      if (v107 >= (unint64_t)&v9[-2]) {
        uint64_t v27 = (long long *)v107;
      }
      else {
        uint64_t v27 = (long long *)&v9[-2];
      }
      memset(&v100, 0, sizeof(v100));
      uint64_t v110 = &v100;
      LOBYTE(v111) = 0;
      if (v9 == (std::string *)v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
      }
      else
      {
        std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](&v100, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v27) >> 3));
        uint64_t v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v100.__r_.__value_.__r.__words[2], v27, (long long *)v9, (std::string *)v100.__r_.__value_.__l.__size_);
        v100.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
        uint64_t v29 = v100.__r_.__value_.__r.__words[0];
      }
      nlv4_inference_orchestrator::trees::join(&v99, v29, (uint64_t)v28, v95);
      uint64_t v110 = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      int v30 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(*(uint64_t **)(*(void *)(a1 + 336) + 16), (unsigned __int8 **)&v99);
      uint64_t v31 = v97[11];
      uint64_t v32 = v97[12];
      uint64_t v33 = v97 + 11;
      if (v32 != v31)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v106.__r_.__value_.__l.__size_;
        }
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v35 = &v106;
        }
        else {
          unint64_t v35 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        do
        {
          uint64_t v36 = *(unsigned __int8 *)(v32 - 73);
          if ((v36 & 0x80u) == 0) {
            uint64_t v37 = *(unsigned __int8 *)(v32 - 73);
          }
          else {
            uint64_t v37 = *(void *)(v32 - 88);
          }
          if (v37 == size)
          {
            if ((v36 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v32 - 96), v35, *(void *)(v32 - 88))) {
                goto LABEL_56;
              }
            }
            else
            {
              if (!*(unsigned char *)(v32 - 73)) {
                goto LABEL_56;
              }
              uint64_t v38 = 0;
              while (*(unsigned __int8 *)(v32 + v38 - 96) == v35->__r_.__value_.__s.__data_[v38])
              {
                if (v36 == ++v38) {
                  goto LABEL_56;
                }
              }
            }
          }
          v32 -= 144;
        }
        while (v32 != v31);
        uint64_t v32 = v31;
LABEL_56:
        uint64_t v2 = a2;
      }
      if (nlv4_inference_orchestrator::trees::PlyStateHandler::doMergePath(a1, v32 != v31, v30 != 0, v2, v33, &v106))
      {
        unint64_t v4 = (void *)(v32 - 144);
        if (*(void *)(a1 + 400))
        {
          unint64_t v39 = *(void *)(*(void *)(a1 + 368) + 8 * (*(void *)(a1 + 392) / 0xAAuLL))
              + 24 * (*(void *)(a1 + 392) % 0xAAuLL);
          long long v40 = v108;
          if ((unint64_t)v108 >= v109)
          {
            unint64_t v52 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v107, (long long *)v39);
          }
          else
          {
            if (*(char *)(v39 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v108, *(const std::string::value_type **)v39, *(void *)(v39 + 8));
            }
            else
            {
              long long v41 = *(_OWORD *)v39;
              v108->__r_.__value_.__r.__words[2] = *(void *)(v39 + 16);
              *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
            }
            unint64_t v52 = v40 + 1;
          }
          unint64_t v4 = (void *)(v32 - 144);
          char v108 = v52;
          std::deque<std::string>::pop_front(v96);
          int v49 = 2;
        }
        else
        {
          int v49 = 2;
        }
      }
      else if (*(void *)(a1 + 400))
      {
        unint64_t v42 = *(void *)(*(void *)(a1 + 368) + 8 * (*(void *)(a1 + 392) / 0xAAuLL))
            + 24 * (*(void *)(a1 + 392) % 0xAAuLL);
        if (*(char *)(v42 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v42, *(void *)(v42 + 8));
        }
        else
        {
          long long v43 = *(_OWORD *)v42;
          v98.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v43;
        }
        std::deque<std::string>::pop_front(v96);
        uint64_t v53 = v108;
        if ((unint64_t)v108 >= v109)
        {
          unint64_t v55 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v107, (long long *)&v98);
        }
        else
        {
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v108, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v54 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
            v108->__r_.__value_.__r.__words[2] = v98.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
          }
          unint64_t v55 = v53 + 1;
        }
        char v108 = v55;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v100, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        }
        else {
          std::string v100 = v98;
        }
        memset(&v101, 0, sizeof(v101));
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v106;
        }
        memset(v105, 0, sizeof(v105));
        long long v103 = 0u;
        long long v104 = 0u;
        unint64_t v56 = v97[13];
        unint64_t v57 = v97[12];
        if (v57 >= v56)
        {
          unint64_t v64 = 0x8E38E38E38E38E39 * ((uint64_t)(v57 - *v33) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x1C71C71C71C71C7) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v56 - *v33) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          uint64_t v67 = (void **)(v66 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v65);
          uint64_t v114 = v97 + 13;
          if (v67) {
            uint64_t v67 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>((unint64_t)v67);
          }
          else {
            uint64_t v68 = 0;
          }
          std::string v69 = &v67[18 * v64];
          uint64_t v110 = (std::string *)v67;
          std::string v111 = v69;
          uint64_t v113 = &v67[18 * v68];
          long long v70 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
          v69[2] = (void *)v100.__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string v69 = v70;
          memset(&v100, 0, sizeof(v100));
          long long v71 = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
          v69[5] = (void *)v101.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v69 + 3) = v71;
          memset(&v101, 0, sizeof(v101));
          long long v72 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v69[8] = (void *)__p.__r_.__value_.__r.__words[2];
          *((_OWORD *)v69 + 3) = v72;
          memset(&__p, 0, sizeof(__p));
          *(_OWORD *)(v69 + 9) = v103;
          v69[12] = 0;
          v69[13] = 0;
          v69[11] = 0;
          *(_OWORD *)(v69 + 11) = v104;
          v69[13] = (void *)v105[0];
          long long v104 = 0uLL;
          v105[0] = 0;
          long long v73 = *(_OWORD *)&v105[3];
          *((_OWORD *)v69 + 7) = *(_OWORD *)&v105[1];
          *((_OWORD *)v69 + 8) = v73;
          uint64_t v112 = v69 + 18;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v33, &v110);
          uint64_t v63 = v97;
          unint64_t v62 = v97[12];
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v110);
        }
        else
        {
          long long v58 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
          *(void *)(v57 + 16) = *((void *)&v100.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v57 = v58;
          memset(&v100, 0, sizeof(v100));
          std::string::size_type v59 = v101.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v57 + 24) = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
          *(void *)(v57 + 40) = v59;
          memset(&v101, 0, sizeof(v101));
          long long v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v57 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v57 + 48) = v60;
          memset(&__p, 0, sizeof(__p));
          *(_OWORD *)(v57 + 72) = v103;
          *(void *)(v57 + 88) = 0;
          *(void *)(v57 + 96) = 0;
          *(void *)(v57 + 104) = 0;
          *(_OWORD *)(v57 + 88) = v104;
          *(void *)(v57 + 104) = v105[0];
          long long v104 = 0uLL;
          v105[0] = 0;
          long long v61 = *(_OWORD *)&v105[3];
          *(_OWORD *)(v57 + 112) = *(_OWORD *)&v105[1];
          *(_OWORD *)(v57 + 128) = v61;
          unint64_t v62 = v57 + 144;
          uint64_t v63 = v97;
        }
        v63[12] = v62;
        uint64_t v110 = (std::string *)&v104;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        uint64_t v74 = v63[12];
        if (v30) {
          *(unsigned char *)(a1 + 356) = 0;
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        int v49 = 0;
        unint64_t v4 = (void *)(v74 - 144);
        uint64_t v2 = a2;
      }
      else if (*(_DWORD *)(v2 + 288) == 1 && (unint64_t v50 = *(void *)(v2 + 96), v51 = *(void *)(v2 + 248), v51 > v50))
      {
        std::string::basic_string(&v98, *(const std::string **)(a1 + 320), *(void *)(v2 + 96), v51 - v50, (std::allocator<char> *)&v110);
        memset(&v100, 0, sizeof(v100));
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v98;
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v106;
        }
        *(void *)&long long v103 = v50;
        *((void *)&v103 + 1) = v51;
        v105[0] = 0;
        long long v104 = 0uLL;
        uint64_t v75 = *(void *)(v2 + 264);
        v105[1] = *(void *)(v2 + 112);
        v105[2] = v75;
        uint64_t v76 = *(void *)(v2 + 280);
        v105[3] = *(void *)(v2 + 128);
        v105[4] = v76;
        unint64_t v77 = v97[13];
        unint64_t v78 = v97[12];
        if (v78 >= v77)
        {
          unint64_t v84 = 0x8E38E38E38E38E39 * ((uint64_t)(v78 - *v33) >> 4);
          unint64_t v85 = v84 + 1;
          if (v84 + 1 > 0x1C71C71C71C71C7) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v86 = 0x8E38E38E38E38E39 * ((uint64_t)(v77 - *v33) >> 4);
          if (2 * v86 > v85) {
            unint64_t v85 = 2 * v86;
          }
          uint64_t v87 = (void **)(v86 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v85);
          uint64_t v114 = v97 + 13;
          if (v87) {
            uint64_t v87 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>((unint64_t)v87);
          }
          else {
            uint64_t v88 = 0;
          }
          uint64_t v89 = &v87[18 * v84];
          uint64_t v110 = (std::string *)v87;
          std::string v111 = v89;
          uint64_t v113 = &v87[18 * v88];
          long long v90 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
          v89[2] = (void *)v100.__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v89 = v90;
          memset(&v100, 0, sizeof(v100));
          long long v91 = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
          v89[5] = (void *)v101.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v89 + 3) = v91;
          memset(&v101, 0, sizeof(v101));
          long long v92 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          uint8_t v89[8] = (void *)__p.__r_.__value_.__r.__words[2];
          *((_OWORD *)v89 + 3) = v92;
          memset(&__p, 0, sizeof(__p));
          *(_OWORD *)(v89 + 9) = v103;
          v89[12] = 0;
          v89[13] = 0;
          v89[11] = 0;
          *(_OWORD *)(v89 + 11) = v104;
          v89[13] = (void *)v105[0];
          long long v104 = 0uLL;
          v105[0] = 0;
          long long v93 = *(_OWORD *)&v105[3];
          *((_OWORD *)v89 + 7) = *(_OWORD *)&v105[1];
          *((_OWORD *)v89 + 8) = v93;
          uint64_t v112 = v89 + 18;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v33, &v110);
          unint64_t v4 = v97;
          unint64_t v83 = v97[12];
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v110);
        }
        else
        {
          long long v79 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
          *(void *)(v78 + 16) = *((void *)&v100.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v78 = v79;
          memset(&v100, 0, sizeof(v100));
          std::string::size_type v80 = v101.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v78 + 24) = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
          *(void *)(v78 + 40) = v80;
          memset(&v101, 0, sizeof(v101));
          long long v81 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v78 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v78 + 48) = v81;
          memset(&__p, 0, sizeof(__p));
          *(_OWORD *)(v78 + 72) = v103;
          *(void *)(v78 + 88) = 0;
          *(void *)(v78 + 96) = 0;
          *(void *)(v78 + 104) = 0;
          *(_OWORD *)(v78 + 88) = v104;
          *(void *)(v78 + 104) = v105[0];
          long long v104 = 0uLL;
          v105[0] = 0;
          long long v82 = *(_OWORD *)&v105[3];
          *(_OWORD *)(v78 + 112) = *(_OWORD *)&v105[1];
          *(_OWORD *)(v78 + 128) = v82;
          unint64_t v83 = v78 + 144;
          unint64_t v4 = v97;
        }
        v4[12] = v83;
        uint64_t v110 = (std::string *)&v104;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        int v49 = 3;
      }
      else
      {
        int v49 = 3;
        unint64_t v4 = v97;
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*(char *)(v2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
      }
      else {
        std::string v100 = *(std::string *)v2;
      }
      memset(&v101, 0, sizeof(v101));
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v106;
      }
      memset(v105, 0, sizeof(v105));
      long long v103 = 0u;
      long long v104 = 0u;
      uint64_t v10 = v4 + 13;
      unint64_t v11 = v4[13];
      unint64_t v12 = v4[12];
      if (v12 >= v11)
      {
        uint64_t v18 = v4;
        uint64_t v21 = v4[11];
        long long v20 = v4 + 11;
        uint64_t v19 = v21;
        unint64_t v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v21) >> 4);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x1C71C71C71C71C7) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - v19) >> 4);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        uint64_t v25 = (void **)(v24 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v23);
        uint64_t v114 = v10;
        if (v25) {
          uint64_t v25 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>((unint64_t)v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v44 = &v25[18 * v22];
        uint64_t v110 = (std::string *)v25;
        std::string v111 = v44;
        uint64_t v113 = &v25[18 * v26];
        long long v45 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
        uint64_t v44[2] = (void *)v100.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v44 = v45;
        memset(&v100, 0, sizeof(v100));
        long long v46 = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
        v44[5] = (void *)v101.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v44 + 3) = v46;
        memset(&v101, 0, sizeof(v101));
        long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v44[8] = (void *)__p.__r_.__value_.__r.__words[2];
        *((_OWORD *)v44 + 3) = v47;
        memset(&__p, 0, sizeof(__p));
        *(_OWORD *)(v44 + 9) = v103;
        v44[12] = 0;
        v44[13] = 0;
        v44[11] = 0;
        *(_OWORD *)(v44 + 11) = v104;
        v44[13] = (void *)v105[0];
        long long v104 = 0uLL;
        v105[0] = 0;
        long long v48 = *(_OWORD *)&v105[3];
        *((_OWORD *)v44 + 7) = *(_OWORD *)&v105[1];
        *((_OWORD *)v44 + 8) = v48;
        uint64_t v112 = v44 + 18;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v20, &v110);
        unint64_t v4 = v18;
        unint64_t v17 = v18[12];
        std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v110);
      }
      else
      {
        long long v13 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
        *(void *)(v12 + 16) = *((void *)&v100.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v12 = v13;
        memset(&v100, 0, sizeof(v100));
        std::string::size_type v14 = v101.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v12 + 24) = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
        *(void *)(v12 + 40) = v14;
        memset(&v101, 0, sizeof(v101));
        long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v12 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)(v12 + 48) = v15;
        memset(&__p, 0, sizeof(__p));
        *(_OWORD *)(v12 + 72) = v103;
        *(void *)(v12 + 88) = 0;
        *(void *)(v12 + 96) = 0;
        *(void *)(v12 + 104) = 0;
        *(_OWORD *)(v12 + 88) = v104;
        *(void *)(v12 + 104) = v105[0];
        long long v104 = 0uLL;
        v105[0] = 0;
        long long v16 = *(_OWORD *)&v105[3];
        *(_OWORD *)(v12 + 112) = *(_OWORD *)&v105[1];
        *(_OWORD *)(v12 + 128) = v16;
        unint64_t v17 = v12 + 144;
      }
      v4[12] = v17;
      uint64_t v110 = (std::string *)&v104;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      int v49 = 3;
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
  }
  while (v49 != 3);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
}

void sub_1C8EEF954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a29);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  a29 = (void *)(v40 - 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void std::deque<std::string>::pop_front(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    unint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(a1 + 40) - 1;
  unint64_t v5 = v2 + 1;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v5 >= 0x154)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, unsigned __int8 **a2)
{
  unint64_t v2 = a1;
  if (a1)
  {
    char v3 = *((unsigned char *)a2 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v4 = a2[1];
    }
    if (v3 >= 0) {
      unint64_t v5 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v5 = *a2;
    }
    do
    {
      uint64_t v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0) {
        long long v7 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
      }
      else {
        long long v7 = (unsigned __int8 *)v2[3];
      }
      if (v7 == v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v2[2], v5, v2[3])) {
            return v2;
          }
        }
        else
        {
          if (!*((unsigned char *)v2 + 39)) {
            return v2;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v2 + v8 + 16) == v5[v8])
          {
            if (v6 == ++v8) {
              return v2;
            }
          }
        }
      }
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t nlv4_inference_orchestrator::trees::PlyStateHandler::resetPath(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  *((unsigned char *)this + 356) = 0;
  uint64_t result = std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>((uint64_t)this + 360);
  if (*((unsigned char *)this + 352)) {
    *((unsigned char *)this + 352) = 0;
  }
  return result;
}

uint64_t std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>(uint64_t result)
{
  uint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  if (v4 == v3)
  {
    unint64_t v5 = 0;
    unint64_t v9 = 0;
    uint64_t v6 = (uint64_t *)(result + 40);
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = (uint64_t *)(v3 + 8 * ((v2 + v7) / 0xAA));
  }
  else
  {
    unint64_t v5 = *(void *)(v3 + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
    uint64_t v6 = (uint64_t *)(result + 40);
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = (uint64_t *)(v3 + 8 * ((v2 + v7) / 0xAA));
    uint64_t result = *v8;
    unint64_t v9 = *v8 + 24 * ((v2 + v7) % 0xAA);
  }
  if (v9 != v5)
  {
    uint64_t v10 = (uint64_t *)(v3 + 8 * (v2 / 0xAA));
    uint64_t result = 170 * (v8 - v10) - 0x5555555555555555 * ((uint64_t)(v9 - *v8) >> 3);
    uint64_t v11 = *v10;
    uint64_t v12 = (uint64_t)(v5 - *v10) >> 3;
    uint64_t v13 = result + 0x5555555555555555 * v12;
    if (v13 >= 1)
    {
      unint64_t v14 = v11 + 24 * (v2 % 0xAA);
      if (v4 == v3) {
        unint64_t v15 = 0;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v5 == v15) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = 0x5555555555555555 * ((uint64_t)(v15 - v11) >> 3) - 0x5555555555555555 * v12;
      }
      long long v20 = v10;
      unint64_t v21 = v15;
      std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](&v20, v16);
      uint64_t v17 = v21;
      if (v21 != v9)
      {
        uint64_t v18 = v20;
        do
        {
          if (*(char *)(v17 + 23) < 0) {
            operator delete(*(void **)v17);
          }
          v17 += 24;
          if (v17 - *v18 == 4080)
          {
            uint64_t v19 = v18[1];
            ++v18;
            uint64_t v17 = v19;
          }
        }
        while (v17 != v9);
        uint64_t v7 = *v6;
      }
      uint64_t *v6 = v7 - v13;
      do
        uint64_t result = std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100](v1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(std::string *result, std::string *__str, std::string *a3, std::string **a4, std::string *this)
{
  uint64_t v6 = a4;
  uint64_t v7 = __str;
  words = result->__r_.__value_.__r.__words;
  if (__str == a3)
  {
    unint64_t v9 = __str;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)this + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3)) < v11) {
        int64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3);
      }
      if (v11)
      {
        uint64_t v12 = v7 + v11;
        uint64_t v13 = 24 * v11;
        do
        {
          uint64_t result = std::string::operator=(this++, v7++);
          v13 -= 24;
        }
        while (v13);
        uint64_t v7 = v12;
      }
      if (v7 == v9) {
        break;
      }
      unint64_t v14 = v6[1];
      ++v6;
      uint64_t v10 = v14;
      this = v14;
    }
    if (&(*v6)[170] == this)
    {
      unint64_t v15 = v6[1];
      ++v6;
      this = v15;
    }
  }
  void *words = v9;
  words[1] = v6;
  words[2] = this;
  return result;
}

uint64_t **std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *result;
    unint64_t v3 = ((uint64_t)result[1] - **result) / 24 + a2;
    if ((uint64_t)v3 < 1)
    {
      unint64_t v6 = 169 - v3;
      uint64_t v7 = &v2[-(v6 / 0xAA)];
      *uint64_t result = v7;
      uint64_t v4 = *v7;
      unint64_t v5 = 169 - v6 % 0xAA;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0xAA];
      uint64_t v4 = v2[v3 / 0xAA];
      unint64_t v5 = v3 % 0xAA;
    }
    result[1] = (uint64_t *)(v4 + 24 * v5);
  }
  return result;
}

BOOL std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 170 * ((v1 - v2) >> 3) - 1;
  }
  unint64_t v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x154)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x153;
}

void std::deque<std::string>::__add_back_capacity(void *a1, uint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  unint64_t v5 = (v3 == (char *)a1[1]) + a2;
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v9 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(void *)&long long v85 = operator new(0xFF0uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
          if (!--v9) {
            goto LABEL_70;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          *(void *)&long long v85 = operator new(0xFF0uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8) {
            uint64_t v60 = 169;
          }
          else {
            uint64_t v60 = 170;
          }
          uint64_t v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 += v9;
      }
      else
      {
LABEL_70:
        uint64_t v61 = a1[4];
      }
      a1[4] = v61 - 170 * v8;
      if (v8)
      {
        unint64_t v62 = (char *)a1[2];
        do
        {
          uint64_t v63 = (void *)a1[1];
          uint64_t v66 = *v63;
          unint64_t v64 = (char *)(v63 + 1);
          uint64_t v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            uint64_t v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1) {
                unint64_t v74 = 1;
              }
              else {
                unint64_t v74 = (uint64_t)&v62[-*a1] >> 2;
              }
              uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
              unint64_t v77 = &v75[8 * (v74 >> 2)];
              unint64_t v78 = (uint64_t *)a1[1];
              unint64_t v62 = v77;
              uint64_t v79 = a1[2] - (void)v78;
              if (v79)
              {
                unint64_t v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v80 = 8 * (v79 >> 3);
                long long v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  uint64_t v82 = *v78++;
                  *(void *)long long v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              unint64_t v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                unint64_t v62 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v68 = v67 >> 3;
              BOOL v22 = v67 >> 3 < -1;
              uint64_t v69 = (v67 >> 3) + 2;
              if (v22) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = v68 + 1;
              }
              long long v71 = &v64[-8 * (v70 >> 1)];
              int64_t v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                unint64_t v62 = (char *)a1[1];
              }
              long long v73 = &v62[-8 * (v70 >> 1)];
              unint64_t v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(void *)unint64_t v62 = v65;
          unint64_t v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        uint64_t v13 = (char *)(v9 + v11);
      }
      else {
        uint64_t v13 = (char *)v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v87 = a1 + 3;
      if (v13) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>((unint64_t)v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = -170 * v8;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = &v13[8 * v14];
      *(void *)&long long v86 = *((void *)&v85 + 1);
      *((void *)&v86 + 1) = &v13[8 * v15];
      do
      {
        unint64_t v84 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        unint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            long long v41 = (char *)*((void *)&v85 + 1);
            unint64_t v42 = (void *)v85;
            if (*((void *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (uint64_t)&v40[-v85] >> 2;
              }
              int v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v48);
              uint64_t v52 = v40 - v41;
              BOOL v51 = v40 == v41;
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *(void *)v41;
                  v41 += 8;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(void *)&long long v85 = v49;
              *((void *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(void *)&long long v86 = v40;
              *((void *)&v86 + 1) = &v49[8 * v50];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1) {
                uint64_t v44 = v43 + 1;
              }
              else {
                uint64_t v44 = v43 + 2;
              }
              uint64_t v45 = *((void *)&v85 + 1) - 8 * (v44 >> 1);
              long long v46 = &v40[-*((void *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((void *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((void *)&v85 + 1)]);
                uint64_t v40 = v41;
              }
              long long v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v46[v45];
              *((void *)&v85 + 1) = v47;
              *(void *)&long long v86 = &v46[v45];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v86 + 8);
          *(void *)&long long v86 = v86 + 8;
          unint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (std::string::size_type j = (void *)a1[2];
            j != (void *)a1[1];
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      unint64_t v57 = (char *)*a1;
      long long v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] += v38;
      if (v57) {
        operator delete(v57);
      }
    }
  }
}

void sub_1C8EF04AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::trees::PlyStateHandler::isFinished(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(*((void *)this + 39) + 8) - **((void **)this + 39)) >> 4) <= *((unsigned int *)this + 86);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::readTag(nlv4_inference_orchestrator::trees::PlyStateHandler *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 357))
  {
    uint64_t v15 = *((void *)this + 34);
    if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)this + 33), v15, (unsigned __int8 **)a2) == v15)
    {
      uint64_t v17 = (char *)this + 72;
      uint64_t v16 = (char *)*((void *)this + 9);
      int v18 = *(char *)(a2 + 23);
      if (v18 >= 0) {
        uint64_t v19 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v19 = *(const std::string::value_type **)a2;
      }
      if (v18 >= 0) {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v20 = *(void *)(a2 + 8);
      }
      int v21 = *((char *)this + 95);
      if (v21 >= 0) {
        BOOL v22 = (char *)this + 72;
      }
      else {
        BOOL v22 = (char *)*((void *)this + 9);
      }
      int64_t v23 = *((void *)this + 10);
      int64_t v24 = *((unsigned __int8 *)this + 95);
      if (v21 >= 0) {
        uint64_t v25 = *((unsigned __int8 *)this + 95);
      }
      else {
        uint64_t v25 = *((void *)this + 10);
      }
      if (v20) {
        BOOL v26 = v25 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26)
      {
        unint64_t v39 = v22;
LABEL_39:
        if (v39 == &v22[v25])
        {
          if (v18 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v220, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            int64_t v24 = *((unsigned __int8 *)this + 95);
            uint64_t v16 = (char *)*((void *)this + 9);
            int64_t v23 = *((void *)this + 10);
            LOBYTE(v21) = *((unsigned char *)this + 95);
          }
          else
          {
            *(_OWORD *)int v220 = *(_OWORD *)a2;
            *(void *)&v220[16] = *(void *)(a2 + 16);
          }
          if (v220[23] >= 0) {
            std::string v106 = v220;
          }
          else {
            std::string v106 = *(unsigned char **)v220;
          }
          if ((v21 & 0x80u) == 0)
          {
            int64_t v107 = v24;
          }
          else
          {
            uint64_t v17 = v16;
            int64_t v107 = v23;
          }
          if (v107)
          {
            if (v220[23] >= 0) {
              uint64_t v108 = v220[23];
            }
            else {
              uint64_t v108 = *(void *)&v220[8];
            }
            unint64_t v109 = &v106[v108];
            if (v108 >= v107)
            {
              int v112 = *v17;
              uint64_t v113 = v106;
              do
              {
                uint64_t v114 = v108 - v107;
                if (v114 == -1) {
                  break;
                }
                uint64_t v115 = (char *)memchr(v113, v112, v114 + 1);
                if (!v115) {
                  break;
                }
                uint64_t v110 = v115;
                if (!memcmp(v115, v17, v107)) {
                  goto LABEL_192;
                }
                uint64_t v113 = v110 + 1;
                uint64_t v108 = v109 - (v110 + 1);
              }
              while (v108 >= v107);
            }
            uint64_t v110 = v109;
LABEL_192:
            if (v110 == v109) {
              std::string::size_type v111 = -1;
            }
            else {
              std::string::size_type v111 = v110 - v106;
            }
          }
          else
          {
            std::string::size_type v111 = 0;
          }
          std::string::erase((std::string *)v220, v111, v107);
          nlv4_inference_orchestrator::trees::PlyStateHandler::constructIntent((uint64_t)this, (uint64_t)v220);
          *((unsigned char *)this + 357) = 1;
          if ((v220[23] & 0x80000000) != 0) {
            operator delete(*(void **)v220);
          }
        }
      }
      else
      {
        uint64_t v37 = v25 - 1;
        uint64_t v38 = v20 - 1;
        unint64_t v39 = v22;
        while (*(unsigned __int8 *)v19 == *v39)
        {
          ++v39;
          if (v38)
          {
            ++v19;
            uint64_t v40 = v37--;
            --v38;
            if (v40) {
              continue;
            }
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      nlv4_inference_orchestrator::trees::PlyStateHandler::constructUDA((uint64_t)this, a2);
    }
    return;
  }
  uint64_t v4 = (unsigned __int8 **)((char *)this + 96);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  int v7 = *(unsigned __int8 *)(a2 + 23);
  size_t v8 = *(void *)(a2 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = *((unsigned __int8 *)this + 119);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)this + 13);
  }
  if (v9 == v10)
  {
    if (v11 >= 0) {
      unint64_t v12 = (unsigned __int8 *)this + 96;
    }
    else {
      unint64_t v12 = *v4;
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v12, *(void *)(a2 + 8))) {
        goto LABEL_114;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_114;
      }
      uint64_t v13 = (unsigned __int8 *)a2;
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v14) {
          goto LABEL_114;
        }
      }
    }
  }
  uint64_t v27 = *((unsigned __int8 *)this + 143);
  int v28 = (char)v27;
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *((void *)this + 16);
  }
  if (v9 == v27)
  {
    if (v28 >= 0) {
      uint64_t v29 = (unsigned __int8 *)this + 120;
    }
    else {
      uint64_t v29 = (unsigned __int8 *)*((void *)this + 15);
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v29, v8)) {
        goto LABEL_114;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_114;
      }
      uint64_t v30 = (unsigned __int8 *)a2;
      uint64_t v31 = v5;
      while (*v30 == *v29)
      {
        ++v30;
        ++v29;
        if (!--v31) {
          goto LABEL_114;
        }
      }
    }
  }
  uint64_t v32 = *((unsigned __int8 *)this + 215);
  int v33 = (char)v32;
  if ((v32 & 0x80u) != 0) {
    uint64_t v32 = *((void *)this + 25);
  }
  if (v9 == v32)
  {
    if (v33 >= 0) {
      uint64_t v34 = (unsigned __int8 *)this + 192;
    }
    else {
      uint64_t v34 = (unsigned __int8 *)*((void *)this + 24);
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v34, v8)) {
        goto LABEL_114;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_114;
      }
      unint64_t v35 = (unsigned __int8 *)a2;
      uint64_t v36 = v5;
      while (*v35 == *v34)
      {
        ++v35;
        ++v34;
        if (!--v36) {
          goto LABEL_114;
        }
      }
    }
  }
  uint64_t v41 = *((unsigned __int8 *)this + 167);
  int v42 = (char)v41;
  if ((v41 & 0x80u) != 0) {
    uint64_t v41 = *((void *)this + 19);
  }
  if (v9 == v41)
  {
    if (v42 >= 0) {
      uint64_t v43 = (unsigned __int8 *)this + 144;
    }
    else {
      uint64_t v43 = (unsigned __int8 *)*((void *)this + 18);
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v43, v8)) {
        goto LABEL_114;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_114;
      }
      uint64_t v44 = (unsigned __int8 *)a2;
      while (*v44 == *v43)
      {
        ++v44;
        ++v43;
        if (!--v5) {
          goto LABEL_114;
        }
      }
    }
  }
  uint64_t v45 = *(const std::string::value_type **)a2;
  if (v6 >= 0) {
    uint64_t v45 = (const std::string::value_type *)a2;
  }
  long long v46 = (char *)*((void *)this + 6);
  int v47 = *((char *)this + 71);
  if (v47 >= 0) {
    long long v46 = (char *)this + 48;
  }
  uint64_t v48 = *((void *)this + 7);
  if (v47 >= 0) {
    uint64_t v48 = *((unsigned __int8 *)this + 71);
  }
  if (v9 && v48)
  {
    uint64_t v49 = v48 - 1;
    uint64_t v50 = v9 - 1;
    BOOL v51 = v46;
    uint64_t v52 = v45;
    while (*(unsigned __int8 *)v52 == *v51)
    {
      ++v51;
      if (v50)
      {
        ++v52;
        uint64_t v53 = v49--;
        --v50;
        if (v53) {
          continue;
        }
      }
      goto LABEL_100;
    }
  }
  else
  {
    BOOL v51 = v46;
LABEL_100:
    if (v51 == &v46[v48]) {
      goto LABEL_114;
    }
  }
  long long v54 = (char *)this + 288;
  int v55 = *((char *)this + 311);
  BOOL v56 = v55 < 0;
  if (v55 < 0) {
    long long v54 = (char *)*((void *)this + 36);
  }
  uint64_t v57 = *((unsigned __int8 *)this + 311);
  if (v56) {
    uint64_t v57 = *((void *)this + 37);
  }
  if (v9 && v57)
  {
    uint64_t v58 = v57 - 1;
    uint64_t v59 = v9 - 1;
    uint64_t v60 = v54;
    while (*(unsigned __int8 *)v45 == *v60)
    {
      ++v60;
      if (v59)
      {
        ++v45;
        uint64_t v61 = v58--;
        --v59;
        if (v61) {
          continue;
        }
      }
      goto LABEL_113;
    }
    goto LABEL_232;
  }
  uint64_t v60 = v54;
LABEL_113:
  if (v60 == &v54[v57])
  {
LABEL_114:
    if (!*((void *)this + 50)) {
      goto LABEL_232;
    }
    unint64_t v62 = (void *)((char *)this + 360);
    uint64_t v63 = (char *)*((void *)this + 6);
    if (v6 >= 0) {
      unint64_t v64 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v64 = *(const std::string::value_type **)a2;
    }
    int v65 = *((char *)this + 71);
    if (v65 >= 0) {
      uint64_t v66 = (char *)this + 48;
    }
    else {
      uint64_t v66 = (char *)*((void *)this + 6);
    }
    int64_t v67 = *((void *)this + 7);
    int64_t v68 = *((unsigned __int8 *)this + 71);
    if (v65 >= 0) {
      uint64_t v69 = *((unsigned __int8 *)this + 71);
    }
    else {
      uint64_t v69 = *((void *)this + 7);
    }
    if (v9 && v69)
    {
      uint64_t v70 = v69 - 1;
      uint64_t v71 = v9 - 1;
      int64_t v72 = v66;
      while (*(unsigned __int8 *)v64 == *v72)
      {
        ++v72;
        if (v71)
        {
          ++v64;
          uint64_t v73 = v70--;
          --v71;
          if (v73) {
            continue;
          }
        }
        goto LABEL_132;
      }
      goto LABEL_230;
    }
    int64_t v72 = v66;
LABEL_132:
    if (v72 != &v66[v69]) {
      goto LABEL_230;
    }
    if ((v7 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v8);
      int64_t v68 = *((unsigned __int8 *)this + 71);
      uint64_t v63 = (char *)*((void *)this + 6);
      int64_t v67 = *((void *)this + 7);
      LOBYTE(v65) = *((unsigned char *)this + 71);
    }
    else
    {
      std::string __p = *(std::string *)a2;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v65 & 0x80u) == 0) {
      uint64_t v75 = (char *)this + 48;
    }
    else {
      uint64_t v75 = v63;
    }
    if ((v65 & 0x80u) == 0) {
      int64_t v76 = v68;
    }
    else {
      int64_t v76 = v67;
    }
    if (v76)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v78 = (char *)p_p + size;
      if (size >= v76)
      {
        int v100 = *v75;
        std::string v101 = p_p;
        do
        {
          int64_t v102 = size - v76;
          if (v102 == -1) {
            break;
          }
          long long v103 = (char *)memchr(v101, v100, v102 + 1);
          if (!v103) {
            break;
          }
          uint64_t v79 = v103;
          if (!memcmp(v103, v75, v76)) {
            goto LABEL_151;
          }
          std::string v101 = (std::string *)(v79 + 1);
          int64_t size = v78 - (v79 + 1);
        }
        while (size >= v76);
      }
      uint64_t v79 = v78;
LABEL_151:
      if (v79 == v78) {
        std::string::size_type v80 = -1;
      }
      else {
        std::string::size_type v80 = v79 - (char *)p_p;
      }
    }
    else
    {
      std::string::size_type v80 = 0;
    }
    std::string::erase(&__p, v80, v76);
    long long v81 = (char *)*((void *)this + 46);
    uint64_t v82 = (char *)*((void *)this + 47);
    unint64_t v83 = (v82 - v81) >> 3;
    if (v82 == v81) {
      uint64_t v84 = 0;
    }
    else {
      uint64_t v84 = 170 * v83 - 1;
    }
    unint64_t v85 = *((void *)this + 49);
    if (v84 != *((void *)this + 50) + v85)
    {
LABEL_222:
      if (v82 == v81)
      {
        long long v137 = 0;
      }
      else
      {
        unint64_t v136 = *((void *)this + 50) + *((void *)this + 49);
        long long v137 = (std::string *)(*(void *)&v81[8 * (v136 / 0xAA)] + 24 * (v136 % 0xAA));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v137, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v138 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v137->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v138;
      }
      ++*((void *)this + 50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_230:
      nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree((uint64_t)this);
      *((unsigned char *)this + 356) = 0;
      std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>((uint64_t)this + 360);
      if (*((unsigned char *)this + 352)) {
        *((unsigned char *)this + 352) = 0;
      }
      goto LABEL_232;
    }
    BOOL v86 = v85 >= 0xAA;
    unint64_t v87 = v85 - 170;
    if (v86)
    {
      *((void *)this + 49) = v87;
      uint64_t v90 = *(void *)v81;
      uint64_t v88 = v81 + 8;
      uint64_t v89 = v90;
      *((void *)this + 46) = v88;
      if (v82 != *((char **)this + 48)) {
        goto LABEL_220;
      }
      uint64_t v91 = (uint64_t)&v88[-*v62];
      if ((unint64_t)v88 > *v62)
      {
        uint64_t v92 = v91 >> 3;
        BOOL v56 = v91 >> 3 < -1;
        uint64_t v93 = (v91 >> 3) + 2;
        if (v56) {
          uint64_t v94 = v93;
        }
        else {
          uint64_t v94 = v92 + 1;
        }
        uint64_t v95 = -(v94 >> 1);
        uint64_t v96 = v94 >> 1;
        std::string v97 = &v88[-8 * v96];
        int64_t v98 = v82 - v88;
        if (v82 != v88)
        {
          memmove(&v88[-8 * v96], v88, v82 - v88);
          uint64_t v82 = (char *)*((void *)this + 46);
        }
        std::string v99 = &v82[8 * v95];
        uint64_t v82 = &v97[v98];
        goto LABEL_169;
      }
      if (v82 == (char *)*v62) {
        unint64_t v122 = 1;
      }
      else {
        unint64_t v122 = (uint64_t)&v82[-*v62] >> 2;
      }
      size_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v122);
      size_t v124 = &v123[8 * (v122 >> 2)];
      size_t v126 = &v123[8 * v125];
      int v127 = (uint64_t *)*((void *)this + 46);
      uint64_t v82 = v124;
      uint64_t v128 = *((void *)this + 47) - (void)v127;
      if (v128)
      {
        uint64_t v82 = &v124[v128 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v129 = 8 * (v128 >> 3);
        size_t v130 = &v123[8 * (v122 >> 2)];
        do
        {
          uint64_t v131 = *v127++;
          *(void *)size_t v130 = v131;
          v130 += 8;
          v129 -= 8;
        }
        while (v129);
      }
    }
    else
    {
      long long v104 = (char *)*((void *)this + 48);
      char v105 = (char *)*((void *)this + 45);
      if (v83 >= (v104 - v105) >> 3)
      {
        if (v104 == v105) {
          unint64_t v116 = 1;
        }
        else {
          unint64_t v116 = (v104 - v105) >> 2;
        }
        BOOL v221 = (char *)this + 384;
        *(void *)int v220 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v116);
        *(void *)&v220[8] = *(void *)v220 + 8 * v83;
        *(void *)&v220[16] = *(void *)&v220[8];
        *(void *)&v220[24] = *(void *)v220 + 8 * v117;
        size_t v219 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v220, &v219);
        for (uint64_t i = (void *)*((void *)this + 47);
              i != *((void **)this + 46);
              std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v220, i))
        {
          --i;
        }
        long long v120 = *(_OWORD *)v220;
        long long v121 = *(_OWORD *)&v220[16];
        *(void *)int v220 = *v62;
        std::string v119 = *(void **)v220;
        *(void *)&v220[8] = i;
        *(_OWORD *)unint64_t v62 = v120;
        *(_OWORD *)((char *)this + 376) = v121;
        if (v119) {
          operator delete(v119);
        }
        goto LABEL_221;
      }
      if (v104 != v82)
      {
        *(void *)int v220 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((void *)this + 45, v220);
LABEL_221:
        long long v81 = (char *)*((void *)this + 46);
        uint64_t v82 = (char *)*((void *)this + 47);
        goto LABEL_222;
      }
      *(void *)int v220 = operator new(0xFF0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)this + 360, v220);
      size_t v133 = (void *)*((void *)this + 46);
      uint64_t v82 = (char *)*((void *)this + 47);
      uint64_t v135 = *v133;
      int v134 = (char *)(v133 + 1);
      uint64_t v89 = v135;
      *((void *)this + 46) = v134;
      if (v82 != *((char **)this + 48))
      {
LABEL_220:
        *(void *)uint64_t v82 = v89;
        *((void *)this + 47) += 8;
        goto LABEL_221;
      }
      uint64_t v203 = (uint64_t)&v134[-*v62];
      if ((unint64_t)v134 > *v62)
      {
        uint64_t v204 = v203 >> 3;
        BOOL v56 = v203 >> 3 < -1;
        uint64_t v205 = (v203 >> 3) + 2;
        if (v56) {
          uint64_t v206 = v205;
        }
        else {
          uint64_t v206 = v204 + 1;
        }
        uint64_t v207 = -(v206 >> 1);
        uint64_t v208 = v206 >> 1;
        uint64_t v209 = &v134[-8 * v208];
        int64_t v210 = v82 - v134;
        if (v82 != v134)
        {
          memmove(&v134[-8 * v208], v134, v82 - v134);
          int v134 = (char *)*((void *)this + 46);
        }
        uint64_t v82 = &v209[v210];
        std::string v99 = &v134[8 * v207];
LABEL_169:
        *((void *)this + 46) = v99;
        *((void *)this + 47) = v82;
        goto LABEL_220;
      }
      if (v82 == (char *)*v62) {
        unint64_t v211 = 1;
      }
      else {
        unint64_t v211 = (uint64_t)&v82[-*v62] >> 2;
      }
      size_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v211);
      size_t v124 = &v123[8 * (v211 >> 2)];
      size_t v126 = &v123[8 * v212];
      v213 = (uint64_t *)*((void *)this + 46);
      uint64_t v82 = v124;
      uint64_t v214 = *((void *)this + 47) - (void)v213;
      if (v214)
      {
        uint64_t v82 = &v124[v214 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v215 = 8 * (v214 >> 3);
        int64_t v216 = &v123[8 * (v211 >> 2)];
        do
        {
          uint64_t v217 = *v213++;
          *(void *)int64_t v216 = v217;
          v216 += 8;
          v215 -= 8;
        }
        while (v215);
      }
    }
    v132 = (void *)*((void *)this + 45);
    *((void *)this + 45) = v123;
    *((void *)this + 46) = v124;
    *((void *)this + 47) = v82;
    *((void *)this + 48) = v126;
    if (v132)
    {
      operator delete(v132);
      uint64_t v82 = (char *)*((void *)this + 47);
    }
    goto LABEL_220;
  }
LABEL_232:
  uint64_t v139 = *(unsigned __int8 *)(a2 + 23);
  size_t v140 = *(void *)(a2 + 8);
  if ((v139 & 0x80u) == 0) {
    uint64_t v141 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v141 = *(void *)(a2 + 8);
  }
  uint64_t v142 = *((unsigned __int8 *)this + 119);
  int v143 = (char)v142;
  if ((v142 & 0x80u) != 0) {
    uint64_t v142 = *((void *)this + 13);
  }
  if (v141 != v142) {
    goto LABEL_248;
  }
  if (v143 >= 0) {
    v144 = (unsigned __int8 *)this + 96;
  }
  else {
    v144 = *v4;
  }
  if ((v139 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v144, *(void *)(a2 + 8))) {
      goto LABEL_248;
    }
LABEL_260:
    ++*((_DWORD *)this + 86);
    return;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_260;
  }
  size_t v145 = (unsigned __int8 *)a2;
  uint64_t v146 = *(unsigned __int8 *)(a2 + 23);
  while (*v145 == *v144)
  {
    ++v145;
    ++v144;
    if (!--v146) {
      goto LABEL_260;
    }
  }
LABEL_248:
  uint64_t v147 = *((unsigned __int8 *)this + 143);
  int v148 = (char)v147;
  if ((v147 & 0x80u) != 0) {
    uint64_t v147 = *((void *)this + 16);
  }
  if (v141 != v147) {
    goto LABEL_262;
  }
  if (v148 >= 0) {
    long long v149 = (unsigned __int8 *)this + 120;
  }
  else {
    long long v149 = (unsigned __int8 *)*((void *)this + 15);
  }
  if ((v139 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v149, v140)) {
      goto LABEL_262;
    }
LABEL_274:
    *((_DWORD *)this + 87) = *((_DWORD *)this + 86);
    *((unsigned char *)this + 352) = 1;
    return;
  }
  if (!v139) {
    goto LABEL_274;
  }
  long long v150 = (unsigned __int8 *)a2;
  uint64_t v151 = v139;
  while (*v150 == *v149)
  {
    ++v150;
    ++v149;
    if (!--v151) {
      goto LABEL_274;
    }
  }
LABEL_262:
  uint64_t v152 = *((unsigned __int8 *)this + 215);
  int v153 = (char)v152;
  if ((v152 & 0x80u) != 0) {
    uint64_t v152 = *((void *)this + 25);
  }
  if (v141 == v152)
  {
    if (v153 >= 0) {
      v154 = (unsigned __int8 *)this + 192;
    }
    else {
      v154 = (unsigned __int8 *)*((void *)this + 24);
    }
    if ((v139 & 0x80) == 0)
    {
      if (v139)
      {
        v155 = (unsigned __int8 *)a2;
        uint64_t v156 = v139;
        while (*v155 == *v154)
        {
          ++v155;
          ++v154;
          if (!--v156) {
            goto LABEL_288;
          }
        }
        goto LABEL_276;
      }
LABEL_288:
      *((unsigned char *)this + 356) = 1;
      return;
    }
    if (!memcmp(*(const void **)a2, v154, v140)) {
      goto LABEL_288;
    }
  }
LABEL_276:
  uint64_t v157 = *((unsigned __int8 *)this + 191);
  int v158 = (char)v157;
  if ((v157 & 0x80u) != 0) {
    uint64_t v157 = *((void *)this + 22);
  }
  if (v141 == v157)
  {
    if (v158 >= 0) {
      v159 = (unsigned __int8 *)this + 168;
    }
    else {
      v159 = (unsigned __int8 *)*((void *)this + 21);
    }
    if ((v139 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v159, v140)) {
        return;
      }
    }
    else
    {
      if (!v139) {
        return;
      }
      size_t v160 = (unsigned __int8 *)a2;
      uint64_t v161 = v139;
      while (*v160 == *v159)
      {
        ++v160;
        ++v159;
        if (!--v161) {
          return;
        }
      }
    }
  }
  size_t v162 = *(const std::string::value_type **)a2;
  if ((v139 & 0x80u) == 0) {
    int v163 = (const std::string::value_type *)a2;
  }
  else {
    int v163 = *(const std::string::value_type **)a2;
  }
  int v164 = *((char *)this + 311);
  BOOL v165 = v164 < 0;
  v166 = (char *)*((void *)this + 36);
  if (v164 >= 0) {
    v166 = (char *)this + 288;
  }
  uint64_t v167 = *((unsigned __int8 *)this + 311);
  if (v165) {
    uint64_t v167 = *((void *)this + 37);
  }
  if (v141 && v167)
  {
    uint64_t v168 = v167 - 1;
    uint64_t v169 = v141 - 1;
    v170 = v166;
    uint64_t v171 = v163;
    while (*(unsigned __int8 *)v171 == *v170)
    {
      ++v170;
      if (v169)
      {
        ++v171;
        uint64_t v172 = v168--;
        --v169;
        if (v172) {
          continue;
        }
      }
      goto LABEL_305;
    }
  }
  else
  {
    v170 = v166;
LABEL_305:
    if (v170 == &v166[v167])
    {
      if ((v139 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v220, *(const std::string::value_type **)a2, v140);
      }
      else
      {
        *(_OWORD *)int v220 = *(_OWORD *)a2;
        *(void *)&v220[16] = *(void *)(a2 + 16);
      }
      uint64_t v191 = v220[23];
      if (v220[23] >= 0) {
        size_t v192 = v220;
      }
      else {
        size_t v192 = *(unsigned char **)v220;
      }
      if (v220[23] < 0) {
        uint64_t v191 = *(void *)&v220[8];
      }
      int v193 = *((char *)this + 311);
      if (v193 >= 0) {
        BOOL v194 = (char *)this + 288;
      }
      else {
        BOOL v194 = (char *)*((void *)this + 36);
      }
      if (v193 >= 0) {
        int64_t v195 = *((unsigned __int8 *)this + 311);
      }
      else {
        int64_t v195 = *((void *)this + 37);
      }
      if (v195)
      {
        unint64_t v196 = &v192[v191];
        if (v191 >= v195)
        {
          int v199 = *v194;
          v200 = v192;
          do
          {
            uint64_t v201 = v191 - v195;
            if (v201 == -1) {
              break;
            }
            v202 = (char *)memchr(v200, v199, v201 + 1);
            if (!v202) {
              break;
            }
            int v197 = v202;
            if (!memcmp(v202, v194, v195)) {
              goto LABEL_353;
            }
            v200 = v197 + 1;
            uint64_t v191 = v196 - (v197 + 1);
          }
          while (v191 >= v195);
        }
        int v197 = v196;
LABEL_353:
        if (v197 == v196) {
          std::string::size_type v198 = -1;
        }
        else {
          std::string::size_type v198 = v197 - v192;
        }
      }
      else
      {
        std::string::size_type v198 = 0;
      }
      std::string::erase((std::string *)v220, v198, v195);
      nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments((uint64_t)this, (int)v220);
    }
  }
  size_t v173 = (char *)*((void *)this + 9);
  int v174 = *((char *)this + 95);
  if (v174 >= 0) {
    size_t v173 = (char *)this + 72;
  }
  uint64_t v175 = *((void *)this + 10);
  if (v174 >= 0) {
    uint64_t v175 = *((unsigned __int8 *)this + 95);
  }
  if (v141 && v175)
  {
    uint64_t v176 = v175 - 1;
    uint64_t v177 = v141 - 1;
    uint64_t v178 = v173;
    while (*(unsigned __int8 *)v163 == *v178)
    {
      ++v178;
      if (v177)
      {
        ++v163;
        uint64_t v179 = v176--;
        --v177;
        if (v179) {
          continue;
        }
      }
      goto LABEL_318;
    }
    goto LABEL_319;
  }
  uint64_t v178 = v173;
LABEL_318:
  if (v178 != &v173[v175])
  {
LABEL_319:
    uint64_t v180 = *((void *)this + 34);
    if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)this + 33), v180, (unsigned __int8 **)a2) != v180)return; {
    uint64_t v181 = *((unsigned __int8 *)this + 167);
    }
    int v182 = (char)v181;
    if ((v181 & 0x80u) != 0) {
      uint64_t v181 = *((void *)this + 19);
    }
    if (v141 == v181)
    {
      if (v182 >= 0) {
        uint64_t v183 = (unsigned __int8 *)this + 144;
      }
      else {
        uint64_t v183 = (unsigned __int8 *)*((void *)this + 18);
      }
      if ((v139 & 0x80) != 0)
      {
        if (!memcmp(v162, v183, v140)) {
          return;
        }
      }
      else
      {
        if (!v139) {
          return;
        }
        uint64_t v184 = v139 - 1;
        uint64_t v185 = (unsigned __int8 *)a2;
        do
        {
          int v187 = *v185++;
          int v186 = v187;
          int v189 = *v183++;
          int v188 = v189;
          BOOL v86 = v184-- != 0;
          char v190 = v86;
        }
        while (v186 == v188 && (v190 & 1) != 0);
        if (v186 == v188) {
          return;
        }
      }
    }
    if (!boost::algorithm::starts_with<std::string,std::string>((unsigned __int8 *)a2, (unsigned __int8 *)this + 48)) {
      nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments((uint64_t)this, a2);
    }
  }
}

void sub_1C8EF137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  operator delete(v21);
  if (__p) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::starts_with<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  if ((a1[23] & 0x80u) != 0)
  {
    uint64_t v3 = *((void *)a1 + 1);
  }
  else
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1[23];
  }
  int v4 = (char)a2[23];
  BOOL v5 = v4 < 0;
  int v6 = *(unsigned __int8 **)a2;
  if (v4 >= 0) {
    int v6 = a2;
  }
  uint64_t v7 = a2[23];
  if (v5) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v12 = v6;
    return v12 == &v6[v7];
  }
  else
  {
    uint64_t v10 = v7 - 1;
    uint64_t v11 = v3 - 1;
    unint64_t v12 = v6;
    while (*v2 == *v12)
    {
      ++v12;
      if (v11)
      {
        ++v2;
        uint64_t v13 = v10--;
        --v11;
        if (v13) {
          continue;
        }
      }
      return v12 == &v6[v7];
    }
    return 0;
  }
}

uint64_t nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 400);
  if (v1)
  {
    uint64_t v2 = this;
    if ((v1 & 1) == 0)
    {
      uint64_t v3 = v1 - 1;
      unint64_t v4 = v3 + *(void *)(this + 392);
      uint64_t v5 = *(void *)(this + 368);
      unint64_t v6 = v4 / 0xAA;
      uint64_t v7 = *(void *)(v5 + 8 * (v4 / 0xAA));
      unint64_t v8 = v4 % 0xAA;
      uint64_t v9 = (long long *)(v7 + 24 * v8);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        uint64_t v5 = *(void *)(v2 + 368);
        uint64_t v3 = *(void *)(v2 + 400) - 1;
        unint64_t v12 = v3 + *(void *)(v2 + 392);
        unint64_t v6 = v12 / 0xAA;
        unint64_t v8 = v12 % 0xAA;
      }
      else
      {
        long long v10 = *v9;
        __p[0].__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v10;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v6) + 24 * v8;
      if (*(char *)(v13 + 23) < 0)
      {
        operator delete(*(void **)v13);
        uint64_t v3 = *(void *)(v2 + 400) - 1;
      }
      *(void *)(v2 + 400) = v3;
      std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100]((void *)(v2 + 360));
      nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments(v2, (int)__p);
    }
    if (*(unsigned char *)(this + 352))
    {
      unsigned int v11 = *(_DWORD *)(this + 348);
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(this + 344);
      *(_DWORD *)(this + 348) = v11;
      *(unsigned char *)(this + 352) = 1;
    }
    uint64_t v14 = **(void **)(this + 312);
    if (0x8E38E38E38E38E39 * ((*(void *)(*(void *)(this + 312) + 8) - v14) >> 4) <= v11) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v15 = (_OWORD *)(v14 + 144 * v11);
    MEMORY[0x1CB773EE0](__p, v15);
    long long v16 = v15[6];
    long long v17 = v15[8];
    long long v25 = v15[7];
    long long v26 = v17;
    long long v24 = v16;
    unint64_t v18 = *(unsigned int *)(v2 + 344);
    uint64_t v19 = **(void **)(v2 + 312);
    if (0x8E38E38E38E38E39 * ((*(void *)(*(void *)(v2 + 312) + 8) - v19) >> 4) <= v18) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v20 = (_OWORD *)(v19 + 144 * v18);
    MEMORY[0x1CB773EE0](v27, v20);
    long long v21 = v20[6];
    long long v22 = v20[8];
    long long v29 = v20[7];
    long long v30 = v22;
    long long v28 = v21;
    MEMORY[0x1CB773EE0](&v31, __p);
    long long v32 = v24;
    long long v33 = v25;
    long long v34 = v26;
    MEMORY[0x1CB773EE0](v35, v27);
    v35[6] = v28;
    v35[7] = v29;
    v35[8] = v30;
    int v36 = 1;
    nlv4_inference_orchestrator::trees::PlyStateHandler::mergePathToTree(v2, (uint64_t)&v31);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,nlv4_inference_orchestrator::trees::PayloadStartEnd>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v31);
    MEMORY[0x1CB773EF0](v27);
    return MEMORY[0x1CB773EF0](__p);
  }
  return this;
}

void sub_1C8EF16F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments(uint64_t a1, int a2)
{
  __dst[3] = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(char *)(a1 + 47);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v3 = a1 + 24;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 47);
  if (v5) {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  v8[0] = v3;
  v8[1] = v3 + v6;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(__dst, (uint64_t)v8);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((int)v7, a2, __dst, 1);
}

void sub_1C8EF22EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  a16 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 != a3)
  {
    uint64_t v9 = *a4;
    uint64_t v10 = a5;
    uint64_t v11 = a3;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
      unint64_t v13 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 3)) >= v12 ? v12 : 0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 3);
      if (v13)
      {
        uint64_t v14 = (long long *)(v11 - 24);
        uint64_t v15 = -24 * v13;
        do
        {
          uint64_t v5 = v10 - 24;
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)v5);
          }
          long long v16 = *v14;
          *(void *)(v5 + 16) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v5 = v16;
          *((unsigned char *)v14 + 23) = 0;
          *(unsigned char *)uint64_t v14 = 0;
          uint64_t v14 = (long long *)((char *)v14 - 24);
          uint64_t v10 = v5;
          v15 += 24;
        }
        while (v15);
      }
      else
      {
        uint64_t v5 = v10;
      }
      v11 -= 24 * v13;
      if (v11 == v7) {
        break;
      }
      uint64_t v17 = *--v6;
      uint64_t v9 = v17;
      uint64_t v10 = v17 + 4080;
    }
    if (*v6 + 4080 == v5)
    {
      uint64_t v18 = v6[1];
      ++v6;
      uint64_t v5 = v18;
    }
    uint64_t v7 = a3;
  }
  *a1 = v7;
  a1[1] = v6;
  a1[2] = v5;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(long long **a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *(void *)a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - a5 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3)) < v11) {
        int64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3);
      }
      if (v11)
      {
        int64_t v12 = (long long *)((char *)v7 + 24 * v11);
        do
        {
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          long long v13 = *v7;
          *(void *)(a5 + 16) = *((void *)v7 + 2);
          *(_OWORD *)a5 = v13;
          a5 += 24;
          *((unsigned char *)v7 + 23) = 0;
          *(unsigned char *)uint64_t v7 = 0;
          uint64_t v7 = (long long *)((char *)v7 + 24);
        }
        while (v7 != v12);
        uint64_t v7 = v12;
      }
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v6 = (long long *)((char *)v6 + 8);
      uint64_t v10 = v14;
      a5 = v14;
    }
    if (*(void *)v6 + 4080 == a5)
    {
      uint64_t v15 = *((void *)v6 + 1);
      uint64_t v6 = (long long *)((char *)v6 + 8);
      a5 = v15;
    }
  }
  *a1 = v9;
  a1[1] = v6;
  a1[2] = (long long *)a5;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,nlv4_inference_orchestrator::trees::PayloadStartEnd>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 288);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F2362760[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 288) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN27nlv4_inference_orchestrator5trees15PayloadStartEndEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1CB773EF0](a2 + 144);
  JUMPOUT(0x1CB773EF0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN27nlv4_inference_orchestrator5trees15PayloadStartEndEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

os_log_t createLogForCategoryString(const char *category)
{
  os_log_t v1 = os_log_create("com.apple.sirinaturallanguageparsing", category);
  return v1;
}

id SNLPOSLoggerForCategory(int a1)
{
  if (SNLPOSLoggerForCategory::onceToken != -1) {
    dispatch_once(&SNLPOSLoggerForCategory::onceToken, &__block_literal_global_4886);
  }
  uint64_t v2 = (void *)SNLPOSLoggerForCategory::logObjects[a1];
  return v2;
}

uint64_t __SNLPOSLoggerForCategory_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.sirinaturallanguageparsing", "General");
  os_log_t v1 = (void *)SNLPOSLoggerForCategory::logObjects[0];
  SNLPOSLoggerForCategory::logObjects[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.sirinaturallanguageparsing", "NLv4");
  uint64_t v3 = (void *)qword_1EBC858F8;
  qword_1EBC858F8 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.sirinaturallanguageparsing", "UaaP");
  uint64_t v5 = (void *)qword_1EBC85908;
  qword_1EBC85908 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.sirinaturallanguageparsing", "Common");
  uint64_t v7 = (void *)qword_1EBC85910;
  qword_1EBC85910 = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.sirinaturallanguageparsing", "OWL");
  uint64_t v9 = (void *)qword_1EBC85918;
  qword_1EBC85918 = (uint64_t)v8;

  os_log_t v10 = os_log_create("com.apple.sirinaturallanguageparsing", "UPDataDetectors");
  int64_t v11 = (void *)qword_1EBC85920;
  qword_1EBC85920 = (uint64_t)v10;

  os_log_t v12 = os_log_create("com.apple.sirinaturallanguageparsing", "SiriNaturalLanguageParsingSignPosts");
  long long v13 = (void *)qword_1EBC85928;
  qword_1EBC85928 = (uint64_t)v12;

  os_log_t v14 = os_log_create("com.apple.sirinaturallanguageparsing", "ITFM");
  uint64_t v15 = (void *)qword_1EBC85900;
  qword_1EBC85900 = (uint64_t)v14;

  qword_1EBC85930 = (uint64_t)os_log_create("com.apple.sirinaturallanguageparsing", "SSU");
  return MEMORY[0x1F41817F8]();
}

uint64_t snlp::common::e5ml::asset_finder::AssetFinder::checkFastReshapeCompatibility(uint64_t a1)
{
  v38[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v36);
  void v35[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>((uint64_t)v31, v36, (uint64_t)v35);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v35);
  uint64_t v27 = v31;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0x8000000000000000;
  char v2 = v31[0];
  if (v31[0])
  {
    if (v31[0] == 2)
    {
      uint64_t v29 = *v32;
    }
    else if (v31[0] == 1)
    {
      uint64_t v28 = *v32;
    }
    else
    {
      unint64_t v30 = 0;
    }
  }
  else
  {
    unint64_t v30 = 1;
  }
  char v3 = 0;
  while (1)
  {
    long long v24 = 0;
    uint64_t v25 = 0;
    int64_t v23 = v31;
    unint64_t v26 = 0x8000000000000000;
    if (v2 == 2)
    {
      uint64_t v25 = v32[1];
    }
    else if (v2 == 1)
    {
      long long v24 = v32 + 1;
    }
    else
    {
      unint64_t v26 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v27, &v23))
    {
      break;
    }
    if (*v27 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v33, "cannot use key() for non-object iterators");
      nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 207, (uint64_t)&v33);
    }
    uint64_t v4 = *(unsigned __int8 *)(v28 + 55);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = *(unsigned __int8 *)(v28 + 55);
    }
    else {
      uint64_t v5 = *(void *)(v28 + 40);
    }
    uint64_t v6 = *(unsigned __int8 *)(a1 + 95);
    int v7 = (char)v6;
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a1 + 80);
    }
    if (v5 == v6)
    {
      os_log_t v8 = (const void **)(v28 + 32);
      if (v7 >= 0) {
        uint64_t v9 = (unsigned __int8 *)(a1 + 72);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(a1 + 72);
      }
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*v8, v9, *(void *)(v28 + 40))) {
          goto LABEL_46;
        }
LABEL_31:
        if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v27) == 1)
        {
          os_log_t v10 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v27);
          long long v24 = 0;
          uint64_t v25 = 0;
          int64_t v23 = v10;
          unint64_t v26 = 0x8000000000000000;
          int v11 = *v10;
          if (v11 == 1)
          {
            long long v24 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((void *)v10 + 1), (void *)(a1 + 96));
          }
          else if (v11 == 2)
          {
            uint64_t v25 = *(void *)(*((void *)v10 + 1) + 8);
          }
          else
          {
            unint64_t v26 = 1;
          }
          os_log_t v12 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v27);
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v19 = v12;
          unint64_t v22 = 0x8000000000000000;
          int v13 = *v12;
          if (v13 == 2)
          {
            uint64_t v21 = *(void *)(*((void *)v12 + 1) + 8);
          }
          else if (v13 == 1)
          {
            uint64_t v20 = *((void *)v12 + 1) + 8;
          }
          else
          {
            unint64_t v22 = 1;
          }
          if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v23, &v19))
          {
            os_log_t v14 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v27);
            if (*(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(v14, (void *)(a1 + 96)) == 3)
            {
              uint64_t v15 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v27);
              long long v16 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(v15, (void *)(a1 + 96));
              LOBYTE(v33) = 3;
              long long v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a1 + 120);
              LODWORD(v16) = nlohmann::operator==(v16, (unsigned __int8 *)&v33);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34, 3);
              if (v16) {
                char v3 = 1;
              }
            }
          }
        }
        goto LABEL_46;
      }
      if (!*(unsigned char *)(v28 + 55)) {
        goto LABEL_31;
      }
      while (*(unsigned __int8 *)v8 == *v9)
      {
        os_log_t v8 = (const void **)((char *)v8 + 1);
        ++v9;
        if (!--v4) {
          goto LABEL_31;
        }
      }
    }
LABEL_46:
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v27);
    char v2 = v31[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
  v36[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v36 + *(void *)(v36[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](&v37);
  std::istream::~istream();
  MEMORY[0x1CB775B50](v38);
  return v3 & 1;
}

void sub_1C8EF2CAC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,long long buf)
{
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a29);
  std::ifstream::~ifstream(&buf);
  if (a2 == 1)
  {
    unint64_t v35 = __cxa_begin_catch(a1);
    int v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v37;
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_ERROR, "E5ML bundle properties parsing failed: %s", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EF2C14);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(unsigned __int8 *a1, void *a2)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v6 = *a1;
    if (v6 > 9) {
      int v7 = "number";
    }
    else {
      int v7 = off_1E6580268[v6];
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    os_log_t v8 = std::string::insert(&v10, 0, "cannot use at() with ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 304, (uint64_t)&v11);
  }
  uint64_t v3 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(*((void *)a1 + 1), &v13, a2);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v3 + 56;
}

void sub_1C8EF2F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      double v12 = (double)*((uint64_t *)a1 + 1);
    }
    else
    {
      if (v3 == 7 && v4 == 5)
      {
        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((uint64_t *)a2 + 1);
        return v10 == v11;
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 != 7 || v4 != 6)
        {
          if (v3 != 6 || v4 != 5)
          {
            uint64_t result = 0;
            if (v3 != 5 || v4 != 6) {
              return result;
            }
          }
          return *((void *)a1 + 1) == *((void *)a2 + 1);
        }
        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((unint64_t *)a2 + 1);
        return v10 == v11;
      }
      double v12 = (double)*((unint64_t *)a1 + 1);
    }
    return *((double *)a2 + 1) == v12;
  }
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      uint64_t v13 = (void *)*((void *)a1 + 1);
      os_log_t v14 = (void *)*((void *)a2 + 1);
      if (v13[2] != v14[2]) {
        return 0;
      }
      uint64_t v17 = (void *)*v13;
      uint64_t v15 = v13 + 1;
      long long v16 = v17;
      if (v17 == v15) {
        return result;
      }
      uint64_t v18 = (void *)*v14;
      break;
    case 2:
      uint64_t v29 = (uint64_t *)*((void *)a1 + 1);
      unint64_t v30 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v31 = *v29;
      uint64_t v32 = v29[1];
      uint64_t v33 = *v30;
      if (v32 - *v29 != v30[1] - *v30) {
        return 0;
      }
      while (v31 != v32)
      {
        uint64_t result = nlohmann::operator==(v31, v33);
        if (!result) {
          break;
        }
        v31 += 16;
        v33 += 16;
      }
      return result;
    case 3:
      long long v34 = (unsigned __int8 *)*((void *)a1 + 1);
      unint64_t v35 = (unsigned __int8 **)*((void *)a2 + 1);
      uint64_t v36 = v34[23];
      if ((v36 & 0x80u) == 0) {
        uint64_t v37 = (unsigned __int8 *)v34[23];
      }
      else {
        uint64_t v37 = (unsigned __int8 *)*((void *)v34 + 1);
      }
      uint64_t v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      int v39 = (char)v38;
      if ((char)v38 < 0) {
        uint64_t v38 = v35[1];
      }
      if (v37 != v38) {
        return 0;
      }
      if (v39 >= 0) {
        uint64_t v40 = (unsigned __int8 *)*((void *)a2 + 1);
      }
      else {
        uint64_t v40 = *v35;
      }
      if ((v36 & 0x80) != 0) {
        return memcmp(*(const void **)v34, v40, *((void *)v34 + 1)) == 0;
      }
      if (v34[23])
      {
        uint64_t v41 = v36 - 1;
        do
        {
          int v43 = *v34++;
          int v42 = v43;
          int v45 = *v40++;
          int v44 = v45;
          BOOL v47 = v41-- != 0;
          uint64_t result = v42 == v44;
        }
        while (v42 == v44 && v47);
      }
      return result;
    case 4:
      int v48 = a1[8];
      int v49 = a2[8];
      return v48 == v49;
    case 5:
    case 6:
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 7:
      double v10 = *((double *)a1 + 1);
      double v11 = *((double *)a2 + 1);
      return v10 == v11;
    case 8:
      uint64_t v50 = *((void *)a1 + 1);
      uint64_t v51 = *((void *)a2 + 1);
      size_t v52 = *(void *)(v50 + 8) - *(void *)v50;
      if (v52 != *(void *)(v51 + 8) - *(void *)v51
        || memcmp(*(const void **)v50, *(const void **)v51, v52)
        || *(unsigned __int8 *)(v50 + 24) != *(unsigned __int8 *)(v51 + 24))
      {
        return 0;
      }
      int v48 = *(unsigned __int8 *)(v50 + 25);
      int v49 = *(unsigned __int8 *)(v51 + 25);
      return v48 == v49;
    default:
      return 0;
  }
  while (1)
  {
    uint64_t v19 = *((unsigned __int8 *)v16 + 55);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *((unsigned __int8 *)v16 + 55);
    }
    else {
      uint64_t v20 = v16[5];
    }
    uint64_t v21 = *((unsigned __int8 *)v18 + 55);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = v18[5];
    }
    if (v20 != v21) {
      return 0;
    }
    int64_t v23 = (const void **)(v16 + 4);
    if (v22 >= 0) {
      long long v24 = (unsigned __int8 *)(v18 + 4);
    }
    else {
      long long v24 = (unsigned __int8 *)v18[4];
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, v16[5])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v16 + 55))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        int64_t v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19) {
          goto LABEL_41;
        }
      }
      return 0;
    }
LABEL_41:
    uint64_t result = nlohmann::operator==(v16 + 7, v18 + 7);
    if (result)
    {
      uint64_t v25 = (void *)v16[1];
      unint64_t v26 = v16;
      if (v25)
      {
        do
        {
          long long v16 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          long long v16 = (void *)v26[2];
          BOOL v6 = *v16 == (void)v26;
          unint64_t v26 = v16;
        }
        while (!v6);
      }
      uint64_t v27 = (void *)v18[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v18[2];
          BOOL v6 = *v28 == (void)v18;
          uint64_t v18 = v28;
        }
        while (!v6);
      }
      uint64_t result = 1;
      uint64_t v18 = v28;
      if (v16 != v15) {
        continue;
      }
    }
    return result;
  }
}

void snlp::common::e5ml::asset_finder::AssetFinder::findAssetTypesPresent(std::__fs::filesystem::path *this@<X0>, const std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this);
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 0;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 0, &v9, (uint64_t)&v10);
    goto LABEL_9;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 2);
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 0;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 2);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 0, &v9, (uint64_t)&v10);
LABEL_9:
    if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    }
  }
  BOOL v6 = this + 1;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 1);
  std::__fs::filesystem::__status(&v10, 0);
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)a2, this + 2);
    std::__fs::filesystem::__status(&v9, 0);
    BOOL v7 = v11 == 1;
    if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)a2, this + 2);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10.__pn_, v9.__pn_.__r_.__value_.__l.__data_, v9.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::__fs::filesystem::path v10 = v9;
  }
  int v8 = snlp::common::e5ml::asset_finder::AssetFinder::checkFastReshapeCompatibility((uint64_t)this);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_26;
    }
  }
  else if (v8)
  {
LABEL_26:
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 2;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, v6);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 2, &v9, (uint64_t)&v10);
    goto LABEL_29;
  }
  LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 1;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, v6);
  std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 1, &v9, (uint64_t)&v10);
LABEL_29:
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EF3674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>(uint64_t *a1, int a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    char v11 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  os_log_t v14 = a1 + 2;
  uint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v8;
  *((_DWORD *)v15 + 4) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((void *)v15 + 5) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v22 = operator new(8 * *(void *)&prime);
          int64_t v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v14;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *uint64_t v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                uint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = (void *)*a1;
        *a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v33 = *a1;
  long long v34 = *(void **)(*a1 + 8 * v4);
  if (v34)
  {
    *(void *)uint64_t v15 = *v34;
LABEL_72:
    *long long v34 = v15;
    goto LABEL_73;
  }
  *(void *)uint64_t v15 = *v14;
  void *v14 = v15;
  *(void *)(v33 + 8 * v4) = v14;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    long long v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
}

void sub_1C8EF3B10(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::SetIdentityPromoter(void *a1, _OWORD **a2)
{
  unint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_SetIdentityPromoter");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, "common_Person.ReferenceTarget_setIdentity");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "setIdentity");
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(a1 + 9, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  return a1;
}

void sub_1C8EF3E54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::promote(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 11);
  int v3 = (uint64_t *)((char *)a2 + 88);
  if (v2 == *((void *)a2 + 12)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 88);
  if (v4 == *(void *)(v2 + 96)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v5 = *(void *)(v4 + 96);
  if (v6 == v5) {
    return 0;
  }
  int v9 = *((char *)this + 71);
  uint8x8_t v10 = (void *)((char *)this + 48);
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v11 = *((void *)this + 7);
  }
  while (1)
  {
    uint64_t v12 = *(unsigned __int8 *)(v6 + 71);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v6 + 71);
    }
    else {
      uint64_t v13 = *(void *)(v6 + 56);
    }
    if (v13 != v11) {
      goto LABEL_21;
    }
    os_log_t v14 = v9 >= 0 ? (unsigned __int8 *)v10 : (unsigned __int8 *)*v10;
    if ((v12 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v6 + 71)) {
      goto LABEL_23;
    }
    uint64_t v15 = 0;
    while (*(unsigned __int8 *)(v6 + v15 + 48) == v14[v15])
    {
      if (v12 == ++v15) {
        goto LABEL_23;
      }
    }
LABEL_21:
    v6 += 144;
    if (v6 == v5) {
      return 0;
    }
  }
  if (memcmp(*(const void **)(v6 + 48), v14, *(void *)(v6 + 56))) {
    goto LABEL_21;
  }
LABEL_23:
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v47 = *(std::string *)((unsigned char *)this + 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "");
  std::string::basic_string[abi:ne180100]<0>(&v50, "task");
  memset(&v53, 0, sizeof(v53));
  long long v52 = 0u;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(&v53, *(long long **)(v6 + 88), *(long long **)(v6 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v6 + 96) - *(void *)(v6 + 88)) >> 4));
  long long v54 = 0u;
  long long v55 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v36, "UserStatedTask");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ROOT");
  std::string v58 = v47;
  uint64_t v60 = v49;
  long long v42 = 0uLL;
  memset(&v47, 0, sizeof(v47));
  long long v59 = v48;
  long long v48 = 0uLL;
  uint64_t v49 = 0;
  long long v61 = v50;
  uint64_t v17 = v51;
  uint64_t v51 = 0;
  long long v50 = 0uLL;
  long long v63 = v52;
  std::string v64 = v53;
  uint64_t v62 = v17;
  memset(&v53, 0, sizeof(v53));
  long long v65 = v54;
  long long v66 = v55;
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  BOOL v56 = (std::string *)&v43;
  char v57 = 0;
  *(void *)&long long v43 = operator new(0x90uLL);
  *((void *)&v43 + 1) = v43;
  uint64_t v44 = v43 + 144;
  *((void *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v44, (nlv4_inference_orchestrator::trees::TreeNode *)&v58, (nlv4_inference_orchestrator::trees::TreeNode *)v67, (std::string *)v43);
  long long v45 = 0u;
  long long v46 = 0u;
  BOOL v56 = &v64;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  unint64_t v18 = *((void *)a2 + 13);
  unint64_t v19 = *((void *)a2 + 12);
  if (v19 >= v18)
  {
    unint64_t v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - *v3) >> 4);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0x1C71C71C71C71C7) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - *v3) >> 4);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0xE38E38E38E38E3) {
      unint64_t v28 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v28 = v26;
    }
    *((void *)&v59 + 1) = (char *)a2 + 104;
    if (v28) {
      unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v28);
    }
    else {
      uint64_t v29 = 0;
    }
    std::string::size_type v30 = v28 + 144 * v25;
    v58.__r_.__value_.__r.__words[0] = v28;
    v58.__r_.__value_.__l.__size_ = v30;
    *(void *)&long long v59 = v28 + 144 * v29;
    long long v31 = *(_OWORD *)v36;
    *(void *)(v30 + 16) = v37;
    *(_OWORD *)std::string::size_type v30 = v31;
    v36[1] = 0;
    uint64_t v37 = 0;
    v36[0] = 0;
    long long v32 = v38;
    *(void *)(v30 + 40) = v39;
    *(_OWORD *)(v30 + 24) = v32;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    long long v33 = __p;
    *(void *)(v30 + 64) = v41;
    *(_OWORD *)(v30 + 48) = v33;
    long long __p = 0uLL;
    uint64_t v41 = 0;
    *(_OWORD *)(v30 + 72) = v42;
    *(void *)(v30 + 96) = 0;
    *(void *)(v30 + 104) = 0;
    *(void *)(v30 + 88) = 0;
    *(_OWORD *)(v30 + 88) = v43;
    *(void *)(v30 + 104) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    long long v34 = v46;
    *(_OWORD *)(v30 + 112) = v45;
    *(_OWORD *)(v30 + 128) = v34;
    v58.__r_.__value_.__r.__words[2] = v30 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v3, &v58);
    unint64_t v24 = *((void *)a2 + 12);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v58);
  }
  else
  {
    long long v20 = *(_OWORD *)v36;
    *(void *)(v19 + 16) = v37;
    *(_OWORD *)unint64_t v19 = v20;
    v36[1] = 0;
    uint64_t v37 = 0;
    v36[0] = 0;
    uint64_t v21 = v39;
    *(_OWORD *)(v19 + 24) = v38;
    *(void *)(v19 + 40) = v21;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    long long v22 = __p;
    *(void *)(v19 + 64) = v41;
    *(_OWORD *)(v19 + 48) = v22;
    uint64_t v41 = 0;
    long long __p = 0uLL;
    *(_OWORD *)(v19 + 72) = v42;
    *(void *)(v19 + 88) = 0;
    *(void *)(v19 + 96) = 0;
    *(void *)(v19 + 104) = 0;
    *(_OWORD *)(v19 + 88) = v43;
    *(void *)(v19 + 104) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    long long v23 = v46;
    *(_OWORD *)(v19 + 112) = v45;
    *(_OWORD *)(v19 + 128) = v23;
    unint64_t v24 = v19 + 144;
  }
  *((void *)a2 + 12) = v24;
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  v36[0] = &v53;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  unint64_t v35 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((long long *)(v6 + 144), *(long long **)(v4 + 96), v6);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v4 + 88, v35);
  return 1;
}

void sub_1C8EF4478(_Unwind_Exception *a1)
{
}

uint64_t snlp::ssu::matcher::SSUMatcherDirectories::toString(snlp::ssu::matcher::SSUMatcherDirectories *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"SSUMatcherDirectories[", 22);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"cacheDirectoryPath=", 19);
  uint64_t v3 = *((unsigned __int8 *)this + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = this;
  }
  else {
    uint64_t v4 = *(snlp::ssu::matcher::SSUMatcherDirectories **)this;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)this + 1);
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v2, v4, (unsigned char *)v4 + v3, 0x22u, 0x5Cu);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", modelAssetsPath=", 18);
  int v6 = *((char *)this + 47);
  if (v6 >= 0) {
    BOOL v7 = (char *)this + 24;
  }
  else {
    BOOL v7 = (unsigned char *)*((void *)this + 3);
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v8 = *((void *)this + 4);
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v5, v7, &v7[v8], 0x22u, 0x5Cu);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", datasetAssetsPath=", 20);
  uint64_t v12 = (unsigned char *)*((void *)this + 6);
  uint64_t v11 = (char *)this + 48;
  uint8x8_t v10 = v12;
  int v13 = v11[23];
  if (v13 >= 0) {
    os_log_t v14 = v11;
  }
  else {
    os_log_t v14 = v10;
  }
  if (v13 >= 0) {
    uint64_t v15 = v11[23];
  }
  else {
    uint64_t v15 = *((void *)v11 + 1);
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v9, v14, &v14[v15], 0x22u, 0x5Cu);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA408];
  uint64_t v16 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[0] = v16;
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v21);
}

void sub_1C8EF47A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::cache::initializeEmptyDirectoryV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  v8[19] = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::ofstream::basic_ofstream(&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kTemporaryDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)&v6 + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1CB7756B0](&v7);
  std::ostream::~ostream();
  return MEMORY[0x1CB775B50](v8);
}

void sub_1C8EF49B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void sub_1C8EF4A04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  JUMPOUT(0x1C8EF49FCLL);
}

void sub_1C8EF4A34()
{
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1CB7756B0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1CB775B50](a1 + 52);
  return a1;
}

void snlp::ssu::cache::renameAllCacheFiles(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&v20, a1, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1CB7759E0](&v17, &v20, 0, 0);
  std::string v4 = v17;
  uint64_t v5 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = v18;
    v16.__imp_.__ptr_ = v4;
    v16.__imp_.__cntrl_ = v5;
    v16.__rec_ = v19;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    v16.__imp_.__ptr_ = v17;
    v16.__imp_.__cntrl_ = 0;
    v16.__rec_ = v19;
  }
  while (v16.__imp_.__ptr_)
  {
    uint64_t v7 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v16);
    if (std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](&v7->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v7->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v15 = __p;
      }
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v8 + 48))(&__p);
      if (v14)
      {
        std::__fs::filesystem::path::parent_path[abi:ne180100](&v7->__p_, (uint64_t)v10);
        if (!v14) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v9.__pn_, (char *)&__p);
        std::__fs::filesystem::operator/[abi:ne180100](&__to.__pn_, (uint64_t)v10, &v9);
        if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__pn_.__r_.__value_.__l.__data_);
        }
        if (v11 < 0) {
          operator delete(v10[0]);
        }
        std::__fs::filesystem::__rename(&v7->__p_, &__to, 0);
        if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__to.__pn_.__r_.__value_.__l.__data_);
        }
        if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
    }
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v16, 0);
  }
  if (v16.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16.__imp_.__cntrl_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EF4D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 17) < 0) {
    operator delete(*(void **)(v40 - 40));
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::makeV3CacheFileName(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v8 = (size_t)a1[1];
  }
  std::__fs::filesystem::path v9 = &v24;
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v8 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::__fs::filesystem::path v9 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint8x8_t v10 = a1;
    }
    else {
      uint8x8_t v10 = *a1;
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 46;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  char v14 = std::string::append(&v24, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::__fs::filesystem::recursive_directory_iterator v16 = std::string::append(&v25, ".");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    BOOL v19 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v19 = *(const std::string::value_type **)a3;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  uint64_t v21 = std::string::append(&v26, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  long long v23 = std::string::append(&v27, ".ssu_cache_file");
  *a4 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EF4FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::cache::migrateDirectoryV1ToV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  v9[19] = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::ofstream::basic_ofstream(&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  v6[0] = &unk_1F2361DA0;
  void v6[3] = v6;
  snlp::ssu::cache::renameAllCacheFiles((uint64_t)this, (uint64_t)v6);
  std::__function::__value_func<std::optional<std::string> ()(std::string const&)>::~__value_func[abi:ne180100](v6);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)&v7 + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1CB7756B0](&v8);
  std::ostream::~ostream();
  return MEMORY[0x1CB775B50](v9);
}

void sub_1C8EF5220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::ofstream::~ofstream(&a25);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::optional<std::string> ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::operator()()
{
  v8[1] = *(std::locale *)MEMORY[0x1E4F143B8];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)&v2, "([0-9a-f]+)%s");
  v0[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v0[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v0[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&v2);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v1, (uint64_t *)&v2);
  if (v7)
  {
    std::locale::~locale(v8);
    char v7 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v6);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
  v0[0].__loc_.__locale_ = (std::locale::__imp *)&v2;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v0);
}

void sub_1C8EF55E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    operator delete(v35);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a28);
  }
  std::locale::~locale(&a22);
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2361DA0;
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2361DA0;
  return result;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::~__func()
{
}

uint64_t snlp::ssu::cache::migrateDirectoryV2ToV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  v9[19] = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::ofstream::basic_ofstream(&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  v6[0] = &unk_1F2361DF8;
  void v6[3] = v6;
  snlp::ssu::cache::renameAllCacheFiles((uint64_t)this, (uint64_t)v6);
  std::__function::__value_func<std::optional<std::string> ()(std::string const&)>::~__value_func[abi:ne180100](v6);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV2Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)&v7 + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1CB7756B0](&v8);
  std::ostream::~ostream();
  return MEMORY[0x1CB775B50](v9);
}

void sub_1C8EF598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::ofstream::~ofstream(&a25);
  _Unwind_Resume(a1);
}

void sub_1C8EF59EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  JUMPOUT(0x1C8EF59E4);
}

void sub_1C8EF5A1C()
{
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::operator()()
{
  v8[1] = *(std::locale *)MEMORY[0x1E4F143B8];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)&v2, "([0-9a-f]+)%s([0-9]+)%s");
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&v2);
  v0[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v0[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v0[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&v2);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v1, (uint64_t *)&v2);
  if (v7)
  {
    std::locale::~locale(v8);
    char v7 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v6);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
  v0[0].__loc_.__locale_ = (std::locale::__imp *)&v2;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v0);
}

void sub_1C8EF5D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v38) {
    operator delete(v38);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a31);
  }
  std::locale::~locale(&a25);
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2361DF8;
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2361DF8;
  return result;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::~__func()
{
}

BOOL snlp::ssu::cache::initializeDirectoryV3(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::__status(this, 0);
  if (__p.__r_.__value_.__s.__data_[0] == 2)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
    std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
    std::__fs::filesystem::__status(&v19, 0);
    unsigned __int8 v3 = v18;
    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v3 && v3 != 255)
    {
      uint8x8_t v10 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v19.__pn_.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "Using existing v3 format directory", (uint8_t *)&v19, 2u);
      }
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV2Name);
      std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
      std::__fs::filesystem::__status(&v19, 0);
      unsigned __int8 v4 = v18;
      if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v4 && v4 != 255)
      {
        int v11 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v13 = this;
          }
          else {
            std::string::size_type v13 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Migrating existing v2 directory: %s", (uint8_t *)&v19, 0xCu);
        }
        snlp::ssu::cache::migrateDirectoryV2ToV3((snlp::ssu::cache *)this, v12);
      }
      else
      {
        std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
        std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
        std::__fs::filesystem::__status(&v19, 0);
        unsigned __int8 v6 = v18;
        if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v6 && v6 != 255)
        {
          char v14 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::__fs::filesystem::recursive_directory_iterator v16 = this;
            }
            else {
              std::__fs::filesystem::recursive_directory_iterator v16 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
            }
            LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
            _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "Migrating existing v1 directory: %s", (uint8_t *)&v19, 0xCu);
          }
          snlp::ssu::cache::migrateDirectoryV1ToV3((snlp::ssu::cache *)this, v15);
        }
        else
        {
          snlp::ssu::cache::initializeEmptyDirectoryV3((snlp::ssu::cache *)this, v5);
        }
      }
    }
    return 1;
  }
  else
  {
    char v7 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::__fs::filesystem::path v9 = this;
      }
      else {
        std::__fs::filesystem::path v9 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "Not a directory: %s", (uint8_t *)&v19, 0xCu);
      return 0;
    }
  }
  return result;
}

void sub_1C8EF61E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long __p, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete((void *)__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a2 == 1)
  {
    long long v22 = __cxa_begin_catch(exception_object);
    long long v23 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v24;
      _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_ERROR, "Hit filesystem during cache directory initialization with error: %s)", (uint8_t *)&__p, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EF609CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t EdgeName = siri::ontology::UsoVocabManager::getEdgeName();
  uint64_t v9 = v8;
  uint8x8_t v10 = SNLPOSLoggerForCategory(1);
  int v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(EdgeName + 8);
      if (*(char *)(EdgeName + 31) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 48))(v23, a2);
      int v13 = v24;
      char v14 = (void **)v23[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 48))(__p, a4);
      long long v15 = v23;
      if (v13 < 0) {
        long long v15 = v14;
      }
      if (v22 >= 0) {
        std::__fs::filesystem::recursive_directory_iterator v16 = __p;
      }
      else {
        std::__fs::filesystem::recursive_directory_iterator v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      std::string v26 = v12;
      __int16 v27 = 2080;
      uint64_t v28 = v15;
      __int16 v29 = 2080;
      std::string::size_type v30 = v16;
      _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Attaching %s edge, binding %s to %s.", buf, 0x20u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    siri::ontology::UsoGraphNode::setSuccessor();
    uint64_t v17 = 1;
    uint64_t v18 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "Insertion of subtree was successful.", buf, 2u);
    }
  }
  else
  {
    uint64_t v17 = 0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0) {
        std::__fs::filesystem::path v19 = (void *)a3;
      }
      else {
        std::__fs::filesystem::path v19 = *(void **)a3;
      }
      *(_DWORD *)std::string buf = 136315138;
      std::string v26 = v19;
      _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEFAULT, "Warning: could not look up ontology name for edge '%s'", buf, 0xCu);
      return 0;
    }
  }
  return v17;
}

void sub_1C8EF653C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long buf)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    uint64_t v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136642819;
      *(void *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "Could not insert subtree: %{sensitive}s ", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EF64FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointIncludingParent(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = *(void *)(*(void *)(a2 + 8) + 8 * (*(void *)(a2 + 32) / 0x1AuLL)) + 152 * (*(void *)(a2 + 32) % 0x1AuLL);
  uint64_t v13 = *(void *)(v11 + 88);
  uint64_t v12 = *(void *)(v11 + 96);
  if (v13 != v12)
  {
    while (1)
    {
      if (*(char *)(a7 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
      }
      else {
        std::string v60 = *(std::string *)a7;
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v60.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = *(unsigned __int8 *)(v13 + 71);
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(v13 + 56);
      }
      if (size == v15)
      {
        if (v16 >= 0) {
          uint64_t v17 = (unsigned __int8 *)(v13 + 48);
        }
        else {
          uint64_t v17 = *(unsigned __int8 **)(v13 + 48);
        }
        if ((*((unsigned char *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::__fs::filesystem::path v19 = (void *)v60.__r_.__value_.__r.__words[0];
          int v20 = memcmp(v60.__r_.__value_.__l.__data_, v17, v60.__r_.__value_.__l.__size_);
          operator delete(v19);
          if (!v20) {
            break;
          }
          goto LABEL_23;
        }
        if (!*((unsigned char *)&v60.__r_.__value_.__s + 23)) {
          break;
        }
        uint64_t v18 = 0;
        while (v60.__r_.__value_.__s.__data_[v18] == v17[v18])
        {
          if (HIBYTE(v60.__r_.__value_.__r.__words[2]) == ++v18) {
            goto LABEL_25;
          }
        }
      }
      if ((*((unsigned char *)&v60.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
LABEL_23:
      v13 += 144;
      if (v13 == v12)
      {
        uint64_t v13 = v12;
        break;
      }
    }
  }
LABEL_25:
  if (v13 == *(void *)(v11 + 96)) {
    return 0;
  }
  std::operator+<char>();
  uint64_t v21 = std::string::append(&v61, "\n");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  long long v23 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    char v24 = &v60;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v24 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    LODWORD(v61.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v61, 0xCu);
  }
  std::string v25 = (std::__shared_weak_count *)a4[1];
  v57[0] = *a4;
  v57[1] = (uint64_t)v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity(a7, v13, a5, (unsigned __int8 *)v11, v57, a6, &v58);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (!v59)
  {
    uint64_t v36 = 0;
    goto LABEL_85;
  }
  std::string v26 = v58;
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v61, (siri::ontology::UsoGraph *)v58[11]->var1, v58[11]);
  std::string::size_type v28 = v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0];
  if (v61.__r_.__value_.__r.__words[0])
  {
    v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v28 == 8)
  {
    siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v61, (siri::ontology::UsoGraph *)v26[11]->var1, v26[11]);
    __int16 v29 = *(UsoGraphNode **)v61.__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
    operator delete(v61.__r_.__value_.__l.__data_);
    (*((void (**)(std::string *__return_ptr, UsoGraphNode *))v29->var0 + 6))(&v61, v29);
    std::string::size_type v30 = (std::__shared_weak_count *)a4[1];
    std::string __p[5] = (void *)*a4;
    __p[6] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v31 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfTimeDateReplacementHackApplies(a1, v29, v11 + 48);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v31)
    {
      uint64_t v32 = siri::ontology::UsoGraph::deepCopyToGraph((siri::ontology::UsoGraph *)v26, v29, a3);
      uint64_t v33 = *(void *)(v11 + 144);
      long long v34 = (void *)*a4;
      unint64_t v35 = (std::__shared_weak_count *)a4[1];
      __p[3] = v34;
      std::string __p[4] = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(v32, v32, a1, v33);
LABEL_77:
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      goto LABEL_79;
    }
    if (nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfCommonIntegerHackApplies(a1, (siri::ontology::UsoGraph **)v29, (unsigned __int8 *)(v11 + 48)))
    {
      uint64_t v37 = siri::ontology::UsoGraph::deepCopyToGraph((siri::ontology::UsoGraph *)v26, v29, a3);
      Successors = siri::ontology::UsoGraph::getSuccessors((uint64_t *)__p, *(siri::ontology::UsoGraph **)(v37 + 8), (const UsoGraphNode *)v37);
      uint64_t v39 = *(void *)__p[0];
      uint64_t v40 = *(void *)(v11 + 144);
      uint64_t v41 = (std::__shared_weak_count *)a4[1];
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode((uint64_t)Successors, v39, v11 + 48, v40);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
LABEL_79:
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(a2);
      uint64_t v36 = 1;
      char v43 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
LABEL_80:
      if ((v43 & 0x80) == 0)
      {
LABEL_83:
        if (!v26) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      long long v48 = (void *)v61.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(v48);
      goto LABEL_83;
    }
    uint64_t v42 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    char v43 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v61.__r_.__value_.__l.__size_;
    }
    uint64_t v45 = *(unsigned __int8 *)(v11 + 23);
    int v46 = (char)v45;
    if ((v45 & 0x80u) != 0) {
      uint64_t v45 = *(void *)(v11 + 8);
    }
    if (v44 != v45)
    {
LABEL_74:
      uint64_t v49 = siri::ontology::UsoGraph::deepCopyToGraph((siri::ontology::UsoGraph *)v26, v29, a3);
      uint64_t v50 = *(void *)(v11 + 144);
      unint64_t v35 = (std::__shared_weak_count *)a4[1];
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(v49, v49, v11 + 48, v50);
      goto LABEL_77;
    }
    if (v46 >= 0) {
      __int16 v27 = (unsigned __int8 *)v11;
    }
    else {
      __int16 v27 = *(unsigned __int8 **)v11;
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v48 = (void *)v61.__r_.__value_.__r.__words[0];
      if (!memcmp(v61.__r_.__value_.__l.__data_, v27, v61.__r_.__value_.__l.__size_))
      {
        uint64_t v36 = 0;
        goto LABEL_82;
      }
      goto LABEL_74;
    }
    if (*((unsigned char *)&v61.__r_.__value_.__s + 23))
    {
      std::string v47 = &v61;
      while (v47->__r_.__value_.__s.__data_[0] == *v27)
      {
        std::string v47 = (std::string *)((char *)v47 + 1);
        ++v27;
        if (!--v42)
        {
          uint64_t v36 = 0;
          goto LABEL_80;
        }
      }
      goto LABEL_74;
    }
  }
  uint64_t v36 = 0;
LABEL_84:
  uint64_t v51 = MEMORY[0x1CB774F40](v26, v27);
  MEMORY[0x1CB775C40](v51, 0x10A0C403D23BABBLL);
LABEL_85:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  return v36;
}

void sub_1C8EF6B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a25);
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfTimeDateReplacementHackApplies(uint64_t a1, const void *a2, std::string::size_type a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t EdgeName = siri::ontology::UsoVocabManager::getEdgeName();
  if (!v7)
  {
    uint64_t v12 = SNLPOSLoggerForCategory(1);
    BOOL v13 = 0;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      return v13;
    }
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v14 = a3;
    }
    else {
      std::string::size_type v14 = *(void *)a3;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEFAULT, "Warning: could not look up ontology name for parent argument '%s'", (uint8_t *)&__p, 0xCu);
    return 0;
  }
  uint64_t v8 = EdgeName;
  if ((*(unsigned int (**)(const void *))(*(void *)a2 + 16))(a2) != 2) {
    return 0;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9[3];
  if (*(char *)(v10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
  }
  else
  {
    long long v11 = *(_OWORD *)(v10 + 8);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)&__p))goto LABEL_32; {
  uint64_t v15 = *(unsigned __int8 *)(a1 + 47);
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(unsigned __int8 *)(v8 + 31);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(v8 + 16);
  }
  if (v16 == v17)
  {
    std::__fs::filesystem::path v19 = (const void **)(a1 + 24);
    long long v22 = *(unsigned __int8 **)(v8 + 8);
    uint64_t v21 = (unsigned __int8 *)(v8 + 8);
    int v20 = v22;
    if (v18 >= 0) {
      long long v23 = v21;
    }
    else {
      long long v23 = v20;
    }
    if ((v15 & 0x80) != 0)
    {
      BOOL v13 = memcmp(*v19, v23, *(void *)(a1 + 32)) == 0;
    }
    else if (*(unsigned char *)(a1 + 47))
    {
      uint64_t v24 = v15 - 1;
      do
      {
        int v26 = *(unsigned __int8 *)v19;
        std::__fs::filesystem::path v19 = (const void **)((char *)v19 + 1);
        int v25 = v26;
        int v28 = *v23++;
        int v27 = v28;
        BOOL v30 = v24-- != 0;
        BOOL v13 = v25 == v27;
      }
      while (v25 == v27 && v30);
    }
    else
    {
      BOOL v13 = 1;
    }
  }
  else
  {
LABEL_32:
    BOOL v13 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v13;
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfCommonIntegerHackApplies(uint64_t a1, siri::ontology::UsoGraph **a2, unsigned __int8 *a3)
{
  char v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 200), a3);
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*a2 + 6))(__p, a2);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 263);
  if ((v6 & 0x80u) == 0) {
    char v7 = (void *)*(unsigned __int8 *)(a1 + 263);
  }
  else {
    char v7 = *(void **)(a1 + 248);
  }
  unint64_t v8 = v20;
  unsigned __int8 v9 = v20;
  if ((v20 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  if (v7 != (void *)v8) {
    goto LABEL_16;
  }
  uint64_t v10 = (const void **)(a1 + 240);
  if ((v20 & 0x80u) == 0) {
    long long v11 = __p;
  }
  else {
    long long v11 = (void **)__p[0];
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(void *)(a1 + 248))) {
      goto LABEL_16;
    }
  }
  else if (*(unsigned char *)(a1 + 263))
  {
    while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      long long v11 = (void **)((char *)v11 + 1);
      if (!--v6) {
        goto LABEL_21;
      }
    }
LABEL_16:
    BOOL v12 = 0;
    if ((v9 & 0x80) == 0) {
      return v5 && v12;
    }
    goto LABEL_17;
  }
LABEL_21:
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v17, a2[1], (const UsoGraphNode *)a2);
  std::string::size_type v14 = v17;
  if (v18 - v17 != 8)
  {
    BOOL v12 = 0;
    if (!v17) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v15, a2[1], (const UsoGraphNode *)a2);
  if (v16 == v15) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  BOOL v12 = (*(uint64_t (**)(void))(**(void **)v15 + 16))() == 4;
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  std::string::size_type v14 = v17;
  if (v17)
  {
LABEL_28:
    int v18 = v14;
    operator delete(v14);
  }
LABEL_29:
  if ((v20 & 0x80) != 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v5 && v12;
}

void sub_1C8EF7044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(uint64_t a1)
{
  std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](*(void *)(*(void *)(a1 + 8)
                                                                                                + 8
                                                                                                * (*(void *)(a1 + 32)
                                                                                                 / 0x1AuLL)) + 152 * (*(void *)(a1 + 32) % 0x1AuLL));
  int64x2_t v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C8F38650);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x34uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 26;
  }
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointOnly(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(*(void *)(a2 + 8) + 8 * (v13 / 0x1A));
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v52 = *(std::string *)a7;
  }
  uint64_t v15 = v14 + 152 * (v13 % 0x1A);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = *(unsigned __int8 *)(v15 + 71);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(v15 + 56);
  }
  if (size != v17)
  {
    if ((*((unsigned char *)&v52.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if (v18 >= 0) {
    std::__fs::filesystem::path v19 = (unsigned __int8 *)(v15 + 48);
  }
  else {
    std::__fs::filesystem::path v19 = *(unsigned __int8 **)(v15 + 48);
  }
  if ((*((unsigned char *)&v52.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((unsigned char *)&v52.__r_.__value_.__s + 23)) {
      goto LABEL_28;
    }
    uint64_t v20 = 0;
    do
    {
      int v21 = v52.__r_.__value_.__s.__data_[v20];
      int v22 = v19[v20];
    }
    while (v21 == v22 && HIBYTE(v52.__r_.__value_.__r.__words[2]) - 1 != v20++);
    if (v21 == v22) {
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v24 = (void *)v52.__r_.__value_.__r.__words[0];
  int v25 = memcmp(v52.__r_.__value_.__l.__data_, v19, v52.__r_.__value_.__l.__size_);
  operator delete(v24);
  if (v25) {
    return 0;
  }
LABEL_28:
  (*(void (**)(std::string *__return_ptr))(**(void **)(v15 + 144) + 48))(&v52);
  std::operator+<char>();
  int v28 = std::string::append(&v53, "\n");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  int64_t v51 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v50 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  BOOL v30 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    BOOL v31 = v50;
    if (v51 < 0) {
      BOOL v31 = (void **)v50[0];
    }
    LODWORD(v53.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v53, 0xCu);
  }
  uint64_t v32 = (std::__shared_weak_count *)a4[1];
  v47[0] = *a4;
  v47[1] = (uint64_t)v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity(a7, v15, a5, (unsigned __int8 *)&v52, v47, a6, &v48);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (!v49)
  {
    BOOL v26 = 0;
    goto LABEL_60;
  }
  uint64_t v33 = v48;
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v53, (siri::ontology::UsoGraph *)v48[11]->var1, v48[11]);
  std::string::size_type v34 = v53.__r_.__value_.__l.__size_ - v53.__r_.__value_.__r.__words[0];
  BOOL v26 = v53.__r_.__value_.__l.__size_ - v53.__r_.__value_.__r.__words[0] == 8;
  if (v53.__r_.__value_.__r.__words[0])
  {
    v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (v34 != 8) {
    goto LABEL_58;
  }
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v53, (siri::ontology::UsoGraph *)v33[11]->var1, v33[11]);
  uint64_t v35 = *(void *)v53.__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
  operator delete(v53.__r_.__value_.__l.__data_);
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v53, *(siri::ontology::UsoGraph **)(v35 + 8), (const UsoGraphNode *)v35);
  std::string::size_type v37 = v53.__r_.__value_.__l.__size_;
  uint64_t v36 = (const UsoGraphNode **)v53.__r_.__value_.__r.__words[0];
  if (v53.__r_.__value_.__r.__words[0] == v53.__r_.__value_.__l.__size_) {
    goto LABEL_55;
  }
  do
  {
    long long v38 = *v36;
    uint64_t v39 = siri::ontology::UsoGraph::deepCopyToGraph((siri::ontology::UsoGraph *)v33, *v36, a3);
    siri::ontology::UsoGraph::getPredecessorsWithEdges((uint64_t *)__p, (siri::ontology::UsoGraph *)v38->var1, v38);
    uint64_t v40 = __p[0];
    uint64_t v41 = *((void *)__p[0] + 1);
    if (*(char *)(v41 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v41 + 32), *(void *)(v41 + 40));
      uint64_t v40 = __p[0];
      if (!__p[0]) {
        goto LABEL_47;
      }
    }
    else
    {
      std::string v46 = *(std::string *)(v41 + 32);
    }
    __p[1] = v40;
    operator delete(v40);
LABEL_47:
    uint64_t v42 = *(void *)(v15 + 144);
    char v43 = (std::__shared_weak_count *)a4[1];
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode((uint64_t)v40, v39, (uint64_t)&v46, v42);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    ++v36;
  }
  while (v36 != (const UsoGraphNode **)v37);
  uint64_t v36 = (const UsoGraphNode **)v53.__r_.__value_.__r.__words[0];
LABEL_55:
  if (v36)
  {
    v53.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    operator delete(v36);
  }
  std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(a2);
  if (v33)
  {
LABEL_58:
    uint64_t v44 = MEMORY[0x1CB774F40](v33);
    MEMORY[0x1CB775C40](v44, 0x10A0C403D23BABBLL);
  }
LABEL_60:
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_1C8EF757C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::reinsertUsoEntity(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t a5, unsigned __int8 *a6)
{
  v31[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v24, "usoEntityInsertionPoint");
  std::string::basic_string[abi:ne180100]<0>(buf, "common_Time");
  std::string::basic_string[abi:ne180100]<0>(v30, "common_Time12HourClock");
  std::string::basic_string[abi:ne180100]<0>(v31, "common_Time24HourClock");
  std::unordered_set<std::string>::unordered_set((uint64_t)v26, buf, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v31[i + 2]) < 0) {
      operator delete((void *)v31[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  unint64_t v13 = (std::__shared_weak_count *)a4[1];
  v23[0] = *a4;
  v23[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointIncludingParent(a1, a2, a3, v23, a5, a6, (uint64_t)v24);
  int v15 = v14;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15)
  {
    BOOL v16 = 1;
    uint64_t v17 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    *(_WORD *)std::string buf = 0;
    int v18 = "Replaced the whole reinsertion subtree including the parent.";
    goto LABEL_19;
  }
  std::__fs::filesystem::path v19 = (std::__shared_weak_count *)a4[1];
  v22[0] = *a4;
  v22[1] = (uint64_t)v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v16 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointOnly(v14, a2, a3, v22, a5, a6, (uint64_t)v24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v16)
  {
    BOOL v16 = 1;
    uint64_t v17 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      int v18 = "Replaced only the reinsertion point itself.";
LABEL_19:
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEBUG, v18, buf, 2u);
    }
  }
LABEL_20:
  if (v28 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v26[2]);
  uint64_t v20 = v26[0];
  v26[0] = 0;
  if (v20) {
    operator delete(v20);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  return v16;
}

void sub_1C8EF78B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::~SpanUsoInserter(&__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::~SpanUsoInserter(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::buildUsoGraphFromTreeNode()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 1;
  int v1 = 0;
  operator new();
}

void sub_1C8EF7FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint8_t buf)
{
}

void sub_1C8EF8024(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long a31)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a21);
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100](v32 - 160);
  if (a2 == 2)
  {
    uint64_t v35 = __cxa_begin_catch(a1);
    uint64_t v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
      LODWORD(a31) = 136315138;
      *(void *)((char *)&a31 + 4) = v37;
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a31, 0xCu);
    }
  }
  else
  {
    if (a2 != 1) {
      JUMPOUT(0x1C8EF7FF0);
    }
    long long v38 = __cxa_begin_catch(a1);
    uint64_t v39 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
      LODWORD(a31) = 136315138;
      *(void *)((char *)&a31 + 4) = v40;
      _os_log_impl(&dword_1C8DA9000, v39, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a31, 0xCu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C8EF7DC4);
}

void sub_1C8EF8074(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long a31)
{
  if (v31) {
    JUMPOUT(0x1C8EF8084);
  }
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100](v32 - 160);
  if (a2 == 2)
  {
    uint64_t v35 = __cxa_begin_catch(a1);
    uint64_t v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
      LODWORD(a31) = 136315138;
      *(void *)((char *)&a31 + 4) = v37;
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a31, 0xCu);
    }
  }
  else
  {
    if (a2 != 1) {
      JUMPOUT(0x1C8EF7FF0);
    }
    long long v38 = __cxa_begin_catch(a1);
    uint64_t v39 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
      LODWORD(a31) = 136315138;
      *(void *)((char *)&a31 + 4) = v40;
      _os_log_impl(&dword_1C8DA9000, v39, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a31, 0xCu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C8EF7DC4);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addEntityNode(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = *(void *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  if ((*(_DWORD *)(a3 + 32) - 5) > 1)
  {
    uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    uint64_t v20 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
    for (uint64_t i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
          v20 != i;
          uint64_t v20 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v20 + 144))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v22, v20);
      uint64_t v32 = EntityNode;
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(a4, (long long *)&v22);
      v33[0] = (void **)&v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v33);
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t OperatorNode = siri::ontology::UsoGraph::createOperatorNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    char v7 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
    for (std::string::size_type j = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
          v7 != j;
          char v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v22, v7);
      uint64_t v9 = a4[1];
      BOOL v10 = a4[2] == v9;
      uint64_t v11 = 26 * ((a4[2] - v9) >> 3) - 1;
      uint64_t v32 = OperatorNode;
      if (v10) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v11;
      }
      unint64_t v13 = a4[5] + a4[4];
      if (v12 == v13)
      {
        std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a4);
        uint64_t v9 = a4[1];
        unint64_t v13 = a4[5] + a4[4];
      }
      unint64_t v14 = *(void *)(v9 + 8 * (v13 / 0x1A)) + 152 * (v13 % 0x1A);
      long long v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(void *)(v14 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v14 = v15;
      memset(&v22, 0, sizeof(v22));
      long long v16 = v23;
      *(void *)(v14 + 40) = v24;
      *(_OWORD *)(v14 + 24) = v16;
      uint64_t v24 = 0;
      long long v23 = 0uLL;
      long long v17 = __p;
      *(void *)(v14 + 64) = v26;
      *(_OWORD *)(v14 + 48) = v17;
      uint64_t v26 = 0;
      long long __p = 0uLL;
      *(_OWORD *)(v14 + 72) = v27;
      *(void *)(v14 + 96) = 0;
      *(void *)(v14 + 104) = 0;
      *(void *)(v14 + 88) = 0;
      *(_OWORD *)(v14 + 88) = v28;
      *(void *)(v14 + 104) = v29;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      long long v18 = v31;
      *(_OWORD *)(v14 + 112) = v30;
      *(_OWORD *)(v14 + 128) = v18;
      *(void *)(v14 + 144) = v32;
      ++a4[5];
      v33[0] = (void **)&v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v33);
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C8EF8488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addTaskNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v7 = a6[4];
  uint64_t v8 = *(void *)(a6[1] + 8 * (v7 / 0x1A));
  siri::ontology::UsoVocabManager::getVerbName();
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v25 = std::string::append(&v38, " not found in ontology.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v8 + 152 * (v7 % 0x1A);
  uint64_t TaskNode = siri::ontology::UsoGraph::createTaskNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  uint64_t v12 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 88);
  for (uint64_t i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 96);
        v12 != i;
        uint64_t v12 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v12 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v27, v12);
    uint64_t v14 = a6[1];
    BOOL v15 = a6[2] == v14;
    uint64_t v16 = 26 * ((a6[2] - v14) >> 3) - 1;
    uint64_t v37 = TaskNode;
    if (v15) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v16;
    }
    unint64_t v18 = a6[5] + a6[4];
    if (v17 == v18)
    {
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a6);
      uint64_t v14 = a6[1];
      unint64_t v18 = a6[5] + a6[4];
    }
    unint64_t v19 = *(void *)(v14 + 8 * (v18 / 0x1A)) + 152 * (v18 % 0x1A);
    long long v20 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
    *(void *)(v19 + 16) = *((void *)&v27.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v19 = v20;
    memset(&v27, 0, sizeof(v27));
    long long v21 = v28;
    *(void *)(v19 + 40) = v29;
    *(_OWORD *)(v19 + 24) = v21;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    long long v22 = __p;
    *(void *)(v19 + 64) = v31;
    *(_OWORD *)(v19 + 48) = v22;
    uint64_t v31 = 0;
    long long __p = 0uLL;
    *(_OWORD *)(v19 + 72) = v32;
    *(void *)(v19 + 96) = 0;
    *(void *)(v19 + 104) = 0;
    *(void *)(v19 + 88) = 0;
    *(_OWORD *)(v19 + 88) = v33;
    *(void *)(v19 + 104) = v34;
    long long v33 = 0uLL;
    uint64_t v34 = 0;
    long long v23 = v36;
    *(_OWORD *)(v19 + 112) = v35;
    *(_OWORD *)(v19 + 128) = v23;
    *(void *)(v19 + 144) = v37;
    ++a6[5];
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8EF8770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 89) < 0)
  {
    operator delete(*(void **)(v16 - 112));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addPayloadNode(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v7 = *(void *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  uint64_t NodeName = siri::ontology::UsoVocabManager::getNodeName();
  if (!v9)
  {
    if ((*(unsigned int (**)(void))(**(void **)(v7 + 144) + 16))(*(void *)(v7 + 144)) == 2)
    {
      uint64_t v10 = *(uint64_t **)(a1 + 176);
      if (!v11) {
        __cxa_bad_cast();
      }
      BOOL v12 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v10, (unsigned __int8 **)(v11[3] + 8)) != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
    unint64_t v13 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(*(uint64_t **)(a1 + 216), (unsigned __int8 **)(v7 + 48));
    if (!v12 && !v13) {
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::addStringPayloadNode(0, a2, (uint64_t)a4);
    }
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::addIntegerPayloadNode((uint64_t)v13, a2, (uint64_t)a4);
  }
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::addDefinedValuePayloadNode(NodeName, a2, NodeName, a4);
}

void sub_1C8EF8980(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    char v9 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      a9 = 0;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "Failed to cast entity node to entity node; SiriOntology reports a non-entity node as an entity node.",
        (uint8_t *)&a9,
        2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EF8960);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addDefinedValuePayloadNode(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = *(void *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  unint64_t v7 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
  for (uint64_t i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
        v7 != i;
        unint64_t v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v9, v7);
    v14[7] = EntityNode;
    std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(a4, (long long *)&v9);
    int v15 = (void **)v14;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8EF8AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addIntegerPayloadNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1C8EF8DC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a11);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    int v15 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a10 + 47) < 0) {
        a9 = (void *)*a9;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a9;
      uint64_t v16 = "Warning: Failed to convert string %s to integer.";
LABEL_11:
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, v16, (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    __cxa_begin_catch(a1);
    int v15 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a10 + 47) < 0) {
        a9 = (void *)*a9;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a9;
      uint64_t v16 = "Warning: Integer %s out of range for USO integer nodes.";
      goto LABEL_11;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C8EF8D88);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addStringPayloadNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3 + 8) + 8 * (*(void *)(a3 + 32) / 0x1AuLL)) + 152 * (*(void *)(a3 + 32) % 0x1AuLL);
  if (*(char *)(v3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 24), *(void *)(v3 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 24);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v3 + 40);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  LOBYTE(v6) = 1;
  siri::ontology::UsoGraph::createStringNode();
  if ((_BYTE)v6)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_1C8EF91DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)(v15 - 104));
  _Unwind_Resume(a1);
}

void std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v40);
      uint64_t v42 = &v41[8 * (v40 >> 2)];
      uint64_t v44 = &v41[8 * v43];
      uint64_t v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        long long v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)long long v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  long long v20 = (char *)a1[2];
  unint64_t v19 = (char *)a1[3];
  long long v21 = (char *)*a1;
  long long v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    char v25 = operator new(0xF70uLL);
    long long v26 = v25;
    if (v19 != v20)
    {
      *(void *)long long v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      std::string v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
      long long v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      long long v55 = (uint64_t *)a1[1];
      BOOL v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        BOOL v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        char v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)char v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      std::string v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        long long v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
      uint64_t v42 = &v41[8 * (v85 >> 2)];
      uint64_t v44 = &v41[8 * v86];
      unint64_t v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        uint64_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)uint64_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
  uint64_t v31 = v30;
  long long v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  uint64_t v34 = operator new(0xF70uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    std::string v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
    long long v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)long long v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    int64_t v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      uint64_t v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
        int64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        unint64_t v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          unint64_t v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          std::string::size_type v80 = v68;
          long long v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)std::string::size_type v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        int64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          uint64_t v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      int64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  uint64_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_1C8EF9700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

__n128 std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v10 = *(long long *)((char *)a2 + 24);
  *(void *)(v8 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v11 = a2[3];
  *(void *)(v8 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(v8 + 48) = v11;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(_OWORD *)(v8 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(v8 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  __n128 result = (__n128)a2[7];
  long long v13 = a2[8];
  *(__n128 *)(v8 + 112) = result;
  *(_OWORD *)(v8 + 128) = v13;
  *(void *)(v8 + 144) = *((void *)a2 + 18);
  ++a1[5];
  return result;
}

void psc_inference_orchestrator::orchestration::PSCOrchestrator::~PSCOrchestrator(psc_inference_orchestrator::orchestration::PSCOrchestrator *this)
{
  *(void *)this = &unk_1F235EC28;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 209);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1CB775C40);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F235EC28;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 209);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
}

void psc_inference_orchestrator::orchestration::PSCOrchestrator::handle(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  psc_inference_orchestrator::orchestration::PSCOverrideGenerator::generateOverrideResponse(a1 + 208, *a2, v8);
  if (v9)
  {
    MEMORY[0x1CB773F90](a3, v8);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    unint64_t v7 = v6;
    itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1, &v7, a3);
    if (v6) {
      (*(void (**)(const sirinluinternalitfm::ITFMParserRequest *))(*(void *)v6 + 8))(v6);
    }
  }
  if (v9) {
    MEMORY[0x1CB773FB0](v8);
  }
}

void sub_1C8EF99DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (a18) {
    MEMORY[0x1CB773FB0](&a11);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::MILCompiler::compileToE5ML(int *a1, uint64_t a2, unsigned __int8 *a3)
{
}

void sub_1C8EF9A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, uint64_t a10, uint64_t a11, long long a12, std::string *a13, void *a14, long long a15, int64_t a16, void *a17, std::string::size_type a18, int a19, __int16 a20,char a21,unsigned __int8 a22)
{
  if (a2)
  {
    if (a2 == 2)
    {
      long long v26 = __cxa_begin_catch(exception_object);
      uint64_t v27 = (char *)(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
      std::string::basic_string[abi:ne180100]<0>(&a17, v27);
      if (*(char *)(v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)v23, *(void *)(v23 + 8));
      }
      else
      {
        std::string __p = *(_OWORD *)v23;
        a10 = *(void *)(v23 + 16);
      }
      unint64_t v28 = std::string::insert((std::string *)&__p, 0, "Failed to find or load cached E5RT bundle for the model mil file at ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      a13 = (std::string *)v28->__r_.__value_.__r.__words[2];
      a12 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append((std::string *)&a12, ".  Cache lookup failed because the following error was encountered during cache lookup: ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(void *)(v25 - 64) = *((void *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)(v25 - 80) = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if ((a22 & 0x80u) == 0) {
        long long v32 = (const std::string::value_type *)&a17;
      }
      else {
        long long v32 = (const std::string::value_type *)a17;
      }
      if ((a22 & 0x80u) == 0) {
        std::string::size_type v33 = a22;
      }
      else {
        std::string::size_type v33 = a18;
      }
      uint64_t v34 = std::string::append((std::string *)(v25 - 80), v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      a16 = v34->__r_.__value_.__r.__words[2];
      a15 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v25 - 57) < 0) {
        operator delete(*(void **)(v25 - 80));
      }
      if (SHIBYTE(a13) < 0) {
        operator delete((void *)a12);
      }
      if (SHIBYTE(a10) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v36 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        ComponentString = snlp::common::logging::getComponentString(*v24);
        uint64_t v38 = &a15;
        if (a16 < 0) {
          uint64_t v38 = (long long *)a15;
        }
        *(_DWORD *)(v25 - 80) = 136315394;
        *(void *)(v25 - 76) = ComponentString;
        *(_WORD *)(v25 - 68) = 2080;
        *(void *)(v25 - 66) = v38;
        _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)(v25 - 80), 0x16u);
      }
      snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceRecompilation((snlp::common::espresso_inference::e5ml::MILCompiler *)v24, v23, v22);
      if (SHIBYTE(a16) < 0) {
        operator delete((void *)a15);
      }
      if ((char)a22 < 0) {
        operator delete(a17);
      }
      __cxa_end_catch();
      JUMPOUT(0x1C8EF9A68);
    }
    if (a2 == 1)
    {
      unint64_t v39 = __cxa_begin_catch(exception_object);
      unint64_t v40 = (char *)(*(uint64_t (**)(void *))(*(void *)v39 + 16))(v39);
      std::string::basic_string[abi:ne180100]<0>(&a17, v40);
      std::operator+<char>();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, (const std::string *)&a15);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceCache(int *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v29 = *(std::string *)a2;
  }
  uint64_t v6 = std::string::insert(&v29, 0, "Attempting E5RT cache lookup for model at ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v28 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = SNLPOSLoggerForCategory(4);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    std::string::size_type v10 = *a1;
    if (v10 >= 8)
    {
      BOOL v12 = SNLPOSLoggerForCategory(4);
      long long v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
        WORD2(v29.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v29, 0x16u);
      }
    }
    else
    {
      long long v11 = off_1E65808C8[v10];
    }
    long long v13 = __p;
    if (v28 < 0) {
      long long v13 = (void **)__p[0];
    }
    LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(v29.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v29, 0x16u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions((snlp::common::espresso_inference::e5ml::MILCompiler *)v9, (E5RT::E5CompilerOptions **)&v29);
  E5RT::E5CompilerOptions::SetForceFetchFromCache((E5RT::E5CompilerOptions *)v29.__r_.__value_.__l.__data_);
  uint64_t v14 = (snlp::common::espresso_inference::e5ml::MILSELFLogger *)(a1 + 2);
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(v14, v15);
  uint64_t v16 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v17 = os_signpost_id_generate(v16);
  uint64_t v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v19 = v18;
    if (os_signpost_enabled(v18))
    {
      LOWORD(v26[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "E5RT Cache Lookup", "", (uint8_t *)v26, 2u);
    }
  }
  long long v20 = SNLPOSLoggerForCategory(0);
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v21)
  {
    LOWORD(v26[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"E5RT Cache Lookup\"", (uint8_t *)v26, 2u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions((E5RT::E5Compiler *)v21, a2, a3);
  long long v22 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v23 = v22;
    if (os_signpost_enabled(v22))
    {
      LOWORD(v26[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v23, OS_SIGNPOST_INTERVAL_END, v17, "E5RT Cache Lookup", "", (uint8_t *)v26, 2u);
    }
  }
  uint64_t v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEFAULT, "END \"E5RT Cache Lookup\"", (uint8_t *)v26, 2u);
  }
  v26[0] = 1;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess((uint64_t)v14, v26);
  std::string::size_type v25 = v29.__r_.__value_.__r.__words[0];
  v29.__r_.__value_.__r.__words[0] = 0;
  if (v25) {
    (*(void (**)(std::string::size_type))(*(void *)v25 + 8))(v25);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8EFA2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

E5RT::E5CompilerOptions *snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceRecompilation(snlp::common::espresso_inference::e5ml::MILCompiler *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions(a1, &v27);
  E5RT::E5CompilerOptions::SetForceRecompilation(v27);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v28 = *(std::string *)a2;
  }
  uint64_t v6 = std::string::insert(&v28, 0, "Attempting E5RT recompilation for model at ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v26 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v10 = *(int *)a1;
    if (v10 >= 8)
    {
      BOOL v12 = SNLPOSLoggerForCategory(4);
      long long v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
        WORD2(v28.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v28, 0x16u);
      }
    }
    else
    {
      long long v11 = off_1E65808C8[v10];
    }
    long long v13 = __p;
    if (v26 < 0) {
      long long v13 = (void **)__p[0];
    }
    LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v28, 0x16u);
  }
  uint64_t v14 = (snlp::common::espresso_inference::e5ml::MILCompiler *)((char *)a1 + 8);
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(v14, v9);
  uint64_t v15 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v16 = os_signpost_id_generate(v15);
  os_signpost_id_t v17 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v18 = v17;
    if (os_signpost_enabled(v17))
    {
      LOWORD(v28.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "E5RT Recompilation from MIL", "", (uint8_t *)&v28, 2u);
    }
  }
  unint64_t v19 = SNLPOSLoggerForCategory(0);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v20)
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_DEFAULT, "BEGIN \"E5RT Recompilation from MIL\"", (uint8_t *)&v28, 2u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions((E5RT::E5Compiler *)v20, a2, a3);
  BOOL v21 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v22 = v21;
    if (os_signpost_enabled(v21))
    {
      LOWORD(v28.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v22, OS_SIGNPOST_INTERVAL_END, v16, "E5RT Recompilation from MIL", "", (uint8_t *)&v28, 2u);
    }
  }
  uint64_t v23 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEFAULT, "END \"E5RT Recompilation from MIL\"", (uint8_t *)&v28, 2u);
  }
  LODWORD(v28.__r_.__value_.__l.__data_) = 2;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess((uint64_t)v14, (int *)&v28);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  __n128 result = v27;
  uint64_t v27 = 0;
  if (result) {
    return (E5RT::E5CompilerOptions *)(*(uint64_t (**)(E5RT::E5CompilerOptions *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C8EFA76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions@<X0>(snlp::common::espresso_inference::e5ml::MILCompiler *this@<X0>, E5RT::E5CompilerOptions **a2@<X8>)
{
  E5RT::E5CompilerOptions::Create(this);
  BOOL v3 = operator new(8uLL);
  std::string __p = v3;
  *BOOL v3 = 1;
  uint64_t v6 = v3 + 1;
  long long v7 = v3 + 1;
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bnns");
  E5RT::E5CompilerOptions::SetPreferredCpuBackend();
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  return E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(*a2);
}

void sub_1C8EFA954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *v15;
  *uint64_t v15 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

E5RT::ProgramLibrary *snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions(E5RT::E5Compiler *a1, uint64_t a2, unsigned __int8 *a3)
{
  E5RT::E5Compiler::GetCompiler(a1);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  E5RT::E5Compiler::Compile();
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v17);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(ExportedFunctions, a3))
  {
    std::operator+<char>();
    std::string::size_type v10 = std::string::append(&v15, " function could not be found in the E5-ML program.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v13 = &v16;
    }
    else {
      long long v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, (char *)v13);
    std::runtime_error::runtime_error(exception, &v15);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(ExportedFunctions, a3);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  uint64_t v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::string::size_type v8 = v16.__r_.__value_.__r.__words[0];
  v16.__r_.__value_.__r.__words[0] = 0;
  if (v8) {
    (*(void (**)(std::string::size_type))(*(void *)v8 + 8))(v8);
  }
  __n128 result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C8EFABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0) {
        operator delete(a18);
      }
      uint64_t v27 = *(void *)(v25 - 56);
      *(void *)(v25 - 56) = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void sub_1C8EFACE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8EFACD8);
}

nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *std::unique_ptr<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>::reset[abi:ne180100](nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator **a1, nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::~NLv4InferenceOrchestrator(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::~NLv4InferenceOrchestrator(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder((void **)this + 319);
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder((void **)this + 282);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 281);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 279);
  *((void *)this + 279) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*((void **)this + 276));
  if (*((unsigned char *)this + 2192) && *((char *)this + 2191) < 0) {
    operator delete(*((void **)this + 271));
  }
  MEMORY[0x1CB7740A0]((char *)this + 2136);
  uint64_t v4 = *((void *)this + 265);
  *((void *)this + 265) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer((void **)this + 171);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)this + 784));
  std::mutex::~mutex((std::mutex *)((char *)this + 720));
  if (*((unsigned char *)this + 712))
  {
    uint64_t v5 = *((void *)this + 88);
    *((void *)this + 88) = 0;
    if (v5) {
      std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v5);
    }
  }
  long long v7 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 640);
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 440);
  MEMORY[0x1CB774070]((char *)this + 416);
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_1C8EFB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1C8EFBA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  MEMORY[0x1CB775C40](v51, 0x10B2C40ABA1E16ELL);
  snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(&a21);
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a2 == 3)
  {
    long long v55 = __cxa_begin_catch(a1);
    BOOL v56 = NSString;
    (*(void (**)(void *))(*(void *)v55 + 16))(v55);
    uint64_t v57 = [v56 stringWithFormat:@"Hit SNLP exception while constructing C++ orchestrator with asset directory %@: %s"];
    uint64_t v58 = (void *)v57;
    if (v50)
    {
      char v59 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v60 = *MEMORY[0x1E4F28588];
      *(void *)(v52 - 200) = *MEMORY[0x1E4F28568];
      *(void *)(v52 - 192) = v60;
      *(void *)(v52 - 184) = v57;
      *(void *)(v52 - 176) = v57;
      std::string v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 - 184 forKeys:v52 - 200 count:2];
      *uint64_t v50 = [v59 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:2 userInfo:v61];
    }
  }
  else
  {
    if (a2 != 2)
    {

      _Unwind_Resume(a1);
    }
    uint64_t v62 = __cxa_begin_catch(a1);
    unint64_t v63 = NSString;
    (*(void (**)(void *))(*(void *)v62 + 16))(v62);
    uint64_t v64 = [v63 stringWithFormat:@"NLv4 Asset Error when creating the C++ NLv4 orchestrator: %s"];
    uint64_t v58 = (void *)v64;
    if (v50)
    {
      uint64_t v65 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v66 = *MEMORY[0x1E4F28588];
      *(void *)(v52 - 168) = *MEMORY[0x1E4F28568];
      *(void *)(v52 - 160) = v66;
      *(void *)(v52 - 152) = v64;
      *(void *)(v52 - 144) = v64;
      int64_t v67 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 - 152 forKeys:v52 - 168 count:2];
      *uint64_t v50 = [v65 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:3 userInfo:v67];
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C8EFB86CLL);
}

void snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_1C8EFCE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EFD15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8EFD42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  MEMORY[0x1CB775C40](v25, 0x80C40D6874129);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

std::string *nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations(std::string *this, long long *a2, _OWORD **a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  this[1].__r_.__value_.__s.__data_[0] = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::requiredForLocale((unsigned __int8 **)this);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::ContactTypeSplit((nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *)&this[1].__r_.__value_.__r.__words[1], a3, (unsigned int **)a4);
  std::string::basic_string[abi:ne180100]<0>(this[9].__r_.__value_.__r.__words, "TreeManipulation_DefaultValueMediaPlaybackSpeed");
  uint64_t v15 = a5;
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  this[10].__r_.__value_.__r.__words[2] = 0;
  std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(this[10].__r_.__value_.__r.__words, *(void *)a4, *(void *)(a4 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  LODWORD(this[11].__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&this[11].__r_.__value_.__l.__size_, "mediaPlaybackSpeed");
  std::string::basic_string[abi:ne180100]<0>(&this[12].__r_.__value_.__l.__size_, "common_Decimal");
  std::string::basic_string[abi:ne180100]<0>(&this[13].__r_.__value_.__l.__size_, "common_Number_DefaultValue");
  std::string::basic_string[abi:ne180100]<0>(&this[14].__r_.__value_.__l.__size_, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>(&this[15].__r_.__value_.__l.__size_, "common_Number");
  std::string::basic_string[abi:ne180100]<0>(&this[16].__r_.__value_.__l.__size_, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>(&this[17].__r_.__value_.__l.__size_, "common_SettingValue");
  std::string::basic_string[abi:ne180100]<0>(&this[18].__r_.__value_.__l.__size_, "canonicalString");
  std::string::basic_string[abi:ne180100]<0>(&this[19].__r_.__value_.__l.__size_, "definedValue");
  std::string::basic_string[abi:ne180100]<0>(&this[20].__r_.__value_.__l.__size_, "integerValue");
  std::string::basic_string[abi:ne180100]<0>(&this[21].__r_.__value_.__l.__size_, "numericValue");
  std::string::basic_string[abi:ne180100]<0>(&this[22].__r_.__value_.__l.__size_, "settings");
  std::string::basic_string[abi:ne180100]<0>(&this[23].__r_.__value_.__l.__size_, "value");
  std::string::basic_string[abi:ne180100]<0>(&this[24].__r_.__value_.__l.__size_, "wholeValue");
  std::string::basic_string[abi:ne180100]<0>(&this[25].__r_.__value_.__l.__size_, "2");
  std::string::basic_string[abi:ne180100]<0>(&this[26].__r_.__value_.__l.__size_, "0.5");
  std::string::basic_string[abi:ne180100]<0>(&this[27].__r_.__value_.__l.__size_, "1.5");
  std::string::basic_string[abi:ne180100]<0>(&this[28].__r_.__value_.__l.__size_, "3");
  if (this[26].__r_.__value_.__s.__data_[7] < 0) {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)this[25].__r_.__value_.__l.__size_, this[25].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string v16 = *(std::string *)((char *)this + 608);
  }
  if (this[29].__r_.__value_.__s.__data_[7] < 0) {
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)this[28].__r_.__value_.__l.__size_, this[28].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string v17 = *(std::string *)((char *)this + 680);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[29].__r_.__value_.__l.__size_, (unsigned __int8 *)&v16, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v16 + i * 8 + 24));
    }
  }
  if (this[27].__r_.__value_.__s.__data_[7] < 0) {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)this[26].__r_.__value_.__l.__size_, this[26].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string v16 = *(std::string *)((char *)this + 632);
  }
  if (this[28].__r_.__value_.__s.__data_[7] < 0) {
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)this[27].__r_.__value_.__l.__size_, this[27].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string v17 = *(std::string *)((char *)this + 656);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[31], (unsigned __int8 *)&v16, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v16 + j * 8 + 24));
    }
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::PersonNameSplitHack(&this[32].__r_.__value_.__r.__words[2], a3, (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::GroupNameTransform(this[36].__r_.__value_.__r.__words, a3, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::ContactAddressDowncaster((uint64_t)&this[42].__r_.__value_.__l.__size_, a3, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::MinimumMaximumLabeller((uint64_t)&this[48].__r_.__value_.__r.__words[2], a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::OneShotReplyRemodeller((uint64_t)&this[55].__r_.__value_.__l.__size_, v15);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::ReplaceFromPersonRecipientHack((uint64_t)&this[58].__r_.__value_.__r.__words[2], a3, (const sirinluinternal::MatchingSpan **)a4, a6);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::SetNumberVerbReplacer((uint64_t)&this[74].__r_.__value_.__l.__size_, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::SetIdentityPromoter(this[79].__r_.__value_.__r.__words, a3);
  return this;
}

void sub_1C8EFD904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,uint64_t a25,void **a26)
{
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29);
  if (*(char *)(v26 + 703) < 0) {
    operator delete(*v28);
  }
  if (*(char *)(v26 + 679) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v26 + 655) < 0) {
    operator delete(*v31);
  }
  if (*(char *)(v26 + 631) < 0) {
    operator delete(*v30);
  }
  if (*(char *)(v26 + 607) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v26 + 583) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v26 + 559) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v26 + 535) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v26 + 511) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v26 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v26 + 463) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v26 + 439) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v26 + 415) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v26 + 391) < 0) {
    operator delete(*a19);
  }
  if (*(char *)(v26 + 367) < 0) {
    operator delete(*a20);
  }
  if (*(char *)(v26 + 343) < 0) {
    operator delete(*a21);
  }
  if (*(char *)(v26 + 319) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(v26 + 295) < 0) {
    operator delete(*a23);
  }
  *(void *)(v32 - 144) = a25;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 144));
  if (*(char *)(v26 + 239) < 0) {
    operator delete(*a24);
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::~ContactTypeSplit(a26);
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EFDBE4()
{
}

void sub_1C8EFDBEC()
{
}

void sub_1C8EFDBF4()
{
}

void sub_1C8EFDBFC()
{
}

void sub_1C8EFDC04()
{
}

void sub_1C8EFDC0C()
{
}

void sub_1C8EFDC14()
{
}

void sub_1C8EFDC1C()
{
}

void sub_1C8EFDC24()
{
}

void sub_1C8EFDC2C()
{
}

void sub_1C8EFDC34()
{
}

void sub_1C8EFDC3C()
{
}

void sub_1C8EFDC44()
{
}

void sub_1C8EFDC4C()
{
}

void sub_1C8EFDC54()
{
}

void sub_1C8EFDC5C()
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::~SetNumberVerbReplacer(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::~MinimumMaximumLabeller(void **this)
{
  if (*((unsigned char *)this + 152) && *((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::~ContactAddressDowncaster(void **this)
{
  unint64_t v2 = this + 16;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this + 13;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this + 10;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::~GroupNameTransform(void **this)
{
  unint64_t v2 = this + 16;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this + 13;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this + 10;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::~PersonNameSplitHack(void **this)
{
  unint64_t v2 = this + 7;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this + 4;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::~ContactTypeSplit(void **this)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 18));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 13));
  unint64_t v2 = this + 10;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)v6[1];
    while (a2 != a3)
    {
      uint64_t v7 = MEMORY[0x1CB773E00](result, a2);
      a2 += 88;
      __n128 result = (void *)(v7 + 88);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C8EFDFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, uint64_t *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::string *)(a1 + 32);
  int v7 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitContactTypes((nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *)(a1 + 32), a2);
  std::string::size_type v8 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (p_std::string p = &__p)
      : (p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = p_p,
        _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "Tree after ContactTypeSplit step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_20;
    }
  }
  else if (!v7)
  {
    goto LABEL_20;
  }
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __p = *v6;
  }
  unint64_t v10 = a3[1];
  if (v10 >= a3[2])
  {
    uint64_t v12 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v10 = v11;
    }
    uint64_t v12 = v10 + 24;
    a3[1] = v10 + 24;
  }
  a3[1] = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_20:
  BOOL v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::splitPersonNames((nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *)(a1 + 784), a2);
  uint64_t v14 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (uint64_t v15 = &__p)
      : (uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v15,
        _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "Tree after PersonNameSplitHack step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v13) {
      goto LABEL_39;
    }
  }
  else if (!v13)
  {
    goto LABEL_39;
  }
  if (*(char *)(a1 + 807) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 784), *(void *)(a1 + 792));
  }
  else {
    std::string __p = *(std::string *)(a1 + 784);
  }
  unint64_t v16 = a3[1];
  if (v16 >= a3[2])
  {
    uint64_t v18 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v16 = v17;
    }
    uint64_t v18 = v16 + 24;
    a3[1] = v16 + 24;
  }
  a3[1] = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_39:
  BOOL v19 = nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transform((nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)(a1 + 864), a2);
  BOOL v20 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (BOOL v21 = &__p)
      : (BOOL v21 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v21,
        _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEBUG, "Tree after GroupNameTransform step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v19) {
      goto LABEL_58;
    }
  }
  else if (!v19)
  {
    goto LABEL_58;
  }
  if (*(char *)(a1 + 887) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 864), *(void *)(a1 + 872));
  }
  else {
    std::string __p = *(std::string *)(a1 + 864);
  }
  unint64_t v22 = a3[1];
  if (v22 >= a3[2])
  {
    uint64_t v24 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v22 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v22 = v23;
    }
    uint64_t v24 = v22 + 24;
    a3[1] = v22 + 24;
  }
  a3[1] = v24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_58:
  BOOL v25 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::downcast((char **)(a1 + 1016), a2);
  uint64_t v26 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (uint64_t v27 = &__p)
      : (uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v27,
        _os_log_impl(&dword_1C8DA9000, v26, OS_LOG_TYPE_DEBUG, "Tree after ContactAddressDowncaster step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v25) {
      goto LABEL_77;
    }
  }
  else if (!v25)
  {
    goto LABEL_77;
  }
  if (*(char *)(a1 + 1039) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1016), *(void *)(a1 + 1024));
  }
  else {
    std::string __p = *(std::string *)(a1 + 1016);
  }
  unint64_t v28 = a3[1];
  if (v28 >= a3[2])
  {
    uint64_t v30 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v28 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v28 = v29;
    }
    uint64_t v30 = v28 + 24;
    a3[1] = v28 + 24;
  }
  a3[1] = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_77:
  int v31 = nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *)(a1 + 216), a2);
  uint64_t v32 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (std::string::size_type v33 = &__p)
      : (std::string::size_type v33 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v33,
        _os_log_impl(&dword_1C8DA9000, v32, OS_LOG_TYPE_DEBUG, "Tree after DefaultMediaPlaybackSpeed step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v31) {
      goto LABEL_96;
    }
  }
  else if (!v31)
  {
    goto LABEL_96;
  }
  if (*(char *)(a1 + 239) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 216), *(void *)(a1 + 224));
  }
  else {
    std::string __p = *(std::string *)(a1 + 216);
  }
  unint64_t v34 = a3[1];
  if (v34 >= a3[2])
  {
    uint64_t v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v34 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v34 = v35;
    }
    uint64_t v36 = v34 + 24;
    a3[1] = v34 + 24;
  }
  a3[1] = v36;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_96:
  int v37 = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::promote((nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *)(a1 + 1896), a2);
  uint64_t v38 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (unint64_t v39 = &__p)
      : (unint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v39,
        _os_log_impl(&dword_1C8DA9000, v38, OS_LOG_TYPE_DEBUG, "Tree after SetIdentityPromoter step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v37) {
      goto LABEL_115;
    }
  }
  else if (!v37)
  {
    goto LABEL_115;
  }
  if (*(char *)(a1 + 1919) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1896), *(void *)(a1 + 1904));
  }
  else {
    std::string __p = *(std::string *)(a1 + 1896);
  }
  unint64_t v40 = a3[1];
  if (v40 >= a3[2])
  {
    uint64_t v42 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v40 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v40 = v41;
    }
    uint64_t v42 = v40 + 24;
    a3[1] = v40 + 24;
  }
  a3[1] = v42;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_115:
  if (*(unsigned char *)(a1 + 24))
  {
    BOOL v43 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::label((nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *)(a1 + 1168), a2);
    uint64_t v44 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)
      && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
           (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        ? (uint64_t v45 = &__p)
        : (uint64_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          *(_DWORD *)std::string buf = 136642819,
          uint64_t v69 = v45,
          _os_log_impl(&dword_1C8DA9000, v44, OS_LOG_TYPE_DEBUG, "Tree after MinimumMaximumLabeller labelling:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v43) {
        goto LABEL_135;
      }
    }
    else if (!v43)
    {
      goto LABEL_135;
    }
    if (*(char *)(a1 + 1191) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1168), *(void *)(a1 + 1176));
    }
    else {
      std::string __p = *(std::string *)(a1 + 1168);
    }
    unint64_t v46 = a3[1];
    if (v46 >= a3[2])
    {
      uint64_t v48 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v46 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v46 = v47;
      }
      uint64_t v48 = v46 + 24;
      a3[1] = v46 + 24;
    }
    a3[1] = v48;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_135:
  BOOL v49 = nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *)(a1 + 1328), a2);
  uint64_t v50 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (uint64_t v51 = &__p)
      : (uint64_t v51 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v51,
        _os_log_impl(&dword_1C8DA9000, v50, OS_LOG_TYPE_DEBUG, "Tree after One Shot Reply check:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v49) {
      goto LABEL_154;
    }
  }
  else if (!v49)
  {
    goto LABEL_154;
  }
  if (*(char *)(a1 + 1351) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1328), *(void *)(a1 + 1336));
  }
  else {
    std::string __p = *(std::string *)(a1 + 1328);
  }
  unint64_t v52 = a3[1];
  if (v52 >= a3[2])
  {
    uint64_t v54 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v52 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v52 = v53;
    }
    uint64_t v54 = v52 + 24;
    a3[1] = v52 + 24;
  }
  a3[1] = v54;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_154:
  BOOL v55 = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *)(a1 + 1784), a2);
  BOOL v56 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (uint64_t v57 = &__p)
      : (uint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v57,
        _os_log_impl(&dword_1C8DA9000, v56, OS_LOG_TYPE_DEBUG, "Tree after SetNumber verb replacement:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v55) {
      goto LABEL_173;
    }
  }
  else if (!v55)
  {
    goto LABEL_173;
  }
  if (*(char *)(a1 + 1807) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1784), *(void *)(a1 + 1792));
  }
  else {
    std::string __p = *(std::string *)(a1 + 1784);
  }
  unint64_t v58 = a3[1];
  if (v58 >= a3[2])
  {
    uint64_t v60 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v58 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v58 = v59;
    }
    uint64_t v60 = v58 + 24;
    a3[1] = v58 + 24;
  }
  a3[1] = v60;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_173:
  int v61 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInTree((nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *)(a1 + 1408), a2);
  uint64_t v62 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (unint64_t v63 = &__p)
      : (unint64_t v63 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)std::string buf = 136642819,
        uint64_t v69 = v63,
        _os_log_impl(&dword_1C8DA9000, v62, OS_LOG_TYPE_DEBUG, "Tree after fromPerson recipient replacement:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v61) {
      return;
    }
  }
  else if (!v61)
  {
    return;
  }
  if (*(char *)(a1 + 1431) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1408), *(void *)(a1 + 1416));
  }
  else {
    std::string __p = *(std::string *)(a1 + 1408);
  }
  unint64_t v64 = a3[1];
  if (v64 >= a3[2])
  {
    uint64_t v66 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v65 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v64 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v64 = v65;
    }
    uint64_t v66 = v64 + 24;
    a3[1] = v64 + 24;
  }
  a3[1] = v66;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EFEBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::printTree(uint64_t a1, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  long long v31 = 0u;
  memset(v30, 0, sizeof(v30));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, a2);
  int v29 = 0;
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(v30, (long long *)&v23);
  v35.__locale_ = (std::locale::__imp *)v28;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = *((void *)&v31 + 1);
  if (*((void *)&v31 + 1))
  {
    uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      unint64_t v5 = v3 + v31 - 1;
      uint64_t v6 = *(void *)(v30[1] + 8 * (v5 / 0x1A));
      unint64_t v7 = v5 % 0x1A;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, (const nlv4_inference_orchestrator::trees::TreeNode *)(v6 + 152 * (v5 % 0x1A)));
      int v29 = *(_DWORD *)(v6 + 152 * v7 + 144);
      std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(v30);
      for (uint64_t i = (nlv4_inference_orchestrator::trees::TreeNode *)v28[1];
            i != (nlv4_inference_orchestrator::trees::TreeNode *)v28[0];
            std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(v30, i, &v35))
      {
        uint64_t i = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)i - 144);
        LODWORD(v35.__locale_) = v29 + 1;
      }
      uint64_t v9 = (4 * v29);
      if (v9)
      {
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          --v9;
        }
        while (v9);
      }
      if ((v27 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v11 = v27;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v10, v11);
      BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v23;
      }
      else {
        uint64_t v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
      if ((v25 & 0x80u) == 0) {
        uint64_t v18 = v24;
      }
      else {
        uint64_t v18 = (void **)v24[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v19 = v25;
      }
      else {
        uint64_t v19 = (uint64_t)v24[1];
      }
      BOOL v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      BOOL v21 = std::locale::use_facet(&v35, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v35);
      std::ostream::put();
      std::ostream::flush();
      v35.__locale_ = (std::locale::__imp *)v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      if ((char)v27 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v25 < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = *((void *)&v31 + 1);
    }
    while (*((void *)&v31 + 1));
  }
  std::stringbuf::str();
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)v30);
  v32[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB775B50](&v34);
}

void sub_1C8EFF018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C8EFF178(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void uaap::AbstractDateTimeHandler::addIfPopulated(uint64_t *a1, char **a2)
{
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v24, *(siri::ontology::UsoGraph **)(*(void *)(*a1 + 88) + 8), *(const UsoGraphNode **)(*a1 + 88));
  unint64_t v4 = v24;
  unint64_t v5 = v25;
  if (v24)
  {
    unsigned __int8 v25 = v24;
    operator delete(v24);
  }
  if (v4 != v5)
  {
    uint64_t v7 = a2[1];
    unint64_t v6 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v10 = (v7 - *a2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v6 - (void)*a2;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v14 = (char *)operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      unint64_t v16 = &v14[8 * v13];
      uint64_t v17 = *a1;
      *a1 = 0;
      *(void *)uint64_t v15 = v17;
      unint64_t v9 = v15 + 8;
      uint64_t v19 = *a2;
      uint64_t v18 = a2[1];
      if (v18 == *a2)
      {
        int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *(void *)uint64_t v18 = 0;
          *((void *)v15 - 1) = v20;
          v15 -= 8;
        }
        while (v18 != v19);
        int64x2_t v21 = *(int64x2_t *)a2;
      }
      *a2 = v15;
      a2[1] = v9;
      a2[2] = v16;
      std::string v23 = (uint64_t *)v21.i64[1];
      unint64_t v22 = (uint64_t *)v21.i64[0];
      while (v23 != v22)
        std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](--v23);
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      uint64_t v8 = *a1;
      *a1 = 0;
      *(void *)uint64_t v7 = v8;
      unint64_t v9 = v7 + 8;
    }
    a2[1] = v9;
  }
}

uint64_t uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(uint64_t result, char **a2)
{
  if (result)
  {
    unint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    if (*a2 != v3)
    {
      if (v3 - v2 == 8)
      {
        if (!*(void *)v2) {
          return result;
        }
        return MEMORY[0x1F41576F0]();
      }
      unsigned int v4 = 0;
      unsigned int v5 = 0x7FFFFFFF;
      do
      {
        uint64_t v6 = *(void *)v2;
        if (*(void *)v2)
        {
          unsigned int v8 = *(_DWORD *)(v6 + 40);
          unsigned int v7 = *(_DWORD *)(v6 + 44);
          if (v8 < v5) {
            unsigned int v5 = v8;
          }
          if (v7 > v4) {
            unsigned int v4 = v7;
          }
        }
        v2 += 8;
      }
      while (v2 != v3);
      if (v5 < 0x7FFFFFFF) {
        return MEMORY[0x1F41576F0]();
      }
    }
  }
  return result;
}

void snlp::common::utilities::getAlignmentUtf16StartEndIndexes(snlp::common::utilities *this@<X0>, unsigned char *a2@<X8>)
{
  if (*((void *)this + 7) == *((void *)this + 8))
  {
    *a2 = 0;
    a2[16] = 0;
    return;
  }
  UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(this);
  siri::ontology::UsoUtteranceAlignment::getSpans((uint64_t *)&v8, UtteranceAlignment);
  unsigned int v5 = v8;
  if (v8 == v9)
  {
    *a2 = 0;
    a2[16] = 0;
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v6 = **v8;
    *(void *)&long long v7 = v6;
    *((void *)&v7 + 1) = HIDWORD(v6);
    *(_OWORD *)a2 = v7;
    a2[16] = 1;
  }
  unint64_t v9 = v5;
  operator delete(v5);
}

void snlp::common::utilities::getAlignmentUtf8StartEndIndexes(snlp::common::utilities *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  if (v7 >= 8)
  {
    unint64_t v9 = SNLPOSLoggerForCategory(4);
    unsigned int v8 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v7;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    unsigned int v8 = off_1E65808C8[v7];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  snlp::common::utilities::getAlignmentUtf16StartEndIndexes(a1, buf);
  char v10 = buf[16];
  if (buf[16])
  {
    unint64_t v11 = *(void *)&buf[8];
    snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(a2, *(unint64_t *)buf);
    uint64_t v13 = v12;
    snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(a2, v11);
    *(void *)a4 = v13;
    *(void *)(a4 + 8) = v14;
    char v10 = 1;
  }
  else
  {
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 16) = v10;
  if (v16 < 0) {
    operator delete(__p);
  }
}

void sub_1C8EFF608(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf)
{
  if (a2 == 1)
  {
    uint64_t v18 = __cxa_begin_catch(a1);
    uint64_t v19 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (a15 >= 0) {
        p_std::string p = &__p;
      }
      else {
        p_std::string p = __p;
      }
      uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = p_p;
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v21;
      _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_DEBUG, "[%s] Warning: Failed to extract UTF-8 indexes from the app entity span graph string node alignment: %s", (uint8_t *)&buf, 0x16u);
    }
    *char v16 = 0;
    v16[16] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C8EFF5C4);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C8EFF8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::version::isValidAssetVersion()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "[0-9A-Za-z](?:[0-9A-Za-z\\-]*[0-9A-Za-z])?");
}

void sub_1C8F0038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  _Unwind_Resume(a1);
}

int *nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(int *a1, uint64_t a2, uint64_t *a3, void *a4, int *a5)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  *a1 = *a5;
  *(_OWORD *)(a1 + 2) = 0u;
  char v105 = (void **)(a1 + 2);
  a1[10] = 1065353216;
  std::string v106 = (float *)(a1 + 10);
  *(_OWORD *)(a1 + 6) = 0u;
  nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary((uint64_t)(a1 + 12), a2, 32);
  uint64_t v9 = *a4;
  char v10 = (std::__shared_weak_count *)a4[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 32, "[NO_SPAN]");
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)a1 + 35) = v9;
    *((void *)a1 + 36) = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *((void *)a1 + 35) = v9;
    *((void *)a1 + 36) = 0;
  }
  a1[74] = *a5;
  sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(a1 + 76));
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>(&v116, "common_MixedFraction");
  std::string::basic_string[abi:ne180100]<0>(v119, "common_ListPosition");
  std::unordered_set<std::string>::unordered_set((uint64_t)(a1 + 98), v113, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (*(&v121 + i * 8) < 0) {
      operator delete((void *)v119[i]);
    }
  }
  a1[108] = *a5;
  sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(a1 + 110));
  *((void *)a1 + 70) = 0;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *(_DWORD *)uint64_t v113 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v113[8], "DataDetector");
  v117[0] = 2;
  std::string::basic_string[abi:ne180100]<0>(&v118, "UserVocabMatcher");
  int v120 = 3;
  std::string::basic_string[abi:ne180100]<0>(v122, "SingleTrieMatcher");
  int v123 = 4;
  std::string::basic_string[abi:ne180100]<0>(v124, "ContextMatcher");
  int v125 = 5;
  std::string::basic_string[abi:ne180100]<0>(v126, "OvertonMatcher");
  int v127 = 6;
  std::string::basic_string[abi:ne180100]<0>(v128, "MRRDetector");
  int v129 = 7;
  std::string::basic_string[abi:ne180100]<0>(v130, "MRRMatcher");
  int v131 = 8;
  std::string::basic_string[abi:ne180100]<0>(v132, "RegexSpanMatcher");
  long long v104 = a4;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = (void **)(a1 + 132);
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  a1[140] = 1065353216;
  int64_t v107 = (std::string **)(a1 + 136);
  do
  {
    uint64_t v15 = &v113[32 * v13];
    int v16 = *(_DWORD *)v15;
    unint64_t v17 = *((void *)a1 + 67);
    if (v17)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v5 = v16;
        if (v17 <= v16) {
          unint64_t v5 = v16 % v17;
        }
      }
      else
      {
        unint64_t v5 = (v17 - 1) & v16;
      }
      uint64_t v19 = (uint64_t **)*((void *)*v14 + v5);
      if (v19)
      {
        for (uint64_t j = *v19; j; uint64_t j = (uint64_t *)*j)
        {
          unint64_t v21 = j[1];
          if (v21 == v16)
          {
            if (*((_DWORD *)j + 4) == v16) {
              goto LABEL_88;
            }
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v21 >= v17) {
                v21 %= v17;
              }
            }
            else
            {
              v21 &= v17 - 1;
            }
            if (v21 != v5) {
              break;
            }
          }
        }
      }
    }
    unint64_t v22 = (std::string *)operator new(0x30uLL);
    v22->__r_.__value_.__r.__words[0] = 0;
    v22->__r_.__value_.__l.__size_ = v16;
    LODWORD(v22->__r_.__value_.__r.__words[2]) = v16;
    std::string v23 = v22 + 1;
    uint64_t v24 = &v113[32 * v13];
    unsigned __int8 v25 = (const std::string::value_type **)(v24 + 8);
    if ((char)v15[31] < 0)
    {
      std::string::__init_copy_ctor_external(v23, *v25, *((void *)v24 + 2));
      uint64_t v12 = *((void *)a1 + 69);
    }
    else
    {
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)v25;
      v22[1].__r_.__value_.__r.__words[2] = *((void *)v24 + 3);
    }
    float v26 = (float)(unint64_t)(v12 + 1);
    float v27 = *((float *)a1 + 140);
    if (!v17 || (float)(v27 * (float)v17) < v26)
    {
      BOOL v28 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3) {
        BOOL v28 = 1;
      }
      unint64_t v29 = v28 | (2 * v17);
      unint64_t v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      else {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v17 = *((void *)a1 + 67);
      if (*(void *)&prime > v17) {
        goto LABEL_44;
      }
      if (*(void *)&prime < v17)
      {
        unint64_t v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 69) / *((float *)a1 + 140));
        if (v17 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
        {
          unint64_t v38 = std::__next_prime(v38);
        }
        else
        {
          uint64_t v40 = 1 << -(char)__clz(v38 - 1);
          if (v38 >= 2) {
            unint64_t v38 = v40;
          }
        }
        if (*(void *)&prime <= v38) {
          int8x8_t prime = (int8x8_t)v38;
        }
        if (*(void *)&prime >= v17)
        {
          unint64_t v17 = *((void *)a1 + 67);
        }
        else
        {
          if (prime)
          {
LABEL_44:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v32 = operator new(8 * *(void *)&prime);
            char v33 = *v14;
            char *v14 = v32;
            if (v33) {
              operator delete(v33);
            }
            uint64_t v34 = 0;
            *((int8x8_t *)a1 + 67) = prime;
            do
              *((void *)*v14 + v34++) = 0;
            while (*(void *)&prime != v34);
            std::locale v35 = *v107;
            if (*v107)
            {
              unint64_t size = v35->__r_.__value_.__l.__size_;
              uint8x8_t v37 = (uint8x8_t)vcnt_s8(prime);
              v37.i16[0] = vaddlv_u8(v37);
              if (v37.u32[0] > 1uLL)
              {
                if (size >= *(void *)&prime) {
                  size %= *(void *)&prime;
                }
              }
              else
              {
                size &= *(void *)&prime - 1;
              }
              *((void *)*v14 + size) = v107;
              long long v41 = (std::string *)v35->__r_.__value_.__r.__words[0];
              if (v35->__r_.__value_.__r.__words[0])
              {
                do
                {
                  unint64_t v42 = v41->__r_.__value_.__l.__size_;
                  if (v37.u32[0] > 1uLL)
                  {
                    if (v42 >= *(void *)&prime) {
                      v42 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v42 &= *(void *)&prime - 1;
                  }
                  if (v42 != size)
                  {
                    if (!*((void *)*v14 + v42))
                    {
                      *((void *)*v14 + v42) = v35;
                      goto LABEL_69;
                    }
                    v35->__r_.__value_.__r.__words[0] = v41->__r_.__value_.__r.__words[0];
                    v41->__r_.__value_.__r.__words[0] = **((void **)*v14 + v42);
                    **((void **)*v14 + v42) = v41;
                    long long v41 = v35;
                  }
                  unint64_t v42 = size;
LABEL_69:
                  std::locale v35 = v41;
                  long long v41 = (std::string *)v41->__r_.__value_.__r.__words[0];
                  unint64_t size = v42;
                }
                while (v41);
              }
            }
            unint64_t v17 = (unint64_t)prime;
            goto LABEL_73;
          }
          unint64_t v46 = *v14;
          char *v14 = 0;
          if (v46) {
            operator delete(v46);
          }
          unint64_t v17 = 0;
          *((void *)a1 + 67) = 0;
        }
      }
LABEL_73:
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v17 <= v16) {
          unint64_t v5 = v16 % v17;
        }
        else {
          unint64_t v5 = v16;
        }
      }
      else
      {
        unint64_t v5 = (v17 - 1) & v16;
      }
    }
    BOOL v43 = *v14;
    uint64_t v44 = (std::string **)*((void *)*v14 + v5);
    if (v44)
    {
      v22->__r_.__value_.__r.__words[0] = (std::string::size_type)*v44;
LABEL_86:
      *uint64_t v44 = v22;
      goto LABEL_87;
    }
    v22->__r_.__value_.__r.__words[0] = (std::string::size_type)*v107;
    *int64_t v107 = v22;
    v43[v5] = v107;
    if (v22->__r_.__value_.__r.__words[0])
    {
      unint64_t v45 = *(void *)(v22->__r_.__value_.__r.__words[0] + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v45 >= v17) {
          v45 %= v17;
        }
      }
      else
      {
        v45 &= v17 - 1;
      }
      uint64_t v44 = (std::string **)((char *)*v14 + 8 * v45);
      goto LABEL_86;
    }
LABEL_87:
    uint64_t v12 = *((void *)a1 + 69) + 1;
    *((void *)a1 + 69) = v12;
LABEL_88:
    ++v13;
  }
  while (v13 != 8);
  uint64_t v47 = 0;
  uint64_t v48 = v105;
  do
  {
    if (SHIBYTE(v132[v47 + 2]) < 0) {
      operator delete((void *)v132[v47]);
    }
    v47 -= 4;
  }
  while (v47 != -32);
  *((void *)a1 + 71) = *v104;
  uint64_t v49 = v104[1];
  *((void *)a1 + 72) = v49;
  if (v49) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v50 = (std::string::size_type *)(a1 + 8);
  if (*((void *)a1 + 4))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*((void **)a1 + 3));
    *((void *)a1 + 3) = 0;
    uint64_t v51 = *((void *)a1 + 2);
    if (v51)
    {
      for (uint64_t k = 0; k != v51; ++k)
        *((void *)*v105 + k) = 0;
    }
    *uint64_t v50 = 0;
  }
  long long v53 = *v105;
  *char v105 = 0;
  if (v53) {
    operator delete(v53);
  }
  *((void *)a1 + 3) = 0;
  uint64_t v54 = a1 + 6;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 4) = 0;
  a1[10] = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(0);
  if (!*((unsigned char *)a3 + 24))
  {
    long long v92 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v93 = *a1;
      if (v93 >= 8)
      {
        std::string v101 = SNLPOSLoggerForCategory(4);
        uint64_t v94 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v113 = 136315394;
          *(void *)&v113[4] = "<UNDEFINED_COMPONENT>";
          __int16 v114 = 2048;
          uint64_t v115 = v93;
          _os_log_impl(&dword_1C8DA9000, v101, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v113, 0x16u);
        }
      }
      else
      {
        uint64_t v94 = off_1E65808C8[v93];
      }
      *(_DWORD *)uint64_t v113 = 136315138;
      *(void *)&v113[4] = v94;
      _os_log_impl(&dword_1C8DA9000, v92, OS_LOG_TYPE_DEBUG, "[%s] No label mapping file specified", v113, 0xCu);
    }
    return a1;
  }
  std::ifstream::basic_ifstream((uint64_t *)v113);
  uint64_t v55 = *(void *)v113;
  uint64_t v56 = 5;
  if ((*((unsigned char *)v117 + *(void *)(*(void *)v113 - 24)) & 5) != 0) {
    goto LABEL_215;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v57 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (2)
  {
    std::ios_base::getloc((const std::ios_base *)&v113[*(void *)(v55 - 24)]);
    unint64_t v58 = std::locale::use_facet((const std::locale *)&v110, v57);
    unsigned __int8 v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale((std::locale *)&v110);
    uint64_t v60 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v113, (uint64_t)&__str, v59);
    if ((*((unsigned char *)v60 + *(void *)(*v60 - 24) + 32) & 5) == 0)
    {
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
        {
          p_str = &__str;
          goto LABEL_120;
        }
        goto LABEL_200;
      }
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_200;
      }
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_120:
      if (p_str->__r_.__value_.__s.__data_[0] == 35)
      {
LABEL_200:
        uint64_t v55 = *(void *)v113;
        continue;
      }
      v108[0] = " ";
      v108[1] = (const void *)1;
      nlv4_inference_orchestrator::trees::split(&v110, &__str, v108);
      unint64_t v62 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v50, (uint64_t)&v110);
      unint64_t v63 = v62;
      unint64_t v64 = *((void *)a1 + 2);
      if (v64)
      {
        uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
        v65.i16[0] = vaddlv_u8(v65);
        unint64_t v66 = v65.u32[0];
        if (v65.u32[0] > 1uLL)
        {
          uint64_t v56 = v62;
          if (v62 >= v64) {
            uint64_t v56 = v62 % v64;
          }
        }
        else
        {
          uint64_t v56 = (v64 - 1) & v62;
        }
        int64_t v67 = (unsigned __int8 **)*((void *)*v48 + v56);
        if (v67)
        {
          int64_t v68 = *v67;
          if (!*v67)
          {
            uint64_t v48 = v105;
            goto LABEL_139;
          }
          while (1)
          {
            unint64_t v69 = *((void *)v68 + 1);
            if (v69 == v63)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v106, v68 + 16, (unsigned __int8 *)&v110))goto LABEL_195; {
            }
              }
            else
            {
              if (v66 > 1)
              {
                if (v69 >= v64) {
                  v69 %= v64;
                }
              }
              else
              {
                v69 &= v64 - 1;
              }
              if (v69 != v56)
              {
LABEL_137:
                uint64_t v48 = v105;
                uint64_t v50 = (std::string::size_type *)(a1 + 8);
                break;
              }
            }
            int64_t v68 = *(unsigned __int8 **)v68;
            if (!v68) {
              goto LABEL_137;
            }
          }
        }
      }
LABEL_139:
      uint64_t v70 = (char *)operator new(0x40uLL);
      *(void *)std::string buf = v70;
      *(void *)&uint8_t buf[8] = a1 + 6;
      *(void *)uint64_t v70 = 0;
      *((void *)v70 + 1) = v63;
      *(std::string *)(v70 + 16) = v110;
      memset(&v110, 0, sizeof(v110));
      *(_OWORD *)(v70 + 40) = __p;
      *((void *)v70 + 7) = v112;
      uint64_t v112 = 0;
      long long __p = 0uLL;
      buf[16] = 1;
      float v71 = (float)(*v50 + 1);
      float v72 = *v106;
      if (!v64 || (float)(v72 * (float)v64) < v71)
      {
        BOOL v73 = (v64 & (v64 - 1)) != 0;
        if (v64 < 3) {
          BOOL v73 = 1;
        }
        unint64_t v74 = v73 | (2 * v64);
        unint64_t v75 = vcvtps_u32_f32(v71 / v72);
        if (v74 <= v75) {
          int8x8_t v76 = (int8x8_t)v75;
        }
        else {
          int8x8_t v76 = (int8x8_t)v74;
        }
        if (*(void *)&v76 == 1)
        {
          int8x8_t v76 = (int8x8_t)2;
        }
        else if ((*(void *)&v76 & (*(void *)&v76 - 1)) != 0)
        {
          int8x8_t v76 = (int8x8_t)std::__next_prime(*(void *)&v76);
        }
        unint64_t v64 = *((void *)a1 + 2);
        if (*(void *)&v76 <= v64)
        {
          if (*(void *)&v76 < v64)
          {
            unint64_t v83 = vcvtps_u32_f32((float)*v50 / *v106);
            if (v64 < 3 || (uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)v64), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
            {
              unint64_t v83 = std::__next_prime(v83);
            }
            else
            {
              uint64_t v85 = 1 << -(char)__clz(v83 - 1);
              if (v83 >= 2) {
                unint64_t v83 = v85;
              }
            }
            if (*(void *)&v76 <= v83) {
              int8x8_t v76 = (int8x8_t)v83;
            }
            if (*(void *)&v76 >= v64)
            {
              unint64_t v64 = *((void *)a1 + 2);
            }
            else
            {
              if (v76) {
                goto LABEL_151;
              }
              uint64_t v91 = *v48;
              *uint64_t v48 = 0;
              if (v91) {
                operator delete(v91);
              }
              unint64_t v64 = 0;
              *((void *)a1 + 2) = 0;
            }
          }
        }
        else
        {
LABEL_151:
          if (*(void *)&v76 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v77 = operator new(8 * *(void *)&v76);
          uint64_t v78 = *v48;
          *uint64_t v48 = v77;
          if (v78) {
            operator delete(v78);
          }
          uint64_t v79 = 0;
          *((int8x8_t *)a1 + 2) = v76;
          do
            *((void *)*v48 + v79++) = 0;
          while (*(void *)&v76 != v79);
          std::string::size_type v80 = (void *)*v54;
          if (*v54)
          {
            unint64_t v81 = v80[1];
            uint8x8_t v82 = (uint8x8_t)vcnt_s8(v76);
            v82.i16[0] = vaddlv_u8(v82);
            if (v82.u32[0] > 1uLL)
            {
              if (v81 >= *(void *)&v76) {
                v81 %= *(void *)&v76;
              }
            }
            else
            {
              v81 &= *(void *)&v76 - 1;
            }
            *((void *)*v48 + v81) = v54;
            uint64_t v86 = (void *)*v80;
            if (*v80)
            {
              do
              {
                unint64_t v87 = v86[1];
                if (v82.u32[0] > 1uLL)
                {
                  if (v87 >= *(void *)&v76) {
                    v87 %= *(void *)&v76;
                  }
                }
                else
                {
                  v87 &= *(void *)&v76 - 1;
                }
                if (v87 != v81)
                {
                  if (!*((void *)*v48 + v87))
                  {
                    *((void *)*v48 + v87) = v80;
                    goto LABEL_176;
                  }
                  void *v80 = *v86;
                  *uint64_t v86 = **((void **)*v48 + v87);
                  **((void **)*v48 + v87) = v86;
                  uint64_t v86 = v80;
                }
                unint64_t v87 = v81;
LABEL_176:
                std::string::size_type v80 = v86;
                uint64_t v86 = (void *)*v86;
                unint64_t v81 = v87;
              }
              while (v86);
            }
          }
          unint64_t v64 = (unint64_t)v76;
        }
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v63 >= v64) {
            uint64_t v56 = v63 % v64;
          }
          else {
            uint64_t v56 = v63;
          }
        }
        else
        {
          uint64_t v56 = (v64 - 1) & v63;
        }
      }
      uint64_t v88 = (void *)*((void *)*v48 + v56);
      uint64_t v89 = *(void *)buf;
      if (v88)
      {
        **(void **)std::string buf = *v88;
        goto LABEL_193;
      }
      **(void **)std::string buf = *v54;
      *uint64_t v54 = v89;
      *((void *)*v48 + v56) = v54;
      if (*(void *)v89)
      {
        unint64_t v90 = *(void *)(*(void *)v89 + 8);
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v90 >= v64) {
            v90 %= v64;
          }
        }
        else
        {
          v90 &= v64 - 1;
        }
        uint64_t v88 = (char *)*v48 + 8 * v90;
LABEL_193:
        *uint64_t v88 = v89;
      }
      *(void *)std::string buf = 0;
      ++*v50;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_195:
      if (SHIBYTE(v112) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v56 = 5;
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      uint64_t v48 = v105;
      uint64_t v50 = (std::string::size_type *)(a1 + 8);
      goto LABEL_200;
    }
    break;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_215:
  long long v95 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v96 = *a1;
    if (v96 >= 8)
    {
      int64_t v98 = SNLPOSLoggerForCategory(4);
      long long v97 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v96;
        _os_log_impl(&dword_1C8DA9000, v98, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      long long v97 = off_1E65808C8[v96];
    }
    if (!*((unsigned char *)a3 + 24)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::string::size_type v99 = *v50;
    if (*((char *)a3 + 23) >= 0) {
      int v100 = a3;
    }
    else {
      int v100 = (uint64_t *)*a3;
    }
    LODWORD(v110.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = (std::string::size_type)v97;
    WORD2(v110.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v110.__r_.__value_.__r.__words[1] + 6) = v99;
    HIWORD(v110.__r_.__value_.__r.__words[2]) = 2080;
    *(void *)&long long __p = v100;
    _os_log_impl(&dword_1C8DA9000, v95, OS_LOG_TYPE_DEBUG, "[%s] Read %lu label mappings from %s", (uint8_t *)&v110, 0x20u);
  }
  *(void *)uint64_t v113 = *MEMORY[0x1E4FBA3F8];
  *(void *)&v113[*(void *)(*(void *)v113 - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0]((char *)&v115 + 2);
  std::istream::~istream();
  MEMORY[0x1CB775B50](&v133);
  return a1;
}

void sub_1C8F01354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, nlv4_inference_orchestrator::span_matching::SpanEncoder *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::ifstream::~ifstream(&a32);
  std::locale v35 = *(std::__shared_weak_count **)(v32 + 576);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v33);
  MEMORY[0x1CB773E20](a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  nlv4_inference_orchestrator::span_matching::SpanEncoder::~SpanEncoder(a11);
  nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::~SpanEncoder(nlv4_inference_orchestrator::span_matching::SpanEncoder *this)
{
  MEMORY[0x1CB773E20]((char *)this + 48);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize(int *a1, char *a2, const sirinluinternal::MatchingSpan **a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *a1;
    if (v13 >= 8)
    {
      uint64_t v15 = SNLPOSLoggerForCategory(4);
      uint64_t v14 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v13;
        _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v14 = off_1E65808C8[v13];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] Span Input", buf, 0xCu);
  }
  *(_DWORD *)std::string buf = 0;
  nlv4_inference_orchestrator::span_matching::SpanEncoder::encode((uint64_t)(a1 + 64), a3, a4, buf, (uint64_t)v20);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanEncoding(a1, v20);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::tensoriseTokens((unsigned int *)a1, v20, a6, (uint64_t)buf);
  if (buf != a2)
  {
    std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(a2, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a2 + 24, (char *)__p, (uint64_t)v23, (v23 - (unsigned char *)__p) >> 2);
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logFeatureTensor((unsigned int *)a1, (uint64_t **)a2);
  if (*(unsigned char *)(a5 + 24))
  {
    nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::insertToFeatureStore(a1);
  }
  else
  {
    int v16 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *a1;
      if (v17 >= 8)
      {
        uint64_t v19 = SNLPOSLoggerForCategory(4);
        uint8x8_t v18 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned __int8 v25 = 136315394;
          *(void *)&v25[4] = "<UNDEFINED_COMPONENT>";
          __int16 v26 = 2048;
          uint64_t v27 = v17;
          _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v25, 0x16u);
        }
      }
      else
      {
        uint8x8_t v18 = off_1E65808C8[v17];
      }
      *(_DWORD *)unsigned __int8 v25 = 136315138;
      *(void *)&v25[4] = v18;
      _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of span featurized response into FeatureStore", v25, 0xCu);
    }
  }
  *(void *)unsigned __int8 v25 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
  if (__p)
  {
    std::string v23 = __p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  *(void *)std::string buf = v20;
  std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C8F01858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanEncoding(int *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  unsigned int v4 = (void *)*a2;
  unint64_t v5 = (void *)a2[1];
  if ((void *)*a2 != v5)
  {
    do
    {
      if (v4[8])
      {
        uint64_t v6 = v4[18];
        uint64_t v7 = v4[19];
        while (v6 != v7)
        {
          uint64_t v8 = v4[8];
          if (*(char *)(v8 + 23) < 0) {
            uint64_t v8 = *(void *)v8;
          }
          size_t v9 = strlen((const char *)v8);
          char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v8, v9);
          unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
          uint64_t v12 = (const char *)v6;
          if (*(char *)(v6 + 23) < 0) {
            uint64_t v12 = *(const char **)v6;
          }
          size_t v13 = strlen(v12);
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
          v6 += 32;
        }
      }
      v4 += 21;
    }
    while (v4 != v5);
  }
  uint64_t v15 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *a1;
    if (v16 >= 8)
    {
      uint8x8_t v18 = SNLPOSLoggerForCategory(4);
      uint64_t v17 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v27 = 2048;
        uint64_t v28 = v16;
        _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v17 = off_1E65808C8[v16];
    }
    std::stringbuf::str();
    if (v29 >= 0) {
      uint64_t v19 = buf;
    }
    else {
      uint64_t v19 = *(unsigned char **)buf;
    }
    *(_DWORD *)unint64_t v30 = 136315394;
    long long v31 = v17;
    __int16 v32 = 2080;
    uint64_t v33 = v19;
    _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] Spans encoded over the tokens:\n%s", v30, 0x16u);
    if (v29 < 0) {
      operator delete(*(void **)buf);
    }
  }
  v22[0] = *MEMORY[0x1E4FBA408];
  uint64_t v20 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v23[0] = v20;
  v23[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v25);
}

void sub_1C8F01BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::tensoriseTokens(unsigned int *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  int v143 = 0;
  v144 = 0;
  uint64_t v145 = 0;
  memset(&v142, 0, sizeof(v142));
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)(a4 + 64) = 0;
  if (*a2 == a2[1])
  {
    uint64_t v7 = operator new(0x18uLL);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v129 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v7, (uint64_t)(v7 + 3), 3uLL);
    long long v130 = 0uLL;
    uint64_t v131 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v130, v143, (uint64_t)v144, (v144 - v143) >> 2);
    uint64_t v8 = *(void **)a4;
    if (*(void *)a4)
    {
      *(void *)(a4 + 8) = v8;
      operator delete(v8);
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(void *)(a4 + 16) = v129;
    __p[1] = 0;
    uint64_t v129 = 0;
    __p[0] = 0;
    size_t v9 = *(void **)(a4 + 24);
    if (v9)
    {
      *(void *)(a4 + 32) = v9;
      operator delete(v9);
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 40) = 0;
      size_t v9 = __p[0];
    }
    *(_OWORD *)(a4 + 24) = v130;
    *(void *)(a4 + 40) = v131;
    uint64_t v131 = 0;
    long long v130 = 0uLL;
    if (v9)
    {
      __p[1] = v9;
      operator delete(v9);
    }
    if ((std::vector<std::string> *)(a4 + 48) != &v142) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 48), v142.__begin_, (long long *)v142.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v142.__end_ - (char *)v142.__begin_) >> 3));
    }
    char v10 = v7;
    goto LABEL_191;
  }
  if (*((char *)a1 + 279) < 0) {
    std::string::__init_copy_ctor_external(&v141, *((const std::string::value_type **)a1 + 32), *((void *)a1 + 33));
  }
  else {
    std::string v141 = *(std::string *)(a1 + 64);
  }
  unint64_t v11 = (nlv4_inference_orchestrator::vocabulary::Vocabulary *)(a1 + 12);
  uint64_t v12 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)&v141);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  unint64_t v15 = 0xCF3CF3CF3CF3CF3DLL * ((v13 - *a2) >> 3);
  __p[0] = 0;
  unint64_t v124 = v15;
  std::vector<unsigned long>::vector(&v139, v15, __p);
  uint64_t v121 = v14;
  uint64_t v122 = v13;
  unint64_t v136 = 0;
  long long v137 = 0;
  long long v138 = 0;
  memset(v135, 0, sizeof(v135));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v16 = *a2;
  uint64_t v125 = a2[1];
  if (*a2 != v125)
  {
    uint64_t v17 = 0;
    do
    {
      memset(&buf, 0, sizeof(buf));
      uint64_t v19 = *(void *)(v16 + 144);
      uint64_t v18 = *(void *)(v16 + 152);
      while (v19 != v18)
      {
        nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels((void *)a1 + 66, v19, (void *)a1 + 1, (int *)a1, (std::vector<std::string>::pointer *)&v127);
        std::string::size_type size = v127.__r_.__value_.__l.__size_;
        for (uint64_t i = v127.__r_.__value_.__r.__words[0]; i != size; i += 24)
        {
          uint64_t v22 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), i);
          if (*((unsigned char *)a1 + 152)) {
            BOOL v23 = v22 == *((void *)a1 + 18);
          }
          else {
            BOOL v23 = 0;
          }
          if (!v23)
          {
            std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              uint64_t v30 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5;
              if ((unint64_t)(v30 + 1) >> 59) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v31 = (uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0]) >> 4;
              if (v31 <= v30 + 1) {
                unint64_t v31 = v30 + 1;
              }
              if (buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v31;
              }
              v147.__end_cap_.__value_ = (std::allocator<std::string> *)&buf.__r_.__value_.__r.__words[2];
              if (v32)
              {
                uint64_t v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v32);
              }
              else
              {
                uint64_t v34 = 0;
                uint64_t v33 = 0;
              }
              std::__split_buffer<std::string>::pointer end = (std::string *)((char *)v34 + 32 * v30);
              v147.__first_ = v34;
              v147.__begin_ = end;
              v147.__end_ = end;
              v147.__end_cap_.__value_ = (std::string *)((char *)v34 + 32 * v33);
              if (*(char *)(v19 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
                std::__split_buffer<std::string>::pointer end = v147.__end_;
              }
              else
              {
                long long v37 = *(_OWORD *)v19;
                end->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v37;
              }
              v34[1].__r_.__value_.__r.__words[4 * v30] = *(void *)(v19 + 24);
              v147.__end_ = (std::__split_buffer<std::string>::pointer)((char *)end + 32);
              std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer((uint64_t *)&buf, &v147);
              std::string::size_type v35 = buf.__r_.__value_.__l.__size_;
              std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v147);
            }
            else
            {
              if (*(char *)(v19 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf.__r_.__value_.__l.__size_, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
              }
              else
              {
                long long v29 = *(_OWORD *)v19;
                *(void *)(buf.__r_.__value_.__l.__size_ + 16) = *(void *)(v19 + 16);
                *(_OWORD *)std::string::size_type v28 = v29;
              }
              *(void *)(v28 + 24) = *(void *)(v19 + 24);
              std::string::size_type v35 = v28 + 32;
            }
            buf.__r_.__value_.__l.__size_ = v35;
            break;
          }
          int v24 = *(char *)(i + 23);
          if (v24 >= 0) {
            uint64_t v25 = i;
          }
          else {
            uint64_t v25 = *(void *)i;
          }
          if (v24 >= 0) {
            uint64_t v26 = *(unsigned __int8 *)(i + 23);
          }
          else {
            uint64_t v26 = *(void *)(i + 8);
          }
          __int16 v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, v25, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",\n", 2);
        }
        v147.__first_ = &v127;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
        v19 += 32;
      }
      nlv4_inference_orchestrator::span_matching::SpanTruncator::truncate((uint64_t)(a1 + 98), (uint64_t *)&buf, a3);
      v147.__begin_ = 0;
      v147.__end_ = 0;
      v147.__first_ = (std::__split_buffer<std::string>::pointer)&v147.__begin_;
      *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = 0uLL;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127.__r_.__value_.__l.__size_;
      std::string::size_type v39 = buf.__r_.__value_.__l.__size_;
      uint64_t v38 = buf.__r_.__value_.__r.__words[0];
      uint64_t v40 = v139;
      uint64_t v41 = *((void *)v139 + v17);
      while (v38 != v39)
      {
        uint64_t appended = nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::appendExpandedSpanLabelsAndNumericalisedIndexes((int *)a1, (uint64_t **)&v147, (uint64_t **)&v127, v16, v38, v41, a3);
        uint64_t v40 = v139;
        uint64_t v41 = *((void *)v139 + v17) + appended;
        *((void *)v139 + v17) = v41;
        v38 += 32;
      }
      if (!v41)
      {
        v40[v17] = 1;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)&v147, (unint64_t)(float)(unint64_t)v12, (unint64_t)(float)(unint64_t)v12);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v127, &v141, (uint64_t)&v141);
      }
      std::__split_buffer<std::string>::pointer first = v147.__first_;
      if ((std::__split_buffer<std::string>::pointer *)v147.__first_ != &v147.__begin_)
      {
        uint64_t v44 = v137;
        do
        {
          if (v44 >= v138)
          {
            unint64_t v45 = (std::string::size_type *)v136;
            uint64_t v46 = ((char *)v44 - (unsigned char *)v136) >> 3;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v48 = (char *)v138 - (unsigned char *)v136;
            if (((char *)v138 - (unsigned char *)v136) >> 2 > v47) {
              unint64_t v47 = v48 >> 2;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v138, v49);
              unint64_t v45 = (std::string::size_type *)v136;
              uint64_t v44 = v137;
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v51 = (std::string::size_type *)&v50[8 * v46];
            *uint64_t v51 = first[1].__r_.__value_.__l.__size_;
            unint64_t v52 = v51 + 1;
            while (v44 != v45)
            {
              std::string::size_type v53 = *--v44;
              *--uint64_t v51 = v53;
            }
            unint64_t v136 = v51;
            long long v137 = v52;
            long long v138 = (std::string::size_type *)&v50[8 * v49];
            if (v45) {
              operator delete(v45);
            }
            uint64_t v44 = v52;
          }
          else
          {
            *v44++ = first[1].__r_.__value_.__l.__size_;
          }
          long long v137 = v44;
          uint64_t v54 = (std::__split_buffer<std::string> *)first->__r_.__value_.__l.__size_;
          if (v54)
          {
            do
            {
              uint64_t v55 = v54;
              uint64_t v54 = (std::__split_buffer<std::string> *)v54->__first_;
            }
            while (v54);
          }
          else
          {
            do
            {
              uint64_t v55 = (std::__split_buffer<std::string> *)first->__r_.__value_.__r.__words[2];
              BOOL v23 = v55->__first_ == first;
              std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v55;
            }
            while (!v23);
          }
          std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v55;
        }
        while (v55 != (std::__split_buffer<std::string> *)&v147.__begin_);
      }
      std::string::size_type v56 = v127.__r_.__value_.__r.__words[0];
      uint64_t v146 = v135;
      if ((std::string::size_type *)v127.__r_.__value_.__l.__data_ != &v127.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v146, (long long *)(v56 + 32));
          uint64_t v57 = *(std::string **)(v56 + 8);
          if (v57)
          {
            do
            {
              unint64_t v58 = v57;
              uint64_t v57 = (std::string *)v57->__r_.__value_.__r.__words[0];
            }
            while (v57);
          }
          else
          {
            do
            {
              unint64_t v58 = *(std::string **)(v56 + 16);
              BOOL v23 = v58->__r_.__value_.__r.__words[0] == v56;
              std::string::size_type v56 = (std::string::size_type)v58;
            }
            while (!v23);
          }
          std::string::size_type v56 = (std::string::size_type)v58;
        }
        while (v58 != (std::string *)&v127.__r_.__value_.__r.__words[1]);
      }
      ++v17;
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((char *)v127.__r_.__value_.__l.__size_);
      std::__tree<unsigned long>::destroy(v147.__begin_->__r_.__value_.__r.__words);
      v147.__first_ = &buf;
      std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      v16 += 168;
    }
    while (v16 != v125);
  }
  uint64_t v59 = *a1;
  if (v59 > 6) {
    int v60 = 4;
  }
  else {
    int v60 = dword_1C8F3FFAC[v59];
  }
  int v61 = SNLPOSLoggerForCategory(v60);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    int v62 = *a1;
    unint64_t v63 = "UNKNOWN";
    unint64_t v64 = "SSU";
    uint8x8_t v65 = "LVC";
    unint64_t v66 = "PSC";
    int64_t v67 = "OWL";
    int64_t v68 = "UaaP";
    unint64_t v69 = "SNLC";
    uint64_t v70 = (std::string *)"[insights-snlp-nlv4]: ";
    float v71 = (std::string *)"NLv4";
    switch(*a1)
    {
      case 0u:
        break;
      case 1u:
LABEL_95:
        uint64_t v70 = (std::string *)"[insights-snlp-snlc]: ";
        float v71 = (std::string *)v69;
        break;
      case 2u:
LABEL_99:
        uint64_t v70 = (std::string *)"[insights-snlp-owl]: ";
        float v71 = (std::string *)v67;
        break;
      case 3u:
LABEL_100:
        uint64_t v70 = (std::string *)"[insights-snlp-uaap]: ";
        float v71 = (std::string *)v68;
        break;
      case 4u:
LABEL_102:
        uint64_t v70 = (std::string *)"[insights-snlp-psc]: ";
        float v71 = (std::string *)v66;
        break;
      case 5u:
LABEL_103:
        uint64_t v70 = (std::string *)"[insights-snlp-lvc]: ";
        float v71 = (std::string *)v65;
        break;
      case 6u:
LABEL_101:
        uint64_t v70 = (std::string *)"[insights-snlp-ssu]: ";
        float v71 = (std::string *)v64;
        break;
      case 7u:
LABEL_105:
        BOOL v73 = SNLPOSLoggerForCategory(4);
        uint64_t v70 = (std::string *)"[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v62;
          _os_log_impl(&dword_1C8DA9000, v73, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
        }
        float v71 = (std::string *)v63;
        break;
      default:
        float v72 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v62;
          _os_log_impl(&dword_1C8DA9000, v72, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
        }
        unint64_t v69 = "<UNDEFINED_COMPONENT>";
        int64_t v68 = "<UNDEFINED_COMPONENT>";
        int64_t v67 = "<UNDEFINED_COMPONENT>";
        unint64_t v66 = "<UNDEFINED_COMPONENT>";
        uint8x8_t v65 = "<UNDEFINED_COMPONENT>";
        unint64_t v64 = "<UNDEFINED_COMPONENT>";
        float v71 = (std::string *)"<UNDEFINED_COMPONENT>";
        uint64_t v70 = (std::string *)"[insights-snlp-nlv4]: ";
        switch(*a1)
        {
          case 0u:
            goto LABEL_108;
          case 1u:
            goto LABEL_95;
          case 2u:
            goto LABEL_99;
          case 3u:
            goto LABEL_100;
          case 4u:
            goto LABEL_102;
          case 5u:
            goto LABEL_103;
          case 6u:
            goto LABEL_101;
          default:
            unint64_t v63 = "<UNDEFINED_COMPONENT>";
            int v62 = *a1;
            goto LABEL_105;
        }
    }
LABEL_108:
    std::stringbuf::str();
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v147.__first_) = 136315650;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v147.__first_ + 4) = v71;
    WORD2(v147.__begin_) = 2080;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v147.__begin_ + 6) = v70;
    HIWORD(v147.__end_) = 2080;
    v147.__end_cap_.__value_ = p_buf;
    _os_log_impl(&dword_1C8DA9000, v61, OS_LOG_TYPE_DEBUG, "[%s] %sRejected OOV Spans: %s", (uint8_t *)&v147, 0x20u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v75 = (uint64_t *)v139;
  if (v139 != v140)
  {
    int8x8_t v76 = (char *)v139 + 8;
    if ((char *)v139 + 8 != v140)
    {
      unint64_t v77 = *(void *)v139;
      uint64_t v78 = (char *)v139 + 8;
      do
      {
        unint64_t v80 = *(void *)v78;
        v78 += 8;
        unint64_t v79 = v80;
        BOOL v81 = v77 >= v80;
        if (v77 <= v80) {
          unint64_t v77 = v79;
        }
        if (!v81) {
          unint64_t v75 = (uint64_t *)v76;
        }
        int8x8_t v76 = v78;
      }
      while (v78 != v140);
    }
  }
  if (*((unsigned char *)a1 + 168)) {
    unint64_t v82 = *((void *)a1 + 20);
  }
  else {
    unint64_t v82 = 0;
  }
  uint64_t v83 = *v75;
  nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(v11, (std::string *)&v147);
  if (LOBYTE(v147.__end_cap_.__value_))
  {
    nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(v11, &buf);
    if (!v150) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::string v127 = buf;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v127, "");
  }
  if (LOBYTE(v147.__end_cap_.__value_) && SHIBYTE(v147.__end_) < 0) {
    operator delete(v147.__first_);
  }
  unint64_t v84 = v83 * v124;
  *(float *)&v147.__first_ = (float)v82;
  std::vector<float>::resize(&v143, v83 * v124, &v147);
  if (v122 != v121)
  {
    uint64_t v85 = 0;
    uint64_t v86 = v143;
    unint64_t v87 = (unint64_t *)v136;
    uint64_t v88 = v139;
    uint64_t v89 = v124;
    if (v124 <= 1) {
      uint64_t v89 = 1;
    }
    do
    {
      uint64_t v90 = v88[v85];
      if (v90)
      {
        uint64_t v91 = 8 * v90;
        long long v92 = (float *)v86;
        uint64_t v93 = v87;
        do
        {
          unint64_t v94 = *v93++;
          *v92++ = (float)v94;
          v91 -= 8;
        }
        while (v91);
      }
      v87 += v90;
      ++v85;
      v86 += 4 * v83;
    }
    while (v85 != v89);
  }
  std::vector<std::string>::pointer v95 = v142.__end_;
  unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)v142.__end_ - (char *)v142.__begin_) >> 3);
  unint64_t v97 = v84 - v96;
  if (v84 <= v96)
  {
    if (v84 < v96)
    {
      int64_t v107 = &v142.__begin_[v84];
      while (v95 != v107)
      {
        if (SHIBYTE(v95[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95[-1].__r_.__value_.__l.__data_);
        }
        --v95;
      }
      v142.__end_ = v107;
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((char *)v142.__end_cap_.__value_ - (char *)v142.__end_) >> 3) >= v97)
  {
    uint64_t v108 = &v142.__end_[v97];
    uint64_t v109 = 24 * v84 - 8 * (((char *)v142.__end_ - (char *)v142.__begin_) >> 3);
    do
    {
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v95, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v110 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
        v95->__r_.__value_.__r.__words[2] = v127.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v110;
      }
      ++v95;
      v109 -= 24;
    }
    while (v109);
    v142.__end_ = v108;
  }
  else
  {
    if (v84 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    v147.__end_cap_.__value_ = (std::allocator<std::string> *)&v142.__end_cap_;
    unint64_t v98 = 0x5555555555555556 * (((char *)v142.__end_cap_.__value_ - (char *)v142.__begin_) >> 3);
    if (v98 <= v84) {
      unint64_t v98 = v83 * v124;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v142.__end_cap_.__value_ - (char *)v142.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v99 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v99 = v98;
    }
    int v100 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v142.__end_cap_, v99);
    uint64_t v101 = 3 * v96;
    int64_t v102 = v100 + v96;
    v147.__first_ = v100;
    v147.__begin_ = v102;
    v147.__end_ = v102;
    v147.__end_cap_.__value_ = &v100[v103];
    long long v104 = &v100[v84];
    uint64_t v105 = 24 * v84 - 8 * v101;
    do
    {
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v102, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v106 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
        v102->__r_.__value_.__r.__words[2] = v127.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v106;
      }
      ++v102;
      v105 -= 24;
    }
    while (v105);
    v147.__end_ = v104;
    std::vector<std::string>::__swap_out_circular_buffer(&v142, &v147);
    std::__split_buffer<std::string>::~__split_buffer(&v147);
  }
  if (v122 != v121)
  {
    uint64_t v111 = 0;
    std::vector<std::string>::pointer begin = v142.__begin_;
    uint64_t v113 = v135[0];
    if (v124 <= 1) {
      uint64_t v114 = 1;
    }
    else {
      uint64_t v114 = v124;
    }
    do
    {
      uint64_t v115 = *((void *)v139 + v111);
      if (v115)
      {
        for (uint64_t j = 0; j != v115; ++j)
          std::string::operator=(&begin[j], (const std::string *)(v113 + j * 24));
      }
      v113 += 24 * v115;
      ++v111;
      begin += v83;
    }
    while (v111 != v114);
  }
  uint64_t v117 = operator new(0x18uLL);
  void *v117 = v124;
  v117[1] = 1;
  _DWORD v117[2] = v83;
  memset(&v147, 0, 24);
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v147, v117, (uint64_t)(v117 + 3), 3uLL);
  v147.__end_cap_.__value_ = 0;
  v147.__end_cap_.__value_ = 0;
  uint64_t v148 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v147.__end_cap_.__value_, v143, (uint64_t)v144, (v144 - v143) >> 2);
  uint64_t v118 = *(void **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v118;
    operator delete(v118);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = *(_OWORD *)&v147.__first_;
  *(void *)(a4 + 16) = v147.__end_;
  memset(&v147, 0, 24);
  std::__split_buffer<std::string>::pointer v119 = *(std::__split_buffer<std::string>::pointer *)(a4 + 24);
  if (v119)
  {
    *(void *)(a4 + 32) = v119;
    operator delete(v119);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    std::__split_buffer<std::string>::pointer v119 = v147.__first_;
  }
  *(std::__compressed_pair<std::string *> *)(a4 + 24) = v147.__end_cap_;
  *(void *)(a4 + 40) = v148;
  v147.__end_cap_.__value_ = 0;
  uint64_t v148 = 0;
  v147.__end_cap_.__value_ = 0;
  if (v119)
  {
    v147.__begin_ = v119;
    operator delete(v119);
  }
  if ((std::vector<std::string> *)(a4 + 48) != &v142) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 48), v142.__begin_, (long long *)v142.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v142.__end_ - (char *)v142.__begin_) >> 3));
  }
  operator delete(v117);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA408];
  uint64_t v120 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)__p + *((void *)__p[0] - std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v129 = v120;
  *(void *)&long long v130 = MEMORY[0x1E4FBA470] + 16;
  if (v133 < 0) {
    operator delete(v132);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](&v134);
  __p[0] = v135;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v136)
  {
    long long v137 = (std::string::size_type *)v136;
    operator delete(v136);
  }
  if (v139)
  {
    size_t v140 = (char *)v139;
    operator delete(v139);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
  {
    char v10 = (void *)v141.__r_.__value_.__r.__words[0];
LABEL_191:
    operator delete(v10);
  }
  __p[0] = &v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
}

void sub_1C8F02AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v75 - 192));
  if (a30 < 0) {
    operator delete(__p);
  }
  a32 = (void *)*MEMORY[0x1E4FBA408];
  uint64_t v77 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)&a32 + *((void *)a32 - std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  a34 = v77;
  a35 = MEMORY[0x1E4FBA470] + 16;
  if (a48 < 0) {
    operator delete(a43);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](&a51);
  a32 = &a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a72)
  {
    a73 = (uint64_t)a72;
    operator delete(a72);
  }
  if (a74)
  {
    a75 = (uint64_t)a74;
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  a32 = (void *)(a12 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v78 = *(void **)(a12 + 24);
  if (v78)
  {
    *(void *)(a12 + 32) = v78;
    operator delete(v78);
  }
  unint64_t v79 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v79;
    operator delete(v79);
  }
  a32 = (void *)(v75 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  unint64_t v80 = *(void **)(v75 - 224);
  if (v80)
  {
    *(void *)(v75 - 216) = v80;
    operator delete(v80);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logFeatureTensor(unsigned int *a1, uint64_t **a2)
{
  v74[20] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (char *)*a2;
  uint64_t v3 = (char *)a2[1];
  if (v3 - (char *)*a2 != 24)
  {
    uint64_t v8 = SNLPOSLoggerForCategory(4);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t v9 = (int)*a1;
    if (v9 >= 8)
    {
      unint64_t v15 = SNLPOSLoggerForCategory(4);
      char v10 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v65 = 2048;
        *(void *)unint64_t v66 = v9;
        _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      char v10 = off_1E65808C8[v9];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    uint64_t v16 = "[%s] Warning: Featurised spans shape not 3-dim";
LABEL_50:
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, v16, buf, 0xCu);
    return;
  }
  unsigned int v6 = 1;
  while (v4 != v3)
  {
    int v7 = *(_DWORD *)v4;
    v4 += 8;
    v6 *= v7;
  }
  uint64_t v11 = v6;
  uint64_t v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = (int)*a1;
    if (v13 >= 8)
    {
      uint64_t v17 = SNLPOSLoggerForCategory(4);
      uint64_t v14 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v65 = 2048;
        *(void *)unint64_t v66 = v13;
        _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v14 = off_1E65808C8[v13];
    }
    uint64_t v18 = **a2;
    uint64_t v19 = (*a2)[1];
    uint64_t v20 = (*a2)[2];
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = v14;
    __int16 v65 = 2048;
    *(void *)unint64_t v66 = v18;
    *(_WORD *)&v66[8] = 2048;
    uint64_t v67 = v19;
    __int16 v68 = 2048;
    uint64_t v69 = v20;
    __int16 v70 = 2048;
    uint64_t v71 = v11;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] [Span Tensor] shape=%lu,%lu,%lu num_elems=%lu", buf, 0x34u);
  }
  if (v11 != ((char *)a2[4] - (char *)a2[3]) >> 2)
  {
    uint64_t v8 = SNLPOSLoggerForCategory(4);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t v40 = (int)*a1;
    if (v40 >= 8)
    {
      std::string::size_type v53 = SNLPOSLoggerForCategory(4);
      uint64_t v41 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v65 = 2048;
        *(void *)unint64_t v66 = v40;
        _os_log_impl(&dword_1C8DA9000, v53, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v41 = off_1E65808C8[v40];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v41;
    uint64_t v16 = "[%s] Warning: Span shape not consistent with data";
    goto LABEL_50;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  unint64_t v21 = (unint64_t *)*a2;
  unint64_t v22 = **a2;
  if (v22)
  {
    for (unint64_t i = 0; i < v22; ++i)
    {
      if (v21[1])
      {
        unint64_t v24 = 0;
        do
        {
          unint64_t v25 = v21[2];
          if (v25)
          {
            for (unint64_t j = 0; j < v25; ++j)
            {
              unint64_t v27 = j + v25 * (v24 + i * v21[1]);
              std::string::size_type v28 = a2[3];
              if (v27 < ((char *)a2[4] - (char *)v28) >> 2)
              {
                float v29 = *((float *)v28 + v27);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66[2], (uint64_t)"[Span Token] i=", 15);
                uint64_t v30 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" j=", 3);
                unint64_t v31 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" k=", 3);
                unint64_t v32 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" id=", 4);
                uint64_t v33 = (void *)std::ostream::operator<<();
                uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" token=", 7);
                nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken((nlv4_inference_orchestrator::vocabulary::Vocabulary *)(a1 + 12), (unint64_t)v29, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_std::string p = &__p;
                }
                else {
                  p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                }
                long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)p_p, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                unint64_t v21 = (unint64_t *)*a2;
              }
              unint64_t v25 = v21[2];
            }
          }
          ++v24;
        }
        while (v24 < v21[1]);
        unint64_t v22 = *v21;
      }
    }
  }
  uint64_t v38 = *a1;
  if (v38 > 6) {
    int v39 = 4;
  }
  else {
    int v39 = dword_1C8F3FFAC[v38];
  }
  unint64_t v42 = SNLPOSLoggerForCategory(v39);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    signed int v43 = *a1;
    uint64_t v44 = "UNKNOWN";
    unint64_t v45 = "SSU";
    uint64_t v46 = "LVC";
    unint64_t v47 = "PSC";
    uint64_t v48 = "OWL";
    unint64_t v49 = "UaaP";
    uint64_t v50 = "SNLC";
    uint64_t v51 = "[insights-snlp-nlv4]: ";
    unint64_t v52 = "NLv4";
    switch(*a1)
    {
      case 0u:
        break;
      case 1u:
LABEL_46:
        uint64_t v51 = "[insights-snlp-snlc]: ";
        unint64_t v52 = v50;
        break;
      case 2u:
LABEL_54:
        uint64_t v51 = "[insights-snlp-owl]: ";
        unint64_t v52 = v48;
        break;
      case 3u:
LABEL_55:
        uint64_t v51 = "[insights-snlp-uaap]: ";
        unint64_t v52 = v49;
        break;
      case 4u:
LABEL_56:
        uint64_t v51 = "[insights-snlp-psc]: ";
        unint64_t v52 = v47;
        break;
      case 5u:
LABEL_57:
        uint64_t v51 = "[insights-snlp-lvc]: ";
        unint64_t v52 = v46;
        break;
      case 6u:
LABEL_58:
        uint64_t v51 = "[insights-snlp-ssu]: ";
        unint64_t v52 = v45;
        break;
      case 7u:
LABEL_60:
        uint64_t v55 = SNLPOSLoggerForCategory(4);
        uint64_t v51 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v58 = 136315394;
          *(void *)&int v58[4] = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          __int16 v59 = 2048;
          uint64_t v60 = v43;
          _os_log_impl(&dword_1C8DA9000, v55, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v58, 0x16u);
        }
        unint64_t v52 = v44;
        break;
      default:
        uint64_t v54 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v58 = 136315394;
          *(void *)&int v58[4] = "<UNDEFINED_COMPONENT>";
          __int16 v59 = 2048;
          uint64_t v60 = v43;
          _os_log_impl(&dword_1C8DA9000, v54, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v58, 0x16u);
        }
        uint64_t v50 = "<UNDEFINED_COMPONENT>";
        unint64_t v49 = "<UNDEFINED_COMPONENT>";
        uint64_t v48 = "<UNDEFINED_COMPONENT>";
        unint64_t v47 = "<UNDEFINED_COMPONENT>";
        uint64_t v46 = "<UNDEFINED_COMPONENT>";
        unint64_t v45 = "<UNDEFINED_COMPONENT>";
        unint64_t v52 = "<UNDEFINED_COMPONENT>";
        uint64_t v51 = "[insights-snlp-nlv4]: ";
        switch(*(_DWORD *)"[insights-snlp-nlv4]: ")
        {
          case 0:
            goto LABEL_63;
          case 1:
            goto LABEL_46;
          case 2:
            goto LABEL_54;
          case 3:
            goto LABEL_55;
          case 4:
            goto LABEL_56;
          case 5:
            goto LABEL_57;
          case 6:
            goto LABEL_58;
          default:
            uint64_t v44 = "<UNDEFINED_COMPONENT>";
            signed int v43 = *(_DWORD *)"[insights-snlp-nlv4]: ";
            goto LABEL_60;
        }
    }
LABEL_63:
    std::stringbuf::str();
    if (v61 >= 0) {
      std::string::size_type v56 = v58;
    }
    else {
      std::string::size_type v56 = *(unsigned char **)v58;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v51;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    unint64_t v63 = v56;
    _os_log_impl(&dword_1C8DA9000, v42, OS_LOG_TYPE_DEBUG, "[%s] %s%s", (uint8_t *)&__p, 0x20u);
    if (v61 < 0) {
      operator delete(*(void **)v58);
    }
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA408];
  uint64_t v57 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v66[2] = v57;
  uint64_t v67 = MEMORY[0x1E4FBA470] + 16;
  if (v73 < 0) {
    operator delete(v72);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](v74);
}

void sub_1C8F036E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a22 = *MEMORY[0x1E4FBA408];
  uint64_t v42 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a22 + *(void *)(a22 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a24 = v42;
  a25 = MEMORY[0x1E4FBA470] + 16;
  if (a38 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](&a41);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::insertToFeatureStore(int *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl()) {
    nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::createLoggingSpanFeaturizerResponse();
  }
  unint64_t v2 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    if (v3 >= 8)
    {
      unint64_t v5 = SNLPOSLoggerForCategory(4);
      unsigned int v4 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v11 = "<UNDEFINED_COMPONENT>";
        __int16 v12 = 2048;
        uint64_t v13 = v3;
        _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      unsigned int v4 = off_1E65808C8[v3];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v11 = v4;
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "[%s] Skipping insertion of matched spans featurized response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", buf, 0xCu);
  }
  unsigned int v6 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *a1;
    if (v7 >= 8)
    {
      uint64_t v9 = SNLPOSLoggerForCategory(4);
      uint64_t v8 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v11 = "<UNDEFINED_COMPONENT>";
        __int16 v12 = 2048;
        uint64_t v13 = v7;
        _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v8 = off_1E65808C8[v7];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v11 = v8;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Unable to insert span featurizer response into FeatureStore", buf, 0xCu);
  }
}

uint64_t std::pair<snlp::common::tensor::InferenceTensor,std::vector<std::string>>::~pair(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::createLoggingSpanFeaturizerResponse()
{
}

void sub_1C8F04030(_Unwind_Exception *a1)
{
  void *v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeNLv4SpanFeaturizerResponse@<X0>(uint64_t *a1@<X0>, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2@<X8>)
{
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(a2);
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::makeResponse(a2);
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t result = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  if (result)
  {
    unsigned int v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeITFMSpanFeaturizerResponse(uint64_t *a1@<X0>, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a2@<X8>)
{
  uint64_t v4 = (sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(a2);
  sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::makeResponse(v4);
  uint64_t v5 = *a1;
  *a1 = 0;
  uint64_t v6 = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (!*((void *)a2 + 1)) {
    operator new();
  }
  operator new();
}

void sub_1C8F042E4(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x1012C40EC159624);
  MEMORY[0x1CB774140](v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C8F04380(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::appendExpandedSpanLabelsAndNumericalisedIndexes(int *a1, uint64_t **a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels((void *)a1 + 66, a5, (void *)a1 + 1, a1, &v28);
  std::vector<std::string>::pointer v15 = v28;
  uint64_t v14 = v29;
  if (v28 == v29)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v27 = a4;
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)v15);
      if (*((unsigned char *)a1 + 152)) {
        BOOL v18 = v17 == *((void *)a1 + 18);
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v15, (uint64_t)v15);
        uint64_t v19 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)v15);
        v16 += std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a2, v19, v19) & 1;
      }
      if (v16 + a6 >= a7) {
        break;
      }
      if (++v15 == v14) {
        goto LABEL_26;
      }
    }
    uint64_t v20 = *(const char **)(v27 + 8);
    if (v20)
    {
      if (v20[23] < 0) {
        uint64_t v20 = *(const char **)v20;
      }
    }
    else
    {
      uint64_t v20 = "nullptr";
    }
    unint64_t v21 = *(const char **)(*(void *)(a5 + 24) + 48);
    if (v21)
    {
      if (v21[23] < 0) {
        unint64_t v21 = *(const char **)v21;
      }
    }
    else
    {
      unint64_t v21 = "nullptr";
    }
    unint64_t v22 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      BOOL v23 = (const char *)*a1;
      if (v23 >= 8)
      {
        unint64_t v25 = SNLPOSLoggerForCategory(4);
        unint64_t v24 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          __int16 v31 = 2048;
          unint64_t v32 = v23;
          _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        unint64_t v24 = off_1E65808C8[v23];
      }
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v31 = 2080;
      unint64_t v32 = v20;
      __int16 v33 = 2080;
      uint64_t v34 = v21;
      __int16 v35 = 2048;
      uint64_t v36 = v16;
      __int16 v37 = 2048;
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3);
      _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_DEBUG, "[%s] Truncating the number of span labels for token='%s', span label='%s'. Using the first %lu out of %lu expanded label(s).", buf, 0x34u);
    }
  }
LABEL_26:
  *(void *)std::string buf = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v16;
}

void sub_1C8F04634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return 0;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return 1;
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      uint64_t result = (uint64_t *)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a2);
      if (!result) {
        break;
      }
      uint64_t v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    __int16 v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v6;
    *uint64_t v9 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      uint64_t v11 = *v9;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_1C8F047F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanCoverage(int *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*(void *)(v4 + 48))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"span '", 6);
        uint64_t v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"' covers tokens [", 17);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
        unint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")\n", 2);
      }
      v4 += 88;
    }
    while (v4 != v5);
  }
  uint64_t v9 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *a1;
    if (v10 >= 8)
    {
      __int16 v12 = SNLPOSLoggerForCategory(4);
      uint64_t v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v11 = off_1E65808C8[v10];
    }
    std::stringbuf::str();
    if (v23 >= 0) {
      uint64_t v13 = buf;
    }
    else {
      uint64_t v13 = *(unsigned char **)buf;
    }
    *(_DWORD *)unint64_t v24 = 136315394;
    unint64_t v25 = v11;
    __int16 v26 = 2080;
    uint64_t v27 = v13;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "[%s] %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)buf);
    }
  }
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v14;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v19);
}

void sub_1C8F04B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(boost::archive::detail::basic_oarchive *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken();
}

void sub_1C8F052C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360EC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360EC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  uint64_t v6 = (uint64_t)(a3[1] - *a3) >> 3;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360F98;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360F98;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360F08;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360F08;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360DE8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360DE8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360D10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360D10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, uint64_t *a2, void *a3)
{
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 40))(v7);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v8);
  int v9 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v9);
  if (v8--)
  {
    boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
    boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save();
  }
  return result;
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, 8);
  if (result != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C8F05A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C8F05B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F23612B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23612B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v9);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  int v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  unint64_t v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
      uint64_t result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
      unint64_t v8 = v10--;
      v6 += 24;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::save_object_data(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v8);
  uint64_t v9 = (a3[1] - *a3) >> 3;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v9);
  uint64_t v6 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v7 = 8 * v9;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[5] + 96))(a2[5], v6, 8 * v9);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
    }
  }
  return result;
}

void sub_1C8F05E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361388;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361388;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F23612F8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23612F8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F23611D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23611D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361100;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361100;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 48, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::class_info()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  uint64_t v6 = (uint64_t)(a3[1] - *a3) >> 2;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

void sub_1C8F0632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360F50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360F50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360DA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360DA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 48, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::class_info()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::save_object_data(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v8);
  uint64_t v9 = (a3[1] - *a3) >> 2;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v9);
  uint64_t v6 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v7 = 4 * v9;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[5] + 96))(a2[5], v6, 4 * v9);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
    }
  }
  return result;
}

void sub_1C8F0668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361340;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361340;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361190;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361190;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360D58;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360D58;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361148;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361148;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save();
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, void *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v5);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save();
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360C80;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360C80;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360E78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360E78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360C38;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360C38;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360E30;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360E30;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360CC8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360CC8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v9);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  int v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  unint64_t v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      uint64_t result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
      unint64_t v8 = v10--;
      v6 += 48;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save();
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  (*(void (**)(char *__return_ptr))(*(void *)a1 + 40))(v9);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  int v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  uint64_t result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  unint64_t v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      uint64_t result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
      unint64_t v8 = v10--;
      v6 += 48;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save();
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361070;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361070;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361268;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361268;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361028;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361028;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2361220;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2361220;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F23610B8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23610B8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((void *)a2 + 5, a3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((void *)a2 + 5, a3 + 8);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((void *)a2 + 5, a3 + 16);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_1F2360FE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360FE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

void snlp::ssu::cache::SSUCacheFileWriteStream::SSUCacheFileWriteStream(std::string *this, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::ofstream::basic_ofstream((uint64_t *)&this[1]);
  snlp::ssu::cache::SSUCacheFileWriteStream::buildArchive((uint64_t)&this[1], a6);
}

void sub_1C8F07C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::string *a11, uint64_t a12, long long a13, std::string::size_type a14)
{
  if (a2 == 2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a10, "I/O stream exception: ");
    uint64_t v16 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
    uint64_t v17 = std::string::append((std::string *)&a10, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    a14 = v17->__r_.__value_.__r.__words[2];
    a13 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&a13);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
  }
  if (a2 == 1)
  {
    uint64_t v19 = __cxa_begin_catch(exception_object);
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a10, "Boost serialization exception: ");
    __int16 v21 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    uint64_t v22 = std::string::append((std::string *)&a10, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a14 = v22->__r_.__value_.__r.__words[2];
    a13 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, (const std::string *)&a13);
    v20->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8F07E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8F07EC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C8F07EECLL);
}

void snlp::ssu::cache::SSUCacheFileWriteStream::buildArchive(uint64_t a1, int a2)
{
  if (a2) {
    boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl();
  }
  boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::binary_oarchive_impl();
}

void sub_1C8F07F94()
{
  boost::archive::detail::basic_oarchive::~basic_oarchive(v0);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectIntentList>(snlp::ssu::cache::SSUCacheObjectIntentList)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectIntentList>(snlp::ssu::cache::SSUCacheObjectIntentList)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectHeader>(snlp::ssu::cache::SSUCacheObjectHeader)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectHeader>(snlp::ssu::cache::SSUCacheObjectHeader)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

void boost::archive::binary_oarchive::~binary_oarchive(boost::archive::binary_oarchive *this)
{
}

{
  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive();
}

void boost::archive::text_oarchive::~text_oarchive(boost::archive::text_oarchive *this)
{
}

{
  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

void snlp::ssu::cache::SSUCacheFileWriteStream::path(snlp::ssu::cache::SSUCacheFileWriteStream *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::isAtEnd(snlp::ssu::cache::SSUCacheFileWriteStream *this)
{
  return *((void *)this + 93) == *((void *)this + 91)
      && *((void *)this + 94) == *((void *)this + 92)
      && *((unsigned char *)this + 760) != 0;
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchNegative(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 744);
  uint64_t v3 = *(void *)(a1 + 728);
  if (v2 == v3)
  {
    uint64_t v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "Client tried to write the next negative cached encodings batch when there are none remaining to be written", buf, 2u);
    }
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 24);
    uint64_t v12 = *(void *)(a2 + 40);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v13 = buf;
    uint64_t v5 = *(unsigned int *)(a1 + 720);
    if (v5 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v14 = &v13;
    ((void (*)(uint8_t ***, uint64_t))off_1F23627B0[v5])(&v14, a1 + 592);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    uint64_t v6 = *(void *)(a1 + 744) + 1;
    *(void *)(a1 + 744) = v6;
    if (v6 == *(void *)(a1 + 728)) {
      snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(a1, 4660);
    }
  }
  return v2 != v3;
}

void sub_1C8F08390(uint64_t a1, std::string *a2, std::string *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9)
{
}

void sub_1C8F08568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8F085FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C8F08624);
}

uint64_t snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = &v5;
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 720);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = &v4;
  return (*(&off_1F23627C0 + v2))((int)&v6, (boost::archive::detail::basic_oarchive *)(a1 + 592));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(unsigned long)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(unsigned long)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(uint64_t **a1, boost::archive::detail::basic_oarchive *this)
{
  uint64_t v3 = **a1;
  boost::archive::detail::basic_oarchive::end_preamble(this);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((void *)this + 5, v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchPositive(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 744) >= *(void *)(a1 + 728))
  {
    if (*(void *)(a1 + 752) == *(void *)(a1 + 736))
    {
      uint64_t v2 = SNLPOSLoggerForCategory(8);
      BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)std::string buf = 0;
        uint64_t v4 = "Client tried to write the next positive cached encodings batch when there are none remaining to be written";
        goto LABEL_7;
      }
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)a2;
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 48);
      uint64_t v13 = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      uint64_t v14 = buf;
      uint64_t v6 = *(unsigned int *)(a1 + 720);
      if (v6 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::vector<std::string>::pointer v15 = &v14;
      ((void (*)(uint8_t ***, uint64_t))*(&off_1F23627D0 + v6))(&v15, a1 + 592);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v10[0])
      {
        v10[1] = v10[0];
        operator delete(v10[0]);
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      uint64_t v7 = *(void *)(a1 + 752) + 1;
      *(void *)(a1 + 752) = v7;
      if (v7 == *(void *)(a1 + 736)) {
        snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(a1, 22136);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v2 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v4 = "Client tried to write a positive cached encodings batch when there are still negative batches remaining to be written";
LABEL_7:
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, v4, buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_1C8F08914(uint64_t a1, std::string *a2, std::string *a3)
{
}

void sub_1C8F08AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8F08B68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C8F08B90);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeDebugInformation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 744) < *(void *)(a1 + 728))
  {
    uint64_t v2 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v4 = "Client tried to write positive plaintext examples when there are still negative batches remaining to be written";
LABEL_10:
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, v4, buf, 2u);
    return 0;
  }
  if (*(void *)(a1 + 752) < *(void *)(a1 + 736))
  {
    uint64_t v2 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v4 = "Client tried to write positive plaintext examples when there are still positive batches remaining to be written";
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 760))
  {
    uint64_t v2 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v4 = "Client tried to write debug information when this have already been written";
    goto LABEL_10;
  }
  *(_OWORD *)std::string buf = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v10 = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v12 = buf;
  uint64_t v6 = *(unsigned int *)(a1 + 720);
  if (v6 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v13 = &v12;
  ((void (*)(uint8_t ***, uint64_t))*(&off_1F23627E0 + v6))(&v13, a1 + 592);
  v7[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v7);
  v7[0] = (void **)buf;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v7);
  BOOL result = 1;
  *(unsigned char *)(a1 + 760) = 1;
  return result;
}

void sub_1C8F08DC0(uint64_t a1, std::string *a2, std::string *a3)
{
}

void sub_1C8F08F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8F09008(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C8F09030);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(snlp::ssu::cache::SSUCacheObjectDebugInformation)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(snlp::ssu::cache::SSUCacheObjectDebugInformation)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

void sub_1C8F0937C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F095D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F0969C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F099DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F09B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getUtf8Indices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((void *)this + 12);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getUtf16Indices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((void *)this + 14);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getScalarIndices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((void *)this + 16);
}

uint64_t snlp::ssu::trigger::SSUTriggerAppName::isTriggered(unsigned __int8 **this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  snlp::ssu::proto::SSUValidatedRequest::getAppNameMatchingSpanBundleIds(a2, a2, &v6);
  uint64_t v3 = v7;
  uint64_t v4 = v3 != std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v6, v7, this + 1);
  long long v8 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4 | (v4 << 32);
}

void snlp::ssu::trigger::SSUTriggerAppName::~SSUTriggerAppName(void **this)
{
  *this = &unk_1F235F310;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1CB775C40);
}

{
  *this = &unk_1F235F310;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

__n128 snlp::ssu::trigger::SSUTriggerAppName::SSUTriggerAppName(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = &unk_1F235F310;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(void *)a1 = &unk_1F235F310;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t snlp::ssu::espresso::SSUNessieModule::SSUNessieModule(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  int v11 = 6;
  LOBYTE(v9[0]) = 0;
  char v10 = 0;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, (uint64_t)v12, &v11, (unsigned __int8 *)a1, v9);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 352), "padding_mask");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 376), "token_ids");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 400), "encodings");
  *(void *)(a1 + 424) = a3;
  *(void *)(a1 + 432) = 850045863;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors((snlp::ssu::espresso::SSUNessieModule *)a1, a4);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 184);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _os_feature_enabled_impl();
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C8F09E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::mutex::~mutex(v25);
  if (v21[423] < 0) {
    operator delete(*v24);
  }
  if (v21[399] < 0) {
    operator delete(*v23);
  }
  if (v21[375] < 0) {
    operator delete(*v22);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v21);
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors(snlp::ssu::espresso::SSUNessieModule *this, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  E5RT::TensorDataType::TensorDataType();
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v4 = *((void *)this + 53);
  uint64_t v5 = (char *)operator new(0x10uLL);
  std::vector<std::string>::pointer v15 = v5 + 16;
  *(void *)uint64_t v5 = a2;
  *((void *)v5 + 1) = v4;
  std::string __p = v5;
  uint64_t v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (v15 == __p || (unint64_t)(v15 - __p) <= 8) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v8 = *(void *)__p;
    uint64_t v7 = *((void *)__p + 1);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "Using new padding mask and token IDs shapes: {%lu, %lu}", buf, 0x16u);
  }
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(void *)std::string buf = (char *)this + 352;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)this + 352, (long long **)buf);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v13;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(void *)std::string buf = (char *)this + 376;
  int v11 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)this + 376, (long long **)buf);
  uint64_t v12 = *((void *)v11 + 5);
  *((void *)v11 + 5) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)v16);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v18);
}

void sub_1C8F0A148(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1C8F0A228(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v15)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C8F0A2DCLL);
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void sub_1C8F0A288(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C8F0A304);
}

void sub_1C8F0A298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12) {
    operator delete(a12);
  }
  JUMPOUT(0x1C8F0A2F4);
}

void sub_1C8F0A30C()
{
}

void snlp::ssu::espresso::SSUNessieModule::forward(snlp::ssu::espresso::SSUNessieModule *this@<X0>, uint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::mutex *)((char *)this + 432);
  std::mutex::lock((std::mutex *)((char *)this + 432));
  if (a2[1] == *a2) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = **a2;
  uint64_t v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "Reshaping input descriptors to use batch size %lu", buf, 0xCu);
  }
  snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors(this, v7);
  uint64_t v9 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "Calling Espresso to perform model inference", buf, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts((E5RT::ExecutionStreamOperation **)this);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)(a2 + 6));
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 23);
  int v11 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 3));
  E5RT::ExecutionStream::ResetStream(*((E5RT::ExecutionStream **)this + 3));
  snlp::ssu::espresso::SSUNessieModule::getOutputs(this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts((E5RT::ExecutionStreamOperation **)this);
  std::mutex::unlock(v6);
}

void sub_1C8F0A4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v11);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

double snlp::ssu::espresso::SSUNessieModule::getOutputs@<D0>(snlp::ssu::espresso::SSUNessieModule *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (unsigned __int8 *)this + 400;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 400, (std::string *)&v13);
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 22));
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, v4);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v11, *((E5RT::IOPort **)v6 + 5));
  uint64_t v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v11);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::vector<float>::resize((void *)&v14 + 1, NumElements);
  long long v9 = v14;
  *a2 = v13;
  a2[1] = v9;
  double result = *(double *)&v15;
  a2[2] = v15;
  return result;
}

void sub_1C8F0A5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModule::setInputs(snlp::ssu::espresso::SSUNessieModule *this, const snlp::ssu::espresso::SSUNessieModuleInputs *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromNLContext(nlv4_inference_orchestrator::placeholder::VerbExtractor *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)a2 + 11);
  if (v4 == *((void **)a2 + 12))
  {
    *a3 = 0;
    a3[24] = 0;
    return;
  }
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    int v17 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v8 = v6[5];
  if (v8 && *(void *)(v8 + 8)) {
    operator new();
  }
  uint64_t v9 = v6[4];
  if (v9)
  {
    uint64_t v10 = *(const sirinluexternal::UserDialogAct **)(v9 + 8);
    if (v10)
    {
      nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(this, v10, a3);
      goto LABEL_25;
    }
  }
  uint64_t v11 = v6[1];
  if (v11)
  {
    uint64_t v13 = v11 + 8;
    uint64_t v12 = *(const sirinluexternal::UserDialogAct ***)(v11 + 8);
    if (*(const sirinluexternal::UserDialogAct ***)(v13 + 8) != v12)
    {
      nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(this, *v12, a3);
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v14 = v6[3];
    if (v14)
    {
      if (*(void *)(v14 + 16) != *(void *)(v14 + 8)) {
        operator new();
      }
    }
    else
    {
      uint64_t v15 = v6[8];
      if (v15 && *(void *)(v15 + 8)) {
        std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>();
      }
      uint64_t v16 = v6[7];
      if (v16 && *(void *)(v16 + 16)) {
        std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>();
      }
    }
  }
  *a3 = 0;
  a3[24] = 0;
LABEL_25:
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1C8F0A874(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  unsigned char *v10 = 0;
  v10[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C8F0A854);
}

void sub_1C8F0A8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph(const siri::ontology::UsoGraph *a1@<X1>, std::string *a2@<X8>)
{
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 1065353216;
  uint64_t v4 = *((void *)a1 + 11);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  uint64_t v16 = (void *)v4;
  std::deque<siri::ontology::UsoGraphNode const*>::push_back(&v18, &v16);
  uint64_t v5 = *((void *)&v20 + 1);
  if (*((void *)&v20 + 1))
  {
    uint64_t v6 = (const struct __class_type_info *)MEMORY[0x1E4FA3AC0];
    do
    {
      uint64_t v7 = *(void *)(*(void *)(*((void *)&v18 + 1)
                                 + (((unint64_t)(v5 + v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v5 + v20 - 1) & 0x1FF));
      if (!v7) {
        break;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 1)
      {
        if (v8)
        {
          uint64_t v13 = v8[13];
          if (*(char *)(v13 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v13 + 40), *(void *)(v13 + 48));
          }
          else
          {
            long long v14 = *(_OWORD *)(v13 + 40);
            a2->__r_.__value_.__r.__words[2] = *(void *)(v13 + 56);
            *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v14;
          }
          char v12 = 1;
          goto LABEL_18;
        }
      }
      if ((void)v19 == *((void *)&v18 + 1)) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = (((void)v19 - *((void *)&v18 + 1)) << 6) - 1;
      }
      if ((unint64_t)(v9 - (--*((void *)&v20 + 1) + v20)) >= 0x400)
      {
        operator delete(*(void **)(v19 - 8));
        *(void *)&long long v19 = v19 - 8;
      }
      siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&v16, *(siri::ontology::UsoGraph **)(v7 + 8), (const UsoGraphNode *)v7);
      uint64_t v10 = v16;
      uint64_t v11 = v17;
      if (v16 != v17)
      {
        do
        {
          uint64_t v15 = *v10;
          std::deque<siri::ontology::UsoGraphNode const*>::push_back(&v18, &v15);
          v10 += 2;
        }
        while (v10 != v11);
        uint64_t v10 = v16;
      }
      if (v10)
      {
        int v17 = v10;
        operator delete(v10);
      }
      uint64_t v5 = *((void *)&v20 + 1);
    }
    while (*((void *)&v20 + 1));
  }
  char v12 = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
LABEL_18:
  a2[1].__r_.__value_.__s.__data_[0] = v12;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(nlv4_inference_orchestrator::placeholder::VerbExtractor *this@<X0>, const sirinluexternal::UserDialogAct *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v14 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    long long v14 = 0;
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v6 && *(void *)(v6 + 16)) {
    operator new();
  }
  uint64_t v7 = *((void *)a2 + 6);
  if (v7 && *(void *)(v7 + 16)) {
    operator new();
  }
  uint64_t v8 = *((void *)a2 + 4);
  if (v8 && *(void *)(v8 + 8)) {
    operator new();
  }
  uint64_t v9 = *((void *)a2 + 10);
  if (v9 && *(void *)(v9 + 8)) {
    operator new();
  }
  uint64_t v10 = *((void *)a2 + 2);
  if (v10 && *(void *)(v10 + 8)) {
    operator new();
  }
  uint64_t v11 = *((void *)a2 + 9);
  if (v11 && *(void *)(v11 + 8)) {
    operator new();
  }
  uint64_t v12 = *((void *)a2 + 8);
  if (v12 && *(void *)(v12 + 8)) {
    operator new();
  }
  uint64_t v13 = *((void *)a2 + 7);
  if (v13 && *(void *)(v13 + 8)) {
    operator new();
  }
  *a3 = 0;
  a3[24] = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C8F0AF04(void *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  __cxa_begin_catch(a1);
  unsigned char *v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C8F0AED8);
}

void sub_1C8F0AFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>()
{
}

void sub_1C8F0B010(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

void std::deque<siri::ontology::UsoGraphNode const*>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      uint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          signed int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
          unint64_t v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            unint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)unint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          uint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          long long v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            int v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            int v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unint64_t v25 = (char *)a1[3];
    __int16 v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      float v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string::size_type v56 = (uint64_t *)a1[1];
          uint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            uint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            uint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)uint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          int v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        unint64_t v63 = (char *)a1[1];
        unint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v97);
            int v100 = &v98[8 * (v97 >> 2)];
            uint64_t v101 = (uint64_t *)a1[1];
            unint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              unint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              long long v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)long long v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            long long v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              unint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            float v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              unint64_t v63 = (char *)a1[1];
            }
            unint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)unint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    __int16 v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    uint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      int8x8_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      unint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        BOOL v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          unint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v86);
          unint64_t v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            long long v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)long long v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          unint64_t v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            BOOL v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        unint64_t v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    unint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C8F0B588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::TreeNode::isLeafNode(nlv4_inference_orchestrator::trees::TreeNode *this)
{
  return *((void *)this + 11) == *((void *)this + 12);
}

void *nlv4_inference_orchestrator::trees::operator<<(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"TreeNode[", 9);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"label:'", 7);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"', ", 3);
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"value:'", 7);
  int v11 = *(char *)(a2 + 47);
  if (v11 >= 0) {
    uint64_t v12 = a2 + 24;
  }
  else {
    uint64_t v12 = *(void *)(a2 + 24);
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 32);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"', ", 3);
  BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"parentArgument:'", 16);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v18 = a2 + 48;
  uint64_t v17 = v19;
  int v20 = *(char *)(v18 + 23);
  if (v20 >= 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v17;
  }
  if (v20 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    uint64_t v22 = *(void *)(v18 + 8);
  }
  int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v21, v22);
  uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"', ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"UTF-8 code unit indices:[", 25);
  unint64_t v25 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
  __int16 v26 = (void *)std::ostream::operator<<();
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"UTF-16 code unit indices:[", 26);
  uint64_t v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
  float v29 = (void *)std::ostream::operator<<();
  unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unicode code point indices:[", 28);
  __int16 v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  uint64_t v32 = (void *)std::ostream::operator<<();
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
}

uint64_t snlp::common::text_uso_graph::SpacedTextTreeLexer::lex(uint64_t a1, const std::string *a2, uint64_t a3)
{
  nlv4_inference_orchestrator::trees::trimWhitespace(&__p, a2);
  uint64_t v60 = (std::string *)(a1 + 8);
  do
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_202;
    }
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    char v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v69 = 0;
    char v70 = 0;
    uint64_t v71 = 0;
    *(_OWORD *)int v62 = 0u;
    memset(v63, 0, 25);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v79 = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    memset(__str, 0, 32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string p = (std::sub_match<const char *> *)&__p;
    }
    else {
      p_std::string p = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    }
    *(_OWORD *)((char *)&__str[1].__r_.__value_.__l.__data_ + 1) = 0uLL;
    int v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 32, p_p, (std::sub_match<const char *> *)((char *)p_p + size), (std::vector<std::csub_match> *)__str, 0);
    std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v9 = &__p;
    }
    else {
      unint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v9, (uint64_t)v9 + v8, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0]) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v7)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
        unint64_t v10 = v62;
      }
      else {
        unint64_t v10 = (void **)v62[0];
      }
      if (*((unsigned char *)v10 + 40)) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v10[3], (char *)v10[4], (unsigned char *)v10[4] - (unsigned char *)v10[3]);
      }
      else {
        memset(__str, 0, 24);
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)a3 + 16))(a3, __str);
    }
    else
    {
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      char v76 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      char v79 = 0;
      char v80 = 0;
      uint64_t v81 = 0;
      memset(__str, 0, 41);
      std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = (std::sub_match<const char *> *)&__p;
      }
      else {
        uint64_t v12 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
      }
      int v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 96, v12, (std::sub_match<const char *> *)((char *)v12 + v11), (std::vector<std::csub_match> *)__str, 0);
      std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &__p;
      }
      else {
        uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v15, (uint64_t)v15 + v14, (uint64_t *)__str, 0);
      if (__str[0].__r_.__value_.__r.__words[0]) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if (v13)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
          BOOL v16 = v62;
        }
        else {
          BOOL v16 = (void **)v62[0];
        }
        if (*((unsigned char *)v16 + 40)) {
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v16[3], (char *)v16[4], (unsigned char *)v16[4] - (unsigned char *)v16[3]);
        }
        else {
          memset(__str, 0, 24);
        }
        uint64_t v23 = std::stoi(__str, 0, 10);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, v23);
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        char v76 = 0;
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        char v79 = 0;
        char v80 = 0;
        uint64_t v81 = 0;
        memset(__str, 0, 41);
        std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = (std::sub_match<const char *> *)&__p;
        }
        else {
          uint64_t v18 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
        }
        int v19 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 160, v18, (std::sub_match<const char *> *)((char *)v18 + v17), (std::vector<std::csub_match> *)__str, 0);
        std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &__p;
        }
        else {
          uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
        }
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v21, (uint64_t)v21 + v20, (uint64_t *)__str, 0);
        if (__str[0].__r_.__value_.__r.__words[0]) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        if (!v19) {
          goto LABEL_186;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
          uint64_t v22 = v62;
        }
        else {
          uint64_t v22 = (void **)v62[0];
        }
        if (*((unsigned char *)v22 + 40)) {
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v22[3], (char *)v22[4], (unsigned char *)v22[4] - (unsigned char *)v22[3]);
        }
        else {
          memset(__str, 0, 24);
        }
        (**(void (***)(uint64_t, std::string *))a3)(a3, __str);
      }
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v69) {
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
    }
    else {
      memset(__str, 0, 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str[0];
    std::string::size_type v24 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    int v25 = SHIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
    }
    if (!v24) {
      goto LABEL_185;
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v79 = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    memset(__str, 0, 41);
    if (v25 >= 0) {
      __int16 v26 = (std::sub_match<const char *> *)&__p;
    }
    else {
      __int16 v26 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    }
    int v27 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 352, v26, (std::sub_match<const char *> *)((char *)v26 + v24), (std::vector<std::csub_match> *)__str, 0);
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v29 = &__p;
    }
    else {
      float v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v29, (uint64_t)v29 + v28, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0]) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v27)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
        unint64_t v30 = v62;
      }
      else {
        unint64_t v30 = (void **)v62[0];
      }
      if (*((unsigned char *)v30 + 40)) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v30[3], (char *)v30[4], (unsigned char *)v30[4] - (unsigned char *)v30[3]);
      }
      else {
        memset(__str, 0, 24);
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)a3 + 40))(a3, __str);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if (v69) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      }
      else {
        memset(__str, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str[0];
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v79 = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    memset(__str, 0, 41);
    std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = (std::sub_match<const char *> *)&__p;
    }
    else {
      uint64_t v32 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
    }
    int v33 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 416, v32, (std::sub_match<const char *> *)((char *)v32 + v31), (std::vector<std::csub_match> *)__str, 0);
    std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v35 = &__p;
    }
    else {
      long long v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v35, (uint64_t)v35 + v34, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0]) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v33)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
        uint64_t v36 = v62;
      }
      else {
        uint64_t v36 = (void **)v62[0];
      }
      if (*((unsigned char *)v36 + 40)) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v36[3], (char *)v36[4], (unsigned char *)v36[4] - (unsigned char *)v36[3]);
      }
      else {
        memset(__str, 0, 24);
      }
      uint64_t v37 = std::stoi(__str, 0, 10);
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3);
      long long v39 = (char *)v62[0] + 64;
      if (v38 <= 2) {
        long long v39 = (char *)&v63[1] + 8;
      }
      if (*v39)
      {
        BOOL v40 = v38 > 2;
        unint64_t v41 = (char **)v63 + 1;
        if (v40) {
          unint64_t v41 = (char **)((char *)v62[0] + 48);
        }
        unint64_t v42 = (char **)((char *)v62[0] + 56);
        if (!v40) {
          unint64_t v42 = (char **)&v63[1];
        }
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v61, *v41, *v42, *v42 - *v41);
      }
      else
      {
        memset(&v61, 0, sizeof(v61));
      }
      uint64_t v43 = std::stoi(&v61, 0, 10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v37, v43);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if (v69) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      }
      else {
        memset(__str, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str[0];
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v79 = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    memset(__str, 0, 41);
    std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v45 = (std::sub_match<const char *> *)&__p;
    }
    else {
      unint64_t v45 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
    }
    int v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 288, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)__str, 0);
    std::string::size_type v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &__p;
    }
    else {
      uint64_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v48, (uint64_t)v48 + v47, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0]) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v46)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
        unint64_t v49 = v62;
      }
      else {
        unint64_t v49 = (void **)v62[0];
      }
      if (*((unsigned char *)v49 + 40))
      {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v49[3], (char *)v49[4], (unsigned char *)v49[4] - (unsigned char *)v49[3]);
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v50 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v50 = __str[0].__r_.__value_.__l.__size_;
        }
      }
      else
      {
        std::string::size_type v50 = 0;
        memset(__str, 0, 24);
      }
      (*(void (**)(uint64_t, std::string::size_type))(*(void *)a3 + 32))(a3, v50);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if (v69) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      }
      else {
        memset(__str, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str[0];
    }
    std::string::size_type v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    }
    if (!v51)
    {
LABEL_185:
      int v57 = 3;
      goto LABEL_198;
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v79 = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    memset(__str, 0, 41);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v52 = (std::sub_match<const char *> *)&__p;
    }
    else {
      unint64_t v52 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    }
    int v53 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 224, v52, (std::sub_match<const char *> *)((char *)v52 + v51), (std::vector<std::csub_match> *)__str, 0);
    std::string::size_type v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v55 = &__p;
    }
    else {
      uint64_t v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v54 = __p.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v55, (uint64_t)v55 + v54, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0]) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v53)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1) {
        std::string::size_type v56 = v62;
      }
      else {
        std::string::size_type v56 = (void **)v62[0];
      }
      if (*((unsigned char *)v56 + 40)) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v56[3], (char *)v56[4], (unsigned char *)v56[4] - (unsigned char *)v56[3]);
      }
      else {
        memset(__str, 0, 24);
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)a3 + 8))(a3, __str);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if (v69) {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      }
      else {
        memset(__str, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v57 = 0;
      std::string __p = __str[0];
      goto LABEL_198;
    }
LABEL_186:
    std::operator+<char>();
    if (*(char *)(a1 + 31) < 0) {
      operator delete(v60->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&__str[0].__r_.__value_.__l + 2);
    int v57 = 1;
LABEL_198:
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
  }
  while (!v57);
  if (v57 == 3)
  {
LABEL_202:
    uint64_t v58 = 1;
    goto LABEL_204;
  }
  uint64_t v58 = 0;
LABEL_204:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v58;
}

void sub_1C8F0C3DC()
{
  if (v1) {
    operator delete(v1);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(v0);
}

void sub_1C8F0C3F4()
{
}

uint64_t snlp::common::text_uso_graph::SpacedTextTreeLexer::getErrorMessage(snlp::common::text_uso_graph::SpacedTextTreeLexer *this)
{
  return (uint64_t)this + 8;
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanTruncator::truncate(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a3 < (unint64_t)((a2[1] - *a2) >> 5))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(result + 40);
    if (v6 > 6) {
      int v7 = 4;
    }
    else {
      int v7 = dword_1C8F3FFAC[v6];
    }
    std::string::size_type v8 = SNLPOSLoggerForCategory(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(v5 + 40);
      unint64_t v10 = "UNKNOWN";
      std::string::size_type v11 = "SSU";
      uint64_t v12 = "LVC";
      int v13 = "PSC";
      std::string::size_type v14 = "OWL";
      uint64_t v15 = "UaaP";
      BOOL v16 = "SNLC";
      std::string::size_type v17 = "[insights-snlp-nlv4]: ";
      uint64_t v18 = "NLv4";
      switch(v9)
      {
        case 0:
          break;
        case 1:
LABEL_7:
          std::string::size_type v17 = "[insights-snlp-snlc]: ";
          uint64_t v18 = v16;
          break;
        case 2:
LABEL_11:
          std::string::size_type v17 = "[insights-snlp-owl]: ";
          uint64_t v18 = v14;
          break;
        case 3:
LABEL_12:
          std::string::size_type v17 = "[insights-snlp-uaap]: ";
          uint64_t v18 = v15;
          break;
        case 4:
LABEL_13:
          std::string::size_type v17 = "[insights-snlp-psc]: ";
          uint64_t v18 = v13;
          break;
        case 5:
LABEL_14:
          std::string::size_type v17 = "[insights-snlp-lvc]: ";
          uint64_t v18 = v12;
          break;
        case 6:
LABEL_15:
          std::string::size_type v17 = "[insights-snlp-ssu]: ";
          uint64_t v18 = v11;
          break;
        case 7:
LABEL_17:
          std::string::size_type v20 = SNLPOSLoggerForCategory(4);
          std::string::size_type v17 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            int v22 = 136315394;
            uint64_t v23 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            __int16 v24 = 2048;
            int v25 = (const char *)v9;
            _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v22, 0x16u);
          }
          uint64_t v18 = v10;
          break;
        default:
          int v19 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            int v22 = 136315394;
            uint64_t v23 = "<UNDEFINED_COMPONENT>";
            __int16 v24 = 2048;
            int v25 = (const char *)v9;
            _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v22, 0x16u);
          }
          BOOL v16 = "<UNDEFINED_COMPONENT>";
          uint64_t v15 = "<UNDEFINED_COMPONENT>";
          std::string::size_type v14 = "<UNDEFINED_COMPONENT>";
          int v13 = "<UNDEFINED_COMPONENT>";
          uint64_t v12 = "<UNDEFINED_COMPONENT>";
          std::string::size_type v11 = "<UNDEFINED_COMPONENT>";
          uint64_t v18 = "<UNDEFINED_COMPONENT>";
          std::string::size_type v17 = "[insights-snlp-nlv4]: ";
          switch(*(_DWORD *)(v5 + 40))
          {
            case 0:
              goto LABEL_20;
            case 1:
              goto LABEL_7;
            case 2:
              goto LABEL_11;
            case 3:
              goto LABEL_12;
            case 4:
              goto LABEL_13;
            case 5:
              goto LABEL_14;
            case 6:
              goto LABEL_15;
            default:
              unint64_t v10 = "<UNDEFINED_COMPONENT>";
              int v9 = *(_DWORD *)(v5 + 40);
              goto LABEL_17;
          }
      }
LABEL_20:
      uint64_t v21 = (a2[1] - *a2) >> 5;
      int v22 = 136315906;
      uint64_t v23 = v18;
      __int16 v24 = 2080;
      int v25 = v17;
      __int16 v26 = 2048;
      uint64_t v27 = v21;
      __int16 v28 = 1024;
      unsigned int v29 = a3;
      _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sThe model has received %lu spans. Truncating this list of spans to %u spans.", (uint8_t *)&v22, 0x26u);
    }
    return nlv4_inference_orchestrator::span_matching::SpanTruncator::truncateSpans((char *)v5, a2, a3);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanTruncator::truncateSpans(char *a1, uint64_t *a2, unsigned int a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v8 = 126 - 2 * __clz((uint64_t)(v7 - v6) >> 5);
  std::string __s = a1;
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(v6, v7, (nlv4_inference_orchestrator::span_matching::SpanTruncator **)&__s, v9, 1);
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  while ((a2[1] - *a2) >> 5 > (unint64_t)v10)
  {
    uint64_t v12 = *(void **)(*a2 + 32 * v10 + 24);
    v11 += (uint64_t)(v12[2] - v12[1]) >> 2 << (v12[7] != 0);
    ++v10;
    if (v11 >= a3) {
      goto LABEL_9;
    }
  }
  unsigned int v10 = a3;
LABEL_9:
  nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpans((unsigned int *)a1, a2, v10);
  std::string __s = "";
  MEMORY[0x1CB773E00](v32, a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  long long v35 = v32;
  uint64_t v13 = *a2;
  std::string::size_type v14 = (std::string *)a2[1];
  unint64_t v15 = ((uint64_t)v14 - *a2) >> 5;
  if (v10 <= v15)
  {
    if (v10 < v15)
    {
      __int16 v26 = (std::string *)(v13 + 32 * v10);
      while (v14 != v26)
      {
        if (v14[-1].__r_.__value_.__s.__data_[15] < 0) {
          operator delete((void *)v14[-2].__r_.__value_.__r.__words[2]);
        }
        std::string::size_type v14 = (std::string *)((char *)v14 - 32);
      }
      a2[1] = (uint64_t)v26;
    }
  }
  else
  {
    uint64_t v16 = a2[2];
    if (v10 - v15 <= (v16 - (uint64_t)v14) >> 5)
    {
      uint64_t v27 = (char *)v14 + 32 * (v10 - v15);
      uint64_t v28 = 32 * v10 - 32 * v15;
      do
      {
        if (SHIBYTE(v34) < 0)
        {
          std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v29 = *(_OWORD *)__p;
          v14->__r_.__value_.__r.__words[2] = v34;
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v29;
        }
        v14[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        std::string::size_type v14 = (std::string *)((char *)v14 + 32);
        v28 -= 32;
      }
      while (v28);
      a2[1] = (uint64_t)v27;
    }
    else
    {
      long long v39 = a2 + 2;
      uint64_t v17 = v16 - v13;
      uint64_t v18 = v17 >> 4;
      if (v17 >> 4 <= (unint64_t)v10) {
        uint64_t v18 = v10;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      std::string::size_type v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v19);
      uint64_t v21 = (std::string *)&v20[32 * v15];
      v36[0] = v20;
      v36[1] = v21;
      uint64_t v37 = v21;
      unint64_t v38 = &v20[32 * v22];
      uint64_t v23 = (std::string *)&v20[32 * v10];
      uint64_t v24 = 32 * v10 - 32 * v15;
      do
      {
        if (SHIBYTE(v34) < 0)
        {
          std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v25 = *(_OWORD *)__p;
          v21->__r_.__value_.__r.__words[2] = v34;
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v25;
        }
        v21[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        uint64_t v21 = (std::string *)((char *)v21 + 32);
        v24 -= 32;
      }
      while (v24);
      uint64_t v37 = v23;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(a2, v36);
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)v36);
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  return MEMORY[0x1CB773E20](v32);
}

void sub_1C8F0CA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB773E20](v27);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(unint64_t a1, unint64_t a2, nlv4_inference_orchestrator::span_matching::SpanTruncator **a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v115 = (sirinluinternal::MatchingSpan **)(a2 - 64);
    unint64_t v118 = a2 - 32;
    uint64_t v114 = (sirinluinternal::MatchingSpan **)(a2 - 96);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = (uint64_t)(a2 - v11) >> 5;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
                {
                  uint64_t v139 = *(void *)(a1 + 16);
                  long long v132 = *(_OWORD *)a1;
                  long long v52 = *(_OWORD *)v118;
                  *(void *)(a1 + 16) = *(void *)(v118 + 16);
                  *(_OWORD *)a1 = v52;
                  *(void *)(v118 + 16) = v139;
                  *(_OWORD *)unint64_t v118 = v132;
                  uint64_t v53 = *(void *)(a1 + 24);
                  *(void *)(a1 + 24) = *(void *)(a2 - 8);
                  *(void *)(a2 - 8) = v53;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)v118, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (long long *)v118, a3);
                break;
              case 5uLL:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (long long *)(a1 + 96), (long long *)v118, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 767)
          {
            unint64_t v54 = a1 + 32;
            BOOL v56 = a1 == a2 || v54 == a2;
            if (a5)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = a1;
                do
                {
                  unint64_t v59 = v54;
                  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v54 + 24), *(const sirinluinternal::MatchingSpan **)(v58 + 24)))
                  {
                    unint64_t v60 = a2;
                    uint64_t v124 = *(void *)v59;
                    *(void *)char v133 = *(void *)(v59 + 8);
                    *(void *)&v133[7] = *(void *)(v59 + 15);
                    char v61 = *(unsigned char *)(v59 + 23);
                    *(void *)(v59 + 8) = 0;
                    *(void *)(v59 + 16) = 0;
                    *(void *)unint64_t v59 = 0;
                    int v62 = *(sirinluinternal::MatchingSpan **)(v58 + 56);
                    uint64_t v63 = v57;
                    while (1)
                    {
                      uint64_t v64 = a1 + v63;
                      uint64_t v65 = (void **)(a1 + v63 + 32);
                      if (*(char *)(a1 + v63 + 55) < 0) {
                        operator delete(*v65);
                      }
                      *(_OWORD *)uint64_t v65 = *(_OWORD *)v64;
                      uint64_t v66 = *(void *)(v64 + 24);
                      *(void *)(a1 + v63 + 48) = *(void *)(v64 + 16);
                      *(unsigned char *)(v64 + 23) = 0;
                      *(unsigned char *)uint64_t v64 = 0;
                      *(void *)(v64 + 56) = v66;
                      if (!v63) {
                        break;
                      }
                      BOOL v67 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v62, *(const sirinluinternal::MatchingSpan **)(a1 + v63 - 8));
                      v63 -= 32;
                      if (!v67)
                      {
                        uint64_t v68 = a1 + v63 + 32;
                        goto LABEL_88;
                      }
                    }
                    uint64_t v68 = a1;
LABEL_88:
                    if (*(char *)(v68 + 23) < 0) {
                      operator delete(*(void **)v68);
                    }
                    *(void *)uint64_t v68 = v124;
                    *(void *)(v68 + 8) = *(void *)v133;
                    *(void *)(v68 + 15) = *(void *)&v133[7];
                    *(unsigned char *)(v68 + 23) = v61;
                    *(void *)(v68 + 24) = v62;
                    a2 = v60;
                  }
                  unint64_t v54 = v59 + 32;
                  v57 += 32;
                  unint64_t v58 = v59;
                }
                while (v59 + 32 != a2);
              }
            }
            else if (!v56)
            {
              unint64_t v103 = a1 - 8;
              do
              {
                unint64_t v104 = v54;
                if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v54 + 24), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
                {
                  unint64_t v105 = a2;
                  uint64_t v106 = *(void *)v104;
                  *(void *)unint64_t v136 = *(void *)(v104 + 8);
                  *(void *)&v136[7] = *(void *)(v104 + 15);
                  char v107 = *(unsigned char *)(v104 + 23);
                  *(void *)(v104 + 8) = 0;
                  *(void *)(v104 + 16) = 0;
                  *(void *)unint64_t v104 = 0;
                  long long v108 = *(sirinluinternal::MatchingSpan **)(a1 + 56);
                  unint64_t v109 = v103;
                  do
                  {
                    unint64_t v110 = v109;
                    unint64_t v111 = v109 + 40;
                    if (*(char *)(v109 + 63) < 0) {
                      operator delete(*(void **)v111);
                    }
                    *(_OWORD *)unint64_t v111 = *(_OWORD *)(v110 + 8);
                    *(void *)(v111 + 16) = *(void *)(v110 + 24);
                    *(unsigned char *)(v110 + 31) = 0;
                    *(unsigned char *)(v110 + 8) = 0;
                    *(void *)(v110 + 64) = *(void *)(v110 + 32);
                    BOOL v112 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v108, *(const sirinluinternal::MatchingSpan **)v110);
                    unint64_t v109 = v110 - 32;
                  }
                  while (v112);
                  unint64_t v113 = v110 + 8;
                  if (*(char *)(v113 + 23) < 0) {
                    operator delete(*(void **)v113);
                  }
                  *(void *)unint64_t v113 = v106;
                  *(void *)(v113 + 15) = *(void *)&v136[7];
                  *(void *)(v113 + 8) = *(void *)v136;
                  *(unsigned char *)(v113 + 23) = v107;
                  *(void *)(v113 + 24) = v108;
                  a2 = v105;
                }
                unint64_t v54 = v104 + 32;
                v103 += 32;
                a1 = v104;
              }
              while (v104 + 32 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              uint64_t v116 = (void **)a2;
              int64_t v69 = (v13 - 2) >> 1;
              int64_t v125 = v69;
              do
              {
                int64_t v70 = v69;
                if (v125 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = a1 + 32 * v71;
                  int64_t v73 = *a3;
                  if (2 * v69 + 2 < (uint64_t)v13)
                  {
                    BOOL v74 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(v73, *(sirinluinternal::MatchingSpan **)(v72 + 24), *(const sirinluinternal::MatchingSpan **)(v72 + 56));
                    v72 += 32 * v74;
                    if (v74) {
                      uint64_t v71 = 2 * v70 + 2;
                    }
                    int64_t v73 = *a3;
                  }
                  unint64_t v75 = a1 + 32 * v70;
                  if (!nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(v73, *(sirinluinternal::MatchingSpan **)(v72 + 24), *(const sirinluinternal::MatchingSpan **)(v75 + 24)))
                  {
                    std::__split_buffer<std::string>::pointer v119 = *(void **)v75;
                    *(void *)&v134[7] = *(void *)(v75 + 15);
                    *(void *)uint64_t v134 = *(void *)(v75 + 8);
                    char v121 = *(unsigned char *)(v75 + 23);
                    *(void *)unint64_t v75 = 0;
                    *(void *)(v75 + 8) = 0;
                    *(void *)(v75 + 16) = 0;
                    char v76 = *(const sirinluinternal::MatchingSpan **)(a1 + 32 * v70 + 24);
                    do
                    {
                      unint64_t v77 = v72;
                      if (*(char *)(v75 + 23) < 0) {
                        operator delete(*(void **)v75);
                      }
                      long long v78 = *(_OWORD *)v72;
                      *(void *)(v75 + 16) = *(void *)(v72 + 16);
                      *(_OWORD *)unint64_t v75 = v78;
                      *(unsigned char *)(v72 + 23) = 0;
                      *(unsigned char *)unint64_t v72 = 0;
                      *(void *)(v75 + 24) = *(void *)(v72 + 24);
                      if (v125 < v71) {
                        break;
                      }
                      uint64_t v79 = (2 * v71) | 1;
                      unint64_t v72 = a1 + 32 * v79;
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < (uint64_t)v13)
                      {
                        BOOL v80 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v72 + 24), *(const sirinluinternal::MatchingSpan **)(v72 + 56));
                        v72 += 32 * v80;
                        if (!v80) {
                          uint64_t v71 = v79;
                        }
                      }
                      else
                      {
                        uint64_t v71 = v79;
                      }
                      unint64_t v75 = v77;
                    }
                    while (!nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v72 + 24), v76));
                    if (*(char *)(v77 + 23) < 0) {
                      operator delete(*(void **)v77);
                    }
                    *(void *)unint64_t v77 = v119;
                    *(void *)(v77 + 8) = *(void *)v134;
                    *(void *)(v77 + 15) = *(void *)&v134[7];
                    *(unsigned char *)(v77 + 23) = v121;
                    *(void *)(v77 + 24) = v76;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v81 = (unint64_t)v12 >> 5;
              uint64_t v82 = v116;
              do
              {
                uint64_t v83 = 0;
                uint64_t v84 = v82;
                uint64_t v122 = *(const sirinluinternal::MatchingSpan **)a1;
                *(void *)uint64_t v129 = *(void *)(a1 + 8);
                *(void *)&v129[7] = *(void *)(a1 + 15);
                char v126 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v85 = *(void **)(a1 + 24);
                unint64_t v86 = a1;
                do
                {
                  uint64_t v87 = v86 + 32 * v83 + 32;
                  uint64_t v88 = 2 * v83;
                  uint64_t v83 = (2 * v83) | 1;
                  uint64_t v89 = v88 + 2;
                  if (v88 + 2 < v81)
                  {
                    BOOL v90 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v87 + 24), *(const sirinluinternal::MatchingSpan **)(v87 + 56));
                    v87 += 32 * v90;
                    if (v90) {
                      uint64_t v83 = v89;
                    }
                  }
                  if (*(char *)(v86 + 23) < 0) {
                    operator delete(*(void **)v86);
                  }
                  long long v91 = *(_OWORD *)v87;
                  *(void *)(v86 + 16) = *(void *)(v87 + 16);
                  *(_OWORD *)unint64_t v86 = v91;
                  *(unsigned char *)(v87 + 23) = 0;
                  *(unsigned char *)uint64_t v87 = 0;
                  *(void *)(v86 + 24) = *(void *)(v87 + 24);
                  unint64_t v86 = v87;
                }
                while (v83 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                uint64_t v82 = v84 - 4;
                int v92 = *(char *)(v87 + 23);
                if ((void **)v87 == v84 - 4)
                {
                  if (v92 < 0) {
                    operator delete(*(void **)v87);
                  }
                  *(void *)uint64_t v87 = v122;
                  *(void *)(v87 + 8) = *(void *)v129;
                  *(void *)(v87 + 15) = *(void *)&v129[7];
                  *(unsigned char *)(v87 + 23) = v126;
                  *(void *)(v87 + 24) = v85;
                }
                else
                {
                  if (v92 < 0) {
                    operator delete(*(void **)v87);
                  }
                  long long v93 = *(_OWORD *)v82;
                  *(void *)(v87 + 16) = *(v84 - 2);
                  *(_OWORD *)uint64_t v87 = v93;
                  *((unsigned char *)v84 - 9) = 0;
                  *((unsigned char *)v84 - 32) = 0;
                  *(void *)(v87 + 24) = *(v84 - 1);
                  if (*((char *)v84 - 9) < 0) {
                    operator delete(*v82);
                  }
                  *(v84 - 4) = v122;
                  *(void **)((char *)v84 - 17) = *(void **)&v129[7];
                  *(v84 - 3) = *(void **)v129;
                  *((unsigned char *)v84 - 9) = v126;
                  *(v84 - 1) = v85;
                  uint64_t v94 = v87 + 32 - a1;
                  if (v94 >= 33)
                  {
                    unint64_t v95 = (((unint64_t)v94 >> 5) - 2) >> 1;
                    unint64_t v96 = a1 + 32 * v95;
                    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v96 + 24), *(const sirinluinternal::MatchingSpan **)(v87 + 24)))
                    {
                      uint64_t v117 = v84 - 4;
                      unint64_t v97 = *(void **)v87;
                      *(void *)uint64_t v135 = *(void *)(v87 + 8);
                      *(void *)&v135[7] = *(void *)(v87 + 15);
                      char v98 = *(unsigned char *)(v87 + 23);
                      *(void *)(v87 + 8) = 0;
                      *(void *)(v87 + 16) = 0;
                      *(void *)uint64_t v87 = 0;
                      uint64_t v99 = *(const sirinluinternal::MatchingSpan **)(v87 + 24);
                      do
                      {
                        uint64_t v100 = v96;
                        if (*(char *)(v87 + 23) < 0) {
                          operator delete(*(void **)v87);
                        }
                        long long v101 = *(_OWORD *)v96;
                        *(void *)(v87 + 16) = *(void *)(v96 + 16);
                        *(_OWORD *)uint64_t v87 = v101;
                        *(unsigned char *)(v96 + 23) = 0;
                        *(unsigned char *)unint64_t v96 = 0;
                        *(void *)(v87 + 24) = *(void *)(v96 + 24);
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                        unint64_t v96 = a1 + 32 * v95;
                        uint64_t v87 = v100;
                      }
                      while (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v96 + 24), v99));
                      if (*(char *)(v100 + 23) < 0) {
                        operator delete(*(void **)v100);
                      }
                      *(void *)uint64_t v100 = v97;
                      *(void *)(v100 + 8) = *(void *)v135;
                      *(void *)(v100 + 15) = *(void *)&v135[7];
                      *(unsigned char *)(v100 + 23) = v98;
                      *(void *)(v100 + 24) = v99;
                      uint64_t v82 = v117;
                    }
                  }
                }
              }
              while (v81-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = a1 + 32 * (v13 >> 1);
          if ((unint64_t)v12 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32 * (v13 >> 1)), (sirinluinternal::MatchingSpan **)v118, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(v15 - 32), v115, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(a1 + 64), (sirinluinternal::MatchingSpan **)(a1 + 32 + 32 * v14), v114, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(v15 - 32), (sirinluinternal::MatchingSpan **)v15, (sirinluinternal::MatchingSpan **)(a1 + 32 + 32 * v14), a3);
            uint64_t v16 = *(void *)(a1 + 24);
            uint64_t v137 = *(void *)(a1 + 16);
            long long v130 = *(_OWORD *)a1;
            uint64_t v17 = *(void *)(v15 + 16);
            uint64_t v18 = *(void *)(v15 + 24);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            *(void *)(a1 + 24) = v18;
            *(_OWORD *)unint64_t v15 = v130;
            *(void *)(v15 + 16) = v137;
            *(void *)(v15 + 24) = v16;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(a1 + 32 * (v13 >> 1)), (sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)v118, a3);
          }
          --a4;
          if ((a5 & 1) != 0
            || nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a1 - 8), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
          {
            break;
          }
          unint64_t v38 = *(const sirinluinternal::MatchingSpan **)a1;
          *(void *)uint64_t v128 = *(void *)(a1 + 8);
          *(void *)&v128[7] = *(void *)(a1 + 15);
          char v39 = *(unsigned char *)(a1 + 23);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          BOOL v40 = *(sirinluinternal::MatchingSpan **)(a1 + 24);
          if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(a2 - 8)))
          {
            unint64_t v11 = a1;
            do
            {
              BOOL v41 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(v11 + 56));
              v11 += 32;
            }
            while (!v41);
          }
          else
          {
            unint64_t v42 = a1 + 32;
            do
            {
              unint64_t v11 = v42;
              if (v42 >= a2) {
                break;
              }
              BOOL v43 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(v42 + 24));
              unint64_t v42 = v11 + 32;
            }
            while (!v43);
          }
          unint64_t v44 = a2;
          if (v11 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              BOOL v45 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(v44 - 8));
              v44 -= 32;
            }
            while (v45);
          }
          while (v11 < v44)
          {
            uint64_t v138 = *(void *)(v11 + 16);
            long long v131 = *(_OWORD *)v11;
            long long v46 = *(_OWORD *)v44;
            *(void *)(v11 + 16) = *(void *)(v44 + 16);
            *(_OWORD *)unint64_t v11 = v46;
            *(void *)(v44 + 16) = v138;
            *(_OWORD *)unint64_t v44 = v131;
            uint64_t v47 = *(void *)(v11 + 24);
            *(void *)(v11 + 24) = *(void *)(v44 + 24);
            *(void *)(v44 + 24) = v47;
            do
            {
              BOOL v48 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(v11 + 56));
              v11 += 32;
            }
            while (!v48);
            do
            {
              BOOL v49 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v40, *(const sirinluinternal::MatchingSpan **)(v44 - 8));
              v44 -= 32;
            }
            while (v49);
          }
          std::string::size_type v50 = (void **)(v11 - 32);
          BOOL v5 = v11 - 32 >= a1;
          BOOL v6 = v11 - 32 == a1;
          if (v11 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v51 = *(_OWORD *)v50;
            *(void *)(a1 + 16) = *(void *)(v11 - 16);
            *(_OWORD *)a1 = v51;
            *(unsigned char *)(v11 - 9) = 0;
            *(unsigned char *)(v11 - 32) = 0;
            *(void *)(a1 + 24) = *(void *)(v11 - 8);
          }
          if (*(char *)(v11 - 9) < 0) {
            operator delete(*v50);
          }
          a5 = 0;
          *(void *)(v11 - 32) = v38;
          *(void *)(v11 - 17) = *(void *)&v128[7];
          *(void *)(v11 - 24) = *(void *)v128;
          *(unsigned char *)(v11 - 9) = v39;
          *(void *)(v11 - 8) = v40;
        }
        int v123 = *(const sirinluinternal::MatchingSpan **)a1;
        *(void *)std::string v127 = *(void *)(a1 + 8);
        *(void *)&v127[7] = *(void *)(a1 + 15);
        char v19 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        std::string::size_type v20 = *(const sirinluinternal::MatchingSpan **)(a1 + 24);
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          BOOL v23 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v21 + 56), v20);
          v21 += 32;
        }
        while (v23);
        uint64_t v24 = a4;
        unint64_t v25 = a2;
        if (v22 == a1)
        {
          do
          {
            if (v21 >= a2) {
              break;
            }
            BOOL v27 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), v20);
            a2 -= 32;
          }
          while (!v27);
        }
        else
        {
          do
          {
            BOOL v26 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), v20);
            a2 -= 32;
          }
          while (!v26);
        }
        unint64_t v11 = v22 + 32;
        if (v21 < a2)
        {
          unint64_t v28 = a2;
          do
          {
            long long v29 = *(_OWORD *)v11;
            uint64_t v30 = *(void *)(v11 + 16);
            uint64_t v31 = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v28;
            *(void *)(v11 + 16) = v31;
            *(void *)(v28 + 16) = v30;
            *(_OWORD *)unint64_t v28 = v29;
            uint64_t v32 = *(void *)(v11 + 24);
            *(void *)(v11 + 24) = *(void *)(v28 + 24);
            *(void *)(v28 + 24) = v32;
            do
            {
              BOOL v33 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v11 + 56), v20);
              v11 += 32;
            }
            while (v33);
            do
            {
              BOOL v34 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v28 - 8), v20);
              v28 -= 32;
            }
            while (!v34);
          }
          while (v11 < v28);
        }
        long long v35 = (void **)(v11 - 32);
        if (v11 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v36 = *(_OWORD *)v35;
          *(void *)(a1 + 16) = *(void *)(v11 - 16);
          *(_OWORD *)a1 = v36;
          *(unsigned char *)(v11 - 9) = 0;
          *(unsigned char *)(v11 - 32) = 0;
          *(void *)(a1 + 24) = *(void *)(v11 - 8);
        }
        if (*(char *)(v11 - 9) < 0) {
          operator delete(*v35);
        }
        *(void *)(v11 - 32) = v123;
        *(void *)(v11 - 17) = *(void *)&v127[7];
        *(void *)(v11 - 24) = *(void *)v127;
        *(unsigned char *)(v11 - 9) = v19;
        *(void *)(v11 - 8) = v20;
        BOOL v5 = v21 >= a2;
        a2 = v25;
        a4 = v24;
        if (v5) {
          break;
        }
LABEL_34:
        std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(a1, v11 - 32, a3, v24, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, v11 - 32, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(v11, a2, a3))
      {
        break;
      }
      if (!v37) {
        goto LABEL_34;
      }
    }
    a2 = v11 - 32;
    if (!v37) {
      continue;
    }
    break;
  }
}

void sub_1C8F0D6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpans(unsigned int *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[10];
  if (v6 > 6) {
    int v7 = 4;
  }
  else {
    int v7 = dword_1C8F3FFAC[v6];
  }
  unint64_t v8 = SNLPOSLoggerForCategory(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    signed int v9 = a1[10];
    unsigned int v10 = "UNKNOWN";
    unint64_t v11 = "SSU";
    uint64_t v12 = "LVC";
    unint64_t v13 = "PSC";
    int v14 = "OWL";
    unint64_t v15 = "UaaP";
    uint64_t v16 = "SNLC";
    uint64_t v17 = "[insights-snlp-nlv4]: ";
    uint64_t v18 = "NLv4";
    switch(v9)
    {
      case 0:
        break;
      case 1:
LABEL_6:
        uint64_t v17 = "[insights-snlp-snlc]: ";
        uint64_t v18 = v16;
        break;
      case 2:
LABEL_10:
        uint64_t v17 = "[insights-snlp-owl]: ";
        uint64_t v18 = v14;
        break;
      case 3:
LABEL_11:
        uint64_t v17 = "[insights-snlp-uaap]: ";
        uint64_t v18 = v15;
        break;
      case 4:
LABEL_12:
        uint64_t v17 = "[insights-snlp-psc]: ";
        uint64_t v18 = v13;
        break;
      case 5:
LABEL_13:
        uint64_t v17 = "[insights-snlp-lvc]: ";
        uint64_t v18 = v12;
        break;
      case 6:
LABEL_14:
        uint64_t v17 = "[insights-snlp-ssu]: ";
        uint64_t v18 = v11;
        break;
      case 7:
LABEL_16:
        std::string::size_type v20 = SNLPOSLoggerForCategory(4);
        uint64_t v17 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          unint64_t v42 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          __int16 v43 = 2048;
          unint64_t v44 = (const char *)v9;
          _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        uint64_t v18 = v10;
        break;
      default:
        char v19 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          unint64_t v42 = "<UNDEFINED_COMPONENT>";
          __int16 v43 = 2048;
          unint64_t v44 = (const char *)v9;
          _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        uint64_t v16 = "<UNDEFINED_COMPONENT>";
        unint64_t v15 = "<UNDEFINED_COMPONENT>";
        int v14 = "<UNDEFINED_COMPONENT>";
        unint64_t v13 = "<UNDEFINED_COMPONENT>";
        uint64_t v12 = "<UNDEFINED_COMPONENT>";
        unint64_t v11 = "<UNDEFINED_COMPONENT>";
        uint64_t v18 = "<UNDEFINED_COMPONENT>";
        uint64_t v17 = "[insights-snlp-nlv4]: ";
        switch(a1[10])
        {
          case 0u:
            goto LABEL_19;
          case 1u:
            goto LABEL_6;
          case 2u:
            goto LABEL_10;
          case 3u:
            goto LABEL_11;
          case 4u:
            goto LABEL_12;
          case 5u:
            goto LABEL_13;
          case 6u:
            goto LABEL_14;
          default:
            unsigned int v10 = "<UNDEFINED_COMPONENT>";
            signed int v9 = a1[10];
            goto LABEL_16;
        }
    }
LABEL_19:
    int v41 = 136315394;
    unint64_t v42 = v18;
    __int16 v43 = 2080;
    unint64_t v44 = v17;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sThe following spans were kept after truncation:\n", (uint8_t *)&v41, 0x16u);
  }
  unint64_t v21 = a3;
  if (a3)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 24;
    do
    {
      if (v22 >= (a2[1] - *a2) >> 5) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan((nlv4_inference_orchestrator::span_matching::SpanTruncator *)a1, *(const sirinluinternal::MatchingSpan **)(*a2 + v23));
      ++v22;
      v23 += 32;
    }
    while (v21 != v22);
  }
  uint64_t v24 = a1[10];
  if (v24 > 6) {
    int v25 = 4;
  }
  else {
    int v25 = dword_1C8F3FFAC[v24];
  }
  BOOL v26 = SNLPOSLoggerForCategory(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    signed int v27 = a1[10];
    unint64_t v28 = "UNKNOWN";
    long long v29 = "SSU";
    uint64_t v30 = "LVC";
    uint64_t v31 = "PSC";
    uint64_t v32 = "OWL";
    BOOL v33 = "UaaP";
    BOOL v34 = "SNLC";
    long long v35 = "[insights-snlp-nlv4]: ";
    long long v36 = "NLv4";
    switch(v27)
    {
      case 0:
        break;
      case 1:
LABEL_29:
        long long v35 = "[insights-snlp-snlc]: ";
        long long v36 = v34;
        break;
      case 2:
LABEL_33:
        long long v35 = "[insights-snlp-owl]: ";
        long long v36 = v32;
        break;
      case 3:
LABEL_34:
        long long v35 = "[insights-snlp-uaap]: ";
        long long v36 = v33;
        break;
      case 4:
LABEL_35:
        long long v35 = "[insights-snlp-psc]: ";
        long long v36 = v31;
        break;
      case 5:
LABEL_36:
        long long v35 = "[insights-snlp-lvc]: ";
        long long v36 = v30;
        break;
      case 6:
LABEL_37:
        long long v35 = "[insights-snlp-ssu]: ";
        long long v36 = v29;
        break;
      case 7:
LABEL_39:
        unint64_t v38 = SNLPOSLoggerForCategory(4);
        long long v35 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          unint64_t v42 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          __int16 v43 = 2048;
          unint64_t v44 = (const char *)v27;
          _os_log_impl(&dword_1C8DA9000, v38, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        long long v36 = v28;
        break;
      default:
        BOOL v37 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          unint64_t v42 = "<UNDEFINED_COMPONENT>";
          __int16 v43 = 2048;
          unint64_t v44 = (const char *)v27;
          _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        BOOL v34 = "<UNDEFINED_COMPONENT>";
        BOOL v33 = "<UNDEFINED_COMPONENT>";
        uint64_t v32 = "<UNDEFINED_COMPONENT>";
        uint64_t v31 = "<UNDEFINED_COMPONENT>";
        uint64_t v30 = "<UNDEFINED_COMPONENT>";
        long long v29 = "<UNDEFINED_COMPONENT>";
        long long v36 = "<UNDEFINED_COMPONENT>";
        long long v35 = "[insights-snlp-nlv4]: ";
        switch(a1[10])
        {
          case 0u:
            goto LABEL_42;
          case 1u:
            goto LABEL_29;
          case 2u:
            goto LABEL_33;
          case 3u:
            goto LABEL_34;
          case 4u:
            goto LABEL_35;
          case 5u:
            goto LABEL_36;
          case 6u:
            goto LABEL_37;
          default:
            unint64_t v28 = "<UNDEFINED_COMPONENT>";
            signed int v27 = a1[10];
            goto LABEL_39;
        }
    }
LABEL_42:
    int v41 = 136315394;
    unint64_t v42 = v36;
    __int16 v43 = 2080;
    unint64_t v44 = v35;
    _os_log_impl(&dword_1C8DA9000, v26, OS_LOG_TYPE_DEBUG, "[%s] %sThe following spans were removed during truncation:\n", (uint8_t *)&v41, 0x16u);
  }
  uint64_t v39 = *a2;
  if (v21 < (a2[1] - *a2) >> 5)
  {
    uint64_t v40 = (32 * v21) | 0x18;
    do
    {
      nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan((nlv4_inference_orchestrator::span_matching::SpanTruncator *)a1, *(const sirinluinternal::MatchingSpan **)(v39 + v40));
      ++v21;
      uint64_t v39 = *a2;
      v40 += 32;
    }
    while (v21 < (a2[1] - *a2) >> 5);
  }
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, const sirinluinternal::MatchingSpan *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)this + 10);
  if ((~*((unsigned __int8 *)a2 + 80) & 3) != 0)
  {
    if (v4 > 6) {
      int v6 = 4;
    }
    else {
      int v6 = dword_1C8F3FFAC[v4];
    }
    uint64_t v18 = SNLPOSLoggerForCategory(v6);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *((_DWORD *)this + 10);
      std::string::size_type v20 = "UNKNOWN";
      unint64_t v21 = "SSU";
      unint64_t v22 = "LVC";
      uint64_t v23 = "PSC";
      uint64_t v24 = "OWL";
      int v25 = "UaaP";
      BOOL v26 = "SNLC";
      signed int v27 = "[insights-snlp-nlv4]: ";
      unint64_t v28 = "NLv4";
      switch(v19)
      {
        case 0:
          break;
        case 1:
LABEL_13:
          signed int v27 = "[insights-snlp-snlc]: ";
          unint64_t v28 = v26;
          break;
        case 2:
LABEL_25:
          signed int v27 = "[insights-snlp-owl]: ";
          unint64_t v28 = v24;
          break;
        case 3:
LABEL_26:
          signed int v27 = "[insights-snlp-uaap]: ";
          unint64_t v28 = v25;
          break;
        case 4:
LABEL_27:
          signed int v27 = "[insights-snlp-psc]: ";
          unint64_t v28 = v23;
          break;
        case 5:
LABEL_28:
          signed int v27 = "[insights-snlp-lvc]: ";
          unint64_t v28 = v22;
          break;
        case 6:
LABEL_29:
          signed int v27 = "[insights-snlp-ssu]: ";
          unint64_t v28 = v21;
          break;
        case 7:
LABEL_38:
          unint64_t v38 = SNLPOSLoggerForCategory(4);
          signed int v27 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            int v40 = 136315394;
            int v41 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            __int16 v42 = 2048;
            __int16 v43 = (const char *)v19;
            _os_log_impl(&dword_1C8DA9000, v38, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          unint64_t v28 = v20;
          break;
        default:
          uint64_t v30 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            int v40 = 136315394;
            int v41 = "<UNDEFINED_COMPONENT>";
            __int16 v42 = 2048;
            __int16 v43 = (const char *)v19;
            _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          BOOL v26 = "<UNDEFINED_COMPONENT>";
          int v25 = "<UNDEFINED_COMPONENT>";
          uint64_t v24 = "<UNDEFINED_COMPONENT>";
          uint64_t v23 = "<UNDEFINED_COMPONENT>";
          unint64_t v22 = "<UNDEFINED_COMPONENT>";
          unint64_t v21 = "<UNDEFINED_COMPONENT>";
          unint64_t v28 = "<UNDEFINED_COMPONENT>";
          signed int v27 = "[insights-snlp-nlv4]: ";
          switch(*((_DWORD *)this + 10))
          {
            case 0:
              goto LABEL_41;
            case 1:
              goto LABEL_13;
            case 2:
              goto LABEL_25;
            case 3:
              goto LABEL_26;
            case 4:
              goto LABEL_27;
            case 5:
              goto LABEL_28;
            case 6:
              goto LABEL_29;
            default:
              std::string::size_type v20 = "<UNDEFINED_COMPONENT>";
              int v19 = *((_DWORD *)this + 10);
              goto LABEL_38;
          }
      }
LABEL_41:
      uint64_t v39 = (uint64_t *)*((void *)a2 + 6);
      if (*((char *)v39 + 23) < 0) {
        uint64_t v39 = (uint64_t *)*v39;
      }
      int v40 = 136315650;
      int v41 = v28;
      __int16 v42 = 2080;
      __int16 v43 = v27;
      __int16 v44 = 2080;
      uint64_t v45 = v39;
      long long v35 = "[%s] %s  Span with label %s.\n";
      long long v36 = v18;
      uint32_t v37 = 32;
      goto LABEL_44;
    }
  }
  else
  {
    if (v4 > 6) {
      int v5 = 4;
    }
    else {
      int v5 = dword_1C8F3FFAC[v4];
    }
    int v7 = SNLPOSLoggerForCategory(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *((_DWORD *)this + 10);
      signed int v9 = "UNKNOWN";
      unsigned int v10 = "SSU";
      unint64_t v11 = "LVC";
      uint64_t v12 = "PSC";
      unint64_t v13 = "OWL";
      int v14 = "UaaP";
      unint64_t v15 = "SNLC";
      uint64_t v16 = "[insights-snlp-nlv4]: ";
      uint64_t v17 = "NLv4";
      switch(v8)
      {
        case 0:
          break;
        case 1:
LABEL_9:
          uint64_t v16 = "[insights-snlp-snlc]: ";
          uint64_t v17 = v15;
          break;
        case 2:
LABEL_17:
          uint64_t v16 = "[insights-snlp-owl]: ";
          uint64_t v17 = v13;
          break;
        case 3:
LABEL_18:
          uint64_t v16 = "[insights-snlp-uaap]: ";
          uint64_t v17 = v14;
          break;
        case 4:
LABEL_19:
          uint64_t v16 = "[insights-snlp-psc]: ";
          uint64_t v17 = v12;
          break;
        case 5:
LABEL_20:
          uint64_t v16 = "[insights-snlp-lvc]: ";
          uint64_t v17 = v11;
          break;
        case 6:
LABEL_21:
          uint64_t v16 = "[insights-snlp-ssu]: ";
          uint64_t v17 = v10;
          break;
        case 7:
LABEL_31:
          uint64_t v31 = SNLPOSLoggerForCategory(4);
          uint64_t v16 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            int v40 = 136315394;
            int v41 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            __int16 v42 = 2048;
            __int16 v43 = (const char *)v8;
            _os_log_impl(&dword_1C8DA9000, v31, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          uint64_t v17 = v9;
          break;
        default:
          long long v29 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            int v40 = 136315394;
            int v41 = "<UNDEFINED_COMPONENT>";
            __int16 v42 = 2048;
            __int16 v43 = (const char *)v8;
            _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          unint64_t v15 = "<UNDEFINED_COMPONENT>";
          int v14 = "<UNDEFINED_COMPONENT>";
          unint64_t v13 = "<UNDEFINED_COMPONENT>";
          uint64_t v12 = "<UNDEFINED_COMPONENT>";
          unint64_t v11 = "<UNDEFINED_COMPONENT>";
          unsigned int v10 = "<UNDEFINED_COMPONENT>";
          uint64_t v17 = "<UNDEFINED_COMPONENT>";
          uint64_t v16 = "[insights-snlp-nlv4]: ";
          switch(*((_DWORD *)this + 10))
          {
            case 0:
              goto LABEL_34;
            case 1:
              goto LABEL_9;
            case 2:
              goto LABEL_17;
            case 3:
              goto LABEL_18;
            case 4:
              goto LABEL_19;
            case 5:
              goto LABEL_20;
            case 6:
              goto LABEL_21;
            default:
              signed int v9 = "<UNDEFINED_COMPONENT>";
              int v8 = *((_DWORD *)this + 10);
              goto LABEL_31;
          }
      }
LABEL_34:
      uint64_t v32 = (uint64_t *)*((void *)a2 + 6);
      if (*((char *)v32 + 23) < 0) {
        uint64_t v32 = (uint64_t *)*v32;
      }
      int v34 = *((_DWORD *)a2 + 18);
      int v33 = *((_DWORD *)a2 + 19);
      int v40 = 136316162;
      int v41 = v17;
      __int16 v42 = 2080;
      __int16 v43 = v16;
      __int16 v44 = 2080;
      uint64_t v45 = v32;
      __int16 v46 = 1024;
      int v47 = v33;
      __int16 v48 = 1024;
      int v49 = v34;
      long long v35 = "[%s] %s  Span with label %s across indices (%u, %u).\n";
      long long v36 = v7;
      uint32_t v37 = 44;
LABEL_44:
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_DEBUG, v35, (uint8_t *)&v40, v37);
    }
  }
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, sirinluinternal::MatchingSpan *a2, const sirinluinternal::MatchingSpan *a3)
{
  int v6 = (_DWORD *)*((void *)a2 + 1);
  int v7 = (_DWORD *)*((void *)a2 + 2);
  if (v6 != v7)
  {
    while (*v6 != 2)
    {
      if (++v6 == v7)
      {
        int v6 = (_DWORD *)*((void *)a2 + 2);
        break;
      }
    }
  }
  BOOL v8 = v6 == v7;
  BOOL isReinsertionDataDetectorSpan = nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(this, a2);
  unsigned int v10 = (long long *)*((void *)a2 + 6);
  BOOL v28 = v8;
  BOOL v29 = !isReinsertionDataDetectorSpan;
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v30.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v12 = (_DWORD *)*((void *)a3 + 1);
  unint64_t v13 = (_DWORD *)*((void *)a3 + 2);
  if (v12 != v13)
  {
    while (*v12 != 2)
    {
      if (++v12 == v13)
      {
        uint64_t v12 = (_DWORD *)*((void *)a3 + 2);
        break;
      }
    }
  }
  BOOL v14 = nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(this, a3);
  unsigned int v15 = v12 == v13;
  uint64_t v16 = (long long *)*((void *)a3 + 6);
  BOOL v26 = !v14;
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *((void *)v16 + 1));
    unsigned int v15 = v12 == v13;
  }
  else
  {
    long long v17 = *v16;
    __p.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  }
  if (v28 < v15) {
    goto LABEL_19;
  }
  if (v15 < v28)
  {
LABEL_17:
    BOOL v18 = 0;
    goto LABEL_20;
  }
  if (v29 >= v26)
  {
    if (v26 < v29) {
      goto LABEL_17;
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v21 = &v30;
    }
    else {
      unint64_t v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v22 >= size) {
      size_t v24 = size;
    }
    else {
      size_t v24 = v22;
    }
    int v25 = memcmp(v21, p_p, v24);
    if (v25) {
      BOOL v18 = v25 < 0;
    }
    else {
      BOOL v18 = size < v22;
    }
  }
  else
  {
LABEL_19:
    BOOL v18 = 1;
  }
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_1C8F0E5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, nlv4_inference_orchestrator::span_matching::SpanTruncator **a4)
{
  BOOL v8 = a2 + 3;
  signed int v9 = a1 + 3;
  BOOL v10 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a2[3], a1[3]);
  BOOL result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a3[3], *v8);
  if (v10)
  {
    if (result)
    {
      uint64_t v12 = a1[2];
      long long v13 = *(_OWORD *)a1;
      BOOL v14 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
    }
    else
    {
      std::string::size_type v22 = a1[2];
      long long v23 = *(_OWORD *)a1;
      size_t v24 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v24;
      *(_OWORD *)a2 = v23;
      a2[2] = v22;
      int v25 = a1[3];
      a1[3] = a2[3];
      a2[3] = v25;
      BOOL result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a3[3], v25);
      if (!result) {
        return result;
      }
      BOOL v26 = a2[2];
      long long v27 = *(_OWORD *)a2;
      BOOL v28 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v28;
      *(_OWORD *)a3 = v27;
      a3[2] = v26;
      signed int v9 = v8;
    }
    BOOL v8 = a3 + 3;
    goto LABEL_10;
  }
  if (result)
  {
    unsigned int v15 = a2[2];
    long long v16 = *(_OWORD *)a2;
    long long v17 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v17;
    *(_OWORD *)a3 = v16;
    a3[2] = v15;
    BOOL v18 = a2[3];
    a2[3] = a3[3];
    a3[3] = v18;
    BOOL result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a2[3], *v9);
    if (result)
    {
      int v19 = a1[2];
      long long v20 = *(_OWORD *)a1;
      unint64_t v21 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v21;
      *(_OWORD *)a2 = v20;
      a2[2] = v19;
LABEL_10:
      BOOL v29 = *v9;
      *signed int v9 = *v8;
      NSObject *v8 = v29;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, long long *a4, nlv4_inference_orchestrator::span_matching::SpanTruncator **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, a2, a3, a5);
  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, *((sirinluinternal::MatchingSpan **)a4 + 3), a3[3]))
  {
    long long v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    long long v13 = (sirinluinternal::MatchingSpan *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    BOOL v14 = a3[3];
    a3[3] = (sirinluinternal::MatchingSpan *)*((void *)a4 + 3);
    *((void *)a4 + 3) = v14;
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, a3[3], a2[3]))
    {
      unsigned int v15 = a2[2];
      long long v16 = *(_OWORD *)a2;
      long long v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
      *(_OWORD *)a3 = v16;
      a3[2] = v15;
      BOOL v18 = a2[3];
      a2[3] = a3[3];
      a3[3] = v18;
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, a2[3], a1[3]))
      {
        int v19 = a1[2];
        __n128 result = *(__n128 *)a1;
        long long v20 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v20;
        *(__n128 *)a2 = result;
        a2[2] = v19;
        unint64_t v21 = a1[3];
        a1[3] = a2[3];
        a2[3] = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, long long *a4, long long *a5, nlv4_inference_orchestrator::span_matching::SpanTruncator **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, a2, a3, a4, a6);
  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, *((sirinluinternal::MatchingSpan **)a5 + 3), *((const sirinluinternal::MatchingSpan **)a4 + 3)))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    uint64_t v16 = *((void *)a4 + 3);
    *((void *)a4 + 3) = *((void *)a5 + 3);
    *((void *)a5 + 3) = v16;
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, *((sirinluinternal::MatchingSpan **)a4 + 3), a3[3]))
    {
      long long v17 = a3[2];
      long long v18 = *(_OWORD *)a3;
      int v19 = (sirinluinternal::MatchingSpan *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v19;
      *a4 = v18;
      *((void *)a4 + 2) = v17;
      long long v20 = a3[3];
      a3[3] = (sirinluinternal::MatchingSpan *)*((void *)a4 + 3);
      *((void *)a4 + 3) = v20;
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, a3[3], a2[3]))
      {
        unint64_t v21 = a2[2];
        long long v22 = *(_OWORD *)a2;
        long long v23 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v23;
        *(_OWORD *)a3 = v22;
        a3[2] = v21;
        size_t v24 = a2[3];
        a2[3] = a3[3];
        a3[3] = v24;
        if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, a2[3], a1[3]))
        {
          int v25 = a1[2];
          __n128 result = *(__n128 *)a1;
          BOOL v26 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = v26;
          *(__n128 *)a2 = result;
          a2[2] = v25;
          long long v27 = a1[3];
          a1[3] = a2[3];
          a2[3] = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(uint64_t a1, uint64_t a2, nlv4_inference_orchestrator::span_matching::SpanTruncator **a3)
{
  uint64_t v6 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
      {
        uint64_t v8 = *(void *)(a1 + 16);
        long long v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 32) = v9;
        *(void *)(a2 - 16) = v8;
        uint64_t v11 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a2 - 32), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (long long *)(a2 - 32), a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (long long *)(a1 + 96), (long long *)(a2 - 32), a3);
      return 1;
    default:
      uint64_t v12 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), a3);
      uint64_t v13 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v13 + 24), *(const sirinluinternal::MatchingSpan **)(v12 + 24)))
    {
      uint64_t v22 = *(void *)v13;
      *(void *)size_t v24 = *(void *)(v13 + 8);
      *(void *)&v24[7] = *(void *)(v13 + 15);
      char v23 = *(unsigned char *)(v13 + 23);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = *(sirinluinternal::MatchingSpan **)(v13 + 24);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        int v19 = (void **)(a1 + v17 + 96);
        if (*(char *)(a1 + v17 + 119) < 0) {
          operator delete(*v19);
        }
        *(_OWORD *)int v19 = *(_OWORD *)(v18 + 64);
        *(void *)(a1 + v17 + 112) = *(void *)(v18 + 80);
        *(unsigned char *)(v18 + 87) = 0;
        *(unsigned char *)(v18 + 64) = 0;
        *(void *)(v18 + 120) = *(void *)(v18 + 88);
        if (v17 == -64) {
          break;
        }
        BOOL v20 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v16, *(const sirinluinternal::MatchingSpan **)(a1 + v17 + 56));
        v17 -= 32;
        if (!v20)
        {
          uint64_t v21 = a1 + v17 + 96;
          goto LABEL_14;
        }
      }
      uint64_t v21 = a1;
LABEL_14:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      *(void *)uint64_t v21 = v22;
      *(void *)(v21 + 8) = *(void *)v24;
      *(void *)(v21 + 15) = *(void *)&v24[7];
      *(unsigned char *)(v21 + 23) = v23;
      *(void *)(v21 + 24) = v16;
      if (++v15 == 8) {
        return v13 + 32 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_1C8F0ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, int a10, int a11)
{
  if (a11 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, const sirinluinternal::MatchingSpan *a2)
{
  char v3 = (_DWORD *)*((void *)a2 + 1);
  uint64_t v2 = (_DWORD *)*((void *)a2 + 2);
  if (v3 != v2)
  {
    while (*v3)
    {
      if (++v3 == v2)
      {
        char v3 = (_DWORD *)*((void *)a2 + 2);
        break;
      }
    }
  }
  return v3 != v2
      && std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, *((unsigned __int8 **)a2 + 6)) != 0;
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(nlv4_inference_orchestrator::span_matching::SpanTruncator *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)(v2 - v3) >> 5);
  uint64_t v6 = a1;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(v3, v2, &v6, v5, 1);
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::isUserVocabSpan(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(_DWORD **)(a2 + 8);
  unint64_t v3 = *(_DWORD **)(a2 + 16);
  if (v2 != v3)
  {
    while (*v2 != 2)
    {
      if (++v2 == v3)
      {
        unint64_t v2 = *(_DWORD **)(a2 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void *snlp::common::text_uso_graph::UDATextTreeParser::toTreeDebug@<X0>(snlp::common::text_uso_graph::UDATextTreeParser *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)v2 + 56))();
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::textAlignment(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::alias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::indentation(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::integerValue(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::stringValue(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::edge(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(unsigned char *)(a1 + 88))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(exception, "User dialog act not yet specified");
  }
  uint64_t v4 = siri::ontology::oname::graph::ontology_init::Argument_task((siri::ontology::oname::graph::ontology_init *)a1);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 31);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    uint64_t v6 = *(void *)(v4 + 16);
  }
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v6 != v7) {
    goto LABEL_18;
  }
  long long v9 = (const void **)(v4 + 8);
  if (v8 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a2;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, *(void *)(v4 + 16))) {
      goto LABEL_18;
    }
LABEL_17:
    operator new();
  }
  if (!*(unsigned char *)(v4 + 31)) {
    goto LABEL_17;
  }
  while (*(unsigned __int8 *)v9 == *v10)
  {
    long long v9 = (const void **)((char *)v9 + 1);
    ++v10;
    if (!--v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v11 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 8);
  return v11();
}

void sub_1C8F0F080(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x1CB775C40](v1, 0x10B3C404687FECELL);
  _Unwind_Resume(a1);
}

std::runtime_error *_ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F235F470;
  return result;
}

void snlp::common::text_uso_graph::UDATextTreeParser::node(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v23, 0, sizeof(v23));
  uint64_t v4 = a1 + 120;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v38 = 0;
  char v39 = 0;
  uint64_t v40 = 0;
  memset(v32, 0, 32);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v6 = *(void *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v5 = v6;
  }
  *(_OWORD *)((char *)&v32[1].__r_.__value_.__l.__data_ + 1) = 0uLL;
  int v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)(a2 + v5), (std::vector<std::csub_match> *)v32, 0);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v2;
  }
  else {
    uint64_t v9 = *(void *)v2;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v2 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__p, v9, v9 + v8, (uint64_t *)v32, 0);
  if (v32[0].__r_.__value_.__r.__words[0]) {
    operator delete(v32[0].__r_.__value_.__l.__data_);
  }
  if (v7)
  {
    if (*(unsigned char *)(a1 + 88))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (!*(unsigned char *)(a1 + 88)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::operator+<char>();
      uint64_t v13 = std::string::append(&v20, " but is being redefined as ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = *(char *)(v2 + 23);
      if (v15 >= 0) {
        uint64_t v16 = (const std::string::value_type *)v2;
      }
      else {
        uint64_t v16 = *(const std::string::value_type **)v2;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v2 + 8);
      }
      uint64_t v18 = std::string::append(&v21, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v32[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32[0].__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, v32);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F470;
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(a1 + 64), (const std::string *)v2);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v12, v32);
      v12->__vftable = (std::runtime_error_vtbl *)&unk_1F235F470;
    }
    (***(void (****)(void, uint64_t))(a1 + 96))(*(void *)(a1 + 96), v2);
  }
  uint64_t v10 = __p[0];
  if (__p[0])
  {
    operator delete(v10);
  }
}

void sub_1C8F0F3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (*(char *)(v25 - 137) < 0) {
    operator delete(*(void **)(v25 - 160));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_10:
      if (a23) {
        operator delete(a23);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v24);
  goto LABEL_10;
}

void snlp::common::text_uso_graph::UDATextTreeParser::UDATextTreeParser(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F235F3D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = v3;
  *(void *)(a1 + 112) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(a1 + 120), "^(accepted|acknowledged|cancelled|delegated|rejected|user_stated_task|wanted_to_pause|wanted_to_proceed|wanted_to_repeat|UserAccepted|UserAcknowledged|UserCancelled|DelegatedUserDialogAct|UserRejected|UserStatedTask|UserWantedToPause|UserWantedToProceed|UserWantedToRepeat)");
}

void sub_1C8F0F534(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 112);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void *)(v2 + 96);
  *(void *)(v2 + 96) = 0;
  if (v5) {
    std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v5);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0) {
      operator delete(*(void **)(v2 + 64));
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::getAliasMap(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (v1) {
    return v1 + 112;
  }
  else {
    return (uint64_t)this + 8;
  }
}

void snlp::common::text_uso_graph::UDATextTreeParser::releaseUserDialogAct(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  if (*((unsigned char *)this + 88)) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  _ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(exception, "UDA not yet specified");
}

void sub_1C8F0F9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      void *v17 = 0;
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      if (a16) {
        (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
      }
      std::unique_ptr<siri::ontology::UsoGraph const>::reset[abi:ne180100](&a17, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

BOOL std::operator==[abi:ne180100]<std::string,char [9]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [13]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [17]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [10]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [19]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [15]>(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 0;
  }
  int v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 14) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 14)
  {
    return 0;
  }
  return *a1 == 0x7461745372657355 && *(uint64_t *)((char *)a1 + 6) == 0x6B73615464657461;
}

BOOL std::operator==[abi:ne180100]<std::string,char [16]>(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 0;
  }
  int v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 15) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 15)
  {
    return 0;
  }
  return *a1 == 0x745F6465746E6177 && *(uint64_t *)((char *)a1 + 7) == 0x65737561705F6F74;
}

BOOL std::operator==[abi:ne180100]<std::string,char [18]>(uint64_t a1, char *__s)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (void *)a1;
  size_t v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23)) {
      return 0;
    }
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v3 = (void *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [20]>(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 0;
  }
  int v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 19) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 19)
  {
    return 0;
  }
  return *a1 == 0x746E615772657355
      && a1[1] == 0x636F72506F546465
      && *(uint64_t *)((char *)a1 + 11) == 0x646565636F72506FLL;
}

std::string *snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(std::string *this, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v14;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v15 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v15;
  }
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&this[3], (uint64_t)a4 + 24);
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = *(_OWORD *)a6;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  return this;
}

void sub_1C8F10080(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSURequestHandler::buildResponseForApps(long long *a1, uint64_t *a2, snlp::ssu::proto::SSUValidatedRequest *a3)
{
  v44[5] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 15);
  uint64_t v31 = a1 + 3;
  v40[0] = *((void *)a1 + 14);
  v40[1] = (std::string::size_type)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  snlp::ssu::cache::SSUCacheFileReadStreamManager::SSUCacheFileReadStreamManager(&v41, v31, v40, a1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  unint64_t v39 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a2) >> 3);
    if (v8 > 0x666666666666666) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    v44[0] = &v39;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(v8);
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0];
    std::string::size_type v43 = buf.__r_.__value_.__r.__words[0] + 40 * v9;
    std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(&v37, &buf);
    std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer((uint64_t)&buf);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  if (v6 != v7)
  {
    while ((snlp::ssu::cache::SSUCacheFileReadStreamManager::openReadStream((uint64_t)&v41, v6) & 1) != 0)
    {
      unint64_t v10 = v38;
      if (v38 >= v39)
      {
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v37) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0x666666666666666) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v39 - v37) >> 3) > v15) {
          unint64_t v15 = 0x999999999999999ALL * ((uint64_t)(v39 - v37) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v37) >> 3) >= 0x333333333333333) {
          unint64_t v16 = 0x666666666666666;
        }
        else {
          unint64_t v16 = v15;
        }
        v44[0] = &v39;
        if (v16)
        {
          uint64_t v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(v16);
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v17 = 0;
        }
        std::string::size_type v20 = (std::string::size_type)&v18[40 * v14];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        buf.__r_.__value_.__l.__size_ = v20;
        buf.__r_.__value_.__r.__words[2] = v20;
        std::string::size_type v43 = (std::string::size_type)&v18[40 * v17];
        int v21 = *(_DWORD *)v6;
        *(unsigned char *)(v20 + 4) = *(unsigned char *)(v6 + 4);
        *(_DWORD *)std::string::size_type v20 = v21;
        uint64_t v22 = (std::string *)(v20 + 8);
        if (*(char *)(v6 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(v6 + 8), *(void *)(v6 + 16));
          std::string::size_type v20 = buf.__r_.__value_.__r.__words[2];
        }
        else
        {
          long long v23 = *(_OWORD *)(v6 + 8);
          *(void *)(v20 + 24) = *(void *)(v6 + 24);
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        }
        v18[40 * v14 + 32] = *(unsigned char *)(v6 + 32);
        buf.__r_.__value_.__r.__words[2] = v20 + 40;
        std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(&v37, &buf);
        unint64_t v19 = v38;
        std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        int v11 = *(_DWORD *)v6;
        *(unsigned char *)(v38 + 4) = *(unsigned char *)(v6 + 4);
        *(_DWORD *)unint64_t v10 = v11;
        uint64_t v12 = (std::string *)(v10 + 8);
        if (*(char *)(v6 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v6 + 8), *(void *)(v6 + 16));
        }
        else
        {
          long long v13 = *(_OWORD *)(v6 + 8);
          *(void *)(v10 + 24) = *(void *)(v6 + 24);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *(unsigned char *)(v10 + 32) = *(unsigned char *)(v6 + 32);
        unint64_t v19 = v10 + 40;
      }
      unint64_t v38 = v19;
      v6 += 40;
      if (v6 == v7) {
        goto LABEL_41;
      }
    }
    uint64_t v24 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a1 + 71) < 0) {
        uint64_t v31 = *(long long **)v31;
      }
      uint64_t v25 = (void *)(v6 + 8);
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      unint64_t v26 = *(unsigned __int8 *)(v6 + 32);
      if (v26 <= 3) {
        uint64_t v27 = EnumNamesSSUCategoryType(void)::names[v26];
      }
      else {
        uint64_t v27 = "";
      }
      uint64_t v28 = a1;
      if (*((char *)a1 + 23) < 0) {
        uint64_t v28 = *(long long **)a1;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v43 = (std::string::size_type)v27;
      LOWORD(v44[0]) = 2080;
      *(void *)((char *)v44 + 2) = v28;
      _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_ERROR, "Error opening cache file read stream for locale=%s, appBundleId=%s, category=%s, encoderAssetVersion=%s. Skipping entire appCategory.", (uint8_t *)&buf, 0x2Au);
    }
  }
LABEL_41:
  snlp::ssu::matcher::SSURequestHandler::generateAllAppCandidates(&v37, (uint64_t)a3, (uint64_t)&v41, v36);
  snlp::ssu::proto::SSUValidatedRequest::getRequestId(a3, &buf);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 18) + 16))(&v33);
  snlp::ssu::matcher::SSUCandidateEncoder::SSUCandidateEncoder(&v35, a1, (long long *)&buf, (uint64_t)&v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  snlp::ssu::matcher::SSUCandidateEncoder::computeEncodedAppCandidates((snlp::ssu::matcher::SSUCandidateEncoder *)&v35, *(long long **)(*(void *)a3 + 80), v36, v32);
  if (v32[0] != v32[1]) {
    snlp::ssu::matcher::SSURequestHandler::loadGlobalNegatives((snlp::ssu::matcher::SSURequestHandler *)a1);
  }
  char v29 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_DEBUG, "No encoded app candidates were computed. Returning empty response.", (uint8_t *)&buf, 2u);
  }
  operator new();
}

void sub_1C8F10C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a30);
  *(void *)(v59 - 192) = &a37;
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 192));
  snlp::ssu::matcher::SSUCandidateEncoder::~SSUCandidateEncoder((snlp::ssu::matcher::SSUCandidateEncoder *)&a42);
  *(void *)(v59 - 192) = &a50;
  std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 192));
  *unint64_t v58 = &a53;
  std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100](&a42);
  snlp::ssu::cache::SSUCacheFileReadStreamManager::~SSUCacheFileReadStreamManager(&a58);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::generateAllAppCandidates(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  void v37[3] = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v28 = (void **)(a4 + 2);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8 != *a1)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3);
    if (HIBYTE(v9)) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v33 = a4 + 2;
    *(void *)std::string buf = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v9);
    *(void *)&uint8_t buf[8] = *(void *)buf;
    *(void *)&uint8_t buf[16] = *(void *)buf;
    uint64_t v32 = *(void *)buf + (v11 << 8);
    std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(a4, buf);
    std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer((uint64_t)buf);
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
  }
  for (; v7 != v8; v7 += 40)
  {
    uint64_t v12 = (void *)(v7 + 8);
    snlp::ssu::proto::SSUValidatedRequest::getAppEntityMatchingSpanInfos(a2, (const sirinluinternal::MatchingSpan *)(v7 + 8), (uint64_t)v29);
    long long v13 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v14 = (void *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v14 = (void *)*v12;
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "SSU";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "[insights-snlp-ssu]: ";
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v32 = 0x2E8BA2E8BA2E8BA3 * ((v29[1] - v29[0]) >> 3);
      LOWORD(v33) = 2080;
      *(void *)((char *)&v33 + 2) = v14;
      _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "[%s] %sFound %lu relevant appEntity spans for app '%s'", buf, 0x2Au);
    }
    uint64_t Stream = snlp::ssu::cache::SSUCacheFileReadStreamManager::getReadStream(a3, (char *)v7);
    if (Stream)
    {
      snlp::ssu::candidate::builder::generateAppCandidates(v7, *(void *)(*(void *)a2 + 80), v29, (snlp::ssu::cache::SSUCacheObjectIntentList *)(Stream + 704), (uint64_t)buf);
      unint64_t v17 = a4[1];
      unint64_t v16 = a4[2];
      if (v17 >= v16)
      {
        uint64_t v22 = (uint64_t)(v17 - *a4) >> 8;
        if ((unint64_t)(v22 + 1) >> 56) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v16 - *a4;
        uint64_t v24 = v23 >> 7;
        if (v23 >> 7 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF00) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        uint8_t v30[4] = v28;
        if (v25) {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (void **)(v25 + (v22 << 8));
        v30[0] = (void **)v25;
        v30[1] = v27;
        void v30[3] = (void **)(v25 + (v26 << 8));
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>((uint64_t)v27, (int *)buf);
        v30[2] = v27 + 32;
        std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(a4, v30);
        uint64_t v18 = a4[1];
        std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer((uint64_t)v30);
      }
      else
      {
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(a4[1], (int *)buf);
        uint64_t v18 = v17 + 256;
        a4[1] = v18;
      }
      a4[1] = v18;
      v30[0] = (void **)v37;
      std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](v30);
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
      if (v34 < 0) {
        operator delete(*((void **)&v33 + 1));
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(*(void **)&buf[8]);
      }
    }
    else
    {
      unint64_t v19 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        unint64_t v20 = *(unsigned __int8 *)(v7 + 32);
        int v21 = "";
        if (v20 <= 3) {
          int v21 = EnumNamesSSUCategoryType(void)::names[v20];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v21;
        _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "Logic error: could not get read stream for app=%s, category=%s. Skipping adding candidates.", buf, 0x16u);
      }
    }
    *(void *)std::string buf = v29;
    std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_1C8F1118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::loadGlobalNegatives(snlp::ssu::matcher::SSURequestHandler *this)
{
  uint64_t v1 = (char *)this + 24;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)v1, &v3);
  snlp::ssu::app::SSUFileWrapper::SSUFileWrapper((snlp::ssu::app::SSUFileWrapper *)v4, (const std::__fs::filesystem::path *)&__p);
}

void sub_1C8F112BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper((snlp::ssu::app::SSUFileWrapper *)(v23 - 24));
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::buildParsesForApp(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = a3 + 8;
    if (*(char *)(a3 + 31) < 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    int buf = 136315138;
    *(void *)buf_4 = v9;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "Building parses for app: %s", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v12 = v10;
  snlp::ssu::matcher::SSURequestHandler::buildSortedAppResults(a1, a2, a3, &v12, (uint64_t)&v13);
  uint64_t v12 = 0;
  if (v10) {
    std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v10);
  }
  snlp::ssu::matcher::SSURequestHandler::buildParsesForAppResults(v11, a3);
}

void sub_1C8F116F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 96;
      uint64_t v7 = v4 - 96;
      uint64_t v8 = v4 - 96;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 96;
        (*v9)(v7);
        v6 -= 96;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void snlp::ssu::matcher::SSURequestHandler::BuildParsesResult::~BuildParsesResult(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      std::__fs::filesystem::path v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void snlp::ssu::matcher::SSUCandidateEncoder::~SSUCandidateEncoder(snlp::ssu::matcher::SSUCandidateEncoder *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void snlp::ssu::cache::SSUCacheFileReadStreamManager::~SSUCacheFileReadStreamManager(void **this)
{
  std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::~__hash_table((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](uint64_t a1)
{
  std::__fs::filesystem::path v3 = (void **)(a1 + 232);
  std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 136);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248) && *(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void snlp::ssu::matcher::SSURequestHandler::buildSortedAppResults(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v7 = a3 + 8;
  int8x8_t v8 = *(int8x8_t *)(a1 + 80);
  if (v8)
  {
    uint64_t v9 = a4;
    unint64_t v12 = *(char *)(a3 + 32);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v8);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v14 = *(char *)(a3 + 32);
      if (*(void *)&v8 <= v12) {
        unint64_t v14 = v12 % *(void *)&v8;
      }
    }
    else
    {
      unint64_t v14 = (*(void *)&v8 - 1) & v12;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)(a1 + 72) + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v12)
        {
          if (*((unsigned __int8 *)i + 16) == v12)
          {
            uint64_t v22 = *a4;
            unint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v37 = 0;
            uint64_t v23 = *(void *)(v22 + 704);
            uint64_t v24 = *(void *)(v22 + 712);
            *(void *)int buf = &v37;
            uint8_t buf[8] = 0;
            if (v24 != v23)
            {
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 4);
              std::string::size_type v35 = a3 + 8;
              if (v25 >= 0x555555555555556) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v25);
              uint64_t v27 = 0;
              uint64_t v37 = v26;
              unint64_t v38 = v26;
              unint64_t v39 = &v26[48 * v28];
              do
              {
                std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>((std::string *)&v26[v27], (long long *)(v23 + v27));
                v27 += 48;
              }
              while (v23 + v27 != v24);
              unint64_t v38 = &v26[v27];
              uint64_t v9 = a4;
              std::string::size_type v7 = v35;
            }
            char v29 = SNLPOSLoggerForCategory(8);
            BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
            if (v30) {
              snlp::ssu::matcher::SSURequestHandler::logCacheFileInfo(v30, v7, *v9, (snlp::ssu::cache::SSUCacheObjectIntentList *)&v37);
            }
            snlp::ssu::similarity::SSUSimilaritySearchApp::SSUSimilaritySearchApp((uint64_t)buf, *(unsigned char *)(a3 + 4), (long long *)(i + 3), (uint64_t)&v37);
            if (snlp::ssu::matcher::SSURequestHandler::processAllBatches(a1, a2, (snlp::ssu::similarity::SSUSimilaritySearchApp *)buf, (snlp::ssu::cache::SSUCacheFileReadStream *)*v9, v7, a3))
            {
              snlp::ssu::similarity::SSUSimilaritySearchApp::getSearchResult((snlp::ssu::similarity::SSUSimilaritySearchApp *)buf, (void *)a5);
              if (*(void *)a5 != *(void *)(a5 + 8))
              {
                snlp::ssu::cache::SSUCacheFileReadStream::readDebugInformation((snlp::ssu::cache::SSUCacheFileReadStream *)*v9, (uint64_t)v40);
                if (v41)
                {
                  snlp::ssu::matcher::SSURequestHandler::attachDebugInformation((uint64_t **)a5, v40);
                }
                else
                {
                  long long v33 = SNLPOSLoggerForCategory(8);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)uint64_t v36 = 0;
                    _os_log_impl(&dword_1C8DA9000, v33, OS_LOG_TYPE_DEBUG, "Debug information not available in cache file. Output parses will not have a plaintext positive example in identifiers.", v36, 2u);
                  }
                }
                std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v40);
              }
            }
            else
            {
              uint64_t v31 = SNLPOSLoggerForCategory(8);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                if (*(char *)(a3 + 31) >= 0) {
                  std::string::size_type v32 = v7;
                }
                else {
                  std::string::size_type v32 = *(void *)(a3 + 8);
                }
                *(_DWORD *)uint64_t v40 = 136315138;
                *(void *)&v40[4] = v32;
                _os_log_impl(&dword_1C8DA9000, v31, OS_LOG_TYPE_ERROR, "Error searching similarities for %s. Skipping entire app.", v40, 0xCu);
              }
              *(unsigned char *)(a5 + 32) = 0;
              *(unsigned char *)(a5 + 40) = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 16) = 0;
              *(void *)a5 = 0;
              *(_DWORD *)(a5 + 24) = 0;
            }
            *(void *)uint64_t v40 = v47;
            std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
            std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
            *(void *)uint64_t v40 = &v45;
            std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
            *(void *)int buf = &v37;
            std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            return;
          }
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v17 >= *(void *)&v8) {
              v17 %= *(void *)&v8;
            }
          }
          else
          {
            v17 &= *(void *)&v8 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  uint64_t v18 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a3 + 31) >= 0) {
      std::string::size_type v19 = v7;
    }
    else {
      std::string::size_type v19 = *(void *)(a3 + 8);
    }
    unint64_t v20 = *(unsigned __int8 *)(a3 + 32);
    if (v20 <= 3) {
      int v21 = EnumNamesSSUCategoryType(void)::names[v20];
    }
    else {
      int v21 = "";
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v19;
    __int16 v43 = 2080;
    __int16 v44 = v21;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_ERROR, "Could not find similarity search configuration for app %s and category %s. Skipping entire app.", buf, 0x16u);
  }
  *(unsigned char *)(a5 + 32) = 0;
  *(unsigned char *)(a5 + 40) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
}

void sub_1C8F11FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long buf)
{
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  a15 = v23;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  snlp::ssu::similarity::SSUSimilaritySearchApp::~SSUSimilaritySearchApp((snlp::ssu::similarity::SSUSimilaritySearchApp *)&buf);
  *(void *)&int buf = &a12;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (a2 == 1)
  {
    uint64_t v28 = __cxa_begin_catch(a1);
    char v29 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v24 + 31) >= 0) {
        uint64_t v30 = v25;
      }
      else {
        uint64_t v30 = *(void *)(v24 + 8);
      }
      uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = v30;
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v31;
      _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_ERROR, "Error reading cache file for %s: %s. Skipping entire app.", (uint8_t *)&buf, 0x16u);
    }
    *(unsigned char *)(v23 + 32) = 0;
    *(unsigned char *)(v23 + 40) = 0;
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0;
    *(void *)uint64_t v23 = 0;
    *(_DWORD *)(v23 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C8F11D4CLL);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::buildParsesForAppResults(uint64_t a1, uint64_t a2)
{
}

void sub_1C8F124A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(a1);
}

snlp::ssu::similarity::SSUMatchInfo *snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo(snlp::ssu::similarity::SSUMatchInfo *this, const snlp::ssu::similarity::SSUMatchInfo *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 5) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v5;
  }
  std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 2, (long long *)a2 + 3);
  std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (uint64_t)a2 + 120);
  *((_DWORD *)this + nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(this - 54) = *((_DWORD *)a2 + 54);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 224), (long long *)a2 + 14);
  return this;
}

void sub_1C8F12650(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](v4);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v3);
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUMatchInfo::~SSUMatchInfo(void **this)
{
  if (*((unsigned char *)this + 248) && *((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 15));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272) && *(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(unint64_t a1)
{
  if (HIBYTE(a1)) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluexternal::UserParse>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a1);
}

__n128 std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v6 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 72, (uint64_t *)a2 + 9);
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*((unsigned char *)a2 + 208))
  {
    long long v7 = *(long long *)((char *)a2 + 120);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(_OWORD *)(a1 + 120) = v7;
    *((void *)a2 + 16) = 0;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 15) = 0;
    *(_OWORD *)(a1 + 144) = a2[9];
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 160) = a2[10];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *((void *)a2 + 20) = 0;
    *((void *)a2 + 21) = 0;
    *((void *)a2 + 22) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 184);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    *(__n128 *)(a1 + 184) = result;
    *((void *)a2 + 24) = 0;
    *((void *)a2 + 25) = 0;
    *((void *)a2 + 23) = 0;
    *(unsigned char *)(a1 + 208) = 1;
  }
  result.n128_u32[0] = *((_DWORD *)a2 + 54);
  *(unsigned char *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 216) = result.n128_u32[0];
  *(unsigned char *)(a1 + 248) = 0;
  if (*((unsigned char *)a2 + 248))
  {
    __n128 result = (__n128)a2[14];
    *(void *)(a1 + 240) = *((void *)a2 + 30);
    *(__n128 *)(a1 + 224) = result;
    *((void *)a2 + 29) = 0;
    *((void *)a2 + 30) = 0;
    *((void *)a2 + 28) = 0;
    *(unsigned char *)(a1 + 248) = 1;
  }
  return result;
}

void std::vector<snlp::ssu::similarity::SSUMatchInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  long long v5 = (long long *)*a1;
  long long v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 256;
    v4 -= 16;
    std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<snlp::ssu::similarity::SSUMatchInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 256;
    std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](i - 256);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<sirinluexternal::UserParse>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    uint64_t result = MEMORY[0x1CB773DC0](result - 96, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<sirinluexternal::UserParse>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 96);
    *(void *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t snlp::ssu::matcher::SSURequestHandler::logCacheFileInfo(uint64_t a1, std::string::size_type a2, uint64_t a3, snlp::ssu::cache::SSUCacheObjectIntentList *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
  for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 4); ++i)
  {
    snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(a4, i, &buf);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<error: missing intent>");
    if (BYTE4(v38)) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)&__p;
    }
    uint64_t v8 = &v28;
    if (BYTE4(v38)) {
      uint64_t v8 = (char *)&buf.__r_.__value_.__r.__words[2] + 7;
    }
    if (*v8 < 0)
    {
      if (BYTE4(v38)) {
        p_std::string::size_type size = &buf.__r_.__value_.__l.__size_;
      }
      else {
        p_std::string::size_type size = (std::string::size_type *)&v27;
      }
      std::string::__init_copy_ctor_external(&v25, p_buf->__r_.__value_.__l.__data_, *p_size);
    }
    else
    {
      std::string v25 = *p_buf;
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v25;
    }
    else {
      BOOL v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v28 < 0) {
      operator delete(__p);
    }
    std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf);
  }
  uint8x8_t v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(char *)(a2 + 23);
    std::string::size_type v15 = *(void *)a2;
    uint64_t v16 = *(void *)a4;
    uint64_t v17 = *((void *)a4 + 1);
    uint64_t v18 = *(void *)(a3 + 744);
    uint64_t v19 = *(void *)(a3 + 736);
    std::stringbuf::str();
    if (v14 >= 0) {
      std::string::size_type v20 = a2;
    }
    else {
      std::string::size_type v20 = v15;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    p_std::string p = &__p;
    if (v28 < 0) {
      p_std::string p = __p;
    }
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                               * ((v17 - v16) >> 4);
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v34 = v18;
    __int16 v35 = 2048;
    uint64_t v36 = v19;
    __int16 v37 = 2080;
    unint64_t v38 = p_p;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "App %s has numUniqueIntents=%lu, numPositiveBatches=%lu, numNegativeBatches=%lu, intent names: %s", (uint8_t *)&buf, 0x34u);
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  v29[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v30[0] = v22;
  v30[1] = MEMORY[0x1E4FBA470] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v32);
}

void sub_1C8F12F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
}

BOOL snlp::ssu::matcher::SSURequestHandler::processAllBatches(uint64_t a1, void *a2, snlp::ssu::similarity::SSUSimilaritySearchApp *a3, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!snlp::ssu::matcher::SSURequestHandler::processCacheFileBatches(a1, a3, this, a5, a6))
  {
    uint8x8_t v13 = SNLPOSLoggerForCategory(8);
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v16 = a5;
    }
    else {
      uint64_t v16 = *(void *)a5;
    }
    int v19 = 136315138;
    uint64_t v20 = v16;
    uint64_t v17 = "Error processing cache file batches for app %s.";
LABEL_19:
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0xCu);
    return 0;
  }
  char v11 = snlp::ssu::matcher::SSURequestHandler::processGlobalNegatives(a1, (uint64_t)a3, a2, (uint64_t *)a5, a6);
  unint64_t v12 = SNLPOSLoggerForCategory(8);
  uint8x8_t v13 = v12;
  if ((v11 & 1) == 0)
  {
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v18 = a5;
    }
    else {
      uint64_t v18 = *(void *)a5;
    }
    int v19 = 136315138;
    uint64_t v20 = v18;
    uint64_t v17 = "Error processing global negatives for app %s.";
    goto LABEL_19;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v14 = a5;
    }
    else {
      uint64_t v14 = *(void *)a5;
    }
    int v19 = 136315138;
    uint64_t v20 = v14;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "Successfully processed cache file batches and global negatives for app %s.", (uint8_t *)&v19, 0xCu);
  }
  return 1;
}

void snlp::ssu::matcher::SSURequestHandler::attachDebugInformation(uint64_t **a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      unint64_t v5 = v2[4];
      if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
      {
        uint8x8_t v13 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          unint64_t v14 = (unint64_t)v2;
          if (*((char *)v2 + 23) < 0) {
            unint64_t v14 = *v2;
          }
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
          *(_DWORD *)std::string buf = 134218498;
          unint64_t v26 = v5;
          __int16 v27 = 2048;
          unint64_t v28 = v15;
          __int16 v29 = 2080;
          unint64_t v30 = v14;
          uint64_t v16 = v13;
          uint64_t v17 = "App result batch provenance has batchIndex=%lu, but this is greater than indexes.size()=%lu. Skipping at"
                "taching debug information for intent %s.";
          uint32_t v18 = 32;
          goto LABEL_22;
        }
      }
      else
      {
        unint64_t v6 = v2[5];
        uint64_t v7 = (void *)(*a2 + 24 * v5);
        if (v6 >= (uint64_t)(v7[1] - *v7) >> 3)
        {
          int v19 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            unint64_t v20 = (unint64_t)v2;
            if (*((char *)v2 + 23) < 0) {
              unint64_t v20 = *v2;
            }
            uint64_t v21 = (uint64_t)(v7[1] - *v7) >> 3;
            *(_DWORD *)std::string buf = 134218754;
            unint64_t v26 = v6;
            __int16 v27 = 2048;
            unint64_t v28 = v5;
            __int16 v29 = 2048;
            unint64_t v30 = v21;
            __int16 v31 = 2080;
            unint64_t v32 = v20;
            uint64_t v16 = v19;
            uint64_t v17 = "App result batch provenance has encodingIndexWithinBatch=%lu for batchIndex=%lu, but this is greater t"
                  "han indexesForBatch.size()=%lu. Skipping attaching debug information for intent %s.";
            uint32_t v18 = 42;
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v8 = *(void *)(*v7 + 8 * v6);
          uint64_t v9 = a2[3];
          if (v8 < 0xAAAAAAAAAAAAAAABLL * ((a2[4] - v9) >> 3))
          {
            unint64_t v10 = v9 + 24 * v8;
            char v11 = SNLPOSLoggerForCategory(8);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v12 = v10;
              if (*(char *)(v10 + 23) < 0) {
                unint64_t v12 = *(void *)v10;
              }
              *(_DWORD *)std::string buf = 136315138;
              unint64_t v26 = v12;
              _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Attaching plaintext example to match info: %s", buf, 0xCu);
            }
            std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(v2 + 31), (const std::string *)v10);
            goto LABEL_23;
          }
          uint64_t v22 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = v2;
            if (*((char *)v2 + 23) < 0) {
              uint64_t v23 = (uint64_t *)*v2;
            }
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[4] - a2[3]) >> 3);
            *(_DWORD *)std::string buf = 134219010;
            unint64_t v26 = v5;
            __int16 v27 = 2048;
            unint64_t v28 = v6;
            __int16 v29 = 2048;
            unint64_t v30 = v8;
            __int16 v31 = 2048;
            unint64_t v32 = v24;
            __int16 v33 = 2080;
            uint64_t v34 = v23;
            uint64_t v16 = v22;
            uint64_t v17 = "App result batch provenance has batchIndex=%lu, encodingIndexWithinBatch=%lu and exampleIndex=%lu, but"
                  " this is greater than  debugInformation.plaintextPositiveExamples.examples.size()=%lu. Skipping attach"
                  "ing debug information for intent %s.";
            uint32_t v18 = 52;
LABEL_22:
            _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_ERROR, v17, buf, v18);
          }
        }
      }
LABEL_23:
      v2 += 36;
    }
    while (v2 != v3);
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = (void **)(a1 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)a1;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](v4 - 264);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 256))
  {
    if (*(unsigned char *)(a1 + 248) && *(char *)(a1 + 247) < 0) {
      operator delete(*(void **)(a1 + 224));
    }
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::~SSUSimilaritySearchApp(snlp::ssu::similarity::SSUSimilaritySearchApp *this)
{
  uint64_t v2 = (void **)((char *)this + 336);
  std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 72);
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v2);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processCacheFileBatches(int a1, snlp::ssu::similarity::SSUSimilaritySearchApp *a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  do
  {
    if (v10 >= *((void *)this + 92))
    {
      unint64_t v15 = 0;
      do
      {
        if (v15 >= *((void *)this + 93)) {
          return 1;
        }
      }
      while (snlp::ssu::matcher::SSURequestHandler::processPositiveBatch(a1, a2, this, (uint64_t *)a4, v15++, a5));
      unint64_t v12 = SNLPOSLoggerForCategory(8);
      BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v17 = a4;
      }
      else {
        uint64_t v17 = *(void *)a4;
      }
      int v18 = 136315138;
      uint64_t v19 = v17;
      goto LABEL_17;
    }
  }
  while (snlp::ssu::matcher::SSURequestHandler::processNegativeBatch(a1, (uint64_t)a2, this, (uint64_t *)a4, v10++, a5));
  unint64_t v12 = SNLPOSLoggerForCategory(8);
  BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)a4;
  }
  int v18 = 136315138;
  uint64_t v19 = v14;
LABEL_17:
  _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "Error processing batch for %s. Skipping entire app.", (uint8_t *)&v18, 0xCu);
  return 0;
}

uint64_t snlp::ssu::matcher::SSURequestHandler::processGlobalNegatives(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a3[1] - *a3 != 16)
  {
    char v11 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_ERROR, "Unexpected global negatives tensor rank: %lu", buf, 0xCu);
    }
    return 0;
  }
  if (!*(void *)*a3)
  {
    uint64_t v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "Skipping global negative processing since there are no global negative examples", buf, 2u);
    }
    return 1;
  }
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v6 = *(void *)(a5 + 40);
  uint64_t v7 = *(void *)(a5 + 48);
  if (v6 == v7) {
    return 1;
  }
  while (1)
  {
    snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)a3, v6 + 192, buf);
    int v10 = v25;
    if (v25) {
      break;
    }
    snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(a2, &xmmword_1C8F38670, (uint64_t *)&__p, v6);
    if (!v10)
    {
      v6 += 240;
      if (v6 != v7) {
        continue;
      }
    }
    goto LABEL_22;
  }
  unint64_t v15 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (uint64_t *)*a4;
    }
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v22 = v16;
    _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "Error computing global negatives similarity for app %s.", v21, 0xCu);
  }
  if (v10 && v24 < 0) {
    operator delete(*(void **)buf);
  }
LABEL_22:
  BOOL v13 = v10 == 0;
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_1C8F1396C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processNegativeBatch(int a1, uint64_t a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchNegative(this, (uint64_t)v22);
  if (v22[48])
  {
    std::string __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v10 = *(void *)(a6 + 40);
    uint64_t v11 = *(void *)(a6 + 48);
    if (v10 == v11)
    {
      BOOL v15 = 1;
    }
    else
    {
      while (1)
      {
        snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)v22, v10 + 192, buf);
        int v12 = v26;
        if (v26) {
          break;
        }
        *(void *)&long long v23 = 0;
        *((void *)&v23 + 1) = a5;
        snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(a2, &v23, (uint64_t *)&__p, v10);
        if (!v12)
        {
          v10 += 240;
          if (v10 != v11) {
            continue;
          }
        }
        goto LABEL_22;
      }
      uint64_t v16 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = (uint64_t *)*a4;
        }
        LODWORD(v23) = 136315138;
        *(void *)((char *)&v23 + 4) = v17;
        _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_ERROR, "Error computing similarity for app %s.", (uint8_t *)&v23, 0xCu);
      }
      if (v12 && v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_22:
      BOOL v15 = v12 == 0;
      if (__p)
      {
        uint64_t v20 = __p;
        operator delete(__p);
      }
    }
  }
  else
  {
    BOOL v13 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v14 = a4;
      }
      else {
        uint64_t v14 = (uint64_t *)*a4;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_ERROR, "Error reading negative batch for app %s.", buf, 0xCu);
    }
    BOOL v15 = 0;
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v22);
  return v15;
}

void sub_1C8F13B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
}

BOOL snlp::ssu::matcher::SSURequestHandler::processPositiveBatch(int a1, snlp::ssu::similarity::SSUSimilaritySearchApp *a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchPositive(this, (uint64_t)v23);
  if (v23[72])
  {
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v10 = *(snlp::ssu::candidate::SSUCandidate **)(a6 + 40);
    uint64_t v11 = *(snlp::ssu::candidate::SSUCandidate **)(a6 + 48);
    if (v10 == v11)
    {
      BOOL v16 = 1;
    }
    else
    {
      do
      {
        snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)v23, (uint64_t)v10 + 192, v25);
        int v12 = v27;
        if (v27)
        {
          BOOL v13 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            if (!v27) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            if (*((char *)a4 + 23) >= 0) {
              uint64_t v14 = a4;
            }
            else {
              uint64_t v14 = (uint64_t *)*a4;
            }
            BOOL v15 = v25;
            if (v26 < 0) {
              BOOL v15 = *(unsigned char **)v25;
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v15;
            _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_ERROR, "Error computing similarity for app %s: %s", buf, 0x16u);
          }
        }
        else
        {
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = a5;
          snlp::ssu::similarity::SSUSimilaritySearchApp::processPositiveBatch(a2, (long long *)buf, (uint64_t)v23, (uint64_t *)&__p, v10);
        }
        if (v27 && v26 < 0) {
          operator delete(*(void **)v25);
        }
        if (v12) {
          break;
        }
        uint64_t v10 = (snlp::ssu::candidate::SSUCandidate *)((char *)v10 + 240);
      }
      while (v10 != v11);
      BOOL v16 = v12 == 0;
      if (__p)
      {
        uint64_t v21 = __p;
        operator delete(__p);
      }
    }
  }
  else
  {
    uint64_t v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        int v18 = a4;
      }
      else {
        int v18 = (uint64_t *)*a4;
      }
      *(_DWORD *)char v25 = 136315138;
      *(void *)&v25[4] = v18;
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_ERROR, "Error reading positive batch for app %s.", v25, 0xCu);
    }
    BOOL v16 = 0;
  }
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v23);
  return v16;
}

void sub_1C8F13DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void snlp::ssu::candidate::SSUAppCandidates::~SSUAppCandidates(void **this)
{
  uint64_t v2 = this + 29;
  std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 17));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

__n128 std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 2);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 8) = v5;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 1) = 0;
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 10);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v6;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 5) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 88, (uint64_t *)a2 + 11);
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    long long v8 = *(_OWORD *)(a2 + 34);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v8;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 17) = 0;
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *((void *)a2 + 22) = 0;
    *((void *)a2 + 23) = 0;
    *((void *)a2 + 24) = 0;
    long long v9 = *(_OWORD *)(a2 + 50);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *(_OWORD *)(a1 + 200) = v9;
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 25) = 0;
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  __n128 result = *(__n128 *)(a2 + 58);
  *(__n128 *)(a1 + 232) = result;
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  return result;
}

void std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  long long v5 = (int *)*a1;
  int v4 = (int *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 256;
    v4 -= 64;
    std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 256;
    std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](i - 256);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

nlv4_inference_orchestrator::trees::TreeDecompressor *nlv4_inference_orchestrator::trees::TreeDecompressor::decompress(nlv4_inference_orchestrator::trees::TreeDecompressor *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = *((void *)a2 + 11);
  BOOL v13 = (char *)a2 + 88;
  if (*((void *)a2 + 12) != v2)
  {
    int v4 = this;
    unint64_t v5 = 0;
    uint64_t v6 = (char *)a2 + 24;
    uint64_t v7 = (char *)a2 + 48;
    int v12 = (_OWORD *)((char *)a2 + 72);
    uint64_t v8 = (_OWORD *)((char *)a2 + 112);
    uint64_t v9 = 48;
    do
    {
      uint64_t v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)(v2 + v9 - 48);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, (unsigned __int8 *)(v2 + v9)))
      {
        nlv4_inference_orchestrator::trees::TreeDecompressor::decompressNode(v4, a2, v10, &v14);
        if (*((char *)a2 + 23) < 0) {
          operator delete(*(void **)a2);
        }
        *(std::string *)a2 = v14;
        *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
        v14.__r_.__value_.__s.__data_[0] = 0;
        if (*((char *)a2 + 47) < 0) {
          operator delete(*(void **)v6);
        }
        *(_OWORD *)uint64_t v6 = v15;
        *((void *)v6 + 2) = v16;
        HIBYTE(v16) = 0;
        LOBYTE(v15) = 0;
        if (*((char *)a2 + 71) < 0) {
          operator delete(*(void **)v7);
        }
        *(_OWORD *)uint64_t v7 = __p;
        *((void *)v7 + 2) = v18;
        HIBYTE(v18) = 0;
        LOBYTE(__p) = 0;
        _OWORD *v12 = v19;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate((uint64_t)v13);
        *(_OWORD *)((char *)a2 + 88) = v20;
        *((void *)a2 + 13) = v21;
        uint64_t v21 = 0;
        long long v20 = 0uLL;
        long long v11 = v23;
        _OWORD *v8 = v22;
        v8[1] = v11;
        char v24 = (void **)&v20;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v24);
        if (SHIBYTE(v18) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v16) < 0) {
          operator delete((void *)v15);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
      }
      this = (nlv4_inference_orchestrator::trees::TreeDecompressor *)nlv4_inference_orchestrator::trees::TreeDecompressor::decompress(v4, v10);
      ++v5;
      uint64_t v2 = *((void *)a2 + 11);
      v9 += 144;
    }
    while (v5 < 0x8E38E38E38E38E39 * ((*((void *)a2 + 12) - v2) >> 4));
  }
  return this;
}

void nlv4_inference_orchestrator::trees::TreeDecompressor::decompressNode(nlv4_inference_orchestrator::trees::TreeDecompressor *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, const nlv4_inference_orchestrator::trees::TreeNode *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = (unsigned __int8 *)a3 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, (unsigned __int8 *)a3 + 48))
  {
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, v8);
    if (!v9) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    BOOL v90 = this;
    long long v91 = v8;
    int v92 = a3;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(&v115, *((void *)v9 + 5), *((void *)v9 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v9 + 6) - *((void *)v9 + 5)) >> 4));
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a4, a2);
    uint64_t v10 = v115;
    long long v93 = a4;
    long long v11 = a4;
    unint64_t v97 = v116;
    if (v115 == v116) {
      goto LABEL_128;
    }
    long long v11 = a4;
    do
    {
      std::string::size_type v12 = v11[3].__r_.__value_.__r.__words[2];
      std::string::pointer data = v11[4].__r_.__value_.__l.__data_;
      std::string v14 = (uint64_t *)&v11[3].__r_.__value_.__r.__words[2];
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v15 = *v10;
        v113.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v15;
      }
      uint64_t v16 = (long long *)((char *)v10 + 24);
      if (*((char *)v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v114, *((const std::string::value_type **)v10 + 3), *((void *)v10 + 4));
      }
      else
      {
        long long v17 = *v16;
        v114.__r_.__value_.__r.__words[2] = *((void *)v10 + 5);
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v17;
      }
      char v18 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      if ((std::string::pointer)v12 == data)
      {
        char v29 = 0;
        if ((*((unsigned char *)&v114.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
      uint64_t v99 = v11;
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v114.__r_.__value_.__l.__size_;
      }
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v20 = &v114;
      }
      else {
        long long v20 = (std::string *)v114.__r_.__value_.__r.__words[0];
      }
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = v113.__r_.__value_.__l.__size_;
      }
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v22 = &v113;
      }
      else {
        long long v22 = (std::string *)v113.__r_.__value_.__r.__words[0];
      }
      while (1)
      {
        uint64_t v23 = *(unsigned __int8 *)(v12 + 23);
        if ((v23 & 0x80u) == 0) {
          uint64_t v24 = *(unsigned __int8 *)(v12 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v12 + 8);
        }
        if (v24 != size) {
          goto LABEL_46;
        }
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v12, v20, *(void *)(v12 + 8))) {
            goto LABEL_46;
          }
        }
        else if (*(unsigned char *)(v12 + 23))
        {
          uint64_t v25 = 0;
          while (*(unsigned __int8 *)(v12 + v25) == v20->__r_.__value_.__s.__data_[v25])
          {
            if (v23 == ++v25) {
              goto LABEL_35;
            }
          }
          goto LABEL_46;
        }
LABEL_35:
        uint64_t v26 = *(unsigned __int8 *)(v12 + 71);
        if ((v26 & 0x80u) == 0) {
          uint64_t v27 = *(unsigned __int8 *)(v12 + 71);
        }
        else {
          uint64_t v27 = *(void *)(v12 + 56);
        }
        if (v27 != v21) {
          goto LABEL_46;
        }
        if ((v26 & 0x80) != 0) {
          break;
        }
        if (!*(unsigned char *)(v12 + 71)) {
          goto LABEL_48;
        }
        uint64_t v28 = 0;
        while (*(unsigned __int8 *)(v12 + v28 + 48) == v22->__r_.__value_.__s.__data_[v28])
        {
          if (v26 == ++v28) {
            goto LABEL_48;
          }
        }
LABEL_46:
        v12 += 144;
        if ((std::string::pointer)v12 == data)
        {
          char v29 = 0;
          goto LABEL_49;
        }
      }
      if (memcmp(*(const void **)(v12 + 48), v22, *(void *)(v12 + 56))) {
        goto LABEL_46;
      }
LABEL_48:
      char v29 = 1;
LABEL_49:
      long long v11 = v99;
      if (v18 < 0) {
LABEL_50:
      }
        operator delete(v114.__r_.__value_.__l.__data_);
LABEL_51:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v113.__r_.__value_.__l.__data_);
        if ((v29 & 1) == 0) {
          goto LABEL_77;
        }
LABEL_53:
        v107.__r_.__value_.__s.__data_[0] = 0;
        char v112 = 0;
        unint64_t v30 = v11;
        std::string::size_type v32 = v11[3].__r_.__value_.__r.__words[2];
        std::string::pointer v31 = v11[4].__r_.__value_.__l.__data_;
        char v33 = *((unsigned char *)v10 + 47);
        if ((std::string::pointer)v32 != v31)
        {
          if (v33 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v10 + 47);
          }
          else {
            uint64_t v34 = *((void *)v10 + 4);
          }
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
            if ((v35 & 0x80u) == 0) {
              uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
            }
            else {
              uint64_t v36 = *(void *)(v32 + 8);
            }
            if (v36 == v34)
            {
              if (v33 >= 0) {
                __int16 v37 = (unsigned __int8 *)v10 + 24;
              }
              else {
                __int16 v37 = *(unsigned __int8 **)v16;
              }
              if ((v35 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v32, v37, *(void *)(v32 + 8)))
                {
LABEL_79:
                  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v107, (const nlv4_inference_orchestrator::trees::TreeNode *)v32);
                  char v112 = 1;
                  goto LABEL_126;
                }
              }
              else
              {
                if (!*(unsigned char *)(v32 + 23)) {
                  goto LABEL_79;
                }
                uint64_t v38 = 0;
                while (*(unsigned __int8 *)(v32 + v38) == v37[v38])
                {
                  if (v35 == ++v38) {
                    goto LABEL_79;
                  }
                }
              }
            }
            v32 += 144;
          }
          while ((std::string::pointer)v32 != v31);
        }
        if (v33 < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 3), *((void *)v10 + 4));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v16;
          __str.__r_.__value_.__r.__words[2] = *((void *)v10 + 5);
        }
        memset(&v103, 0, sizeof(v103));
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v48 = *v10;
          v104.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v48;
        }
        long long v105 = 0u;
        memset(v106, 0, sizeof(v106));
        std::string::size_type v49 = v30[4].__r_.__value_.__l.__size_;
        std::string::pointer v50 = v30[4].__r_.__value_.__l.__data_;
        if ((unint64_t)v50 >= v49)
        {
          unint64_t v52 = 0x8E38E38E38E38E39 * ((uint64_t)&v50[-*v14] >> 4);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0x1C71C71C71C71C7) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - *v14) >> 4);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0xE38E38E38E38E3) {
            unint64_t v55 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v55 = v53;
          }
          p_std::string::size_type size = &v30[4].__r_.__value_.__l.__size_;
          if (v55) {
            unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v55);
          }
          else {
            uint64_t v56 = 0;
          }
          v119.__r_.__value_.__r.__words[0] = v55;
          v119.__r_.__value_.__l.__size_ = v55 + 144 * v52;
          v119.__r_.__value_.__r.__words[2] = v119.__r_.__value_.__l.__size_;
          unint64_t v120 = v55 + 144 * v56;
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v119.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&__str);
          v119.__r_.__value_.__r.__words[2] += 144;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v14, &v119);
          std::string::pointer v51 = v30[4].__r_.__value_.__l.__data_;
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v119);
        }
        else
        {
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v30[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&__str);
          std::string::pointer v51 = v50 + 144;
          v30[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 144);
        }
        v30[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type v32 = (std::string::size_type)(v51 - 144);
LABEL_126:
        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v107);
        long long v11 = (std::string *)v32;
      }
      else
      {
        if (v29) {
          goto LABEL_53;
        }
LABEL_77:
        if (*((char *)v10 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v107, *((const std::string::value_type **)v10 + 3), *((void *)v10 + 4));
        }
        else
        {
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *v16;
          v107.__r_.__value_.__r.__words[2] = *((void *)v10 + 5);
        }
        memset(&v108, 0, sizeof(v108));
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v39 = *v10;
          __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
        }
        long long v110 = 0u;
        memset(v111, 0, sizeof(v111));
        std::string::size_type v40 = v11[4].__r_.__value_.__l.__size_;
        std::string::pointer v41 = v11[4].__r_.__value_.__l.__data_;
        if ((unint64_t)v41 >= v40)
        {
          unint64_t v43 = 0x8E38E38E38E38E39 * ((uint64_t)&v41[-*v14] >> 4);
          unint64_t v44 = v43 + 1;
          if (v43 + 1 > 0x1C71C71C71C71C7) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v45 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - *v14) >> 4);
          if (2 * v45 > v44) {
            unint64_t v44 = 2 * v45;
          }
          if (v45 >= 0xE38E38E38E38E3) {
            unint64_t v46 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v46 = v44;
          }
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[4].__r_.__value_.__l.__size_;
          if (v46) {
            unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v46);
          }
          else {
            uint64_t v47 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v46;
          __str.__r_.__value_.__l.__size_ = v46 + 144 * v43;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          v103.__r_.__value_.__r.__words[0] = v46 + 144 * v47;
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)__str.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v14, &__str);
          std::string::pointer v42 = v11[4].__r_.__value_.__l.__data_;
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v11[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
          std::string::pointer v42 = v41 + 144;
          v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 144);
        }
        v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        long long v11 = (std::string *)(v42 - 144);
      }
      v10 += 3;
    }
    while (v10 != v97);
LABEL_128:
    uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v90, v91);
    if (!v57) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v58 = v93;
    if ((char)v57[87] < 0) {
      std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v57 + 8), *((void *)v57 + 9));
    }
    else {
      std::string v119 = *(std::string *)(v57 + 64);
    }
    memset(&v107, 0, sizeof(v107));
    if (*((char *)v92 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v108, *((const std::string::value_type **)v92 + 3), *((void *)v92 + 4));
    }
    else {
      std::string v108 = *(std::string *)((unsigned char *)v92 + 1);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v119;
    }
    long long v110 = *(_OWORD *)((char *)v92 + 72);
    memset(v111, 0, 24);
    long long v59 = *((_OWORD *)v92 + 8);
    *(_OWORD *)&v111[3] = *((_OWORD *)v92 + 7);
    *(_OWORD *)&v111[5] = v59;
    std::string::size_type v60 = v11[4].__r_.__value_.__l.__size_;
    std::string::pointer v61 = v11[4].__r_.__value_.__l.__data_;
    if ((unint64_t)v61 >= v60)
    {
      std::string::size_type v63 = v11[3].__r_.__value_.__r.__words[2];
      unint64_t v64 = 0x8E38E38E38E38E39 * ((uint64_t)&v61[-v63] >> 4);
      if (v64 + 1 > 0x1C71C71C71C71C7) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v65 = 0x8E38E38E38E38E39 * ((uint64_t)(v60 - v63) >> 4);
      uint64_t v66 = 2 * v65;
      if (2 * v65 <= v64 + 1) {
        uint64_t v66 = v64 + 1;
      }
      if (v65 >= 0xE38E38E38E38E3) {
        unint64_t v67 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v67 = v66;
      }
      v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[4].__r_.__value_.__l.__size_;
      if (v67) {
        unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v67);
      }
      else {
        uint64_t v68 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v67;
      __str.__r_.__value_.__l.__size_ = v67 + 144 * v64;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      v103.__r_.__value_.__r.__words[0] = v67 + 144 * v68;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)__str.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)&v11[3].__r_.__value_.__r.__words[2], &__str);
      std::string::pointer v62 = v11[4].__r_.__value_.__l.__data_;
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&__str);
      unint64_t v58 = v93;
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v11[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
      std::string::pointer v62 = v61 + 144;
      v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v61 + 144);
    }
    v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&__str, (const nlv4_inference_orchestrator::trees::TreeNode *)(v58[4].__r_.__value_.__r.__words[0] - 144));
    std::string::pointer v70 = (std::string::pointer)v58[3].__r_.__value_.__r.__words[2];
    int64_t v69 = v58[4].__r_.__value_.__l.__data_;
    if (v70 != v69)
    {
      char v71 = *((unsigned char *)v92 + 23);
      if (v71 >= 0) {
        uint64_t v72 = *((unsigned __int8 *)v92 + 23);
      }
      else {
        uint64_t v72 = *((void *)v92 + 1);
      }
      if (v71 >= 0) {
        int64_t v73 = v92;
      }
      else {
        int64_t v73 = *(const nlv4_inference_orchestrator::trees::TreeNode **)v92;
      }
      char v74 = *((unsigned char *)v92 + 47);
      if (v74 >= 0) {
        uint64_t v75 = *((unsigned __int8 *)v92 + 47);
      }
      else {
        uint64_t v75 = *((void *)v92 + 4);
      }
      if (v74 >= 0) {
        char v76 = (unsigned __int8 *)v92 + 24;
      }
      else {
        char v76 = (unsigned __int8 *)*((void *)v92 + 3);
      }
      char v77 = *((unsigned char *)v92 + 71);
      if (v77 >= 0) {
        uint64_t v78 = *((unsigned __int8 *)v92 + 71);
      }
      else {
        uint64_t v78 = *((void *)v92 + 7);
      }
      if (v77 >= 0) {
        uint64_t v79 = v91;
      }
      else {
        uint64_t v79 = (unsigned __int8 *)*((void *)v92 + 6);
      }
      uint64_t v100 = *((void *)v92 + 10);
      long long v101 = (std::string *)*((void *)v92 + 9);
      unint64_t v96 = (std::string *)*((void *)v92 + 15);
      uint64_t v98 = *((void *)v92 + 14);
      uint64_t v94 = *((void *)v92 + 17);
      uint64_t v95 = *((void *)v92 + 16);
      while (1)
      {
        uint64_t v80 = v70[23];
        if ((v80 & 0x80u) == 0) {
          uint64_t v81 = v70[23];
        }
        else {
          uint64_t v81 = *((void *)v70 + 1);
        }
        if (v81 != v72) {
          goto LABEL_212;
        }
        if ((v80 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v70, v73, *((void *)v70 + 1))) {
            goto LABEL_212;
          }
        }
        else if (v70[23])
        {
          uint64_t v82 = 0;
          while (v70[v82] == *((unsigned char *)v73 + v82))
          {
            if (v80 == ++v82) {
              goto LABEL_184;
            }
          }
          goto LABEL_212;
        }
LABEL_184:
        uint64_t v83 = v70[47];
        if ((v83 & 0x80u) == 0) {
          uint64_t v84 = v70[47];
        }
        else {
          uint64_t v84 = *((void *)v70 + 4);
        }
        if (v84 != v75) {
          goto LABEL_212;
        }
        if ((v83 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v70 + 3), v76, *((void *)v70 + 4))) {
            goto LABEL_212;
          }
        }
        else if (v70[47])
        {
          uint64_t v85 = 0;
          while (v70[v85 + 24] == v76[v85])
          {
            if (v83 == ++v85) {
              goto LABEL_195;
            }
          }
          goto LABEL_212;
        }
LABEL_195:
        uint64_t v86 = v70[71];
        if ((v86 & 0x80u) == 0) {
          uint64_t v87 = v70[71];
        }
        else {
          uint64_t v87 = *((void *)v70 + 7);
        }
        if (v87 != v78) {
          goto LABEL_212;
        }
        if ((v86 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v70 + 6), v79, *((void *)v70 + 7))) {
            goto LABEL_212;
          }
        }
        else if (v70[71])
        {
          uint64_t v88 = 0;
          while (v70[v88 + 48] == v79[v88])
          {
            if (v86 == ++v88) {
              goto LABEL_206;
            }
          }
          goto LABEL_212;
        }
LABEL_206:
        if (*((std::string **)v70 + 9) == v101
          && *((void *)v70 + 10) == v100
          && *((void *)v70 + 14) == v98
          && *((std::string **)v70 + 15) == v96
          && *((void *)v70 + 16) == v95
          && *((void *)v70 + 17) == v94)
        {
          std::string::operator=((std::string *)v70, &__str);
          std::string::operator=((std::string *)v70 + 1, &v103);
          std::string::operator=((std::string *)v70 + 2, &v104);
          *(_OWORD *)(v70 + 72) = v105;
          if (v70 != (std::string::pointer)&__str) {
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)(v70 + 88), v106[0], (long long *)v106[1], 0x8E38E38E38E38E39 * (((char *)v106[1] - (char *)v106[0]) >> 4));
          }
          long long v89 = *(_OWORD *)&v106[5];
          *((_OWORD *)v70 + 7) = *(_OWORD *)&v106[3];
          *((_OWORD *)v70 + 8) = v89;
          unint64_t v58 = v93;
          std::string::pointer v70 = v93[4].__r_.__value_.__l.__data_;
          break;
        }
LABEL_212:
        v70 += 144;
        if (v70 == v69)
        {
          std::string::pointer v70 = v69;
          unint64_t v58 = v93;
          break;
        }
      }
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v58[3].__r_.__value_.__r.__words[2], (void **)v70 - 18);
    unint64_t v118 = v106;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  }
  else
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a4, a2);
  }
}

void sub_1C8F14F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a25);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a49);
  if (*(char *)(v60 - 105) < 0) {
    operator delete(*(void **)(v60 - 128));
  }
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(a13);
  a49 = (void *)(v60 - 160);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

void *nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::PersonNameSplitHack(void *a1, _OWORD **a2, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **a3)
{
  uint64_t v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_PersonNameSplit");
  void v6[4] = 0;
  void v6[3] = "person_name_split";
  v6[5] = 0;
  v6[6] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v6 + 4, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getPersonMatchingSpans((uint64_t)a1, a3, a1 + 7);
  return a1;
}

void sub_1C8F15184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getPersonMatchingSpans(uint64_t a1@<X0>, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan(v5, (const sirinluinternal::MatchingSpan *)a2))std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5); {
    unint64_t v5 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v5 + 88);
    }
  }
  uint64_t v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    int v10 = 136315394;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu person matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C8F152C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::splitPersonNames(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v28 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
  uint64_t v4 = *((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 - 1;
      uint64_t v7 = *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(*(void *)(*(void *)&buf[8] + (((unint64_t)(v30 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                       + 8 * ((v30 + v6) & 0x1FF));
      *((void *)&v30 + 1) = v6;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
      BOOL isCommonPersonNode = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(v7, v8);
      uint64_t v11 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v7 + 11);
      int v10 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v7 + 12);
      while (v11 != v10)
      {
        uint64_t v28 = v11;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
        uint64_t v11 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v11 + 144);
      }
      v5 += isCommonPersonNode;
      uint64_t v4 = *((void *)&v30 + 1);
    }
    while (*((void *)&v30 + 1));
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
    if (v5 > 1)
    {
      __int16 v12 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *((void *)this + 3);
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] Splitting common_Person nodes in-place", buf, 0xCu);
      }
      uint64_t v14 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *((void *)this + 3);
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] Iterating through all tree nodes", buf, 0xCu);
      }
      long long v30 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v28 = a2;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
      uint64_t v16 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        LOBYTE(v17) = 0;
        do
        {
          uint64_t v18 = v16 - 1;
          long long v19 = *(const nlv4_inference_orchestrator::trees::TreeNode ***)(*(void *)(*(void *)&buf[8]
                                                                                    + (((unint64_t)(v30 + v18) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                        + 8 * ((v30 + v18) & 0x1FF));
          *((void *)&v30 + 1) = v18;
          std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
          BOOL v27 = 0;
          nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleTreeNode(this, v19, &v27);
          BOOL v17 = v17 || v27;
          std::string::size_type v21 = v19[11];
          long long v20 = v19[12];
          while (v21 != v20)
          {
            uint64_t v28 = v21;
            std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
            std::string::size_type v21 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v21 + 144);
          }
          uint64_t v16 = *((void *)&v30 + 1);
        }
        while (*((void *)&v30 + 1));
      }
      else
      {
        BOOL v17 = 0;
      }
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
      uint64_t v25 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *((void *)this + 3);
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_DEBUG, "[%s] Finished iterating through all tree nodes", buf, 0xCu);
      }
      return v17;
    }
  }
  else
  {
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
    unint64_t v5 = 0;
  }
  long long v22 = SNLPOSLoggerForCategory(1);
  BOOL result = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v24 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = 2;
    _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_DEBUG, "[%s] Since the model itself predicted only %lu common_Person nodes (lower than the threshold of %lu), do not apply the name split hack", buf, 0x20u);
    return 0;
  }
  return result;
}

void sub_1C8F15644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this, const nlv4_inference_orchestrator::trees::TreeNode **a2, BOOL *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (nlv4_inference_orchestrator::trees::TreeNode *)a2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 3);
  std::string::size_type v32 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v7 = a2[11];
  uint64_t v6 = (uint64_t *)(a2 + 11);
  if (v7 == a2[12])
  {
    uint64_t v9 = 0;
    char v25 = 0;
  }
  else
  {
    uint64_t v30 = v5;
    uint64_t v9 = 0;
    int v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(v7, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))
      {
        nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleCommonPersonSubtree(this, v7, v36);
        uint64_t v12 = *(void *)v36;
        uint64_t v13 = *(void *)&v36[8];
        uint64_t v14 = SNLPOSLoggerForCategory(1);
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        if (v12 == v13)
        {
          if (v15)
          {
            uint64_t v17 = *((void *)this + 3);
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v17;
            _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] Could not split this common_Person node", buf, 0xCu);
          }
          *(void *)std::string buf = v36;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        else
        {
          if (v15)
          {
            uint64_t v16 = *((void *)this + 3);
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v16;
            _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] Successfully spawned replacement common_Person nodes", buf, 0xCu);
          }
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(*(const nlv4_inference_orchestrator::trees::TreeNode **)v36, *(const nlv4_inference_orchestrator::trees::TreeNode **)&v36[8], (uint64_t *)&v32);
          *(void *)std::string buf = v36;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if ((unint64_t)v10 >= v11)
          {
            uint64_t v18 = v10 - v9;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v11 - (void)v9) >> 2 > v19) {
              unint64_t v19 = (uint64_t)(v11 - (void)v9) >> 2;
            }
            if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v20);
            }
            else {
              a2 = 0;
            }
            std::string::size_type v21 = (const nlv4_inference_orchestrator::trees::TreeNode **)(v20 + 8 * v18);
            *std::string::size_type v21 = v7;
            long long v22 = v21 + 1;
            while (v10 != v9)
            {
              uint64_t v23 = *--v10;
              *--std::string::size_type v21 = v23;
            }
            unint64_t v11 = v20 + 8 * (void)a2;
            if (v9) {
              operator delete(v9);
            }
            uint64_t v9 = v21;
            int v10 = v22;
          }
          else
          {
            *v10++ = v7;
          }
        }
      }
      uint64_t v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144);
    }
    while (v7 != *((const nlv4_inference_orchestrator::trees::TreeNode **)v4 + 12));
    if (v9 == v10)
    {
      char v25 = 0;
      uint64_t v5 = v30;
      uint64_t v3 = a3;
    }
    else
    {
      uint64_t v24 = SNLPOSLoggerForCategory(1);
      uint64_t v5 = v30;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v36 = 136315394;
        *(void *)&v36[4] = v30;
        *(_WORD *)&v36[12] = 2048;
        *(void *)&v36[14] = v10 - v9;
        _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "[%s] Deleting %lu nodes", v36, 0x16u);
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v10, (unint64_t *)v10, (uint64_t)v9, (unint64_t *)v9, 126 - 2 * __clz(v10 - v9), 1);
      uint64_t v26 = (uint64_t *)v9;
      do
      {
        uint64_t v27 = *v26++;
        uint64_t v28 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((long long *)(v27 + 144), *((long long **)v4 + 12), v27);
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)v6, v28);
      }
      while (v26 != (uint64_t *)v10);
      char v25 = 1;
      uint64_t v3 = a3;
    }
  }
  if (v32 != v33)
  {
    char v29 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v36 = 136315394;
      *(void *)&v36[4] = v5;
      *(_WORD *)&v36[12] = 2048;
      *(void *)&v36[14] = 0x8E38E38E38E38E39 * ((v33 - v32) >> 4);
      _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_DEBUG, "[%s] Inserting %lu spawned nodes", v36, 0x16u);
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve(v6, 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v4 + 12) - *((void *)v4 + 11)) >> 4)- 0x71C71C71C71C71C7 * ((v33 - v32) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(v32, v33, v6);
    char v25 = 1;
  }
  *(void *)uint64_t v36 = &v32;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  if (v9) {
    operator delete(v9);
  }
  *uint64_t v3 = v25;
}

void sub_1C8F15A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleCommonPersonSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, void *a3@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = SNLPOSLoggerForCategory(1);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] Handling common_Person subtree", buf, 0xCu);
  }
  uint64_t v10 = *((void *)a2 + 11);
  if (*((void *)a2 + 12) - v10 != 144)
  {
    std::string::size_type v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *((void *)this + 3);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
LABEL_23:
      _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
    }
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  uint64_t v11 = siri::ontology::oname::graph::ontology_init::Argument_name((siri::ontology::oname::graph::ontology_init *)v8);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 71);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(v10 + 71);
  }
  else {
    uint64_t v13 = *(void *)(v10 + 56);
  }
  uint64_t v14 = *(unsigned __int8 *)(v11 + 31);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(v11 + 16);
  }
  if (v13 != v14)
  {
LABEL_21:
    std::string::size_type v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *((void *)this + 3);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v24;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  uint64_t v16 = (const void **)(v10 + 48);
  unint64_t v19 = *(unsigned __int8 **)(v11 + 8);
  uint64_t v17 = (unsigned __int8 *)(v11 + 8);
  uint64_t v18 = v19;
  if (v15 >= 0) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v18;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v20, *(void *)(v10 + 56))) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(v10 + 71))
  {
    while (*(unsigned __int8 *)v16 == *v20)
    {
      uint64_t v16 = (const void **)((char *)v16 + 1);
      ++v20;
      if (!--v12) {
        goto LABEL_26;
      }
    }
    goto LABEL_21;
  }
LABEL_26:
  char v25 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *((void *)this + 3);
    uint64_t v27 = (void *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0) {
      uint64_t v27 = (void *)*v27;
    }
    *(_DWORD *)std::string buf = 136315395;
    *(void *)&uint8_t buf[4] = v26;
    __int16 v75 = 2085;
    uint64_t v76 = (uint64_t)v27;
    _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_DEBUG, "[%s] common_Person.name value: %{sensitive}s", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, *((char **)this + 3));
  uint64_t v28 = *((void *)this + 4);
  uint64_t v29 = *((void *)this + 5) - v28;
  if (!v29)
  {
LABEL_34:
    int v33 = 1;
    uint64_t v34 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = buf;
      if (v77 < 0) {
        uint64_t v35 = *(unsigned char **)buf;
      }
      uint64_t v36 = *(void *)(v10 + 72);
      *(_DWORD *)uint64_t v79 = 136315394;
      *(void *)&v79[4] = v35;
      *(_WORD *)&v79[12] = 2048;
      *(void *)&v79[14] = v36;
      uint64_t v37 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_46:
      _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_DEFAULT, v37, v79, 0x16u);
    }
LABEL_47:
    unint64_t v30 = 0;
    goto LABEL_48;
  }
  unint64_t v30 = 0;
  uint64_t v31 = v29 >> 4;
  std::string::size_type v32 = (uint64_t *)(v28 + 104);
  while (*(v32 - 1) != *(void *)(v10 + 72))
  {
    ++v30;
    v32 += 18;
    if (v30 >= 0x8E38E38E38E38E39 * v31) {
      goto LABEL_34;
    }
  }
  unint64_t v38 = 0x8E38E38E38E38E39 * v31;
  if (v30 >= v38)
  {
LABEL_42:
    int v33 = 1;
    uint64_t v34 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v40 = buf;
      if (v77 < 0) {
        std::string::size_type v40 = *(unsigned char **)buf;
      }
      uint64_t v41 = *(void *)(v10 + 80);
      *(_DWORD *)uint64_t v79 = 136315394;
      *(void *)&v79[4] = v40;
      *(_WORD *)&v79[12] = 2048;
      *(void *)&v79[14] = v41;
      uint64_t v37 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  unint64_t v3 = v30;
  while (1)
  {
    uint64_t v39 = *v32;
    v32 += 18;
    ++v3;
    if (v39 == *(void *)(v10 + 80)) {
      break;
    }
    if (v38 == v3) {
      goto LABEL_42;
    }
  }
  int v33 = 0;
LABEL_48:
  if (v77 < 0) {
    operator delete(*(void **)buf);
  }
  if (v33) {
    goto LABEL_24;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findPersonMatchingSpansMinimalPartition(this, v30, v3, (uint64_t)&v71);
  if (v73)
  {
    uint64_t v42 = v72 - v71;
    unint64_t v43 = SNLPOSLoggerForCategory(1);
    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG);
    if (v42 != 88)
    {
      if (v44)
      {
        if (!v73) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v50 = *((void *)this + 3);
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v75 = 2048;
        uint64_t v76 = 0x2E8BA2E8BA2E8BA3 * ((v72 - v71) >> 3);
        _os_log_impl(&dword_1C8DA9000, v43, OS_LOG_TYPE_DEBUG, "[%s] This common_Person has been partitioned into %lu sub-spans.", buf, 0x16u);
      }
      long long v69 = 0uLL;
      unint64_t v70 = 0;
      if (!v73) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v51 = v71;
      uint64_t v52 = v72;
      if (v71 == v72)
      {
        unint64_t v65 = 0;
        long long v64 = 0uLL;
LABEL_90:
        *(_OWORD *)a3 = v64;
        a3[2] = v65;
        unint64_t v70 = 0;
        long long v69 = 0uLL;
      }
      else
      {
        while (1)
        {
          int v53 = *((char *)a2 + 71);
          unint64_t v54 = v53 >= 0
              ? (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)a2 + 48)
              : (const nlv4_inference_orchestrator::trees::TreeNode *)*((void *)a2 + 6);
          uint64_t v55 = v53 >= 0 ? *((unsigned __int8 *)a2 + 71) : *((void *)a2 + 7);
          if (*(char *)(v10 + 47) < 0)
          {
            uint64_t v57 = *(void *)(v10 + 24);
            std::string::size_type v56 = *(void *)(v10 + 32);
          }
          else
          {
            std::string::size_type v56 = *(unsigned __int8 *)(v10 + 47);
            uint64_t v57 = v10 + 24;
          }
          nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::generateCommonPersonNode(this, v51, (uint64_t)v54, v55, v57, v56, *(void *)(v10 + 72), (uint64_t)buf);
          if (!v78) {
            break;
          }
          uint64_t v58 = *((void *)&v69 + 1);
          if (*((void *)&v69 + 1) >= v70)
          {
            unint64_t v60 = 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v69 + 1) - v69) >> 4);
            unint64_t v61 = v60 + 1;
            if (v60 + 1 > 0x1C71C71C71C71C7) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v70 - v69) >> 4) > v61) {
              unint64_t v61 = 0x1C71C71C71C71C72 * ((uint64_t)(v70 - v69) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v70 - v69) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v62 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v62 = v61;
            }
            uint64_t v81 = &v70;
            if (v62) {
              unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v62);
            }
            else {
              uint64_t v63 = 0;
            }
            *(void *)uint64_t v79 = v62;
            *(void *)&v79[8] = v62 + 144 * v60;
            *(void *)&v79[16] = *(void *)&v79[8];
            unint64_t v80 = v62 + 144 * v63;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)&v79[8], (const nlv4_inference_orchestrator::trees::TreeNode *)buf);
            *(void *)&v79[16] += 144;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)&v69, v79);
            uint64_t v59 = *((void *)&v69 + 1);
            std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v79);
          }
          else
          {
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*((std::string **)&v69 + 1), (const nlv4_inference_orchestrator::trees::TreeNode *)buf);
            uint64_t v59 = v58 + 144;
          }
          *((void *)&v69 + 1) = v59;
          std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          v51 += 88;
          if (v51 == v52)
          {
            long long v64 = v69;
            unint64_t v65 = v70;
            goto LABEL_90;
          }
        }
        uint64_t v66 = *(const char **)(v51 + 32);
        if (v66)
        {
          if (v66[23] < 0) {
            uint64_t v66 = *(const char **)v66;
          }
        }
        else
        {
          uint64_t v66 = "nullptr";
        }
        unint64_t v67 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v68 = *((void *)this + 3);
          *(_DWORD *)uint64_t v79 = 136315395;
          *(void *)&v79[4] = v68;
          *(_WORD *)&v79[12] = 2085;
          *(void *)&v79[14] = v66;
          _os_log_impl(&dword_1C8DA9000, v67, OS_LOG_TYPE_DEFAULT, "[%s] Warning: Failed to generate a node for matching span (input=%{sensitive}s)", v79, 0x16u);
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      }
      *(void *)std::string buf = &v69;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_99;
    }
    if (v44)
    {
      uint64_t v45 = *((void *)this + 3);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v45;
      unint64_t v46 = "[%s] This common_Person cannot be split into multiple sub-spans. Skipping.";
      uint64_t v47 = v43;
LABEL_57:
      _os_log_impl(&dword_1C8DA9000, v47, OS_LOG_TYPE_DEBUG, v46, buf, 0xCu);
    }
  }
  else
  {
    long long v48 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v49 = *((void *)this + 3);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v49;
      unint64_t v46 = "[%s] Could not find _any_ partition for this common_Person (including a single-span one). Skipping.";
      uint64_t v47 = v48;
      goto LABEL_57;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_99:
  if (v73)
  {
    *(void *)std::string buf = &v71;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_1C8F16260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  if (a16)
  {
    a17 = &a13;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findPersonMatchingSpansMinimalPartition(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  BOOL v8 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    __int16 v53 = 2048;
    unint64_t v54 = a3;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] Finding person matching span partitions for range %lu -> %lu", buf, 0x20u);
  }
  uint64_t v10 = *((void *)this + 7);
  for (uint64_t i = *((void *)this + 8); v10 != i; v10 += 88)
  {
    uint64_t v12 = *(const char **)(v10 + 32);
    if (v12)
    {
      if (v12[23] < 0) {
        uint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      uint64_t v12 = "nullptr";
    }
    uint64_t v13 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *((void *)this + 3);
      *(_DWORD *)std::string buf = 136315395;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2085;
      *(void *)&buf[14] = v12;
      _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "[%s]  - span: %{sensitive}s", buf, 0x16u);
    }
  }
  memset(v51, 0, 24);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions((uint64_t)this, (uint64_t *)v51, a2, a3, buf);
  uint64_t v50 = v51;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  int v15 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *((void *)this + 3);
    *(_DWORD *)uint64_t v51 = 136315394;
    *(void *)&v51[4] = v16;
    *(_WORD *)&v51[12] = 2048;
    *(void *)&v51[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] Found %lu possible person partitions:", v51, 0x16u);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v17 = *(uint64_t **)buf;
  uint64_t v18 = *(uint64_t **)&buf[8];
  if (*(void *)buf == *(void *)&buf[8]) {
    goto LABEL_61;
  }
  uint64_t v49 = this;
  do
  {
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v19 = *v17;
      uint64_t v20 = v17[1];
      unint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((v20 - *v17) >> 3);
      uint64_t v23 = *(void (****)(void))a4;
      uint64_t v22 = *(void (****)(void))(a4 + 8);
      BOOL v24 = v21 >= 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v22 - *(void *)a4) >> 3) || v17 == (uint64_t *)a4;
      if (!v24)
      {
        uint64_t v25 = *(void *)(a4 + 16);
        if (0x2E8BA2E8BA2E8BA3 * ((v25 - (uint64_t)v23) >> 3) >= v21)
        {
          if (v19 != v20)
          {
            do
            {
              sirinluinternal::MatchingSpan::operator=();
              v19 += 88;
              v23 += 11;
            }
            while (v19 != v20);
            uint64_t v22 = *(void (****)(void))(a4 + 8);
          }
          if (v22 != v23)
          {
            uint64_t v36 = v22 - 11;
            uint64_t v37 = v22 - 11;
            unint64_t v38 = v22 - 11;
            do
            {
              uint64_t v39 = *v38;
              v38 -= 11;
              (*v39)(v37);
              v36 -= 11;
              BOOL v24 = v37 == v23;
              uint64_t v37 = v38;
            }
            while (!v24);
          }
          *(void *)(a4 + 8) = v23;
          this = v49;
        }
        else
        {
          if (v23)
          {
            uint64_t v26 = *(void **)a4;
            if (v22 != v23)
            {
              uint64_t v27 = v22 - 11;
              uint64_t v28 = v22 - 11;
              uint64_t v29 = v22 - 11;
              do
              {
                unint64_t v30 = *v29;
                v29 -= 11;
                (*v30)(v28);
                v27 -= 11;
                BOOL v24 = v28 == v23;
                uint64_t v28 = v29;
              }
              while (!v24);
              uint64_t v26 = *(void **)a4;
              this = v49;
            }
            *(void *)(a4 + 8) = v23;
            operator delete(v26);
            uint64_t v25 = 0;
            *(void *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(void *)(a4 + 16) = 0;
          }
          if (v21 > 0x2E8BA2E8BA2E8BALL) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = 0x2E8BA2E8BA2E8BA3 * (v25 >> 3);
          uint64_t v32 = 2 * v31;
          if (2 * v31 <= v21) {
            uint64_t v32 = v21;
          }
          if (v31 >= 0x1745D1745D1745DLL) {
            unint64_t v33 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v33 = v32;
          }
          std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100]((void *)a4, v33);
          uint64_t v34 = *(void *)(a4 + 8);
          while (v19 != v20)
          {
            uint64_t v35 = MEMORY[0x1CB773E00](v34, v19);
            v19 += 88;
            uint64_t v34 = v35 + 88;
          }
          *(void *)(a4 + 8) = v34;
        }
      }
    }
    else
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>((void *)a4, *v17, v17[1], 0x2E8BA2E8BA2E8BA3 * ((v17[1] - *v17) >> 3));
      *(unsigned char *)(a4 + 24) = 1;
    }
    v17 += 3;
  }
  while (v17 != v18);
  if (!*(unsigned char *)(a4 + 24))
  {
LABEL_61:
    uint64_t v47 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = *((void *)this + 3);
      *(_DWORD *)uint64_t v51 = 136315138;
      *(void *)&v51[4] = v48;
      _os_log_impl(&dword_1C8DA9000, v47, OS_LOG_TYPE_DEBUG, "[%s] Did not find minimal partition", v51, 0xCu);
    }
  }
  else
  {
    std::string::size_type v40 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *((void *)this + 3);
      *(_DWORD *)uint64_t v51 = 136315138;
      *(void *)&v51[4] = v41;
      _os_log_impl(&dword_1C8DA9000, v40, OS_LOG_TYPE_DEBUG, "[%s] Found minimal partition:", v51, 0xCu);
    }
    if (!*(unsigned char *)(a4 + 24)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v42 = *(void *)a4;
    uint64_t v43 = *(void *)(a4 + 8);
    if (*(void *)a4 != v43)
    {
      do
      {
        BOOL v44 = *(const char **)(v42 + 32);
        if (v44)
        {
          if (v44[23] < 0) {
            BOOL v44 = *(const char **)v44;
          }
        }
        else
        {
          BOOL v44 = "nullptr";
        }
        uint64_t v45 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = *((void *)this + 3);
          *(_DWORD *)uint64_t v51 = 136315395;
          *(void *)&v51[4] = v46;
          *(_WORD *)&v51[12] = 2085;
          *(void *)&v51[14] = v44;
          _os_log_impl(&dword_1C8DA9000, v45, OS_LOG_TYPE_DEBUG, "[%s]  - component: %{sensitive}s", v51, 0x16u);
        }
        v42 += 88;
      }
      while (v42 != v43);
    }
  }
  *(void *)uint64_t v51 = buf;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
}

void sub_1C8F168C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (*(unsigned char *)(v19 + 24))
  {
    a15 = (void **)v19;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a15);
  }
  a15 = (void **)&a19;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::generateCommonPersonNode(siri::ontology::oname::graph::ontology_init *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string::size_type a6@<X5>, std::string::size_type a7@<X6>, uint64_t a8@<X8>)
{
  v65[8] = *MEMORY[0x1E4F143B8];
  unint64_t v10 = *(unsigned int *)(a2 + 76);
  uint64_t v11 = *((void *)a1 + 4);
  unint64_t v12 = 0x8E38E38E38E38E39 * ((*((void *)a1 + 5) - v11) >> 4);
  if (v12 <= v10 || (unint64_t v13 = (*(_DWORD *)(a2 + 72) - 1), v12 <= v13)) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  memset(&v62, 0, sizeof(v62));
  memset(v65, 0, 24);
  uint64_t v18 = siri::ontology::oname::graph::ontology_init::Argument_name(a1);
  std::string::operator=(&v62, (const std::string *)(v18 + 8));
  uint64_t v19 = (void *)(v11 + 144 * v10);
  std::string::size_type v20 = v19[12];
  std::string::size_type v63 = v20;
  v65[3] = v19[14];
  v65[5] = v19[16];
  unint64_t v21 = (void *)(v11 + 144 * v13);
  std::string::size_type v22 = v21[13];
  std::string::size_type v64 = v22;
  v65[4] = v21[15];
  v65[6] = v21[17];
  std::string::size_type v23 = v20 - a7;
  if (v20 < a7)
  {
    BOOL v24 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
LABEL_19:
      *(unsigned char *)a8 = 0;
      *(unsigned char *)(a8 + 144) = 0;
      goto LABEL_20;
    }
    std::string::size_type v25 = *((void *)a1 + 3);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v25;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = a7;
    uint64_t v26 = "[%s] newNameNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_18:
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_ERROR, v26, (uint8_t *)buf, 0x20u);
    goto LABEL_19;
  }
  BOOL v27 = v22 >= v20;
  std::string::size_type v28 = v22 - v20;
  if (v28 == 0 || !v27)
  {
    BOOL v24 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    std::string::size_type v32 = *((void *)a1 + 3);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v32;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = v64;
    uint64_t v26 = "[%s] newNameNode character indices imply an empty or impossible substring (%lu -> %lu)";
    goto LABEL_18;
  }
  if (a6 < v23) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  if (a6 - v23 >= v28) {
    std::string::size_type v29 = v28;
  }
  else {
    std::string::size_type v29 = a6 - v23;
  }
  if (v29 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 >= 0x17)
  {
    uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v33 = v29 | 7;
    }
    uint64_t v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v29;
    p_dst = &__dst;
    if (!v29) {
      goto LABEL_31;
    }
  }
  memmove(p_dst, (const void *)(a5 + v23), v29);
LABEL_31:
  p_dst->__r_.__value_.__s.__data_[v29] = 0;
  std::string::operator=((std::string *)((char *)&v60 + 8), &__dst);
  uint64_t v35 = SNLPOSLoggerForCategory(1);
  BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG);
  if (v36)
  {
    std::string::size_type v37 = *((void *)a1 + 3);
    if (v61 >= 0) {
      unint64_t v38 = (char *)&v60 + 8;
    }
    else {
      unint64_t v38 = (char *)*((void *)&v60 + 1);
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315907;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v37;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = v64;
    LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 2085;
    *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v38;
    _os_log_impl(&dword_1C8DA9000, v35, OS_LOG_TYPE_DEBUG, "[%s] Generated new common_Person.name node with startCharIndex=%lu, endCharIndex=%lu, value=%{sensitive}s", (uint8_t *)buf, 0x2Au);
  }
  uint64_t v56 = 0;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)uint64_t v52 = 0u;
  long long v55 = 0uLL;
  uint64_t v53 = 0;
  uint64_t v39 = siri::ontology::oname::graph::ontology_init::common_Person((siri::ontology::oname::graph::ontology_init *)v36);
  std::string::operator=(buf, (const std::string *)(v39 + 8));
  MEMORY[0x1CB7755C0](v52, a3, a4);
  long long v54 = 0uLL;
  long long v57 = 0u;
  long long v58 = 0u;
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v45, (const nlv4_inference_orchestrator::trees::TreeNode *)&v59);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v55, (nlv4_inference_orchestrator::trees::TreeNode *)&v45, (nlv4_inference_orchestrator::trees::TreeNode *)buf, 1uLL);
  BOOL v44 = (void **)&v50;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v44);
  if (v49 < 0) {
    operator delete(__p);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string::size_type v40 = buf[1].__r_.__value_.__r.__words[2];
  *(std::string *)a8 = buf[0];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
  *(void *)(a8 + 40) = v40;
  memset(&buf[0].__r_.__value_.__r.__words[2], 0, 32);
  *(void *)(a8 + 64) = v53;
  *(_OWORD *)(a8 + 48) = *(_OWORD *)v52;
  v52[1] = 0;
  uint64_t v53 = 0;
  v52[0] = 0;
  *(_OWORD *)(a8 + 72) = v54;
  *(_OWORD *)(a8 + 88) = v55;
  *(void *)(a8 + 104) = v56;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  long long v41 = v58;
  *(_OWORD *)(a8 + 112) = v57;
  *(_OWORD *)(a8 + 128) = v41;
  *(unsigned char *)(a8 + 144) = 1;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_20:
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(*((void **)&v60 + 1));
  }
  if (SBYTE7(v60) < 0) {
    operator delete((void *)v59);
  }
}

void sub_1C8F16E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a18);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a36);
  if (a16 < 0) {
    operator delete(__p);
  }
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v36 - 256));
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v6 != v5)
  {
    unint64_t v7 = a4;
    uint64_t v8 = a3;
    unint64_t v10 = a5 + 2;
    uint64_t v36 = *(void *)(a1 + 64);
    do
    {
      uint64_t v11 = *(unsigned int *)(v6 + 76);
      if (v11 == v8 && *(_DWORD *)(v6 + 72) == v7)
      {
        long long v40 = 0uLL;
        long long v41 = 0;
        std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(&v40, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100]((uint64_t *)&v40, v6);
        unint64_t v12 = (void *)a5[1];
        unint64_t v13 = a5[2];
        if ((unint64_t)v12 >= v13)
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *a5) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a5) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v16;
          }
          uint64_t v46 = v10;
          uint64_t v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v18);
          std::string::size_type v20 = &v19[3 * v15];
          uint64_t v42 = v19;
          uint64_t v43 = v20;
          std::string v45 = &v19[3 * v21];
          unsigned __int8 *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
          *(_OWORD *)std::string::size_type v20 = v40;
          v20[2] = v41;
          long long v40 = 0uLL;
          long long v41 = 0;
          BOOL v44 = v20 + 3;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
          uint64_t v14 = (void *)a5[1];
          std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          void *v12 = 0;
          v12[1] = 0;
          _OWORD v12[2] = 0;
          *(_OWORD *)unint64_t v12 = v40;
          _OWORD v12[2] = v41;
          long long v40 = 0uLL;
          long long v41 = 0;
          uint64_t v14 = v12 + 3;
          a5[1] = v12 + 3;
        }
        a5[1] = v14;
        uint64_t v42 = (void **)&v40;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v42);
        uint64_t v11 = *(unsigned int *)(v6 + 76);
        uint64_t v5 = v36;
      }
      if (v11 == v8 && *(unsigned int *)(v6 + 72) < v7)
      {
        long long v40 = 0uLL;
        long long v41 = 0;
        std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(&v40, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100]((uint64_t *)&v40, v6);
        nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions(&v38, a1, &v40, *(unsigned int *)(v6 + 72), v7);
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5[1] - *a5) >> 3);
        BOOL v24 = v38;
        std::string::size_type v23 = v39;
        unint64_t v25 = v22 - 0x5555555555555555 * (v39 - v38);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5[2] - *a5) >> 3) < v25)
        {
          if (v25 > 0xAAAAAAAAAAAAAAALL) {
LABEL_38:
          }
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          uint64_t v46 = v10;
          uint64_t v42 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v25);
          uint64_t v43 = &v42[3 * v22];
          BOOL v44 = v43;
          std::string v45 = &v42[3 * v26];
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
          std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
          BOOL v24 = v38;
          std::string::size_type v23 = v39;
        }
        if (v24 != v23)
        {
          BOOL v27 = (void *)a5[1];
          do
          {
            if ((unint64_t)v27 >= *v10)
            {
              unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *a5) >> 3);
              unint64_t v29 = v28 + 1;
              if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_38;
              }
              if (0x5555555555555556 * ((uint64_t)(*v10 - *a5) >> 3) > v29) {
                unint64_t v29 = 0x5555555555555556 * ((uint64_t)(*v10 - *a5) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a5) >> 3) >= 0x555555555555555) {
                unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v30 = v29;
              }
              uint64_t v46 = v10;
              if (v30) {
                unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v30);
              }
              else {
                uint64_t v31 = 0;
              }
              std::string::size_type v32 = (void **)(v30 + 24 * v28);
              uint64_t v42 = (void **)v30;
              uint64_t v43 = v32;
              BOOL v44 = v32;
              std::string v45 = (void **)(v30 + 24 * v31);
              uint64_t *v32 = 0;
              v32[1] = 0;
              std::string v32[2] = 0;
              std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v32, *v24, v24[1], 0x2E8BA2E8BA2E8BA3 * ((v24[1] - *v24) >> 3));
              v44 += 3;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
              BOOL v27 = (void *)a5[1];
              std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
            }
            else
            {
              *BOOL v27 = 0;
              v27[1] = 0;
              v27[2] = 0;
              std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v27, *v24, v24[1], 0x2E8BA2E8BA2E8BA3 * ((v24[1] - *v24) >> 3));
              v27 += 3;
              a5[1] = v27;
            }
            a5[1] = v27;
            v24 += 3;
          }
          while (v24 != v23);
        }
        uint64_t v42 = (void **)&v38;
        std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&v42);
        uint64_t v42 = (void **)&v40;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v42);
        uint64_t v8 = a3;
        unint64_t v7 = a4;
        uint64_t v5 = v36;
      }
      v6 += 88;
    }
    while (v6 != v5);
  }
}

void sub_1C8F172E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void ***a21)
{
  a21 = (void ***)&a14;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a14 = &a17;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL snlp::ssu::similarity::SSUBatchProvenance::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

BOOL snlp::ssu::similarity::SSUBatchProvenance::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

uint64_t snlp::ssu::similarity::SSUAppResult::operator>(const void **a1, const void **a2)
{
  float v2 = *((float *)a2 + 70);
  float v3 = *((float *)a1 + 70);
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  int v5 = *((char *)a1 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v9 = (size_t)a1[1];
  }
  if (v5 >= 0) {
    unint64_t v10 = a1;
  }
  else {
    unint64_t v10 = *a1;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  if (v12) {
    return v12 < 0;
  }
  else {
    return v7 < v9;
  }
}

uint64_t snlp::ssu::similarity::SSUSimilaritySearchApp::SSUSimilaritySearchApp(uint64_t a1, char a2, long long *a3, uint64_t a4)
{
  *(unsigned char *)a1 = a2;
  long long v5 = *a3;
  long long v6 = a3[1];
  *(void *)(a1 + 40) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(void *)(a1 + 64) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v9 = v7 - v8;
  if (v9)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
    if (v10 >= 0xF83E0F83E0F83FLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = operator new(88 * (v9 >> 4));
    *(void *)(a1 + 336) = v11;
    *(void *)(a1 + 344) = v11;
    int v12 = &v11[264 * v10];
    *(void *)(a1 + 352) = v12;
    do
    {
      *size_t v11 = 0;
      v11[256] = 0;
      v11 += 264;
    }
    while (v11 != v12);
    *(void *)(a1 + 344) = v12;
  }
  *(_DWORD *)(a1 + 360) = 0;
  return a1;
}

void sub_1C8F17648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](v9);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(uint64_t a1, long long *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  BOOL v6 = v4 == *a3;
  *(_DWORD *)(a1 + 360) += (unint64_t)(v4 - *a3) >> 2;
  if (!v6)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a1 + 72;
    int v12 = (long long *)(a4 + 24);
    uint64_t v13 = a4 + 96;
    do
    {
      float v14 = *(float *)(v5 + 4 * v10);
      if (!*(unsigned char *)(a1 + 328) || v14 > *(float *)(a1 + 288))
      {
        long long v16 = *a2;
        unint64_t v17 = v10;
        if (*(char *)(a4 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
        }
        else {
          std::string v18 = *(std::string *)a4;
        }
        std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](v19, v12);
        std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v20, v13);
        float v21 = v14;
        LOBYTE(__p) = 0;
        char v24 = 0;
        std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(v11, (uint64_t)&v16);
        if (v24 && v23 < 0) {
          operator delete(__p);
        }
        std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
        std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v19);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = *a3;
        uint64_t v4 = a3[1];
      }
      ++v10;
    }
    while (v10 < (v4 - v5) >> 2);
  }
}

void sub_1C8F177D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 256);
  uint64_t v5 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (long long *)(a2 + 24);
  if (v4)
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *v7;
    *(void *)(v6 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v6 = v8;
    *(unsigned char *)(a2 + 47) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(a1 + 48, (long long *)(a2 + 48));
    std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(a1 + 120, (long long *)(a2 + 120));
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 224, (__n128 *)(a2 + 224));
  }
  else
  {
    long long v9 = *v7;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v6 = v9;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)uint64_t v7 = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    if (*(unsigned char *)(a2 + 112))
    {
      long long v10 = *(_OWORD *)(a2 + 48);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v10;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 48) = 0;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 72, (uint64_t *)(a2 + 72));
      *(unsigned char *)(a1 + 112) = 1;
    }
    *(unsigned char *)(a1 + 120) = 0;
    *(unsigned char *)(a1 + 208) = 0;
    if (*(unsigned char *)(a2 + 208))
    {
      long long v11 = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v11;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 120) = 0;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 160) = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      *(void *)(a2 + 176) = 0;
      long long v12 = *(_OWORD *)(a2 + 184);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v12;
      *(void *)(a2 + 192) = 0;
      *(void *)(a2 + 200) = 0;
      *(void *)(a2 + 184) = 0;
      *(unsigned char *)(a1 + 208) = 1;
    }
    int v13 = *(_DWORD *)(a2 + 216);
    *(unsigned char *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 216) = v13;
    *(unsigned char *)(a1 + 248) = 0;
    if (*(unsigned char *)(a2 + 248))
    {
      long long v14 = *(_OWORD *)(a2 + 224);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = v14;
      *(void *)(a2 + 232) = 0;
      *(void *)(a2 + 240) = 0;
      *(void *)(a2 + 224) = 0;
      *(unsigned char *)(a1 + 248) = 1;
    }
    *(unsigned char *)(a1 + 256) = 1;
  }
  return a1;
}

void std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 24, (uint64_t *)a2 + 3);
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 24, (uint64_t *)a2 + 3);
    *(unsigned char *)(a1 + 64) = 1;
  }
}

__n128 std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      long long v5 = (void **)(a1 + 40);
      uint64_t v6 = *(void **)(a1 + 40);
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        long long v8 = v6;
        if ((void *)v7 != v6)
        {
          do
          {
            v7 -= 120;
            std::allocator<siri::ontology::UsoIdentifier>::destroy[abi:ne180100](v7);
          }
          while ((void *)v7 != v6);
          long long v8 = *v5;
        }
        *(void *)(a1 + 48) = v6;
        operator delete(v8);
        *long long v5 = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      long long v9 = (void **)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        operator delete(*v9);
      }
      __n128 result = (__n128)a2[4];
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(__n128 *)long long v9 = result;
      *((unsigned char *)a2 + 87) = 0;
      *((unsigned char *)a2 + 64) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v11 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v11;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    __n128 result = (__n128)a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(__n128 *)(a1 + 64) = result;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::processPositiveBatch(snlp::ssu::similarity::SSUSimilaritySearchApp *this, long long *a2, uint64_t a3, uint64_t *a4, snlp::ssu::candidate::SSUCandidate *a5)
{
  uint64_t v5 = *a4;
  unint64_t v6 = a4[1] - *a4;
  *((_DWORD *)this + 90) += v6 >> 2;
  if (v6)
  {
    unint64_t v11 = 0;
    unint64_t v17 = (char *)a5 + 96;
    std::string v18 = (long long *)((char *)a5 + 24);
    do
    {
      uint64_t v12 = *(void *)(a3 + 48);
      if (v11 >= (*(void *)(a3 + 56) - v12) >> 3) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v13 = *(void *)(v12 + 8 * v11);
      uint64_t v14 = *((void *)this + 42);
      if (0xF83E0F83E0F83E1 * ((*((void *)this + 43) - v14) >> 3) <= v13) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      float v15 = *(float *)(v5 + 4 * v11);
      uint64_t v16 = v14 + 264 * v13;
      if ((!*(unsigned char *)(v16 + 256) || v15 > *(float *)(v16 + 216))
        && snlp::ssu::similarity::SSUSimilaritySearchApp::isCandidateRelevantToIntent(this, a5, v13))
      {
        long long v20 = *a2;
        unint64_t v21 = v11;
        if (*((char *)a5 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *((void *)a5 + 1));
        }
        else {
          std::string v22 = *(std::string *)a5;
        }
        std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](v23, v18);
        std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v24, (uint64_t)v17);
        float v25 = v15;
        LOBYTE(__p) = 0;
        char v28 = 0;
        std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(v16, (uint64_t)&v20);
        if (v28 && v27 < 0) {
          operator delete(__p);
        }
        std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
        std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v23);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
      }
      ++v11;
      uint64_t v5 = *a4;
    }
    while (v11 < (a4[1] - *a4) >> 2);
  }
}

void sub_1C8F17DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::similarity::SSUSimilaritySearchApp::isCandidateRelevantToIntent(snlp::ssu::similarity::SSUSimilaritySearchApp *this, const snlp::ssu::candidate::SSUCandidate *a2, unint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 88)) {
    return 1;
  }
  snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex((snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48), a3, v8);
  if (v9)
  {
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&buf, v8[0].__r_.__value_.__l.__data_, v8[0].__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = v8[0];
    }
    if (!*((unsigned char *)a2 + 88)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    BOOL v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)a2 + 6, (unsigned __int8 *)&buf) != 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a3;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "Logic error: SSUCacheObjectIntentList::getIntentWithIndex returned std::nullopt for index %lu", (uint8_t *)&buf, 0xCu);
    }
    BOOL v5 = 0;
  }
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  return v5;
}

void sub_1C8F17F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::getSearchResult(snlp::ssu::similarity::SSUSimilaritySearchApp *this@<X0>, void *a2@<X8>)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  float HighestNegativeScoreClipped = snlp::ssu::similarity::SSUSimilaritySearchApp::getHighestNegativeScoreClipped(this);
  unint64_t v5 = 0;
  std::string v104 = 0;
  long long v105 = 0;
  unint64_t v106 = 0;
  unint64_t v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
  *(_OWORD *)long long v101 = 0u;
  long long v102 = 0u;
  float v103 = 1.0;
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 4))
  {
    snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(v6, v5, v99);
    if (v100)
    {
      if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v98, v99[0].__r_.__value_.__l.__data_, v99[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v98 = v99[0];
      }
      uint64_t v8 = *((void *)this + 42);
      if (0xF83E0F83E0F83E1 * ((*((void *)this + 43) - v8) >> 3) <= v5) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v9 = v8 + 264 * v5;
      int v10 = *(unsigned __int8 *)(v9 + 256);
      uint64_t v11 = SNLPOSLoggerForCategory(8);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      if (v10)
      {
        if (v12)
        {
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v13 = &v98;
          }
          else {
            unint64_t v13 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          float v14 = *(float *)(v9 + 216);
          snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString((_DWORD *)v9, &v107);
          int v15 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
          std::string::size_type v2 = v107.__r_.__value_.__r.__words[0];
          uint64_t v17 = *(void *)(v9 + 8);
          uint64_t v16 = *(void *)(v9 + 16);
          snlp::ssu::candidate::SSUCandidate::toString((uint64_t *)__p, (snlp::ssu::candidate::SSUCandidate *)(v9 + 24));
          if (v15 >= 0) {
            std::string v18 = &v107;
          }
          else {
            std::string v18 = (std::string *)v2;
          }
          uint64_t v19 = __p;
          if (v97 < 0) {
            uint64_t v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = v13;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v14;
          __int16 v123 = 2080;
          uint64_t v124 = v18;
          __int16 v125 = 2048;
          uint64_t v126 = v17;
          __int16 v127 = 2048;
          uint64_t v128 = v16;
          __int16 v129 = 2080;
          long long v130 = v19;
          _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Highest matching positive example for intent %s has score %f (batch type %s, batch index %lu, encoding index %lu). This is associated with candidate %s. Attempting to build app result.", buf, 0x3Eu);
          if (v97 < 0) {
            operator delete(__p[0]);
          }
          unint64_t v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
        }
        snlp::ssu::similarity::SSUSimilaritySearchApp::buildAppResult((uint64_t)this, (float *)v9, (uint64_t)&v98, (uint64_t)buf, HighestNegativeScoreClipped);
        if (v134)
        {
          long long v20 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v21 = &v98;
            }
            else {
              uint64_t v21 = (std::string *)v98.__r_.__value_.__r.__words[0];
            }
            if (!v134) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            float v22 = *(float *)(v9 + 216);
            float v23 = *(float *)&v133[42];
            snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString((_DWORD *)v9, __p);
            std::string::size_type v2 = v97;
            char v24 = (void **)__p[0];
            uint64_t v26 = *(void *)(v9 + 8);
            uint64_t v25 = *(void *)(v9 + 16);
            snlp::ssu::candidate::SSUCandidate::toString((uint64_t *)v94, (snlp::ssu::candidate::SSUCandidate *)(v9 + 24));
            char v27 = __p;
            if ((v2 & 0x80000000) != 0) {
              char v27 = v24;
            }
            LODWORD(v107.__r_.__value_.__l.__data_) = 136317442;
            char v28 = v94;
            if (v95 < 0) {
              char v28 = (void **)v94[0];
            }
            *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
            WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
            HIWORD(v107.__r_.__value_.__r.__words[2]) = 2080;
            std::string v108 = v21;
            *(_WORD *)unint64_t v109 = 2048;
            *(double *)&v109[2] = v22;
            __int16 v110 = 2048;
            double v111 = v23;
            __int16 v112 = 2048;
            double v113 = HighestNegativeScoreClipped;
            __int16 v114 = 2080;
            uint64_t v115 = v27;
            __int16 v116 = 2048;
            uint64_t v117 = v26;
            __int16 v118 = 2048;
            uint64_t v119 = v25;
            __int16 v120 = 2080;
            char v121 = v28;
            _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEBUG, "[%s] %sOutputting app result for intent %s with raw score=%f, calibrated score=%f, highestNegativeScoreClipped=%f (batch type %s, batch index %lu, encoding index %lu). This is associated with candidate %s.", (uint8_t *)&v107, 0x66u);
            if (v95 < 0) {
              operator delete(v94[0]);
            }
            unint64_t v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
            if (v97 < 0) {
              operator delete(__p[0]);
            }
          }
          if (!v134) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          unint64_t v29 = v105;
          if ((unint64_t)v105 >= v106)
          {
            unint64_t v32 = 0x8E38E38E38E38E39 * (((char *)v105 - (char *)v104) >> 5);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0xE38E38E38E38E3) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v106 - (void)v104) >> 5) > v33) {
              unint64_t v33 = 0x1C71C71C71C71C72 * ((uint64_t)(v106 - (void)v104) >> 5);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v106 - (void)v104) >> 5) >= 0x71C71C71C71C71) {
              unint64_t v34 = 0xE38E38E38E38E3;
            }
            else {
              unint64_t v34 = v33;
            }
            *(void *)unint64_t v109 = &v106;
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            v107.__r_.__value_.__r.__words[0] = v34;
            v107.__r_.__value_.__l.__size_ = v34 + 288 * v32;
            v107.__r_.__value_.__r.__words[2] = v107.__r_.__value_.__l.__size_;
            std::string v108 = (std::string *)(v34 + 288 * v35);
            std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>((std::string *)v107.__r_.__value_.__l.__size_, (long long *)buf);
            v107.__r_.__value_.__r.__words[2] += 288;
            std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer((uint64_t *)&v104, &v107);
            unint64_t v30 = v105;
            std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer((uint64_t)&v107);
          }
          else
          {
            std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>(v105, (long long *)buf);
            unint64_t v30 = v29 + 12;
          }
          long long v105 = v30;
          goto LABEL_136;
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v107, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        }
        else {
          std::string v107 = v98;
        }
        LODWORD(v108) = *(_DWORD *)(v9 + 216);
        unint64_t v36 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v102 + 8, (uint64_t)&v107);
        std::string::size_type v37 = v36;
        unint64_t v38 = (unint64_t)v101[1];
        if (v101[1])
        {
          uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]);
          v39.i16[0] = vaddlv_u8(v39);
          unint64_t v40 = v39.u32[0];
          if (v39.u32[0] > 1uLL)
          {
            std::string::size_type v2 = v36;
            if ((void *)v36 >= v101[1]) {
              std::string::size_type v2 = v36 % (unint64_t)v101[1];
            }
          }
          else
          {
            std::string::size_type v2 = ((unint64_t)v101[1] - 1) & v36;
          }
          long long v41 = (unsigned __int8 **)*((void *)v101[0] + v2);
          if (v41)
          {
            for (uint64_t i = *v41; i; uint64_t i = *(unsigned __int8 **)i)
            {
              unint64_t v43 = *((void *)i + 1);
              if (v43 == v37)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v103, i + 16, (unsigned __int8 *)&v107))goto LABEL_134; {
              }
                }
              else
              {
                if (v40 > 1)
                {
                  if (v43 >= v38) {
                    v43 %= v38;
                  }
                }
                else
                {
                  v43 &= v38 - 1;
                }
                if (v43 != v2) {
                  break;
                }
              }
            }
          }
        }
        BOOL v44 = (char *)operator new(0x30uLL);
        *(void *)BOOL v44 = 0;
        *((void *)v44 + 1) = v37;
        std::string v45 = (std::string *)(v44 + 16);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v45, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
          *((void *)v44 + 4) = *((void *)&v107.__r_.__value_.__l + 2);
        }
        *((_DWORD *)v44 + 10) = v108;
        float v46 = (float)(unint64_t)(*((void *)&v102 + 1) + 1);
        if (!v38 || (float)(v103 * (float)v38) < v46)
        {
          BOOL v47 = (v38 & (v38 - 1)) != 0;
          if (v38 < 3) {
            BOOL v47 = 1;
          }
          unint64_t v48 = v47 | (2 * v38);
          unint64_t v49 = vcvtps_u32_f32(v46 / v103);
          if (v48 <= v49) {
            int8x8_t prime = (int8x8_t)v49;
          }
          else {
            int8x8_t prime = (int8x8_t)v48;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          }
          unint64_t v38 = (unint64_t)v101[1];
          if ((void *)*(void *)&prime <= v101[1])
          {
            if ((void *)*(void *)&prime < v101[1])
            {
              unint64_t v57 = vcvtps_u32_f32((float)*((unint64_t *)&v102 + 1) / v103);
              if (v101[1] < (void *)3
                || (uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
              {
                unint64_t v57 = std::__next_prime(v57);
              }
              else
              {
                uint64_t v59 = 1 << -(char)__clz(v57 - 1);
                if (v57 >= 2) {
                  unint64_t v57 = v59;
                }
              }
              if (*(void *)&prime <= v57) {
                int8x8_t prime = (int8x8_t)v57;
              }
              if (*(void *)&prime >= v38)
              {
                unint64_t v38 = (unint64_t)v101[1];
              }
              else
              {
                if (prime) {
                  goto LABEL_90;
                }
                unint64_t v65 = v101[0];
                v101[0] = 0;
                if (v65) {
                  operator delete(v65);
                }
                unint64_t v38 = 0;
                v101[1] = 0;
              }
            }
          }
          else
          {
LABEL_90:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v51 = operator new(8 * *(void *)&prime);
            uint64_t v52 = v101[0];
            v101[0] = v51;
            if (v52) {
              operator delete(v52);
            }
            uint64_t v53 = 0;
            v101[1] = (void *)prime;
            do
              *((void *)v101[0] + v53++) = 0;
            while (*(void *)&prime != v53);
            long long v54 = (void **)v102;
            if ((void)v102)
            {
              unint64_t v55 = *(void *)(v102 + 8);
              uint8x8_t v56 = (uint8x8_t)vcnt_s8(prime);
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                if (v55 >= *(void *)&prime) {
                  v55 %= *(void *)&prime;
                }
              }
              else
              {
                v55 &= *(void *)&prime - 1;
              }
              *((void *)v101[0] + v55) = &v102;
              for (j = *v54; j; unint64_t v55 = v61)
              {
                unint64_t v61 = j[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(void *)&prime) {
                    v61 %= *(void *)&prime;
                  }
                }
                else
                {
                  v61 &= *(void *)&prime - 1;
                }
                if (v61 != v55)
                {
                  if (!*((void *)v101[0] + v61))
                  {
                    *((void *)v101[0] + v61) = v54;
                    goto LABEL_115;
                  }
                  *long long v54 = (void *)*j;
                  void *j = **((void **)v101[0] + v61);
                  **((void **)v101[0] + v61) = j;
                  unint64_t j = v54;
                }
                unint64_t v61 = v55;
LABEL_115:
                long long v54 = (void **)j;
                unint64_t j = (void *)*j;
              }
            }
            unint64_t v38 = (unint64_t)prime;
          }
          if ((v38 & (v38 - 1)) != 0)
          {
            if (v37 >= v38) {
              std::string::size_type v2 = v37 % v38;
            }
            else {
              std::string::size_type v2 = v37;
            }
          }
          else
          {
            std::string::size_type v2 = (v38 - 1) & v37;
          }
        }
        std::string v62 = v101[0];
        std::string::size_type v63 = (void *)*((void *)v101[0] + v2);
        if (v63)
        {
          *(void *)BOOL v44 = *v63;
          goto LABEL_132;
        }
        *(void *)BOOL v44 = v102;
        *(void *)&long long v102 = v44;
        v62[v2] = &v102;
        if (*(void *)v44)
        {
          unint64_t v64 = *(void *)(*(void *)v44 + 8);
          if ((v38 & (v38 - 1)) != 0)
          {
            if (v64 >= v38) {
              v64 %= v38;
            }
          }
          else
          {
            v64 &= v38 - 1;
          }
          std::string::size_type v63 = (char *)v101[0] + 8 * v64;
LABEL_132:
          *std::string::size_type v63 = v44;
        }
        ++*((void *)&v102 + 1);
LABEL_134:
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
LABEL_136:
        std::__optional_destruct_base<snlp::ssu::similarity::SSUAppResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      }
      else if (v12)
      {
        uint64_t v31 = &v98;
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v31 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "No positive match score found for intent %s. No app result will be returned.", buf, 0xCu);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      goto LABEL_139;
    }
    uint64_t v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "Logic error: SSUCacheObjectIntentList::getIntentWithIndex returned std::nullopt for index %lu", buf, 0xCu);
    }
LABEL_139:
    std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v99);
    ++v5;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  for (uint64_t k = (uint64_t **)v102; k; uint64_t k = (uint64_t **)*k)
  {
    unint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" - ", 3);
    int v68 = *((char *)k + 39);
    if (v68 >= 0) {
      uint64_t v69 = (uint64_t)(k + 2);
    }
    else {
      uint64_t v69 = (uint64_t)k[2];
    }
    if (v68 >= 0) {
      uint64_t v70 = *((unsigned __int8 *)k + 39);
    }
    else {
      uint64_t v70 = (uint64_t)k[3];
    }
    uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" (raw score=", 12);
    uint64_t v72 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)")\n", 2);
  }
  char v73 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    char v74 = (v99[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v99
        : (std::string *)v99[0].__r_.__value_.__r.__words[0];
    LODWORD(v107.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
    WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
    HIWORD(v107.__r_.__value_.__r.__words[2]) = 2080;
    std::string v108 = v74;
    _os_log_impl(&dword_1C8DA9000, v73, OS_LOG_TYPE_DEBUG, "[%s] %sThese intents were all below-threshold:\n%s", (uint8_t *)&v107, 0x20u);
    if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99[0].__r_.__value_.__l.__data_);
    }
  }
  snlp::ssu::similarity::SSUSimilaritySearchApp::sortAndTruncateResults((uint64_t)this, (uint64_t *)&v104);
  __int16 v75 = v104;
  for (m = v105; v75 != m; v75 += 12)
  {
    char v77 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v78 = (std::string::size_type)v75;
      if (SHIBYTE(v75->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v78 = v75->__r_.__value_.__r.__words[0];
      }
      snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString(&v75[1], v99);
      uint64_t v79 = v99;
      if ((v99[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v79 = (std::string *)v99[0].__r_.__value_.__r.__words[0];
      }
      std::string::size_type size = v75[1].__r_.__value_.__l.__size_;
      std::string::size_type v81 = v75[1].__r_.__value_.__r.__words[2];
      double v82 = *(float *)&v75[10].__r_.__value_.__l.__data_;
      double v83 = *(float *)&v75[11].__r_.__value_.__r.__words[2];
      LODWORD(v107.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = v78;
      WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v79;
      HIWORD(v107.__r_.__value_.__r.__words[2]) = 2048;
      std::string v108 = (std::string *)size;
      *(_WORD *)unint64_t v109 = 2048;
      *(void *)&v109[2] = v81;
      __int16 v110 = 2048;
      double v111 = v82;
      __int16 v112 = 2048;
      double v113 = v83;
      _os_log_impl(&dword_1C8DA9000, v77, OS_LOG_TYPE_DEBUG, "Returning app result for intent %s with batchType=%s, batchIndex=%lu, encodingIndexWithinBatch=%lu, similarityScore=%f, calibratedScore=%f", (uint8_t *)&v107, 0x3Eu);
      if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99[0].__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((unsigned char *)this + 328))
  {
    double v84 = *((float *)this + 72);
    char v85 = 1;
  }
  else
  {
    char v85 = 0;
    double v84 = 0.0;
  }
  uint64_t v86 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v87 = v104;
  uint64_t v88 = v105;
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v107.__r_.__value_.__s.__data_[8] = 0;
  if (v105 != v104)
  {
    unint64_t v89 = 0x8E38E38E38E38E39 * (((char *)v105 - (char *)v104) >> 5);
    if (v89 > 0xE38E38E38E38E3) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    BOOL v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v89);
    uint64_t v91 = 0;
    *a2 = v90;
    a2[1] = v90;
    a2[2] = &v90[288 * v92];
    do
    {
      std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>((std::string *)&v90[v91 * 24], (long long *)&v87[v91]);
      v91 += 12;
    }
    while (&v87[v91] != v88);
    uint64_t v86 = a2;
    a2[1] = &v90[v91 * 24];
  }
  *((_DWORD *)v86 + 6) = *((_DWORD *)this + 90);
  *((double *)v86 + 4) = v84;
  *((unsigned char *)v86 + 40) = v85;
  *(void *)std::string buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (v132 < 0) {
    operator delete(v131);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB775B50](v133);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v101);
  *(void *)std::string buf = &v104;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C8F18DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = (uint64_t)&a46;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

float snlp::ssu::similarity::SSUSimilaritySearchApp::getHighestNegativeScoreClipped(snlp::ssu::similarity::SSUSimilaritySearchApp *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 328))
  {
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)v21, (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 72));
    float v2 = v28;
    float v3 = fmaxf(*((float *)this + 10), v28);
    long long v4 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString(v21, __p);
      unint64_t v5 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 134219010;
      double v12 = v2;
      __int16 v13 = 2080;
      float v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = *(void *)&v22[4];
      __int16 v17 = 2048;
      uint64_t v18 = v23;
      __int16 v19 = 2048;
      double v20 = v3;
      _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Highest matching negative example has score %f (batch type %s, batch index %lu, encoding index %lu). Using max(negativeScoreClipMinimum, score) = %f.", buf, 0x34u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v31 && v30 < 0) {
      operator delete(v29);
    }
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v27);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
    if (v25 < 0) {
      operator delete(v24);
    }
  }
  else
  {
    float v3 = *((float *)this + 10);
    unint64_t v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      double v7 = *((float *)this + 10);
      *(_DWORD *)uint64_t v21 = 134217984;
      *(double *)float v22 = v7;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "There is no negative example. Using minimum score %f.", v21, 0xCu);
    }
  }
  return v3;
}

void sub_1C8F190C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  snlp::ssu::similarity::SSUMatchInfo::~SSUMatchInfo((void **)va);
  _Unwind_Resume(a1);
}

void *snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  __n128 result = std::string::basic_string[abi:ne180100]<0>(a2, "UNKNOWN");
  if (*a1 == 1)
  {
    unint64_t v5 = "GLOBAL";
  }
  else
  {
    if (*a1) {
      return result;
    }
    unint64_t v5 = "APP";
  }
  return (void *)MEMORY[0x1CB7755B0](a2, v5);
}

void sub_1C8F19144(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::buildAppResult(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  float v10 = a2[54];
  if (v10 <= *(float *)(a1 + 24))
  {
    float v12 = 1.0 / (expf(-(float)(*(float *)(a1 + 8) * (float)(v10 - a5))) + 1.0);
    uint64_t v11 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      double v16 = a2[54];
      double v17 = *(float *)(a1 + 8);
      LODWORD(v25.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v12;
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      double v26 = a5;
      __int16 v27 = 2048;
      double v28 = v17;
      __int16 v15 = "Computed calibrated score %f using match similarity score %f, highestNegativeScoreClipped %f and sigmoid param %f.";
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v11 = SNLPOSLoggerForCategory(8);
    float v12 = 1.0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      double v13 = a2[54];
      double v14 = *(float *)(a1 + 24);
      LODWORD(v25.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      double v26 = v13;
      __int16 v27 = 2048;
      double v28 = v14;
      __int16 v15 = "[%s] %sThe match similarity score (%f) is above the exact match threshold (%f). Setting calibratedScore=1.0.";
LABEL_6:
      _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v25, 0x2Au);
    }
  }
  if (*(unsigned char *)a1 && *(unsigned char *)(a1 + 20))
  {
    float v18 = *(float *)(a1 + 16);
    __int16 v19 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v25.__r_.__value_.__l.__data_) = 134217984;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v18;
      _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_DEBUG, "Using APP_SHORTCUT always-trigger threshold (%f) since app is in allowlist", (uint8_t *)&v25, 0xCu);
    }
    int v20 = 1;
  }
  else
  {
    int v20 = 0;
    float v18 = *(float *)(a1 + 12);
  }
  uint64_t v21 = SNLPOSLoggerForCategory(8);
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
  if (v12 <= v18)
  {
    if (v22)
    {
      *(double *)&char v24 = COERCE_DOUBLE("FALSE");
      LODWORD(v25.__r_.__value_.__l.__data_) = 134218498;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v12;
      if (v20) {
        *(double *)&char v24 = COERCE_DOUBLE("TRUE");
      }
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v18;
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2080;
      double v26 = *(double *)&v24;
      _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "Not emitting an app result since the match calibrated score (%f) is below the threshold (%f, useAppShortcutAlwaysTriggerThreshold=%s)", (uint8_t *)&v25, 0x20u);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 288) = 0;
  }
  else
  {
    if (v22)
    {
      uint64_t v23 = "FALSE";
      LODWORD(v25.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
      if (v20) {
        uint64_t v23 = "TRUE";
      }
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      double v26 = v12;
      __int16 v27 = 2048;
      double v28 = v18;
      __int16 v29 = 2080;
      v30[0] = v23;
      _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "[%s] %sEmitting an app result since the match calibrated score (%f) is above the threshold (%f, useAppShortcutAlwaysTriggerThreshold=%s)", (uint8_t *)&v25, 0x34u);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v25 = *(std::string *)a3;
    }
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&v26, (const snlp::ssu::similarity::SSUMatchInfo *)a2);
    float v37 = v12;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)a4, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)a4 = v25;
    }
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)(a4 + 24), (const snlp::ssu::similarity::SSUMatchInfo *)&v26);
    *(float *)(a4 + 280) = v37;
    *(unsigned char *)(a4 + 288) = 1;
    if (v36 && v35 < 0) {
      operator delete(__p);
    }
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v32);
    if (v31 < 0) {
      operator delete(*(void **)((char *)v30 + 4));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8F1957C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

float std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&this[1], (const snlp::ssu::similarity::SSUMatchInfo *)((char *)a2 + 24));
  float result = *((float *)a2 + 70);
  *(float *)&this[11].__r_.__value_.__r.__words[2] = result;
  return result;
}

void sub_1C8F19628(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::similarity::SSUAppResult,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 288))
  {
    if (*(unsigned char *)(a1 + 272) && *(char *)(a1 + 271) < 0) {
      operator delete(*(void **)(a1 + 248));
    }
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::sortAndTruncateResults(uint64_t a1, uint64_t *a2)
{
  long long v4 = (const void **)*a2;
  unint64_t v5 = (const void **)a2[1];
  uint64_t v6 = (uint64_t)v5 - *a2;
  unint64_t v7 = 0x8E38E38E38E38E39 * (v6 >> 5);
  if (v6 < 1)
  {
LABEL_5:
    float v12 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v9 = 0x8E38E38E38E38E39 * (v6 >> 5);
    while (1)
    {
      float v10 = operator new(288 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v11 = v9 > 1;
      v9 >>= 1;
      if (!v11) {
        goto LABEL_5;
      }
    }
    float v12 = v10;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v4, v5, (uint64_t)&v23, v7, (uint64_t)v12, v9);
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (0x8E38E38E38E38E39 * ((v15 - *a2) >> 5) > v13)
  {
    unint64_t v16 = v14 + 288 * v13;
    if (v15 != v16)
    {
      do
      {
        v15 -= 288;
        std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](v15);
      }
      while (v15 != v16);
      unint64_t v14 = *a2;
    }
    a2[1] = v16;
    int64x2_t v17 = *(int64x2_t *)(a2 + 1);
    int64x2_t v18 = vshrq_n_s64(vsubq_s64(v17, vdupq_n_s64(v14)), 5uLL);
    unint64_t v19 = 0x8E38E38E38E38E39 * v18.i64[0];
    unint64_t v20 = v19;
    if (0x8E38E38E38E38E39 * v18.i64[1] > v19)
    {
      __int16 v27 = a2 + 2;
      if (v17.i64[0] == v14)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v19);
      }
      uint64_t v23 = v21;
      char v24 = &v21[288 * v20];
      std::string v25 = v24;
      double v26 = &v21[288 * v22];
      std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer(a2, &v23);
      std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer((uint64_t)&v23);
    }
  }
}

void sub_1C8F19878(void *a1)
{
}

void sub_1C8F19888(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(unint64_t a1)
{
  if (a1 >= 0xE38E38E38E38E4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(288 * a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v6 = a2;
    if (a4 == 2)
    {
      if (snlp::ssu::similarity::SSUAppResult::operator>(a2 - 36, a1))
      {
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((uint64_t)a1, (long long *)v6 - 18);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v15 = a1 + 36;
        if (a1 + 36 != a2)
        {
          uint64_t v16 = 0;
          int64x2_t v17 = &v79;
          int64x2_t v18 = a1;
          do
          {
            unint64_t v19 = v15;
            if (snlp::ssu::similarity::SSUAppResult::operator>(v15, v18))
            {
              long long v20 = *(_OWORD *)v19;
              uint64_t v70 = v19[2];
              *(_OWORD *)uint64_t v69 = v20;
              v19[1] = 0;
              v19[2] = 0;
              NSObject *v19 = 0;
              long long v71 = *(_OWORD *)(v18 + 39);
              uint64_t v72 = v18[41];
              long long v73 = *((_OWORD *)v18 + 21);
              char v74 = v18[44];
              v18[42] = 0;
              v18[43] = 0;
              v18[44] = 0;
              LOBYTE(v75) = 0;
              char v78 = 0;
              if (*((unsigned char *)v18 + 424))
              {
                uint64_t v76 = v18[47];
                long long v75 = *(_OWORD *)(v18 + 45);
                v18[46] = 0;
                v18[47] = 0;
                v18[45] = 0;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)&v77, (uint64_t *)v18 + 48);
                char v78 = 1;
              }
              uint64_t v21 = v6;
              char v79 = 0;
              char v85 = 0;
              if (*((unsigned char *)v18 + 520))
              {
                *(_OWORD *)int64x2_t v17 = *((_OWORD *)v18 + 27);
                *((void *)v17 + 2) = v18[56];
                v18[55] = 0;
                v18[56] = 0;
                v18[54] = 0;
                long long v80 = *(_OWORD *)(v18 + 57);
                long long v81 = *(_OWORD *)(v18 + 59);
                double v82 = v18[61];
                v18[59] = 0;
                v18[60] = 0;
                v18[61] = 0;
                long long v22 = *((_OWORD *)v18 + 31);
                double v84 = v18[64];
                long long v83 = v22;
                v18[62] = 0;
                v18[63] = 0;
                v18[64] = 0;
                char v85 = 1;
              }
              uint64_t v23 = v17;
              int v86 = *((_DWORD *)v18 + 132);
              __p.n128_u8[0] = 0;
              char v89 = 0;
              if (*((unsigned char *)v18 + 560))
              {
                uint64_t v88 = v18[69];
                __n128 __p = *(__n128 *)(v18 + 67);
                v18[69] = 0;
                v18[67] = 0;
                v18[68] = 0;
                char v89 = 1;
              }
              int v90 = *((_DWORD *)v18 + 142);
              uint64_t v24 = v16;
              while (1)
              {
                std::string v25 = (char *)a1 + v24;
                double v26 = (void **)((char *)a1 + v24 + 288);
                if (*((char *)a1 + v24 + 311) < 0) {
                  operator delete(*v26);
                }
                *(_OWORD *)double v26 = *(_OWORD *)v25;
                *(const void **)((char *)a1 + v24 + 304) = (const void *)*((void *)v25 + 2);
                v25[23] = 0;
                *std::string v25 = 0;
                *(_OWORD *)(v25 + 312) = *(_OWORD *)(v25 + 24);
                *((void *)v25 + 41) = *((void *)v25 + 5);
                __int16 v27 = v25 + 336;
                if (v25[359] < 0) {
                  operator delete(*(void **)v27);
                }
                double v28 = v25 + 48;
                __int16 v29 = (char *)a1 + v24;
                *(_OWORD *)__int16 v27 = *(_OWORD *)v28;
                *((void *)v27 + 2) = *((void *)v28 + 2);
                *((unsigned char *)a1 + v24 + 71) = 0;
                char *v28 = 0;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>((uint64_t)a1 + v24 + 360, (long long *)((char *)a1 + v24 + 72));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>((uint64_t)(v29 + 432), (long long *)v29 + 9);
                *((_DWORD *)v29 + 132) = *((_DWORD *)v29 + 60);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v29 + 536), (__n128 *)(v29 + 248));
                *((_DWORD *)v29 + 142) = *((_DWORD *)v29 + 70);
                if (!v24) {
                  break;
                }
                v24 -= 288;
                if ((snlp::ssu::similarity::SSUAppResult::operator>((const void **)v69, (const void **)((char *)a1 + v24)) & 1) == 0)
                {
                  uint64_t v30 = (uint64_t)a1 + v24 + 288;
                  goto LABEL_31;
                }
              }
              uint64_t v30 = (uint64_t)a1;
LABEL_31:
              int64x2_t v17 = v23;
              uint64_t v6 = v21;
              if (*(char *)(v30 + 23) < 0) {
                operator delete(*(void **)v30);
              }
              long long v31 = *(_OWORD *)v69;
              *(void *)(v30 + 16) = v70;
              *(_OWORD *)uint64_t v30 = v31;
              HIBYTE(v70) = 0;
              LOBYTE(v69[0]) = 0;
              uint64_t v32 = v72;
              *(_OWORD *)(v30 + 24) = v71;
              *(void *)(v30 + 40) = v32;
              uint64_t v33 = (void **)(v30 + 48);
              if (*(char *)(v30 + 71) < 0) {
                operator delete(*v33);
              }
              long long v34 = v73;
              *(void *)(v30 + 64) = v74;
              *(_OWORD *)uint64_t v33 = v34;
              HIBYTE(v74) = 0;
              LOBYTE(v73) = 0;
              std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v30 + 72, &v75);
              std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v30 + 144, (long long *)v17);
              *(_DWORD *)(v30 + 240) = v86;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v30 + 248, &__p);
              *(_DWORD *)(v30 + 280) = v90;
              if (v89 && SHIBYTE(v88) < 0) {
                operator delete((void *)__p.n128_u64[0]);
              }
              std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
              std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v75);
              if (SHIBYTE(v74) < 0) {
                operator delete((void *)v73);
              }
              if (SHIBYTE(v70) < 0) {
                operator delete(v69[0]);
              }
            }
            uint64_t v15 = v19 + 36;
            v16 += 288;
            int64x2_t v18 = v19;
          }
          while (v19 + 36 != v6);
        }
      }
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      unint64_t v13 = &a1[36 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, &a1[36 * (a4 >> 1)], a3, a4 >> 1, a5);
        uint64_t v35 = a5 + 288 * v12;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(&a1[36 * (a4 >> 1)], v6, a3, a4 - v12, v35);
        v69[0] = (void *)a4;
        unint64_t v36 = a5 + 288 * a4;
        uint64_t v37 = (uint64_t)(a1 + 18);
        uint64_t v38 = v35;
        uint64_t v39 = a5;
        while (v38 != v36)
        {
          unint64_t v40 = (void **)(v37 - 144);
          int v41 = snlp::ssu::similarity::SSUAppResult::operator>((const void **)v38, (const void **)v39);
          int v42 = *(char *)(v37 - 121);
          if (v41)
          {
            if (v42 < 0) {
              operator delete(*v40);
            }
            long long v43 = *(_OWORD *)v38;
            *(void *)(v37 - 128) = *(void *)(v38 + 16);
            *(_OWORD *)unint64_t v40 = v43;
            *(unsigned char *)(v38 + 23) = 0;
            *(unsigned char *)uint64_t v38 = 0;
            uint64_t v44 = *(void *)(v38 + 40);
            *(_OWORD *)(v37 - 120) = *(_OWORD *)(v38 + 24);
            *(void *)(v37 - 104) = v44;
            std::string v45 = (void **)(v37 - 96);
            if (*(char *)(v37 - 73) < 0) {
              operator delete(*v45);
            }
            long long v46 = *(_OWORD *)(v38 + 48);
            *(void *)(v37 - 80) = *(void *)(v38 + 64);
            *(_OWORD *)std::string v45 = v46;
            *(unsigned char *)(v38 + 71) = 0;
            *(unsigned char *)(v38 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 - 72, (long long *)(v38 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37, (long long *)(v38 + 144));
            *(_DWORD *)(v37 + 96) = *(_DWORD *)(v38 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + 104, (__n128 *)(v38 + 248));
            *(_DWORD *)(v37 + 136) = *(_DWORD *)(v38 + 280);
            v38 += 288;
          }
          else
          {
            if (v42 < 0) {
              operator delete(*v40);
            }
            long long v47 = *(_OWORD *)v39;
            *(void *)(v37 - 128) = *(void *)(v39 + 16);
            *(_OWORD *)unint64_t v40 = v47;
            *(unsigned char *)(v39 + 23) = 0;
            *(unsigned char *)uint64_t v39 = 0;
            uint64_t v48 = *(void *)(v39 + 40);
            *(_OWORD *)(v37 - 120) = *(_OWORD *)(v39 + 24);
            *(void *)(v37 - 104) = v48;
            unint64_t v49 = (void **)(v37 - 96);
            if (*(char *)(v37 - 73) < 0) {
              operator delete(*v49);
            }
            long long v50 = *(_OWORD *)(v39 + 48);
            *(void *)(v37 - 80) = *(void *)(v39 + 64);
            *(_OWORD *)unint64_t v49 = v50;
            *(unsigned char *)(v39 + 71) = 0;
            *(unsigned char *)(v39 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 - 72, (long long *)(v39 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37, (long long *)(v39 + 144));
            *(_DWORD *)(v37 + 96) = *(_DWORD *)(v39 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + 104, (__n128 *)(v39 + 248));
            *(_DWORD *)(v37 + 136) = *(_DWORD *)(v39 + 280);
            v39 += 288;
          }
          v37 += 288;
          if (v39 == v35)
          {
            if (v38 != v36)
            {
              uint64_t v51 = 0;
              do
              {
                uint64_t v52 = v37 + v51;
                uint64_t v53 = (void **)(v37 + v51 - 144);
                if (*(char *)(v37 + v51 - 121) < 0) {
                  operator delete(*v53);
                }
                uint64_t v54 = v38 + v51;
                long long v55 = *(_OWORD *)(v38 + v51);
                *(void *)(v37 + v51 - 128) = *(void *)(v38 + v51 + 16);
                *(_OWORD *)uint64_t v53 = v55;
                *(unsigned char *)(v54 + 23) = 0;
                *(unsigned char *)uint64_t v54 = 0;
                uint64_t v56 = *(void *)(v38 + v51 + 40);
                *(_OWORD *)(v52 - 120) = *(_OWORD *)(v38 + v51 + 24);
                *(void *)(v52 - 104) = v56;
                if (*(char *)(v52 - 73) < 0) {
                  operator delete(*(void **)(v52 - 96));
                }
                uint64_t v57 = v52 - 96;
                long long v58 = *(_OWORD *)(v54 + 48);
                *(void *)(v57 + 16) = *(void *)(v54 + 64);
                *(_OWORD *)uint64_t v57 = v58;
                *(unsigned char *)(v54 + 71) = 0;
                *(unsigned char *)(v54 + 48) = 0;
                uint64_t v59 = v37 + v51;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 + v51 - 72, (long long *)(v54 + 72));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37 + v51, (long long *)(v54 + 144));
                *(_DWORD *)(v59 + 96) = *(_DWORD *)(v54 + 240);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + v51 + 104, (__n128 *)(v54 + 248));
                *(_DWORD *)(v59 + 136) = *(_DWORD *)(v54 + 280);
                v51 += 288;
              }
              while (v54 + 288 != v36);
            }
            goto LABEL_73;
          }
        }
        if (v39 != v35)
        {
          uint64_t v60 = 0;
          do
          {
            uint64_t v61 = v37 + v60;
            std::string v62 = (void **)(v37 + v60 - 144);
            if (*(char *)(v37 + v60 - 121) < 0) {
              operator delete(*v62);
            }
            uint64_t v63 = v39 + v60;
            long long v64 = *(_OWORD *)(v39 + v60);
            *(void *)(v37 + v60 - 128) = *(void *)(v39 + v60 + 16);
            *(_OWORD *)std::string v62 = v64;
            *(unsigned char *)(v63 + 23) = 0;
            *(unsigned char *)uint64_t v63 = 0;
            uint64_t v65 = *(void *)(v39 + v60 + 40);
            *(_OWORD *)(v61 - 120) = *(_OWORD *)(v39 + v60 + 24);
            *(void *)(v61 - 104) = v65;
            uint64_t v66 = (void **)(v61 - 96);
            if (*(char *)(v61 - 73) < 0) {
              operator delete(*v66);
            }
            long long v67 = *(_OWORD *)(v63 + 48);
            *(void *)(v61 - 80) = *(void *)(v63 + 64);
            *(_OWORD *)uint64_t v66 = v67;
            *(unsigned char *)(v63 + 71) = 0;
            *(unsigned char *)(v63 + 48) = 0;
            uint64_t v68 = v37 + v60;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 + v60 - 72, (long long *)(v63 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37 + v60, (long long *)(v63 + 144));
            *(_DWORD *)(v68 + 96) = *(_DWORD *)(v63 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + v60 + 104, (__n128 *)(v63 + 248));
            *(_DWORD *)(v68 + 136) = *(_DWORD *)(v63 + 280);
            v60 += 288;
          }
          while (v63 + 288 != v35);
        }
LABEL_73:
        if (a5) {
          std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((unint64_t *)v69, a5);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, &a1[36 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v13, v6, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v13, v6, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1C8F1A12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  if (v15) {
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(&a15, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  float v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v6 + v7 - 288;
      uint64_t v10 = v4 + v7;
      uint64_t v11 = v4 + v7 - 288;
      long long v12 = *(_OWORD *)v11;
      *(void *)(v9 + 16) = *(void *)(v4 + v7 - 272);
      *(_OWORD *)uint64_t v9 = v12;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      long long v13 = *(_OWORD *)(v4 + v7 - 264);
      *(void *)(v8 - 248) = *(void *)(v4 + v7 - 248);
      *(_OWORD *)(v6 + v7 - 264) = v13;
      long long v14 = *(_OWORD *)(v4 + v7 - 240);
      *(void *)(v8 - 224) = *(void *)(v4 + v7 - 224);
      *(_OWORD *)(v8 - 240) = v14;
      *(void *)(v10 - 232) = 0;
      *(void *)(v10 - 224) = 0;
      *(void *)(v10 - 240) = 0;
      *(unsigned char *)(v6 + v7 - 216) = 0;
      *(unsigned char *)(v8 - 152) = 0;
      if (*(unsigned char *)(v4 + v7 - 152))
      {
        long long v15 = *(_OWORD *)(v10 - 216);
        *(void *)(v6 + v7 - 200) = *(void *)(v10 - 200);
        *(_OWORD *)(v6 + v7 - 216) = v15;
        *(void *)(v10 - 208) = 0;
        *(void *)(v10 - 200) = 0;
        *(void *)(v10 - 216) = 0;
        float result = (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v8 - 192, (uint64_t *)(v10 - 192));
        *(unsigned char *)(v8 - 152) = 1;
      }
      *(unsigned char *)(v8 - 144) = 0;
      *(unsigned char *)(v8 - 56) = 0;
      if (*(unsigned char *)(v10 - 56))
      {
        uint64_t v16 = v4 + v7;
        long long v17 = *(_OWORD *)(v4 + v7 - 144);
        *(void *)(v8 - 128) = *(void *)(v4 + v7 - 128);
        *(_OWORD *)(v8 - 144) = v17;
        *(void *)(v16 - 136) = 0;
        *(void *)(v16 - 128) = 0;
        *(void *)(v16 - 144) = 0;
        uint64_t v18 = v6 + v7;
        *(_OWORD *)(v18 - 120) = *(_OWORD *)(v4 + v7 - 120);
        *(void *)(v18 - 96) = 0;
        *(void *)(v18 - 88) = 0;
        *(void *)(v18 - 104) = 0;
        *(_OWORD *)(v18 - 104) = *(_OWORD *)(v4 + v7 - 104);
        *(void *)(v18 - 88) = *(void *)(v4 + v7 - 88);
        *(void *)(v16 - 104) = 0;
        *(void *)(v16 - 96) = 0;
        *(void *)(v16 - 88) = 0;
        long long v19 = *(_OWORD *)(v4 + v7 - 80);
        *(void *)(v18 - 64) = *(void *)(v4 + v7 - 64);
        *(_OWORD *)(v18 - 80) = v19;
        *(void *)(v16 - 72) = 0;
        *(void *)(v16 - 64) = 0;
        *(void *)(v16 - 80) = 0;
        *(unsigned char *)(v8 - 56) = 1;
      }
      uint64_t v20 = v6 + v7;
      uint64_t v21 = v4 + v7;
      *(_DWORD *)(v20 - 48) = *(_DWORD *)(v4 + v7 - 48);
      *(unsigned char *)(v6 + v7 - 40) = 0;
      *(unsigned char *)(v20 - 16) = 0;
      if (*(unsigned char *)(v4 + v7 - 16))
      {
        long long v22 = *(_OWORD *)(v21 - 40);
        *(void *)(v6 + v7 - 24) = *(void *)(v21 - 24);
        *(_OWORD *)(v6 + v7 - 40) = v22;
        *(void *)(v21 - 32) = 0;
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 40) = 0;
        *(unsigned char *)(v20 - 16) = 1;
      }
      *(_DWORD *)(v20 - 8) = *(_DWORD *)(v21 - 8);
      v7 -= 288;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v23 = *v3;
  *float v3 = v6;
  a2[1] = v23;
  uint64_t v24 = v3[1];
  v3[1] = a2[2];
  a2[2] = v24;
  uint64_t v25 = v3[2];
  v3[2] = a2[3];
  a2[3] = v25;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 288;
    std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](i - 288);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(uint64_t a1, long long *a2)
{
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 40);
  *(_OWORD *)long long v14 = *(_OWORD *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  LOBYTE(v16) = 0;
  char v19 = 0;
  if (*(unsigned char *)(a1 + 136))
  {
    long long v16 = *(_OWORD *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 72) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)&v18, (uint64_t *)(a1 + 96));
    char v19 = 1;
  }
  LOBYTE(v20) = 0;
  char v27 = 0;
  if (*(unsigned char *)(a1 + 232))
  {
    long long v20 = *(_OWORD *)(a1 + 144);
    uint64_t v21 = *(void *)(a1 + 160);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = 0;
    long long v22 = *(_OWORD *)(a1 + 168);
    long long v23 = *(_OWORD *)(a1 + 184);
    uint64_t v24 = *(void *)(a1 + 200);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    long long v4 = *(_OWORD *)(a1 + 208);
    uint64_t v26 = *(void *)(a1 + 224);
    long long v25 = v4;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    char v27 = 1;
  }
  int v28 = *(_DWORD *)(a1 + 240);
  __p.n128_u8[0] = 0;
  char v31 = 0;
  if (*(unsigned char *)(a1 + 272))
  {
    __n128 __p = *(__n128 *)(a1 + 248);
    uint64_t v30 = *(void *)(a1 + 264);
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 248) = 0;
    char v31 = 1;
  }
  int v32 = *(_DWORD *)(a1 + 280);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  uint64_t v5 = (void **)(a1 + 48);
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v7 = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = (void **)(a2 + 3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v5);
  }
  long long v9 = *(_OWORD *)v8;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v5 = v9;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(a1 + 72, (long long *)((char *)a2 + 72));
  std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(a1 + 144, a2 + 9);
  *(_DWORD *)(a1 + 240) = *((_DWORD *)a2 + 60);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 248, (__n128 *)((char *)a2 + 248));
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)v10;
  *((void *)a2 + 2) = v11;
  *(long long *)((char *)a2 + 24) = v12;
  *((void *)a2 + 5) = v13;
  if (*((char *)a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v14;
  *((void *)a2 + 8) = v15;
  std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>((uint64_t)a2 + 72, &v16);
  std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>((uint64_t)(a2 + 9), &v20);
  *((_DWORD *)a2 + 60) = v28;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a2 + 248, &__p);
  *((_DWORD *)a2 + 70) = v32;
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      char v19 = a2 - 36;
      int v20 = snlp::ssu::similarity::SSUAppResult::operator>(a2 - 36, a1);
      uint64_t v21 = (_OWORD *)(a5 + 24);
      long long v22 = (_OWORD *)(a5 + 48);
      long long v23 = (_OWORD *)(a5 + 72);
      if (v20)
      {
        long long v24 = *(_OWORD *)v19;
        *(void *)(a5 + 16) = *(a2 - 34);
        *(_OWORD *)a5 = v24;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        NSObject *v19 = 0;
        long long v25 = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 40) = *(a2 - 31);
        *uint64_t v21 = v25;
        long long v26 = *((_OWORD *)a2 - 15);
        *(void *)(a5 + 64) = *(a2 - 28);
        *long long v22 = v26;
        *(a2 - 29) = 0;
        *(a2 - 28) = 0;
        *(a2 - 30) = 0;
        *(unsigned char *)(a5 + 72) = 0;
        *(unsigned char *)(a5 + 136) = 0;
        if (*((unsigned char *)a2 - 152))
        {
          long long v27 = *(_OWORD *)(a2 - 27);
          *(void *)(a5 + 88) = *(a2 - 25);
          *long long v23 = v27;
          *(a2 - 26) = 0;
          *(a2 - 25) = 0;
          *(a2 - 27) = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a2 - 24);
          *(unsigned char *)(a5 + 136) = 1;
        }
        *(unsigned char *)(a5 + 144) = 0;
        *(unsigned char *)(a5 + 232) = 0;
        if (*((unsigned char *)a2 - 56))
        {
          long long v28 = *((_OWORD *)a2 - 9);
          *(void *)(a5 + 160) = *(a2 - 16);
          *(_OWORD *)(a5 + 144) = v28;
          *(a2 - 17) = 0;
          *(a2 - 16) = 0;
          *(a2 - 18) = 0;
          *(_OWORD *)(a5 + 168) = *(_OWORD *)(a2 - 15);
          *(void *)(a5 + 192) = 0;
          *(void *)(a5 + 200) = 0;
          *(void *)(a5 + 184) = 0;
          *(_OWORD *)(a5 + 184) = *(_OWORD *)(a2 - 13);
          *(void *)(a5 + 200) = *(a2 - 11);
          *(a2 - 13) = 0;
          *(a2 - 12) = 0;
          *(a2 - 11) = 0;
          long long v29 = *((_OWORD *)a2 - 5);
          *(void *)(a5 + 224) = *(a2 - 8);
          *(_OWORD *)(a5 + 208) = v29;
          *(a2 - 9) = 0;
          *(a2 - 8) = 0;
          *(a2 - 10) = 0;
          *(unsigned char *)(a5 + 232) = 1;
        }
        int v30 = *((_DWORD *)a2 - 12);
        *(unsigned char *)(a5 + 248) = 0;
        *(_DWORD *)(a5 + 240) = v30;
        *(unsigned char *)(a5 + 272) = 0;
        if (*((unsigned char *)a2 - 16))
        {
          long long v31 = *(_OWORD *)(a2 - 5);
          *(void *)(a5 + 264) = *(a2 - 3);
          *(_OWORD *)(a5 + 248) = v31;
          *(a2 - 4) = 0;
          *(a2 - 3) = 0;
          *(a2 - 5) = 0;
          *(unsigned char *)(a5 + 272) = 1;
        }
        *(_DWORD *)(a5 + 280) = *((_DWORD *)a2 - 2);
        long long v32 = *(_OWORD *)v8;
        *(void *)(a5 + 304) = v8[2];
        *(_OWORD *)(a5 + 288) = v32;
        v8[1] = 0;
        std::string v8[2] = 0;
        const std::nothrow_t *v8 = 0;
        long long v33 = *(_OWORD *)(v8 + 3);
        *(void *)(a5 + 328) = v8[5];
        *(_OWORD *)(a5 + 312) = v33;
        long long v34 = *((_OWORD *)v8 + 3);
        *(void *)(a5 + 352) = v8[8];
        *(_OWORD *)(a5 + 336) = v34;
        v8[7] = 0;
        unsigned char v8[8] = 0;
        v8[6] = 0;
        *(unsigned char *)(a5 + 360) = 0;
        *(unsigned char *)(a5 + 424) = 0;
        if (*((unsigned char *)v8 + 136))
        {
          long long v35 = *(_OWORD *)(v8 + 9);
          *(void *)(a5 + 376) = v8[11];
          *(_OWORD *)(a5 + 360) = v35;
          int v8[10] = 0;
          v8[11] = 0;
          v8[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 384, (uint64_t *)v8 + 12);
          *(unsigned char *)(a5 + 424) = 1;
        }
        *(unsigned char *)(a5 + 432) = 0;
        *(unsigned char *)(a5 + 520) = 0;
        if (*((unsigned char *)v8 + 232))
        {
          long long v36 = *((_OWORD *)v8 + 9);
          *(void *)(a5 + 448) = v8[20];
          *(_OWORD *)(a5 + 432) = v36;
          v8[19] = 0;
          void v8[20] = 0;
          v8[18] = 0;
          *(_OWORD *)(a5 + 456) = *(_OWORD *)(v8 + 21);
          *(void *)(a5 + 480) = 0;
          *(void *)(a5 + 488) = 0;
          *(void *)(a5 + 472) = 0;
          *(_OWORD *)(a5 + 472) = *(_OWORD *)(v8 + 23);
          *(void *)(a5 + 488) = v8[25];
          v8[23] = 0;
          v8[24] = 0;
          v8[25] = 0;
          long long v37 = *((_OWORD *)v8 + 13);
          *(void *)(a5 + 512) = v8[28];
          *(_OWORD *)(a5 + 496) = v37;
          v8[27] = 0;
          v8[28] = 0;
          v8[26] = 0;
          *(unsigned char *)(a5 + 520) = 1;
        }
        *(_DWORD *)(a5 + 528) = *((_DWORD *)v8 + 60);
        *(unsigned char *)(a5 + 536) = 0;
        *(unsigned char *)(a5 + 560) = 0;
        if (*((unsigned char *)v8 + 272))
        {
          long long v38 = *(_OWORD *)(v8 + 31);
          *(void *)(a5 + 552) = v8[33];
          *(_OWORD *)(a5 + 536) = v38;
          v8[32] = 0;
          v8[33] = 0;
          v8[31] = 0;
          *(unsigned char *)(a5 + 560) = 1;
        }
        uint64_t v18 = (float *)(v8 + 35);
      }
      else
      {
        long long v74 = *(_OWORD *)v8;
        *(void *)(a5 + 16) = v8[2];
        *(_OWORD *)a5 = v74;
        v8[1] = 0;
        std::string v8[2] = 0;
        const std::nothrow_t *v8 = 0;
        long long v75 = *(_OWORD *)(v8 + 3);
        *(void *)(a5 + 40) = v8[5];
        *uint64_t v21 = v75;
        long long v76 = *((_OWORD *)v8 + 3);
        *(void *)(a5 + 64) = v8[8];
        *long long v22 = v76;
        v8[7] = 0;
        unsigned char v8[8] = 0;
        v8[6] = 0;
        *(unsigned char *)(a5 + 72) = 0;
        *(unsigned char *)(a5 + 136) = 0;
        if (*((unsigned char *)v8 + 136))
        {
          long long v77 = *(_OWORD *)(v8 + 9);
          *(void *)(a5 + 88) = v8[11];
          *long long v23 = v77;
          int v8[10] = 0;
          v8[11] = 0;
          v8[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)v8 + 12);
          *(unsigned char *)(a5 + 136) = 1;
        }
        *(unsigned char *)(a5 + 144) = 0;
        *(unsigned char *)(a5 + 232) = 0;
        if (*((unsigned char *)v8 + 232))
        {
          long long v78 = *((_OWORD *)v8 + 9);
          *(void *)(a5 + 160) = v8[20];
          *(_OWORD *)(a5 + 144) = v78;
          v8[19] = 0;
          void v8[20] = 0;
          v8[18] = 0;
          *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
          *(void *)(a5 + 192) = 0;
          *(void *)(a5 + 200) = 0;
          *(void *)(a5 + 184) = 0;
          *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
          *(void *)(a5 + 200) = v8[25];
          v8[23] = 0;
          v8[24] = 0;
          v8[25] = 0;
          long long v79 = *((_OWORD *)v8 + 13);
          *(void *)(a5 + 224) = v8[28];
          *(_OWORD *)(a5 + 208) = v79;
          v8[27] = 0;
          v8[28] = 0;
          v8[26] = 0;
          *(unsigned char *)(a5 + 232) = 1;
        }
        int v80 = *((_DWORD *)v8 + 60);
        *(unsigned char *)(a5 + 248) = 0;
        *(_DWORD *)(a5 + 240) = v80;
        *(unsigned char *)(a5 + 272) = 0;
        if (*((unsigned char *)v8 + 272))
        {
          long long v81 = *(_OWORD *)(v8 + 31);
          *(void *)(a5 + 264) = v8[33];
          *(_OWORD *)(a5 + 248) = v81;
          v8[32] = 0;
          v8[33] = 0;
          v8[31] = 0;
          *(unsigned char *)(a5 + 272) = 1;
        }
        *(_DWORD *)(a5 + 280) = *((_DWORD *)v8 + 70);
        long long v82 = *(_OWORD *)v19;
        *(void *)(a5 + 304) = *(a2 - 34);
        *(_OWORD *)(a5 + 288) = v82;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        NSObject *v19 = 0;
        long long v83 = *(_OWORD *)(a2 - 33);
        *(void *)(a5 + 328) = *(a2 - 31);
        *(_OWORD *)(a5 + 312) = v83;
        long long v84 = *((_OWORD *)a2 - 15);
        *(void *)(a5 + 352) = *(a2 - 28);
        *(_OWORD *)(a5 + 336) = v84;
        *(a2 - 29) = 0;
        *(a2 - 28) = 0;
        *(a2 - 30) = 0;
        *(unsigned char *)(a5 + 360) = 0;
        *(unsigned char *)(a5 + 424) = 0;
        if (*((unsigned char *)a2 - 152))
        {
          long long v85 = *(_OWORD *)(a2 - 27);
          *(void *)(a5 + 376) = *(a2 - 25);
          *(_OWORD *)(a5 + 360) = v85;
          *(a2 - 26) = 0;
          *(a2 - 25) = 0;
          *(a2 - 27) = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 384, (uint64_t *)a2 - 24);
          *(unsigned char *)(a5 + 424) = 1;
        }
        *(unsigned char *)(a5 + 432) = 0;
        *(unsigned char *)(a5 + 520) = 0;
        if (*((unsigned char *)a2 - 56))
        {
          long long v86 = *((_OWORD *)a2 - 9);
          *(void *)(a5 + 448) = *(a2 - 16);
          *(_OWORD *)(a5 + 432) = v86;
          *(a2 - 17) = 0;
          *(a2 - 16) = 0;
          *(a2 - 18) = 0;
          *(_OWORD *)(a5 + 456) = *(_OWORD *)(a2 - 15);
          *(void *)(a5 + 480) = 0;
          *(void *)(a5 + 488) = 0;
          *(void *)(a5 + 472) = 0;
          *(_OWORD *)(a5 + 472) = *(_OWORD *)(a2 - 13);
          *(void *)(a5 + 488) = *(a2 - 11);
          *(a2 - 13) = 0;
          *(a2 - 12) = 0;
          *(a2 - 11) = 0;
          long long v87 = *((_OWORD *)a2 - 5);
          *(void *)(a5 + 512) = *(a2 - 8);
          *(_OWORD *)(a5 + 496) = v87;
          *(a2 - 9) = 0;
          *(a2 - 8) = 0;
          *(a2 - 10) = 0;
          *(unsigned char *)(a5 + 520) = 1;
        }
        *(_DWORD *)(a5 + 528) = *((_DWORD *)a2 - 12);
        *(unsigned char *)(a5 + 536) = 0;
        *(unsigned char *)(a5 + 560) = 0;
        if (*((unsigned char *)a2 - 16))
        {
          long long v88 = *(_OWORD *)(a2 - 5);
          *(void *)(a5 + 552) = *(a2 - 3);
          *(_OWORD *)(a5 + 536) = v88;
          *(a2 - 4) = 0;
          *(a2 - 3) = 0;
          *(a2 - 5) = 0;
          *(unsigned char *)(a5 + 560) = 1;
        }
        uint64_t v18 = (float *)(a2 - 1);
      }
      uint64_t v17 = (_DWORD *)(a5 + 568);
      goto LABEL_79;
    }
    if (a4 == 1)
    {
      long long v9 = *(_OWORD *)a1;
      *(void *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v9;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      long long v10 = *(_OWORD *)(a1 + 3);
      *(void *)(a5 + 40) = a1[5];
      *(_OWORD *)(a5 + 24) = v10;
      long long v11 = *((_OWORD *)a1 + 3);
      *(void *)(a5 + 64) = a1[8];
      *(_OWORD *)(a5 + 48) = v11;
      a1[7] = 0;
      a1[8] = 0;
      a1[6] = 0;
      *(unsigned char *)(a5 + 72) = 0;
      *(unsigned char *)(a5 + 136) = 0;
      if (*((unsigned char *)a1 + 136))
      {
        long long v12 = *(_OWORD *)(a1 + 9);
        *(void *)(a5 + 88) = a1[11];
        *(_OWORD *)(a5 + 72) = v12;
        a1[10] = 0;
        a1[11] = 0;
        a1[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a1 + 12);
        *(unsigned char *)(a5 + 136) = 1;
      }
      *(unsigned char *)(a5 + 144) = 0;
      *(unsigned char *)(a5 + 232) = 0;
      if (*((unsigned char *)v8 + 232))
      {
        long long v13 = *((_OWORD *)v8 + 9);
        *(void *)(a5 + 160) = v8[20];
        *(_OWORD *)(a5 + 144) = v13;
        v8[19] = 0;
        void v8[20] = 0;
        v8[18] = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
        *(void *)(a5 + 192) = 0;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 184) = 0;
        *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
        *(void *)(a5 + 200) = v8[25];
        v8[23] = 0;
        v8[24] = 0;
        v8[25] = 0;
        long long v14 = *((_OWORD *)v8 + 13);
        *(void *)(a5 + 224) = v8[28];
        *(_OWORD *)(a5 + 208) = v14;
        v8[27] = 0;
        v8[28] = 0;
        v8[26] = 0;
        *(unsigned char *)(a5 + 232) = 1;
      }
      int v15 = *((_DWORD *)v8 + 60);
      *(unsigned char *)(a5 + 248) = 0;
      *(_DWORD *)(a5 + 240) = v15;
      *(unsigned char *)(a5 + 272) = 0;
      if (*((unsigned char *)v8 + 272))
      {
        long long v16 = *(_OWORD *)(v8 + 31);
        *(void *)(a5 + 264) = v8[33];
        *(_OWORD *)(a5 + 248) = v16;
        v8[32] = 0;
        v8[33] = 0;
        v8[31] = 0;
        *(unsigned char *)(a5 + 272) = 1;
      }
      uint64_t v17 = (_DWORD *)(a5 + 280);
      uint64_t v18 = (float *)(v8 + 35);
LABEL_79:
      float result = *v18;
      _DWORD *v17 = *(_DWORD *)v18;
      return result;
    }
    if ((uint64_t)a4 > 8)
    {
      int v90 = &a1[36 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v90, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(&v8[36 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 288 * (a4 >> 1), a4 - (a4 >> 1));
      uint64_t v91 = a5 + 144;
      uint64_t v92 = v90;
      while (v92 != a2)
      {
        long long v93 = (_OWORD *)(v91 - 144);
        int v94 = snlp::ssu::similarity::SSUAppResult::operator>(v92, v8);
        char v95 = (_OWORD *)(v91 - 120);
        unint64_t v96 = (_OWORD *)(v91 - 96);
        char v97 = (_OWORD *)(v91 - 72);
        if (v94)
        {
          long long v98 = *(_OWORD *)v92;
          *(void *)(v91 - 128) = v92[2];
          *long long v93 = v98;
          v92[1] = 0;
          v92[2] = 0;
          *uint64_t v92 = 0;
          long long v99 = *(_OWORD *)(v92 + 3);
          *(void *)(v91 - 104) = v92[5];
          *char v95 = v99;
          long long v100 = *((_OWORD *)v92 + 3);
          *(void *)(v91 - 80) = v92[8];
          *unint64_t v96 = v100;
          v92[7] = 0;
          v92[8] = 0;
          v92[6] = 0;
          *(unsigned char *)(v91 - 72) = 0;
          *(unsigned char *)(v91 - 8) = 0;
          if (*((unsigned char *)v92 + 136))
          {
            long long v101 = *(_OWORD *)(v92 + 9);
            *(void *)(v91 - 56) = v92[11];
            *char v97 = v101;
            v92[10] = 0;
            v92[11] = 0;
            v92[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v91 - 48, (uint64_t *)v92 + 12);
            *(unsigned char *)(v91 - 8) = 1;
          }
          *(unsigned char *)uint64_t v91 = 0;
          *(unsigned char *)(v91 + 88) = 0;
          if (*((unsigned char *)v92 + 232))
          {
            long long v102 = *((_OWORD *)v92 + 9);
            *(void *)(v91 + 16) = v92[20];
            *(_OWORD *)uint64_t v91 = v102;
            v92[19] = 0;
            v92[20] = 0;
            v92[18] = 0;
            *(_OWORD *)(v91 + 24) = *(_OWORD *)(v92 + 21);
            *(void *)(v91 + 48) = 0;
            *(void *)(v91 + 56) = 0;
            *(void *)(v91 + 40) = 0;
            *(_OWORD *)(v91 + 40) = *(_OWORD *)(v92 + 23);
            *(void *)(v91 + 56) = v92[25];
            v92[23] = 0;
            v92[24] = 0;
            v92[25] = 0;
            long long v103 = *((_OWORD *)v92 + 13);
            *(void *)(v91 + 80) = v92[28];
            *(_OWORD *)(v91 + 64) = v103;
            v92[27] = 0;
            v92[28] = 0;
            v92[26] = 0;
            *(unsigned char *)(v91 + 88) = 1;
          }
          int v104 = *((_DWORD *)v92 + 60);
          *(unsigned char *)(v91 + 104) = 0;
          *(_DWORD *)(v91 + 96) = v104;
          *(unsigned char *)(v91 + 128) = 0;
          if (*((unsigned char *)v92 + 272))
          {
            long long v105 = *(_OWORD *)(v92 + 31);
            *(void *)(v91 + 120) = v92[33];
            *(_OWORD *)(v91 + 104) = v105;
            v92[32] = 0;
            v92[33] = 0;
            v92[31] = 0;
            *(unsigned char *)(v91 + 128) = 1;
          }
          float result = *((float *)v92 + 70);
          *(float *)(v91 + 136) = result;
          v92 += 36;
        }
        else
        {
          long long v106 = *(_OWORD *)v8;
          *(void *)(v91 - 128) = v8[2];
          *long long v93 = v106;
          v8[1] = 0;
          std::string v8[2] = 0;
          const std::nothrow_t *v8 = 0;
          long long v107 = *(_OWORD *)(v8 + 3);
          *(void *)(v91 - 104) = v8[5];
          *char v95 = v107;
          long long v108 = *((_OWORD *)v8 + 3);
          *(void *)(v91 - 80) = v8[8];
          *unint64_t v96 = v108;
          v8[7] = 0;
          unsigned char v8[8] = 0;
          v8[6] = 0;
          *(unsigned char *)(v91 - 72) = 0;
          *(unsigned char *)(v91 - 8) = 0;
          if (*((unsigned char *)v8 + 136))
          {
            long long v109 = *(_OWORD *)(v8 + 9);
            *(void *)(v91 - 56) = v8[11];
            *char v97 = v109;
            int v8[10] = 0;
            v8[11] = 0;
            v8[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v91 - 48, (uint64_t *)v8 + 12);
            *(unsigned char *)(v91 - 8) = 1;
          }
          *(unsigned char *)uint64_t v91 = 0;
          *(unsigned char *)(v91 + 88) = 0;
          if (*((unsigned char *)v8 + 232))
          {
            long long v110 = *((_OWORD *)v8 + 9);
            *(void *)(v91 + 16) = v8[20];
            *(_OWORD *)uint64_t v91 = v110;
            v8[19] = 0;
            void v8[20] = 0;
            v8[18] = 0;
            *(_OWORD *)(v91 + 24) = *(_OWORD *)(v8 + 21);
            *(void *)(v91 + 48) = 0;
            *(void *)(v91 + 56) = 0;
            *(void *)(v91 + 40) = 0;
            *(_OWORD *)(v91 + 40) = *(_OWORD *)(v8 + 23);
            *(void *)(v91 + 56) = v8[25];
            v8[23] = 0;
            v8[24] = 0;
            v8[25] = 0;
            long long v111 = *((_OWORD *)v8 + 13);
            *(void *)(v91 + 80) = v8[28];
            *(_OWORD *)(v91 + 64) = v111;
            v8[27] = 0;
            v8[28] = 0;
            v8[26] = 0;
            *(unsigned char *)(v91 + 88) = 1;
          }
          int v112 = *((_DWORD *)v8 + 60);
          *(unsigned char *)(v91 + 104) = 0;
          *(_DWORD *)(v91 + 96) = v112;
          *(unsigned char *)(v91 + 128) = 0;
          if (*((unsigned char *)v8 + 272))
          {
            long long v113 = *(_OWORD *)(v8 + 31);
            *(void *)(v91 + 120) = v8[33];
            *(_OWORD *)(v91 + 104) = v113;
            v8[32] = 0;
            v8[33] = 0;
            v8[31] = 0;
            *(unsigned char *)(v91 + 128) = 1;
          }
          float result = *((float *)v8 + 70);
          *(float *)(v91 + 136) = result;
          v8 += 36;
        }
        v91 += 288;
        if (v8 == v90)
        {
          if (v92 != a2)
          {
            uint64_t v114 = 0;
            do
            {
              uint64_t v115 = (long long *)&v92[v114];
              uint64_t v116 = v91 + v114 * 8;
              long long v117 = *(_OWORD *)&v92[v114];
              *(void *)(v116 - 128) = v92[v114 + 2];
              *(_OWORD *)(v116 - 144) = v117;
              *((void *)v115 + 1) = 0;
              *((void *)v115 + 2) = 0;
              *(void *)uint64_t v115 = 0;
              long long v118 = *(_OWORD *)&v92[v114 + 3];
              *(void *)(v116 - 104) = v92[v114 + 5];
              *(_OWORD *)(v116 - 120) = v118;
              long long v119 = *(_OWORD *)&v92[v114 + 6];
              *(void *)(v116 - 80) = v92[v114 + 8];
              *(_OWORD *)(v116 - 96) = v119;
              *((void *)v115 + 7) = 0;
              *((void *)v115 + 8) = 0;
              *((void *)v115 + 6) = 0;
              *(unsigned char *)(v91 + v114 * 8 - 72) = 0;
              *(unsigned char *)(v116 - 8) = 0;
              if (LOBYTE(v92[v114 + 17]))
              {
                long long v120 = *(long long *)((char *)v115 + 72);
                *(void *)(v91 + v114 * 8 - 56) = *((void *)v115 + 11);
                *(_OWORD *)(v91 + v114 * 8 - 72) = v120;
                *((void *)v115 + 10) = 0;
                *((void *)v115 + 11) = 0;
                *((void *)v115 + 9) = 0;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v116 - 48, (uint64_t *)v115 + 12);
                *(unsigned char *)(v116 - 8) = 1;
              }
              *(unsigned char *)uint64_t v116 = 0;
              *(unsigned char *)(v116 + 88) = 0;
              if (*((unsigned char *)v115 + 232))
              {
                char v121 = (long long *)&v92[v114];
                long long v122 = *(_OWORD *)&v92[v114 + 18];
                *(void *)(v116 + 16) = v92[v114 + 20];
                *(_OWORD *)uint64_t v116 = v122;
                *((void *)v121 + 19) = 0;
                *((void *)v121 + 20) = 0;
                *((void *)v121 + 18) = 0;
                uint64_t v123 = v91 + v114 * 8;
                *(_OWORD *)(v123 + 24) = *(_OWORD *)&v92[v114 + 21];
                *(void *)(v123 + 48) = 0;
                *(void *)(v123 + 56) = 0;
                *(void *)(v123 + 40) = 0;
                *(_OWORD *)(v123 + 40) = *(_OWORD *)&v92[v114 + 23];
                *(void *)(v123 + 56) = v92[v114 + 25];
                *((void *)v121 + 23) = 0;
                *((void *)v121 + 24) = 0;
                *((void *)v121 + 25) = 0;
                long long v124 = *(_OWORD *)&v92[v114 + 26];
                *(void *)(v123 + 80) = v92[v114 + 28];
                *(_OWORD *)(v123 + 64) = v124;
                *((void *)v121 + 27) = 0;
                *((void *)v121 + 28) = 0;
                *((void *)v121 + 26) = 0;
                *(unsigned char *)(v116 + 88) = 1;
              }
              uint64_t v125 = v91 + v114 * 8;
              *(_DWORD *)(v125 + 96) = *((_DWORD *)v115 + 60);
              *(unsigned char *)(v91 + v114 * 8 + 104) = 0;
              *(unsigned char *)(v125 + 128) = 0;
              if (*((unsigned char *)v115 + 272))
              {
                uint64_t v126 = (long long *)&v92[v114];
                long long v127 = *(_OWORD *)&v92[v114 + 31];
                *(void *)(v91 + v114 * 8 + 120) = v92[v114 + 33];
                *(_OWORD *)(v91 + v114 * 8 + 104) = v127;
                *((void *)v126 + 32) = 0;
                *((void *)v126 + 33) = 0;
                *((void *)v126 + 31) = 0;
                *(unsigned char *)(v125 + 128) = 1;
              }
              float result = *((float *)v115 + 70);
              *(float *)(v125 + 136) = result;
              v114 += 36;
            }
            while (v115 + 18 != (long long *)a2);
          }
          return result;
        }
      }
      if (v8 != v90)
      {
        uint64_t v128 = 0;
        do
        {
          __int16 v129 = &v8[v128];
          uint64_t v130 = v91 + v128 * 8;
          long long v131 = *(_OWORD *)&v8[v128];
          *(void *)(v130 - 128) = v8[v128 + 2];
          *(_OWORD *)(v130 - 144) = v131;
          v129[1] = 0;
          v129[2] = 0;
          *__int16 v129 = 0;
          long long v132 = *(_OWORD *)&v8[v128 + 3];
          *(void *)(v130 - 104) = v8[v128 + 5];
          *(_OWORD *)(v130 - 120) = v132;
          long long v133 = *(_OWORD *)&v8[v128 + 6];
          *(void *)(v130 - 80) = v8[v128 + 8];
          *(_OWORD *)(v130 - 96) = v133;
          v129[7] = 0;
          v129[8] = 0;
          v129[6] = 0;
          *(unsigned char *)(v91 + v128 * 8 - 72) = 0;
          *(unsigned char *)(v130 - 8) = 0;
          if (LOBYTE(v8[v128 + 17]))
          {
            long long v134 = *(_OWORD *)(v129 + 9);
            *(void *)(v91 + v128 * 8 - 56) = v129[11];
            *(_OWORD *)(v91 + v128 * 8 - 72) = v134;
            v129[10] = 0;
            v129[11] = 0;
            v129[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v130 - 48, (uint64_t *)v129 + 12);
            *(unsigned char *)(v130 - 8) = 1;
          }
          *(unsigned char *)uint64_t v130 = 0;
          *(unsigned char *)(v130 + 88) = 0;
          if (*((unsigned char *)v129 + 232))
          {
            uint64_t v135 = &v8[v128];
            long long v136 = *(_OWORD *)&v8[v128 + 18];
            *(void *)(v130 + 16) = v8[v128 + 20];
            *(_OWORD *)uint64_t v130 = v136;
            v135[19] = 0;
            v135[20] = 0;
            v135[18] = 0;
            uint64_t v137 = v91 + v128 * 8;
            *(_OWORD *)(v137 + 24) = *(_OWORD *)&v8[v128 + 21];
            *(void *)(v137 + 48) = 0;
            *(void *)(v137 + 56) = 0;
            *(void *)(v137 + 40) = 0;
            *(_OWORD *)(v137 + 40) = *(_OWORD *)&v8[v128 + 23];
            *(void *)(v137 + 56) = v8[v128 + 25];
            v135[23] = 0;
            v135[24] = 0;
            v135[25] = 0;
            long long v138 = *(_OWORD *)&v8[v128 + 26];
            *(void *)(v137 + 80) = v8[v128 + 28];
            *(_OWORD *)(v137 + 64) = v138;
            v135[27] = 0;
            v135[28] = 0;
            v135[26] = 0;
            *(unsigned char *)(v130 + 88) = 1;
          }
          uint64_t v139 = v91 + v128 * 8;
          *(_DWORD *)(v139 + 96) = *((_DWORD *)v129 + 60);
          *(unsigned char *)(v91 + v128 * 8 + 104) = 0;
          *(unsigned char *)(v139 + 128) = 0;
          if (*((unsigned char *)v129 + 272))
          {
            size_t v140 = &v8[v128];
            long long v141 = *(_OWORD *)&v8[v128 + 31];
            *(void *)(v91 + v128 * 8 + 120) = v8[v128 + 33];
            *(_OWORD *)(v91 + v128 * 8 + 104) = v141;
            v140[32] = 0;
            v140[33] = 0;
            v140[31] = 0;
            *(unsigned char *)(v139 + 128) = 1;
          }
          float result = *((float *)v129 + 70);
          *(float *)(v139 + 136) = result;
          v128 += 36;
        }
        while (v129 + 36 != v90);
      }
    }
    else if (a1 != a2)
    {
      long long v39 = *(_OWORD *)a1;
      *(void *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v39;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      long long v40 = *(_OWORD *)(a1 + 3);
      *(void *)(a5 + 40) = a1[5];
      *(_OWORD *)(a5 + 24) = v40;
      long long v41 = *((_OWORD *)a1 + 3);
      *(void *)(a5 + 64) = a1[8];
      *(_OWORD *)(a5 + 48) = v41;
      a1[7] = 0;
      a1[8] = 0;
      a1[6] = 0;
      *(unsigned char *)(a5 + 72) = 0;
      *(unsigned char *)(a5 + 136) = 0;
      if (*((unsigned char *)a1 + 136))
      {
        long long v42 = *(_OWORD *)(a1 + 9);
        *(void *)(a5 + 88) = a1[11];
        *(_OWORD *)(a5 + 72) = v42;
        a1[10] = 0;
        a1[11] = 0;
        a1[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a1 + 12);
        *(unsigned char *)(a5 + 136) = 1;
      }
      *(unsigned char *)(a5 + 144) = 0;
      *(unsigned char *)(a5 + 232) = 0;
      if (*((unsigned char *)v8 + 232))
      {
        long long v43 = *((_OWORD *)v8 + 9);
        *(void *)(a5 + 160) = v8[20];
        *(_OWORD *)(a5 + 144) = v43;
        v8[19] = 0;
        void v8[20] = 0;
        v8[18] = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
        *(void *)(a5 + 192) = 0;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 184) = 0;
        *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
        *(void *)(a5 + 200) = v8[25];
        v8[23] = 0;
        v8[24] = 0;
        v8[25] = 0;
        long long v44 = *((_OWORD *)v8 + 13);
        *(void *)(a5 + 224) = v8[28];
        *(_OWORD *)(a5 + 208) = v44;
        v8[27] = 0;
        v8[28] = 0;
        v8[26] = 0;
        *(unsigned char *)(a5 + 232) = 1;
      }
      int v45 = *((_DWORD *)v8 + 60);
      *(unsigned char *)(a5 + 248) = 0;
      *(_DWORD *)(a5 + 240) = v45;
      *(unsigned char *)(a5 + 272) = 0;
      if (*((unsigned char *)v8 + 272))
      {
        long long v46 = *(_OWORD *)(v8 + 31);
        *(void *)(a5 + 264) = v8[33];
        *(_OWORD *)(a5 + 248) = v46;
        v8[32] = 0;
        v8[33] = 0;
        v8[31] = 0;
        *(unsigned char *)(a5 + 272) = 1;
      }
      float result = *((float *)v8 + 70);
      *(float *)(a5 + 280) = result;
      uint64_t v48 = v8 + 36;
      if (v8 + 36 != a2)
      {
        uint64_t v49 = 0;
        long long v50 = (_OWORD *)a5;
        do
        {
          uint64_t v51 = v48;
          uint64_t v52 = v50 + 18;
          int v53 = snlp::ssu::similarity::SSUAppResult::operator>(v48, (const void **)v50);
          uint64_t v54 = (_OWORD *)((char *)v50 + 312);
          long long v55 = v50 + 21;
          uint64_t v56 = (_OWORD *)((char *)v50 + 360);
          if (v53)
          {
            *uint64_t v52 = *v50;
            *((void *)v50 + 38) = *((void *)v50 + 2);
            *((void *)v50 + 1) = 0;
            *((void *)v50 + 2) = 0;
            *(void *)long long v50 = 0;
            *uint64_t v54 = *(_OWORD *)((char *)v50 + 24);
            *((void *)v50 + 41) = *((void *)v50 + 5);
            *long long v55 = v50[3];
            *((void *)v50 + 44) = *((void *)v50 + 8);
            *((void *)v50 + 7) = 0;
            *((void *)v50 + 8) = 0;
            *((void *)v50 + 6) = 0;
            *((unsigned char *)v50 + 360) = 0;
            *((unsigned char *)v50 + 424) = 0;
            if (*((unsigned char *)v50 + 136))
            {
              *uint64_t v56 = *(_OWORD *)((char *)v50 + 72);
              *((void *)v50 + 47) = *((void *)v50 + 11);
              *((void *)v50 + 10) = 0;
              *((void *)v50 + 11) = 0;
              *((void *)v50 + 9) = 0;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)(v50 + 24), (uint64_t *)v50 + 12);
              *((unsigned char *)v50 + 424) = 1;
            }
            *((unsigned char *)v50 + 432) = 0;
            *((unsigned char *)v50 + 520) = 0;
            if (*((unsigned char *)v50 + 232))
            {
              v50[27] = v50[9];
              *((void *)v50 + 56) = *((void *)v50 + 20);
              *((void *)v50 + 19) = 0;
              *((void *)v50 + 20) = 0;
              *((void *)v50 + 18) = 0;
              *(_OWORD *)((char *)v50 + 456) = *(_OWORD *)((char *)v50 + 168);
              *(_OWORD *)((char *)v50 + 472) = *(_OWORD *)((char *)v50 + 184);
              *((void *)v50 + 61) = *((void *)v50 + 25);
              *((void *)v50 + 23) = 0;
              *((void *)v50 + 24) = 0;
              long long v57 = v50[13];
              *((void *)v50 + 64) = *((void *)v50 + 28);
              v50[31] = v57;
              *((void *)v50 + 25) = 0;
              *((void *)v50 + 26) = 0;
              *((void *)v50 + 27) = 0;
              *((void *)v50 + 28) = 0;
              *((unsigned char *)v50 + 520) = 1;
            }
            *((_DWORD *)v50 + 132) = *((_DWORD *)v50 + 60);
            *((unsigned char *)v50 + 536) = 0;
            *((unsigned char *)v50 + 560) = 0;
            if (*((unsigned char *)v50 + 272))
            {
              *(_OWORD *)((char *)v50 + 536) = *(_OWORD *)((char *)v50 + 248);
              *((void *)v50 + 69) = *((void *)v50 + 33);
              *((void *)v50 + 32) = 0;
              *((void *)v50 + 33) = 0;
              *((void *)v50 + 31) = 0;
              *((unsigned char *)v50 + 560) = 1;
            }
            *((_DWORD *)v50 + 142) = *((_DWORD *)v50 + 70);
            uint64_t v58 = a5;
            if (v50 != (_OWORD *)a5)
            {
              uint64_t v59 = v49;
              while (1)
              {
                uint64_t v58 = a5 + v59;
                uint64_t v60 = (const void **)(a5 + v59 - 288);
                if (!snlp::ssu::similarity::SSUAppResult::operator>(v51, v60)) {
                  break;
                }
                if (*(char *)(v58 + 23) < 0) {
                  operator delete(*(void **)v58);
                }
                uint64_t v61 = a5 + v59;
                *(_OWORD *)uint64_t v58 = *(_OWORD *)v60;
                *(void *)(v58 + 16) = *(void *)(a5 + v59 - 272);
                *(unsigned char *)(a5 + v59 - 265) = 0;
                *(unsigned char *)uint64_t v60 = 0;
                *(void *)(v61 + 40) = *(void *)(a5 + v59 - 248);
                *(_OWORD *)(v61 + 24) = *(_OWORD *)(a5 + v59 - 264);
                std::string v62 = (void **)(a5 + v59 + 48);
                if (*(char *)(a5 + v59 + 71) < 0) {
                  operator delete(*v62);
                }
                *(_OWORD *)std::string v62 = *(_OWORD *)(v61 - 240);
                *(void *)(a5 + v59 + 64) = *(void *)(v61 - 224);
                *(unsigned char *)(v61 - 217) = 0;
                *(unsigned char *)(v61 - 240) = 0;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v61 + 72, (long long *)(v61 - 216));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v61 + 144, (long long *)(v61 - 144));
                *(_DWORD *)(v61 + 240) = *(_DWORD *)(v61 - 48);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v61 + 248, (__n128 *)(v61 - 40));
                *(_DWORD *)(v61 + 280) = *(_DWORD *)(v61 - 8);
                v59 -= 288;
                if (!v59)
                {
                  uint64_t v58 = a5;
                  break;
                }
              }
            }
            if (*(char *)(v58 + 23) < 0) {
              operator delete(*(void **)v58);
            }
            long long v63 = *(_OWORD *)v51;
            *(void *)(v58 + 16) = v51[2];
            *(_OWORD *)uint64_t v58 = v63;
            *((unsigned char *)v51 + 23) = 0;
            *(unsigned char *)uint64_t v51 = 0;
            long long v64 = v51[5];
            *(_OWORD *)(v58 + 24) = *(_OWORD *)(v51 + 3);
            *(void *)(v58 + 40) = v64;
            uint64_t v65 = (void **)(v58 + 48);
            if (*(char *)(v58 + 71) < 0) {
              operator delete(*v65);
            }
            long long v66 = *((_OWORD *)v51 + 3);
            *(void *)(v58 + 64) = v51[8];
            *(_OWORD *)uint64_t v65 = v66;
            *((unsigned char *)v51 + 71) = 0;
            *((unsigned char *)v51 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v58 + 72, (long long *)(v51 + 9));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v58 + 144, (long long *)v51 + 9);
            *(_DWORD *)(v58 + 240) = *((_DWORD *)v51 + 60);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v58 + 248, (__n128 *)(v51 + 31));
            float result = *((float *)v51 + 70);
            *(float *)(v58 + 280) = result;
          }
          else
          {
            long long v67 = *(_OWORD *)v51;
            *((void *)v50 + 38) = v51[2];
            *uint64_t v52 = v67;
            v51[1] = 0;
            std::vector<std::csub_match> v51[2] = 0;
            *uint64_t v51 = 0;
            long long v68 = *(_OWORD *)(v8 + 39);
            *((void *)v50 + 41) = v8[41];
            *uint64_t v54 = v68;
            long long v69 = *((_OWORD *)v8 + 21);
            *((void *)v50 + 44) = v8[44];
            *long long v55 = v69;
            v8[43] = 0;
            v8[44] = 0;
            v8[42] = 0;
            *((unsigned char *)v50 + 360) = 0;
            *((unsigned char *)v50 + 424) = 0;
            if (*((unsigned char *)v8 + 424))
            {
              long long v70 = *(_OWORD *)(v8 + 45);
              *((void *)v50 + 47) = v8[47];
              *uint64_t v56 = v70;
              v8[46] = 0;
              v8[47] = 0;
              v8[45] = 0;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)(v50 + 24), (uint64_t *)v8 + 48);
              *((unsigned char *)v50 + 424) = 1;
            }
            *((unsigned char *)v50 + 432) = 0;
            *((unsigned char *)v50 + 520) = 0;
            if (*((unsigned char *)v8 + 520))
            {
              long long v71 = *((_OWORD *)v8 + 27);
              *((void *)v50 + 56) = v8[56];
              v50[27] = v71;
              v8[55] = 0;
              unsigned char v8[56] = 0;
              v8[54] = 0;
              *(_OWORD *)((char *)v50 + 456) = *(_OWORD *)(v8 + 57);
              *((void *)v50 + 60) = 0;
              *((void *)v50 + 61) = 0;
              *((void *)v50 + 59) = 0;
              *(_OWORD *)((char *)v50 + 472) = *(_OWORD *)(v8 + 59);
              *((void *)v50 + 61) = v8[61];
              v8[59] = 0;
              v8[60] = 0;
              v8[61] = 0;
              long long v72 = *((_OWORD *)v8 + 31);
              *((void *)v50 + 64) = v8[64];
              v50[31] = v72;
              v8[63] = 0;
              v8[64] = 0;
              v8[62] = 0;
              *((unsigned char *)v50 + 520) = 1;
            }
            *((_DWORD *)v50 + 132) = *((_DWORD *)v8 + 132);
            *((unsigned char *)v50 + 536) = 0;
            *((unsigned char *)v50 + 560) = 0;
            if (*((unsigned char *)v8 + 560))
            {
              long long v73 = *(_OWORD *)(v8 + 67);
              *((void *)v50 + 69) = v8[69];
              *(_OWORD *)((char *)v50 + 536) = v73;
              v8[69] = 0;
              v8[68] = 0;
              v8[67] = 0;
              *((unsigned char *)v50 + 560) = 1;
            }
            float result = *((float *)v8 + 142);
            *((float *)v50 + 142) = result;
          }
          uint64_t v48 = v51 + 36;
          v49 += 288;
          long long v50 = v52;
          uint64_t v8 = v51;
        }
        while (v51 + 36 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 144;
    do
    {
      if (*(unsigned char *)(v4 + 128) && *(char *)(v4 + 127) < 0) {
        operator delete(*(void **)(v4 + 104));
      }
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](v4);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v4 - 72);
      if (*(char *)(v4 - 73) < 0) {
        operator delete(*(void **)(v4 - 96));
      }
      if (*(char *)(v4 - 121) < 0) {
        operator delete(*(void **)(v4 - 144));
      }
      ++v3;
      v4 += 288;
    }
    while (v3 < *a1);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a6) {
    return;
  }
  uint64_t v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    while ((snlp::ssu::similarity::SSUAppResult::operator>(a2, a1) & 1) == 0)
    {
      a1 += 36;
      if (!--a5) {
        return;
      }
    }
    uint64_t v114 = a3;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((uint64_t)a1, (long long *)a2);
        return;
      }
      if (a5 >= 0) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = a5 + 1;
      }
      uint64_t v20 = v21 >> 1;
      uint64_t v18 = &a1[36 * (v21 >> 1)];
      long long v22 = a3;
      uint64_t v17 = a2;
      if (a2 != v22)
      {
        uint64_t v107 = v20;
        uint64_t v111 = a8;
        unint64_t v23 = 0x8E38E38E38E38E39 * (((char *)v114 - (char *)a2) >> 5);
        uint64_t v17 = a2;
        do
        {
          long long v24 = &v17[36 * (v23 >> 1)];
          int v25 = snlp::ssu::similarity::SSUAppResult::operator>(v24, v18);
          if (v25) {
            v23 += ~(v23 >> 1);
          }
          else {
            v23 >>= 1;
          }
          if (v25) {
            uint64_t v17 = v24 + 36;
          }
        }
        while (v23);
        a8 = v111;
        uint64_t v20 = v107;
      }
      uint64_t v16 = 0x8E38E38E38E38E39 * (((char *)v17 - (char *)a2) >> 5);
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v10 + 1;
      }
      uint64_t v16 = v15 >> 1;
      uint64_t v17 = &a2[36 * (v15 >> 1)];
      uint64_t v18 = a2;
      if (a2 != a1)
      {
        uint64_t v109 = v15 >> 1;
        unint64_t v19 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 5);
        uint64_t v18 = a1;
        do
        {
          if (snlp::ssu::similarity::SSUAppResult::operator>(v17, &v18[36 * (v19 >> 1)]))
          {
            v19 >>= 1;
          }
          else
          {
            v18 += 36 * (v19 >> 1) + 36;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        uint64_t v16 = v109;
      }
      uint64_t v20 = 0x8E38E38E38E38E39 * (((char *)v18 - (char *)a1) >> 5);
    }
    if (v18 == a2)
    {
      long long v26 = v17;
    }
    else if (v17 == a2)
    {
      long long v26 = v18;
    }
    else
    {
      uint64_t v108 = v20;
      uint64_t v110 = v16;
      uint64_t v112 = a8;
      uint64_t v113 = a7;
      long long v26 = v18 + 36;
      uint64_t v27 = (uint64_t)v18;
      long long v28 = (long long *)a2;
      while (1)
      {
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(v27, v28);
        v27 += 288;
        v28 += 18;
        if (v28 == (long long *)v17) {
          break;
        }
        if ((const void **)v27 == a2) {
          a2 = (const void **)v28;
        }
        v26 += 36;
      }
      if ((const void **)v27 != a2)
      {
        long long v29 = (long long *)a2;
        do
        {
          while (1)
          {
            std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(v27, v29);
            v27 += 288;
            v29 += 18;
            if (v29 == (long long *)v17) {
              break;
            }
            if ((const void **)v27 == a2) {
              a2 = (const void **)v29;
            }
          }
          long long v29 = (long long *)a2;
        }
        while ((const void **)v27 != a2);
      }
      a8 = v112;
      a7 = v113;
      uint64_t v20 = v108;
      uint64_t v16 = v110;
    }
    a5 -= v20;
    v10 -= v16;
    if (v20 + v16 >= a5 + v10)
    {
      int v30 = v17;
      uint64_t v31 = v20;
      uint64_t v32 = a5;
      uint64_t v33 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v26, v30, v114, a4, v32, v10, a7, a8);
      a2 = v18;
      uint64_t v10 = v33;
      a5 = v31;
      a3 = v26;
    }
    else
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v18, v26, a4, v20, v16, a7, a8);
      a1 = v26;
      a2 = v17;
      a3 = v114;
    }
    if (!v10) {
      return;
    }
  }
  if (a5 <= v10)
  {
    if (a1 != a2)
    {
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      do
      {
        uint64_t v60 = &a1[v58];
        uint64_t v61 = a7 + v58 * 8;
        long long v62 = *(_OWORD *)&a1[v58];
        *(void *)(v61 + 16) = a1[v58 + 2];
        *(_OWORD *)uint64_t v61 = v62;
        v60[1] = 0;
        v60[2] = 0;
        *uint64_t v60 = 0;
        long long v63 = *(_OWORD *)&a1[v58 + 3];
        *(void *)(v61 + 40) = a1[v58 + 5];
        *(_OWORD *)(v61 + 24) = v63;
        long long v64 = *(_OWORD *)&a1[v58 + 6];
        *(void *)(v61 + 64) = a1[v58 + 8];
        *(_OWORD *)(v61 + 48) = v64;
        v60[7] = 0;
        v60[8] = 0;
        v60[6] = 0;
        *(unsigned char *)(a7 + v58 * 8 + 72) = 0;
        *(unsigned char *)(v61 + 136) = 0;
        if (LOBYTE(a1[v58 + 17]))
        {
          long long v65 = *(_OWORD *)(v60 + 9);
          *(void *)(a7 + v58 * 8 + 88) = v60[11];
          *(_OWORD *)(a7 + v58 * 8 + 72) = v65;
          v60[10] = 0;
          v60[11] = 0;
          v60[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v61 + 96, (uint64_t *)v60 + 12);
          *(unsigned char *)(v61 + 136) = 1;
        }
        *(unsigned char *)(v61 + 144) = 0;
        *(unsigned char *)(v61 + 232) = 0;
        if (*((unsigned char *)v60 + 232))
        {
          long long v66 = &a1[v58];
          long long v67 = *(_OWORD *)&a1[v58 + 18];
          *(void *)(v61 + 160) = a1[v58 + 20];
          *(_OWORD *)(v61 + 144) = v67;
          v66[19] = 0;
          v66[20] = 0;
          v66[18] = 0;
          uint64_t v68 = a7 + v58 * 8;
          *(_OWORD *)(v68 + 168) = *(_OWORD *)&a1[v58 + 21];
          *(void *)(v68 + 192) = 0;
          *(void *)(v68 + 200) = 0;
          *(void *)(v68 + 184) = 0;
          *(_OWORD *)(v68 + 184) = *(_OWORD *)&a1[v58 + 23];
          *(void *)(v68 + 200) = a1[v58 + 25];
          v66[23] = 0;
          uint8_t v66[24] = 0;
          v66[25] = 0;
          long long v69 = *(_OWORD *)&a1[v58 + 26];
          *(void *)(v68 + 224) = a1[v58 + 28];
          *(_OWORD *)(v68 + 208) = v69;
          v66[27] = 0;
          v66[28] = 0;
          v66[26] = 0;
          *(unsigned char *)(v61 + 232) = 1;
        }
        uint64_t v70 = a7 + v58 * 8;
        *(_DWORD *)(v70 + 240) = *((_DWORD *)v60 + 60);
        *(unsigned char *)(a7 + v58 * 8 + 248) = 0;
        *(unsigned char *)(v70 + 272) = 0;
        if (*((unsigned char *)v60 + 272))
        {
          long long v71 = &a1[v58];
          long long v72 = *(_OWORD *)&a1[v58 + 31];
          *(void *)(a7 + v58 * 8 + 264) = a1[v58 + 33];
          *(_OWORD *)(a7 + v58 * 8 + 248) = v72;
          v71[32] = 0;
          v71[33] = 0;
          v71[31] = 0;
          *(unsigned char *)(v70 + 272) = 1;
        }
        *(_DWORD *)(v70 + 280) = *((_DWORD *)v60 + 70);
        ++v59;
        v58 += 36;
      }
      while (v60 + 36 != a2);
      uint64_t v73 = a7 + v58 * 8;
      unint64_t v116 = v59;
      if (v73 != a7)
      {
        uint64_t v74 = v73 - 288;
        uint64_t v75 = (uint64_t)(a1 + 18);
        uint64_t v76 = a7;
        while (a2 != a3)
        {
          long long v77 = (void **)(v75 - 144);
          int v78 = snlp::ssu::similarity::SSUAppResult::operator>(a2, (const void **)v76);
          int v79 = *(char *)(v75 - 121);
          if (v78)
          {
            if (v79 < 0) {
              operator delete(*v77);
            }
            long long v80 = *(_OWORD *)a2;
            *(void *)(v75 - 128) = a2[2];
            *(_OWORD *)long long v77 = v80;
            *((unsigned char *)a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            long long v81 = a2[5];
            *(_OWORD *)(v75 - 120) = *(_OWORD *)(a2 + 3);
            *(void *)(v75 - 104) = v81;
            long long v82 = (void **)(v75 - 96);
            if (*(char *)(v75 - 73) < 0) {
              operator delete(*v82);
            }
            long long v83 = *((_OWORD *)a2 + 3);
            *(void *)(v75 - 80) = a2[8];
            *(_OWORD *)long long v82 = v83;
            *((unsigned char *)a2 + 71) = 0;
            *((unsigned char *)a2 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 - 72, (long long *)(a2 + 9));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75, (long long *)a2 + 9);
            *(_DWORD *)(v75 + 96) = *((_DWORD *)a2 + 60);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + 104, (__n128 *)(a2 + 31));
            *(_DWORD *)(v75 + 136) = *((_DWORD *)a2 + 70);
            a2 += 36;
          }
          else
          {
            if (v79 < 0) {
              operator delete(*v77);
            }
            long long v84 = *(_OWORD *)v76;
            *(void *)(v75 - 128) = *(void *)(v76 + 16);
            *(_OWORD *)long long v77 = v84;
            *(unsigned char *)(v76 + 23) = 0;
            *(unsigned char *)uint64_t v76 = 0;
            uint64_t v85 = *(void *)(v76 + 40);
            *(_OWORD *)(v75 - 120) = *(_OWORD *)(v76 + 24);
            *(void *)(v75 - 104) = v85;
            long long v86 = (void **)(v75 - 96);
            if (*(char *)(v75 - 73) < 0) {
              operator delete(*v86);
            }
            long long v87 = *(_OWORD *)(v76 + 48);
            *(void *)(v75 - 80) = *(void *)(v76 + 64);
            *(_OWORD *)long long v86 = v87;
            *(unsigned char *)(v76 + 71) = 0;
            *(unsigned char *)(v76 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 - 72, (long long *)(v76 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75, (long long *)(v76 + 144));
            *(_DWORD *)(v75 + 96) = *(_DWORD *)(v76 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + 104, (__n128 *)(v76 + 248));
            *(_DWORD *)(v75 + 136) = *(_DWORD *)(v76 + 280);
            v76 += 288;
          }
          v75 += 288;
          if (v76 == v73) {
            goto LABEL_126;
          }
        }
        if (v76 != v73)
        {
          uint64_t v98 = 0;
          do
          {
            uint64_t v99 = v75 + v98;
            long long v100 = (void **)(v75 + v98 - 144);
            if (*(char *)(v75 + v98 - 121) < 0) {
              operator delete(*v100);
            }
            uint64_t v101 = v76 + v98;
            long long v102 = *(_OWORD *)(v76 + v98);
            *(void *)(v75 + v98 - 128) = *(void *)(v76 + v98 + 16);
            *(_OWORD *)long long v100 = v102;
            *(unsigned char *)(v101 + 23) = 0;
            *(unsigned char *)uint64_t v101 = 0;
            uint64_t v103 = *(void *)(v76 + v98 + 40);
            *(_OWORD *)(v99 - 120) = *(_OWORD *)(v76 + v98 + 24);
            *(void *)(v99 - 104) = v103;
            int v104 = (void **)(v99 - 96);
            if (*(char *)(v99 - 73) < 0) {
              operator delete(*v104);
            }
            long long v105 = *(_OWORD *)(v101 + 48);
            *(void *)(v99 - 80) = *(void *)(v101 + 64);
            *(_OWORD *)int v104 = v105;
            *(unsigned char *)(v101 + 71) = 0;
            *(unsigned char *)(v101 + 48) = 0;
            uint64_t v106 = v75 + v98;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 + v98 - 72, (long long *)(v101 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75 + v98, (long long *)(v101 + 144));
            *(_DWORD *)(v106 + 96) = *(_DWORD *)(v101 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + v98 + 104, (__n128 *)(v101 + 248));
            *(_DWORD *)(v106 + 136) = *(_DWORD *)(v101 + 280);
            v98 += 288;
          }
          while (v101 != v74);
        }
      }
      goto LABEL_126;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    do
    {
      long long v36 = &a2[v34];
      uint64_t v37 = a7 + v34 * 8;
      long long v38 = *(_OWORD *)&a2[v34];
      *(void *)(v37 + 16) = a2[v34 + 2];
      *(_OWORD *)uint64_t v37 = v38;
      v36[1] = 0;
      void v36[2] = 0;
      *long long v36 = 0;
      long long v39 = *(_OWORD *)&a2[v34 + 3];
      *(void *)(v37 + 40) = a2[v34 + 5];
      *(_OWORD *)(v37 + 24) = v39;
      long long v40 = *(_OWORD *)&a2[v34 + 6];
      *(void *)(v37 + 64) = a2[v34 + 8];
      *(_OWORD *)(v37 + 48) = v40;
      v36[7] = 0;
      uint8_t v36[8] = 0;
      v36[6] = 0;
      *(unsigned char *)(a7 + v34 * 8 + 72) = 0;
      *(unsigned char *)(v37 + 136) = 0;
      if (LOBYTE(a2[v34 + 17]))
      {
        long long v41 = *(_OWORD *)(v36 + 9);
        *(void *)(a7 + v34 * 8 + 88) = v36[11];
        *(_OWORD *)(a7 + v34 * 8 + 72) = v41;
        v36[10] = 0;
        v36[11] = 0;
        v36[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v37 + 96, (uint64_t *)v36 + 12);
        *(unsigned char *)(v37 + 136) = 1;
      }
      *(unsigned char *)(v37 + 144) = 0;
      *(unsigned char *)(v37 + 232) = 0;
      if (*((unsigned char *)v36 + 232))
      {
        long long v42 = &a2[v34];
        long long v43 = *(_OWORD *)&a2[v34 + 18];
        *(void *)(v37 + 160) = a2[v34 + 20];
        *(_OWORD *)(v37 + 144) = v43;
        v42[19] = 0;
        v42[20] = 0;
        v42[18] = 0;
        uint64_t v44 = a7 + v34 * 8;
        *(_OWORD *)(v44 + 168) = *(_OWORD *)&a2[v34 + 21];
        *(void *)(v44 + 192) = 0;
        *(void *)(v44 + 200) = 0;
        *(void *)(v44 + 184) = 0;
        *(_OWORD *)(v44 + 184) = *(_OWORD *)&a2[v34 + 23];
        *(void *)(v44 + 200) = a2[v34 + 25];
        v42[23] = 0;
        v42[24] = 0;
        v42[25] = 0;
        long long v45 = *(_OWORD *)&a2[v34 + 26];
        *(void *)(v44 + 224) = a2[v34 + 28];
        *(_OWORD *)(v44 + 208) = v45;
        v42[27] = 0;
        v42[28] = 0;
        v42[26] = 0;
        *(unsigned char *)(v37 + 232) = 1;
      }
      uint64_t v46 = a7 + v34 * 8;
      *(_DWORD *)(v46 + 240) = *((_DWORD *)v36 + 60);
      *(unsigned char *)(a7 + v34 * 8 + 248) = 0;
      *(unsigned char *)(v46 + 272) = 0;
      if (*((unsigned char *)v36 + 272))
      {
        long long v47 = &a2[v34];
        long long v48 = *(_OWORD *)&a2[v34 + 31];
        *(void *)(a7 + v34 * 8 + 264) = a2[v34 + 33];
        *(_OWORD *)(a7 + v34 * 8 + 248) = v48;
        v47[32] = 0;
        v47[33] = 0;
        v47[31] = 0;
        *(unsigned char *)(v46 + 272) = 1;
      }
      *(_DWORD *)(v46 + 280) = *((_DWORD *)v36 + 70);
      ++v35;
      v34 += 36;
    }
    while (v36 + 36 != a3);
    uint64_t v49 = a7 + v34 * 8;
    unint64_t v116 = v35;
    if (a7 + v34 * 8 != a7)
    {
      uint64_t v50 = (uint64_t)(a3 - 18);
      while (a2 != a1)
      {
        int v51 = snlp::ssu::similarity::SSUAppResult::operator>((const void **)(v49 - 288), a2 - 36);
        uint64_t v52 = (void **)(v50 - 144);
        if (v51) {
          int v53 = a2 - 36;
        }
        else {
          int v53 = (const void **)(v49 - 288);
        }
        if (v51) {
          a2 -= 36;
        }
        else {
          v49 -= 288;
        }
        if (*(char *)(v50 - 121) < 0) {
          operator delete(*v52);
        }
        long long v54 = *(_OWORD *)v53;
        *(void *)(v50 - 128) = v53[2];
        *(_OWORD *)uint64_t v52 = v54;
        *((unsigned char *)v53 + 23) = 0;
        *(unsigned char *)int v53 = 0;
        long long v55 = v53[5];
        *(_OWORD *)(v50 - 120) = *(_OWORD *)(v53 + 3);
        *(void *)(v50 - 104) = v55;
        uint64_t v56 = (void **)(v50 - 96);
        if (*(char *)(v50 - 73) < 0) {
          operator delete(*v56);
        }
        long long v57 = *((_OWORD *)v53 + 3);
        *(void *)(v50 - 80) = v53[8];
        *(_OWORD *)uint64_t v56 = v57;
        *((unsigned char *)v53 + 71) = 0;
        *((unsigned char *)v53 + 48) = 0;
        std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v50 - 72, (long long *)(v53 + 9));
        std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v50, (long long *)v53 + 9);
        *(_DWORD *)(v50 + 96) = *((_DWORD *)v53 + 60);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v50 + 104, (__n128 *)(v53 + 31));
        *(_DWORD *)(v50 + 136) = *((_DWORD *)v53 + 70);
        v50 -= 288;
        if (v49 == a7) {
          goto LABEL_126;
        }
      }
      uint64_t v88 = 0;
      do
      {
        uint64_t v89 = v50 + v88;
        int v90 = (void **)(v50 + v88 - 144);
        if (*(char *)(v50 + v88 - 121) < 0) {
          operator delete(*v90);
        }
        uint64_t v91 = (long long *)(v49 + v88 - 288);
        long long v92 = *v91;
        *(void *)(v50 + v88 - 128) = *(void *)(v49 + v88 - 272);
        *(_OWORD *)int v90 = v92;
        *(unsigned char *)(v49 + v88 - 265) = 0;
        *(unsigned char *)uint64_t v91 = 0;
        uint64_t v93 = *(void *)(v49 + v88 - 248);
        *(_OWORD *)(v89 - 120) = *(_OWORD *)(v49 + v88 - 264);
        *(void *)(v89 - 104) = v93;
        int v94 = (void **)(v89 - 96);
        if (*(char *)(v89 - 73) < 0) {
          operator delete(*v94);
        }
        char v95 = (long long *)(v49 + v88 - 240);
        long long v96 = *v95;
        *(void *)(v89 - 80) = *(void *)(v49 + v88 - 224);
        *(_OWORD *)int v94 = v96;
        *(unsigned char *)(v49 + v88 - 217) = 0;
        *(unsigned char *)char v95 = 0;
        uint64_t v97 = v50 + v88;
        std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v50 + v88 - 72, (long long *)(v49 + v88 - 216));
        std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v50 + v88, (long long *)(v49 + v88 - 144));
        *(_DWORD *)(v97 + 96) = *(_DWORD *)(v49 + v88 - 48);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v50 + v88 + 104, (__n128 *)(v49 + v88 - 40));
        *(_DWORD *)(v97 + 136) = *(_DWORD *)(v49 + v88 - 8);
        v88 -= 288;
      }
      while (v49 + v88 != a7);
    }
    goto LABEL_126;
  }
  unint64_t v116 = 0;
LABEL_126:
  if (a7) {
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(&v116, a7);
  }
}

void snlp::ssu::similarity::SSUAppResult::~SSUAppResult(void **this)
{
  if (*((unsigned char *)this + 272) && *((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 18));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

float snlp::ssu::similarity::SSUSimilaritySearchApp::computeCalibratedScore(snlp::ssu::similarity::SSUSimilaritySearchApp *this, float a2, float a3)
{
  return 1.0 / (expf(-(float)(*((float *)this + 2) * (float)(a3 - a2))) + 1.0);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v231[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v6 = os_signpost_id_generate(v5);
  uint64_t v7 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Encoder Inference", "", buf, 2u);
    }
  }
  long long v9 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encoder Inference\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPaddingMask((void *)a2, &v217);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPositionIds(a2, &v213);
  memset(v203, 0, sizeof(v203));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v203, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  memset(v204, 0, sizeof(v204));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v204, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  memset(v205, 0, sizeof(v205));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v205, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  memset(v206, 0, sizeof(v206));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v206, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  memset(v207, 0, sizeof(v207));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v207, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  memset(v208, 0, sizeof(v208));
  uint64_t v122 = a2;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v208, *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 2);
  memset(v209, 0, sizeof(v209));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v209, v217, (uint64_t)v218, (v218 - (unsigned char *)v217) >> 3);
  memset(v210, 0, sizeof(v210));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v210, v219, (uint64_t)v220, (v220 - (unsigned char *)v219) >> 2);
  memset(v211, 0, sizeof(v211));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v211, v213, (uint64_t)v214, (v214 - (unsigned char *)v213) >> 3);
  memset(v212, 0, sizeof(v212));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v212, v215, (uint64_t)v216, (v216 - (unsigned char *)v215) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::forward(*(E5RT::ExecutionStream ***)(a1 + 200), (const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v203, &v195);
  unint64_t v10 = *((void *)v199 + 1);
  long long v11 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v12 = v11;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v12, OS_SIGNPOST_INTERVAL_END, v6, "Encoder Inference", "", buf, 2u);
    }
  }
  long long v13 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEFAULT, "END \"Encoder Inference\"", buf, 2u);
  }
  long long v14 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v15 = os_signpost_id_generate(v14);
  uint64_t v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Decoder Inference", "", buf, 2u);
    }
  }
  uint64_t v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"Decoder Inference\"", buf, 2u);
  }
  unint64_t v19 = operator new(8uLL);
  void *v19 = 1;
  Networkfloat Config = nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(a1, (unsigned __int8 *)(a1 + 152));
  unint64_t v116 = v15 - 1;
  uint64_t v21 = (float *)operator new(4uLL);
  *uint64_t v21 = (float)NetworkConfig;
  long long v22 = operator new(8uLL);
  *long long v22 = 1;
  long long v119 = operator new(4uLL);
  *long long v119 = 0;
  unint64_t v23 = operator new(0x10uLL);
  os_signpost_id_t spid = v15;
  size_t v192 = v23 + 2;
  *unint64_t v23 = 1;
  v23[1] = v10;
  char v190 = v23;
  uint64_t v191 = v23 + 2;
  *(_DWORD *)std::string buf = 0;
  long long v118 = v21;
  std::vector<float>::vector(&v193, v10, buf);
  uint64_t v185 = 0;
  uint64_t v184 = 0;
  uint64_t v186 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v184, *(const void **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
  int v188 = 0;
  int v187 = 0;
  uint64_t v189 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v187, *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  int v125 = nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(a1, (unsigned __int8 *)(a1 + 176));
  int v182 = 0;
  uint64_t v181 = 0;
  unint64_t v183 = 0;
  uint64_t v168 = 0;
  *(void *)std::string buf = 0;
  uint64_t v169 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v19, (uint64_t)(v19 + 1), 1uLL);
  memset(v170, 0, sizeof(v170));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v170, v21, (uint64_t)(v21 + 1), 1uLL);
  memset(v171, 0, sizeof(v171));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v171, v199, (uint64_t)v200, (v200 - (unsigned char *)v199) >> 3);
  memset(v172, 0, sizeof(v172));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v172, v201, (uint64_t)v202, (v202 - (unsigned char *)v201) >> 2);
  memset(v173, 0, sizeof(v173));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v173, v190, (uint64_t)v191, (v191 - (unsigned char *)v190) >> 3);
  memset(v174, 0, sizeof(v174));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v174, v193, (uint64_t)v194, (v194 - (unsigned char *)v193) >> 2);
  memset(v175, 0, sizeof(v175));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v175, v195, (uint64_t)v196, (v196 - (unsigned char *)v195) >> 3);
  uint64_t v123 = a3;
  memset(v176, 0, sizeof(v176));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v176, v197, (uint64_t)v198, (v198 - (unsigned char *)v197) >> 2);
  memset(v177, 0, sizeof(v177));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v177, v22, (uint64_t)(v22 + 1), 1uLL);
  memset(v178, 0, sizeof(v178));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v178, v119, (uint64_t)(v119 + 1), 1uLL);
  memset(v179, 0, sizeof(v179));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v179, v184, (uint64_t)v185, (v185 - (unsigned char *)v184) >> 3);
  memset(v180, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v180, v187, (uint64_t)v188, (v188 - (unsigned char *)v187) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(*(E5RT::ExecutionStreamOperation ***)(a1 + 208), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf, v162);
  long long v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(a2 + 192);
    *(_DWORD *)BOOL v221 = 134217984;
    *(void *)&v221[4] = v25;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "Running beam search with beamWidth=%lu", v221, 0xCu);
  }
  unint64_t v26 = *(void *)(a2 + 192);
  v160[0] = (uint64_t)(v163[1] - v163[0]) >> 2;
  v160[1] = v26;
  *(_DWORD *)BOOL v221 = 0;
  std::vector<float>::vector(v161, v160[0], v221);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v160, (uint64_t)v163, v221);
  uint64_t v27 = *(void **)(a1 + 288);
  if (v27)
  {
    *(void *)(a1 + 296) = v27;
    operator delete(v27);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
  }
  long long v117 = v19;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)v221;
  *(void *)(a1 + 304) = v222;
  char v121 = (void **)(a1 + 288);
  nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v160, a1 + 288, &v158);
  long long v28 = v158;
  long long v29 = v159;
  if (v158 != v159)
  {
    do
    {
      uint64_t v30 = *v28;
      BOOL v31 = *v28 == v125 || *(void *)(a1 + 216) == 1;
      LOBYTE(v150[0]) = v31;
      uint64_t v32 = operator new(8uLL);
      void *v32 = v30;
      v143[1] = v32 + 1;
      v144 = (char *)(v32 + 1);
      v143[0] = v32;
      uint64_t v33 = v28 + 1;
      nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v221, (uint64_t)v143, v33, v150, (uint64_t)&v164, (uint64_t)&v165, (uint64_t)&v166);
      operator delete(v32);
      uint64_t v34 = v182;
      if ((unint64_t)v182 >= v183)
      {
        uint64_t v36 = 0x34F72C234F72C235 * ((v182 - v181) >> 3);
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) > 0x11A7B9611A7B961) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x69EE58469EE5846ALL * ((uint64_t)(v183 - (void)v181) >> 3) > v37) {
          unint64_t v37 = 0x69EE58469EE5846ALL * ((uint64_t)(v183 - (void)v181) >> 3);
        }
        if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v183 - (void)v181) >> 3)) >= 0x8D3DCB08D3DCB0) {
          unint64_t v38 = 0x11A7B9611A7B961;
        }
        else {
          unint64_t v38 = v37;
        }
        uint64_t v146 = &v183;
        if (v38) {
          unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v38);
        }
        else {
          uint64_t v39 = 0;
        }
        v143[0] = (void *)v38;
        v143[1] = (void *)(v38 + 232 * v36);
        v144 = (char *)v143[1];
        unint64_t v145 = v38 + 232 * v39;
        nlv4_inference_orchestrator::inference_engine::Trail::Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143[1], (const nlv4_inference_orchestrator::inference_engine::Trail *)v221);
        v144 += 232;
        std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v181, v143);
        unint64_t v35 = v182;
        std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v143);
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v182, (const nlv4_inference_orchestrator::inference_engine::Trail *)v221);
        unint64_t v35 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v34 + 232);
      }
      int v182 = v35;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v221);
      long long v28 = v33 + 2;
    }
    while (v28 != v29);
  }
  uint64_t v40 = v122;
  if (*(void *)(a1 + 216) >= 2uLL)
  {
    uint64_t v41 = 1;
    while (2)
    {
      uint64_t v115 = v41;
      uint64_t v156 = 0;
      v155 = 0;
      v157[0] = 0;
      long long v42 = v181;
      long long v43 = v182;
      long long v120 = v182;
      if (v181 != v182)
      {
        do
        {
          if (*((unsigned char *)v42 + 224))
          {
            uint64_t v44 = v156;
            if ((unint64_t)v156 >= v157[0])
            {
              uint64_t v77 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) > 0x11A7B9611A7B961) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3) > v78) {
                unint64_t v78 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3);
              }
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (void)v155) >> 3)) >= 0x8D3DCB08D3DCB0) {
                unint64_t v79 = 0x11A7B9611A7B961;
              }
              else {
                unint64_t v79 = v78;
              }
              int v224 = v157;
              if (v79) {
                unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v79);
              }
              else {
                uint64_t v80 = 0;
              }
              *(void *)BOOL v221 = v79;
              *(void *)&v221[8] = v79 + 232 * v77;
              BOOL v222 = *(char **)&v221[8];
              v223 = (char *)(v79 + 232 * v80);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*(nlv4_inference_orchestrator::inference_engine::Trail **)&v221[8], v42);
              v222 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, v221);
              long long v45 = v156;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v221);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, v42);
              long long v45 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v44 + 232);
            }
            uint64_t v156 = v45;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v45, 0x34F72C234F72C235 * ((v45 - v155) >> 3));
          }
          else
          {
            nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction(v42, v221);
            nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v42, v225);
            nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v42, v226);
            memset(v227, 0, sizeof(v227));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v227, v195, (uint64_t)v196, (v196 - (unsigned char *)v195) >> 3);
            memset(v228, 0, sizeof(v228));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v228, v197, (uint64_t)v198, (v198 - (unsigned char *)v197) >> 2);
            nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v42, v229);
            memset(v230, 0, sizeof(v230));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v230, v184, (uint64_t)v185, (v185 - (unsigned char *)v184) >> 3);
            memset(v231, 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v231, v187, (uint64_t)v188, (v188 - (unsigned char *)v187) >> 2);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(*(E5RT::ExecutionStreamOperation ***)(a1 + 208), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)v221, v150);
            *(void *)(a1 + 296) = *(void *)(a1 + 288);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v160, (uint64_t)&v151, v143);
            uint64_t v46 = *v121;
            if (*v121)
            {
              *(void *)(a1 + 296) = v46;
              operator delete(v46);
              *char v121 = 0;
              *(void *)(a1 + 296) = 0;
              *(void *)(a1 + 304) = 0;
            }
            *(_OWORD *)(a1 + 288) = *(_OWORD *)v143;
            *(void *)(a1 + 304) = v144;
            nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v160, (uint64_t)v121, &v148);
            v143[0] = 0;
            v143[1] = 0;
            v144 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *((const void **)v42 + 25), *((void *)v42 + 26), (uint64_t)(*((void *)v42 + 26) - *((void *)v42 + 25)) >> 3);
            long long v47 = v143[0];
            long long v48 = v143[1];
            unint64_t v49 = *(void *)(a1 + 216);
            if (v143[0])
            {
              v143[1] = v143[0];
              operator delete(v143[0]);
            }
            uint64_t v50 = (float *)v148;
            int v51 = v149;
            if (v148 != v149)
            {
              unint64_t v52 = (v48 - v47) >> 3;
              float v53 = *(float *)v42;
              do
              {
                if (*(void *)v50 == v125 || v52 >= v49)
                {
                  float v147 = v53 + v50[2];
                  size_t v140 = 0;
                  long long v141 = 0;
                  uint64_t v142 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v140, *((const void **)v42 + 25), *((void *)v42 + 26), (uint64_t)(*((void *)v42 + 26) - *((void *)v42 + 25)) >> 3);
                  char v139 = 1;
                  nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v42, &v134);
                  nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v42, &v129);
                  nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v42, v126);
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v143, (uint64_t)&v140, &v147, &v139, (uint64_t)&v134, (uint64_t)&v129, (uint64_t)v126);
                  if (__p)
                  {
                    uint64_t v128 = __p;
                    operator delete(__p);
                  }
                  if (v126[0])
                  {
                    v126[1] = v126[0];
                    operator delete(v126[0]);
                  }
                  if (v132)
                  {
                    long long v133 = v132;
                    operator delete(v132);
                  }
                  if (v129)
                  {
                    uint64_t v130 = (char *)v129;
                    operator delete(v129);
                  }
                  if (v137)
                  {
                    long long v138 = v137;
                    operator delete(v137);
                  }
                  if (v134)
                  {
                    uint64_t v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)v134;
                    operator delete(v134);
                  }
                  if (v140)
                  {
                    long long v141 = v140;
                    operator delete(v140);
                  }
                  long long v55 = v156;
                  if ((unint64_t)v156 >= v157[0])
                  {
                    uint64_t v65 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
                    unint64_t v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) > 0x11A7B9611A7B961) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3) > v66) {
                      unint64_t v66 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3);
                    }
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (void)v155) >> 3)) >= 0x8D3DCB08D3DCB0) {
                      unint64_t v67 = 0x11A7B9611A7B961;
                    }
                    else {
                      unint64_t v67 = v66;
                    }
                    long long v138 = v157;
                    if (v67) {
                      unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v67);
                    }
                    else {
                      uint64_t v68 = 0;
                    }
                    long long v134 = (void *)v67;
                    uint64_t v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v67 + 232 * v65);
                    long long v136 = v135;
                    uint64_t v137 = (void *)(v67 + 232 * v68);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v135, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    long long v136 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v136 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, &v134);
                    uint64_t v56 = v156;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v134);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    uint64_t v56 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v55 + 232);
                  }
                  uint64_t v156 = v56;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v56, 0x34F72C234F72C235 * ((v56 - v155) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                }
                else
                {
                  *(float *)uint64_t v126 = v53 + v50[2];
                  __int16 v129 = 0;
                  uint64_t v130 = 0;
                  long long v131 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v129, *((const void **)v42 + 25), *((void *)v42 + 26), (uint64_t)(*((void *)v42 + 26) - *((void *)v42 + 25)) >> 3);
                  long long v57 = v130;
                  if (v130 >= v131)
                  {
                    unint64_t v59 = (char *)v129;
                    uint64_t v60 = (v130 - (unsigned char *)v129) >> 3;
                    unint64_t v61 = v60 + 1;
                    if ((unint64_t)(v60 + 1) >> 61) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v62 = v131 - (unsigned char *)v129;
                    if ((v131 - (unsigned char *)v129) >> 2 > v61) {
                      unint64_t v61 = v62 >> 2;
                    }
                    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v63 = v61;
                    }
                    if (v63)
                    {
                      long long v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v63);
                      unint64_t v59 = (char *)v129;
                      long long v57 = v130;
                    }
                    else
                    {
                      long long v64 = 0;
                    }
                    long long v69 = &v64[8 * v60];
                    *(void *)long long v69 = *(void *)v50;
                    uint64_t v58 = v69 + 8;
                    while (v57 != v59)
                    {
                      uint64_t v70 = *((void *)v57 - 1);
                      v57 -= 8;
                      *((void *)v69 - 1) = v70;
                      v69 -= 8;
                    }
                    __int16 v129 = v69;
                    uint64_t v130 = v58;
                    long long v131 = &v64[8 * v63];
                    if (v59) {
                      operator delete(v59);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v130 = *(void *)v50;
                    uint64_t v58 = v57 + 8;
                  }
                  uint64_t v130 = v58;
                  LOBYTE(v134) = 0;
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v143, (uint64_t)&v129, v126, &v134, (uint64_t)&v152, (uint64_t)&v153, (uint64_t)&v154);
                  long long v71 = v156;
                  if ((unint64_t)v156 >= v157[0])
                  {
                    uint64_t v73 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
                    unint64_t v74 = v73 + 1;
                    if ((unint64_t)(v73 + 1) > 0x11A7B9611A7B961) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3) > v74) {
                      unint64_t v74 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (void)v155) >> 3);
                    }
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (void)v155) >> 3)) >= 0x8D3DCB08D3DCB0) {
                      unint64_t v75 = 0x11A7B9611A7B961;
                    }
                    else {
                      unint64_t v75 = v74;
                    }
                    long long v138 = v157;
                    if (v75) {
                      unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v75);
                    }
                    else {
                      uint64_t v76 = 0;
                    }
                    long long v134 = (void *)v75;
                    uint64_t v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v75 + 232 * v73);
                    long long v136 = v135;
                    uint64_t v137 = (void *)(v75 + 232 * v76);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v135, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    long long v136 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v136 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, &v134);
                    long long v72 = v156;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v134);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    long long v72 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v71 + 232);
                  }
                  uint64_t v156 = v72;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v72, 0x34F72C234F72C235 * ((v72 - v155) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                  if (v129)
                  {
                    uint64_t v130 = (char *)v129;
                    operator delete(v129);
                  }
                }
                v50 += 4;
              }
              while (v50 != v51);
              uint64_t v50 = (float *)v148;
            }
            uint64_t v40 = v122;
            long long v43 = v120;
            if (v50) {
              operator delete(v50);
            }
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v150);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)v221);
          }
          long long v42 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 + 232);
        }
        while (v42 != v43);
        long long v42 = v182;
        long long v81 = v181;
        if (v182 != v181)
        {
          do
          {
            long long v42 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 - 232);
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail(v42);
          }
          while (v42 != v81);
          long long v42 = v81;
        }
      }
      int v182 = v42;
      unint64_t v82 = *(void *)(v40 + 192);
      if (v82)
      {
        unint64_t v83 = 0;
        long long v84 = v156;
        do
        {
          uint64_t v85 = v155;
          if (v155 != v84)
          {
            long long v86 = v182;
            if ((unint64_t)v182 >= v183)
            {
              uint64_t v88 = 0x34F72C234F72C235 * ((v182 - v181) >> 3);
              unint64_t v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) > 0x11A7B9611A7B961) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              if (0x69EE58469EE5846ALL * ((uint64_t)(v183 - (void)v181) >> 3) > v89) {
                unint64_t v89 = 0x69EE58469EE5846ALL * ((uint64_t)(v183 - (void)v181) >> 3);
              }
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v183 - (void)v181) >> 3)) >= 0x8D3DCB08D3DCB0) {
                unint64_t v90 = 0x11A7B9611A7B961;
              }
              else {
                unint64_t v90 = v89;
              }
              int v224 = &v183;
              if (v90) {
                unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v90);
              }
              else {
                uint64_t v91 = 0;
              }
              *(void *)BOOL v221 = v90;
              *(void *)&v221[8] = v90 + 232 * v88;
              BOOL v222 = *(char **)&v221[8];
              v223 = (char *)(v90 + 232 * v91);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*(nlv4_inference_orchestrator::inference_engine::Trail **)&v221[8], v85);
              v222 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v181, v221);
              long long v87 = v182;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v221);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v182, v155);
              long long v87 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v86 + 232);
            }
            int v182 = v87;
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v156, 0x34F72C234F72C235 * ((v156 - v155) >> 3));
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v156 - 232));
            uint64_t v156 = v84;
            unint64_t v82 = *(void *)(v40 + 192);
          }
          ++v83;
        }
        while (v83 < v82);
        long long v42 = v182;
      }
      for (uint64_t i = v181; ; uint64_t i = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)i + 232))
      {
        if (i == v42)
        {
          *(void *)BOOL v221 = &v155;
          std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)v221);
          goto LABEL_156;
        }
        if (!*((unsigned char *)i + 224)) {
          break;
        }
      }
      *(void *)BOOL v221 = &v155;
      std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)v221);
      uint64_t v41 = v115 + 1;
      if (*(void *)(a1 + 216) > (unint64_t)(v115 + 1)) {
        continue;
      }
      break;
    }
  }
LABEL_156:
  uint64_t v93 = SNLPOSLoggerForCategory(7);
  if (v116 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v94 = v93;
    if (os_signpost_enabled(v93))
    {
      *(_WORD *)BOOL v221 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v94, OS_SIGNPOST_INTERVAL_END, spid, "Decoder Inference", "", v221, 2u);
    }
  }
  char v95 = SNLPOSLoggerForCategory(0);
  long long v96 = v123;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v221 = 0;
    _os_log_impl(&dword_1C8DA9000, v95, OS_LOG_TYPE_DEFAULT, "END \"Decoder Inference\"", v221, 2u);
  }
  *uint64_t v123 = 0;
  v123[1] = 0;
  v123[2] = 0;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(v123);
  uint64_t v97 = v181;
  for (j = v182; v97 != j; uint64_t v97 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v97 + 232))
  {
    int v99 = *(_DWORD *)v97;
    v143[0] = 0;
    v143[1] = 0;
    v144 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *((const void **)v97 + 25), *((void *)v97 + 26), (uint64_t)(*((void *)v97 + 26) - *((void *)v97 + 25)) >> 3);
    long long v100 = v143[0];
    uint64_t v101 = v143[1];
    long long v102 = v144;
    v143[1] = 0;
    v144 = 0;
    v143[0] = 0;
    unint64_t v103 = v96[1];
    unint64_t v104 = v96[2];
    if (v103 >= v104)
    {
      uint64_t v106 = *v96;
      uint64_t v107 = (uint64_t)(v103 - *v96) >> 5;
      unint64_t v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 59) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v109 = v104 - v106;
      if (v109 >> 4 > v108) {
        unint64_t v108 = v109 >> 4;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v110 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      int v224 = (unint64_t *)(v123 + 2);
      uint64_t v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v110);
      uint64_t v112 = &v111[32 * v107];
      *(void *)BOOL v221 = v111;
      *(void *)&v221[8] = v112;
      v223 = &v111[32 * v113];
      *(_DWORD *)uint64_t v112 = v99;
      *((void *)v112 + 1) = v100;
      *((void *)v112 + 2) = 0;
      *((void *)v112 + 2) = v101;
      *((void *)v112 + 3) = v102;
      BOOL v222 = v112 + 32;
      long long v96 = v123;
      std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(v123, v221);
      uint64_t v105 = v123[1];
      std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer((uint64_t)v221);
    }
    else
    {
      *(_DWORD *)unint64_t v103 = v99;
      *(void *)(v103 + 8) = v100;
      *(void *)(v103 + 16) = v101;
      uint64_t v105 = v103 + 32;
      *(void *)(v103 + 24) = v102;
    }
    v96[1] = v105;
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
  }
  if (v158) {
    operator delete(v158);
  }
  if (v161[0])
  {
    v161[1] = v161[0];
    operator delete(v161[0]);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v162);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf);
  *(void *)std::string buf = &v181;
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v187)
  {
    int v188 = v187;
    operator delete(v187);
  }
  if (v184)
  {
    uint64_t v185 = v184;
    operator delete(v184);
  }
  if (v193)
  {
    BOOL v194 = v193;
    operator delete(v193);
  }
  if (v190)
  {
    uint64_t v191 = v190;
    operator delete(v190);
  }
  operator delete(v119);
  operator delete(v22);
  operator delete(v118);
  operator delete(v117);
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v197)
  {
    std::string::size_type v198 = v197;
    operator delete(v197);
  }
  if (v195)
  {
    unint64_t v196 = v195;
    operator delete(v195);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v203);
  if (v215)
  {
    int64_t v216 = v215;
    operator delete(v215);
  }
  if (v213)
  {
    uint64_t v214 = v213;
    operator delete(v213);
  }
  if (v219)
  {
    int v220 = v219;
    operator delete(v219);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
}

void sub_1C8F1D9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  uint64_t v17 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v17;
    operator delete(v17);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x3B0]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&STACK[0x470]);
  STACK[0x470] = (unint64_t)&STACK[0x598];
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
  uint64_t v18 = (void *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    STACK[0x5D0] = (unint64_t)v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)STACK[0x5B0];
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = (unint64_t)v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)STACK[0x5F8];
  if (STACK[0x5F8])
  {
    STACK[0x600] = (unint64_t)v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v21;
    operator delete(v21);
  }
  operator delete(a16);
  operator delete(a13);
  operator delete(a15);
  operator delete(a14);
  long long v22 = (void *)STACK[0x658];
  if (STACK[0x658])
  {
    STACK[0x660] = (unint64_t)v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)STACK[0x640];
  if (STACK[0x640])
  {
    STACK[0x648] = (unint64_t)v23;
    operator delete(v23);
  }
  long long v24 = (void *)STACK[0x628];
  if (STACK[0x628])
  {
    STACK[0x630] = (unint64_t)v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v25;
    operator delete(v25);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&STACK[0x670]);
  unint64_t v26 = (void *)STACK[0x778];
  if (STACK[0x778])
  {
    STACK[0x780] = (unint64_t)v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)STACK[0x760];
  if (STACK[0x760])
  {
    STACK[0x768] = (unint64_t)v27;
    operator delete(v27);
  }
  long long v28 = (void *)STACK[0x7A8];
  if (STACK[0x7A8])
  {
    STACK[0x7B0] = (unint64_t)v28;
    operator delete(v28);
  }
  long long v29 = (void *)STACK[0x790];
  if (STACK[0x790])
  {
    STACK[0x798] = (unint64_t)v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPaddingMask(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v3 = (float *)a1[21];
  if (v3 == (float *)a1[22] || (uint64_t v4 = a1[12], (unint64_t)(a1[13] - v4) <= 0xF))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "The padding mask could not be created because there were no utterance length data or context data provided.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v12 >= 0) {
      p_std::string p = (char *)&__p;
    }
    else {
      p_std::string p = (char *)__p;
    }
    std::string::basic_string[abi:ne180100]<0>(&v9, p_p);
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t v5 = *(void *)(v4 + 8) + (unint64_t)*v3;
  LODWORD(v9.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&__p, v5, &v9);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  os_signpost_id_t v6 = operator new(0x10uLL);
  a2[1] = v6 + 2;
  a2[2] = v6 + 2;
  void *v6 = 1;
  v6[1] = v5;
  *a2 = v6;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, __p, (uint64_t)v11, (v11 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_1C8F1E148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  long long v22 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v22;
    operator delete(v22);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPositionIds(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v3 = (unint64_t)**(float **)(a1 + 168);
  std::vector<float>::vector(&__p, v3);
  uint64_t v4 = __p;
  uint64_t v5 = (uint64_t)v10;
  if (__p != v10)
  {
    float v6 = 0.0;
    uint64_t v7 = (float *)__p;
    do
    {
      *v7++ = v6;
      float v6 = v6 + 1.0;
    }
    while (v7 != (float *)v5);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v8 = operator new(0x10uLL);
  a2[1] = v8 + 2;
  a2[2] = v8 + 2;
  void *v8 = 1;
  v8[1] = v3;
  *a2 = v8;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_1C8F1E280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 248);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 248), a2))
  {
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
    if (!v4) {
      goto LABEL_31;
    }
    if (*((_DWORD *)v4 + 16) == 1)
    {
      uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
      if (v5)
      {
        if (*((_DWORD *)v5 + 16) != 1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        return *((unsigned int *)v5 + 10);
      }
LABEL_31:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, (unsigned __int8 *)__p);
  if (v7 && *((_DWORD *)v7 + 16) == 4)
  {
    if ((char)v7[63] < 0) {
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)v7 + 5), *((void *)v7 + 6));
    }
    else {
      std::string v16 = *(std::string *)(v7 + 40);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>();
  uint64_t v8 = std::string::append(&v15, ".\n");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = std::string::append(&v19, "Note that only parameters of unsigned integer type are currently expected by NLv4Parser.  This issue will likely cause NLv4 parser inference to fail.");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v18 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  char v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    long long v13 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    long long v14 = __p;
    if (v18 < 0) {
      long long v14 = (void **)__p[0];
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v19, 0x16u);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C8F1E50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::~EspressoTransformerE5MLModel(nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel *this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::~EspressoTransformerE5MLModel(this);
  JUMPOUT(0x1CB775C40);
}

{
  void *v2;

  *(void *)this = &unk_1F235F1C0;
  float v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 248);
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100]((uint64_t *)this + 26);
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100]((uint64_t *)this + 25);
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

snlp::ssu::matcher::SSUMatcher *std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100](snlp::ssu::matcher::SSUMatcher **a1, snlp::ssu::matcher::SSUMatcher *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    snlp::ssu::matcher::SSUMatcher::~SSUMatcher(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void snlp::ssu::matcher::SSUMatcher::~SSUMatcher(snlp::ssu::matcher::SSUMatcher *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 344));
  float v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  float v6 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1C8F1F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
  a42 = (uint64_t)&a26;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (a41)
  {
    a26 = (uint64_t)&a38;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  }
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1C8F1F4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8F1FA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  snlp::ssu::matcher::SSULoggedResponse::~SSULoggedResponse((snlp::ssu::matcher::SSULoggedResponse *)&a15);
  MEMORY[0x1CB773D90](&a19);
  uint64_t v30 = a27;
  a27 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }

  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSULoggedResponse::~SSULoggedResponse(snlp::ssu::matcher::SSULoggedResponse *this)
{
  float v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void sub_1C8F202BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a53);
  a53 = &a32;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      uint64_t v5 = *(void **)(a1 + 32);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      if (v5)
      {
        *(void *)(a1 + 40) = v5;
        operator delete(v5);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
      }
      __n128 result = (__n128)a2[2];
      *(__n128 *)(a1 + 32) = result;
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 6) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    if (v7)
    {
      *(void *)(a1 + 40) = v7;
      operator delete(v7);
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    __n128 result = (__n128)a2[2];
    *(__n128 *)(a1 + 32) = result;
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const*,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const*,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo::~SSUBackgroundUpdateAppInfo(snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo *this)
{
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1C8F20A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](v38 - 160);
  objc_sync_exit(v35);

  _Unwind_Resume(a1);
}

void sub_1C8F20F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](v42 - 176);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a20);
  objc_sync_exit(v41);

  _Unwind_Resume(a1);
}

void sub_1C8F212FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void sub_1C8F2183C()
{
  __cxa_end_catch();
  JUMPOUT(0x1C8F218E8);
}

void sub_1C8F21860()
{
  __cxa_end_catch();
  JUMPOUT(0x1C8F218E8);
}

void sub_1C8F2188C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C8F2189C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100]((snlp::ssu::matcher::SSUMatcher **)va, 0);

  JUMPOUT(0x1C8F218E8);
}

void sub_1C8F218B4()
{
}

void sub_1C8F218BC()
{
}

void sub_1C8F218C4()
{
}

void sub_1C8F218CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }

  if (a33 < 0) {
    operator delete(a28);
  }

  JUMPOUT(0x1C8F21958);
}

void sub_1C8F218D4()
{
}

void sub_1C8F218DC()
{
  JUMPOUT(0x1C8F21964);
}

void sub_1C8F218E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,snlp::ssu::matcher::SSUMatcher *a27,void *a28)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a22);
  std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100](&a27, 0);
  snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(&a28);

  _Unwind_Resume(a1);
}

void sub_1C8F21918()
{
  JUMPOUT(0x1C8F21920);
}

void SentencepieceModelLoadingError::~SentencepieceModelLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

void nl_sentencepiece::SentencepieceModel::SentencepieceModel()
{
}

void sub_1C8F21DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  _Unwind_Resume(a1);
}

void nl_sentencepiece::SentencepieceModel::encodeUtterance(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = (uint64_t *)*a3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v6 = a3[1];
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t *, uint64_t, void *))(*(void *)a2 + 136))(v7, a2, v5, v6, a1);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)v7);
}

void sub_1C8F21ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nl_featurization::bio::BilouEncoder::encode(uint64_t a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X2>, void **a4@<X8>)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (*(char *)(a1 + 23) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v47, *(const std::basic_string<char16_t>::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::basic_string<char16_t> v47 = *(std::basic_string<char16_t> *)a1;
  }
  std::unordered_set<std::basic_string<char16_t>>::unordered_set((uint64_t)&v42, a1 + 24);
  uint64_t v10 = (v8 - v9) >> 3;
  unint64_t v11 = 0x8E38E38E38E38E39 * v10;
  unint64_t v48 = 0x8E38E38E38E38E39 * v10;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v40 = &v49;
  char v41 = 0;
  if (v8 != v9)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](&v49, 0x8E38E38E38E38E39 * v10);
    char v12 = (char *)v50;
    size_t v13 = 24 * ((24 * v11 - 24) / 0x18) + 24;
    bzero(v50, v13);
    uint64_t v50 = &v12[v13];
  }
  long long v52 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
  std::basic_string<char16_t>::size_type v14 = v47.__r_.__value_.__r.__words[2];
  memset(&v47, 0, sizeof(v47));
  uint64_t v15 = v42;
  unint64_t v16 = v43;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  std::basic_string<char16_t>::size_type v53 = v14;
  uint64_t v54 = v15;
  unint64_t v55 = v16;
  v56[0] = v44;
  v56[1] = v45;
  int v57 = v46;
  if (v45)
  {
    unint64_t v17 = *(void *)(v44 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(v15 + 8 * v17) = v56;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v58, "B");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v59, "I");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v60, "L");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v61, "O");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v62, "U");
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&v42);
  int64_t v18 = *a2;
  std::string v19 = a2[1];
  while (v18 != v19)
  {
    uint64_t v20 = v18 + 2;
    nl_featurization::bio::TagBucketList::addBIOUL((int8x8_t *)&v48, (uint64_t)(v18 + 2), *v18, v18[1]);
    int64_t v18 = v20 + 3;
  }
  nl_featurization::bio::TagBucketList::getBucketLists((uint64_t)&v48, &v40);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v22 = *a3;
  uint64_t v21 = a3[1];
  unint64_t v37 = a4;
  LOBYTE(v38) = 0;
  if (v21 != v22)
  {
    unint64_t v23 = 0x8E38E38E38E38E39 * ((v21 - v22) >> 3);
    if (v23 >= 0x38E38E38E38E38FLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v23);
    uint64_t v25 = 0;
    *a4 = v24;
    a4[1] = v24;
    a4[2] = &v24[72 * v26];
    do
    {
      uint64_t v27 = &v24[v25];
      long long v28 = (long long *)(v22 + v25);
      if (*(char *)(v22 + v25 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&v24[v25], *(const std::basic_string<char16_t>::value_type **)v28, *((void *)v28 + 1));
      }
      else
      {
        long long v29 = *v28;
        *((void *)v27 + 2) = *((void *)v28 + 2);
        *(_OWORD *)uint64_t v27 = v29;
      }
      long long v30 = *(_OWORD *)(v22 + v25 + 24);
      int v31 = *(_DWORD *)(v22 + v25 + 39);
      *(void *)&v24[v25 + 48] = 0;
      uint64_t v32 = (uint64_t)&v24[v25 + 48];
      *(_DWORD *)(v32 - 9) = v31;
      *(_OWORD *)(v32 - 24) = v30;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 16) = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v32, *(long long **)(v22 + v25 + 48), *(long long **)(v22 + v25 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v22 + v25 + 56) - *(void *)(v22 + v25 + 48)) >> 3));
      v25 += 72;
    }
    while (v22 + v25 != v21);
    uint64_t v33 = (char *)*a4;
    a4[1] = &v24[v25];
    if (&v24[v25] != v33)
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 56;
      do
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        unint64_t v37 = 0;
        std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v37, (long long *)v40[v34], (long long *)v40[v34 + 1], 0xAAAAAAAAAAAAAAABLL * ((v40[v34 + 1] - v40[v34]) >> 3));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)((char *)*a4 + v36 - 8));
        std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>((uint64_t *)((char *)*a4 + v36 - 8), *(std::basic_string<char16_t> **)((char *)*a4 + v36), (long long *)v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
        unint64_t v63 = &v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        ++v35;
        v36 += 72;
        v34 += 3;
      }
      while (v35 < 0x8E38E38E38E38E39 * (((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3));
    }
  }
  unint64_t v37 = (void **)&v40;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](&v37);
  nl_featurization::bio::TagBucketList::~TagBucketList((void **)&v48);
}

void sub_1C8F222C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  float v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<nl_featurization::nlv4_types::Token>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nl_featurization::bio::TagBucketList::~TagBucketList(void **this)
{
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  float v2 = this + 1;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<nl_featurization::nlv4_types::Token>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    float v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::SpanProcessor(uint64_t a1, uint64_t *a2)
{
  return a1;
}

{
  nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie(a2, a1);
  return a1;
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  memset(v27, 0, sizeof(v27));
  int v28 = 1065353216;
  LOBYTE(v23) = 0;
  *(_OWORD *)long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      for (uint64_t i = *(void **)(v3 + 40); i; uint64_t i = (void *)*i)
      {
        normalize((uint64_t)(i + 2), 0, &__p);
        u16strCaseFold((uint64_t)&__p, v7, (uint64_t)&v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!nl_featurization::span_matching::span_processor::validatePatternSubstring((uint64_t *)&v20, v3))
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          toString((uint64_t)(i + 2), &v18);
          unint64_t v16 = std::string::insert(&v18, 0, "Encountered invalid substring: ");
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, (const std::string *)&__p);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
        }
        unsigned int v8 = v22;
        if ((v22 & 0x80u) != 0) {
          unsigned int v8 = v21;
        }
        if (v5 <= v8) {
          unsigned int v5 = v8;
        }
        nl_featurization::pattern_trie::PatternTrie::insert(&v23, (uint64_t)&v20);
        __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v20;
        uint64_t v9 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>((uint64_t)v27, (unsigned __int16 *)&v20, (long long **)&__p);
        uint64_t v10 = (uint64_t *)(v9 + 40);
        unint64_t v11 = *((void *)v9 + 6);
        if (v11 >= *((void *)v9 + 7))
        {
          uint64_t v12 = std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(v10, (long long *)v3);
        }
        else
        {
          std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)v10, (long long *)v3);
          uint64_t v12 = v11 + 24;
        }
        *((void *)v9 + 6) = v12;
        if ((char)v22 < 0) {
          operator delete(v20);
        }
      }
      v3 += 64;
    }
    while (v3 != v4);
  }
  std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map(a2, (uint64_t)v27);
  *(unsigned char *)(a2 + 40) = v23;
  std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(a2 + 48, (uint64_t)v24);
  *(_DWORD *)(a2 + 88) = v5;
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node((void *)v25);
  size_t v13 = v24[0];
  v24[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v27);
}

void sub_1C8F2280C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v35);
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v34);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a34);
  _Unwind_Resume(a1);
}

BOOL nl_featurization::span_matching::span_processor::validatePatternSubstring(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v4 = a1[1];
    if (!v4) {
      goto LABEL_25;
    }
    uint64_t v3 = (uint64_t *)*a1;
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
    if (!*((unsigned char *)a1 + 23))
    {
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      toString(a2, &v18);
      unint64_t v16 = std::string::insert(&v18, 0, "Encountered empty normalized matching substring for label: ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v19);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
    }
  }
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = v5 + 1;
    UChar32 v7 = *((unsigned __int16 *)v3 + v5);
    if ((v7 & 0xFC00) == 0xD800 && v6 != v4)
    {
      int v9 = *((unsigned __int16 *)v3 + v6);
      BOOL v10 = (v9 & 0xFC00) == 56320;
      int v11 = v9 + (v7 << 10) - 56613888;
      unint64_t v6 = v10 ? v5 + 2 : v5 + 1;
      if (v10) {
        UChar32 v7 = v11;
      }
    }
    if (v5)
    {
      unint64_t v5 = v6;
      if (v6 < v4) {
        continue;
      }
    }
    int v12 = u_isspace(v7);
    BOOL v13 = v12 || v6 >= v4;
    unint64_t v5 = v6;
    if (v13) {
      break;
    }
  }
  return v12 == 0;
}

void sub_1C8F22A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v17 = v6;
  if (v7)
  {
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  BOOL v10 = (std::basic_string<char16_t> *)&v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  uint64_t v15 = v10;
  unint64_t v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
    BOOL v10 = v15;
  }
  else
  {
    long long v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v15 = v10 + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C8F22BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  unint64_t v5 = (uint64_t *)(a2 + 16);
  unint64_t v6 = (void *)(a1 + 16);
LABEL_2:
  while (1)
  {
    unint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      return a1;
    }
    unint64_t v7 = *((unsigned __int16 *)v5 + 8);
    unint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = *((unsigned __int16 *)v5 + 8);
        if (v8 <= v7) {
          unint64_t v2 = v7 % v8;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
      BOOL v10 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
      if (v10)
      {
        for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
        {
          unint64_t v12 = (unint64_t)i[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)i + 8) == v7) {
              goto LABEL_2;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
        }
      }
    }
    BOOL v13 = operator new(0x48uLL);
    v24[0] = v13;
    v24[1] = a1 + 16;
    char v25 = 0;
    *BOOL v13 = 0;
    v13[1] = v7;
    *((_WORD *)v13 + 8) = *((_WORD *)v5 + 8);
    *((unsigned char *)v13 + 24) = *((unsigned char *)v5 + 24);
    std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(v13 + 4, v5 + 4);
    char v25 = 1;
    float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v15 = *(float *)(a1 + 32);
    if (!v8 || (float)(v15 * (float)v8) < v14)
    {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v16 = 1;
      }
      unint64_t v17 = v16 | (2 * v8);
      unint64_t v18 = vcvtps_u32_f32(v14 / v15);
      if (v17 <= v18) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v17;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
      unint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7) {
          unint64_t v2 = v7 % v8;
        }
        else {
          unint64_t v2 = v7;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
    }
    uint64_t v20 = *(void *)a1;
    unsigned int v21 = *(void **)(*(void *)a1 + 8 * v2);
    if (v21)
    {
      *BOOL v13 = *v21;
    }
    else
    {
      *BOOL v13 = *v6;
      void *v6 = v13;
      *(void *)(v20 + 8 * v2) = v6;
      if (!*v13) {
        goto LABEL_40;
      }
      unint64_t v22 = *(void *)(*v13 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    }
    *unsigned int v21 = v13;
LABEL_40:
    v24[0] = 0;
    ++*(void *)(a1 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
  }
}

void sub_1C8F22E14(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(*(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      unint64_t v2 = (void *)*v1;
      std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v1 + 4);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::matchSpans@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  nl_featurization::span_matching::span_processor::SpanProcessor::findAndAddSpans(a1, a2, v22);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptions(v6, (uint64_t)v22, a3, &v19);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v7 = v19;
  uint64_t v8 = v20;
  if (v19 != v20)
  {
    unint64_t v9 = 0;
    BOOL v10 = (unint64_t *)(a4 + 2);
    do
    {
      int32x2_t v24 = vmovn_s64(*(int64x2_t *)(v7 + 16));
      if (*(char *)(v7 + 55) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v25, *(const std::basic_string<char16_t>::value_type **)(v7 + 32), *(void *)(v7 + 40));
        unint64_t v9 = a4[1];
      }
      else
      {
        std::basic_string<char16_t> v25 = *(std::basic_string<char16_t> *)(v7 + 32);
      }
      if (v9 >= *v10)
      {
        uint64_t v12 = (uint64_t)(v9 - *a4) >> 5;
        if ((unint64_t)(v12 + 1) >> 59) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = *v10 - *a4;
        uint64_t v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        int v26[4] = (void **)(a4 + 2);
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = v15 + 32 * v12;
        v26[0] = (void **)v15;
        v26[1] = (void **)v17;
        v26[3] = (void **)(v15 + 32 * v16);
        *(int32x2_t *)unint64_t v17 = v24;
        *(std::basic_string<char16_t> *)(v17 + 8) = v25;
        memset(&v25, 0, sizeof(v25));
        _OWORD v26[2] = (void **)(v17 + 32);
        std::vector<nl_featurization::span_matching::MatchedSpan>::__swap_out_circular_buffer(a4, v26);
        unint64_t v9 = a4[1];
        std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)v26);
      }
      else
      {
        *(int32x2_t *)unint64_t v9 = v24;
        long long v11 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v9 + 24) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)(v9 + 8) = v11;
        memset(&v25, 0, sizeof(v25));
        v9 += 32;
        a4[1] = v9;
      }
      a4[1] = v9;
      v7 += 56;
    }
    while (v7 != v8);
  }
  v26[0] = (void **)&v19;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100](v26);
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)v22);
}

void sub_1C8F2311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26)
{
  a26 = &a10;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nl_featurization::span_matching::span_processor::SpanProcessor::findAndAddSpans(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<std::basic_string<char16_t>>::reserve(&v38, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
  uint64_t v34 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)status = &v38;
  while (v4 != v5)
  {
    normalize(v4 + 16, 0, &__p);
    u16strCaseFold((uint64_t)&__p, v6, (uint64_t)&v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100]((uint64_t **)status, (long long *)&v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    v4 += 48;
  }
  status[0] = U_ZERO_ERROR;
  regexstd::string p = uregex_openC("^(\\b\\w+\\b)(\\S+)$", 0, 0, status);
  v37[0] = regexp;
  v37[1] = (URegularExpression *)MEMORY[0x1E4FBA6A0];
  if (status[0] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::basic_string<char16_t> v25 = (char *)u_errorName(status[0]);
    int v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v41, v25);
    uint64_t v27 = std::string::insert(v26, 0, "Failed to initialise the regex expression for the subtokens: ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = v38;
  uint64_t v8 = v39;
  if (v39 != v38)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    std::basic_string<char16_t>::size_type v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 1;
    do
    {
      if (!*(unsigned char *)(*v34 + 48 * v12 + 40))
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(*v34 + 48 * v12);
        __p.__r_.__value_.__r.__words[2] = v11;
        std::basic_string<char16_t>::size_type v36 = v11 + 1;
        nl_featurization::span_matching::span_processor::SpanProcessor::addSpansFromSubTokens(a1, v7 + 24 * v12, (long long *)&__p, v37, a3);
        std::basic_string<char16_t>::size_type v31 = v11 + 1;
        memset(&v41, 0, sizeof(v41));
        std::basic_string<char16_t>::reserve(&v41, *(unsigned int *)(a1 + 88));
        uint64_t v7 = v38;
        uint64_t v8 = v39;
        uint64_t v30 = v9;
        uint64_t v14 = v10;
        unint64_t v15 = v13;
        if (v12 < 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
        {
          do
          {
            uint64_t v16 = v7 + v9;
            int v17 = *(char *)(v16 + 23);
            if (v17 >= 0) {
              unint64_t v18 = (const std::basic_string<char16_t>::value_type *)v16;
            }
            else {
              unint64_t v18 = *(const std::basic_string<char16_t>::value_type **)v16;
            }
            if (v17 >= 0) {
              std::basic_string<char16_t>::size_type v19 = *(unsigned __int8 *)(v16 + 23);
            }
            else {
              std::basic_string<char16_t>::size_type v19 = *(void *)(v16 + 8);
            }
            std::basic_string<char16_t>::append(&v41, v18, v19);
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::basic_string<char16_t>::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
            }
            else {
              std::basic_string<char16_t>::size_type size = v41.__r_.__value_.__l.__size_;
            }
            std::basic_string<char16_t>::size_type v21 = *(unsigned int *)(a1 + 88);
            if (*(unsigned char *)(*v34 + v14 + 40)) {
              std::basic_string<char16_t>::size_type v22 = v11;
            }
            else {
              std::basic_string<char16_t>::size_type v22 = v11 + 1;
            }
            if (!*(unsigned char *)(*v34 + v14 + 40)
              && nl_featurization::pattern_trie::PatternTrie::search((uint64_t **)(a1 + 40), (uint64_t)&v41))
            {
              __p.__r_.__value_.__l.__size_ = *(void *)(*v34 + v14 + 8);
              std::basic_string<char16_t>::size_type v36 = v11 + 1;
              nl_featurization::span_matching::span_processor::SpanProcessor::appendMatchedSpan((void *)a1, (unsigned __int16 *)&v41, (long long *)&__p, a3);
            }
            uint64_t v7 = v38;
            uint64_t v8 = v39;
            BOOL v23 = v15++ >= 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3);
            v14 += 48;
            v9 += 24;
            BOOL v23 = v23 || size >= v21;
            std::basic_string<char16_t>::size_type v11 = v22;
          }
          while (!v23);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          uint64_t v7 = v38;
          uint64_t v8 = v39;
        }
        uint64_t v9 = v30;
        std::basic_string<char16_t>::size_type v11 = v31;
      }
      ++v12;
      ++v13;
      v10 += 48;
      v9 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  v37[0] = 0;
  if (regexp) {
    uregex_close(regexp);
  }
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C8F23504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, URegularExpression *regexp, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *a24,uint64_t a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 97) < 0)
  {
    operator delete(*(void **)(v28 - 120));
    if ((v26 & 1) == 0)
    {
LABEL_8:
      a24 = 0;
      if (regexp) {
        uregex_close(regexp);
      }
      a24 = &a26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptions(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t *a4)
{
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
  {
    if (*a3)
    {
      nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(a1, i + 1, (uint64_t)i + 40, a4);
    }
    else
    {
      uint64_t v7 = (_OWORD *)*((void *)i + 5);
      uint64_t v8 = (_OWORD *)*((void *)i + 6);
      if (v7 != v8)
      {
        unint64_t v9 = a4[1];
        do
        {
          uint64_t v10 = i + 1;
          if (v9 >= a4[2])
          {
            a1 = std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__emplace_back_slow_path<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>(a4, v7, v10);
            unint64_t v9 = a1;
          }
          else
          {
            std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__construct_one_at_end[abi:ne180100]<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>((uint64_t)a4, v7, v10);
            v9 += 56;
          }
          a4[1] = v9;
          v7 += 2;
        }
        while (v7 != v8);
      }
    }
  }
}

void std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 7;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  int64_t v8 = v6 - *(void *)a3;
  if (v6 == *(void *)a3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v8 >> 5);
    memmove(v9, v7, v8);
    uint64_t v10 = &v9[2 * (v8 >> 5)];
  }
  unint64_t v11 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 5);
  if (v10 == v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*,false>((unint64_t)v9, v10, v12, 1);
  unint64_t v13 = a4[2];
  unint64_t v14 = a4[1];
  if (v14 >= v13)
  {
    uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - *a4) >> 3);
    if ((unint64_t)(v18 + 1) > 0x492492492492492) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - *a4) >> 3);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= v18 + 1) {
      uint64_t v20 = v18 + 1;
    }
    if (v19 >= 0x249249249249249) {
      unint64_t v21 = 0x492492492492492;
    }
    else {
      unint64_t v21 = v20;
    }
    uint64_t v35 = a4 + 2;
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v24 = v21 + 56 * v18;
    v32[0] = v21;
    v32[1] = v24;
    unint64_t v33 = v24;
    unint64_t v34 = v21 + 56 * v22;
    long long v25 = v9[1];
    *(_OWORD *)unint64_t v24 = *v9;
    *(_OWORD *)(v24 + 16) = v25;
    int v26 = (std::basic_string<char16_t> *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(v26, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
      unint64_t v24 = v33;
    }
    else
    {
      long long v27 = *a2;
      *(void *)(v24 + 48) = *((void *)a2 + 2);
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    }
    unint64_t v33 = v24 + 56;
    std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__swap_out_circular_buffer(a4, v32);
    uint64_t v23 = a4[1];
    std::__split_buffer<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::~__split_buffer((uint64_t)v32);
  }
  else
  {
    long long v15 = v9[1];
    *(_OWORD *)unint64_t v14 = *v9;
    *(_OWORD *)(v14 + 16) = v15;
    uint64_t v16 = (std::basic_string<char16_t> *)(v14 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(v16, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v17 = *a2;
      *(void *)(v14 + 48) = *((void *)a2 + 2);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    uint64_t v23 = v14 + 56;
    a4[1] = v23;
  }
  a4[1] = v23;
  if (v10 != v9)
  {
    uint64_t v28 = v9;
    do
    {
      if (*((void *)v28 + 1) > *((void *)v9 + 1))
      {
        unint64_t v29 = a4[1];
        if (v29 >= a4[2])
        {
          uint64_t v30 = std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__emplace_back_slow_path<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>(a4, v28, a2);
        }
        else
        {
          std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__construct_one_at_end[abi:ne180100]<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>((uint64_t)a4, v28, a2);
          uint64_t v30 = v29 + 56;
        }
        a4[1] = v30;
        long long v31 = v28[1];
        *unint64_t v9 = *v28;
        v9[1] = v31;
      }
      v28 += 2;
    }
    while (v28 != v10);
  }
  operator delete(v9);
}

void sub_1C8F23A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::~__split_buffer((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__construct_one_at_end[abi:ne180100]<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>(uint64_t a1, _OWORD *a2, long long *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v6 = (std::basic_string<char16_t> *)(v4 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v6, *(const std::basic_string<char16_t>::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(v4 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 8) = v4 + 56;
}

void sub_1C8F23ADC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__emplace_back_slow_path<nl_featurization::span_matching::span_processor::SpanProcessor::Indices const&,std::basic_string<char16_t> const&>(uint64_t *a1, _OWORD *a2, long long *a3)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  int64_t v8 = a1 + 2;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v4;
  }
  uint64_t v20 = v8;
  if (v9) {
    unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>>(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = v9 + 56 * v3;
  v17[0] = v9;
  v17[1] = v11;
  unint64_t v18 = v11;
  unint64_t v19 = v9 + 56 * v10;
  long long v12 = a2[1];
  *(_OWORD *)unint64_t v11 = *a2;
  *(_OWORD *)(v11 + 16) = v12;
  unint64_t v13 = (std::basic_string<char16_t> *)(v11 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v13, *(const std::basic_string<char16_t>::value_type **)a3, *((void *)a3 + 1));
    unint64_t v11 = v18;
  }
  else
  {
    long long v14 = *a3;
    *(void *)(v11 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  unint64_t v18 = v11 + 56;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1C8F23C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t *std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      long long v6 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v6;
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 56;
      v3 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *__n128 result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 56;
      *(void *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 5;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v72 = *((void *)a2 - 4);
                BOOL v5 = v72 == *(void *)v11;
                BOOL v73 = v72 < *(void *)v11;
                if (v5) {
                  BOOL v73 = *((void *)a2 - 3) > *(void *)(v11 + 8);
                }
                if (v73)
                {
                  long long v168 = *(_OWORD *)v11;
                  long long v177 = *(_OWORD *)(v11 + 16);
                  long long v74 = *(a2 - 1);
                  *(_OWORD *)unint64_t v11 = *v10;
                  *(_OWORD *)(v11 + 16) = v74;
                  long long *v10 = v168;
                  *(a2 - 1) = v177;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)v11, (unint64_t *)(v11 + 32), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v11, (__n128 *)(v11 + 32), v11 + 64, (uint64_t)(a2 - 2));
                break;
              case 5uLL:
                unint64_t v75 = (long long *)(v11 + 32);
                uint64_t v76 = (long long *)(v11 + 64);
                uint64_t v77 = (long long *)(v11 + 96);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v11, (__n128 *)(v11 + 32), v11 + 64, v11 + 96);
                unint64_t v78 = *((void *)a2 - 4);
                unint64_t v79 = *(void *)(v11 + 96);
                BOOL v5 = v78 == v79;
                BOOL v80 = v78 < v79;
                if (v5) {
                  BOOL v80 = *((void *)a2 - 3) > *(void *)(v11 + 104);
                }
                if (v80)
                {
                  long long v81 = *v77;
                  long long v178 = *(_OWORD *)(v11 + 112);
                  long long v82 = *(a2 - 1);
                  long long *v77 = *v10;
                  *(_OWORD *)(v11 + 112) = v82;
                  long long *v10 = v81;
                  *(a2 - 1) = v178;
                  unint64_t v83 = *(void *)(v11 + 96);
                  unint64_t v84 = *(void *)(v11 + 64);
                  BOOL v5 = v83 == v84;
                  BOOL v85 = v83 < v84;
                  if (v5) {
                    BOOL v85 = *(void *)(v11 + 104) > *(void *)(v11 + 72);
                  }
                  if (v85)
                  {
                    long long v87 = *v76;
                    long long v86 = *(_OWORD *)(v11 + 80);
                    long long v88 = *(_OWORD *)(v11 + 112);
                    *uint64_t v76 = *v77;
                    *(_OWORD *)(v11 + 80) = v88;
                    long long *v77 = v87;
                    *(_OWORD *)(v11 + 112) = v86;
                    unint64_t v89 = *(void *)(v11 + 64);
                    unint64_t v90 = *(void *)(v11 + 32);
                    BOOL v5 = v89 == v90;
                    BOOL v91 = v89 < v90;
                    if (v5) {
                      BOOL v91 = *(void *)(v11 + 72) > *(void *)(v11 + 40);
                    }
                    if (v91)
                    {
                      long long v93 = *v75;
                      long long v92 = *(_OWORD *)(v11 + 48);
                      long long v94 = *(_OWORD *)(v11 + 80);
                      long long *v75 = *v76;
                      *(_OWORD *)(v11 + 48) = v94;
                      *uint64_t v76 = v93;
                      *(_OWORD *)(v11 + 80) = v92;
                      unint64_t v95 = *(void *)(v11 + 32);
                      BOOL v5 = v95 == *(void *)v11;
                      BOOL v96 = v95 < *(void *)v11;
                      if (v5) {
                        BOOL v96 = *(void *)(v11 + 40) > *(void *)(v11 + 8);
                      }
                      if (v96)
                      {
                        long long v169 = *(_OWORD *)v11;
                        long long v179 = *(_OWORD *)(v11 + 16);
                        long long v97 = *(_OWORD *)(v11 + 48);
                        *(_OWORD *)unint64_t v11 = *v75;
                        *(_OWORD *)(v11 + 16) = v97;
                        long long *v75 = v169;
                        *(_OWORD *)(v11 + 48) = v179;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 767)
          {
            uint64_t v98 = (long long *)(v11 + 32);
            BOOL v100 = (long long *)v11 == a2 || v98 == a2;
            if (a4)
            {
              if (!v100)
              {
                uint64_t v101 = 0;
                unint64_t v102 = v11;
                do
                {
                  unint64_t v103 = v98;
                  unint64_t v104 = *(void *)(v102 + 32);
                  unint64_t v105 = *(void *)(v102 + 40);
                  BOOL v106 = v104 < *(void *)v102;
                  if (v104 == *(void *)v102) {
                    BOOL v106 = v105 > *(void *)(v102 + 8);
                  }
                  if (v106)
                  {
                    long long v170 = *(_OWORD *)(v102 + 48);
                    uint64_t v107 = v101;
                    while (1)
                    {
                      uint64_t v108 = v11 + v107;
                      long long v109 = *(_OWORD *)(v11 + v107 + 16);
                      *(_OWORD *)(v108 + 32) = *(_OWORD *)(v11 + v107);
                      *(_OWORD *)(v108 + 48) = v109;
                      if (!v107) {
                        break;
                      }
                      unint64_t v110 = *(void *)(v108 - 32);
                      BOOL v111 = v105 > *(void *)(v108 - 24);
                      BOOL v5 = v104 == v110;
                      BOOL v112 = v104 < v110;
                      if (!v5) {
                        BOOL v111 = v112;
                      }
                      v107 -= 32;
                      if (!v111)
                      {
                        uint64_t v113 = v11 + v107 + 32;
                        goto LABEL_119;
                      }
                    }
                    uint64_t v113 = v11;
LABEL_119:
                    *(void *)uint64_t v113 = v104;
                    *(void *)(v113 + 8) = v105;
                    *(_OWORD *)(v113 + 16) = v170;
                  }
                  uint64_t v98 = v103 + 2;
                  v101 += 32;
                  unint64_t v102 = (unint64_t)v103;
                }
                while (v103 + 2 != a2);
              }
            }
            else if (!v100)
            {
              do
              {
                unint64_t v153 = (unint64_t)v98;
                unint64_t v154 = *(void *)(a1 + 32);
                unint64_t v155 = *(void *)(a1 + 40);
                BOOL v156 = v154 < *(void *)a1;
                if (v154 == *(void *)a1) {
                  BOOL v156 = v155 > *(void *)(a1 + 8);
                }
                if (v156)
                {
                  long long v173 = *(_OWORD *)(a1 + 48);
                  unint64_t v157 = v153;
                  do
                  {
                    long long v158 = *(_OWORD *)(v157 - 16);
                    *(_OWORD *)unint64_t v157 = *(_OWORD *)(v157 - 32);
                    *(_OWORD *)(v157 + 16) = v158;
                    unint64_t v159 = *(void *)(v157 - 64);
                    unint64_t v160 = *(void *)(v157 - 56);
                    v157 -= 32;
                    BOOL v161 = v155 > v160;
                    BOOL v5 = v154 == v159;
                    BOOL v162 = v154 < v159;
                    if (v5) {
                      BOOL v162 = v161;
                    }
                  }
                  while (v162);
                  *(void *)unint64_t v157 = v154;
                  *(void *)(v157 + 8) = v155;
                  *(_OWORD *)(v157 + 16) = v173;
                }
                uint64_t v98 = (long long *)(v153 + 32);
                a1 = v153;
              }
              while ((long long *)(v153 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v11 != a2)
            {
              int64_t v114 = (v13 - 2) >> 1;
              int64_t v115 = v114;
              do
              {
                int64_t v116 = v115;
                if (v114 >= v115)
                {
                  uint64_t v117 = (2 * v115) | 1;
                  unint64_t v118 = v11 + 32 * v117;
                  if (2 * v116 + 2 < (uint64_t)v13)
                  {
                    unint64_t v119 = *(void *)(v118 + 32);
                    unint64_t v121 = *(void *)v118;
                    BOOL v120 = *(void *)(v118 + 8) > *(void *)(v118 + 40);
                    if (*(void *)v118 != v119) {
                      BOOL v120 = v121 < v119;
                    }
                    if (v120)
                    {
                      unint64_t v121 = *(void *)(v118 + 32);
                      v118 += 32;
                      uint64_t v117 = 2 * v116 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v121 = *(void *)v118;
                  }
                  unint64_t v122 = v11 + 32 * v116;
                  unint64_t v123 = *(void *)v122;
                  unint64_t v124 = *(void *)(v122 + 8);
                  BOOL v5 = v121 == *(void *)v122;
                  BOOL v125 = v121 < *(void *)v122;
                  if (v5) {
                    BOOL v125 = *(void *)(v118 + 8) > v124;
                  }
                  if (!v125)
                  {
                    long long v171 = *(_OWORD *)(v122 + 16);
                    do
                    {
                      uint64_t v126 = (_OWORD *)v122;
                      unint64_t v122 = v118;
                      long long v127 = *(_OWORD *)(v118 + 16);
                      *uint64_t v126 = *(_OWORD *)v118;
                      v126[1] = v127;
                      if (v114 < v117) {
                        break;
                      }
                      uint64_t v128 = (2 * v117) | 1;
                      unint64_t v118 = v11 + 32 * v128;
                      uint64_t v117 = 2 * v117 + 2;
                      if (v117 < (uint64_t)v13)
                      {
                        unint64_t v130 = *(void *)(v118 + 32);
                        BOOL v129 = *(void *)(v118 + 8) > *(void *)(v118 + 40);
                        if (*(void *)v118 != v130) {
                          BOOL v129 = *(void *)v118 < v130;
                        }
                        if (v129) {
                          v118 += 32;
                        }
                        else {
                          unint64_t v130 = *(void *)v118;
                        }
                        if (!v129) {
                          uint64_t v117 = v128;
                        }
                      }
                      else
                      {
                        unint64_t v130 = *(void *)v118;
                        uint64_t v117 = v128;
                      }
                      BOOL v131 = *(void *)(v118 + 8) > v124;
                      BOOL v5 = v130 == v123;
                      BOOL v132 = v130 < v123;
                      if (!v5) {
                        BOOL v131 = v132;
                      }
                    }
                    while (!v131);
                    *(void *)unint64_t v122 = v123;
                    *(void *)(v122 + 8) = v124;
                    *(_OWORD *)(v122 + 16) = v171;
                  }
                }
                int64_t v115 = v116 - 1;
              }
              while (v116);
              uint64_t v133 = (unint64_t)v12 >> 5;
              do
              {
                uint64_t v134 = 0;
                long long v172 = *(_OWORD *)v11;
                long long v180 = *(_OWORD *)(v11 + 16);
                uint64_t v135 = (_OWORD *)v11;
                do
                {
                  long long v136 = &v135[2 * v134 + 2];
                  uint64_t v137 = (2 * v134) | 1;
                  uint64_t v138 = 2 * v134 + 2;
                  if (v138 < v133)
                  {
                    unint64_t v139 = *((void *)v136 + 4);
                    BOOL v5 = *(void *)v136 == v139;
                    BOOL v140 = *(void *)v136 < v139;
                    if (v5) {
                      BOOL v140 = *((void *)v136 + 1) > *((void *)v136 + 5);
                    }
                    if (v140)
                    {
                      v136 += 2;
                      uint64_t v137 = v138;
                    }
                  }
                  long long v141 = v136[1];
                  *uint64_t v135 = *v136;
                  v135[1] = v141;
                  uint64_t v135 = v136;
                  uint64_t v134 = v137;
                }
                while (v137 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 2;
                if (v136 == a2)
                {
                  *long long v136 = v172;
                  v136[1] = v180;
                }
                else
                {
                  long long v142 = a2[1];
                  *long long v136 = *a2;
                  v136[1] = v142;
                  *a2 = v172;
                  a2[1] = v180;
                  uint64_t v143 = (uint64_t)v136 - v11 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    unint64_t v145 = v11 + 32 * v144;
                    unint64_t v147 = *(void *)v136;
                    unint64_t v146 = *((void *)v136 + 1);
                    BOOL v148 = *(void *)v145 < *(void *)v136;
                    if (*(void *)v145 == *(void *)v136) {
                      BOOL v148 = *(void *)(v145 + 8) > v146;
                    }
                    if (v148)
                    {
                      long long v165 = v136[1];
                      do
                      {
                        long long v149 = v136;
                        long long v136 = (long long *)v145;
                        long long v150 = *(_OWORD *)(v145 + 16);
                        *long long v149 = *(_OWORD *)v145;
                        v149[1] = v150;
                        if (!v144) {
                          break;
                        }
                        unint64_t v144 = (v144 - 1) >> 1;
                        unint64_t v145 = v11 + 32 * v144;
                        BOOL v151 = *(void *)v145 < v147;
                        if (*(void *)v145 == v147) {
                          BOOL v151 = *(void *)(v145 + 8) > v146;
                        }
                      }
                      while (v151);
                      *(void *)long long v136 = v147;
                      *((void *)v136 + 1) = v146;
                      v136[1] = v165;
                    }
                  }
                }
              }
              while (v133-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 32 * (v13 >> 1);
          if ((unint64_t)v12 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)a1, (unint64_t *)(a1 + 32 * (v13 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)(a1 + 32), (unint64_t *)(v15 - 32), a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v14), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)(v15 - 32), (unint64_t *)v15, (long long *)(a1 + 32 + 32 * v14));
            long long v166 = *(_OWORD *)a1;
            long long v174 = *(_OWORD *)(a1 + 16);
            long long v16 = *(_OWORD *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)(a1 + 16) = v16;
            *(_OWORD *)unint64_t v15 = v166;
            *(_OWORD *)(v15 + 16) = v174;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)(a1 + 32 * (v13 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          unint64_t v17 = *(void *)a1;
          if (a4)
          {
            unint64_t v18 = *(void *)(a1 + 8);
            break;
          }
          unint64_t v19 = *(void *)(a1 - 32);
          unint64_t v18 = *(void *)(a1 + 8);
          BOOL v5 = v19 == v17;
          BOOL v20 = v19 < v17;
          if (v5) {
            BOOL v20 = *(void *)(a1 - 24) > v18;
          }
          if (v20) {
            break;
          }
          long long v164 = *(_OWORD *)(a1 + 16);
          unint64_t v47 = *((void *)a2 - 4);
          BOOL v5 = v17 == v47;
          BOOL v48 = v17 < v47;
          if (v5) {
            BOOL v48 = v18 > *((void *)a2 - 3);
          }
          if (v48)
          {
            unint64_t v11 = a1;
            do
            {
              unint64_t v49 = *(void *)(v11 + 32);
              unint64_t v50 = *(void *)(v11 + 40);
              v11 += 32;
              BOOL v51 = v18 > v50;
              BOOL v5 = v17 == v49;
              BOOL v52 = v17 < v49;
              if (v5) {
                BOOL v52 = v51;
              }
            }
            while (!v52);
          }
          else
          {
            std::basic_string<char16_t>::size_type v53 = (long long *)(a1 + 32);
            do
            {
              unint64_t v11 = (unint64_t)v53;
              if (v53 >= a2) {
                break;
              }
              unint64_t v54 = *(void *)v53;
              BOOL v55 = v18 > *(void *)(v11 + 8);
              BOOL v5 = v17 == v54;
              BOOL v56 = v17 < v54;
              if (!v5) {
                BOOL v55 = v56;
              }
              std::basic_string<char16_t>::size_type v53 = (long long *)(v11 + 32);
            }
            while (!v55);
          }
          int v57 = a2;
          if (v11 < (unint64_t)a2)
          {
            int v57 = a2;
            do
            {
              unint64_t v58 = *((void *)v57 - 4);
              unint64_t v59 = *((void *)v57 - 3);
              v57 -= 2;
              BOOL v60 = v18 > v59;
              BOOL v5 = v17 == v58;
              BOOL v61 = v17 < v58;
              if (v5) {
                BOOL v61 = v60;
              }
            }
            while (v61);
          }
          while (v11 < (unint64_t)v57)
          {
            long long v167 = *(_OWORD *)v11;
            long long v176 = *(_OWORD *)(v11 + 16);
            long long v62 = v57[1];
            *(_OWORD *)unint64_t v11 = *v57;
            *(_OWORD *)(v11 + 16) = v62;
            *int v57 = v167;
            v57[1] = v176;
            do
            {
              unint64_t v63 = *(void *)(v11 + 32);
              unint64_t v64 = *(void *)(v11 + 40);
              v11 += 32;
              BOOL v65 = v18 > v64;
              BOOL v5 = v17 == v63;
              BOOL v66 = v17 < v63;
              if (v5) {
                BOOL v66 = v65;
              }
            }
            while (!v66);
            do
            {
              unint64_t v67 = *((void *)v57 - 4);
              unint64_t v68 = *((void *)v57 - 3);
              v57 -= 2;
              BOOL v69 = v18 > v68;
              BOOL v5 = v17 == v67;
              BOOL v70 = v17 < v67;
              if (v5) {
                BOOL v70 = v69;
              }
            }
            while (v70);
          }
          BOOL v4 = v11 - 32 >= a1;
          BOOL v5 = v11 - 32 == a1;
          if (v11 - 32 != a1)
          {
            long long v71 = *(_OWORD *)(v11 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v11 - 32);
            *(_OWORD *)(a1 + 16) = v71;
          }
          a4 = 0;
          *(void *)(v11 - 32) = v17;
          *(void *)(v11 - 24) = v18;
          *(_OWORD *)(v11 - 16) = v164;
        }
        long long v163 = *(_OWORD *)(a1 + 16);
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          unint64_t v23 = *(void *)(v21 + 32);
          v21 += 32;
          BOOL v24 = v23 < v17;
          if (v23 == v17) {
            BOOL v24 = *(void *)(v22 + 40) > v18;
          }
        }
        while (v24);
        long long v25 = a2;
        if (v22 == a1)
        {
          long long v25 = a2;
          do
          {
            if (v21 >= (unint64_t)v25) {
              break;
            }
            unint64_t v30 = *((void *)v25 - 4);
            unint64_t v31 = *((void *)v25 - 3);
            v25 -= 2;
            BOOL v32 = v31 > v18;
            BOOL v5 = v30 == v17;
            BOOL v33 = v30 < v17;
            if (v5) {
              BOOL v33 = v32;
            }
          }
          while (!v33);
        }
        else
        {
          do
          {
            unint64_t v26 = *((void *)v25 - 4);
            unint64_t v27 = *((void *)v25 - 3);
            v25 -= 2;
            BOOL v28 = v27 > v18;
            BOOL v5 = v26 == v17;
            BOOL v29 = v26 < v17;
            if (v5) {
              BOOL v29 = v28;
            }
          }
          while (!v29);
        }
        unint64_t v11 = v21;
        if (v21 < (unint64_t)v25)
        {
          unint64_t v34 = v25;
          do
          {
            long long v35 = *(_OWORD *)v11;
            long long v175 = *(_OWORD *)(v11 + 16);
            long long v36 = v34[1];
            *(_OWORD *)unint64_t v11 = *v34;
            *(_OWORD *)(v11 + 16) = v36;
            *unint64_t v34 = v35;
            v34[1] = v175;
            do
            {
              unint64_t v37 = *(void *)(v11 + 32);
              unint64_t v38 = *(void *)(v11 + 40);
              v11 += 32;
              BOOL v39 = v38 > v18;
              BOOL v5 = v37 == v17;
              BOOL v40 = v37 < v17;
              if (v5) {
                BOOL v40 = v39;
              }
            }
            while (v40);
            do
            {
              unint64_t v41 = *((void *)v34 - 4);
              unint64_t v42 = *((void *)v34 - 3);
              v34 -= 2;
              BOOL v43 = v42 > v18;
              BOOL v5 = v41 == v17;
              BOOL v44 = v41 < v17;
              if (v5) {
                BOOL v44 = v43;
              }
            }
            while (!v44);
          }
          while (v11 < (unint64_t)v34);
        }
        if (v11 - 32 != a1)
        {
          long long v45 = *(_OWORD *)(v11 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v11 - 32);
          *(_OWORD *)(a1 + 16) = v45;
        }
        *(void *)(v11 - 32) = v17;
        *(void *)(v11 - 24) = v18;
        *(_OWORD *)(v11 - 16) = v163;
        if (v21 >= (unint64_t)v25) {
          break;
        }
LABEL_43:
        std::__introsort<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*,false>(a1, v11 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(a1, v11 - 32);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v11, (uint64_t)a2))
      {
        break;
      }
      if (!v46) {
        goto LABEL_43;
      }
    }
    a2 = (long long *)(v11 - 32);
    if (!v46) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(long long *result, unint64_t *a2, long long *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  BOOL v5 = *a2 < *(void *)result;
  if (*a2 == *(void *)result) {
    BOOL v5 = v4 > *((void *)result + 1);
  }
  BOOL v6 = *((void *)a3 + 1) > v4;
  BOOL v7 = *(void *)a3 == v3;
  BOOL v8 = *(void *)a3 < v3;
  if (v7) {
    BOOL v8 = v6;
  }
  if (v5)
  {
    if (v8)
    {
      long long v10 = *result;
      long long v9 = result[1];
      long long v11 = a3[1];
      *__n128 result = *a3;
      result[1] = v11;
LABEL_17:
      *a3 = v10;
      a3[1] = v9;
      return result;
    }
    long long v20 = *result;
    long long v19 = result[1];
    long long v21 = *((_OWORD *)a2 + 1);
    *__n128 result = *(_OWORD *)a2;
    result[1] = v21;
    *(_OWORD *)a2 = v20;
    *((_OWORD *)a2 + 1) = v19;
    BOOL v22 = *(void *)a3 < *a2;
    if (*(void *)a3 == *a2) {
      BOOL v22 = *((void *)a3 + 1) > a2[1];
    }
    if (v22)
    {
      long long v10 = *(_OWORD *)a2;
      long long v9 = *((_OWORD *)a2 + 1);
      long long v23 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v23;
      goto LABEL_17;
    }
  }
  else if (v8)
  {
    long long v13 = *(_OWORD *)a2;
    long long v12 = *((_OWORD *)a2 + 1);
    long long v14 = a3[1];
    *(_OWORD *)a2 = *a3;
    *((_OWORD *)a2 + 1) = v14;
    *a3 = v13;
    a3[1] = v12;
    BOOL v15 = *a2 < *(void *)result;
    if (*a2 == *(void *)result) {
      BOOL v15 = a2[1] > *((void *)result + 1);
    }
    if (v15)
    {
      long long v17 = *result;
      long long v16 = result[1];
      long long v18 = *((_OWORD *)a2 + 1);
      *__n128 result = *(_OWORD *)a2;
      result[1] = v18;
      *(_OWORD *)a2 = v17;
      *((_OWORD *)a2 + 1) = v16;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)a1, a2->n128_u64, (long long *)a3);
  BOOL v9 = *(void *)a4 < *(void *)a3;
  if (*(void *)a4 == *(void *)a3) {
    BOOL v9 = *(void *)(a4 + 8) > *(void *)(a3 + 8);
  }
  if (v9)
  {
    long long v10 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(__n128 *)(a4 + 16) = result;
    BOOL v12 = *(void *)a3 < a2->n128_u64[0];
    if (*(void *)a3 == a2->n128_u64[0]) {
      BOOL v12 = *(void *)(a3 + 8) > a2->n128_u64[1];
    }
    if (v12)
    {
      __n128 v13 = *a2;
      __n128 result = a2[1];
      __n128 v14 = *(__n128 *)(a3 + 16);
      *a2 = *(__n128 *)a3;
      a2[1] = v14;
      *(__n128 *)a3 = v13;
      *(__n128 *)(a3 + 16) = result;
      BOOL v15 = a2->n128_u64[0] < *(void *)a1;
      if (a2->n128_u64[0] == *(void *)a1) {
        BOOL v15 = a2->n128_u64[1] > *(void *)(a1 + 8);
      }
      if (v15)
      {
        long long v16 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        __n128 v17 = a2[1];
        *(__n128 *)a1 = *a2;
        *(__n128 *)(a1 + 16) = v17;
        *a2 = (__n128)v16;
        a2[1] = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 32);
      BOOL v7 = (long long *)(a2 - 32);
      BOOL v8 = v6 == *(void *)a1;
      BOOL v9 = v6 < *(void *)a1;
      if (v8) {
        BOOL v9 = *(void *)(a2 - 24) > *(void *)(a1 + 8);
      }
      if (v9)
      {
        long long v11 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *BOOL v7 = v11;
        *(_OWORD *)(a2 - 16) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)a1, (unint64_t *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(a1, (__n128 *)(a1 + 32), a1 + 64, a2 - 32);
      return 1;
    case 5:
      unint64_t v27 = (long long *)(a1 + 32);
      BOOL v28 = (long long *)(a1 + 64);
      BOOL v29 = (long long *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(a1, (__n128 *)(a1 + 32), a1 + 64, a1 + 96);
      unint64_t v30 = *(void *)(a2 - 32);
      unint64_t v31 = *(void *)(a2 - 24);
      BOOL v32 = (long long *)(a2 - 32);
      unint64_t v33 = *(void *)(a1 + 96);
      BOOL v34 = v31 > *(void *)(a1 + 104);
      BOOL v8 = v30 == v33;
      BOOL v35 = v30 < v33;
      if (v8) {
        BOOL v35 = v34;
      }
      if (v35)
      {
        long long v37 = *v29;
        long long v36 = *(_OWORD *)(a1 + 112);
        long long v38 = v32[1];
        *BOOL v29 = *v32;
        *(_OWORD *)(a1 + 112) = v38;
        long long *v32 = v37;
        v32[1] = v36;
        unint64_t v39 = *(void *)(a1 + 96);
        unint64_t v40 = *(void *)(a1 + 64);
        BOOL v8 = v39 == v40;
        BOOL v41 = v39 < v40;
        if (v8) {
          BOOL v41 = *(void *)(a1 + 104) > *(void *)(a1 + 72);
        }
        if (v41)
        {
          long long v43 = *v28;
          long long v42 = *(_OWORD *)(a1 + 80);
          long long v44 = *(_OWORD *)(a1 + 112);
          long long *v28 = *v29;
          *(_OWORD *)(a1 + 80) = v44;
          *BOOL v29 = v43;
          *(_OWORD *)(a1 + 112) = v42;
          unint64_t v45 = *(void *)(a1 + 64);
          unint64_t v46 = *(void *)(a1 + 32);
          BOOL v8 = v45 == v46;
          BOOL v47 = v45 < v46;
          if (v8) {
            BOOL v47 = *(void *)(a1 + 72) > *(void *)(a1 + 40);
          }
          if (v47)
          {
            long long v49 = *v27;
            long long v48 = *(_OWORD *)(a1 + 48);
            long long v50 = *(_OWORD *)(a1 + 80);
            *unint64_t v27 = *v28;
            *(_OWORD *)(a1 + 48) = v50;
            long long *v28 = v49;
            *(_OWORD *)(a1 + 80) = v48;
            unint64_t v51 = *(void *)(a1 + 32);
            BOOL v8 = v51 == *(void *)a1;
            BOOL v52 = v51 < *(void *)a1;
            if (v8) {
              BOOL v52 = *(void *)(a1 + 40) > *(void *)(a1 + 8);
            }
            if (v52)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *(_OWORD *)(a1 + 16);
              long long v55 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v27;
              *(_OWORD *)(a1 + 16) = v55;
              *unint64_t v27 = v54;
              *(_OWORD *)(a1 + 48) = v53;
            }
          }
        }
      }
      return 1;
    default:
      __n128 v13 = (void *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((long long *)a1, (unint64_t *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    unint64_t v17 = *(void *)v14;
    unint64_t v18 = *(void *)(v14 + 8);
    BOOL v19 = *(void *)v14 < *v13;
    if (*(void *)v14 == *v13) {
      BOOL v19 = v18 > v13[1];
    }
    if (v19)
    {
      long long v56 = *(_OWORD *)(v14 + 16);
      uint64_t v20 = v15;
      while (1)
      {
        uint64_t v21 = a1 + v20;
        long long v22 = *(_OWORD *)(a1 + v20 + 80);
        *(_OWORD *)(v21 + 96) = *(_OWORD *)(a1 + v20 + 64);
        *(_OWORD *)(v21 + 112) = v22;
        if (v20 == -64) {
          break;
        }
        unint64_t v23 = *(void *)(v21 + 32);
        BOOL v24 = v18 > *(void *)(v21 + 40);
        BOOL v8 = v17 == v23;
        BOOL v25 = v17 < v23;
        if (!v8) {
          BOOL v24 = v25;
        }
        v20 -= 32;
        if (!v24)
        {
          uint64_t v26 = a1 + v20 + 96;
          goto LABEL_19;
        }
      }
      uint64_t v26 = a1;
LABEL_19:
      *(void *)uint64_t v26 = v17;
      *(void *)(v26 + 8) = v18;
      *(_OWORD *)(v26 + 16) = v56;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }
    __n128 v13 = (void *)v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2) {
      return 1;
    }
  }
}

char *std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::addSpansFromSubTokens(uint64_t a1, uint64_t a2, long long *a3, URegularExpression **a4, void *a5)
{
  uint64_t v8 = a2;
  UErrorCode status = U_ZERO_ERROR;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  uregex_setText(*a4, (const UChar *)a2, -1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    toString(v8, (std::string *)&v26);
    BOOL v19 = std::string::insert((std::string *)&v26, 0, "Failed to attach the regex expression to the token text: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&long long v25 = *((void *)&v19->__r_.__value_.__l + 2);
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = uregex_find(*a4, 0, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    toString(v8, (std::string *)&v26);
    long long v22 = std::string::insert((std::string *)&v26, 0, "Failed to find match in text: ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(void *)&long long v25 = *((void *)&v22->__r_.__value_.__l + 2);
    long long v24 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, (const std::string *)&v24);
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (result)
  {
    memset(&v26, 0, sizeof(v26));
    if (*(char *)(v8 + 23) >= 0) {
      std::basic_string<char16_t>::size_type v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v12 = *(void *)(v8 + 8);
    }
    std::basic_string<char16_t>::resize(&v26, v12, v11);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v13 = &v26;
    }
    else {
      __n128 v13 = (std::basic_string<char16_t> *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v14 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v14 = v26.__r_.__value_.__r.__words[1];
    }
    int32_t v15 = uregex_group(*a4, 1, (UChar *)v13, v14, &status);
    if (v15 >= 1
      && (std::basic_string<char16_t>::resize(&v26, v15, v16),
          nl_featurization::pattern_trie::PatternTrie::search((uint64_t **)(a1 + 40), (uint64_t)&v26)))
    {
      long long v17 = a3[1];
      long long v24 = *a3;
      long long v25 = v17;
      nl_featurization::span_matching::span_processor::SpanProcessor::appendMatchedSpan((void *)a1, (unsigned __int16 *)&v26, &v24, a5);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      return 1;
    }
    else
    {
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      return 0;
    }
  }
  return result;
}

void sub_1C8F24E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_string<char16_t>::reserve(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __requested_capacity)
{
  if (__requested_capacity >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 0xA) {
      return;
    }
    std::basic_string<char16_t>::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 <= __requested_capacity) {
      std::basic_string<char16_t>::size_type v5 = __requested_capacity;
    }
    else {
      std::basic_string<char16_t>::size_type v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if ((v5 | 3) != 0xB)
    {
      uint64_t v11 = (v5 | 3) + 1;
      goto LABEL_24;
    }
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
LABEL_20:
    uint64_t v11 = v6 + 1;
    if (v6 < 0xB)
    {
      std::basic_string<char16_t>::size_type v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      int v13 = 1;
      int32_t v14 = this;
      if ((v3 & 0x80) != 0) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
LABEL_24:
    int32_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v11);
    uint64_t v11 = v15;
    LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v3 & 0x80000000) != 0)
    {
      LOBYTE(v13) = 0;
      std::basic_string<char16_t>::size_type v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
LABEL_28:
      std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
      int v17 = 1;
LABEL_29:
      BOOL v18 = __CFADD__(size, 1);
      std::basic_string<char16_t>::size_type v19 = size + 1;
      if (v18)
      {
        if (v17) {
          goto LABEL_35;
        }
      }
      else
      {
        memmove(v14, v12, 2 * v19);
        if (v17)
        {
LABEL_35:
          operator delete(v12);
          if ((v13 & 1) == 0) {
            goto LABEL_36;
          }
          goto LABEL_33;
        }
      }
      if ((v13 & 1) == 0)
      {
LABEL_36:
        this->__r_.__value_.__l.__size_ = v4;
        this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
        this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v14;
        return;
      }
LABEL_33:
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
      return;
    }
    int v13 = 0;
    std::basic_string<char16_t>::size_type v12 = this;
LABEL_26:
    std::basic_string<char16_t>::size_type size = v3;
    int v17 = v13;
    goto LABEL_29;
  }
  unint64_t v7 = this->__r_.__value_.__r.__words[2];
  std::basic_string<char16_t>::size_type v8 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 < __requested_capacity)
  {
    std::basic_string<char16_t>::size_type v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity) {
      std::basic_string<char16_t>::size_type v9 = __requested_capacity;
    }
    else {
      std::basic_string<char16_t>::size_type v9 = this->__r_.__value_.__l.__size_;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB) {
      uint64_t v10 = v9 | 3;
    }
    unint64_t v6 = v9 >= 0xB ? v10 : 10;
    if (v6 != v8)
    {
      unint64_t v3 = HIBYTE(v7);
      goto LABEL_20;
    }
  }
}

void sub_1C8F25040(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void nl_featurization::span_matching::span_processor::SpanProcessor::appendMatchedSpan(void *a1, unsigned __int16 *a2, long long *a3, void *a4)
{
  if (!std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2))__assert_rtn("appendMatchedSpan", "span_processor.cpp", 172, "mInternals.reverseMapping.find(str) != mInternals.reverseMapping.end() && \"Unable to find token chain in reverse mapping after a match was found in the pattern \" \"trie\""); {
  std::basic_string<char16_t>::size_type v8 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2);
  }
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  long long v44 = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v44, *((long long **)v8 + 5), *((long long **)v8 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 3));
  std::basic_string<char16_t>::size_type v9 = v44;
  uint64_t v10 = v45;
  long long v42 = *a3;
  long long v43 = a3[1];
  while (v9 != v10)
  {
    unint64_t v11 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)v9);
    int8x8_t v12 = (int8x8_t)a4[1];
    if (v12)
    {
      unint64_t v13 = v11;
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      unint64_t v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v16 = v11;
        if (v11 >= *(void *)&v12) {
          unint64_t v16 = v11 % *(void *)&v12;
        }
      }
      else
      {
        unint64_t v16 = (*(void *)&v12 - 1) & v11;
      }
      int v17 = *(unsigned __int16 ***)(*a4 + 8 * v16);
      if (v17)
      {
        for (uint64_t i = *v17; i; uint64_t i = *(unsigned __int16 **)i)
        {
          unint64_t v19 = *((void *)i + 1);
          if (v19 == v13)
          {
            if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, (unsigned __int16 *)v9))
            {
              BOOL v47 = v9;
              std::basic_string<char16_t> v26 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>((uint64_t)a4, (unsigned __int16 *)v9, &v47);
              unint64_t v27 = v26;
              BOOL v28 = (_OWORD *)*((void *)v26 + 6);
              unint64_t v29 = *((void *)v26 + 7);
              if ((unint64_t)v28 >= v29)
              {
                uint64_t v31 = *((void *)v26 + 5);
                uint64_t v32 = ((uint64_t)v28 - v31) >> 5;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 59) {
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v34 = v29 - v31;
                if (v34 >> 4 > v33) {
                  unint64_t v33 = v34 >> 4;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35) {
                  unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v35);
                }
                else {
                  uint64_t v36 = 0;
                }
                long long v37 = (_OWORD *)(v35 + 32 * v32);
                *long long v37 = v42;
                v37[1] = v43;
                unint64_t v39 = (char *)*((void *)v27 + 5);
                long long v38 = (char *)*((void *)v27 + 6);
                unint64_t v40 = v37;
                if (v38 != v39)
                {
                  do
                  {
                    long long v41 = *((_OWORD *)v38 - 1);
                    *(v40 - 2) = *((_OWORD *)v38 - 2);
                    *(v40 - 1) = v41;
                    v40 -= 2;
                    v38 -= 32;
                  }
                  while (v38 != v39);
                  long long v38 = (char *)*((void *)v27 + 5);
                }
                unint64_t v30 = v37 + 2;
                *((void *)v27 + 5) = v40;
                *((void *)v27 + 6) = v37 + 2;
                *((void *)v27 + 7) = v35 + 32 * v36;
                if (v38) {
                  operator delete(v38);
                }
              }
              else
              {
                _OWORD *v28 = v42;
                v28[1] = v43;
                unint64_t v30 = v28 + 2;
              }
              *((void *)v27 + 6) = v30;
              goto LABEL_26;
            }
          }
          else
          {
            if (v15 > 1)
            {
              if (v19 >= *(void *)&v12) {
                v19 %= *(void *)&v12;
              }
            }
            else
            {
              v19 &= *(void *)&v12 - 1;
            }
            if (v19 != v16) {
              break;
            }
          }
        }
      }
    }
    BOOL v47 = v9;
    long long v20 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>((uint64_t)a4, (unsigned __int16 *)v9, &v47);
    long long v22 = v20 + 20;
    uint64_t v21 = (_OWORD *)*((void *)v20 + 5);
    long long v23 = (_OWORD *)*((void *)v20 + 7);
    if (v23 == v21)
    {
      if (v23)
      {
        *((void *)v20 + 6) = v23;
        operator delete(v23);
        *long long v22 = 0;
        *((void *)v20 + 6) = 0;
        *((void *)v20 + 7) = 0;
      }
      std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>::__vallocate[abi:ne180100](v22, 1uLL);
      long long v25 = (_OWORD *)*((void *)v20 + 6);
      long long v24 = v20 + 24;
      uint64_t v21 = v25;
    }
    else
    {
      long long v24 = v20 + 24;
    }
    *uint64_t v21 = v42;
    v21[1] = v43;
    *long long v24 = v21 + 2;
LABEL_26:
    std::basic_string<char16_t>::size_type v9 = (long long *)((char *)v9 + 24);
  }
  long long v48 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_1C8F25340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int8x8_t v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  unint64_t v16 = operator new(0x40uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *unint64_t v16 = 0;
  v16[1] = v8;
  int v17 = (std::basic_string<char16_t> *)(v16 + 2);
  BOOL v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v17, *(const std::basic_string<char16_t>::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v16[4] = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = 0;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::basic_string<char16_t> v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            unint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *unint64_t v29 = *v35;
                  *unint64_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  unint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                unint64_t v29 = v35;
                unint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v37 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int16 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *long long v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    long long v37 = (unsigned __int16 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1C8F257A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::matchCharacterBasedSpans@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, void **a4@<X8>)
{
  memset(v28, 0, sizeof(v28));
  int v29 = 1065353216;
  nl_featurization::span_matching::span_processor::SpanProcessor::findAndAddSpans(a1, a2, v28);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptions(v6, (uint64_t)v28, a3, &v25);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v7 = v25;
  uint64_t v8 = v26;
  if (v25 != v26)
  {
    unint64_t v9 = 0;
    while (1)
    {
      if (*(char *)(v7 + 55) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v30, *(const std::basic_string<char16_t>::value_type **)(v7 + 32), *(void *)(v7 + 40));
      }
      else {
        std::basic_string<char16_t> v30 = *(std::basic_string<char16_t> *)(v7 + 32);
      }
      long long v31 = *(_OWORD *)v7;
      unint64_t v10 = (unint64_t)a4[2];
      if ((unint64_t)v9 >= v10) {
        break;
      }
      long long v11 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      *((void *)v9 + 2) = *((void *)&v30.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v9 = v11;
      memset(&v30, 0, sizeof(v30));
      *(_OWORD *)(v9 + 24) = v31;
      int8x8_t v12 = v9 + 40;
      a4[1] = v9 + 40;
LABEL_29:
      v7 += 56;
      unint64_t v9 = v12;
      if (v7 == v8) {
        goto LABEL_33;
      }
    }
    unint64_t v13 = (char *)*a4;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)*a4) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x666666666666666) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x333333333333333) {
      unint64_t v17 = 0x666666666666666;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v18 = (char *)operator new(40 * v17);
    }
    else
    {
      BOOL v18 = 0;
    }
    long long v19 = &v18[40 * v14];
    float v20 = &v18[40 * v17];
    *(std::basic_string<char16_t> *)long long v19 = v30;
    memset(&v30, 0, sizeof(v30));
    *(_OWORD *)(v19 + 24) = v31;
    int8x8_t v12 = v19 + 40;
    if (v9 == v13)
    {
      *a4 = v19;
      a4[1] = v12;
      a4[2] = v20;
      if (!v9)
      {
LABEL_27:
        int v23 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
        a4[1] = v12;
        if (v23 < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      }
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)(v9 - 40);
        *((void *)v19 - 3) = *((void *)v9 - 3);
        *(_OWORD *)(v19 - 40) = v21;
        *((void *)v9 - 4) = 0;
        *((void *)v9 - 3) = 0;
        *((void *)v9 - 5) = 0;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v9 - 1);
        v19 -= 40;
        v9 -= 40;
      }
      while (v9 != v13);
      BOOL v22 = (char *)*a4;
      unint64_t v9 = (char *)a4[1];
      *a4 = v19;
      a4[1] = v12;
      a4[2] = v20;
      if (v9 != v22)
      {
        do
        {
          if (*(v9 - 17) < 0) {
            operator delete(*((void **)v9 - 5));
          }
          v9 -= 40;
        }
        while (v9 != v22);
        unint64_t v9 = v22;
      }
      if (!v9) {
        goto LABEL_27;
      }
    }
    operator delete(v9);
    goto LABEL_27;
  }
LABEL_33:
  v30.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v25;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)v28);
}

void sub_1C8F25AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v24 - 88) = &a10;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::MatchedCharacterSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    std::basic_string<char16_t>::size_type v4 = (void **)v1[1];
    std::basic_string<char16_t>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      std::basic_string<char16_t>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nl_featurization::bio::BioTagPayload::getLabel(nl_featurization::bio::BioTagPayload *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(a2, *(const std::basic_string<char16_t>::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

std::basic_string<char16_t> *nl_featurization::bio::BioTagPayload::getSemanticValue@<X0>(nl_featurization::bio::BioTagPayload *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](a2, (long long *)((char *)this + 24));
}

uint64_t nl_featurization::bio::BioTag::BioTag(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*((unsigned char *)a3 + 56))
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(a1 + 8), *(const std::basic_string<char16_t>::value_type **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long v6 = *a3;
      *(void *)(a1 + 24) = *((void *)a3 + 2);
      *(_OWORD *)(a1 + 8) = v6;
    }
    std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a1 + 32), (long long *)((char *)a3 + 24));
    *(unsigned char *)(a1 + 64) = 1;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      if (!*((unsigned char *)a3 + 56))
      {
LABEL_9:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Begin/inside BIO tags must have a payload component");
        goto LABEL_13;
      }
    }
    else if (*((unsigned char *)a3 + 56))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Only begin/inside BIO tags can have a payload component");
LABEL_13:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
    }
  }
  else if ((a2 & 0xFFFFFFFE) == 2)
  {
    goto LABEL_9;
  }
  return a1;
}

void sub_1C8F25CF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::bio::BioTag::getPrefix(nl_featurization::bio::BioTag *this)
{
  return *(unsigned int *)this;
}

std::basic_string<char16_t> *nl_featurization::bio::BioTag::getPayload@<X0>(nl_featurization::bio::BioTag *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot extract payload from non-begin/inside BIO tag");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*((unsigned char *)this + 64)) {
    __assert_rtn("getPayload", "bio.cpp", 48, "mPayload.has_value()");
  }
  if (*((char *)this + 31) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(a2, *((const std::basic_string<char16_t>::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  return std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](a2 + 1, (long long *)this + 2);
}

void sub_1C8F25E0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nl_featurization::bio::parseBioTag(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, "[");
  unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v7 = v66;
  if ((v66 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__dst[1];
  }
  if (v5 == v7)
  {
    if (!v5)
    {
LABEL_14:
      LOBYTE(v63[0]) = 0;
      char v64 = 0;
      nl_featurization::bio::BioTag::BioTag(a2, 0, v63);
      long long v11 = v63;
LABEL_21:
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v11);
      goto LABEL_109;
    }
    uint64_t v8 = 0;
    unint64_t v9 = __dst;
    if ((v66 & 0x80u) != 0) {
      unint64_t v9 = (void **)__dst[0];
    }
    if (v6 >= 0) {
      unint64_t v10 = (const std::basic_string<char16_t>::value_type *)a1;
    }
    else {
      unint64_t v10 = *(const std::basic_string<char16_t>::value_type **)a1;
    }
    while (*((unsigned __int16 *)v9 + v8) == (unsigned __int16)v10[v8])
    {
      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }
  }
  else if (v6 >= 0)
  {
    unint64_t v10 = (const std::basic_string<char16_t>::value_type *)a1;
  }
  else
  {
    unint64_t v10 = *(const std::basic_string<char16_t>::value_type **)a1;
  }
  if (v5 == 1)
  {
    if (*v10 == 79)
    {
      LOBYTE(v61[0]) = 0;
      char v62 = 0;
      nl_featurization::bio::BioTag::BioTag(a2, 1, v61);
      long long v11 = v61;
      goto LABEL_21;
    }
LABEL_114:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Well-formed BIO tags must be >=3 characters long, but got: ");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  if (v5 <= 2) {
    goto LABEL_114;
  }
  memset(&v60, 0, sizeof(v60));
  std::basic_string<char16_t>::resize(&v60, 2uLL, v4);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int8x8_t v12 = &v60;
  }
  else {
    int8x8_t v12 = (std::basic_string<char16_t> *)v60.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v13 = (const UChar *)a1;
  }
  else {
    unint64_t v13 = *(const UChar **)a1;
  }
  u_strncpy((UChar *)v12, v13, 2);
  std::basic_string<char16_t>::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::basic_string<char16_t>::size_type size = v60.__r_.__value_.__l.__size_;
  }
  if (size != 2) {
    goto LABEL_113;
  }
  unint64_t v16 = &v60;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v16 = (std::basic_string<char16_t> *)v60.__r_.__value_.__r.__words[0];
  }
  if ((int v17 = (unsigned __int16)v16->__r_.__value_.__s.__data_[0], v17 != 73) && v17 != 66
    || v16->__r_.__value_.__s.__data_[1] != 95)
  {
LABEL_113:
    unint64_t v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "BIO tag has no prefix");
    v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v40, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  memset(&v59, 0, sizeof(v59));
  uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 8);
  }
  std::basic_string<char16_t>::resize(&v59, v18 - 2, v14);
  if (*(char *)(a1 + 23) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v58, *(const std::basic_string<char16_t>::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::basic_string<char16_t> v58 = *(std::basic_string<char16_t> *)a1;
  }
  saveState = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v55, ":");
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v19 = (UChar *)&v58.__r_.__value_.__s.__data_[2];
  }
  else {
    long long v19 = (UChar *)(v58.__r_.__value_.__r.__words[0] + 4);
  }
  if (v56 >= 0) {
    float v20 = v55;
  }
  else {
    float v20 = (void **)v55[0];
  }
  long long v21 = u_strtok_r(v19, (const UChar *)v20, &saveState);
  if (v56 >= 0) {
    BOOL v22 = v55;
  }
  else {
    BOOL v22 = (void **)v55[0];
  }
  uint64_t v24 = u_strtok_r(0, (const UChar *)v22, &saveState);
  memset(&v54, 0, sizeof(v54));
  LOBYTE(v51[0]) = 0;
  char v53 = 0;
  if (v24)
  {
    int32_t v25 = u_strlen(v21);
    std::basic_string<char16_t>::resize(&v54, v25, v26);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v54;
    }
    else {
      uint64_t v27 = (std::basic_string<char16_t> *)v54.__r_.__value_.__r.__words[0];
    }
    u_strcpy((UChar *)v27, v21);
    memset(&v50, 0, sizeof(v50));
    int32_t v28 = u_strlen(v24);
    std::basic_string<char16_t>::resize(&v50, v28, v29);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char16_t> v30 = &v50;
    }
    else {
      std::basic_string<char16_t> v30 = (std::basic_string<char16_t> *)v50.__r_.__value_.__r.__words[0];
    }
    u_strcpy((UChar *)v30, v24);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::basic_string<char16_t>::__init_copy_ctor_external(&v47, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      std::basic_string<char16_t> v47 = v50;
    }
    LOBYTE(__p.__r_.__value_.__l.__data_) = 1;
    std::__optional_storage_base<std::basic_string<char16_t>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::basic_string<char16_t>,false>>((uint64_t)v51, (__n128 *)&v47);
    if (LOBYTE(__p.__r_.__value_.__l.__data_) && SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v31 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v31 = v58.__r_.__value_.__r.__words[1];
    }
    std::basic_string<char16_t>::resize(&v54, (v31 - 2), v23);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v32 = &v54;
    }
    else {
      unint64_t v32 = (std::basic_string<char16_t> *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v33 = (const UChar *)&v58.__r_.__value_.__s.__data_[2];
    }
    else {
      uint8x8_t v33 = (const UChar *)(v58.__r_.__value_.__r.__words[0] + 4);
    }
    u_strcpy((UChar *)v32, v33);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v46, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v46 = v54;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](&v44, (long long *)v51);
  std::basic_string<char16_t> v47 = v46;
  LOBYTE(__p.__r_.__value_.__l.__data_) = 0;
  char v49 = 0;
  int v34 = v45;
  if (v45)
  {
    std::basic_string<char16_t> __p = v44;
    memset(&v44, 0, sizeof(v44));
    char v49 = 1;
  }
  std::basic_string<char16_t>::size_type v35 = v60.__r_.__value_.__l.__size_;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::basic_string<char16_t>::size_type v35 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  if (v35 != 2) {
    goto LABEL_112;
  }
  unint64_t v36 = &v60;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v36 = (std::basic_string<char16_t> *)v60.__r_.__value_.__r.__words[0];
  }
  int v37 = (unsigned __int16)v36->__r_.__value_.__s.__data_[0];
  if (v37 != 73)
  {
    if (v37 == 66 && v36->__r_.__value_.__s.__data_[1] == 95)
    {
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::__optional_destruct_base[abi:ne180100]<nl_featurization::bio::BioTagPayload const&>(&v43, (long long *)&v47);
      unint64_t v38 = &v43;
      nl_featurization::bio::BioTag::BioTag(a2, 2, (long long *)&v43);
      goto LABEL_91;
    }
LABEL_112:
    unint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Unrecognized BIO tag prefix");
    v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v39, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  if (v36->__r_.__value_.__s.__data_[1] != 95) {
    goto LABEL_112;
  }
  std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::__optional_destruct_base[abi:ne180100]<nl_featurization::bio::BioTagPayload const&>(v42, (long long *)&v47);
  unint64_t v38 = v42;
  nl_featurization::bio::BioTag::BioTag(a2, 3, (long long *)v42);
LABEL_91:
  std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v38);
  if (v34 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v53 && v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
LABEL_109:
  if ((char)v66 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C8F264A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (*(char *)(v69 - 225) < 0) {
    operator delete(*(void **)(v69 - 248));
  }
  if (*(char *)(v69 - 201) < 0) {
    operator delete(*(void **)(v69 - 224));
  }
  if (*(char *)(v69 - 49) < 0) {
    operator delete(*(void **)(v69 - 72));
  }
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::basic_string<char16_t>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::basic_string<char16_t>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u16[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

std::basic_string<char16_t> *std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::__optional_destruct_base[abi:ne180100]<nl_featurization::bio::BioTagPayload const&>(std::basic_string<char16_t> *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  LOBYTE(this[2].__r_.__value_.__r.__words[1]) = 1;
  return this;
}

void sub_1C8F2670C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nl_featurization::bio::convertToLabelledSpans@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Number of tokens differs from number of BIO tags");
    goto LABEL_103;
  }
  if (v5 != (uint64_t)(a2[1] - *a2) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Number of tokens differs from number of group IDs");
LABEL_103:
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LOBYTE(v59) = 0;
  char v69 = 0;
  if (v7 == v6) {
    return std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v59);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 1;
  do
  {
    nl_featurization::bio::parseBioTag(v6 + v9, (uint64_t)&v57);
    unint64_t v13 = v12 - 1;
    uint64_t v14 = *a3;
    int v15 = v57;
    if (v57 != 3)
    {
      if (v69)
      {
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          std::basic_string<char16_t>::__init_copy_ctor_external(&v54, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
        }
        else {
          std::basic_string<char16_t> v54 = v64;
        }
        std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](&v55, &v65);
        *(void *)&long long v46 = v63;
        *((void *)&v46 + 1) = v12 - 1;
        *(void *)&long long v47 = v59;
        *((void *)&v47 + 1) = *(void *)(v14 + v11 - 40);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          std::basic_string<char16_t>::__init_copy_ctor_external(&v48, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
        }
        else {
          std::basic_string<char16_t> v48 = v54;
        }
        std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)&v55);
        *((void *)&v50 + 1) = v68;
        LOBYTE(v51) = BYTE8(v68);
        unint64_t v17 = a4[1];
        unint64_t v16 = a4[2];
        if (v17 >= v16)
        {
          uint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17 - *a4) >> 3);
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) > 0x276276276276276) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v21 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v16 - *a4) >> 3);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x13B13B13B13B13BLL) {
            unint64_t v22 = 0x276276276276276;
          }
          else {
            unint64_t v22 = v20;
          }
          *((void *)&v43 + 1) = a4 + 2;
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          v42.__r_.__value_.__r.__words[0] = v22;
          v42.__r_.__value_.__l.__size_ = v22 + 104 * v19;
          v42.__r_.__value_.__r.__words[2] = v42.__r_.__value_.__l.__size_;
          *(void *)&long long v43 = v22 + 104 * v23;
          std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(v42.__r_.__value_.__l.__size_, (uint64_t)&v46);
          v42.__r_.__value_.__r.__words[2] += 104;
          std::vector<nl_featurization::postprocessing::LabelledSpan>::__swap_out_circular_buffer(a4, &v42);
          uint64_t v18 = a4[1];
          std::__split_buffer<nl_featurization::postprocessing::LabelledSpan>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(a4[1], (uint64_t)&v46);
          uint64_t v18 = v17 + 104;
          a4[1] = v18;
        }
        a4[1] = v18;
        if ((_BYTE)v50 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::reset[abi:ne180100]((uint64_t)&v59);
        if (v56 && SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        int v15 = v57;
      }
      if (v15 == 2)
      {
        long long v46 = *(_OWORD *)(v14 + v11);
        uint64_t v24 = (const std::basic_string<char16_t>::value_type **)(v14 + v11 + 16);
        if (*(char *)(v14 + v11 + 39) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&v47, *v24, *(void *)(v14 + v11 + 24));
        }
        else
        {
          long long v25 = *(_OWORD *)v24;
          v48.__r_.__value_.__r.__words[0] = *(void *)(v14 + v11 + 32);
          long long v47 = v25;
        }
        LOBYTE(v48.__r_.__value_.__r.__words[1]) = *(unsigned char *)(v14 + v11 + 40);
        v48.__r_.__value_.__r.__words[2] = v12 - 1;
        nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v57, &__p);
        if (v13 >= (uint64_t)(a2[1] - *a2) >> 4) {
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        }
        std::basic_string<char16_t>::value_type v26 = (uint64_t *)(*a2 + v10);
        uint64_t v27 = *v26;
        BYTE8(v53) = *((unsigned char *)v26 + 8);
        *(void *)&long long v53 = v27;
        long long v59 = v46;
        if (v69)
        {
          if (SHIBYTE(v61) < 0) {
            operator delete((void *)v60);
          }
          long long v60 = v47;
          std::basic_string<char16_t>::size_type v61 = v48.__r_.__value_.__r.__words[0];
          HIBYTE(v48.__r_.__value_.__r.__words[0]) = 0;
          LOWORD(v47) = 0;
          char v62 = v48.__r_.__value_.__r.__words[1];
          std::basic_string<char16_t>::size_type v63 = v48.__r_.__value_.__r.__words[2];
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          std::basic_string<char16_t> v64 = __p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          std::__optional_storage_base<std::basic_string<char16_t>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::basic_string<char16_t>,false>>((uint64_t)&v65, (__n128 *)&v50);
          *(void *)&long long v68 = v53;
          BYTE8(v68) = BYTE8(v53);
          if (!v52) {
            goto LABEL_53;
          }
        }
        else
        {
          long long v60 = v47;
          std::basic_string<char16_t>::size_type v61 = v48.__r_.__value_.__r.__words[0];
          v48.__r_.__value_.__r.__words[0] = 0;
          long long v47 = 0uLL;
          char v62 = v48.__r_.__value_.__r.__words[1];
          std::basic_string<char16_t>::size_type v63 = v48.__r_.__value_.__r.__words[2];
          std::basic_string<char16_t> v64 = __p;
          memset(&__p, 0, sizeof(__p));
          LOBYTE(v65) = 0;
          char v67 = 0;
          if (v52)
          {
            long long v65 = v50;
            uint64_t v66 = v51;
            uint64_t v51 = 0;
            long long v50 = 0uLL;
            char v67 = 1;
          }
          long long v68 = v53;
          char v69 = 1;
          if (!v52) {
            goto LABEL_53;
          }
        }
        if (SHIBYTE(v51) < 0) {
          operator delete((void *)v50);
        }
LABEL_53:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[0]) < 0) {
          operator delete((void *)v47);
        }
      }
    }
    if (v13 == -1 - 0x5555555555555555 * ((a1[1] - *a1) >> 3) && (v57 & 0xFFFFFFFE) == 2 && v69 != 0)
    {
      *(void *)&long long v46 = v63;
      *((void *)&v46 + 1) = v12;
      *(void *)&long long v47 = v59;
      *((void *)&v47 + 1) = *(void *)(v14 + v11 + 8);
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v57, &v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v48, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      }
      else {
        std::basic_string<char16_t> v48 = v54;
      }
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v57, &v42);
      std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](&__p, &v43);
      *((void *)&v50 + 1) = v68;
      LOBYTE(v51) = BYTE8(v68);
      unint64_t v30 = a4[1];
      unint64_t v29 = a4[2];
      if (v30 >= v29)
      {
        uint64_t v32 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v30 - *a4) >> 3);
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) > 0x276276276276276) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v34 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v29 - *a4) >> 3);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0x13B13B13B13B13BLL) {
          unint64_t v35 = 0x276276276276276;
        }
        else {
          unint64_t v35 = v33;
        }
        long long v74 = a4 + 2;
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        unint64_t v70 = v35;
        uint64_t v71 = v35 + 104 * v32;
        uint64_t v72 = v71;
        unint64_t v73 = v35 + 104 * v36;
        std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(v71, (uint64_t)&v46);
        v72 += 104;
        std::vector<nl_featurization::postprocessing::LabelledSpan>::__swap_out_circular_buffer(a4, &v70);
        uint64_t v31 = a4[1];
        std::__split_buffer<nl_featurization::postprocessing::LabelledSpan>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(a4[1], (uint64_t)&v46);
        uint64_t v31 = v30 + 104;
        a4[1] = v30 + 104;
      }
      a4[1] = v31;
      if ((_BYTE)v50 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v45 && v44 < 0) {
        operator delete((void *)v43);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (v56 && SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::reset[abi:ne180100]((uint64_t)&v59);
    }
    std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v58);
    uint64_t v6 = *a1;
    v11 += 48;
    v10 += 16;
    v9 += 24;
  }
  while (v12++ < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  if (v69) {
    __assert_rtn("convertToLabelledSpans", "bio.cpp", 181, "!currentSpan.has_value()");
  }
  return std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v59);
}

void sub_1C8F26FC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
}

uint64_t std::__optional_destruct_base<nl_featurization::bio::CurrentSpan,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

void nl_featurization::bio::buildBeginBioTagsFromEntityLabels(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::basic_string<char16_t>>::reserve(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  for (uint64_t i = a2; v5 != v4; v5 += 24)
  {
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 2;
    LODWORD(v11.__r_.__value_.__l.__data_) = 6225986;
    v11.__r_.__value_.__s.__data_[2] = 0;
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = (const std::basic_string<char16_t>::value_type *)v5;
    }
    else {
      uint64_t v7 = *(const std::basic_string<char16_t>::value_type **)v5;
    }
    if (v6 >= 0) {
      std::basic_string<char16_t>::size_type v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v8 = *(void *)(v5 + 8);
    }
    std::basic_string<char16_t>::append(&v11, v7, v8);
    std::basic_string<char16_t> __p = v11;
    std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&i, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8F272A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void nl_featurization::bio::buildAllBioTagsFromEntityLabels(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (0x5555555555555556 * ((a1[1] - *a1) >> 3)) | 1;
  std::vector<std::basic_string<char16_t>>::reserve(a2, v4);
  unint64_t v5 = a2[2];
  unint64_t v6 = a2[1];
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    int32_t v28 = a2 + 2;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::basic_string<char16_t>::size_type v13 = v11 + 24 * v8;
    v26.__r_.__value_.__r.__words[0] = v11;
    v26.__r_.__value_.__l.__size_ = v13;
    v26.__r_.__value_.__r.__words[2] = v13;
    unint64_t v27 = v11 + 24 * v12;
    *(unsigned char *)(v13 + 23) = 1;
    *(_WORD *)std::basic_string<char16_t>::size_type v13 = 79;
    *(_WORD *)(v13 + 2) = 0;
    v26.__r_.__value_.__r.__words[2] += 24;
    std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(a2, &v26);
    uint64_t v7 = a2[1];
    std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    *(unsigned char *)(v6 + 23) = 1;
    *(_DWORD *)unint64_t v6 = 79;
    uint64_t v7 = v6 + 24;
    a2[1] = v6 + 24;
  }
  a2[1] = v7;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  v25[0] = a2;
  if (v14 != v15)
  {
    do
    {
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      LODWORD(v26.__r_.__value_.__l.__data_) = 6225986;
      v26.__r_.__value_.__s.__data_[2] = 0;
      int v16 = *(char *)(v14 + 23);
      if (v16 >= 0) {
        unint64_t v17 = (const std::basic_string<char16_t>::value_type *)v14;
      }
      else {
        unint64_t v17 = *(const std::basic_string<char16_t>::value_type **)v14;
      }
      if (v16 >= 0) {
        std::basic_string<char16_t>::size_type v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v18 = *(void *)(v14 + 8);
      }
      std::basic_string<char16_t>::append(&v26, v17, v18);
      std::basic_string<char16_t> __p = v26;
      std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](v25, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 += 24;
    }
    while (v14 != v15);
    uint64_t v20 = *a1;
    uint64_t v19 = a1[1];
    for (v25[0] = a2; v20 != v19; v20 += 24)
    {
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      LODWORD(v26.__r_.__value_.__l.__data_) = 6225993;
      v26.__r_.__value_.__s.__data_[2] = 0;
      int v21 = *(char *)(v20 + 23);
      if (v21 >= 0) {
        unint64_t v22 = (const std::basic_string<char16_t>::value_type *)v20;
      }
      else {
        unint64_t v22 = *(const std::basic_string<char16_t>::value_type **)v20;
      }
      if (v21 >= 0) {
        std::basic_string<char16_t>::size_type v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v23 = *(void *)(v20 + 8);
      }
      std::basic_string<char16_t>::append(&v26, v22, v23);
      std::basic_string<char16_t> __p = v26;
      std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](v25, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != v4) {
    __assert_rtn("buildAllBioTagsFromEntityLabels", "bio.cpp", 211, "bioTags.size() == expectedFinalSize");
  }
}

void sub_1C8F27588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void nl_featurization::FeaturizerImpl::featurize(nl_featurization::FeaturizerImpl *this@<X0>, const nl_featurization::FeaturizerInput *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<nl_featurization::Token>::__init_with_size[abi:ne180100]<nl_featurization::Token*,nl_featurization::Token*>(&v70, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
  char v69 = 0;
  nl_featurization::span_matching::span_processor::SpanProcessor::matchSpans((uint64_t)this + 168, &v70, &v69, (uint64_t *)&v67);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v6 = v67;
  uint64_t v7 = v68;
  uint64_t v8 = (char *)v68 - (char *)v67;
  unint64_t v9 = ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5) + (((char *)v68 - (char *)v67) >> 5);
  if (v9)
  {
    if (v9 >> 59) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&v55[16] = &v66;
    *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v9);
    *((void *)&v54 + 1) = v54;
    *(void *)std::basic_string<char16_t> v55 = v54;
    *(void *)&v55[8] = v54 + 32 * v10;
    std::vector<nl_featurization::span_matching::MatchedSpan>::__swap_out_circular_buffer(&v64, &v54);
    std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)&v54);
    uint64_t v11 = v65;
    unint64_t v6 = v67;
    uint64_t v7 = v68;
    uint64_t v8 = (char *)v68 - (char *)v67;
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::vector<nl_featurization::span_matching::MatchedSpan>::__insert_with_size[abi:ne180100]<std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>,std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>>(&v64, v11, v6, v7, v8 >> 5);
  char v45 = this;
  uint64_t v46 = a3;
  std::vector<nl_featurization::span_matching::MatchedSpan>::__insert_with_size[abi:ne180100]<std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>,std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>>(&v64, v65, *((const std::basic_string<char16_t>::value_type ***)a2 + 3), *((const std::basic_string<char16_t>::value_type ***)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5);
  std::basic_string<char16_t>::size_type v61 = 0;
  char v62 = 0;
  std::basic_string<char16_t>::size_type v63 = 0;
  uint64_t v12 = v64;
  uint64_t v13 = v65;
  if (v64 != v65)
  {
    while (1)
    {
      *(void *)&long long v14 = *(void *)v12;
      *((void *)&v14 + 1) = HIDWORD(*(void *)v12);
      long long v54 = v14;
      if (*(char *)(v12 + 31) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)v55, *(const std::basic_string<char16_t>::value_type **)(v12 + 8), *(void *)(v12 + 16));
      }
      else
      {
        *(_OWORD *)std::basic_string<char16_t> v55 = *(_OWORD *)(v12 + 8);
        *(void *)&v55[16] = *(void *)(v12 + 24);
      }
      uint64_t v15 = (unint64_t *)v62;
      if (v62 >= v63) {
        break;
      }
      *(_OWORD *)char v62 = v54;
      *((_OWORD *)v15 + 1) = *(_OWORD *)v55;
      v15[4] = *(void *)&v55[16];
      memset(v55, 0, 24);
      char v62 = (char *)(v15 + 5);
LABEL_32:
      v12 += 32;
      if (v12 == v13) {
        goto LABEL_36;
      }
    }
    int v16 = v61;
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v62 - (char *)v61) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x666666666666666) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    if (0x999999999999999ALL * ((v63 - (char *)v61) >> 3) > v18) {
      unint64_t v18 = 0x999999999999999ALL * ((v63 - (char *)v61) >> 3);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v63 - (char *)v61) >> 3) >= 0x333333333333333) {
      unint64_t v19 = 0x666666666666666;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v20 = (char *)operator new(40 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    int v21 = &v20[40 * v17];
    long long v22 = *(_OWORD *)v55;
    *(_OWORD *)int v21 = v54;
    *((_OWORD *)v21 + 1) = v22;
    *((void *)v21 + 4) = *(void *)&v55[16];
    memset(v55, 0, 24);
    std::basic_string<char16_t>::size_type v23 = v21 + 40;
    if (v15 == v16)
    {
      std::basic_string<char16_t>::size_type v61 = (unint64_t *)v21;
      char v62 = v21 + 40;
      std::basic_string<char16_t>::size_type v63 = &v20[40 * v19];
      if (!v15)
      {
LABEL_30:
        char v62 = v23;
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
        goto LABEL_32;
      }
    }
    else
    {
      do
      {
        *(_OWORD *)(v21 - 40) = *(_OWORD *)(v15 - 5);
        long long v24 = *(_OWORD *)(v15 - 3);
        *((void *)v21 - 1) = *(v15 - 1);
        *(_OWORD *)(v21 - 24) = v24;
        v21 -= 40;
        *(v15 - 2) = 0;
        *(v15 - 1) = 0;
        *(v15 - 3) = 0;
        v15 -= 5;
      }
      while (v15 != v16);
      long long v25 = v61;
      uint64_t v15 = (unint64_t *)v62;
      std::basic_string<char16_t>::size_type v61 = (unint64_t *)v21;
      char v62 = v23;
      std::basic_string<char16_t>::size_type v63 = &v20[40 * v19];
      if (v15 != v25)
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete((void *)*(v15 - 3));
          }
          v15 -= 5;
        }
        while (v15 != v25);
        uint64_t v15 = v25;
      }
      if (!v15) {
        goto LABEL_30;
      }
    }
    operator delete(v15);
    goto LABEL_30;
  }
LABEL_36:
  uint64_t v58 = 0;
  unint64_t v59 = 0;
  unint64_t v60 = 0;
  std::basic_string<char16_t> v26 = v70;
  unint64_t v27 = v71;
  if (v71 != v70)
  {
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v71 - v70);
    if (v28 > 0x38E38E38E38E38ELL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&v55[16] = &v60;
    *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v28);
    *((void *)&v54 + 1) = v54;
    *(void *)std::basic_string<char16_t> v55 = v54;
    *(void *)&v55[8] = v54 + 72 * v29;
    std::vector<nl_featurization::nlv4_types::Token>::__swap_out_circular_buffer(&v58, &v54);
    std::__split_buffer<nl_featurization::nlv4_types::Token>::~__split_buffer((uint64_t)&v54);
    std::basic_string<char16_t> v26 = v70;
    unint64_t v27 = v71;
  }
  for (; v26 != v27; v26 += 3)
  {
    if (*((char *)v26 + 39) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&v54, *((const std::basic_string<char16_t>::value_type **)v26 + 2), *((void *)v26 + 3));
    }
    else
    {
      long long v30 = v26[1];
      *(void *)std::basic_string<char16_t> v55 = *((void *)v26 + 4);
      long long v54 = v30;
    }
    v31.i64[0] = 0xFFFFFFFFLL;
    v31.i64[1] = 0xFFFFFFFFLL;
    *(int8x16_t *)&v55[8] = vandq_s8(*(int8x16_t *)v26, v31);
    *(_WORD *)&v55[24] = 0;
    v55[26] = 0;
    int v57 = 0;
    long long v56 = 0uLL;
    unint64_t v32 = v59;
    if (v59 >= v60)
    {
      unint64_t v36 = 0x8E38E38E38E38E39 * ((uint64_t)(v59 - v58) >> 3);
      unint64_t v37 = v36 + 1;
      if (v36 + 1 > 0x38E38E38E38E38ELL) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      if (0x1C71C71C71C71C72 * ((uint64_t)(v60 - v58) >> 3) > v37) {
        unint64_t v37 = 0x1C71C71C71C71C72 * ((uint64_t)(v60 - v58) >> 3);
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v60 - v58) >> 3) >= 0x1C71C71C71C71C7) {
        unint64_t v38 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v38 = v37;
      }
      uint64_t v77 = &v60;
      unint64_t v39 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v38);
      unint64_t v40 = &v39[9 * v36];
      unint64_t v73 = v39;
      long long v74 = v40;
      uint64_t v76 = &v39[9 * v41];
      long long v42 = v54;
      std::string::size_type v40[2] = *(void **)v55;
      *(_OWORD *)unint64_t v40 = v42;
      *(void *)std::basic_string<char16_t> v55 = 0;
      long long v54 = 0uLL;
      long long v43 = *(_OWORD *)&v55[8];
      *(_DWORD *)((char *)v40 + 39) = *(_DWORD *)&v55[23];
      *(_OWORD *)(v40 + 3) = v43;
      v40[7] = 0;
      v40[8] = 0;
      v40[6] = 0;
      *((_OWORD *)v40 + 3) = v56;
      v40[8] = v57;
      long long v56 = 0uLL;
      int v57 = 0;
      unint64_t v75 = v40 + 9;
      std::vector<nl_featurization::nlv4_types::Token>::__swap_out_circular_buffer(&v58, &v73);
      unint64_t v35 = v59;
      std::__split_buffer<nl_featurization::nlv4_types::Token>::~__split_buffer((uint64_t)&v73);
    }
    else
    {
      long long v33 = v54;
      *(void *)(v59 + 16) = *(void *)v55;
      *(_OWORD *)unint64_t v32 = v33;
      *(void *)std::basic_string<char16_t> v55 = 0;
      long long v54 = 0uLL;
      int v34 = *(_DWORD *)&v55[23];
      *(_OWORD *)(v32 + 24) = *(_OWORD *)&v55[8];
      *(_DWORD *)(v32 + 39) = v34;
      *(void *)(v32 + 56) = 0;
      *(void *)(v32 + 64) = 0;
      *(void *)(v32 + 48) = 0;
      *(_OWORD *)(v32 + 48) = v56;
      *(void *)(v32 + 64) = v57;
      long long v56 = 0uLL;
      int v57 = 0;
      unint64_t v35 = v32 + 72;
    }
    unint64_t v59 = v35;
    unint64_t v73 = (void **)&v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v73);
    if ((v55[7] & 0x80000000) != 0) {
      operator delete((void *)v54);
    }
  }
  nl_featurization::span_matching::MatchedSpansFeaturizer::featurize((unsigned __int16 *)v45 + 4, &v61, &v58, (uint64_t)&v54);
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  std::vector<nl_featurization::Token>::__init_with_size[abi:ne180100]<nl_featurization::Token*,nl_featurization::Token*>(&v52, v70, v71, 0xAAAAAAAAAAAAAAABLL * (v71 - v70));
  long long v47 = 0;
  std::basic_string<char16_t> v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v47, (const void *)v54, *((uint64_t *)&v54 + 1), (uint64_t)(*((void *)&v54 + 1) - v54) >> 3);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v51 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)&v55[8], *(uint64_t *)&v55[16], (uint64_t)(*(void *)&v55[16] - *(void *)&v55[8]) >> 3);
  *(_OWORD *)uint64_t v46 = v52;
  *(void *)(v46 + 16) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  *(void *)(v46 + 24) = 0;
  *(void *)(v46 + 32) = 0;
  *(void *)(v46 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(v46 + 24), v47, (uint64_t)v48, (v48 - (unsigned char *)v47) >> 3);
  *(_OWORD *)(v46 + 48) = *(_OWORD *)__p;
  *(void *)(v46 + 64) = v51;
  __p[1] = 0;
  uint64_t v51 = 0;
  __p[0] = 0;
  unint64_t v73 = 0;
  long long v74 = 0;
  unint64_t v75 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v73, *(const void **)(v46 + 24), *(void *)(v46 + 32), (uint64_t)(*(void *)(v46 + 32) - *(void *)(v46 + 24)) >> 3);
  if ((char *)v74 - (char *)v73 != 16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Span labels tensor is of incorrect shape");
    goto LABEL_71;
  }
  if ((void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 4)) != *v73)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Span labels tensor shape does not match tokens size");
LABEL_71:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v74 = v73;
  operator delete(v73);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v47)
  {
    std::basic_string<char16_t> v48 = v47;
    operator delete(v47);
  }
  unint64_t v73 = (void **)&v52;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v73);
  if (*(void *)&v55[8])
  {
    *(void *)&v55[16] = *(void *)&v55[8];
    operator delete(*(void **)&v55[8]);
  }
  if ((void)v54)
  {
    *((void *)&v54 + 1) = v54;
    operator delete((void *)v54);
  }
  *(void *)&long long v54 = &v58;
  std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v61;
  std::vector<nl_featurization::nlv4_types::MatchedSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v64;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v67;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v70;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_1C8F27D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t **a33,uint64_t a34,uint64_t a35,uint64_t *a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  __cxa_free_exception(v40);
  long long v43 = *(void **)(v41 - 136);
  if (v43)
  {
    *(void *)(v41 - 128) = v43;
    operator delete(v43);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v39);
  *(void *)(v41 - 96) = a10;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 96));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  *(void *)(v41 - 96) = &a17;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 96));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a21);
  *(void *)(v41 - 96) = &a33;
  std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 96));
  a33 = &a36;
  std::vector<nl_featurization::nlv4_types::MatchedSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a39;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a39 = v41 - 192;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  *(void *)(v41 - 192) = v41 - 160;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 192));
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::span_matching::MatchedSpan>::__insert_with_size[abi:ne180100]<std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>,std::__wrap_iter<nl_featurization::span_matching::MatchedSpan const*>>(uint64_t *a1, uint64_t a2, const std::basic_string<char16_t>::value_type **a3, const std::basic_string<char16_t>::value_type **a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = a2 - *a1;
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = *a1 + (v9 & 0xFFFFFFFFFFFFFFE0);
  uint64_t v13 = (uint64_t)(a1 + 2);
  uint64_t v12 = a1[2];
  long long v14 = (void *)a1[1];
  if (a5 <= (v12 - (uint64_t)v14) >> 5)
  {
    uint64_t v19 = ((uint64_t)v14 - v11) >> 5;
    if (v19 >= a5)
    {
      int v21 = &a3[4 * a5];
      std::basic_string<char16_t>::size_type v23 = (char *)a1[1];
    }
    else
    {
      long long v56 = a1 + 2;
      v60[0] = v14;
      std::basic_string<char16_t>::size_type v63 = v14;
      int v21 = &a3[4 * v19];
      *(void *)&long long v57 = &v63;
      *((void *)&v57 + 1) = v60;
      LOBYTE(v58) = 0;
      if (v21 == a4)
      {
        std::basic_string<char16_t>::size_type v23 = (char *)v14;
      }
      else
      {
        uint64_t v54 = v8;
        uint64_t v55 = v10;
        long long v22 = v21 + 1;
        std::basic_string<char16_t>::size_type v23 = (char *)v14;
        do
        {
          long long v24 = v22 - 1;
          *(void *)std::basic_string<char16_t>::size_type v23 = *(v22 - 1);
          long long v25 = (std::basic_string<char16_t> *)(v23 + 8);
          if (*((char *)v22 + 23) < 0)
          {
            std::basic_string<char16_t>::__init_copy_ctor_external(v25, *v22, (std::basic_string<char16_t>::size_type)v22[1]);
            std::basic_string<char16_t>::size_type v23 = (char *)v60[0];
          }
          else
          {
            long long v26 = *(_OWORD *)v22;
            *((void *)v23 + 3) = v22[2];
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
          }
          v23 += 32;
          v60[0] = v23;
          v22 += 4;
        }
        while (v24 + 4 != a4);
        uint64_t v8 = v54;
        uint64_t v10 = v55;
      }
      LOBYTE(v58) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::span_matching::MatchedSpan>,nl_featurization::span_matching::MatchedSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v56);
      a1[1] = (uint64_t)v23;
      if ((uint64_t)v14 - v11 < 1) {
        return;
      }
    }
    unint64_t v40 = (char *)(v11 + 32 * a5);
    uint64_t v41 = &v23[-32 * a5];
    long long v42 = v23;
    if (v41 < (char *)v14)
    {
      long long v42 = v23;
      do
      {
        *(void *)long long v42 = *(void *)v41;
        long long v43 = *(_OWORD *)(v41 + 8);
        *((void *)v42 + 3) = *((void *)v41 + 3);
        *(_OWORD *)(v42 + 8) = v43;
        *((void *)v41 + 2) = 0;
        *((void *)v41 + 3) = 0;
        *((void *)v41 + 1) = 0;
        v42 += 32;
        v41 += 32;
      }
      while (v41 < (char *)v14);
    }
    a1[1] = (uint64_t)v42;
    if (v23 != v40)
    {
      uint64_t v44 = 0;
      uint64_t v45 = (v23 - v40) >> 5;
      uint64_t v46 = v8 + 32 * v10 + 32 * v45;
      uint64_t v47 = -32 * v45;
      do
      {
        uint64_t v48 = v46 + v44;
        *(void *)&v23[v44 - 32] = *(void *)(v46 + v44 - 32);
        uint64_t v49 = (uint64_t)&v23[v44 - 24];
        if (v23[v44 - 1] < 0) {
          operator delete(*(void **)v49);
        }
        v44 -= 32;
        long long v50 = *(_OWORD *)(v48 - 24);
        *(void *)(v49 + 16) = *(void *)(v48 - 8);
        *(_OWORD *)uint64_t v49 = v50;
        *(unsigned char *)(v48 - 1) = 0;
        *(_WORD *)(v48 - 24) = 0;
      }
      while (v47 != v44);
    }
    while (v6 != v21)
    {
      uint64_t v51 = (const std::basic_string<char16_t> *)(v6 + 1);
      long long v52 = *v6;
      v6 += 4;
      uint64_t v53 = (std::basic_string<char16_t> *)(v11 + 8);
      *(void *)uint64_t v11 = v52;
      v11 += 32;
      std::basic_string<char16_t>::operator=(v53, v51);
    }
  }
  else
  {
    unint64_t v15 = a5 + (((uint64_t)v14 - v8) >> 5);
    if (v15 >> 59) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - v8;
    if (v16 >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v59 = v13;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v27 = 0;
    unint64_t v28 = v17 + 32 * v10;
    long long v56 = (uint64_t *)v17;
    *(void *)&long long v57 = v28;
    *((void *)&v57 + 1) = v28;
    unint64_t v58 = v17 + 32 * v18;
    uint64_t v29 = 32 * a5;
    uint64_t v30 = v28 + 32 * a5;
    do
    {
      *(void *)(v28 + v27) = v6[v27 / 8];
      int8x16_t v31 = (std::basic_string<char16_t> *)(v28 + v27 + 8);
      unint64_t v32 = &v6[v27 / 8 + 1];
      if (SHIBYTE(v6[v27 / 8 + 3]) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v31, *v32, (std::basic_string<char16_t>::size_type)v6[v27 / 8 + 2]);
      }
      else
      {
        long long v33 = *(_OWORD *)v32;
        *(void *)(v28 + v27 + 24) = v6[v27 / 8 + 3];
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v33;
      }
      v27 += 32;
    }
    while (v29 != v27);
    *((void *)&v57 + 1) = v30;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nl_featurization::span_matching::MatchedSpan>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>>(v13, v11, v11, *a1, *a1, v57, v57);
    *(void *)&long long v57 = v34;
    uint64_t v35 = a1[1];
    std::basic_string<char16_t>::size_type v63 = (void *)v30;
    uint64_t v62 = v30;
    v60[0] = v13;
    v60[1] = &v62;
    v60[2] = &v63;
    if (v11 != v35)
    {
      do
      {
        *(void *)uint64_t v30 = *(void *)v11;
        long long v36 = *(_OWORD *)(v11 + 8);
        *(void *)(v30 + 24) = *(void *)(v11 + 24);
        *(_OWORD *)(v30 + 8) = v36;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        v30 += 32;
        v11 += 32;
      }
      while (v11 != v35);
      std::basic_string<char16_t>::size_type v63 = (void *)v30;
    }
    char v61 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::span_matching::MatchedSpan>,nl_featurization::span_matching::MatchedSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v60);
    long long v37 = *(_OWORD *)a1;
    uint64_t v38 = v58;
    *a1 = v57;
    a1[1] = v30;
    long long v57 = v37;
    uint64_t v39 = a1[2];
    a1[2] = v38;
    unint64_t v58 = v39;
    long long v56 = (uint64_t *)v37;
    std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)&v56);
  }
}

void sub_1C8F28258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::span_matching::MatchedSpan>,nl_featurization::span_matching::MatchedSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(void *)(v4 + 8) = v5;
  _Unwind_Resume(a1);
}

void nl_featurization::nlv4_types::Token::~Token(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<nl_featurization::nlv4_types::MatchedSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<nl_featurization::nlv4_types::Token>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 56) = *(void *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 72) = 0;
      long long v7 = *(_OWORD *)(v3 - 48);
      *(_DWORD *)(v4 - 33) = *(_DWORD *)(v3 - 33);
      *(_OWORD *)(v4 - 48) = v7;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 72;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *__n128 result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nl_featurization::nlv4_types::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<nl_featurization::nlv4_types::Token>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::span_matching::MatchedSpan>,nl_featurization::span_matching::MatchedSpan*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void nl_featurization::FeaturizerImpl::~FeaturizerImpl(nl_featurization::FeaturizerImpl *this)
{
  nl_featurization::FeaturizerImpl::~FeaturizerImpl(this);
  JUMPOUT(0x1CB775C40);
}

{
  char *v2;

  *(void *)this = &unk_1F235EC00;
  uint64_t v2 = (char *)this + 168;
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 128);
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((char **)this + 8));
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void nl_featurization::buildFeaturizer(nl_featurization *this, const nl_featurization::FeaturizerConfig *a2)
{
  nl_featurization::vocabulary::Vocabulary::Vocabulary(&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v7, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v7 = v14;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> __p = v15;
  }
  uint64_t v9 = v16;
  v10[0] = (char *)v17;
  v10[1] = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v10;
    uint64_t v16 = (char **)&v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v9 = v10;
  }
  uint64_t v11 = v19;
  v12[0] = (char *)v20;
  v12[1] = v21;
  if (v21)
  {
    *(void *)(v20 + 16) = v12;
    uint64_t v19 = (char **)&v20;
    uint64_t v20 = 0;
    int v21 = 0;
  }
  else
  {
    uint64_t v11 = v12;
  }
  if (*((char *)this + 31) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v6, *((const std::basic_string<char16_t>::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::basic_string<char16_t> v6 = *(std::basic_string<char16_t> *)((char *)this + 8);
  }
  memset(v4, 0, sizeof(v4));
  int v5 = 1065353216;
  nl_featurization::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(&v13, (long long *)&v7, (uint64_t)&v6, (uint64_t *)v4);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(v12[0]);
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(v10[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie((uint64_t *)this + 4, (uint64_t)&v3);
  operator new();
}

void sub_1C8F2890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void nl_featurization::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(nl_featurization::span_matching::MatchedSpansFeaturizer *this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((char **)this + 10));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((char **)this + 7));
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

std::basic_string<char16_t> *nl_featurization::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(std::basic_string<char16_t> *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this + 1, *((const std::basic_string<char16_t>::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  p_std::basic_string<char16_t>::size_type size = &this[2].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&this[2].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::basic_string<char16_t> v7 = (void *)*((void *)a2 + 6);
  if (v7 != (void *)((char *)a2 + 56))
  {
    do
    {
      std::basic_string<char16_t>::size_type v8 = *p_size;
      uint64_t v9 = &this[2].__r_.__value_.__l.__size_;
      if ((std::basic_string<char16_t>::size_type *)this[2].__r_.__value_.__l.__data_ == p_size) {
        goto LABEL_14;
      }
      uint64_t v10 = (std::basic_string<char16_t>::size_type *)*p_size;
      uint64_t v11 = &this[2].__r_.__value_.__l.__size_;
      if (v8)
      {
        do
        {
          uint64_t v9 = v10;
          uint64_t v10 = (std::basic_string<char16_t>::size_type *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (std::basic_string<char16_t>::size_type *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (std::less<std::basic_string<char16_t>>::operator()[abi:ne180100]((unsigned __int16 *)v9 + 16, (unsigned __int16 *)v7 + 16))
      {
LABEL_14:
        if (!v8)
        {
          long long v36 = &this[2].__r_.__value_.__l.__size_;
          std::basic_string<char16_t> v13 = (uint64_t **)&this[2].__r_.__value_.__l.__size_;
LABEL_20:
          std::basic_string<char16_t> v14 = (uint64_t *)operator new(0x40uLL);
          std::basic_string<char16_t> v15 = (std::basic_string<char16_t> *)(v14 + 4);
          if (*((char *)v7 + 55) < 0)
          {
            std::basic_string<char16_t>::__init_copy_ctor_external(v15, (const std::basic_string<char16_t>::value_type *)v7[4], v7[5]);
          }
          else
          {
            long long v16 = *((_OWORD *)v7 + 2);
            v14[6] = v7[6];
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          v14[7] = v7[7];
          std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)&this[2], (uint64_t)v36, v13, v14);
          goto LABEL_24;
        }
        long long v36 = v9;
        std::basic_string<char16_t> v13 = (uint64_t **)(v9 + 1);
      }
      else
      {
        std::basic_string<char16_t> v13 = (uint64_t **)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::__find_equal<std::basic_string<char16_t>>((uint64_t)&this[2], &v36, (unsigned __int16 *)v7 + 16);
      }
      if (!*v13) {
        goto LABEL_20;
      }
LABEL_24:
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v7[2];
          BOOL v12 = *v18 == (void)v7;
          std::basic_string<char16_t> v7 = v18;
        }
        while (!v12);
      }
      std::basic_string<char16_t> v7 = v18;
    }
    while (v18 != (void *)((char *)a2 + 56));
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  uint64_t v19 = &this[3].__r_.__value_.__l.__size_;
  this[3].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&this[3].__r_.__value_.__l.__size_;
  this[3].__r_.__value_.__r.__words[2] = 0;
  uint64_t v20 = (long long *)*((void *)a2 + 9);
  if (v20 != a2 + 5)
  {
    do
    {
      int v21 = (uint64_t *)*v19;
      long long v22 = &this[3].__r_.__value_.__l.__size_;
      if ((std::basic_string<char16_t>::size_type *)this[3].__r_.__value_.__l.__data_ == v19) {
        goto LABEL_37;
      }
      std::basic_string<char16_t>::size_type v23 = (std::basic_string<char16_t>::size_type *)*v19;
      long long v24 = &this[3].__r_.__value_.__l.__size_;
      if (v21)
      {
        do
        {
          long long v22 = v23;
          std::basic_string<char16_t>::size_type v23 = (std::basic_string<char16_t>::size_type *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v22 = (std::basic_string<char16_t>::size_type *)v24[2];
          BOOL v12 = *v22 == (void)v24;
          long long v24 = v22;
        }
        while (v12);
      }
      std::basic_string<char16_t>::size_type v25 = *((void *)v20 + 4);
      if (v22[4] < v25)
      {
LABEL_37:
        if (v21) {
          long long v26 = (uint64_t **)v22;
        }
        else {
          long long v26 = (uint64_t **)&this[3].__r_.__value_.__l.__size_;
        }
        if (v21) {
          unint64_t v27 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v27 = (uint64_t **)&this[3].__r_.__value_.__l.__size_;
        }
      }
      else
      {
        long long v26 = (uint64_t **)&this[3].__r_.__value_.__l.__size_;
        unint64_t v27 = (uint64_t **)&this[3].__r_.__value_.__l.__size_;
        if (v21)
        {
          unint64_t v27 = (uint64_t **)&this[3].__r_.__value_.__l.__size_;
          while (1)
          {
            while (1)
            {
              long long v26 = (uint64_t **)v21;
              unint64_t v31 = v21[4];
              if (v25 >= v31) {
                break;
              }
              int v21 = *v26;
              unint64_t v27 = v26;
              if (!*v26) {
                goto LABEL_44;
              }
            }
            if (v31 >= v25) {
              break;
            }
            unint64_t v27 = v26 + 1;
            int v21 = v26[1];
            if (!v21) {
              goto LABEL_44;
            }
          }
        }
      }
      if (!*v27)
      {
LABEL_44:
        unint64_t v28 = (uint64_t *)operator new(0x40uLL);
        v28[4] = *((void *)v20 + 4);
        uint64_t v29 = (std::basic_string<char16_t> *)(v28 + 5);
        if (*((char *)v20 + 63) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v29, *((const std::basic_string<char16_t>::value_type **)v20 + 5), *((void *)v20 + 6));
        }
        else
        {
          long long v30 = *(long long *)((char *)v20 + 40);
          void v28[7] = *((void *)v20 + 7);
          *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
        }
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)&this[3], (uint64_t)v26, v27, v28);
      }
      unint64_t v32 = (long long *)*((void *)v20 + 1);
      if (v32)
      {
        do
        {
          long long v33 = v32;
          unint64_t v32 = *(long long **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          long long v33 = (long long *)*((void *)v20 + 2);
          BOOL v12 = *(void *)v33 == (void)v20;
          uint64_t v20 = v33;
        }
        while (!v12);
      }
      uint64_t v20 = v33;
    }
    while (v33 != a2 + 5);
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this + 4, *((const std::basic_string<char16_t>::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v34 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v34;
  }
  std::unordered_set<std::basic_string<char16_t>>::unordered_set((uint64_t)&this[5], (uint64_t)a2 + 120);
  return this;
}

void sub_1C8F28DF4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(v1 + 80));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(v1 + 56));
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

BOOL std::less<std::basic_string<char16_t>>::operator()[abi:ne180100](unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = *((void *)a2 + 1);
  }
  unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *((void *)a1 + 1);
  }
  if (v2 >= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v2;
  }
  if (v6)
  {
    if (v5 >= 0) {
      std::basic_string<char16_t> v7 = a1;
    }
    else {
      std::basic_string<char16_t> v7 = *(unsigned __int16 **)a1;
    }
    if (v3 >= 0) {
      std::basic_string<char16_t>::size_type v8 = a2;
    }
    else {
      std::basic_string<char16_t>::size_type v8 = *(unsigned __int16 **)a2;
    }
    while (1)
    {
      unsigned int v9 = *v7;
      unsigned int v10 = *v8;
      if (v10 != v9) {
        break;
      }
      ++v7;
      ++v8;
      if (!--v6) {
        goto LABEL_17;
      }
    }
    BOOL v11 = v9 >= v10;
  }
  else
  {
LABEL_17:
    BOOL v11 = v4 >= v2;
  }
  return !v11;
}

void *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::__find_equal<std::basic_string<char16_t>>(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        std::basic_string<char16_t> v7 = (void *)v4;
        std::basic_string<char16_t>::size_type v8 = (unsigned __int16 *)(v4 + 32);
        if (!std::less<std::basic_string<char16_t>>::operator()[abi:ne180100](a3, (unsigned __int16 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::basic_string<char16_t>>::operator()[abi:ne180100](v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    std::basic_string<char16_t> v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t nl_featurization::FeaturizerConfig::getSpanVocabularyDataFilePath(nl_featurization::FeaturizerConfig *this)
{
  return (uint64_t)this + 56;
}

uint64_t nl_featurization::FeaturizerConfig::getBioTagDelimiter(nl_featurization::FeaturizerConfig *this)
{
  return (uint64_t)this + 8;
}

uint64_t nl_featurization::FeaturizerConfig::getSpanMatcherPatterns(nl_featurization::FeaturizerConfig *this)
{
  return (uint64_t)this + 32;
}

uint64_t nl_featurization::FeaturizerConfig::getFlags(nl_featurization::FeaturizerConfig *this)
{
  return *(void *)this;
}

uint64_t nl_featurization::FeaturizerOutput::getSpanLabelsTensor(nl_featurization::FeaturizerOutput *this)
{
  return (uint64_t)this + 24;
}

void convert(std::string *this, uint64_t a2)
{
  unint64_t v2 = (void *)a2;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
    uint64_t v4 = (unsigned char *)(a2 + 23);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      LODWORD(v6) = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = 22;
    }
    else {
      int v7 = LODWORD(this->__r_.__value_.__r.__words[2]) - 1;
    }
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    uint64_t v4 = (unsigned char *)(a2 + 23);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      LODWORD(v6) = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    int v7 = 22;
  }
  if (v7 < (int)v6)
  {
    std::string::reserve(this, (int)v6);
    LOBYTE(v5) = *v4;
  }
  char v17 = 0;
  *(_DWORD *)std::string __s = 0;
  if ((v5 & 0x80u) != 0) {
    unint64_t v2 = (void *)*v2;
  }
  if ((int)v6 >= 1)
  {
    int v8 = 0;
    while (1)
    {
      uint64_t v9 = v8 + 1;
      unsigned int v10 = *((unsigned __int16 *)v2 + v8);
      if ((v10 & 0xFC00) == 0xD800 && v9 != v6) {
        break;
      }
      if (v10 > 0x7F)
      {
        if (v10 <= 0x7FF)
        {
          __s[0] = (v10 >> 6) | 0xC0;
          uint64_t v15 = 1;
LABEL_31:
          std::string::size_type v12 = v15 + 1;
          __s[v15] = v10 & 0x3F | 0x80;
          goto LABEL_32;
        }
LABEL_29:
        __s[0] = (v10 >> 12) | 0xE0;
        uint64_t v14 = 1;
LABEL_30:
        uint64_t v15 = v14 + 1;
        *(unsigned char *)((unint64_t)__s | v14) = (v10 >> 6) & 0x3F | 0x80;
        goto LABEL_31;
      }
      __s[0] = *((_WORD *)v2 + v8);
      std::string::size_type v12 = 1;
LABEL_32:
      std::string::append(this, __s, v12);
      int v8 = v9;
      if ((int)v9 >= (int)v6) {
        return;
      }
    }
    int v13 = *((unsigned __int16 *)v2 + v9);
    if ((v13 & 0xFC00) != 0xDC00) {
      goto LABEL_29;
    }
    LODWORD(v9) = v8 + 2;
    unsigned int v10 = v13 + (v10 << 10) - 56613888;
    __s[0] = (v10 >> 18) | 0xF0;
    __s[1] = (v10 >> 12) & 0x3F | 0x80;
    uint64_t v14 = 2;
    goto LABEL_30;
  }
}

uint64_t isU16CharAppendSafe()
{
  return 1;
}

void normalize(uint64_t a1@<X0>, int a2@<W1>, std::basic_string<char16_t> *a3@<X8>)
{
  UErrorCode v27 = U_ZERO_ERROR;
  switch(a2)
  {
    case 0:
      unorm2_getNFCInstance();
      break;
    case 1:
      unorm2_getNFDInstance();
      break;
    case 2:
      unorm2_getNFKCInstance();
      break;
    case 3:
      unorm2_getNFKDInstance();
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to instantiate a normalizer form the input normalizer choice");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(char *)(a1 + 23) >= 0) {
    LODWORD(v6) = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  if ((int)v6 >= 1)
  {
    std::basic_string<char16_t>::resize(a3, v6, v5);
    int v7 = unorm2_normalize();
    if (v7 != v6) {
      std::basic_string<char16_t>::resize(a3, v7, v8);
    }
    int v9 = v27;
    if (v27 == U_BUFFER_OVERFLOW_ERROR)
    {
      UErrorCode v27 = U_ZERO_ERROR;
      unorm2_normalize();
      int v9 = 0;
    }
    if (v9 >= 1)
    {
      unsigned int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      toString(a1, &v23);
      BOOL v11 = std::string::insert(&v23, 0, "Failed to normalize string ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      int v13 = std::string::append(&v24, " - due to error: ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = (char *)u_errorName(v27);
      std::string::basic_string[abi:ne180100]<0>(v21, v15);
      if ((v22 & 0x80u) == 0) {
        long long v16 = (const std::string::value_type *)v21;
      }
      else {
        long long v16 = (const std::string::value_type *)v21[0];
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v17 = v22;
      }
      else {
        std::string::size_type v17 = v21[1];
      }
      uint64_t v18 = std::string::append(&v25, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v10, &v26);
      __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
}

void sub_1C8F2952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v33 + 23) < 0) {
        operator delete(*(void **)v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

void toString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  convert(a2, a1);
}

void sub_1C8F296A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void toU16String(const char *a1@<X0>, std::basic_string<char16_t>::size_type a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  int v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::basic_string<char16_t>::reserve(a3, a2);
  LODWORD(v6) = 0;
  __int16 v20 = 0;
  *(_DWORD *)std::string __s = 0;
  while ((int)v6 < v3)
  {
    int v7 = v6;
    uint64_t v8 = (int)v6 + 1;
    int v9 = a1[(int)v6];
    unsigned int v10 = a1[(int)v6];
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    if (v8 == v3) {
      goto LABEL_6;
    }
    if (v10 < 0xE0)
    {
      if (v10 < 0xC2) {
        goto LABEL_23;
      }
      unsigned int v15 = v10 & 0x1F;
    }
    else
    {
      if (v10 > 0xEF)
      {
        if (v10 > 0xF4
          || (v18 = v10 - 240, unint64_t v13 = a1[v8], ((byte_1C8F4063D[v13 >> 4] >> v18) & 1) == 0))
        {
LABEL_23:
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v8;
          goto LABEL_24;
        }
        uint64_t v6 = (int)v6 + 2;
        if (v7 + 2 == v3)
        {
LABEL_6:
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v3;
          goto LABEL_24;
        }
        unsigned int v14 = a1[v6] ^ 0x80;
        if (v14 > 0x3F)
        {
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          goto LABEL_24;
        }
        LODWORD(v13) = v13 & 0x3F | (v18 << 6);
        LODWORD(v8) = v6;
      }
      else
      {
        unint64_t v13 = v9 & 0xF;
        if (((a00000000000000[v13] >> (a1[v8] >> 5)) & 1) == 0) {
          goto LABEL_23;
        }
        unsigned int v14 = a1[v8] & 0x3F;
      }
      LODWORD(v8) = v8 + 1;
      if (v8 == v3) {
        goto LABEL_6;
      }
      unsigned int v15 = v14 | (v13 << 6);
    }
    unsigned int v16 = a1[(int)v8] ^ 0x80;
    if (v16 >= 0x40) {
      goto LABEL_23;
    }
    unsigned int v10 = v16 | (v15 << 6);
    LODWORD(v8) = v8 + 1;
    int v17 = (unsigned __int16)(v15 >> 10);
    LODWORD(v6) = v8;
    unsigned int v12 = v10;
    if (!v17)
    {
LABEL_4:
      __s[0] = v10;
      LODWORD(v6) = v8;
      std::basic_string<char16_t>::size_type v11 = 1;
      goto LABEL_25;
    }
LABEL_24:
    __s[0] = (v12 >> 10) - 10304;
    __s[1] = v10 & 0x3FF | 0xDC00;
    std::basic_string<char16_t>::size_type v11 = 2;
LABEL_25:
    std::basic_string<char16_t>::append(a3, __s, v11);
  }
}

void sub_1C8F29880(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void toU16String(const char *a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  std::basic_string<char16_t>::size_type v2 = *((void *)a1 + 1);
  if (a1[23] >= 0)
  {
    std::basic_string<char16_t>::size_type v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = *(const char **)a1;
    std::basic_string<char16_t>::size_type v3 = v2;
  }
  toU16String(a1, v3, a2);
}

BOOL u16strCaseCompare(uint64_t *a1, uint64_t a2)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  int32_t v2 = *((unsigned __int8 *)a1 + 23);
  int32_t v3 = *((_DWORD *)a1 + 2);
  if ((v2 & 0x80u) != 0)
  {
    a1 = (uint64_t *)*a1;
    int32_t v2 = v3;
  }
  char v4 = *(unsigned char *)(a2 + 23);
  if (v4 >= 0) {
    std::basic_string<char16_t>::value_type v5 = (const UChar *)a2;
  }
  else {
    std::basic_string<char16_t>::value_type v5 = *(const UChar **)a2;
  }
  if (v4 >= 0) {
    int32_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int32_t v6 = *(_DWORD *)(a2 + 8);
  }
  int32_t v7 = u_strCaseCompare((const UChar *)a1, v2, v5, v6, 0x8000u, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unsigned int v10 = (char *)u_errorName(pErrorCode);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    std::basic_string<char16_t>::size_type v11 = std::string::insert(&v13, 0, "Failed to compare strings - due to error: ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v7 == 0;
}

void sub_1C8F299CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void u16strCaseFold(uint64_t a1@<X0>, std::basic_string<char16_t>::value_type a2@<W2>, uint64_t a3@<X8>)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  if (*(char *)(a1 + 23) >= 0) {
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a3, (int)v5, a2);
  if (*(char *)(a3 + 23) >= 0) {
    int32_t v6 = (UChar *)a3;
  }
  else {
    int32_t v6 = *(UChar **)a3;
  }
  if (*(char *)(a1 + 23) >= 0) {
    int32_t v7 = (const UChar *)a1;
  }
  else {
    int32_t v7 = *(const UChar **)a1;
  }
  int32_t v8 = u_strFoldCase(v6, v5, v7, v5, 0, &pErrorCode);
  int32_t v10 = v8;
  if (v8 != v5) {
    std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a3, v8, v9);
  }
  UErrorCode v11 = pErrorCode;
  if (pErrorCode == U_BUFFER_OVERFLOW_ERROR)
  {
    UErrorCode pErrorCode = U_ZERO_ERROR;
    if (*(char *)(a3 + 23) >= 0) {
      long long v12 = (UChar *)a3;
    }
    else {
      long long v12 = *(UChar **)a3;
    }
    if (*(char *)(a1 + 23) >= 0) {
      std::string v13 = (const UChar *)a1;
    }
    else {
      std::string v13 = *(const UChar **)a1;
    }
    u_strFoldCase(v12, v10, v13, v5, 0, &pErrorCode);
    UErrorCode v11 = pErrorCode;
  }
  if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    toString(a1, &v26);
    unsigned int v15 = std::string::insert(&v26, 0, "Failed to casefold string: ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = std::string::append(&v27, " - due to error: ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    long long v19 = (char *)u_errorName(pErrorCode);
    std::string::basic_string[abi:ne180100]<0>(v24, v19);
    if ((v25 & 0x80u) == 0) {
      __int16 v20 = (const std::string::value_type *)v24;
    }
    else {
      __int16 v20 = (const std::string::value_type *)v24[0];
    }
    if ((v25 & 0x80u) == 0) {
      std::string::size_type v21 = v25;
    }
    else {
      std::string::size_type v21 = v24[1];
    }
    int v22 = std::string::append(&v28, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_1C8F29C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v33 + 23) < 0) {
        operator delete(*(void **)v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

void u16Substring(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, std::basic_string<char16_t> *a4@<X8>)
{
  int v6 = *((char *)a1 + 23);
  if (v6 >= 0) {
    unint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v7 = a1[1];
  }
  if (v7 < a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v42, a3);
    std::string::size_type v21 = std::string::insert(&v42, 0, "Invalid substring range. The endIndex");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    long long v23 = std::string::append(&v43, " >= src length ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v41, v7);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v25 = &v41;
    }
    else {
      unsigned __int8 v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    std::string v27 = std::string::append(&v44, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__s);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v9 = a3 >= a2;
  std::basic_string<char16_t>::size_type v10 = a3 - a2;
  if (v10 == 0 || !v9)
  {
    std::string v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, a2);
    long long v30 = std::string::insert(&v41, 0, "Invalid substring range. startIndex  (");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    unint64_t v32 = std::string::append(&v42, ") >= endIndex (");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, a3);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v34 = &v40;
    }
    else {
      long long v34 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = std::string::append(&v43, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = std::string::append(&v44, ")");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &__s);
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (v6 >= 0) {
    UErrorCode v11 = a1;
  }
  else {
    UErrorCode v11 = (uint64_t *)*a1;
  }
  *(_DWORD *)&__s.__r_.__value_.__s.__data_[2] = 0;
  std::basic_string<char16_t>::reserve(a4, v10);
  unint64_t v12 = 0;
  do
  {
    unint64_t v13 = v12 + 1;
    unsigned int v14 = *((unsigned __int16 *)v11 + v12);
    if (v12 + 1 != v7 && (v14 & 0xFC00) == 0xD800)
    {
      int v15 = *((unsigned __int16 *)v11 + v13);
      BOOL v16 = (v15 & 0xFC00) == 56320;
      int v17 = v15 + (v14 << 10) - 56613888;
      if (v16) {
        unsigned int v14 = v17;
      }
      if (v16) {
        unint64_t v13 = v12 + 2;
      }
      else {
        unint64_t v13 = v12 + 1;
      }
    }
    if (v12 >= a2)
    {
      if (HIWORD(v14))
      {
        __int16 v19 = v14 & 0x3FF | 0xDC00;
        unsigned int v14 = (v14 >> 10) - 10304;
        *(_WORD *)&__s.__r_.__value_.__s.__data_[2] = v19;
        std::basic_string<char16_t>::size_type v18 = 2;
      }
      else
      {
        std::basic_string<char16_t>::size_type v18 = 1;
      }
      LOWORD(__s.__r_.__value_.__l.__data_) = v14;
      std::basic_string<char16_t>::append(a4, (const std::basic_string<char16_t>::value_type *)&__s, v18);
    }
    unint64_t v12 = v13;
  }
  while (v13 < a3);
}

void sub_1C8F2A020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v40);
  goto LABEL_16;
}

void nl_featurization::vocabulary::Vocabulary::insertToken(uint64_t a1, uint64_t a2, std::basic_string<char16_t>::size_type a3)
{
  if (*(void *)(a1 + 88) != *(void *)(a1 + 64)) {
    __assert_rtn("insertToken", "vocabulary.cpp", 17, "mIdToText.size() == mTextToId.size()");
  }
  int v6 = (uint64_t **)(a1 + 48);
  if (*(char *)(a2 + 23) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::basic_string<char16_t> __p = *(std::basic_string<char16_t> *)a2;
  }
  std::basic_string<char16_t>::size_type v19 = a3;
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::__find_equal<std::basic_string<char16_t>>((uint64_t)v6, &v20, (unsigned __int16 *)&__p);
  if (*v7)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int32_t v8 = v7;
  BOOL v9 = (uint64_t *)operator new(0x40uLL);
  std::basic_string<char16_t>::size_type v10 = (std::basic_string<char16_t> *)(v9 + 4);
  char v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v9[6] = __p.__r_.__value_.__r.__words[2];
  }
  v9[7] = a3;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(v6, v20, v8, v9);
  if (v11 < 0) {
LABEL_7:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_8:
  __p.__r_.__value_.__r.__words[0] = a3;
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&__p.__r_.__value_.__r.__words[1], *(const std::basic_string<char16_t>::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)a2;
    std::basic_string<char16_t>::size_type v19 = *(void *)(a2 + 16);
  }
  unint64_t v13 = (uint64_t **)(a1 + 80);
  unint64_t v12 = *(uint64_t **)(a1 + 80);
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v14 = (uint64_t **)v12;
        std::basic_string<char16_t>::size_type v15 = v12[4];
        if (__p.__r_.__value_.__r.__words[0] >= v15) {
          break;
        }
        unint64_t v12 = *v14;
        unint64_t v13 = v14;
        if (!*v14) {
          goto LABEL_21;
        }
      }
      if (v15 >= __p.__r_.__value_.__r.__words[0]) {
        break;
      }
      unint64_t v12 = v14[1];
      if (!v12)
      {
        unint64_t v13 = v14 + 1;
        goto LABEL_21;
      }
    }
    if (SHIBYTE(v19) < 0)
    {
      std::string::size_type size = (void *)__p.__r_.__value_.__l.__size_;
      operator delete(size);
    }
  }
  else
  {
    unsigned int v14 = (uint64_t **)(a1 + 80);
LABEL_21:
    BOOL v16 = (char *)operator new(0x40uLL);
    *(std::basic_string<char16_t> *)(v16 + 32) = __p;
    *((void *)v16 + 7) = v19;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    std::basic_string<char16_t>::size_type v19 = 0;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)(a1 + 72), (uint64_t)v14, v13, (uint64_t *)v16);
  }
}

void sub_1C8F2A3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned long>,void *>>>::operator()[abi:ne180100](0, v18);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::vocabulary::Vocabulary::getPadTokenId(nl_featurization::vocabulary::Vocabulary *this)
{
  int32_t v2 = (void *)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)this + 48, (unsigned __int16 *)this + 12);
  if ((void *)((char *)this + 56) == v2) {
    return 0;
  }
  else {
    return v2[7];
  }
}

uint64_t std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = std::less<std::basic_string<char16_t>>::operator()[abi:ne180100]((unsigned __int16 *)(v3 + 32), a2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::basic_string<char16_t>>::operator()[abi:ne180100](a2, (unsigned __int16 *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t nl_featurization::vocabulary::Vocabulary::getUnknownTokenId(nl_featurization::vocabulary::Vocabulary *this)
{
  uint64_t v2 = (void *)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)this + 48, (unsigned __int16 *)this);
  if ((void *)((char *)this + 56) == v2) {
    return 0;
  }
  else {
    return v2[7];
  }
}

void nl_featurization::vocabulary::Vocabulary::initializeFromStream(uint64_t a1, void *a2)
{
  std::basic_string<char16_t>::size_type v4 = 0;
  unint64_t v12 = 0;
  std::basic_string<char16_t>::size_type v13 = 0;
  uint64_t v14 = 0;
  uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    BOOL v6 = std::locale::use_facet((const std::locale *)&__p, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)&__p);
    int32_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v12, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v14 >= 0) {
      std::basic_string<char16_t>::size_type v9 = HIBYTE(v14);
    }
    else {
      std::basic_string<char16_t>::size_type v9 = v13;
    }
    if (v9)
    {
      if (v14 >= 0) {
        std::basic_string<char16_t>::size_type v10 = (const char *)&v12;
      }
      else {
        std::basic_string<char16_t>::size_type v10 = (const char *)v12;
      }
      toU16String(v10, v9, &__p);
      nl_featurization::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, v4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v4;
    }
  }
  if (v14 < 0) {
    operator delete(v12);
  }
}

void sub_1C8F2A690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nl_featurization::vocabulary::Vocabulary::Vocabulary(void *a1)
{
  v8[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(a1, "[");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v2 + 3, "[");
  a1[10] = 0;
  a1[7] = 0;
  a1[6] = a1 + 7;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = a1 + 10;
  std::ifstream::basic_ifstream(v6);
  if ((v7[*(void *)(v6[0] - 24) + 16] & 5) != 0)
  {
    std::ifstream::close(v6);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  nl_featurization::vocabulary::Vocabulary::initializeFromStream((uint64_t)a1, v6);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)), *(_DWORD *)&v7[*(void *)(v6[0] - 24) + 16] | 4);
  }
  v6[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v7);
  std::istream::~istream();
  MEMORY[0x1CB775B50](v8);
  return a1;
}

void sub_1C8F2A928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a15);
      std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(v15 + 80));
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(v15 + 56));
      if (*(char *)(v15 + 47) < 0) {
        operator delete(*v16);
      }
      if (*(char *)(v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void *nl_featurization::vocabulary::Vocabulary::Vocabulary(void *a1, void *a2)
{
  std::basic_string<char16_t>::size_type v4 = std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(a1, "[");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v4 + 3, "[");
  a1[7] = 0;
  a1[6] = a1 + 7;
  a1[11] = 0;
  a1[10] = 0;
  a1[8] = 0;
  a1[9] = a1 + 10;
  nl_featurization::vocabulary::Vocabulary::initializeFromStream((uint64_t)a1, a2);
  return a1;
}

void sub_1C8F2AA2C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(v1 + 80));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(v1 + 56));
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::vocabulary::Vocabulary::numericalizeToken(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "tokenText argument is empty");
    goto LABEL_10;
  }
  uint64_t v4 = (uint64_t)(a1 + 24);
  uint64_t v5 = std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)(a1 + 24), (unsigned __int16 *)a2);
  if (a1 + 28 != (unsigned __int16 *)v5) {
    return *(void *)(v5 + 56);
  }
  if (v5 == std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>(v4, a1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Encountered unknown token text and the vocabulary hasno special unknown token");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v5 = *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::__find_equal<std::basic_string<char16_t>>(v4, &v8, a1);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return *(void *)(v5 + 56);
}

void sub_1C8F2AB68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nl_featurization::vocabulary::Vocabulary::denumericalizeToken(nl_featurization::vocabulary::Vocabulary *this@<X0>, unint64_t a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  uint64_t v5 = (void *)*((void *)this + 10);
  uint64_t v3 = (char *)this + 80;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_17;
  }
  BOOL v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      std::basic_string<char16_t>::size_type v9 = v4;
    }
    else {
      std::basic_string<char16_t>::size_type v9 = v4 + 1;
    }
    if (v8) {
      BOOL v6 = (char *)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || *((void *)v6 + 4) > a2)
  {
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Encountered unknown token ID");
    __cxa_throw(exception, (struct type_info *)off_1E657FB30, MEMORY[0x1E4FBA1B8]);
  }
  if (v6[63] < 0)
  {
    std::basic_string<char16_t>::size_type v10 = (const std::basic_string<char16_t>::value_type *)*((void *)v6 + 5);
    std::basic_string<char16_t>::size_type v11 = *((void *)v6 + 6);
    std::basic_string<char16_t>::__init_copy_ctor_external(a3, v10, v11);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 7);
  }
}

void sub_1C8F2AC4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::vocabulary::Vocabulary::size(nl_featurization::vocabulary::Vocabulary *this)
{
  return *((void *)this + 8);
}

void nl_featurization::bio::TagBucketList::addBIOUL(int8x8_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  v123[2] = *MEMORY[0x1E4F143B8];
  if (a4 < a3 || (uint64_t v5 = a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[2] - *(void *)&a1[1]) >> 3) < a4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Token indices out of range.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = a2;
  unint64_t v8 = std::__string_hash<char16_t>::operator()[abi:ne180100](a2);
  int8x8_t v9 = v5[8];
  if (v9)
  {
    unint64_t v10 = v8;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v13 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v13 = (*(void *)&v9 - 1) & v8;
    }
    uint64_t v14 = *(unsigned __int16 ***)(*(void *)&v5[7] + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v10 == v16)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, (unsigned __int16 *)v7))
          {
            long long v56 = (uint64_t *)(*(void *)&v5[1] + 24 * a3);
            long long v57 = v56 + 1;
            unint64_t v58 = v56[1];
            if (v58 >= v56[2])
            {
              uint64_t v59 = std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(v56, (long long *)v7);
            }
            else
            {
              std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)v56, (long long *)v7);
              uint64_t v59 = v58 + 24;
            }
            *long long v57 = v59;
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= *(void *)&v9) {
              v16 %= *(void *)&v9;
            }
          }
          else
          {
            v16 &= *(void *)&v9 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = a4 - a3;
  if (a4 != a3)
  {
    int8x8_t v18 = v5[1];
    std::basic_string<char16_t>::size_type v19 = (uint64_t *)(*(void *)&v18 + 24 * a3);
    if (v17 == 1)
    {
      std::operator+[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(&v117, (const void **)&v5[24], (const void **)&v5[4]);
      int v20 = *(char *)(v7 + 23);
      if (v20 >= 0) {
        std::string::size_type v21 = (const std::basic_string<char16_t>::value_type *)v7;
      }
      else {
        std::string::size_type v21 = *(const std::basic_string<char16_t>::value_type **)v7;
      }
      if (v20 >= 0) {
        std::basic_string<char16_t>::size_type v22 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v22 = *(void *)(v7 + 8);
      }
      std::basic_string<char16_t>::append(&v117, v21, v22);
      v123[0] = v117.__r_.__value_.__l.__size_;
      std::basic_string<char16_t>::size_type v23 = v117.__r_.__value_.__r.__words[0];
      *(void *)((char *)v123 + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&v117.__r_.__value_.__r.__words[1]
                                                                                + 7);
      char v24 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      memset(&v117, 0, sizeof(v117));
      unint64_t v25 = *(void *)&v18 + 24 * a3;
      unint64_t v28 = *(void *)(v25 + 16);
      std::string v26 = (unint64_t *)(v25 + 16);
      unint64_t v27 = v28;
      long long v30 = (uint64_t *)(v26 - 1);
      unint64_t v29 = *(v26 - 1);
      if (v29 >= v28)
      {
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v19) >> 3);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v19) >> 3);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v47;
        }
        unint64_t v122 = v26;
        if (v49) {
          unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        unint64_t v60 = v49 + 24 * v46;
        unint64_t v118 = v49;
        unint64_t v119 = v60;
        unint64_t v121 = v49 + 24 * v50;
        uint64_t v61 = v123[0];
        *(void *)unint64_t v60 = v23;
        *(void *)(v60 + 8) = v61;
        *(void *)(v60 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v60 + 23) = v24;
        unint64_t v120 = v60 + 24;
        std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v19, &v118);
        unint64_t v32 = *v30;
        std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v118);
      }
      else
      {
        uint64_t v31 = v123[0];
        *(void *)unint64_t v29 = v23;
        *(void *)(v29 + 8) = v31;
        *(void *)(v29 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v29 + 23) = v24;
        unint64_t v32 = v29 + 24;
        *long long v30 = v29 + 24;
      }
      *long long v30 = v32;
    }
    else
    {
      std::operator+[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(&v117, (const void **)&v5[12], (const void **)&v5[4]);
      int64_t v116 = (const void **)&v5[4];
      int v33 = *(char *)(v7 + 23);
      if (v33 >= 0) {
        long long v34 = (const std::basic_string<char16_t>::value_type *)v7;
      }
      else {
        long long v34 = *(const std::basic_string<char16_t>::value_type **)v7;
      }
      if (v33 >= 0) {
        std::basic_string<char16_t>::size_type v35 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v35 = *(void *)(v7 + 8);
      }
      std::basic_string<char16_t>::append(&v117, v34, v35);
      v123[0] = v117.__r_.__value_.__l.__size_;
      std::basic_string<char16_t>::size_type v36 = v117.__r_.__value_.__r.__words[0];
      *(void *)((char *)v123 + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&v117.__r_.__value_.__r.__words[1]
                                                                                + 7);
      char v37 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      memset(&v117, 0, sizeof(v117));
      unint64_t v38 = *(void *)&v18 + 24 * a3;
      unint64_t v41 = *(void *)(v38 + 16);
      long long v39 = (unint64_t *)(v38 + 16);
      unint64_t v40 = v41;
      std::string v43 = (uint64_t *)(v39 - 1);
      unint64_t v42 = *(v39 - 1);
      if (v42 >= v41)
      {
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v19) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v19) >> 3);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x555555555555555) {
          unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v54 = v52;
        }
        unint64_t v122 = v39;
        if (v54) {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        unint64_t v62 = v54 + 24 * v51;
        unint64_t v118 = v54;
        unint64_t v119 = v62;
        unint64_t v121 = v54 + 24 * v55;
        uint64_t v63 = v123[0];
        *(void *)unint64_t v62 = v36;
        *(void *)(v62 + 8) = v63;
        *(void *)(v62 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v62 + 23) = v37;
        unint64_t v120 = v62 + 24;
        std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v19, &v118);
        unint64_t v45 = *v43;
        std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v118);
      }
      else
      {
        uint64_t v44 = v123[0];
        *(void *)unint64_t v42 = v36;
        *(void *)(v42 + 8) = v44;
        *(void *)(v42 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v42 + 23) = v37;
        unint64_t v45 = v42 + 24;
        *std::string v43 = v42 + 24;
      }
      *std::string v43 = v45;
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      unint64_t v114 = a4 - 1;
      uint64_t v64 = (const void **)&v5[4];
      if (a3 + 1 < a4 - 1)
      {
        uint64_t v65 = (const void **)&v5[15];
        p_std::string::size_type size = &v117.__r_.__value_.__l.__size_;
        unint64_t v67 = v17 - 2;
        uint64_t v68 = 24 * a3;
        do
        {
          int8x8_t v69 = v5[1];
          std::operator+[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(&v117, v65, v64);
          int v70 = *(char *)(v7 + 23);
          if (v70 >= 0) {
            uint64_t v71 = (const std::basic_string<char16_t>::value_type *)v7;
          }
          else {
            uint64_t v71 = *(const std::basic_string<char16_t>::value_type **)v7;
          }
          if (v70 >= 0) {
            std::basic_string<char16_t>::size_type v72 = *(unsigned __int8 *)(v7 + 23);
          }
          else {
            std::basic_string<char16_t>::size_type v72 = *(void *)(v7 + 8);
          }
          std::basic_string<char16_t>::append(&v117, v71, v72);
          std::basic_string<char16_t>::size_type v73 = v117.__r_.__value_.__r.__words[0];
          v123[0] = *p_size;
          *(void *)((char *)v123 + 7) = *(std::basic_string<char16_t>::size_type *)((char *)p_size + 7);
          char v74 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
          memset(&v117, 0, sizeof(v117));
          uint64_t v75 = *(void *)&v69 + v68;
          unint64_t v76 = *(void *)(*(void *)&v69 + v68 + 32);
          uint64_t v77 = (unint64_t *)(*(void *)&v69 + v68 + 40);
          if (v76 >= *v77)
          {
            std::basic_string<char16_t>::size_type v115 = v73;
            uint64_t v80 = v7;
            long long v81 = p_size;
            long long v82 = v5;
            unint64_t v83 = v65;
            unint64_t v84 = (uint64_t *)(*(void *)&v69 + v68 + 24);
            unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v84) >> 3);
            unint64_t v86 = v85 + 1;
            if (v85 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(*v77 - *v84) >> 3) > v86) {
              unint64_t v86 = 0x5555555555555556 * ((uint64_t)(*v77 - *v84) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v77 - *v84) >> 3) >= 0x555555555555555) {
              unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v87 = v86;
            }
            unint64_t v122 = v77;
            if (v87) {
              unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v87);
            }
            else {
              uint64_t v88 = 0;
            }
            unint64_t v89 = v87 + 24 * v85;
            unint64_t v118 = v87;
            unint64_t v119 = v89;
            unint64_t v121 = v87 + 24 * v88;
            uint64_t v90 = v123[0];
            *(void *)unint64_t v89 = v115;
            *(void *)(v89 + 8) = v90;
            *(void *)(v89 + 15) = *(void *)((char *)v123 + 7);
            *(unsigned char *)(v89 + 23) = v74;
            unint64_t v120 = v89 + 24;
            std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v84, &v118);
            unint64_t v79 = *(void *)(v75 + 32);
            std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v118);
            uint64_t v65 = v83;
            uint64_t v5 = v82;
            p_std::string::size_type size = v81;
            uint64_t v7 = v80;
          }
          else
          {
            uint64_t v78 = v123[0];
            *(void *)unint64_t v76 = v73;
            *(void *)(v76 + 8) = v78;
            *(void *)(v76 + 15) = *(void *)((char *)v123 + 7);
            *(unsigned char *)(v76 + 23) = v74;
            unint64_t v79 = v76 + 24;
            *(void *)(v75 + 32) = v76 + 24;
          }
          *(void *)(v75 + 32) = v79;
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v117.__r_.__value_.__l.__data_);
          }
          v68 += 24;
          --v67;
          uint64_t v64 = v116;
        }
        while (v67);
      }
      int8x8_t v91 = v5[1];
      std::operator+[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(&v117, (const void **)&v5[18], v64);
      int v92 = *(char *)(v7 + 23);
      if (v92 >= 0) {
        long long v93 = (const std::basic_string<char16_t>::value_type *)v7;
      }
      else {
        long long v93 = *(const std::basic_string<char16_t>::value_type **)v7;
      }
      if (v92 >= 0) {
        std::basic_string<char16_t>::size_type v94 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        std::basic_string<char16_t>::size_type v94 = *(void *)(v7 + 8);
      }
      std::basic_string<char16_t>::append(&v117, v93, v94);
      v123[0] = v117.__r_.__value_.__l.__size_;
      std::basic_string<char16_t>::size_type v95 = v117.__r_.__value_.__r.__words[0];
      *(void *)((char *)v123 + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&v117.__r_.__value_.__r.__words[1]
                                                                                + 7);
      char v96 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      memset(&v117, 0, sizeof(v117));
      unint64_t v97 = *(void *)&v91 + 24 * v114;
      unint64_t v100 = *(void *)(v97 + 16);
      uint64_t v98 = (unint64_t *)(v97 + 16);
      unint64_t v99 = v100;
      unint64_t v102 = (uint64_t *)(v98 - 1);
      unint64_t v101 = *(v98 - 1);
      if (v101 >= v100)
      {
        unint64_t v105 = (uint64_t *)(*(void *)&v91 + 24 * v114);
        unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *v105) >> 3);
        unint64_t v107 = v106 + 1;
        if (v106 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *v105) >> 3);
        if (2 * v108 > v107) {
          unint64_t v107 = 2 * v108;
        }
        if (v108 >= 0x555555555555555) {
          unint64_t v109 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v109 = v107;
        }
        unint64_t v122 = v98;
        if (v109) {
          unint64_t v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v109);
        }
        else {
          uint64_t v110 = 0;
        }
        unint64_t v111 = v109 + 24 * v106;
        unint64_t v118 = v109;
        unint64_t v119 = v111;
        unint64_t v121 = v109 + 24 * v110;
        uint64_t v112 = v123[0];
        *(void *)unint64_t v111 = v95;
        *(void *)(v111 + 8) = v112;
        *(void *)(v111 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v111 + 23) = v96;
        unint64_t v120 = v111 + 24;
        std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v105, &v118);
        unint64_t v104 = *v102;
        std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v118);
      }
      else
      {
        uint64_t v103 = v123[0];
        *(void *)unint64_t v101 = v95;
        *(void *)(v101 + 8) = v103;
        *(void *)(v101 + 15) = *(void *)((char *)v123 + 7);
        *(unsigned char *)(v101 + 23) = v96;
        unint64_t v104 = v101 + 24;
        *unint64_t v102 = v101 + 24;
      }
      *unint64_t v102 = v104;
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8F2B41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::operator+[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(void *result, const void **a2, const void **a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = (unint64_t)a2[1];
  }
  int v5 = *((char *)a3 + 23);
  if (v5 >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    unint64_t v6 = (unint64_t)a3[1];
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = result;
  if (v7 > 0xA)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v7 | 3) != 0xB) {
      uint64_t v14 = v7 | 3;
    }
    uint64_t v15 = v14 + 1;
    if (v14 + 1 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    __n128 result = operator new(2 * v15);
    uint8x8_t v11 = (char *)result;
    v10[1] = v7;
    std::locale v10[2] = v15 | 0x8000000000000000;
    void *v10 = result;
    if (v4) {
      goto LABEL_13;
    }
  }
  else
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = 0;
    *((unsigned char *)result + 23) = v7;
    if ((v7 & 0x80u) == 0) {
      uint8x8_t v11 = (char *)result;
    }
    else {
      uint8x8_t v11 = 0;
    }
    if (v4)
    {
LABEL_13:
      if (v3 >= 0) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a2;
      }
      __n128 result = memmove(v11, v12, 2 * v4);
    }
  }
  if (v6)
  {
    if (v5 >= 0) {
      unint64_t v13 = a3;
    }
    else {
      unint64_t v13 = *a3;
    }
    __n128 result = memmove(&v11[2 * v4], v13, 2 * v6);
  }
  *(_WORD *)&v11[2 * v4 + 2 * v6] = 0;
  return result;
}

uint64_t nl_featurization::bio::TagBucketList::getBucketLists@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v3 = *(long long ***)(this + 8);
  unint64_t v4 = *(long long ***)(this + 16);
  if (v4 != v3)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](a2, 0xAAAAAAAAAAAAAAABLL * (v4 - v3));
    unint64_t v8 = (void *)a2[1];
    int8x8_t v9 = v8;
    v6[0] = a2 + 2;
    v6[1] = &v8;
    uint64_t v6[2] = &v9;
    char v7 = 0;
    int v5 = v8;
    do
    {
      *int v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v5, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v3[1] - (char *)*v3) >> 3));
      int v5 = v9 + 3;
      v9 += 3;
      v3 += 3;
    }
    while (v3 != v4);
    char v7 = 1;
    this = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::Path>,uaap_orchestration::grammar::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
    a2[1] = v5;
  }
  return this;
}

void sub_1C8F2B6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unsigned __int16 *nl_featurization::pattern_trie::PatternTrie::insert(unsigned __int16 *result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if (!v3) {
      return result;
    }
    uint64_t v2 = *(unsigned __int16 **)a2;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    if (!*(unsigned char *)(a2 + 23)) {
      return result;
    }
  }
  unint64_t v4 = &v2[v3];
  do
  {
    int v5 = result + 4;
    unint64_t v6 = *v2;
    int8x8_t v7 = *(int8x8_t *)(result + 8);
    if (v7)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = *v2;
        if (*(void *)&v7 <= v6) {
          unint64_t v9 = v6 % *(void *)&v7;
        }
      }
      else
      {
        unint64_t v9 = (v7.i32[0] - 1) & v6;
      }
      unint64_t v10 = *(uint64_t ****)(*v5 + 8 * v9);
      if (v10)
      {
        for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
        {
          unint64_t v12 = (unint64_t)i[1];
          if (v12 == v6)
          {
            if (*((unsigned __int16 *)i + 8) == v6) {
              goto LABEL_31;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v7) {
                v12 %= *(void *)&v7;
              }
            }
            else
            {
              v12 &= *(void *)&v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
        }
      }
    }
    unint64_t v13 = std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__emplace_unique_key_args<char16_t,std::piecewise_construct_t const&,std::tuple<char16_t const&>,std::tuple<>>((uint64_t)(result + 4), v6, v2);
    uint64_t v14 = v13;
    *((unsigned char *)v13 + 24) = 0;
    if (*((void *)v13 + 7))
    {
      std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(*((void **)v13 + 6));
      *((void *)v14 + 6) = 0;
      uint64_t v15 = *((void *)v14 + 5);
      if (v15)
      {
        for (uint64_t j = 0; j != v15; ++j)
          *(void *)(*((void *)v14 + 4) + 8 * j) = 0;
      }
      *((void *)v14 + 7) = 0;
    }
    unint64_t v17 = (void *)*((void *)v14 + 4);
    *((void *)v14 + 4) = 0;
    if (v17) {
      operator delete(v17);
    }
    *((void *)v14 + 6) = 0;
    *((void *)v14 + 5) = 0;
    *((void *)v14 + 7) = 0;
    *((_DWORD *)v14 + 16) = 1065353216;
    std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(0);
    LOWORD(v6) = *v2;
LABEL_31:
    __n128 result = std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__emplace_unique_key_args<char16_t,std::piecewise_construct_t const&,std::tuple<char16_t const&>,std::tuple<>>((uint64_t)v5, v6, v2++)+ 12;
  }
  while (v2 != v4);
  *(unsigned char *)__n128 result = 1;
  return result;
}

void sub_1C8F2B8D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__emplace_unique_key_args<char16_t,std::piecewise_construct_t const&,std::tuple<char16_t const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (unsigned __int16 *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (v10[8] == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = *(unsigned __int16 **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  unint64_t v10 = (unsigned __int16 *)operator new(0x48uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  unsigned char v10[8] = *a3;
  *(_OWORD *)(v10 + 28) = 0u;
  *(_OWORD *)(v10 + 12) = 0u;
  *(_OWORD *)(v10 + 20) = 0u;
  *((_DWORD *)v10 + 16) = 1065353216;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)unint64_t v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  *(void *)unint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  return v10;
}

void sub_1C8F2BB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **nl_featurization::pattern_trie::PatternTrie::search(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(unsigned __int16 **)a2;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    if (!*(unsigned char *)(a2 + 23)) {
      return 0;
    }
  }
  uint64_t v4 = 2 * v3;
  while (1)
  {
    __n128 result = std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::find<char16_t>(a1 + 1, *v2);
    if (!result) {
      break;
    }
    a1 = result + 3;
    ++v2;
    v4 -= 2;
    if (!v4) {
      return (uint64_t **)(*(unsigned char *)a1 != 0);
    }
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::find<char16_t>(void *a1, unsigned __int16 a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int16 *)result + 8) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void nl_featurization::postprocessing::base::postProcessBaseModelInner(nl_featurization::postprocessing::base *this@<X0>, const nl_featurization::postprocessing::base::BaseModelQueryContextInner *a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  int v5 = (uint64_t *)((char *)this + 192);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 4);
  if (v6 != (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Number of tokens differs from number of BIO tags");
    goto LABEL_30;
  }
  uint8x8_t v8 = (void *)((char *)a2 + 32);
  if (v6 != (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Number of tokens differs from number of group IDs");
LABEL_30:
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, *(void *)a2, &v33);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v10 = (unint64_t *)*((void *)a2 + 1);
  unint64_t v11 = (unint64_t *)*((void *)a2 + 2);
  if (v10 != v11)
  {
    unint64_t v12 = (nl_featurization::postprocessing::base *)((char *)this + 96);
    do
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(v12, *v10, &__p);
      float v13 = v31;
      if ((unint64_t)v31 >= v32)
      {
        BOOL v15 = (std::basic_string<char16_t> *)std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(&v30, (long long *)&__p);
        char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        }
        BOOL v15 = v13 + 1;
      }
      uint64_t v31 = v15;
      if (v14 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    while (v10 != v11);
  }
  nl_featurization::bio::convertToLabelledSpans(&v30, v8, v5, (uint64_t *)&__p);
  char v16 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(a3, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    *a3 = v33;
  }
  a3[1].__r_.__value_.__r.__words[0] = 0;
  a3[1].__r_.__value_.__l.__size_ = 0;
  a3[1].__r_.__value_.__r.__words[2] = 0;
  long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  p_std::string p = a3 + 1;
  char v35 = 0;
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
  {
    unint64_t v18 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
    if (v18 >= 0x276276276276277) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v18);
    uint64_t v20 = 0;
    a3[1].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v19;
    a3[1].__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v19;
    a3[1].__r_.__value_.__r.__words[2] = (std::basic_string<char16_t>::size_type)&v19[104 * v21];
    do
    {
      std::basic_string<char16_t>::size_type v22 = &v19[v20];
      uint64_t v23 = v17 + v20;
      long long v24 = *(_OWORD *)(v17 + v20 + 16);
      *(_OWORD *)std::basic_string<char16_t>::size_type v22 = *(_OWORD *)(v17 + v20);
      *((_OWORD *)v22 + 1) = v24;
      unint64_t v25 = (const std::basic_string<char16_t>::value_type **)(v17 + v20 + 32);
      if (*(char *)(v17 + v20 + 55) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&v19[v20 + 32], *v25, *(void *)(v23 + 40));
      }
      else
      {
        long long v26 = *(_OWORD *)v25;
        *(void *)&v19[v20 + 48] = *(void *)(v17 + v20 + 48);
        *(_OWORD *)&v19[v20 + 32] = v26;
      }
      std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)&v19[v20 + 56], (long long *)(v17 + v20 + 56));
      *(_OWORD *)&v19[v20 + 88] = *(_OWORD *)(v23 + 88);
      v20 += 104;
    }
    while (v23 + 104 != *((void *)&v17 + 1));
    unint64_t v27 = &v19[v20];
    char v16 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    a3[1].__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v27;
  }
  p_std::string p = &__p;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v16 < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1C8F2BF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void **a25)
{
  a25 = (void **)&a10;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100](&a25);
  a10 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nl_featurization::postprocessing::base::postProcessBaseModel(long long **this@<X0>, const nl_featurization::postprocessing::base::BaseModelQueryContext *a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  nl_featurization::vocabulary::Vocabulary::Vocabulary(&v28);
  nl_featurization::vocabulary::Vocabulary::Vocabulary(&v20);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v7, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v7 = v28;
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v8, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v8 = v29;
  }
  unint64_t v9 = v30;
  v10[0] = v31;
  v10[1] = v32;
  if (v32)
  {
    *((void *)v31 + 2) = v10;
    uint64_t v30 = &v31;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    unint64_t v9 = (char **)v10;
  }
  unint64_t v11 = v33;
  v12[0] = v34;
  v12[1] = v35;
  if (v35)
  {
    *((void *)v34 + 2) = v12;
    std::basic_string<char16_t> v33 = &v34;
    long long v34 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    unint64_t v11 = (char **)v12;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v13, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v13 = v20;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::basic_string<char16_t> v14 = __p;
  }
  BOOL v15 = v22;
  v16[0] = v23;
  v16[1] = v24;
  if (v24)
  {
    *((void *)v23 + 2) = v16;
    std::basic_string<char16_t>::size_type v22 = &v23;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    BOOL v15 = (char **)v16;
  }
  long long v17 = v25;
  v18[0] = v26;
  v18[1] = v27;
  if (v27)
  {
    *((void *)v26 + 2) = v18;
    unint64_t v25 = &v26;
    long long v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    long long v17 = (char **)v18;
  }
  memset(v19, 0, 24);
  std::vector<nl_featurization::Token>::__init_with_size[abi:ne180100]<nl_featurization::Token*,nl_featurization::Token*>(v19, this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (this[7] - this[6]));
  nl_featurization::postprocessing::base::postProcessBaseModelInner((nl_featurization::postprocessing::base *)&v7, a2, a3);
  nl_featurization::postprocessing::base::BaseModelQueryContextInner::~BaseModelQueryContextInner((nl_featurization::postprocessing::base::BaseModelQueryContextInner *)&v7);
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(v26);
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(v34);
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(v31);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1C8F2C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  nl_featurization::vocabulary::Vocabulary::~Vocabulary((nl_featurization::vocabulary::Vocabulary *)&a9);
  nl_featurization::vocabulary::Vocabulary::~Vocabulary((nl_featurization::vocabulary::Vocabulary *)&a43);
  nl_featurization::vocabulary::Vocabulary::~Vocabulary((nl_featurization::vocabulary::Vocabulary *)(v43 - 144));
  _Unwind_Resume(a1);
}

void nl_featurization::postprocessing::base::BaseModelQueryContextInner::~BaseModelQueryContextInner(nl_featurization::postprocessing::base::BaseModelQueryContextInner *this)
{
  unint64_t v2 = (void **)((char *)this + 192);
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((char **)this + 22));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((char **)this + 19));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((char **)this + 10));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((char **)this + 7));
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *nl_featurization::beam_search::isSequenceUnique(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a2, *(void *)(a2 + 8), *(void *)(a1 + 16));
  if (result)
  {
    std::basic_string<char16_t> v7 = (void *)result[4];
    int v5 = result + 4;
    unint64_t v6 = v7;
    if (!v7) {
      goto LABEL_13;
    }
    std::basic_string<char16_t> v8 = v5;
    do
    {
      unint64_t v9 = v6[4];
      BOOL v10 = v9 >= a3;
      if (v9 >= a3) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v6 + 1;
      }
      if (v10) {
        std::basic_string<char16_t> v8 = v6;
      }
      unint64_t v6 = (void *)*v11;
    }
    while (*v11);
    if (v8 == v5 || v8[4] > a3) {
LABEL_13:
    }
      std::basic_string<char16_t> v8 = v5;
    return (void *)(v8 != v5);
  }
  return result;
}

void *nl_featurization::beam_search::isSequenceIndexable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a2, *(void *)(a2 + 8), *(void *)(a1 + 16));
  if (result)
  {
    std::basic_string<char16_t> v7 = (void *)result[4];
    int v5 = result + 4;
    unint64_t v6 = v7;
    if (!v7) {
      goto LABEL_13;
    }
    std::basic_string<char16_t> v8 = v5;
    do
    {
      unint64_t v9 = v6[4];
      BOOL v10 = v9 >= a3;
      if (v9 >= a3) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v6 + 1;
      }
      if (v10) {
        std::basic_string<char16_t> v8 = v6;
      }
      unint64_t v6 = (void *)*v11;
    }
    while (*v11);
    if (v8 == v5 || v8[4] > a3) {
LABEL_13:
    }
      std::basic_string<char16_t> v8 = v5;
    return (void *)(v8 != v5);
  }
  return result;
}

BOOL nl_featurization::beam_search::isEntityNewGroup(void *a1, unint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  return *(double *)(*a1 + 8 * a2) > 0.5;
}

uint64_t nl_featurization::beam_search::getHighestExistingGroupId(unint64_t **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (uint64_t *)a1[1];
  if (*a1 == (unint64_t *)v2)
  {
    uint64_t v5 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
    do
    {
      unint64_t v6 = *v1;
      uint64_t v7 = *v1;
      if ((v5 | (v3 << 8)) > *v1) {
        unint64_t v6 = v5 | (v3 << 8);
      }
      uint64_t v8 = v6;
      unint64_t v9 = v6 >> 8;
      if (v4) {
        uint64_t v7 = v8;
      }
      else {
        unint64_t v9 = *v1 >> 8;
      }
      if (*((unsigned char *)v1 + 8))
      {
        uint64_t v5 = v7;
        int v4 = 1;
        unint64_t v3 = v9;
      }
      v1 += 2;
    }
    while (v1 != (unint64_t *)v2);
  }
  return v5 | (v3 << 8);
}

unint64_t nl_featurization::beam_search::getGroupIdForSequence(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, unint64_t a6)
{
  if (nl_featurization::beam_search::isSequenceIndexable(a2, a1, a6))
  {
    if (!a4 || (a5 & 1) != 0)
    {
      unint64_t v10 = (a3 + 1) & 0xFFFFFFFFFFFFFF00;
      if (a5) {
        char v11 = a3 + 1;
      }
      else {
        char v11 = 1;
      }
      if (!a5) {
        unint64_t v10 = 0;
      }
      if (a4) {
        LOBYTE(a3) = v11;
      }
      else {
        LOBYTE(a3) = 1;
      }
      if (a4) {
        unint64_t v9 = v10;
      }
      else {
        unint64_t v9 = 0;
      }
    }
    else
    {
      unint64_t v9 = a3 & 0xFFFFFFFFFFFFFF00;
    }
  }
  else
  {
    LOBYTE(a3) = 0;
    unint64_t v9 = 0;
  }
  return v9 | a3;
}

void nl_featurization::beam_search::getCandidatesFromEntityScores(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  uint64_t v10 = *a1;
  uint64_t v68 = a1[1];
  if (*a1 != v68)
  {
    char v11 = a2;
    int8x8_t v69 = a9 + 2;
    uint64_t v13 = *a2;
    uint64_t v12 = a2[1];
    uint64_t v14 = v12;
    std::basic_string<char16_t>::size_type v72 = a9;
    do
    {
      if (v14 == v13)
      {
        uint64_t v14 = v13;
      }
      else
      {
        unint64_t v15 = 0;
        char v16 = (void *)(v10 + 40);
        do
        {
          long long v17 = (void *)*v16;
          if (!*v16) {
            goto LABEL_16;
          }
          unint64_t v18 = v16;
          do
          {
            unint64_t v19 = v17[4];
            BOOL v20 = v19 >= v15;
            if (v19 >= v15) {
              uint64_t v21 = v17;
            }
            else {
              uint64_t v21 = v17 + 1;
            }
            if (v20) {
              unint64_t v18 = v17;
            }
            long long v17 = (void *)*v21;
          }
          while (*v21);
          if (v18 == v16 || v15 < v18[4])
          {
LABEL_16:
            uint64_t v23 = *(void *)(v10 + 56);
            uint64_t v22 = *(void *)(v10 + 64);
            if (v22 == v23)
            {
              BOOL v25 = 1;
            }
            else
            {
              unint64_t v24 = (v22 - v23) >> 3;
              if (v24 >= (uint64_t)(a3[1] - *a3) >> 3) {
                std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
              }
              BOOL v25 = *(double *)(*a3 + 8 * v24) > 0.5;
            }
            uint64_t HighestExistingGroupId = nl_featurization::beam_search::getHighestExistingGroupId((unint64_t **)(v10 + 104));
            unint64_t GroupIdForSequence = nl_featurization::beam_search::getGroupIdForSequence(a8, v10, HighestExistingGroupId, v27, v25, v15);
            unint64_t v30 = v29;
            char v96 = 0;
            unint64_t v97 = 0;
            unint64_t v98 = 0;
            std::vector<std::optional<unsigned long>>::__init_with_size[abi:ne180100]<std::optional<unsigned long>*,std::optional<unsigned long>*>(&v96, *(const void **)(v10 + 104), *(void *)(v10 + 112), (uint64_t)(*(void *)(v10 + 112) - *(void *)(v10 + 104)) >> 4);
            uint64_t v31 = v11;
            uint64_t v32 = v97;
            if ((unint64_t)v97 >= v98)
            {
              long long v34 = v96;
              uint64_t v35 = ((char *)v97 - (char *)v96) >> 4;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 60) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v37 = v98 - (void)v96;
              if ((uint64_t)(v98 - (void)v96) >> 3 > v36) {
                unint64_t v36 = v37 >> 3;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38) {
                unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v38);
              }
              else {
                uint64_t v39 = 0;
              }
              unint64_t v40 = (unint64_t *)(v38 + 16 * v35);
              *unint64_t v40 = GroupIdForSequence;
              v40[1] = v30;
              unint64_t v41 = v40;
              if (v32 != v34)
              {
                do
                {
                  unint64_t v42 = *(v32 - 2);
                  v32 -= 2;
                  char v43 = *((unsigned char *)v32 + 8);
                  *(v41 - 2) = v42;
                  v41 -= 2;
                  *((unsigned char *)v41 + 8) = v43;
                }
                while (v32 != v34);
                uint64_t v32 = v96;
              }
              uint64_t v33 = (uint64_t)(v40 + 2);
              char v96 = v41;
              unint64_t v98 = v38 + 16 * v39;
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *unint64_t v97 = GroupIdForSequence;
              v32[1] = v30;
              uint64_t v33 = (uint64_t)(v32 + 2);
            }
            unint64_t v97 = (unint64_t *)v33;
            char v11 = v31;
            double v44 = log(*(long double *)(*v31 + 8 * v15));
            double v45 = log(*(long double *)(*(void *)(*a4 + 24 * *(void *)(v10 + 16)) + 8 * v15));
            double v46 = log(*(long double *)(*a5 + 8 * v15));
            if (v22 != v23) {
              double v46 = log(*(long double *)(*(void *)(*a6 + 24 * *(void *)(v10 + 24)) + 8 * v15));
            }
            double v47 = v46;
            long long v93 = 0;
            std::basic_string<char16_t>::size_type v94 = 0;
            unint64_t v95 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v93, *(const void **)(v10 + 80), *(void *)(v10 + 88), (uint64_t)(*(void *)(v10 + 88) - *(void *)(v10 + 80)) >> 3);
            unint64_t v48 = v94;
            if ((unint64_t)v94 >= v95)
            {
              uint64_t v50 = v93;
              uint64_t v51 = v94 - v93;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v53 = v95 - (void)v93;
              if ((uint64_t)(v95 - (void)v93) >> 2 > v52) {
                unint64_t v52 = v53 >> 2;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v95, v54);
                uint64_t v50 = v93;
                unint64_t v48 = v94;
              }
              else
              {
                uint64_t v55 = 0;
              }
              long long v56 = (unint64_t *)&v55[8 * v51];
              *long long v56 = v15;
              unint64_t v49 = v56 + 1;
              while (v48 != v50)
              {
                unint64_t v57 = *--v48;
                *--long long v56 = v57;
              }
              long long v93 = v56;
              std::basic_string<char16_t>::size_type v94 = v49;
              unint64_t v95 = (unint64_t)&v55[8 * v54];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              *std::basic_string<char16_t>::size_type v94 = v15;
              unint64_t v49 = v48 + 1;
            }
            std::basic_string<char16_t>::size_type v94 = v49;
            std::set<unsigned long>::set[abi:ne180100]((uint64_t)v92, (void *)(v10 + 32));
            if (nl_featurization::beam_search::isSequenceUnique(v10, a7, v15)) {
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v92, v15, v15);
            }
            long long v82 = 0;
            uint64_t v83 = 0;
            long long v81 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v81, v93, (uint64_t)v94, v94 - v93);
            uint64_t v78 = 0;
            unint64_t v79 = 0;
            uint64_t v80 = 0;
            std::vector<std::optional<unsigned long>>::__init_with_size[abi:ne180100]<std::optional<unsigned long>*,std::optional<unsigned long>*>(&v78, v96, v33, (v33 - (uint64_t)v96) >> 4);
            double v58 = *(double *)(v10 + 8);
            std::set<unsigned long>::set[abi:ne180100]((uint64_t)v77, v92);
            nl_featurization::beam_search::BeamSequence::BeamSequence((uint64_t)v84, (uint64_t)&v81, (uint64_t)&v78, v77, v47 + v45 + v44 + v58);
            unint64_t v60 = v72[1];
            unint64_t v59 = v72[2];
            if (v60 >= v59)
            {
              uint64_t v62 = (uint64_t)(v60 - *v72) >> 7;
              if ((unint64_t)(v62 + 1) >> 57) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = v59 - *v72;
              uint64_t v64 = v63 >> 6;
              if (v63 >> 6 <= (unint64_t)(v62 + 1)) {
                uint64_t v64 = v62 + 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFF80) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v64;
              }
              v99[4] = v69;
              if (v65) {
                unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>>(v65);
              }
              else {
                uint64_t v66 = 0;
              }
              uint64_t v67 = v65 + (v62 << 7);
              v99[0] = v65;
              v99[1] = v67;
              v99[3] = v65 + (v66 << 7);
              std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>(v67, (uint64_t)v84);
              std::string v99[2] = v67 + 128;
              std::vector<nl_featurization::beam_search::BeamSequence>::__swap_out_circular_buffer(v72, v99);
              uint64_t v61 = v72[1];
              std::__split_buffer<nl_featurization::beam_search::BeamSequence>::~__split_buffer((uint64_t)v99);
            }
            else
            {
              std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>(v72[1], (uint64_t)v84);
              uint64_t v61 = v60 + 128;
              v72[1] = v60 + 128;
            }
            v72[1] = v61;
            if (__p)
            {
              int8x8_t v91 = __p;
              operator delete(__p);
            }
            char v16 = (void *)(v10 + 40);
            if (v88)
            {
              unint64_t v89 = v88;
              operator delete(v88);
            }
            if (v86)
            {
              unint64_t v87 = v86;
              operator delete(v86);
            }
            std::__tree<unsigned long>::destroy(v85);
            std::__tree<unsigned long>::destroy((void *)v77[1]);
            if (v78)
            {
              unint64_t v79 = v78;
              operator delete(v78);
            }
            if (v81)
            {
              long long v82 = v81;
              operator delete(v81);
            }
            std::__tree<unsigned long>::destroy((void *)v92[1]);
            if (v93)
            {
              std::basic_string<char16_t>::size_type v94 = v93;
              operator delete(v93);
            }
            if (v96) {
              operator delete(v96);
            }
            uint64_t v13 = *v31;
            uint64_t v12 = v31[1];
          }
          ++v15;
          uint64_t v14 = v12;
        }
        while (v15 < (v12 - v13) >> 3);
      }
      v10 += 128;
    }
    while (v10 != v68);
  }
}

void sub_1C8F2CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  long long v34 = *(void **)(v32 - 224);
  if (v34)
  {
    *(void *)(v32 - 216) = v34;
    operator delete(v34);
  }
  if (*(void *)(v32 - 200)) {
    operator delete(*(void **)(v32 - 200));
  }
  std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void sub_1C8F2CCA0()
{
}

uint64_t std::set<unsigned long>::set[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      unint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          unint64_t v9 = v7;
        }
        while (v10);
      }
      unint64_t v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v13 = (uint64_t **)(v7 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (v6)
        {
          uint64_t v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unint64_t v17 = v6[4];
              if (v11 >= v17) {
                break;
              }
              unint64_t v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            unint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      unint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1C8F2CE10(_Unwind_Exception *a1)
{
  std::__tree<unsigned long>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::beam_search::BeamSequence::BeamSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, long double a5)
{
  *(long double *)a1 = exp(a5);
  *(long double *)(a1 + 8) = a5;
  uint64_t v10 = *(void *)(a2 + 8);
  if (*(void *)a2 == v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Beam sequence is empty getIntent");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a1 + 16) = **(void **)a2;
  uint64_t v11 = *a4;
  *(void *)(a1 + 24) = *(void *)(v10 - 8);
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = a4 + 1;
  uint64_t v13 = a4[1];
  *(void *)(a1 + 40) = v13;
  uint64_t v14 = a1 + 40;
  uint64_t v15 = a4[2];
  *(void *)(a1 + 48) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *a4 = (uint64_t)v12;
    void *v12 = 0;
    a4[2] = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v14;
  }
  unint64_t v17 = *(void **)a2;
  char v16 = *(char **)(a2 + 8);
  if (*(char **)a2 == v16)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Beam sequence is empty getEntities");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v18 = v17 + 1;
  *(void *)(a1 + 72) = 0;
  int64_t v19 = v16 - (char *)(v17 + 1);
  if (v16 != (char *)(v17 + 1))
  {
    std::vector<double>::__vallocate[abi:ne180100]((void *)(a1 + 56), v19 >> 3);
    BOOL v20 = *(char **)(a1 + 64);
    memmove(v20, v18, v19);
    *(void *)(a1 + 64) = &v20[8 * (v19 >> 3)];
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  *(void *)(a1 + 96) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a3;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return a1;
}

void sub_1C8F2CFD4(_Unwind_Exception *a1)
{
  std::__tree<unsigned long>::destroy(*v1);
  _Unwind_Resume(a1);
}

void nl_featurization::beam_search::BeamSequence::~BeamSequence(nl_featurization::beam_search::BeamSequence *this)
{
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  std::__tree<unsigned long>::destroy(*((void **)this + 5));
}

__n128 std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v3 = (void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + 32) = v3;
    *unint64_t v3 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 7);
}

void std::vector<nl_featurization::beam_search::BeamSequence>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 128;
    v4 -= 128;
    std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<nl_featurization::beam_search::BeamSequence>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100]((void *)(i - 128));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t nl_featurization::beam_search::validateInputTransitions(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)result;
  uint64_t v5 = *(void **)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)result) >> 3) != a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "First dimension of intentEntityTransitions does not equal number of intents");
    goto LABEL_13;
  }
  while (v6 != v5)
  {
    if (a5 != (uint64_t)(v6[1] - *v6) >> 3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Second dimension of intentEntityTransitions does not equal number of BIO tags");
      goto LABEL_13;
    }
    v6 += 3;
  }
  if (a5 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Size of startEntityTransitions does not equal number of BIO tags");
    goto LABEL_13;
  }
  uint64_t v8 = *(void **)a3;
  uint64_t v7 = *(void **)(a3 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a3) >> 3) != a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "First dimension of entityTransitions does not equal number of BIO tags");
LABEL_13:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  while (v8 != v7)
  {
    if (a5 != (uint64_t)(v8[1] - *v8) >> 3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Second dimension of entityTransitions does not equal number of BIO tags");
      goto LABEL_13;
    }
    v8 += 3;
  }
  return result;
}

void sub_1C8F2D394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::beam_search::validateInputLabels(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  for (uint64_t i = *(void **)(result + 16); i; uint64_t i = (void *)*i)
  {
    if (i[2] >= a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Out-of-range intent label (key) in uniqueLabels");
      goto LABEL_26;
    }
    uint64_t v5 = (void *)i[3];
    if (v5 != i + 4)
    {
      do
      {
        if (v5[4] >= a4)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Out-of-range BIO label (value) in uniqueLabels");
          goto LABEL_26;
        }
        uint64_t v6 = (void *)v5[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)v5[2];
            BOOL v8 = *v7 == (void)v5;
            uint64_t v5 = v7;
          }
          while (!v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != i + 4);
    }
  }
  uint64_t v9 = *(void **)(a2 + 16);
  if (v9)
  {
    while (v9[2] < a3)
    {
      uint64_t v10 = (void *)v9[3];
      if (v10 != v9 + 4)
      {
        while (v10[4] < a4)
        {
          uint64_t v11 = (void *)v10[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v10[2];
              BOOL v8 = *v12 == (void)v10;
              uint64_t v10 = v12;
            }
            while (!v8);
          }
          uint64_t v10 = v12;
          if (v12 == v9 + 4) {
            goto LABEL_22;
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Out-of-range BIO label (value) in indexableLabels");
LABEL_26:
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
LABEL_22:
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        return result;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Out-of-range intent label (key) in indexableLabels");
    goto LABEL_26;
  }
  return result;
}

void sub_1C8F2D540(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t nl_featurization::beam_search::validateInputs(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  long long v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  if (v2 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Empty entitiesScores (implies no tokens)");
    uint64_t v10 = (struct type_info *)off_1E657FB50;
    uint64_t v11 = (void (*)(void *))MEMORY[0x1E4FBA1E8];
    goto LABEL_14;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
  if (v5 != (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 3)
  {
    uint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v13 = a1;
    uint64_t v14 = v12;
    std::to_string(&v26, (uint64_t)(*(void *)(*(void *)(v13 + 16) + 8) - **(void **)(v13 + 16)) >> 3);
    uint64_t v15 = std::string::insert(&v26, 0, "Size of groupScores (");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v27, ") does not equal number of tokens (");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, v5);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v19 = &v25;
    }
    else {
      int64_t v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = std::string::append(&v28, (const std::string::value_type *)v19, size);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = std::string::append(&v29, ")");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v14, &v30);
    v14->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v14, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v6 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
  uint64_t v7 = (uint64_t)(v2[1] - *v2) >> 3;
  nl_featurization::beam_search::validateInputTransitions(*(void *)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), v6, v7);
  uint64_t result = nl_featurization::beam_search::validateInputLabels(*(void *)(a1 + 48), *(void *)(a1 + 56), v6, v7);
  if ((unint64_t)(*(void *)(a1 + 64) - 6) <= 0xFFFFFFFFFFFFFFFALL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Invalid beamSize. Should be in the interval (0, 5]");
    uint64_t v10 = (struct type_info *)MEMORY[0x1E4FBA338];
    uint64_t v11 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
LABEL_14:
    __cxa_throw(exception, v10, v11);
  }
  return result;
}

void sub_1C8F2D7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v33);
  goto LABEL_16;
}

uint64_t nl_featurization::beam_search::BeamSequence::toString(nl_featurization::beam_search::BeamSequence *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"BeamSequence[\n", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  score = ", 10);
  long long v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  intent = ", 11);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  entities = ", 13);
  uint64_t v4 = *((void *)this + 7);
  for (uint64_t i = *((void *)this + 8); v4 != i; v4 += 8)
  {
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  groupIds = ", 13);
  uint64_t v7 = *((void *)this + 13);
  for (uint64_t j = *((void *)this + 14); v7 != j; v7 += 16)
  {
    if (*(unsigned char *)(v7 + 8)) {
      uint64_t v9 = (void *)std::ostream::operator<<();
    }
    else {
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(none)", 6);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]\n", 2);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v15);
}

void sub_1C8F2DB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void nl_featurization::beam_search::beamSearch(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  v97[0] = a1;
  v97[1] = a2;
  v97[2] = a3;
  v97[3] = a4;
  v97[4] = a5;
  v97[5] = a6;
  v97[6] = a7;
  v97[7] = a8;
  v97[8] = a10;
  nl_featurization::beam_search::validateInputs((uint64_t)v97);
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = v14 - *a1;
  if (v14 == *a1)
  {
    long long v16 = 0;
    long long v18 = 0;
  }
  else
  {
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF9) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    long long v16 = (long double *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v15 >> 3);
    long long v18 = &v16[2 * v17];
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
  }
  uint64_t v69 = a2;
  if (v14 == v13)
  {
    BOOL v20 = v16;
  }
  else
  {
    unint64_t v19 = 0;
    BOOL v20 = v16;
    do
    {
      unint64_t v21 = *(void *)(v13 + 8 * v19);
      if (v20 >= v18)
      {
        uint64_t v22 = ((char *)v20 - (char *)v16) >> 4;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (v18 - v16 > v23) {
          unint64_t v23 = v18 - v16;
        }
        if ((unint64_t)((char *)v18 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        std::string v26 = (unint64_t *)(v24 + 16 * v22);
        *std::string v26 = v19;
        v26[1] = v21;
        if (v20 == v16)
        {
          std::string v28 = (long double *)(v24 + 16 * v22);
        }
        else
        {
          unint64_t v27 = v24 + 16 * v22;
          do
          {
            std::string v28 = (long double *)(v27 - 16);
            *(_OWORD *)(v27 - 16) = *((_OWORD *)v20 - 1);
            v20 -= 2;
            v27 -= 16;
          }
          while (v20 != v16);
        }
        long long v18 = (long double *)(v24 + 16 * v25);
        BOOL v20 = (long double *)(v26 + 2);
        if (v16) {
          operator delete(v16);
        }
        long long v16 = v28;
      }
      else
      {
        *(void *)BOOL v20 = v19;
        *((void *)v20 + 1) = v21;
        v20 += 2;
      }
      ++v19;
      uint64_t v13 = *a1;
    }
    while (v19 < (a1[1] - *a1) >> 3);
  }
  unint64_t v29 = 126 - 2 * __clz(((char *)v20 - (char *)v16) >> 4);
  if (v20 == v16) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *,false>(v16, v20, v30, 1);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  uint64_t v76 = a9 + 16;
  unint64_t v31 = a10;
  if (a10)
  {
    if (a10 >> 57) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = a9 + 16;
    unint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>>(a10);
    unint64_t v86 = v85;
    unint64_t v87 = (long long *)v85;
    uint64_t v88 = (long long *)&v85[128 * v32];
    std::vector<nl_featurization::beam_search::BeamSequence>::__swap_out_circular_buffer((uint64_t *)a9, &v85);
    std::__split_buffer<nl_featurization::beam_search::BeamSequence>::~__split_buffer((uint64_t)&v85);
  }
  if ((a1[1] - *a1) >> 3 >= a10) {
    uint64_t v33 = a10;
  }
  else {
    uint64_t v33 = (a1[1] - *a1) >> 3;
  }
  if (v33)
  {
    int v34 = v16 + 1;
    do
    {
      uint64_t v35 = *((void *)v34 - 1);
      unint64_t v36 = operator new(8uLL);
      uint64_t v81 = 0;
      long long v82 = v36;
      *unint64_t v36 = v35;
      uint64_t v83 = v36 + 1;
      unint64_t v84 = v36 + 1;
      unint64_t v79 = 0;
      uint64_t v80 = 0;
      long double v37 = log(*v34);
      v78[0] = 0;
      v78[1] = 0;
      uint64_t v77 = v78;
      nl_featurization::beam_search::BeamSequence::BeamSequence((uint64_t)&v85, (uint64_t)&v82, (uint64_t)&v79, (uint64_t *)&v77, v37);
      unint64_t v39 = *(void *)(a9 + 8);
      unint64_t v38 = *(void *)(a9 + 16);
      if (v39 >= v38)
      {
        uint64_t v41 = (uint64_t)(v39 - *(void *)a9) >> 7;
        if ((unint64_t)(v41 + 1) >> 57) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - *(void *)a9;
        uint64_t v43 = v42 >> 6;
        if (v42 >> 6 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        v98[4] = (void **)(a9 + 16);
        if (v44) {
          unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>>(v44);
        }
        else {
          uint64_t v45 = 0;
        }
        double v46 = (void **)(v44 + (v41 << 7));
        v98[0] = (void **)v44;
        v98[1] = v46;
        v98[3] = (void **)(v44 + (v45 << 7));
        std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>((uint64_t)v46, (uint64_t)&v85);
        v98[2] = v46 + 16;
        std::vector<nl_featurization::beam_search::BeamSequence>::__swap_out_circular_buffer((uint64_t *)a9, v98);
        unint64_t v40 = *(void *)(a9 + 8);
        std::__split_buffer<nl_featurization::beam_search::BeamSequence>::~__split_buffer((uint64_t)v98);
      }
      else
      {
        std::allocator<nl_featurization::beam_search::BeamSequence>::construct[abi:ne180100]<nl_featurization::beam_search::BeamSequence,nl_featurization::beam_search::BeamSequence>(*(void *)(a9 + 8), (uint64_t)&v85);
        unint64_t v40 = v39 + 128;
        *(void *)(a9 + 8) = v40;
      }
      *(void *)(a9 + 8) = v40;
      if (__p)
      {
        char v96 = __p;
        operator delete(__p);
      }
      if (v93)
      {
        std::basic_string<char16_t>::size_type v94 = v93;
        operator delete(v93);
      }
      if (v91)
      {
        int v92 = v91;
        operator delete(v91);
      }
      std::__tree<unsigned long>::destroy(v90);
      std::__tree<unsigned long>::destroy(v78[0]);
      if (v79)
      {
        uint64_t v80 = v79;
        operator delete(v79);
      }
      if (v82)
      {
        uint64_t v83 = v82;
        operator delete(v82);
      }
      v34 += 2;
      --v33;
    }
    while (v33);
  }
  double v47 = *(void **)v69;
  unint64_t v48 = *(void **)(v69 + 8);
  if (*(void **)v69 != v48)
  {
    do
    {
      nl_featurization::beam_search::getCandidatesFromEntityScores((uint64_t *)a9, v47, a3, a4, a5, a6, a7, a8, (uint64_t *)&v85);
      unint64_t v49 = 126 - 2 * __clz((v86 - v85) >> 7);
      if (v86 == v85) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = v49;
      }
      std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *,false>((long long *)v85, (long long *)v86, v50, 1);
      uint64_t v51 = (long long *)v86;
      if (v31 < (v86 - v85) >> 7)
      {
        unint64_t v52 = (long long *)&v85[128 * v31];
        if (v52 >= (long long *)v86) {
          __assert_rtn("beamSearch", "beam_search.cpp", 387, "allCandidates.begin() + beamSize < allCandidates.end()");
        }
        while (v51 != v52)
        {
          v51 -= 8;
          std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](v51);
        }
        unint64_t v86 = (char *)v52;
        uint64_t v51 = v52;
      }
      if (&v85 == (char **)a9) {
        goto LABEL_92;
      }
      uint64_t v53 = (long long *)v85;
      int64_t v54 = (char *)v51 - v85;
      unint64_t v55 = ((char *)v51 - v85) >> 7;
      uint64_t v56 = *(void *)(a9 + 16);
      uint64_t v57 = *(void *)a9;
      if (v55 <= (v56 - *(void *)a9) >> 7)
      {
        unint64_t v65 = (*(void *)(a9 + 8) - v57) >> 7;
        if (v65 >= v55)
        {
          unint64_t v31 = a10;
          uint64_t v67 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *>((uint64_t)v85, (uint64_t)v51, *(void *)a9);
          for (uint64_t i = *(void **)(a9 + 8);
                i != (void *)v67;
                std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](i))
          {
            i -= 16;
          }
          goto LABEL_91;
        }
        uint64_t v66 = (long long *)&v85[128 * v65];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *>((uint64_t)v85, (uint64_t)v66, *(void *)a9);
        unint64_t v31 = a10;
        uint64_t v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*>(v76, (uint64_t)v66, (uint64_t)v51, *(void *)(a9 + 8));
      }
      else
      {
        if (v57)
        {
          double v58 = *(void **)(a9 + 8);
          unint64_t v59 = *(void **)a9;
          if (v58 != (void *)v57)
          {
            do
            {
              v58 -= 16;
              std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](v58);
            }
            while (v58 != (void *)v57);
            unint64_t v59 = *(void **)a9;
          }
          *(void *)(a9 + 8) = v57;
          operator delete(v59);
          uint64_t v56 = 0;
          *(void *)a9 = 0;
          *(void *)(a9 + 8) = 0;
          *(void *)(a9 + 16) = 0;
        }
        if (v54 < 0) {
          goto LABEL_101;
        }
        uint64_t v60 = v56 >> 6;
        if (v56 >> 6 <= v55) {
          uint64_t v60 = v55;
        }
        unint64_t v61 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFF80 ? 0x1FFFFFFFFFFFFFFLL : v60;
        if (v61 >> 57) {
LABEL_101:
        }
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>>(v61);
        unint64_t v31 = a10;
        *(void *)a9 = v62;
        *(void *)(a9 + 8) = v62;
        *(void *)(a9 + 16) = &v62[128 * v63];
        uint64_t v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*>(v76, (uint64_t)v53, (uint64_t)v51, (uint64_t)v62);
      }
      uint64_t v67 = v64;
LABEL_91:
      *(void *)(a9 + 8) = v67;
LABEL_92:
      v98[0] = (void **)&v85;
      std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100](v98);
      v47 += 3;
    }
    while (v47 != v48);
  }
  if (v16) {
    operator delete(v16);
  }
}

void sub_1C8F2E284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  *(void *)(v29 - 136) = v27;
  std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 136));
  if (v28) {
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

double *std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *,false>(double *result, double *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                double v43 = *(a2 - 1);
                double v44 = v10[1];
                if (v43 > v44)
                {
                  double v45 = *v10;
                  double *v10 = *(a2 - 2);
                  *(a2 - 2) = v45;
                  v10[1] = v43;
                  *(a2 - 1) = v44;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v10, v10 + 2, v10 + 4, v10 + 6);
                double v46 = *(a2 - 1);
                double v47 = v10[7];
                if (v46 > v47)
                {
                  uint64_t v48 = *((void *)v10 + 6);
                  v10[6] = *(a2 - 2);
                  *((void *)a2 - 2) = v48;
                  v10[7] = v46;
                  *(a2 - 1) = v47;
                  double v49 = v10[7];
                  double v50 = v10[5];
                  if (v49 > v50)
                  {
                    uint64_t v51 = *((void *)v10 + 4);
                    uint64_t v52 = *((void *)v10 + 6);
                    *((void *)v10 + 4) = v52;
                    *((void *)v10 + 6) = v51;
                    v10[5] = v49;
                    v10[7] = v50;
                    double v53 = v10[3];
                    if (v49 > v53)
                    {
                      uint64_t v54 = *((void *)v10 + 2);
                      *((void *)v10 + 2) = v52;
                      *((void *)v10 + 4) = v54;
                      void v10[3] = v49;
                      v10[5] = v53;
                      double v55 = v10[1];
                      if (v49 > v55)
                      {
                        double v56 = *v10;
                        *(void *)uint64_t v10 = v52;
                        void v10[2] = v56;
                        v10[1] = v49;
                        void v10[3] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v57 = v10 + 2;
            BOOL v59 = v10 == a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                unint64_t v61 = v10;
                do
                {
                  uint64_t v62 = v57;
                  double v63 = v61[3];
                  if (v63 > v61[1])
                  {
                    uint64_t v64 = *((void *)v61 + 2);
                    uint64_t v65 = v60;
                    while (1)
                    {
                      uint64_t v66 = (double *)((char *)v10 + v65);
                      v66[2] = *(double *)((char *)v10 + v65);
                      v66[3] = *(double *)((char *)v10 + v65 + 8);
                      if (!v65) {
                        break;
                      }
                      v65 -= 16;
                      if (v63 <= *(v66 - 1))
                      {
                        uint64_t v67 = (uint64_t)v10 + v65 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v67 = (uint64_t)v10;
LABEL_84:
                    *(void *)uint64_t v67 = v64;
                    *(double *)(v67 + 8) = v63;
                  }
                  uint64_t v57 = v62 + 2;
                  v60 += 16;
                  unint64_t v61 = v62;
                }
                while (v62 + 2 != a2);
              }
            }
            else if (!v59)
            {
              char v96 = v10 + 1;
              do
              {
                unint64_t v97 = v57;
                double v98 = v9[3];
                if (v98 > v9[1])
                {
                  uint64_t v99 = *((void *)v9 + 2);
                  unint64_t v100 = v96;
                  do
                  {
                    v100[1] = *(v100 - 1);
                    v100[2] = *v100;
                    double v101 = *(v100 - 2);
                    v100 -= 2;
                  }
                  while (v98 > v101);
                  *((void *)v100 + 1) = v99;
                  v100[2] = v98;
                }
                uint64_t v57 = v97 + 2;
                v96 += 2;
                uint64_t v9 = v97;
              }
              while (v97 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  std::basic_string<char16_t>::size_type v72 = &v10[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v12 && v72[1] > v72[3])
                  {
                    v72 += 2;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  double v73 = v72[1];
                  double v74 = v10[2 * v70 + 1];
                  if (v73 <= v74)
                  {
                    uint64_t v75 = &v10[2 * v70];
                    uint64_t v76 = *(void *)v75;
                    do
                    {
                      uint64_t v77 = v75;
                      uint64_t v75 = v72;
                      double *v77 = *v72;
                      v77[1] = v73;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v78 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      std::basic_string<char16_t>::size_type v72 = &v10[2 * v71];
                      uint64_t v79 = v78 + 2;
                      if (v79 < (uint64_t)v12 && v72[1] > v72[3])
                      {
                        v72 += 2;
                        uint64_t v71 = v79;
                      }
                      double v73 = v72[1];
                    }
                    while (v73 <= v74);
                    *(void *)uint64_t v75 = v76;
                    v75[1] = v74;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v80 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v81 = 0;
                double v82 = *v10;
                uint64_t v83 = *((void *)v10 + 1);
                unint64_t v84 = v10;
                do
                {
                  unint64_t v85 = v84;
                  v84 += 2 * v81 + 2;
                  uint64_t v86 = 2 * v81;
                  uint64_t v81 = (2 * v81) | 1;
                  uint64_t v87 = v86 + 2;
                  if (v87 < v80 && v84[1] > v84[3])
                  {
                    v84 += 2;
                    uint64_t v81 = v87;
                  }
                  *unint64_t v85 = *v84;
                  v85[1] = v84[1];
                }
                while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                if (v84 == a2 - 2)
                {
                  double *v84 = v82;
                  *((void *)v84 + 1) = v83;
                }
                else
                {
                  double *v84 = *(a2 - 2);
                  v84[1] = *(a2 - 1);
                  *(a2 - 2) = v82;
                  *((void *)a2 - 1) = v83;
                  uint64_t v88 = (char *)v84 - (char *)v10 + 16;
                  if (v88 >= 17)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                    double v90 = v10[2 * v89 + 1];
                    double v91 = v84[1];
                    if (v90 > v91)
                    {
                      uint64_t v92 = *(void *)v84;
                      do
                      {
                        unint64_t v93 = v89;
                        std::basic_string<char16_t>::size_type v94 = v84;
                        unint64_t v84 = &v10[2 * v93];
                        *std::basic_string<char16_t>::size_type v94 = *v84;
                        v94[1] = v90;
                        if (!v93) {
                          break;
                        }
                        unint64_t v89 = (v93 - 1) >> 1;
                        double v90 = v10[2 * v89 + 1];
                      }
                      while (v90 > v91);
                      *(void *)unint64_t v84 = v92;
                      v10[2 * v93 + 1] = v91;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v80-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v9 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v14 - 2, v14, &v9[2 * v13 + 2]);
            double v15 = *v9;
            *uint64_t v9 = *v14;
            double *v14 = v15;
            uint64_t v16 = *((void *)v9 + 1);
            v9[1] = v14[1];
            *((void *)v14 + 1) = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          double v17 = *v9;
          if (a4) {
            break;
          }
          double v18 = v9[1];
          if (*(v9 - 1) > v18) {
            goto LABEL_13;
          }
          if (v18 <= *(a2 - 1))
          {
            int v34 = v9 + 2;
            do
            {
              uint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              double v35 = v34[1];
              v34 += 2;
            }
            while (v18 <= v35);
          }
          else
          {
            uint64_t v32 = v9;
            do
            {
              uint64_t v10 = v32 + 2;
              double v33 = v32[3];
              v32 += 2;
            }
            while (v18 <= v33);
          }
          unint64_t v36 = a2;
          if (v10 < a2)
          {
            long double v37 = a2;
            do
            {
              unint64_t v36 = v37 - 2;
              double v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v18 > v38);
          }
          while (v10 < v36)
          {
            double v39 = *v10;
            double *v10 = *v36;
            *unint64_t v36 = v39;
            uint64_t v40 = *((void *)v10 + 1);
            v10[1] = v36[1];
            *((void *)v36 + 1) = v40;
            do
            {
              double v41 = v10[3];
              v10 += 2;
            }
            while (v18 <= v41);
            do
            {
              double v42 = *(v36 - 1);
              v36 -= 2;
            }
            while (v18 > v42);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            *uint64_t v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v17;
          *(v10 - 1) = v18;
        }
        double v18 = v9[1];
LABEL_13:
        unint64_t v19 = v9;
        do
        {
          BOOL v20 = v19;
          v19 += 2;
        }
        while (v20[3] > v18);
        unint64_t v21 = a2;
        if (v20 == v9)
        {
          unint64_t v24 = a2;
          while (v19 < v24)
          {
            uint64_t v22 = v24 - 2;
            double v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v18) {
              goto LABEL_23;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            double v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v18);
        }
LABEL_23:
        uint64_t v10 = v19;
        if (v19 < v22)
        {
          std::string v26 = v22;
          do
          {
            double v27 = *v10;
            double *v10 = *v26;
            *std::string v26 = v27;
            uint64_t v28 = *((void *)v10 + 1);
            v10[1] = v26[1];
            *((void *)v26 + 1) = v28;
            do
            {
              double v29 = v10[3];
              v10 += 2;
            }
            while (v29 > v18);
            do
            {
              double v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 <= v18);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          *uint64_t v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v17;
        *(v10 - 1) = v18;
        if (v19 >= v22) {
          break;
        }
LABEL_34:
        uint64_t result = (double *)std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v9, v10 - 2);
      uint64_t result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *,false>(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v223 = a2 - 8;
    size_t v225 = a2;
    uint64_t v217 = a2 - 24;
    size_t v219 = a2 - 16;
    unint64_t v8 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v8;
          uint64_t v10 = (uint64_t)a2 - v8;
          uint64_t v11 = (uint64_t)((uint64_t)a2 - v8) >> 7;
          a1 = (long long *)v9;
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(double *)v223 <= *(double *)v9) {
                  return;
                }
                int64_t v70 = (long long *)v9;
                uint64_t v71 = v223;
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)v9, (long long *)(v9 + 128), v223);
                return;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)v9, (long long *)(v9 + 128), (long long *)(v9 + 256), v223);
                return;
              case 5:
                std::basic_string<char16_t>::size_type v72 = (long long *)(v9 + 128);
                double v73 = a1 + 16;
                double v74 = a1 + 24;
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a1 + 16, a1 + 24);
                if (*(double *)v223 <= *((double *)a1 + 48)) {
                  return;
                }
                std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v74, v223);
                if (*(double *)v74 <= *(double *)v73) {
                  return;
                }
                std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v73, v74);
                if (*(double *)v73 <= *(double *)v72) {
                  return;
                }
                std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v72, v73);
                if (*((double *)a1 + 16) <= *(double *)a1) {
                  return;
                }
                int64_t v70 = a1;
                uint64_t v71 = v72;
                break;
              default:
                JUMPOUT(0);
            }
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v70, v71);
            return;
          }
          if (v10 <= 3071)
          {
            if (a4)
            {
              if ((long long *)v9 != a2)
              {
                uint64_t v75 = (long long *)(v9 + 128);
                if ((long long *)(v9 + 128) != a2)
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = (long long *)v9;
                  do
                  {
                    uint64_t v78 = v75;
                    if (*((double *)v77 + 16) > *(double *)v77)
                    {
                      long long v79 = v75[1];
                      uint64_t v80 = (void *)v77 + 21;
                      uint64_t v81 = (void *)*((void *)v77 + 21);
                      long long v240 = *v78;
                      long long v241 = v79;
                      size_t v242 = (void **)*((void *)v77 + 20);
                      v243 = v81;
                      uint64_t v244 = *((void *)v77 + 22);
                      if (v244)
                      {
                        v81[2] = &v243;
                        *((void *)v77 + 20) = v80;
                        void *v80 = 0;
                        *((void *)v77 + 22) = 0;
                      }
                      else
                      {
                        size_t v242 = &v243;
                      }
                      uint64_t v82 = (uint64_t)a1;
                      long long v245 = *(long long *)((char *)v77 + 184);
                      uint64_t v246 = *((void *)v77 + 25);
                      *((void *)v77 + 23) = 0;
                      *((void *)v77 + 24) = 0;
                      long long v247 = v77[13];
                      uint64_t v83 = *((void *)v77 + 28);
                      *((void *)v77 + 25) = 0;
                      *((void *)v77 + 26) = 0;
                      *((void *)v77 + 27) = 0;
                      *((void *)v77 + 28) = 0;
                      long long v249 = *(long long *)((char *)v77 + 232);
                      uint64_t v84 = *((void *)v77 + 31);
                      uint64_t v248 = v83;
                      uint64_t v250 = v84;
                      *((void *)v77 + 30) = 0;
                      *((void *)v77 + 31) = 0;
                      uint64_t v85 = v76;
                      *((void *)v77 + 29) = 0;
                      while (1)
                      {
                        uint64_t v86 = (char *)a1 + v85;
                        long long v87 = *(long long *)((char *)a1 + v85 + 16);
                        *((_OWORD *)v86 + 8) = *(long long *)((char *)a1 + v85);
                        *((_OWORD *)v86 + 9) = v87;
                        std::__tree<unsigned long>::__move_assign((long long *)((char *)a1 + v85 + 160), (long long *)((char *)a1 + v85 + 32));
                        uint64_t v88 = *(void **)((char *)a1 + v85 + 184);
                        if (v88)
                        {
                          *((void *)v86 + 24) = v88;
                          operator delete(v88);
                          *((void *)v86 + 25) = 0;
                        }
                        *(_OWORD *)(v86 + 184) = *(_OWORD *)(v86 + 56);
                        *((void *)v86 + 25) = *((void *)v86 + 9);
                        *((void *)v86 + 7) = 0;
                        *((void *)v86 + 8) = 0;
                        *((void *)v86 + 9) = 0;
                        unint64_t v89 = (void *)*((void *)v86 + 26);
                        if (v89)
                        {
                          *(void *)((char *)a1 + v85 + 216) = v89;
                          operator delete(v89);
                          *(void *)((char *)a1 + v85 + 224) = 0;
                        }
                        double v90 = v86 + 80;
                        *((_OWORD *)v86 + 13) = *((_OWORD *)v86 + 5);
                        double v91 = (char *)a1 + v85;
                        *(void *)((char *)a1 + v85 + 224) = *(void *)((char *)a1 + v85 + 96);
                        void *v90 = 0;
                        v90[1] = 0;
                        v90[2] = 0;
                        uint64_t v92 = *(void **)((char *)a1 + v85 + 232);
                        if (v92)
                        {
                          *((void *)v91 + 30) = v92;
                          operator delete(v92);
                          *((void *)v91 + 31) = 0;
                        }
                        *(_OWORD *)(v91 + 232) = *(_OWORD *)(v91 + 104);
                        *((void *)v91 + 31) = *((void *)v91 + 15);
                        *((void *)v91 + 13) = 0;
                        *((void *)v91 + 14) = 0;
                        *((void *)v91 + 15) = 0;
                        if (!v85) {
                          break;
                        }
                        unint64_t v93 = (char *)a1 + v85;
                        double v94 = *(double *)((char *)a1 + v85 - 128);
                        v85 -= 128;
                        if (*(double *)&v240 <= v94)
                        {
                          unint64_t v95 = (uint64_t *)(v93 + 32);
                          char v96 = v93 + 56;
                          unint64_t v97 = v93 + 80;
                          double v98 = v93 + 104;
                          uint64_t v82 = (uint64_t)a1 + v85 + 128;
                          goto LABEL_124;
                        }
                      }
                      unint64_t v95 = (uint64_t *)(a1 + 2);
                      char v96 = (char *)a1 + 56;
                      unint64_t v97 = a1 + 5;
                      double v98 = (char *)a1 + 104;
LABEL_124:
                      long long v99 = v241;
                      *(_OWORD *)uint64_t v82 = v240;
                      *(_OWORD *)(v82 + 16) = v99;
                      uint64_t v100 = v82 + 40;
                      std::__tree<unsigned long>::destroy(*(void **)(v82 + 40));
                      *unint64_t v95 = (uint64_t)v242;
                      double v101 = v243;
                      *(void *)(v82 + 40) = v243;
                      uint64_t v102 = v244;
                      *(void *)(v82 + 48) = v244;
                      if (v102)
                      {
                        v101[2] = v100;
                        size_t v242 = &v243;
                        v243 = 0;
                        uint64_t v244 = 0;
                      }
                      else
                      {
                        *unint64_t v95 = v100;
                      }
                      uint64_t v103 = *(void **)v96;
                      a2 = v225;
                      if (*(void *)v96)
                      {
                        *(void *)(v82 + 64) = v103;
                        operator delete(v103);
                        *(void *)char v96 = 0;
                        *((void *)v96 + 1) = 0;
                        *((void *)v96 + 2) = 0;
                      }
                      *(void *)char v96 = v245;
                      *(void *)(v82 + 64) = *((void *)&v245 + 1);
                      *(void *)(v82 + 72) = v246;
                      long long v245 = 0uLL;
                      uint64_t v246 = 0;
                      unint64_t v104 = *(void **)v97;
                      if (*(void *)v97)
                      {
                        *(void *)(v82 + 88) = v104;
                        operator delete(v104);
                        *(void *)unint64_t v97 = 0;
                        *((void *)v97 + 1) = 0;
                        *((void *)v97 + 2) = 0;
                      }
                      *(void *)unint64_t v97 = v247;
                      *(void *)(v82 + 88) = *((void *)&v247 + 1);
                      *(void *)(v82 + 96) = v248;
                      long long v247 = 0uLL;
                      uint64_t v248 = 0;
                      unint64_t v105 = *(void **)v98;
                      if (*(void *)v98)
                      {
                        *(void *)(v82 + 112) = v105;
                        operator delete(v105);
                        *(void *)double v98 = 0;
                        *((void *)v98 + 1) = 0;
                        *((void *)v98 + 2) = 0;
                        unint64_t v105 = (void *)v247;
                      }
                      *(void *)double v98 = v249;
                      *(void *)(v82 + 112) = *((void *)&v249 + 1);
                      *(void *)(v82 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = v250;
                      long long v249 = 0uLL;
                      uint64_t v250 = 0;
                      if (v105)
                      {
                        *((void *)&v247 + 1) = v105;
                        operator delete(v105);
                      }
                      if ((void)v245)
                      {
                        *((void *)&v245 + 1) = v245;
                        operator delete((void *)v245);
                      }
                      std::__tree<unsigned long>::destroy(v243);
                    }
                    uint64_t v75 = v78 + 8;
                    v76 += 128;
                    uint64_t v77 = v78;
                  }
                  while (v78 + 8 != a2);
                }
              }
            }
            else if ((long long *)v9 != a2)
            {
              size_t v192 = (long long *)(v9 + 128);
              if ((long long *)(v9 + 128) != a2)
              {
                unint64_t v193 = v9 + 72;
                do
                {
                  BOOL v194 = v192;
                  if (*((double *)a1 + 16) > *(double *)a1)
                  {
                    long long v195 = v192[1];
                    unint64_t v196 = (void *)a1 + 21;
                    int v197 = (void *)*((void *)a1 + 21);
                    long long v240 = *v194;
                    long long v241 = v195;
                    size_t v242 = (void **)*((void *)a1 + 20);
                    v243 = v197;
                    uint64_t v244 = *((void *)a1 + 22);
                    if (v244)
                    {
                      v197[2] = &v243;
                      *((void *)a1 + 20) = v196;
                      *unint64_t v196 = 0;
                      *((void *)a1 + 22) = 0;
                    }
                    else
                    {
                      size_t v242 = &v243;
                    }
                    long long v245 = *(long long *)((char *)a1 + 184);
                    uint64_t v246 = *((void *)a1 + 25);
                    *((void *)a1 + 23) = 0;
                    *((void *)a1 + 24) = 0;
                    long long v247 = a1[13];
                    uint64_t v198 = *((void *)a1 + 28);
                    *((void *)a1 + 25) = 0;
                    *((void *)a1 + 26) = 0;
                    *((void *)a1 + 27) = 0;
                    *((void *)a1 + 28) = 0;
                    long long v249 = *(long long *)((char *)a1 + 232);
                    uint64_t v199 = *((void *)a1 + 31);
                    uint64_t v248 = v198;
                    uint64_t v250 = v199;
                    *((void *)a1 + 30) = 0;
                    *((void *)a1 + 31) = 0;
                    unint64_t v200 = v193;
                    *((void *)a1 + 29) = 0;
                    do
                    {
                      *(_OWORD *)(v200 + 56) = *(_OWORD *)(v200 - 72);
                      *(_OWORD *)(v200 + 72) = *(_OWORD *)(v200 - 56);
                      std::__tree<unsigned long>::__move_assign((void *)(v200 + 88), (void *)(v200 - 40));
                      uint64_t v201 = *(void **)(v200 + 112);
                      if (v201)
                      {
                        *(void *)(v200 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = v201;
                        operator delete(v201);
                        *(void *)(v200 + 128) = 0;
                      }
                      v202 = (void *)(v200 - 16);
                      *(_OWORD *)(v200 + 112) = *(_OWORD *)(v200 - 16);
                      *(void *)(v200 + 128) = *(void *)v200;
                      v202[1] = 0;
                      *(void *)unint64_t v200 = 0;
                      void *v202 = 0;
                      uint64_t v203 = *(void **)(v200 + 136);
                      if (v203)
                      {
                        *(void *)(v200 + 144) = v203;
                        operator delete(v203);
                        *(void *)(v200 + 152) = 0;
                      }
                      *(_OWORD *)(v200 + 136) = *(_OWORD *)(v200 + 8);
                      *(void *)(v200 + 152) = *(void *)(v200 + 24);
                      *(void *)(v200 + 16) = 0;
                      *(void *)(v200 + 24) = 0;
                      *(void *)(v200 + 8) = 0;
                      uint64_t v204 = *(void **)(v200 + 160);
                      if (v204)
                      {
                        *(void *)(v200 + 168) = v204;
                        operator delete(v204);
                        *(void *)(v200 + 176) = 0;
                      }
                      unint64_t v205 = v200 + 32;
                      *(_OWORD *)(v200 + 160) = *(_OWORD *)(v200 + 32);
                      *(void *)(v200 + 176) = *(void *)(v200 + 48);
                      *(void *)(v200 + 32) = 0;
                      *(void *)(v200 + 40) = 0;
                      *(void *)(v200 + 48) = 0;
                      double v206 = *(double *)(v200 - 200);
                      v200 -= 128;
                    }
                    while (*(double *)&v240 > v206);
                    uint64_t v207 = (long long *)(v205 - 104);
                    long long v208 = v241;
                    *uint64_t v207 = v240;
                    v207[1] = v208;
                    unint64_t v209 = v205 - 64;
                    std::__tree<unsigned long>::destroy(*(void **)(v200 + 96));
                    *(void *)(v200 + 88) = v242;
                    int64_t v210 = v243;
                    *(void *)(v200 + 96) = v243;
                    uint64_t v211 = v244;
                    *(void *)(v200 + 104) = v244;
                    if (v211)
                    {
                      v210[2] = v209;
                      size_t v242 = &v243;
                      v243 = 0;
                      uint64_t v244 = 0;
                    }
                    else
                    {
                      *(void *)(v200 + 88) = v209;
                    }
                    uint64_t v212 = (void *)(v205 - 48);
                    v213 = *(void **)(v205 - 48);
                    if (v213)
                    {
                      *(void *)(v205 - 40) = v213;
                      operator delete(v213);
                      *uint64_t v212 = 0;
                      *(void *)(v205 - 40) = 0;
                      *(void *)(v205 - 32) = 0;
                    }
                    uint64_t v214 = (void *)(v205 - 24);
                    *(_OWORD *)uint64_t v212 = v245;
                    *(void *)(v205 - 32) = v246;
                    long long v245 = 0uLL;
                    uint64_t v246 = 0;
                    uint64_t v215 = *(void **)(v205 - 24);
                    if (v215)
                    {
                      *(void *)(v205 - 16) = v215;
                      operator delete(v215);
                      *uint64_t v214 = 0;
                      *(void *)(v205 - 16) = 0;
                      *(void *)(v205 - 8) = 0;
                    }
                    *(_OWORD *)uint64_t v214 = v247;
                    *(void *)(v205 - 8) = v248;
                    long long v247 = 0uLL;
                    uint64_t v248 = 0;
                    int64_t v216 = *(void **)v205;
                    if (*(void *)v205)
                    {
                      *(void *)(v205 + 8) = v216;
                      operator delete(v216);
                      *(void *)unint64_t v205 = 0;
                      *(void *)(v205 + 8) = 0;
                      *(void *)(v205 + 16) = 0;
                      int64_t v216 = (void *)v247;
                    }
                    *(_OWORD *)unint64_t v205 = v249;
                    *(void *)(v205 + 16) = v250;
                    long long v249 = 0uLL;
                    uint64_t v250 = 0;
                    if (v216)
                    {
                      *((void *)&v247 + 1) = v216;
                      operator delete(v216);
                    }
                    a2 = v225;
                    if ((void)v245)
                    {
                      *((void *)&v245 + 1) = v245;
                      operator delete((void *)v245);
                    }
                    std::__tree<unsigned long>::destroy(v243);
                  }
                  size_t v192 = v194 + 8;
                  v193 += 128;
                  a1 = v194;
                }
                while (v194 + 8 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v9 != a2)
            {
              int64_t v226 = (unint64_t)(v11 - 2) >> 1;
              int64_t v106 = v226;
              unint64_t v107 = (void *)v9;
              do
              {
                int64_t v108 = v106;
                if (v226 >= v106)
                {
                  uint64_t v109 = (2 * v106) | 1;
                  uint64_t v110 = (long long *)&v107[16 * v109];
                  if (2 * v108 + 2 < v11 && *(double *)v110 > *((double *)v110 + 16))
                  {
                    v110 += 8;
                    uint64_t v109 = 2 * v108 + 2;
                  }
                  unint64_t v111 = (long long *)&v107[16 * v108];
                  if (*(double *)v110 <= *(double *)v111)
                  {
                    long long v112 = v111[1];
                    long long v240 = *v111;
                    long long v241 = v112;
                    uint64_t v113 = &v107[16 * v108];
                    unint64_t v114 = v113 + 4;
                    size_t v242 = (void **)v113[4];
                    std::basic_string<char16_t> v117 = (void *)v113[5];
                    std::basic_string<char16_t>::size_type v115 = v113 + 5;
                    int64_t v116 = v117;
                    v243 = v117;
                    uint64_t v244 = v115[1];
                    if (v244)
                    {
                      v116[2] = &v243;
                      *unint64_t v114 = v115;
                      *std::basic_string<char16_t>::size_type v115 = 0;
                      v115[1] = 0;
                    }
                    else
                    {
                      size_t v242 = &v243;
                    }
                    unint64_t v118 = &v107[16 * v108];
                    long long v245 = *(_OWORD *)(v118 + 7);
                    uint64_t v246 = v118[9];
                    v118[7] = 0;
                    v118[8] = 0;
                    v118[9] = 0;
                    long long v247 = *((_OWORD *)v118 + 5);
                    uint64_t v248 = v118[12];
                    v118[10] = 0;
                    v118[11] = 0;
                    v118[12] = 0;
                    long long v249 = *(_OWORD *)(v118 + 13);
                    uint64_t v250 = v118[15];
                    v118[13] = 0;
                    v118[14] = 0;
                    v118[15] = 0;
                    do
                    {
                      unint64_t v119 = v110;
                      long long v120 = v110[1];
                      *unint64_t v111 = *v110;
                      v111[1] = v120;
                      unint64_t v121 = v110 + 2;
                      std::__tree<unsigned long>::__move_assign((void *)v111 + 4, (void *)v110 + 4);
                      unint64_t v122 = (void *)*((void *)v111 + 7);
                      if (v122)
                      {
                        *((void *)v111 + 8) = v122;
                        operator delete(v122);
                        *((void *)v111 + 7) = 0;
                        *((void *)v111 + 8) = 0;
                        *((void *)v111 + 9) = 0;
                      }
                      unint64_t v123 = (void **)v119 + 7;
                      *(long long *)((char *)v111 + 56) = *(long long *)((char *)v119 + 56);
                      *((void *)v111 + 9) = *((void *)v119 + 9);
                      *((void *)v119 + 7) = 0;
                      *((void *)v119 + 8) = 0;
                      *((void *)v119 + 9) = 0;
                      unint64_t v124 = (void *)*((void *)v111 + 10);
                      if (v124)
                      {
                        *((void *)v111 + 11) = v124;
                        operator delete(v124);
                        *((void *)v111 + 10) = 0;
                        *((void *)v111 + 11) = 0;
                        *((void *)v111 + 12) = 0;
                      }
                      v111[5] = v119[5];
                      *((void *)v111 + 12) = *((void *)v119 + 12);
                      *((void *)v119 + 10) = 0;
                      *((void *)v119 + 11) = 0;
                      *((void *)v119 + 12) = 0;
                      BOOL v125 = (void *)*((void *)v111 + 13);
                      if (v125)
                      {
                        *((void *)v111 + 14) = v125;
                        operator delete(v125);
                        *((void *)v111 + 13) = 0;
                        *((void *)v111 + 14) = 0;
                        *((void *)v111 + 15) = 0;
                      }
                      *(long long *)((char *)v111 + 104) = *(long long *)((char *)v119 + 104);
                      *((void *)v111 + 15) = *((void *)v119 + 15);
                      *((void *)v119 + 13) = 0;
                      *((void *)v119 + 14) = 0;
                      *((void *)v119 + 15) = 0;
                      if (v226 < v109) {
                        break;
                      }
                      uint64_t v126 = 2 * v109;
                      uint64_t v109 = (2 * v109) | 1;
                      uint64_t v110 = &a1[8 * v109];
                      uint64_t v127 = v126 + 2;
                      if (v127 < v11 && *(double *)v110 > *((double *)v110 + 16))
                      {
                        v110 += 8;
                        uint64_t v109 = v127;
                      }
                      unint64_t v111 = v119;
                    }
                    while (*(double *)v110 <= *(double *)&v240);
                    long long v128 = v241;
                    *unint64_t v119 = v240;
                    v119[1] = v128;
                    uint64_t v129 = (uint64_t)v119 + 40;
                    std::__tree<unsigned long>::destroy(*((void **)v119 + 5));
                    *((void *)v119 + 4) = v242;
                    unint64_t v130 = v243;
                    *((void *)v119 + 5) = v243;
                    uint64_t v131 = v244;
                    *((void *)v119 + 6) = v244;
                    if (v131)
                    {
                      v130[2] = v129;
                      size_t v242 = &v243;
                      v243 = 0;
                      uint64_t v244 = 0;
                    }
                    else
                    {
                      *unint64_t v121 = v129;
                    }
                    BOOL v132 = *v123;
                    if (*v123)
                    {
                      *((void *)v119 + 8) = v132;
                      operator delete(v132);
                      *unint64_t v123 = 0;
                      *((void *)v119 + 8) = 0;
                      *((void *)v119 + 9) = 0;
                    }
                    *(long long *)((char *)v119 + 56) = v245;
                    *((void *)v119 + 9) = v246;
                    long long v245 = 0uLL;
                    uint64_t v246 = 0;
                    uint64_t v133 = (void *)*((void *)v119 + 10);
                    if (v133)
                    {
                      *((void *)v119 + 11) = v133;
                      operator delete(v133);
                      *((void *)v119 + 10) = 0;
                      *((void *)v119 + 11) = 0;
                      *((void *)v119 + 12) = 0;
                    }
                    v119[5] = v247;
                    *((void *)v119 + 12) = v248;
                    long long v247 = 0uLL;
                    uint64_t v248 = 0;
                    uint64_t v134 = (void *)*((void *)v119 + 13);
                    a2 = v225;
                    if (v134)
                    {
                      *((void *)v119 + 14) = v134;
                      operator delete(v134);
                      *((void *)v119 + 13) = 0;
                      *((void *)v119 + 14) = 0;
                      *((void *)v119 + 15) = 0;
                      uint64_t v134 = (void *)v247;
                    }
                    unint64_t v107 = a1;
                    *(long long *)((char *)v119 + 104) = v249;
                    *((void *)v119 + 15) = v250;
                    long long v249 = 0uLL;
                    uint64_t v250 = 0;
                    if (v134)
                    {
                      *((void *)&v247 + 1) = v134;
                      operator delete(v134);
                    }
                    if ((void)v245)
                    {
                      *((void *)&v245 + 1) = v245;
                      operator delete((void *)v245);
                    }
                    std::__tree<unsigned long>::destroy(v243);
                  }
                }
                int64_t v106 = v108 - 1;
              }
              while (v108);
              uint64_t v135 = (unint64_t)v10 >> 7;
              int v224 = v107 + 7;
              v218 = v107 + 5;
              int v220 = v107 + 13;
              BOOL v222 = v107 + 10;
              do
              {
                long long v136 = a2;
                uint64_t v137 = (uint64_t)a1;
                long long v229 = *a1;
                long long v230 = a1[1];
                uint64_t v138 = (void *)*((void *)a1 + 5);
                BOOL v231 = (void **)*((void *)a1 + 4);
                long long v232 = v138;
                uint64_t v233 = *((void *)a1 + 6);
                if (v233)
                {
                  v138[2] = &v232;
                  *((void *)a1 + 4) = v218;
                  void *v218 = 0;
                  v218[1] = 0;
                }
                else
                {
                  BOOL v231 = &v232;
                }
                uint64_t v139 = 0;
                *(_OWORD *)v234 = *(long long *)((char *)a1 + 56);
                uint64_t v235 = *((void *)a1 + 9);
                *int v224 = 0;
                v224[1] = 0;
                v224[2] = 0;
                *(_OWORD *)unint64_t v236 = a1[5];
                uint64_t v237 = *((void *)a1 + 12);
                *BOOL v222 = 0;
                v222[1] = 0;
                v222[2] = 0;
                *(_OWORD *)std::basic_string<char16_t> __p = *(long long *)((char *)a1 + 104);
                uint64_t v239 = *((void *)a1 + 15);
                *int v220 = 0;
                v220[1] = 0;
                v220[2] = 0;
                do
                {
                  uint64_t v140 = v137 + (v139 << 7) + 128;
                  uint64_t v141 = 2 * v139;
                  uint64_t v139 = (2 * v139) | 1;
                  uint64_t v142 = v141 + 2;
                  if (v142 < v135 && *(double *)v140 > *(double *)(v140 + 128))
                  {
                    v140 += 128;
                    uint64_t v139 = v142;
                  }
                  long long v143 = *(_OWORD *)(v140 + 16);
                  *(_OWORD *)uint64_t v137 = *(_OWORD *)v140;
                  *(_OWORD *)(v137 + 16) = v143;
                  unint64_t v144 = (uint64_t *)(v140 + 32);
                  std::__tree<unsigned long>::__move_assign((void *)(v137 + 32), (void *)(v140 + 32));
                  unint64_t v145 = *(void **)(v137 + 56);
                  if (v145)
                  {
                    *(void *)(v137 + 64) = v145;
                    operator delete(v145);
                    *(void *)(v137 + 56) = 0;
                    *(void *)(v137 + 64) = 0;
                    *(void *)(v137 + 72) = 0;
                  }
                  unint64_t v146 = (void **)(v140 + 56);
                  *(_OWORD *)(v137 + 56) = *(_OWORD *)(v140 + 56);
                  *(void *)(v137 + 72) = *(void *)(v140 + 72);
                  *(void *)(v140 + 56) = 0;
                  *(void *)(v140 + 64) = 0;
                  *(void *)(v140 + 72) = 0;
                  unint64_t v147 = *(void **)(v137 + 80);
                  if (v147)
                  {
                    *(void *)(v137 + 88) = v147;
                    operator delete(v147);
                    *(void *)(v137 + 80) = 0;
                    *(void *)(v137 + 88) = 0;
                    *(void *)(v137 + 96) = 0;
                  }
                  BOOL v148 = (void *)(v140 + 80);
                  *(_OWORD *)(v137 + 80) = *(_OWORD *)(v140 + 80);
                  *(void *)(v137 + 96) = *(void *)(v140 + 96);
                  *(void *)(v140 + 80) = 0;
                  *(void *)(v140 + 88) = 0;
                  *(void *)(v140 + 96) = 0;
                  long long v149 = *(void **)(v137 + 104);
                  if (v149)
                  {
                    *(void *)(v137 + 112) = v149;
                    operator delete(v149);
                    *(void *)(v137 + 104) = 0;
                    *(void *)(v137 + 112) = 0;
                    *(void *)(v137 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                  }
                  long long v150 = (void *)(v140 + 104);
                  *(_OWORD *)(v137 + 104) = *(_OWORD *)(v140 + 104);
                  *(void *)(v137 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *(void *)(v140 + 120);
                  *(void *)(v140 + 104) = 0;
                  *(void *)(v140 + 112) = 0;
                  *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                  uint64_t v137 = v140;
                }
                while (v139 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
                BOOL v151 = v136 - 8;
                if ((long long *)v140 == v136 - 8)
                {
                  *(_OWORD *)uint64_t v140 = v229;
                  *(_OWORD *)(v140 + 16) = v230;
                  uint64_t v162 = v140 + 40;
                  std::__tree<unsigned long>::destroy(*(void **)(v140 + 40));
                  *(void *)(v140 + 32) = v231;
                  long long v163 = v232;
                  *(void *)(v140 + 40) = v232;
                  uint64_t v164 = v233;
                  *(void *)(v140 + 48) = v233;
                  if (v164)
                  {
                    v163[2] = v162;
                    long long v232 = 0;
                    uint64_t v233 = 0;
                  }
                  else
                  {
                    uint64_t *v144 = v162;
                  }
                  long long v174 = *v146;
                  if (*v146)
                  {
                    *(void *)(v140 + 64) = v174;
                    operator delete(v174);
                    *unint64_t v146 = 0;
                    *(void *)(v140 + 64) = 0;
                    *(void *)(v140 + 72) = 0;
                  }
                  *(_OWORD *)(v140 + 56) = *(_OWORD *)v234;
                  *(void *)(v140 + 72) = v235;
                  v234[0] = 0;
                  v234[1] = 0;
                  uint64_t v235 = 0;
                  long long v175 = *(void **)(v140 + 80);
                  if (v175)
                  {
                    *(void *)(v140 + 88) = v175;
                    operator delete(v175);
                    *BOOL v148 = 0;
                    *(void *)(v140 + 88) = 0;
                    *(void *)(v140 + 96) = 0;
                  }
                  *(_OWORD *)(v140 + 80) = *(_OWORD *)v236;
                  *(void *)(v140 + 96) = v237;
                  v236[0] = 0;
                  v236[1] = 0;
                  uint64_t v237 = 0;
                  long long v176 = *(void **)(v140 + 104);
                  if (v176)
                  {
                    *(void *)(v140 + 112) = v176;
                    operator delete(v176);
                    *long long v150 = 0;
                    *(void *)(v140 + 112) = 0;
                    *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                  }
                  *(_OWORD *)(v140 + 104) = *(_OWORD *)__p;
                  *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = v239;
                  __p[0] = 0;
                  __p[1] = 0;
                  uint64_t v239 = 0;
                }
                else
                {
                  long long v152 = *(v136 - 7);
                  v227 = v136 - 8;
                  *(_OWORD *)uint64_t v140 = *v151;
                  *(_OWORD *)(v140 + 16) = v152;
                  std::__tree<unsigned long>::__move_assign((void *)(v140 + 32), (void *)v136 - 12);
                  unint64_t v153 = *(void **)(v140 + 56);
                  if (v153)
                  {
                    *(void *)(v140 + 64) = v153;
                    operator delete(v153);
                    *unint64_t v146 = 0;
                    *(void *)(v140 + 64) = 0;
                    *(void *)(v140 + 72) = 0;
                  }
                  unint64_t v154 = (void **)v136 - 9;
                  *(_OWORD *)(v140 + 56) = *(long long *)((char *)v136 - 72);
                  *(void *)(v140 + 72) = *((void *)v136 - 7);
                  unsigned __int8 *v154 = 0;
                  v154[1] = 0;
                  v154[2] = 0;
                  unint64_t v155 = *(void **)(v140 + 80);
                  if (v155)
                  {
                    *(void *)(v140 + 88) = v155;
                    operator delete(v155);
                    *BOOL v148 = 0;
                    *(void *)(v140 + 88) = 0;
                    *(void *)(v140 + 96) = 0;
                  }
                  BOOL v156 = v136 - 3;
                  *(_OWORD *)(v140 + 80) = *(v136 - 3);
                  *(void *)(v140 + 96) = *((void *)v136 - 4);
                  *(void *)BOOL v156 = 0;
                  *((void *)v156 + 1) = 0;
                  *((void *)v156 + 2) = 0;
                  unint64_t v157 = *(void **)(v140 + 104);
                  if (v157)
                  {
                    *(void *)(v140 + 112) = v157;
                    operator delete(v157);
                    *long long v150 = 0;
                    *(void *)(v140 + 112) = 0;
                    *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                  }
                  long long v158 = (void *)v136 - 3;
                  *(_OWORD *)(v140 + 104) = *(long long *)((char *)v136 - 24);
                  *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *((void *)v136 - 1);
                  *long long v158 = 0;
                  v158[1] = 0;
                  v158[2] = 0;
                  long long *v227 = v229;
                  *(v136 - 7) = v230;
                  uint64_t v159 = (uint64_t)v136 - 88;
                  std::__tree<unsigned long>::destroy(*((void **)v136 - 11));
                  *((void *)v136 - 12) = v231;
                  unint64_t v160 = v232;
                  *((void *)v136 - 11) = v232;
                  uint64_t v161 = v233;
                  *((void *)v136 - 10) = v233;
                  if (v161)
                  {
                    unint64_t v160[2] = v159;
                    long long v232 = 0;
                    uint64_t v233 = 0;
                  }
                  else
                  {
                    *((void *)v136 - 12) = v159;
                  }
                  long long v165 = *v154;
                  if (*v154)
                  {
                    *((void *)v136 - 8) = v165;
                    operator delete(v165);
                  }
                  *(long long *)((char *)v136 - 72) = *(_OWORD *)v234;
                  *((void *)v136 - 7) = v235;
                  v234[0] = 0;
                  v234[1] = 0;
                  uint64_t v235 = 0;
                  long long v166 = (void *)*((void *)v136 - 6);
                  BOOL v151 = v136 - 8;
                  if (v166)
                  {
                    *((void *)v136 - 5) = v166;
                    operator delete(v166);
                  }
                  *(v136 - 3) = *(_OWORD *)v236;
                  *((void *)v136 - 4) = v237;
                  v236[0] = 0;
                  v236[1] = 0;
                  uint64_t v237 = 0;
                  long long v167 = (void *)*((void *)v136 - 3);
                  if (v167)
                  {
                    *((void *)v136 - 2) = v167;
                    operator delete(v167);
                  }
                  *(long long *)((char *)v136 - 24) = *(_OWORD *)__p;
                  *((void *)v136 - 1) = v239;
                  __p[0] = 0;
                  __p[1] = 0;
                  uint64_t v239 = 0;
                  uint64_t v168 = v140 + 128 - (void)a1;
                  if (v168 >= 129)
                  {
                    unint64_t v169 = (((unint64_t)v168 >> 7) - 2) >> 1;
                    long long v170 = &a1[8 * v169];
                    if (*(double *)v170 > *(double *)v140)
                    {
                      long long v171 = *(_OWORD *)(v140 + 16);
                      long long v240 = *(_OWORD *)v140;
                      long long v241 = v171;
                      size_t v242 = *(void ***)(v140 + 32);
                      long long v172 = (void *)(v140 + 40);
                      long long v173 = *(void **)(v140 + 40);
                      v243 = v173;
                      uint64_t v244 = *(void *)(v140 + 48);
                      if (v244)
                      {
                        v173[2] = &v243;
                        uint64_t *v144 = (uint64_t)v172;
                        *long long v172 = 0;
                        *(void *)(v140 + 48) = 0;
                      }
                      else
                      {
                        size_t v242 = &v243;
                      }
                      long long v245 = *(_OWORD *)(v140 + 56);
                      uint64_t v246 = *(void *)(v140 + 72);
                      *unint64_t v146 = 0;
                      *(void *)(v140 + 64) = 0;
                      *(void *)(v140 + 72) = 0;
                      long long v247 = *(_OWORD *)(v140 + 80);
                      uint64_t v248 = *(void *)(v140 + 96);
                      *BOOL v148 = 0;
                      *(void *)(v140 + 88) = 0;
                      *(void *)(v140 + 96) = 0;
                      long long v249 = *(_OWORD *)(v140 + 104);
                      uint64_t v250 = *(void *)(v140 + 120);
                      *long long v150 = 0;
                      *(void *)(v140 + 112) = 0;
                      *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                      do
                      {
                        uint64_t v177 = (uint64_t)v170;
                        long long v178 = v170[1];
                        *(_OWORD *)uint64_t v140 = *v170;
                        *(_OWORD *)(v140 + 16) = v178;
                        long long v179 = (uint64_t *)(v170 + 2);
                        std::__tree<unsigned long>::__move_assign((void *)(v140 + 32), (void *)v170 + 4);
                        long long v180 = *(void **)(v140 + 56);
                        if (v180)
                        {
                          *(void *)(v140 + 64) = v180;
                          operator delete(v180);
                          *(void *)(v140 + 56) = 0;
                          *(void *)(v140 + 64) = 0;
                          *(void *)(v140 + 72) = 0;
                        }
                        uint64_t v181 = (void **)(v177 + 56);
                        *(_OWORD *)(v140 + 56) = *(_OWORD *)(v177 + 56);
                        *(void *)(v140 + 72) = *(void *)(v177 + 72);
                        *(void *)(v177 + 56) = 0;
                        *(void *)(v177 + 64) = 0;
                        *(void *)(v177 + 72) = 0;
                        int v182 = *(void **)(v140 + 80);
                        if (v182)
                        {
                          *(void *)(v140 + 88) = v182;
                          operator delete(v182);
                          *(void *)(v140 + 80) = 0;
                          *(void *)(v140 + 88) = 0;
                          *(void *)(v140 + 96) = 0;
                        }
                        *(_OWORD *)(v140 + 80) = *(_OWORD *)(v177 + 80);
                        *(void *)(v140 + 96) = *(void *)(v177 + 96);
                        *(void *)(v177 + 80) = 0;
                        *(void *)(v177 + 88) = 0;
                        *(void *)(v177 + 96) = 0;
                        unint64_t v183 = *(void **)(v140 + 104);
                        if (v183)
                        {
                          *(void *)(v140 + 112) = v183;
                          operator delete(v183);
                          *(void *)(v140 + 104) = 0;
                          *(void *)(v140 + 112) = 0;
                          *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                        }
                        *(_OWORD *)(v140 + 104) = *(_OWORD *)(v177 + 104);
                        *(void *)(v140 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *(void *)(v177 + 120);
                        *(void *)(v177 + 104) = 0;
                        *(void *)(v177 + 112) = 0;
                        *(void *)(v177 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
                        if (!v169) {
                          break;
                        }
                        unint64_t v169 = (v169 - 1) >> 1;
                        long long v170 = &a1[8 * v169];
                        uint64_t v140 = v177;
                      }
                      while (*(double *)v170 > *(double *)&v240);
                      long long v184 = v241;
                      *(_OWORD *)uint64_t v177 = v240;
                      *(_OWORD *)(v177 + 16) = v184;
                      uint64_t v185 = v177 + 40;
                      std::__tree<unsigned long>::destroy(*(void **)(v177 + 40));
                      *(void *)(v177 + 32) = v242;
                      uint64_t v186 = v243;
                      *(void *)(v177 + 40) = v243;
                      uint64_t v187 = v244;
                      *(void *)(v177 + 48) = v244;
                      if (v187)
                      {
                        v186[2] = v185;
                        size_t v242 = &v243;
                        v243 = 0;
                        uint64_t v244 = 0;
                      }
                      else
                      {
                        *long long v179 = v185;
                      }
                      BOOL v151 = v227;
                      int v188 = *v181;
                      if (*v181)
                      {
                        *(void *)(v177 + 64) = v188;
                        operator delete(v188);
                      }
                      *(_OWORD *)(v177 + 56) = v245;
                      *(void *)(v177 + 72) = v246;
                      long long v245 = 0uLL;
                      uint64_t v246 = 0;
                      uint64_t v189 = *(void **)(v177 + 80);
                      if (v189)
                      {
                        *(void *)(v177 + 88) = v189;
                        operator delete(v189);
                      }
                      *(_OWORD *)(v177 + 80) = v247;
                      *(void *)(v177 + 96) = v248;
                      long long v247 = 0uLL;
                      uint64_t v248 = 0;
                      char v190 = *(void **)(v177 + 104);
                      if (v190)
                      {
                        *(void *)(v177 + 112) = v190;
                        operator delete(v190);
                        char v190 = (void *)v247;
                      }
                      *(_OWORD *)(v177 + 104) = v249;
                      *(void *)(v177 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = v250;
                      long long v249 = 0uLL;
                      uint64_t v250 = 0;
                      if (v190)
                      {
                        *((void *)&v247 + 1) = v190;
                        operator delete(v190);
                      }
                      if ((void)v245)
                      {
                        *((void *)&v245 + 1) = v245;
                        operator delete((void *)v245);
                      }
                      std::__tree<unsigned long>::destroy(v243);
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                    }
                  }
                }
                if (v236[0])
                {
                  v236[1] = v236[0];
                  operator delete(v236[0]);
                }
                if (v234[0])
                {
                  v234[1] = v234[0];
                  operator delete(v234[0]);
                }
                std::__tree<unsigned long>::destroy(v232);
                a2 = v151;
              }
              while (v135-- > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = (long long *)(v9 + ((unint64_t)v11 >> 1 << 7));
          if ((unint64_t)v10 <= 0x4000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(v13, (long long *)v9, v223);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)v9, v13, v223);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)(v9 + 128), v13 - 8, v219);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)(v9 + 256), (long long *)(v9 + 128 + (v12 << 7)), v217);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(v13 - 8, v13, (long long *)(v9 + 128 + (v12 << 7)));
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((long long *)v9, v13);
          }
          --a3;
          if ((a4 & 1) != 0 || *(double *)(v9 - 128) > *(double *)v9) {
            break;
          }
          long long v46 = *(_OWORD *)(v9 + 16);
          long long v240 = *(_OWORD *)v9;
          long long v241 = v46;
          double v47 = (void *)(v9 + 40);
          uint64_t v48 = *(void **)(v9 + 40);
          size_t v242 = *(void ***)(v9 + 32);
          v243 = v48;
          uint64_t v244 = *(void *)(v9 + 48);
          if (v244)
          {
            v48[2] = &v243;
            *(void *)(v9 + 32) = v47;
            *double v47 = 0;
            *(void *)(v9 + 48) = 0;
          }
          else
          {
            size_t v242 = &v243;
          }
          unint64_t v8 = v9;
          long long v245 = *(_OWORD *)(v9 + 56);
          uint64_t v246 = *(void *)(v9 + 72);
          *(void *)(v9 + 56) = 0;
          *(void *)(v9 + 64) = 0;
          *(void *)(v9 + 72) = 0;
          long long v247 = *(_OWORD *)(v9 + 80);
          uint64_t v248 = *(void *)(v9 + 96);
          *(void *)(v9 + 80) = 0;
          *(void *)(v9 + 88) = 0;
          *(void *)(v9 + 96) = 0;
          long long v249 = *(_OWORD *)(v9 + 104);
          uint64_t v250 = *(void *)(v9 + 120);
          *(void *)(v9 + 104) = 0;
          *(void *)(v9 + 112) = 0;
          *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
          if (*(double *)&v240 <= *(double *)v223)
          {
            unint64_t v50 = v9 + 128;
            do
            {
              unint64_t v8 = v50;
              if (v50 >= (unint64_t)a2) {
                break;
              }
              v50 += 128;
            }
            while (*(double *)&v240 <= *(double *)v8);
          }
          else
          {
            do
            {
              double v49 = *(double *)(v8 + 128);
              v8 += 128;
            }
            while (*(double *)&v240 <= v49);
          }
          uint64_t v51 = a2;
          if (v8 < (unint64_t)a2)
          {
            uint64_t v51 = a2;
            do
            {
              double v52 = *((double *)v51 - 16);
              v51 -= 8;
            }
            while (*(double *)&v240 > v52);
          }
          while (v8 < (unint64_t)v51)
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((long long *)v8, v51);
            do
            {
              double v53 = *(double *)(v8 + 128);
              v8 += 128;
            }
            while (*(double *)&v240 <= v53);
            do
            {
              double v54 = *((double *)v51 - 16);
              v51 -= 8;
            }
            while (*(double *)&v240 > v54);
          }
          double v55 = (long long *)(v8 - 128);
          if (v8 - 128 != v9)
          {
            long long v56 = *(_OWORD *)(v8 - 112);
            *(_OWORD *)unint64_t v9 = *v55;
            *(_OWORD *)(v9 + 16) = v56;
            std::__tree<unsigned long>::__move_assign((void *)(v9 + 32), (void *)(v8 - 96));
            uint64_t v57 = *(void **)(v9 + 56);
            if (v57)
            {
              *(void *)(v9 + 64) = v57;
              operator delete(v57);
              *(void *)(v9 + 56) = 0;
              *(void *)(v9 + 64) = 0;
              *(void *)(v9 + 72) = 0;
            }
            double v58 = (void *)(v8 - 72);
            *(_OWORD *)(v9 + 56) = *(_OWORD *)(v8 - 72);
            *(void *)(v9 + 72) = *(void *)(v8 - 56);
            *double v58 = 0;
            v58[1] = 0;
            v58[2] = 0;
            BOOL v59 = *(void **)(v9 + 80);
            if (v59)
            {
              *(void *)(v9 + 88) = v59;
              operator delete(v59);
              *(void *)(v9 + 80) = 0;
              *(void *)(v9 + 88) = 0;
              *(void *)(v9 + 96) = 0;
            }
            uint64_t v60 = (void *)(v8 - 48);
            *(_OWORD *)(v9 + 80) = *(_OWORD *)(v8 - 48);
            *(void *)(v9 + 96) = *(void *)(v8 - 32);
            *uint64_t v60 = 0;
            v60[1] = 0;
            v60[2] = 0;
            unint64_t v61 = *(void **)(v9 + 104);
            if (v61)
            {
              *(void *)(v9 + 112) = v61;
              operator delete(v61);
              *(void *)(v9 + 104) = 0;
              *(void *)(v9 + 112) = 0;
              *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
            }
            uint64_t v62 = (void *)(v8 - 24);
            *(_OWORD *)(v9 + 104) = *(_OWORD *)(v8 - 24);
            *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = *(void *)(v8 - 8);
            *uint64_t v62 = 0;
            v62[1] = 0;
            v62[2] = 0;
          }
          long long v63 = v241;
          *double v55 = v240;
          *(_OWORD *)(v8 - 112) = v63;
          unint64_t v64 = v8 - 88;
          std::__tree<unsigned long>::destroy(*(void **)(v8 - 88));
          *(void *)(v8 - 96) = v242;
          uint64_t v65 = v243;
          *(void *)(v8 - 88) = v243;
          uint64_t v66 = v244;
          *(void *)(v8 - 80) = v244;
          if (v66)
          {
            v65[2] = v64;
            size_t v242 = &v243;
            v243 = 0;
            uint64_t v244 = 0;
          }
          else
          {
            *(void *)(v8 - 96) = v64;
          }
          a2 = v225;
          uint64_t v67 = *(void **)(v8 - 72);
          if (v67)
          {
            *(void *)(v8 - 64) = v67;
            operator delete(v67);
            *(void *)(v8 - 72) = 0;
            *(void *)(v8 - 64) = 0;
            *(void *)(v8 - 56) = 0;
          }
          *(_OWORD *)(v8 - 72) = v245;
          *(void *)(v8 - 56) = v246;
          long long v245 = 0uLL;
          uint64_t v246 = 0;
          int64_t v68 = *(void **)(v8 - 48);
          if (v68)
          {
            *(void *)(v8 - 40) = v68;
            operator delete(v68);
            *(void *)(v8 - 48) = 0;
            *(void *)(v8 - 40) = 0;
            *(void *)(v8 - 32) = 0;
          }
          *(_OWORD *)(v8 - 48) = v247;
          *(void *)(v8 - 32) = v248;
          long long v247 = 0uLL;
          uint64_t v248 = 0;
          int64_t v69 = *(void **)(v8 - 24);
          if (v69)
          {
            *(void *)(v8 - 16) = v69;
            operator delete(v69);
            *(void *)(v8 - 24) = 0;
            *(void *)(v8 - 16) = 0;
            *(void *)(v8 - 8) = 0;
          }
          *(_OWORD *)(v8 - 24) = v249;
          *(void *)(v8 - 8) = v250;
          long long v249 = 0uLL;
          uint64_t v250 = 0;
          if ((void)v247)
          {
            *((void *)&v247 + 1) = v247;
            operator delete((void *)v247);
          }
          if ((void)v245)
          {
            *((void *)&v245 + 1) = v245;
            operator delete((void *)v245);
          }
          std::__tree<unsigned long>::destroy(v243);
          a4 = 0;
        }
        uint64_t v14 = a3;
        long long v15 = *(_OWORD *)(v9 + 16);
        long long v240 = *(_OWORD *)v9;
        long long v241 = v15;
        uint64_t v16 = (void *)(v9 + 32);
        double v17 = (void *)(v9 + 40);
        double v18 = *(void **)(v9 + 40);
        size_t v242 = *(void ***)(v9 + 32);
        v243 = v18;
        uint64_t v244 = *(void *)(v9 + 48);
        if (v244)
        {
          void v18[2] = &v243;
          *uint64_t v16 = v17;
          void *v17 = 0;
          *(void *)(v9 + 48) = 0;
        }
        else
        {
          size_t v242 = &v243;
        }
        unint64_t v19 = v9;
        BOOL v20 = (void *)(v9 + 56);
        long long v245 = *(_OWORD *)(v9 + 56);
        uint64_t v246 = *(void *)(v9 + 72);
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        long long v21 = *(_OWORD *)(v9 + 80);
        *(void *)(v9 + 72) = 0;
        long long v247 = v21;
        uint64_t v248 = *(void *)(v9 + 96);
        *(void *)(v9 + 80) = 0;
        *(void *)(v9 + 88) = 0;
        *(void *)(v9 + 96) = 0;
        long long v249 = *(_OWORD *)(v9 + 104);
        uint64_t v250 = *(void *)(v9 + 120);
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = 0;
        do
        {
          uint64_t v22 = (long long *)v19;
          double v23 = *(double *)(v19 + 128);
          v19 += 128;
        }
        while (v23 > *(double *)&v240);
        unint64_t v24 = v225;
        if (v22 == a1)
        {
          unint64_t v24 = v225;
          do
          {
            if (v19 >= (unint64_t)v24) {
              break;
            }
            double v26 = *((double *)v24 - 16);
            v24 -= 8;
          }
          while (v26 <= *(double *)&v240);
        }
        else
        {
          do
          {
            double v25 = *((double *)v24 - 16);
            v24 -= 8;
          }
          while (v25 <= *(double *)&v240);
        }
        unint64_t v8 = v19;
        if (v19 < (unint64_t)v24)
        {
          double v27 = v24;
          do
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((long long *)v8, v27);
            do
            {
              double v28 = *(double *)(v8 + 128);
              v8 += 128;
            }
            while (v28 > *(double *)&v240);
            do
            {
              double v29 = *((double *)v27 - 16);
              v27 -= 8;
            }
            while (v29 <= *(double *)&v240);
          }
          while (v8 < (unint64_t)v27);
        }
        double v30 = (long long *)(v8 - 128);
        if ((long long *)(v8 - 128) != a1)
        {
          long long v31 = *(_OWORD *)(v8 - 112);
          *a1 = *v30;
          a1[1] = v31;
          std::__tree<unsigned long>::__move_assign(v16, (void *)(v8 - 96));
          uint64_t v32 = (void *)*((void *)a1 + 7);
          if (v32)
          {
            *((void *)a1 + 8) = v32;
            operator delete(v32);
            void *v20 = 0;
            *((void *)a1 + 8) = 0;
            *((void *)a1 + 9) = 0;
          }
          double v33 = (void *)(v8 - 72);
          *(long long *)((char *)a1 + 56) = *(_OWORD *)(v8 - 72);
          *((void *)a1 + 9) = *(void *)(v8 - 56);
          void *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          int v34 = (void *)*((void *)a1 + 10);
          if (v34)
          {
            *((void *)a1 + 11) = v34;
            operator delete(v34);
            *((void *)a1 + 10) = 0;
            *((void *)a1 + 11) = 0;
            *((void *)a1 + 12) = 0;
          }
          double v35 = (void *)(v8 - 48);
          a1[5] = *(_OWORD *)(v8 - 48);
          *((void *)a1 + 12) = *(void *)(v8 - 32);
          *double v35 = 0;
          v35[1] = 0;
          v35[2] = 0;
          unint64_t v36 = (void *)*((void *)a1 + 13);
          if (v36)
          {
            *((void *)a1 + 14) = v36;
            operator delete(v36);
            *((void *)a1 + 13) = 0;
            *((void *)a1 + 14) = 0;
            *((void *)a1 + 15) = 0;
          }
          long double v37 = (void *)(v8 - 24);
          *(long long *)((char *)a1 + 104) = *(_OWORD *)(v8 - 24);
          *((void *)a1 + 15) = *(void *)(v8 - 8);
          *long double v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
        }
        long long v38 = v241;
        *double v30 = v240;
        *(_OWORD *)(v8 - 112) = v38;
        unint64_t v39 = v8 - 88;
        std::__tree<unsigned long>::destroy(*(void **)(v8 - 88));
        *(void *)(v8 - 96) = v242;
        uint64_t v40 = v243;
        *(void *)(v8 - 88) = v243;
        uint64_t v41 = v244;
        *(void *)(v8 - 80) = v244;
        if (v41)
        {
          std::string::size_type v40[2] = v39;
          size_t v242 = &v243;
          v243 = 0;
          uint64_t v244 = 0;
        }
        else
        {
          *(void *)(v8 - 96) = v39;
        }
        a2 = v225;
        a3 = v14;
        double v42 = *(void **)(v8 - 72);
        if (v42)
        {
          *(void *)(v8 - 64) = v42;
          operator delete(v42);
          *(void *)(v8 - 72) = 0;
          *(void *)(v8 - 64) = 0;
          *(void *)(v8 - 56) = 0;
        }
        *(_OWORD *)(v8 - 72) = v245;
        *(void *)(v8 - 56) = v246;
        long long v245 = 0uLL;
        uint64_t v246 = 0;
        double v43 = *(void **)(v8 - 48);
        if (v43)
        {
          *(void *)(v8 - 40) = v43;
          operator delete(v43);
          *(void *)(v8 - 48) = 0;
          *(void *)(v8 - 40) = 0;
          *(void *)(v8 - 32) = 0;
        }
        *(_OWORD *)(v8 - 48) = v247;
        *(void *)(v8 - 32) = v248;
        long long v247 = 0uLL;
        uint64_t v248 = 0;
        double v44 = *(void **)(v8 - 24);
        if (v44)
        {
          *(void *)(v8 - 16) = v44;
          operator delete(v44);
          *(void *)(v8 - 24) = 0;
          *(void *)(v8 - 16) = 0;
          *(void *)(v8 - 8) = 0;
        }
        *(_OWORD *)(v8 - 24) = v249;
        *(void *)(v8 - 8) = v250;
        long long v249 = 0uLL;
        uint64_t v250 = 0;
        if ((void)v247)
        {
          *((void *)&v247 + 1) = v247;
          operator delete((void *)v247);
        }
        if ((void)v245)
        {
          *((void *)&v245 + 1) = v245;
          operator delete((void *)v245);
        }
        std::__tree<unsigned long>::destroy(v243);
        if (v19 >= (unint64_t)v24) {
          break;
        }
LABEL_52:
        std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *,false>(a1, v8 - 128, v14, a4 & 1);
        a4 = 0;
      }
      BOOL v45 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, (long long *)(v8 - 128));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((long long *)v8, v225))
      {
        break;
      }
      if (!v45) {
        goto LABEL_52;
      }
    }
    a2 = (long long *)(v8 - 128);
    if (!v45) {
      continue;
    }
    break;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *,nl_featurization::beam_search::BeamSequence *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 0;
    uint64_t v28 = a1;
    uint64_t v29 = a1 + 40;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a1 + v5;
      uint64_t v8 = v3 + v5;
      long long v9 = *(_OWORD *)(a1 + v5 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + v5);
      *(_OWORD *)(v8 + 16) = v9;
      if (a1 != v3)
      {
        std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(v8 + 32, *(void **)(v7 + 32), (void *)(v29 + v5));
        std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)(v8 + 56), *(char **)(v7 + 56), *(void *)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
        std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)(v8 + 80), *(char **)(v7 + 80), *(void *)(v7 + 88), (uint64_t)(*(void *)(v7 + 88) - *(void *)(v7 + 80)) >> 3);
        unint64_t v12 = *(char **)(v8 + 104);
        uint64_t v11 = (void *)(v8 + 104);
        uint64_t v10 = v12;
        unint64_t v13 = *(char **)(v7 + 104);
        uint64_t v14 = *(unsigned char **)(v7 + 112);
        uint64_t v15 = v14 - v13;
        unint64_t v16 = (v14 - v13) >> 4;
        uint64_t v17 = v11[2];
        if (v16 <= (v17 - (uint64_t)v12) >> 4)
        {
          BOOL v20 = (void **)(v6 + 112);
          uint64_t v21 = v3 + v5;
          uint64_t v22 = *(unsigned char **)(v21 + 112);
          unint64_t v23 = (v22 - v10) >> 4;
          if (v23 >= v16)
          {
            if (v14 != v13) {
              memmove(v10, v13, v15 - 7);
            }
            uint64_t v3 = a3;
          }
          else
          {
            if (v22 != v10)
            {
              memmove(v10, v13, v22 - v10 - 7);
              uint64_t v10 = *(char **)(v21 + 112);
            }
            uint64_t v3 = a3;
            unint64_t v24 = &v13[16 * v23];
            uint64_t v15 = v14 - v24;
            if (v14 != v24) {
              memmove(v10, v24, v15 - 7);
            }
          }
          uint64_t v4 = a2;
        }
        else
        {
          if (v10)
          {
            *(void *)(v3 + v5 + 112) = v10;
            operator delete(v10);
            uint64_t v17 = 0;
            *uint64_t v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          if (v15 < 0) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v17 >> 3;
          if (v17 >> 3 <= v16) {
            uint64_t v18 = (v14 - v13) >> 4;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](v11, v19);
          BOOL v20 = (void **)(v3 + v5 + 112);
          uint64_t v10 = (char *)*v20;
          if (v14 != v13) {
            memmove(*(void **)(v3 + v5 + 112), v13, v15 - 7);
          }
        }
        a1 = v28;
        void *v20 = &v10[v15];
      }
      v6 += 128;
      v5 += 128;
    }
    while (a1 + v5 != v4);
    v3 += v5;
  }
  return v3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::beam_search::BeamSequence>,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*,nl_featurization::beam_search::BeamSequence*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
      *(_OWORD *)(v8 + 16) = v10;
      std::set<unsigned long>::set[abi:ne180100](a4 + v7 + 32, (void *)(a2 + v7 + 32));
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 72) = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a4 + v7 + 56), *(const void **)(v9 + 56), *(void *)(v9 + 64), (uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3);
      uint64_t v11 = a4 + v7;
      uint64_t v12 = a4 + v7;
      *(void *)(v12 + 80) = 0;
      *(void *)(v12 + 88) = 0;
      *(void *)(a4 + v7 + 96) = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a4 + v7 + 80), *(const void **)(v9 + 80), *(void *)(v9 + 88), (uint64_t)(*(void *)(v9 + 88) - *(void *)(v9 + 80)) >> 3);
      *(void *)(v11 + 104) = 0;
      *(void *)(v11 + 112) = 0;
      unint64_t v13 = (void *)(a4 + v7 + 104);
      v13[2] = 0;
      std::vector<std::optional<unsigned long>>::__init_with_size[abi:ne180100]<std::optional<unsigned long>*,std::optional<unsigned long>*>(v13, *(const void **)(v9 + 104), *(void *)(v9 + 112), (uint64_t)(*(void *)(v9 + 112) - *(void *)(v9 + 104)) >> 4);
      v7 += 128;
    }
    while (v9 + 128 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C8F307B8(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 88) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 64) = v7;
    operator delete(v7);
  }
  std::__tree<unsigned long>::destroy(*(void **)(v2 + 40));
  while (v2 != v1)
  {
    v2 -= 128;
    std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100]((void *)v2);
  }
  _Unwind_Resume(a1);
}

void std::__tree<unsigned long>::__move_assign(void *a1, void *a2)
{
  uint64_t v4 = a1 + 1;
  std::__tree<unsigned long>::destroy((void *)a1[1]);
  *a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

void std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(long long *a1, long long *a2)
{
  long long v20 = *a1;
  long long v21 = a1[1];
  uint64_t v5 = (void **)*((void *)a1 + 4);
  uint64_t v4 = a1 + 2;
  uint64_t v6 = (void *)a1 + 5;
  uint64_t v7 = (void *)*((void *)a1 + 5);
  uint64_t v22 = v5;
  unint64_t v23 = v7;
  uint64_t v24 = *((void *)a1 + 6);
  if (v24)
  {
    void v7[2] = &v23;
    void *v4 = v6;
    void *v6 = 0;
    *((void *)a1 + 6) = 0;
  }
  else
  {
    uint64_t v22 = &v23;
  }
  *(_OWORD *)double v25 = *(long long *)((char *)a1 + 56);
  uint64_t v26 = *((void *)a1 + 9);
  *((void *)a1 + 8) = 0;
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 7) = 0;
  *(_OWORD *)std::basic_string<char16_t> __p = a1[5];
  uint64_t v28 = *((void *)a1 + 12);
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  long long v8 = *(long long *)((char *)a1 + 104);
  *((void *)a1 + 10) = 0;
  long long v29 = v8;
  uint64_t v30 = *((void *)a1 + 15);
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 14) = 0;
  *((void *)a1 + 15) = 0;
  long long v9 = a2[1];
  *a1 = *a2;
  a1[1] = v9;
  std::__tree<unsigned long>::__move_assign(v4, (void *)a2 + 4);
  long long v10 = (void **)a2 + 7;
  uint64_t v11 = (void *)*((void *)a1 + 7);
  if (v11)
  {
    *((void *)a1 + 8) = v11;
    operator delete(v11);
    *((void *)a1 + 7) = 0;
    *((void *)a1 + 8) = 0;
    *((void *)a1 + 9) = 0;
  }
  *(long long *)((char *)a1 + 56) = *(long long *)((char *)a2 + 56);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  char *v10 = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v12 = (void *)*((void *)a1 + 10);
  if (v12)
  {
    *((void *)a1 + 11) = v12;
    operator delete(v12);
    *((void *)a1 + 10) = 0;
    *((void *)a1 + 11) = 0;
    *((void *)a1 + 12) = 0;
  }
  a1[5] = a2[5];
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  unint64_t v13 = (void *)*((void *)a1 + 13);
  if (v13)
  {
    *((void *)a1 + 14) = v13;
    operator delete(v13);
    *((void *)a1 + 13) = 0;
    *((void *)a1 + 14) = 0;
    *((void *)a1 + 15) = 0;
  }
  *(long long *)((char *)a1 + 104) = *(long long *)((char *)a2 + 104);
  *((void *)a1 + 15) = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *a2 = v20;
  a2[1] = v21;
  uint64_t v14 = (uint64_t)a2 + 40;
  std::__tree<unsigned long>::destroy(*((void **)a2 + 5));
  uint64_t v15 = v23;
  *((void *)a2 + 4) = v22;
  *((void *)a2 + 5) = v15;
  uint64_t v16 = v24;
  *((void *)a2 + 6) = v24;
  if (v16)
  {
    v15[2] = v14;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    *((void *)a2 + 4) = v14;
  }
  uint64_t v17 = *v10;
  if (*v10)
  {
    *((void *)a2 + 8) = v17;
    operator delete(v17);
  }
  *(long long *)((char *)a2 + 56) = *(_OWORD *)v25;
  *((void *)a2 + 9) = v26;
  v25[1] = 0;
  uint64_t v26 = 0;
  v25[0] = 0;
  uint64_t v18 = (void *)*((void *)a2 + 10);
  if (v18)
  {
    *((void *)a2 + 11) = v18;
    operator delete(v18);
  }
  a2[5] = *(_OWORD *)__p;
  *((void *)a2 + 12) = v28;
  __p[1] = 0;
  uint64_t v28 = 0;
  __p[0] = 0;
  unint64_t v19 = (void *)*((void *)a2 + 13);
  if (v19)
  {
    *((void *)a2 + 14) = v19;
    operator delete(v19);
    unint64_t v19 = __p[0];
  }
  *(long long *)((char *)a2 + 104) = v29;
  *((void *)a2 + 15) = v30;
  uint64_t v30 = 0;
  long long v29 = 0uLL;
  if (v19)
  {
    __p[1] = v19;
    operator delete(v19);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  std::__tree<unsigned long>::destroy(v23);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(long long *a1, long long *a2, long long *a3)
{
  uint64_t v5 = (double *)a1;
  double v6 = *(double *)a2;
  double v7 = *(double *)a3;
  if (*(double *)a2 <= *(double *)a1)
  {
    if (v7 <= v6) {
      return;
    }
    std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a2, a3);
    if (*(double *)a2 <= *v5) {
      return;
    }
    a1 = (long long *)v5;
    long long v8 = a2;
  }
  else
  {
    if (v7 <= v6)
    {
      std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1, a2);
      if (*(double *)a3 <= *(double *)a2) {
        return;
      }
      a1 = a2;
    }
    long long v8 = a3;
  }
  std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1, v8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(long long *a1, long long *a2, long long *a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a2, a3);
  if (*(double *)a4 > *(double *)a3)
  {
    std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a3, a4);
    if (*(double *)a3 > *(double *)a2)
    {
      std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a2, a3);
      if (*(double *)a2 > *(double *)a1)
      {
        std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(long long *a1, long long *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 7;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((double *)a2 - 16) > *(double *)a1)
      {
        double v6 = a1;
        double v7 = a2 - 8;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      uint64_t v41 = (double *)(a1 + 16);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a1 + 16, a1 + 24);
      double v43 = *((double *)v2 - 16);
      double v42 = v2 - 8;
      if (v43 > *((double *)a1 + 48))
      {
        std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1 + 24, v42);
        if (*((double *)a1 + 48) > *v41)
        {
          std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1 + 16, a1 + 24);
          if (*v41 > *((double *)a1 + 16))
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(a1 + 8, a1 + 16);
            if (*((double *)a1 + 16) > *(double *)a1)
            {
              double v6 = a1;
              double v7 = a1 + 8;
LABEL_4:
              std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = (double *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a1 + 16);
      long long v9 = a1 + 24;
      if (a1 + 24 == v2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      double v44 = v2;
      break;
  }
  while (1)
  {
    if (*(double *)v9 > *v8)
    {
      long long v45 = *v9;
      long long v46 = v9[1];
      uint64_t v12 = (void *)v9 + 5;
      unint64_t v13 = (void *)*((void *)v9 + 5);
      double v47 = (void **)*((void *)v9 + 4);
      uint64_t v48 = v13;
      uint64_t v49 = *((void *)v9 + 6);
      if (v49)
      {
        v13[2] = &v48;
        *((void *)v9 + 4) = v12;
        void *v12 = 0;
        *((void *)v9 + 6) = 0;
      }
      else
      {
        double v47 = &v48;
      }
      *(_OWORD *)unint64_t v50 = *(long long *)((char *)v9 + 56);
      uint64_t v51 = *((void *)v9 + 9);
      *((void *)v9 + 7) = 0;
      *((void *)v9 + 8) = 0;
      *(_OWORD *)std::basic_string<char16_t> __p = v9[5];
      uint64_t v53 = *((void *)v9 + 12);
      *((void *)v9 + 9) = 0;
      *((void *)v9 + 10) = 0;
      *((void *)v9 + 11) = 0;
      *((void *)v9 + 12) = 0;
      long long v54 = *(long long *)((char *)v9 + 104);
      uint64_t v55 = *((void *)v9 + 15);
      *((void *)v9 + 14) = 0;
      *((void *)v9 + 15) = 0;
      uint64_t v14 = v10;
      *((void *)v9 + 13) = 0;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        long long v16 = *(long long *)((char *)a1 + v14 + 272);
        *((_OWORD *)v15 + 24) = *(long long *)((char *)a1 + v14 + 256);
        *((_OWORD *)v15 + 25) = v16;
        std::__tree<unsigned long>::__move_assign((long long *)((char *)a1 + v14 + 416), (long long *)((char *)a1 + v14 + 288));
        uint64_t v17 = *(void **)((char *)a1 + v14 + 440);
        if (v17)
        {
          *((void *)v15 + 56) = v17;
          operator delete(v17);
          *((void *)v15 + 57) = 0;
        }
        *(_OWORD *)(v15 + 440) = *(_OWORD *)(v15 + 312);
        *((void *)v15 + 57) = *((void *)v15 + 41);
        *((void *)v15 + 39) = 0;
        *((void *)v15 + 40) = 0;
        *((void *)v15 + 41) = 0;
        uint64_t v18 = (void *)*((void *)v15 + 58);
        if (v18)
        {
          *(void *)((char *)a1 + v14 + 472) = v18;
          operator delete(v18);
          *(void *)((char *)a1 + v14 + 480) = 0;
        }
        unint64_t v19 = v15 + 336;
        *((_OWORD *)v15 + 29) = *((_OWORD *)v15 + 21);
        long long v20 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 480) = *(void *)((char *)a1 + v14 + 352);
        void *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        long long v21 = *(void **)((char *)a1 + v14 + 488);
        if (v21)
        {
          *((void *)v20 + 62) = v21;
          operator delete(v21);
          *((void *)v20 + 63) = 0;
        }
        *(_OWORD *)(v20 + 488) = *(_OWORD *)(v20 + 360);
        *((void *)v20 + 63) = *((void *)v20 + 47);
        *((void *)v20 + 45) = 0;
        *((void *)v20 + 46) = 0;
        *((void *)v20 + 47) = 0;
        if (v14 == -256) {
          break;
        }
        uint64_t v22 = (char *)a1 + v14;
        double v23 = *(double *)((char *)a1 + v14 + 128);
        v14 -= 128;
        if (*(double *)&v45 <= v23)
        {
          uint64_t v24 = (uint64_t *)(v22 + 288);
          double v25 = v22 + 312;
          uint64_t v26 = (long long *)(v22 + 336);
          uint64_t v27 = (uint64_t)a1 + v14 + 384;
          uint64_t v28 = v22 + 360;
          goto LABEL_23;
        }
      }
      uint64_t v24 = (uint64_t *)(a1 + 2);
      double v25 = (char *)a1 + 56;
      uint64_t v26 = a1 + 5;
      uint64_t v28 = (char *)a1 + 104;
      uint64_t v27 = (uint64_t)a1;
LABEL_23:
      *(_OWORD *)uint64_t v27 = v45;
      *(_OWORD *)(v27 + 16) = v46;
      uint64_t v29 = v27 + 40;
      std::__tree<unsigned long>::destroy(*(void **)(v27 + 40));
      uint64_t v30 = v48;
      *uint64_t v24 = (uint64_t)v47;
      *(void *)(v27 + 40) = v30;
      uint64_t v31 = v49;
      *(void *)(v27 + 48) = v49;
      if (v31)
      {
        v30[2] = v29;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
      else
      {
        *uint64_t v24 = v29;
      }
      uint64_t v2 = v44;
      uint64_t v32 = *(void **)v25;
      if (*(void *)v25)
      {
        *(void *)(v27 + 64) = v32;
        operator delete(v32);
        *(void *)double v25 = 0;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
      }
      double v33 = v50[1];
      *(void **)double v25 = v50[0];
      uint64_t v34 = v51;
      *(void *)(v27 + 64) = v33;
      *(void *)(v27 + 72) = v34;
      v50[1] = 0;
      uint64_t v51 = 0;
      v50[0] = 0;
      double v35 = *(void **)v26;
      if (*(void *)v26)
      {
        *(void *)(v27 + 88) = v35;
        operator delete(v35);
        *(void *)uint64_t v26 = 0;
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = 0;
      }
      unint64_t v36 = __p[1];
      *(void **)uint64_t v26 = __p[0];
      uint64_t v37 = v53;
      *(void *)(v27 + 88) = v36;
      *(void *)(v27 + 96) = v37;
      __p[1] = 0;
      uint64_t v53 = 0;
      __p[0] = 0;
      long long v38 = *(void **)v28;
      if (*(void *)v28)
      {
        *(void *)(v27 + 112) = v38;
        operator delete(v38);
        *(void *)uint64_t v28 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        long long v38 = __p[0];
      }
      uint64_t v39 = *((void *)&v54 + 1);
      *(void *)uint64_t v28 = v54;
      uint64_t v40 = v55;
      *(void *)(v27 + 112) = v39;
      *(void *)(v27 + std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 120) = v40;
      uint64_t v55 = 0;
      long long v54 = 0uLL;
      if (v38)
      {
        __p[1] = v38;
        operator delete(v38);
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      ++v11;
      std::__tree<unsigned long>::destroy(v48);
      if (v11 == 8) {
        return v9 + 8 == v44;
      }
    }
    long long v8 = (double *)v9;
    v10 += 128;
    v9 += 8;
    if (v9 == v2) {
      return 1;
    }
  }
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = result[1];
  double v6 = a3[1];
  if (v4 <= v5)
  {
    if (v6 > v4)
    {
      *a2 = *a3;
      *a3 = v3;
      a2[1] = v6;
      a3[1] = v4;
      double v8 = a2[1];
      double v9 = result[1];
      if (v8 > v9)
      {
        double v10 = *result;
        *BOOL result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    double v7 = *result;
    if (v6 <= v4)
    {
      *BOOL result = v3;
      *a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      double v11 = a3[1];
      if (v11 <= v5) {
        return result;
      }
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v11;
    }
    else
    {
      *BOOL result = *a3;
      *a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
  }
  return result;
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(double *a1, double *a2, double *a3, double *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(a1, a2, a3);
  double v9 = a4[1];
  double v10 = a3[1];
  if (v9 > v10)
  {
    double v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    double v12 = a3[1];
    double v13 = a2[1];
    if (v12 > v13)
    {
      double v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      double v15 = a2[1];
      double v16 = a1[1];
      if (v15 > v16)
      {
        double v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = a1[1];
      if (v6 > v7)
      {
        double v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      double v18 = *(a2 - 1);
      double v19 = a1[7];
      if (v18 > v19)
      {
        uint64_t v20 = *((void *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((void *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        double v21 = a1[7];
        double v22 = a1[5];
        if (v21 > v22)
        {
          uint64_t v23 = *((void *)a1 + 4);
          uint64_t v24 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v24;
          *((void *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          double v25 = a1[3];
          if (v21 > v25)
          {
            uint64_t v26 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v24;
            *((void *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            double v27 = a1[1];
            if (v21 > v27)
            {
              double v28 = *a1;
              *(void *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      double v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_0 &,std::pair<unsigned long,double> *>(a1, a1 + 2, a1 + 4);
      double v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = v10[1];
    if (v13 > v9[1])
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        double v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

void *nl_featurization::Embedding::getCoordinates@<X0>(nl_featurization::Embedding *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a2, *(const void **)this, *((void *)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
}

uint64_t nl_featurization::Embedding::getDimension(nl_featurization::Embedding *this)
{
  return (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
}

BOOL nl_featurization::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(double **)a2;
  if (v2 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

void *nl_featurization::operator<<(void *a1, uint64_t a2)
{
  std::basic_string<char16_t> __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Embedding[", 10);
  uint64_t v3 = __p;
  uint64_t v4 = v11;
  unint64_t v5 = v11 - (unsigned char *)__p;
  unint64_t v6 = (v11 - (unsigned char *)__p) >> 3;
  if (v6 >= 3) {
    unint64_t v6 = 3;
  }
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      if (v7)
      {
        char v13 = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v13, 1);
        uint64_t v3 = __p;
        uint64_t v4 = v11;
      }
      if (v7 >= (v4 - v3) >> 3) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      std::ostream::operator<<();
      ++v7;
      uint64_t v3 = __p;
      uint64_t v4 = v11;
      unint64_t v5 = v11 - (unsigned char *)__p;
      unint64_t v8 = (v11 - (unsigned char *)__p) >> 3;
      if (v8 >= 3) {
        unint64_t v8 = 3;
      }
    }
    while (v7 < v8);
  }
  if (v5 > 0x18) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ...", 4);
  }
  char v13 = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v13, 1);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1C8F31658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *nl_featurization::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(std::basic_string<char16_t> *this, long long *a2, uint64_t a3, uint64_t *a4)
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  double v9 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v9, *((const std::basic_string<char16_t>::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  uint64_t v11 = (void *)a2 + 7;
  std::basic_string<char16_t>::size_type v12 = *((void *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = v12;
  p_std::string::size_type size = &this[2].__r_.__value_.__l.__size_;
  std::basic_string<char16_t>::size_type v14 = *((void *)a2 + 8);
  this[2].__r_.__value_.__r.__words[2] = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = p_size;
    *((void *)a2 + 6) = v11;
    *uint64_t v11 = 0;
    *((void *)a2 + 8) = 0;
  }
  else
  {
    this[2].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)p_size;
  }
  this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
  uint64_t v15 = a2 + 5;
  std::basic_string<char16_t>::size_type v16 = *((void *)a2 + 10);
  this[3].__r_.__value_.__l.__size_ = v16;
  uint64_t v17 = &this[3].__r_.__value_.__l.__size_;
  std::basic_string<char16_t>::size_type v18 = *((void *)a2 + 11);
  this[3].__r_.__value_.__r.__words[2] = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    *((void *)a2 + 9) = v15;
    *uint64_t v15 = 0;
    *((void *)a2 + 11) = 0;
  }
  else
  {
    this[3].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v17;
  }
  std::basic_string<char16_t>::size_type v19 = *(void *)a3;
  v23[0] = *(void *)(a3 + 8);
  *(void *)((char *)v23 + 7) = *(void *)(a3 + 15);
  char v20 = *(unsigned char *)(a3 + 23);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)v22, a4);
  this[4].__r_.__value_.__r.__words[0] = v19;
  this[4].__r_.__value_.__l.__size_ = v23[0];
  *(std::basic_string<char16_t>::size_type *)((char *)&this[4].__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v23 + 7);
  *((unsigned char *)&this[4].__r_.__value_.__s + 23) = v20;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)&this[5], v22);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v22);
  nl_featurization::span_matching::MatchedSpansFeaturizer::validateVocabulary((nl_featurization::span_matching::MatchedSpansFeaturizer *)this);
  return this;
}

void sub_1C8F31814(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

nl_featurization::span_matching::MatchedSpansFeaturizer *nl_featurization::span_matching::MatchedSpansFeaturizer::validateVocabulary(nl_featurization::span_matching::MatchedSpansFeaturizer *this)
{
  BOOL result = (nl_featurization::span_matching::MatchedSpansFeaturizer *)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)this + 48, (unsigned __int16 *)this + 12);
  if ((nl_featurization::span_matching::MatchedSpansFeaturizer *)((char *)this + 56) == result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label vocabulary does not contain pad token");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8F318B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nl_featurization::span_matching::MatchedSpansFeaturizer::featurize(unsigned __int16 *a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  nl_featurization::bio::BilouEncoder::encode((uint64_t)(a1 + 48), a2, a3, v6);
  nl_featurization::span_matching::MatchedSpansFeaturizer::tensorise(a1, (long long **)v6, a4);
  unint64_t v7 = v6;
  std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1C8F31930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nl_featurization::span_matching::MatchedSpansFeaturizer::tensorise(unsigned __int16 *a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    double v9 = operator new(0x10uLL);
    *double v9 = 0;
    v9[1] = 0;
    *(void *)&long long v10 = v9;
    *((void *)&v10 + 1) = v9 + 2;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
    v35.__r_.__value_.__r.__words[2] = (std::basic_string<char16_t>::size_type)(v9 + 2);
    nl_featurization::tensor::Tensor<unsigned long>::Tensor((void *)a3, (uint64_t)&v35, 0);
    uint64_t v11 = (void *)v35.__r_.__value_.__r.__words[0];
    if (!v35.__r_.__value_.__r.__words[0]) {
      return;
    }
    goto LABEL_28;
  }
  unint64_t v7 = (long long *)((char *)v4 + 72);
  if ((long long *)((char *)v4 + 72) == v5)
  {
    long long v8 = *a2;
  }
  else
  {
    long long v8 = *a2;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v8 + 7) - *((void *)v8 + 6)) >> 3) < 0xAAAAAAAAAAAAAAABLL
                                                                                              * ((uint64_t)(*((void *)v7 + 7) - *((void *)v7 + 6)) >> 3))
        long long v8 = v7;
      unint64_t v7 = (long long *)((char *)v7 + 72);
    }
    while (v7 != v5);
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v35, *(const std::basic_string<char16_t>::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v12 = *v8;
    v35.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
  }
  long long v13 = *(long long *)((char *)v8 + 24);
  *(_DWORD *)&v36[15] = *(_DWORD *)((char *)v8 + 39);
  *(_OWORD *)unint64_t v36 = v13;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v37, *((long long **)v8 + 6), *((long long **)v8 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v8 + 7) - *((void *)v8 + 6)) >> 3));
  uint64_t v15 = v37;
  uint64_t v14 = v38;
  std::basic_string<char16_t>::size_type v16 = operator new(0x10uLL);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
  double v33 = v16 + 2;
  uint64_t v34 = v16 + 2;
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  *std::basic_string<char16_t>::size_type v16 = 0x8E38E38E38E38E39 * (((char *)v5 - (char *)v4) >> 3);
  v16[1] = v17;
  std::basic_string<char16_t> __p = v16;
  uint64_t v18 = std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)(a1 + 24), a1 + 12);
  if (a1 + 28 == (unsigned __int16 *)v18)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot get value for empty optional!");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  nl_featurization::tensor::Tensor<unsigned long>::Tensor((void *)a3, (uint64_t)&__p, *(void *)(v18 + 56));
  if (__p)
  {
    double v33 = __p;
    operator delete(__p);
  }
  char v20 = *a2;
  std::basic_string<char16_t>::size_type v19 = a2[1];
  if (v19 != *a2)
  {
    unint64_t v21 = 0;
    do
    {
      uint64_t v22 = (uint64_t)v20 + 72 * v21;
      uint64_t v25 = *(void *)(v22 + 48);
      uint64_t v24 = (uint64_t *)(v22 + 48);
      uint64_t v23 = v25;
      if (v24[1] != v25)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          uint64_t v28 = nl_featurization::vocabulary::Vocabulary::numericalizeToken(a1, v23 + v26);
          uint64_t v29 = (uint64_t *)operator new(0x10uLL);
          *uint64_t v29 = v21;
          v29[1] = v27;
          *(void *)(*(void *)(a3 + 24)
                    + 8
                    * nl_featurization::tensor::Tensor<unsigned long>::computeAddress(*(uint64_t **)a3, *(void **)(a3 + 8), v29, (uint64_t)(v29 + 2))) = v28;
          operator delete(v29);
          ++v27;
          uint64_t v23 = *v24;
          v26 += 24;
        }
        while (v27 < 0xAAAAAAAAAAAAAAABLL * ((v24[1] - *v24) >> 3));
        char v20 = *a2;
        std::basic_string<char16_t>::size_type v19 = a2[1];
      }
      ++v21;
    }
    while (v21 < 0x8E38E38E38E38E39 * (((char *)v19 - (char *)v20) >> 3));
  }
  uint64_t v40 = (void **)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v11 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v11);
  }
}

void sub_1C8F31C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  operator delete(v21);
  nl_featurization::nlv4_types::Token::~Token(&__p);
  _Unwind_Resume(a1);
}

void *nl_featurization::tensor::Tensor<unsigned long>::Tensor(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = a1 + 3;
  unint64_t v5 = (uint64_t *)*a1;
  unint64_t v6 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 == v6)
  {
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v5++;
      v7 *= v8;
    }
    while (v5 != v6);
  }
  std::vector<unsigned long>::vector(v4, v7, &v10);
  return a1;
}

void sub_1C8F31D88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_5507()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_3_5508()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_4_5509()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_5_5510()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_6_5511()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_7_5512()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_8_5513()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_9_5514()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_10_5515()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_11_5516()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_12_5517()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_13_5518()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_14_5519()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_15_5520()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_16_5521()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_17_5522()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_18_5523()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_19_5524()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_20_5525()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_21_5526()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_22_5527()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_23_5528()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_24_5529()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_25_5530()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_26_5531()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_27_5532()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_28_5533()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_29_5534()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_30_5535()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_31_5536()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_32_5537()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_33_5538()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_34_5539()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_35_5540()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_36_5541()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_37_5542()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_38_5543()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_39_5544()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_40_5545()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_41_5546()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_42_5547()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

uint64_t DDFastIntegerExtraction()
{
  return MEMORY[0x1F4117150]();
}

uint64_t DDResultExtractGregorianYear()
{
  return MEMORY[0x1F4117200]();
}

uint64_t DDResultGetRange()
{
  return MEMORY[0x1F4117248]();
}

uint64_t DDResultGetSubResults()
{
  return MEMORY[0x1F4117268]();
}

uint64_t DDResultGetSubresultWithType()
{
  return MEMORY[0x1F4117270]();
}

uint64_t DDResultGetType()
{
  return MEMORY[0x1F4117278]();
}

uint64_t DDResultGetValue()
{
  return MEMORY[0x1F4117280]();
}

uint64_t DDResultHasType()
{
  return MEMORY[0x1F4117290]();
}

uint64_t DDScannerCopyResultsWithOptions()
{
  return MEMORY[0x1F4117318]();
}

uint64_t DDScannerCreateWithCacheFile()
{
  return MEMORY[0x1F4117328]();
}

uint64_t DDScannerScanString()
{
  return MEMORY[0x1F4117350]();
}

uint64_t DDScannerSetLocale()
{
  return MEMORY[0x1F4117368]();
}

uint64_t DDScannerSetOptions()
{
  return MEMORY[0x1F4117370]();
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t siri_nlu_types::ssu_compression_utilities::decompressFromCompressedSSUFilePath(siri_nlu_types::ssu_compression_utilities *this, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3)
{
  return MEMORY[0x1F41554F0](this, a2, a3);
}

uint64_t sirinluexternal::UserAccepted::makeReference(sirinluexternal::UserAccepted *this)
{
  return MEMORY[0x1F4155518](this);
}

uint64_t sirinluexternal::UserRejected::makeReference(sirinluexternal::UserRejected *this)
{
  return MEMORY[0x1F4155520](this);
}

uint64_t sirinluexternal::UserCancelled::makeReference(sirinluexternal::UserCancelled *this)
{
  return MEMORY[0x1F4155528](this);
}

uint64_t sirinluexternal::UserDialogAct::makeAccepted(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155530](this);
}

uint64_t sirinluexternal::UserDialogAct::makeRejected(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155538](this);
}

uint64_t sirinluexternal::UserDialogAct::makeCancelled(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155540](this);
}

uint64_t sirinluexternal::UserDialogAct::makeDelegated(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155548](this);
}

uint64_t sirinluexternal::UserDialogAct::makeAcknowledged(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155550](this);
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToPause(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155558](this);
}

uint64_t sirinluexternal::UserDialogAct::makeUserStatedTask(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155560](this);
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToRepeat(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155568](this);
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToProceed(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155570](this);
}

uint64_t sirinluexternal::UserDialogAct::UserDialogAct(sirinluexternal::UserDialogAct *this, const sirinluexternal::UserDialogAct *a2)
{
  return MEMORY[0x1F4155578](this, a2);
}

uint64_t sirinluexternal::UserDialogAct::UserDialogAct(sirinluexternal::UserDialogAct *this)
{
  return MEMORY[0x1F4155580](this);
}

uint64_t sirinluexternal::UserStatedTask::makeTask(sirinluexternal::UserStatedTask *this)
{
  return MEMORY[0x1F41555D0](this);
}

uint64_t sirinluexternal::LegacyNLContext::LegacyNLContext()
{
  return MEMORY[0x1F41555F8]();
}

{
  return MEMORY[0x1F4155600]();
}

void sirinluexternal::LegacyNLContext::~LegacyNLContext(sirinluexternal::LegacyNLContext *this)
{
}

uint64_t sirinluexternal::LegacyNLContext::operator=()
{
  return MEMORY[0x1F4155610]();
}

uint64_t sirinluexternal::SystemDialogAct::SystemDialogAct()
{
  return MEMORY[0x1F4155618]();
}

uint64_t sirinluexternal::UserAcknowledged::makeReference(sirinluexternal::UserAcknowledged *this)
{
  return MEMORY[0x1F4155620](this);
}

uint64_t sirinluexternal::UserAcknowledged::makeSystemDialogActId(sirinluexternal::UserAcknowledged *this)
{
  return MEMORY[0x1F4155628](this);
}

uint64_t sirinluexternal::UserWantedToPause::makeReference(sirinluexternal::UserWantedToPause *this)
{
  return MEMORY[0x1F4155630](this);
}

uint64_t sirinluexternal::UserWantedToRepeat::makeReference(sirinluexternal::UserWantedToRepeat *this)
{
  return MEMORY[0x1F4155638](this);
}

uint64_t sirinluexternal::UserWantedToRepeat::makeSystemDialogActId(sirinluexternal::UserWantedToRepeat *this)
{
  return MEMORY[0x1F4155640](this);
}

uint64_t sirinluexternal::UserWantedToProceed::makeReference(sirinluexternal::UserWantedToProceed *this)
{
  return MEMORY[0x1F4155660](this);
}

uint64_t sirinluexternal::SystemDialogActGroup::makeSystemDialogAct(sirinluexternal::SystemDialogActGroup *this)
{
  return MEMORY[0x1F4155688](this);
}

uint64_t sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
  return MEMORY[0x1F4155690](this);
}

void sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
}

uint64_t sirinluexternal::SystemDialogActGroup::operator=()
{
  return MEMORY[0x1F41556A0]();
}

uint64_t sirinluexternal::UUID::UUID(sirinluexternal::UUID *this)
{
  return MEMORY[0x1F41556B0](this);
}

uint64_t sirinluexternal::UsoGraph::UsoGraph(sirinluexternal::UsoGraph *this, const UsoGraph *a2)
{
  return MEMORY[0x1F41556B8](this, a2);
}

uint64_t sirinluexternal::UsoGraph::UsoGraph(sirinluexternal::UsoGraph *this)
{
  return MEMORY[0x1F41556C0](this);
}

void sirinluexternal::UsoGraph::~UsoGraph(sirinluexternal::UsoGraph *this)
{
}

uint64_t sirinluexternal::NLContext::NLContext()
{
  return MEMORY[0x1F41556D0]();
}

{
  return MEMORY[0x1F41556D8]();
}

void sirinluexternal::NLContext::~NLContext(sirinluexternal::NLContext *this)
{
}

uint64_t sirinluexternal::NLContext::operator=()
{
  return MEMORY[0x1F41556E8]();
}

uint64_t sirinluexternal::RequestID::RequestID()
{
  return MEMORY[0x1F41556F0]();
}

void sirinluexternal::RequestID::~RequestID(sirinluexternal::RequestID *this)
{
}

uint64_t sirinluexternal::UserParse::makeParser(sirinluexternal::UserParse *this)
{
  return MEMORY[0x1F4155700](this);
}

uint64_t sirinluexternal::UserParse::makeIdA(sirinluexternal::UserParse *this)
{
  return MEMORY[0x1F4155708](this);
}

uint64_t sirinluexternal::UserParse::UserParse()
{
  return MEMORY[0x1F4155710]();
}

uint64_t sirinluexternal::UserParse::UserParse(sirinluexternal::UserParse *this, const sirinluexternal::UserParse *a2)
{
  return MEMORY[0x1F4155718](this, a2);
}

uint64_t sirinluexternal::UserParse::UserParse(sirinluexternal::UserParse *this)
{
  return MEMORY[0x1F4155720](this);
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan()
{
  return MEMORY[0x1F4155730]();
}

{
  return MEMORY[0x1F4155738]();
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  return MEMORY[0x1F4155740](this);
}

void sirinluinternal::MatchingSpan::~MatchingSpan(sirinluinternal::MatchingSpan *this)
{
}

uint64_t sirinluinternal::MatchingSpan::operator=()
{
  return MEMORY[0x1F4155750]();
}

{
  return MEMORY[0x1F4155758]();
}

uint64_t sirinluinternal::SubwordToken::SubwordToken()
{
  return MEMORY[0x1F4155760]();
}

uint64_t sirinluinternal::SubwordToken::SubwordToken(sirinluinternal::SubwordToken *this)
{
  return MEMORY[0x1F4155768](this);
}

void sirinluinternal::SubwordToken::~SubwordToken(sirinluinternal::SubwordToken *this)
{
}

uint64_t sirinluinternal::SubwordTokenChain::SubwordTokenChain(sirinluinternal::SubwordTokenChain *this, const SubwordTokenChain *a2)
{
  return MEMORY[0x1F4155788](this, a2);
}

uint64_t sirinluinternal::SubwordTokenChain::SubwordTokenChain(sirinluinternal::SubwordTokenChain *this)
{
  return MEMORY[0x1F4155790](this);
}

void sirinluinternal::SubwordTokenChain::~SubwordTokenChain(sirinluinternal::SubwordTokenChain *this)
{
}

uint64_t sirinluinternal::SubwordTokenChain::operator=()
{
  return MEMORY[0x1F41557A0]();
}

{
  return MEMORY[0x1F41557A8]();
}

uint64_t sirinluinternal::swap(sirinluinternal *this, sirinluinternal::MatchingSpan *a2, sirinluinternal::MatchingSpan *a3)
{
  return MEMORY[0x1F41557C0](this, a2, a3);
}

uint64_t sirinluinternal::Token::Token(sirinluinternal::Token *this, const Token *a2)
{
  return MEMORY[0x1F41557C8](this, a2);
}

void sirinluinternal::Token::~Token(sirinluinternal::Token *this)
{
}

uint64_t sirinluinternalssu::SSUResponse::SSUResponse(sirinluinternalssu::SSUResponse *this)
{
  return MEMORY[0x1F41557D8](this);
}

uint64_t sirinluinternalssu::SSUEncodingResult::SSUEncodingResult(sirinluinternalssu::SSUEncodingResult *this)
{
  return MEMORY[0x1F41557E0](this);
}

void sirinluinternalssu::SSUEncodingResult::~SSUEncodingResult(sirinluinternalssu::SSUEncodingResult *this)
{
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis()
{
  return MEMORY[0x1F41557F0]();
}

{
  return MEMORY[0x1F41557F8]();
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(sirinluinternalitfm::ITFMHypothesis *this)
{
  return MEMORY[0x1F4155800](this);
}

void sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis(sirinluinternalitfm::ITFMHypothesis *this)
{
}

uint64_t sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this)
{
  return MEMORY[0x1F4155810](this);
}

uint64_t sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse()
{
  return MEMORY[0x1F4155818]();
}

uint64_t sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse(sirinluinternalitfm::ITFMParserResponse *this, const ITFMParserResponse *a2)
{
  return MEMORY[0x1F4155820](this, a2);
}

uint64_t sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse(sirinluinternalitfm::ITFMParserResponse *this)
{
  return MEMORY[0x1F4155828](this);
}

void sirinluinternalitfm::ITFMParserResponse::~ITFMParserResponse(sirinluinternalitfm::ITFMParserResponse *this)
{
}

uint64_t sirinluinternalitfm::ITFMParserResponse::operator=()
{
  return MEMORY[0x1F4155838]();
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse(sirinluinternalnlv4_parser::NLv4ParserResponse *this)
{
  return MEMORY[0x1F4155840](this);
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41474F0](this, a2);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1F4147578](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::makeVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  return MEMORY[0x1F4155890](this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  return MEMORY[0x1F4155898](this);
}

void sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(sirinluinternalsnlp_intermediate::LinearizedTensor *this)
{
  return MEMORY[0x1F41558A8](this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::makeVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  return MEMORY[0x1F41558B0](this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  return MEMORY[0x1F41558B8](this);
}

void sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion()
{
  return MEMORY[0x1F41558C8]();
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
  return MEMORY[0x1F41558D0](this);
}

void sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules()
{
  return MEMORY[0x1F41558E0]();
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
  return MEMORY[0x1F41558E8](this);
}

void sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::~SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::makeTensor(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  return MEMORY[0x1F41558F8](this);
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  return MEMORY[0x1F4155900](this);
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::makeTensor(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155908](this);
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155910](this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::makeResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  return MEMORY[0x1F4155918](this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  return MEMORY[0x1F4155920](this);
}

void sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::makeResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  return MEMORY[0x1F4155930](this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  return MEMORY[0x1F4155938](this);
}

void sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::makeRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  return MEMORY[0x1F4155948](this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  return MEMORY[0x1F4155950](this);
}

void sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::makeRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  return MEMORY[0x1F4155960](this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  return MEMORY[0x1F4155968](this);
}

void sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::makeResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155978](this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155980](this);
}

void sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::makeResponse(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155990](this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this)
{
  return MEMORY[0x1F4155998](this);
}

void sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::~NLv4ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this)
{
}

uint64_t E5RT::E5Compiler::GetCompiler(E5RT::E5Compiler *this)
{
  return MEMORY[0x1F4117D28](this);
}

uint64_t E5RT::E5Compiler::Compile()
{
  return MEMORY[0x1F4117D40]();
}

uint64_t E5RT::BufferObject::AllocMemory()
{
  return MEMORY[0x1F4117D48]();
}

uint64_t E5RT::BufferObject::GetDataSpan(E5RT::BufferObject *this)
{
  return MEMORY[0x1F4117D50](this);
}

uint64_t E5RT::MemoryObject::TryAsBuffer(E5RT::MemoryObject *this)
{
  return MEMORY[0x1F4117D58](this);
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return MEMORY[0x1F4117D68](this);
}

uint64_t E5RT::TensorDataType::TensorDataType()
{
  return MEMORY[0x1F4117D70]();
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
}

uint64_t E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x1F4117D80](this);
}

uint64_t E5RT::ExecutionStream::EncodeOperation()
{
  return MEMORY[0x1F4117D88]();
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this)
{
  return MEMORY[0x1F4117D90](this);
}

uint64_t E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x1F4117D98](this);
}

uint64_t E5RT::TensorDescriptor::CreateTensorDesc()
{
  return MEMORY[0x1F4117DA0]();
}

uint64_t E5RT::E5CompilerOptions::SetForceRecompilation(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x1F4117DB0](this);
}

uint64_t E5RT::E5CompilerOptions::SetForceFetchFromCache(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x1F4117DB8](this);
}

uint64_t E5RT::E5CompilerOptions::SetPreferredCpuBackend()
{
  return MEMORY[0x1F4117DC0]();
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed()
{
  return MEMORY[0x1F4117DC8]();
}

uint64_t E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x1F4117DD0](this);
}

uint64_t E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x1F4117DD8](this);
}

uint64_t E5RT::ExecutionStreamOperation::ReshapeOperation()
{
  return MEMORY[0x1F4117E10]();
}

uint64_t E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp()
{
  return MEMORY[0x1F4117E18]();
}

{
  return MEMORY[0x1F4117E20]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::Create()
{
  return MEMORY[0x1F4117E30]();
}

uint64_t E5RT::IOPort::GetMemoryObject(E5RT::IOPort *this)
{
  return MEMORY[0x1F4117E38](this);
}

uint64_t E5RT::IOPort::BindMemoryObject()
{
  return MEMORY[0x1F4117E40]();
}

uint64_t siri::ontology::UsoGraphNode::setSuccessor()
{
  return MEMORY[0x1F41576C8]();
}

uint64_t siri::ontology::UsoEntityNode::addIdentifier()
{
  return MEMORY[0x1F41576D8]();
}

{
  return MEMORY[0x1F41576E0]();
}

uint64_t siri::ontology::UsoEntityNode::addUtteranceAlignment()
{
  return MEMORY[0x1F41576E8]();
}

{
  return MEMORY[0x1F41576F8]();
}

uint64_t siri::ontology::UsoVocabManager::createCustomEdgeName()
{
  return MEMORY[0x1F4157710]();
}

uint64_t siri::ontology::UsoVocabManager::createCustomVerbName()
{
  return MEMORY[0x1F4157718]();
}

uint64_t siri::ontology::UsoVocabManager::createCustomEntityName()
{
  return MEMORY[0x1F4157720]();
}

uint64_t siri::ontology::UsoGraphProtoReader::fromProtobuf(siri::ontology::UsoGraphProtoReader *this, const sirinluexternal::UsoGraph *a2)
{
  return MEMORY[0x1F41559A8](this, a2);
}

uint64_t siri::ontology::UsoGraphProtoReader::fromProtobuf(siri::ontology::UsoGraphProtoReader *this, const sirinluexternal::UsoGraph *a2, UsoGraph *a3)
{
  return MEMORY[0x1F41559B0](this, a2, a3);
}

uint64_t siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter *this, const UsoGraph *a2)
{
  return MEMORY[0x1F41559B8](this, a2);
}

uint64_t siri::ontology::UsoGraphProtoWriter::toProtobuf()
{
  return MEMORY[0x1F41559C0]();
}

uint64_t siri::ontology::getSharedUsoVocabManager(siri::ontology *this)
{
  return MEMORY[0x1F4157738](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_at(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157750](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Date(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157758](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157760](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_end(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157768](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Agent(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157770](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Group(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157780](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_date(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577A0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_hour(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577A8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_name(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577B0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_task(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577B8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_time(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577C0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_unit(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577D0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_year(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577D8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577E0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Person(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577E8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_label(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577F8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_start(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157808](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_value(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157810](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Integer(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157818](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_entity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157828](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_minute(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157830](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_second(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157838](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTime(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157848](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Duration(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157850](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157858](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157860](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_payload(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157878](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157880](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DayOfWeek(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157888](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time_Noon(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157898](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_meridiem(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578A8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_appEntity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578D0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_dayOfWeek(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578D8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_direction(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578E0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_qualifier(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578E8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_reference(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578F0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem_AM(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578F8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem_PM(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157900](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157908](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneNumber(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157910](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_components(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157918](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_dayOfMonth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157920](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_weekOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157930](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTime_Now(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157940](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157948](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157950](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Day(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157968](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommand(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157970](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157978](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_occurringIn(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157980](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_offsetValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157988](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_stringValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157990](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579A0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MixedFraction(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579B8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Hour(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579C8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Week(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579D0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Year(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579D8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time_Midnight(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579E0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_definedValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579E8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_integerValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579F0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ContactAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579F8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A08](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Month(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A10](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDirection(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A38](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A40](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time24HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A48](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A50](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_Second(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A58](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_numeratorValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A60](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_offsetReference(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A90](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_usoListPosition(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A98](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DurationComponent(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AA8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Last(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AB0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Next(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AB8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AD0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_denominatorValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AD8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AE0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157AF8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_First(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B00](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Ninth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B08](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B10](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Tenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B18](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Third(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B20](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B48](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B50](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Second(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B58](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B80](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B88](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B90](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Current(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BB8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventh(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BC0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Twelfth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BC8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BF8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Eleventh(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C28](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Previous(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C30](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C40](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_SeasonOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C48](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C50](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C60](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C68](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Twentieth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C70](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C78](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit_QuarterOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157C80](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CA0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CA8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Nineteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CB0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Thirteenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CB8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventeenth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CD0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFifth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CD8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFirst(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CE0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyThird(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CE8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_setNumber(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CF0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFourth(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157CF8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentySecond(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D00](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D08](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_decreaseBy(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D10](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_increaseBy(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D18](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::ReferenceVoiceCommandPayload_execute(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D28](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_RestOf(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D30](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_StartOf(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D38](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_MiddleOf(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D40](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_EarlierPartOf(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D48](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Root(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D50](this);
}

uint64_t siri::ontology::UsoGraph::createIntNode()
{
  return MEMORY[0x1F4157D58]();
}

uint64_t siri::ontology::UsoGraph::createTaskNode()
{
  return MEMORY[0x1F4157D60]();
}

uint64_t siri::ontology::UsoGraph::createEntityNode()
{
  return MEMORY[0x1F4157D68]();
}

uint64_t siri::ontology::UsoGraph::createStringNode()
{
  return MEMORY[0x1F4157D70]();
}

uint64_t siri::ontology::UsoGraph::createOperatorNode()
{
  return MEMORY[0x1F4157D78]();
}

uint64_t siri::ontology::UsoGraph::UsoGraph()
{
  return MEMORY[0x1F4157D80]();
}

{
  return MEMORY[0x1F4157D88]();
}

void siri::ontology::UsoGraph::~UsoGraph(siri::ontology::UsoGraph *this)
{
}

uint64_t siri::ontology::operator==()
{
  return MEMORY[0x1F4157D98]();
}

uint64_t siri::ontology::operator!=()
{
  return MEMORY[0x1F4157DA0]();
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::init()
{
  while (1)
    ;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::save_override()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::init()
{
  while (1)
    ;
}

void boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::save_binary()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::put()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::init()
{
  while (1)
    ;
}

void boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load()
{
  while (1)
    ;
}

{
  while (1)
    ;
}

void boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::basic_binary_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::init()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::basic_binary_oprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive()
{
  while (1)
    ;
}

uint64_t morphun::util::StringUtils::to_string()
{
  return MEMORY[0x1F4180EE8]();
}

uint64_t sirinluinternal::SubwordTokenChain::writeTo(sirinluinternal::SubwordTokenChain *this, PB::Writer *a2)
{
  return MEMORY[0x1F41559D8](this, a2);
}

uint64_t sirinluinternalitfm::ITFMParserResponse::writeTo(sirinluinternalitfm::ITFMParserResponse *this, PB::Writer *a2)
{
  return MEMORY[0x1F41559E0](this, a2);
}

uint64_t E5RT::TensorDataType::GetComponentPack(E5RT::TensorDataType *this)
{
  return MEMORY[0x1F4117F10](this);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return MEMORY[0x1F4117F18](this);
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x1F4117F38](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x1F4117F40](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x1F4117F48](this);
}

uint64_t E5RT::TensorDescriptor::GetRank(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x1F4117F58](this);
}

uint64_t E5RT::TensorDescriptor::GetSize(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x1F4117F60](this);
}

uint64_t E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x1F4117F68](this);
}

uint64_t E5RT::OperandDescriptor::TryAsTensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x1F4117F78](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x1F4117F88](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x1F4117F90](this);
}

uint64_t E5RT::IOPort::GetPortDescriptor(E5RT::IOPort *this)
{
  return MEMORY[0x1F4117F98](this);
}

uint64_t E5RT::Status::GetErrorCode(E5RT::Status *this)
{
  return MEMORY[0x1F4117FA8](this);
}

uint64_t E5RT::E5RTError::GetStatus(E5RT::E5RTError *this)
{
  return MEMORY[0x1F4117FB8](this);
}

uint64_t siri::ontology::UsoEntityNode::getIdentifiers(siri::ontology::UsoEntityNode *this)
{
  return MEMORY[0x1F4157DB0](this);
}

uint64_t siri::ontology::UsoEntityNode::getUtteranceAlignment(siri::ontology::UsoEntityNode *this)
{
  return MEMORY[0x1F4157DB8](this);
}

uint64_t siri::ontology::UsoVocabManager::getEdgeName()
{
  return MEMORY[0x1F4157DD0]();
}

uint64_t siri::ontology::UsoVocabManager::getNodeName()
{
  return MEMORY[0x1F4157DE0]();
}

uint64_t siri::ontology::UsoVocabManager::getVerbName()
{
  return MEMORY[0x1F4157DF0]();
}

uint64_t siri::ontology::UsoUtteranceAlignment::getSpans(siri::ontology::UsoUtteranceAlignment *this)
{
  return MEMORY[0x1F4157E00](this);
}

uint64_t siri::ontology::UsoGraph::prettyPrint()
{
  return MEMORY[0x1F4157E08]();
}

uint64_t siri::ontology::UsoGraph::prettyPrint(siri::ontology::UsoGraph *this)
{
  return MEMORY[0x1F4157E10](this);
}

uint64_t siri::ontology::UsoGraph::getSuccessors(siri::ontology::UsoGraph *this, const UsoGraphNode *a2)
{
  return MEMORY[0x1F4157E18](this, a2);
}

uint64_t siri::ontology::UsoGraph::getSuccessors()
{
  return MEMORY[0x1F4157E20]();
}

uint64_t siri::ontology::UsoGraph::deepCopyToGraph(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, siri::ontology::UsoGraph *a3)
{
  return MEMORY[0x1F4157E28](this, a2, a3);
}

uint64_t siri::ontology::UsoGraph::getSuccessorsWithEdges(siri::ontology::UsoGraph *this, const UsoGraphNode *a2)
{
  return MEMORY[0x1F4157E30](this, a2);
}

uint64_t siri::ontology::UsoGraph::getPredecessorsWithEdges(siri::ontology::UsoGraph *this, const UsoGraphNode *a2)
{
  return MEMORY[0x1F4157E38](this, a2);
}

uint64_t siri::ontology::UsoGraph::getNodes(siri::ontology::UsoGraph *this)
{
  return MEMORY[0x1F4157E48](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1F417E3B0](this);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::recursive_directory_iterator::__dereference(const std::__fs::filesystem::recursive_directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1F417E3B8](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x1F417E3F8](this, a2.__data_, a2.__size_);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E450](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x1F417E4F0](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1F417E758]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1F417E760]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::sync()
{
  return MEMORY[0x1F417E770]();
}

uint64_t std::istream::ignore()
{
  return MEMORY[0x1F417E798]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7C8]();
}

{
  return MEMORY[0x1F417E7D8]();
}

{
  return MEMORY[0x1F417E7E0]();
}

{
  return MEMORY[0x1F417E7E8]();
}

{
  return MEMORY[0x1F417E7F0]();
}

{
  return MEMORY[0x1F417E7F8]();
}

{
  return MEMORY[0x1F417E800]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1F417E9D0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1F417EB10](a1, __ec);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x1F417EB58](a1, a2);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB70](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB78](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x1F417EB80](a1, a2);
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl std::__fs::filesystem::recursive_directory_iterator::__increment(std::__fs::filesystem::recursive_directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::recursive_directory_iterator *)MEMORY[0x1F417EB90](this, __ec);
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl std::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::__fs::filesystem::recursive_directory_iterator *this, const std::__fs::filesystem::path *__p, std::__fs::filesystem::directory_options __opt, std::error_code *__ec)
{
  return (std::__fs::filesystem::recursive_directory_iterator *)MEMORY[0x1F417EB98](this, __p, __opt, __ec);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1F417EBB8](a1, __ec);
}

void std::__fs::filesystem::__rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1F417EBC8](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EC20](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<char,char> &,char *>()
{
  return MEMORY[0x1F417EC30]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1F417EC68]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

void std::locale::__install_ctor(std::locale *this, const std::locale *a2, std::locale::facet *a3, uint64_t a4)
{
}

uint64_t std::locale::id::__get(std::locale::id *this)
{
  return MEMORY[0x1F417ECC8](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1F417ECF8](this, a2);
}

void std::codecvt<char,char,__mbstate_t>::~codecvt(std::codecvt<char, char, mbstate_t> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x1F417EDB8](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1F417EE68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x1F417EF20]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

void cblas_sgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1F4118628]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1F4118638]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_get_input_blob_name()
{
  return MEMORY[0x1F41186B8]();
}

uint64_t espresso_get_output_blob_name()
{
  return MEMORY[0x1F41186D0]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank()
{
  return MEMORY[0x1F4118748]();
}

uint64_t espresso_network_query_blob_shape()
{
  return MEMORY[0x1F4118798]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

long double expm1(long double __x)
{
  MEMORY[0x1F40CC000](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1F40CC858]();
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x1F40CC898](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int openat_authenticated_np(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x1F40CD108](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1F417F728](*(void *)&code);
}

UBool u_isspace(UChar32 c)
{
  return MEMORY[0x1F417F7E8](*(void *)&c);
}

int32_t u_strCaseCompare(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F818](s1, *(void *)&length1, s2, *(void *)&length2, *(void *)&options, pErrorCode);
}

int32_t u_strFoldCase(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F828](dest, *(void *)&destCapacity, src, *(void *)&srcLength, *(void *)&options, pErrorCode);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x1F417F880](dst, src);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x1F417F890](s);
}

UChar *__cdecl u_strncpy(UChar *dst, const UChar *src, int32_t n)
{
  return (UChar *)MEMORY[0x1F417F898](dst, src, *(void *)&n);
}

UChar *__cdecl u_strtok_r(UChar *src, const UChar *delim, UChar **saveState)
{
  return (UChar *)MEMORY[0x1F417F8A0](src, delim, saveState);
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1F4180230]();
}

uint64_t unorm2_getNFDInstance()
{
  return MEMORY[0x1F4180238]();
}

uint64_t unorm2_getNFKCInstance()
{
  return MEMORY[0x1F4180240]();
}

uint64_t unorm2_getNFKDInstance()
{
  return MEMORY[0x1F4180248]();
}

uint64_t unorm2_normalize()
{
  return MEMORY[0x1F4180258]();
}

void uregex_close(URegularExpression *regexp)
{
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1F4180478](regexp, *(void *)&startIndex, status);
}

int32_t uregex_group(URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)
{
  return MEMORY[0x1F4180488](regexp, *(void *)&groupNum, dest, *(void *)&destCapacity, status);
}

URegularExpression *__cdecl uregex_openC(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1F41804C0](pattern, *(void *)&flags, pe, status);
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x1F40CE818](a1);
}