uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this)
{
  return 0;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this)
{
  return 1;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getModuleNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(a1 + 432, a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::forward(E5RT::ExecutionStreamOperation **this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Executing non-reshapable E5-ML inference.", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)buf, a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this + 54);
  (*((void (**)(E5RT::ExecutionStreamOperation **, uint8_t *))*this + 21))(this, buf);
  v5 = (std::__shared_weak_count *)this[77];
  v8 = this[76];
  v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[57]);
  E5RT::ExecutionStream::ResetStream(this[57]);
  (*((void (**)(E5RT::ExecutionStreamOperation **))*this + 22))(this);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this + 54);
  v6 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "Success Executing non-reshapable E5-ML inference.", v7, 2u);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v17);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v15);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    v11 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C8E22878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(v13);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&a13);
  _Unwind_Resume(a1);
}

nlv4_inference_orchestrator::inference_engine::BertModuleInputType *nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType(nlv4_inference_orchestrator::inference_engine::BertModuleInputType *this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 48, (uint64_t)a2 + 48);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 104, (uint64_t)a2 + 104);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 216, (uint64_t)a2 + 216);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 272, (uint64_t)a2 + 272);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_1C8E22984(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v6);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v5);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v4);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v3);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v2);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C8E229D8()
{
}

void sub_1C8E229E0()
{
}

void sub_1C8E229E8()
{
  v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C8E229D0);
}

void nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *this)
{
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 104);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType(nlv4_inference_orchestrator::inference_engine::BertModuleInputType *this)
{
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 328);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 272);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 216);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 160);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 104);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertE5MLModule::BertE5MLModule(nlv4_inference_orchestrator::inference_engine::BertModule *a1, char *a2, uint64_t a3)
{
  int v10 = 2;
  uint64_t v6 = (unsigned __int8 *)nlv4_inference_orchestrator::inference_engine::BertModule::BertModule(a1) + 432;
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)v6, a2, a3, &v10, v6, v8);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  *(void *)a1 = &unk_1F235EE30;
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 98, "hidden_size");
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 101, "position_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 104, "seq_len");
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 107, "token_type_ids");
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 110, "exclude_special_tokens_mask");
  nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput(a1);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)v6);
  return a1;
}

void sub_1C8E22BE0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 879) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 855) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 831) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 807) < 0) {
    operator delete(*v3);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule(v2);
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule((void **)v1);
  _Unwind_Resume(a1);
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertModule::BertModule(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  *(void *)this = &unk_1F235ED60;
  *((_DWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 5, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 8, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 11, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 14, "max_seq_length");
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  uint64_t v2 = operator new(0x18uLL);
  *((void *)this + 18) = v2 + 3;
  *((void *)this + 19) = v2 + 3;
  v2[2] = 192;
  *(_OWORD *)uint64_t v2 = xmmword_1C8F38828;
  *((void *)this + 17) = v2;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 20, "bert_embeddings_requires_subword_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 23, "bert/embeddings/requires_subword_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 26, "feature_pooling_mask");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 29, "bert_feature_extraction_output");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 32, "bert/feature_extraction_output");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 35, "bert_feature_extraction_output_subword");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 38, "bert/feature_extraction_output_subword");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 41, "bert_sentence_features");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 44, "bert/sentence_features");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 47, "input_ids");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 50, "input_mask");
  *((_WORD *)this + 212) = 0;
  return this;
}

void sub_1C8E22E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  if (*(char *)(v16 + 399) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v16 + 375) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v16 + 351) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v16 + 327) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v16 + 303) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v16 + 279) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v16 + 255) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v16 + 231) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v16 + 207) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v16 + 183) < 0) {
    operator delete(*a11);
  }
  v26 = *v24;
  if (*v24)
  {
    *(void *)(v16 + 144) = v26;
    operator delete(v26);
  }
  if (*(char *)(v16 + 135) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v16 + 111) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v16 + 87) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v16 + 63) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v16 + 39) < 0) {
    operator delete(*a16);
  }
  _Unwind_Resume(a1);
}

void sub_1C8E22FE8()
{
}

void sub_1C8E22FF0()
{
}

void sub_1C8E22FF8()
{
}

void sub_1C8E23000()
{
}

void sub_1C8E23008()
{
}

void sub_1C8E23010()
{
}

void sub_1C8E23018()
{
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setUtteranceTokens(uint64_t a1, uint64_t a2)
{
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setUtteranceTokensMask(uint64_t a1, uint64_t a2)
{
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setFeaturePoolingMask(uint64_t a1, uint64_t a2)
{
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setTypeIds(uint64_t a1, uint64_t a2)
{
}

uint64_t snlp::ssu::cache::SSUCacheObjectParameter::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  v13 = (const void **)(a1 + 24);
  uint64_t v16 = (unsigned __int8 *)*((void *)v6 + 3);
  uint64_t v15 = v6 + 24;
  uint64_t v14 = v16;
  if (v12 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntent::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v11 = a1 + 24;
  uint64_t v9 = (unsigned __int8 *)*((void *)a1 + 3);
  uint64_t v10 = (unsigned __int8 *)*((void *)v11 + 1);
  v13 = v6 + 24;
  int v12 = (unsigned __int8 *)*((void *)v6 + 3);
  if (v10 - v9 != *((void *)v13 + 1) - (void)v12) {
    return 0;
  }
  if (v9 == v10) {
    return 1;
  }
  do
  {
    uint64_t result = snlp::ssu::cache::SSUCacheObjectParameter::operator==(v9, v12);
    if (!result) {
      break;
    }
    v9 += 48;
    v12 += 48;
  }
  while (v9 != v10);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntentList::operator==(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = snlp::ssu::cache::SSUCacheObjectIntent::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 48;
    v4 += 48;
  }
  while (v2 != v3);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntentList::operator!=(unsigned __int8 **a1, uint64_t a2)
{
  return snlp::ssu::cache::SSUCacheObjectIntentList::operator==(a1, a2) ^ 1;
}

unint64_t snlp::ssu::cache::SSUCacheObjectIntentList::numUniqueIntents(snlp::ssu::cache::SSUCacheObjectIntentList *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
}

void snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(snlp::ssu::cache::SSUCacheObjectIntentList *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) <= a2)
  {
    char v8 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    uint64_t v6 = (long long *)(v4 + 48 * a2);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v7 = *v6;
      a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
    a3[1].__r_.__value_.__r.__words[0] = 0;
    a3[1].__r_.__value_.__l.__size_ = 0;
    a3[1].__r_.__value_.__r.__words[2] = 0;
    std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(a3[1].__r_.__value_.__r.__words, *(void *)(v4 + 48 * a2 + 24), *(void *)(v4 + 48 * a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 48 * a2 + 32) - *(void *)(v4 + 48 * a2 + 24)) >> 4));
    char v8 = 1;
  }
  a3[2].__r_.__value_.__s.__data_[0] = v8;
}

void sub_1C8E23400(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v7[v9];
        uint64_t v11 = (long long *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9], *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *(_OWORD *)uint64_t v10 = v12;
        }
        v13 = (std::string *)&v7[v9 + 24];
        uint64_t v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(void *)(a2 + v9 + 32));
        }
        else
        {
          long long v15 = *(_OWORD *)v14;
          *(void *)&v7[v9 + 40] = *(void *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    a1[1] = v7;
  }
}

void sub_1C8E2352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::getNumEncodings(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *this)
{
  if (*((void *)this + 1) == *(void *)this) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  return **(void **)this;
}

uint64_t snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative::getNumEncodings(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative *this)
{
  if (*((void *)this + 1) == *(void *)this) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  return **(void **)this;
}

void *boost::serialization::singleton_module::get_lock(boost::serialization::singleton_module *this)
{
  return &boost::serialization::singleton_module::get_lock(void)::lock;
}

void snlp::ssu::matcher::SSUMatcher::buildFromPathsWithLazyInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1C8E236CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUMatcher::validateAssetVersion(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v2, "version.yaml");
  std::__fs::filesystem::path v3 = v2;
  memset(&v2, 0, sizeof(v2));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, a1, &v3);
  getAssetDirectoryNCV((const std::__fs::filesystem::path *)&__p);
}

void sub_1C8E23854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB7740A0](v34 - 64);
  _Unwind_Resume(a1);
}

void sub_1C8E238C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  JUMPOUT(0x1C8E238B8);
}

void snlp::ssu::matcher::SSUMatcher::buildFromPaths(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    snlp::ssu::matcher::SSUMatcherDirectories::toString((uint64_t *)__p, (snlp::ssu::matcher::SSUMatcherDirectories *)a1);
    int v5 = v10 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "Building an SSUMatcher instance with directories %s", buf, 0xCu);
    if (v10 < 0) {
      operator delete(*(void **)__p);
    }
  }
  snlp::ssu::cache::SSUCacheDirectory::withDirectory((std::__fs::filesystem::path *)a1, __p);
  if (*(void *)__p) {
    operator new();
  }
  uint64_t v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      long long v7 = a1;
    }
    else {
      long long v7 = *(char **)a1;
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "Failed to build cache directory instance using root path: %s", __p, 0xCu);
  }
  *a2 = 0;
}

void sub_1C8E23F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  snlp::ssu::matcher::SSUMatcherConfig::~SSUMatcherConfig(&a37);
  if (a50 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB7740A0](&a51);
  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  _Unwind_Resume(a1);
}

void sub_1C8E24128()
{
}

uint64_t std::default_delete<snlp::ssu::cache::SSUCacheDirectory>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(result + 24));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

int64x2_t *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format(uint64_t *a1, char *a2)
{
  std::__fs::filesystem::path v3 = (int64x2_t *)a1;
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  a1[8] = 0;
  v134 = (std::string *)(a1 + 8);
  uint64_t v123 = (uint64_t)(a1 + 3);
  a1[9] = 0;
  a1[10] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)((char *)a1 + 45) = 0u;
  *((unsigned char *)a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  v3[6].i64[0] = (uint64_t)&unk_1F23614C0;
  v3[10].i64[0] = 0;
  v3[10].i8[8] = 0;
  v3[10].i32[3] = 24;
  v3[11].i8[8] = 0;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v137, a2);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(&v139, (uint64_t)v3);
    uint64_t v4 = (std::locale::facet *)std::locale::use_facet(&v139, MEMORY[0x1E4FBA258]);
    std::locale::~locale(&v139);
    unsigned __int8 __c = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
    int v5 = 0;
    std::string::size_type v6 = 0;
    __int8 v7 = v3[5].i8[8];
    while (1)
    {
      std::string::size_type v8 = std::string::find(&v137, __c, v6);
      if (v8 == -1) {
        break;
      }
      std::string::size_type v9 = v8 + 1;
      std::string::size_type v10 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v137.__r_.__value_.__l.__size_;
      }
      if (v9 >= size)
      {
        if (v7)
        {
          v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
          v140[0] = (void *)v8;
          v140[1] = (void *)size;
          boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
        }
        ++v5;
        break;
      }
      long long v12 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v13 = &v137;
      }
      else {
        v13 = (std::string *)v137.__r_.__value_.__r.__words[0];
      }
      int v14 = v13->__r_.__value_.__s.__data_[v9];
      if ((*((unsigned char *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v14 != *(unsigned __int8 *)(v137.__r_.__value_.__r.__words[0] + v8))
        {
          std::string::size_type v10 = v137.__r_.__value_.__l.__size_;
          goto LABEL_17;
        }
LABEL_15:
        std::string::size_type v6 = v8 + 2;
      }
      else
      {
        long long v12 = &v137;
        if (v14 == v137.__r_.__value_.__s.__data_[v8]) {
          goto LABEL_15;
        }
LABEL_17:
        long long v15 = (unsigned __int8 *)v12 + v9;
        if (v9 != v10)
        {
          uint64_t v16 = (unsigned __int8 *)v12 + v10;
          std::string::size_type v17 = ~v8 + v10;
          while (((char)*v15 & 0x80000000) == 0 && (*((_DWORD *)&v4[1].~facet + *v15) & 0x400) != 0)
          {
            ++v15;
            if (!--v17)
            {
              long long v15 = v16;
              break;
            }
          }
        }
        std::string::size_type v6 = v15 - (unsigned __int8 *)v13;
        if (v15 - (unsigned __int8 *)v13 < size && *v15 == __c) {
          ++v6;
        }
        ++v5;
      }
    }
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(&v139, (uint64_t)v3);
    uint64_t v18 = std::locale::use_facet(&v139, MEMORY[0x1E4FBA258]);
    char v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    uint64_t v20 = v5;
    std::locale::~locale(&v139);
    int v21 = (char *)v3->i64[1];
    if (v21 == (char *)v3->i64[0])
    {
      LODWORD(v139.__locale_) = -1;
      char v148 = 0;
      *(_OWORD *)v140 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v142 = 0u;
      uint64_t v143 = 0;
      uint64_t v144 = 6;
      char v145 = v19;
      int v147 = 0;
      uint64_t v146 = 4098;
      uint64_t v150 = 0x7FFFFFFFFFFFFFFFLL;
      int v151 = 0;
      uint64_t v22 = v3[1].i64[0];
      if (0xEEEEEEEEEEEEEEEFLL * ((v22 - (uint64_t)v21) >> 3) >= v5)
      {
        v29 = &v21[120 * v5];
        if (v20)
        {
          uint64_t v34 = 120 * v20;
          do
          {
            std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v21, (uint64_t)&v139);
            v21 += 120;
            v34 -= 120;
          }
          while (v34);
        }
      }
      else
      {
        if (v21)
        {
          v3->i64[1] = (uint64_t)v21;
          operator delete(v21);
          uint64_t v22 = 0;
          v3->i64[0] = 0;
          v3->i64[1] = 0;
          v3[1].i64[0] = 0;
        }
        unint64_t v23 = 0xEEEEEEEEEEEEEEEFLL * (v22 >> 3);
        uint64_t v24 = 2 * v23;
        if (2 * v23 <= v5) {
          uint64_t v24 = v5;
        }
        if (v23 >= 0x111111111111111) {
          unint64_t v25 = 0x222222222222222;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25 > 0x222222222222222) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v25);
        v3->i64[0] = (uint64_t)v26;
        v3->i64[1] = (uint64_t)v26;
        v3[1].i64[0] = (uint64_t)&v26[120 * v27];
        uint64_t v28 = 120 * v5;
        v29 = &v26[v28];
        do
        {
          std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v26, (uint64_t)&v139);
          v26 += 120;
          v28 -= 120;
        }
        while (v28);
      }
      v3->i64[1] = (uint64_t)v29;
      if (v148)
      {
        std::locale::~locale(&v149);
        char v148 = 0;
      }
      if (SHIBYTE(v142) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v140[0]);
      }
    }
    else if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v21[-v3->i64[0]] >> 3) >= v5)
    {
      std::vector<BOOL>::resize(v123);
      if (v5) {
        goto LABEL_51;
      }
    }
    else
    {
      LODWORD(v139.__locale_) = -1;
      char v148 = 0;
      *(_OWORD *)v140 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v142 = 0u;
      uint64_t v143 = 0;
      uint64_t v144 = 6;
      char v145 = v19;
      int v147 = 0;
      uint64_t v146 = 4098;
      uint64_t v150 = 0x7FFFFFFFFFFFFFFFLL;
      int v151 = 0;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(v3, v5, (uint64_t)&v139);
      if (v148)
      {
        std::locale::~locale(&v149);
        char v148 = 0;
      }
      if (SHIBYTE(v142) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v140[0]);
      }
      std::vector<BOOL>::resize(v123);
LABEL_51:
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = v3->i64[0];
        uint64_t v32 = v3->i64[0] + v30;
        *(_DWORD *)uint64_t v32 = -1;
        *(void *)(v32 + 104) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v32 + 112) = 0;
        std::string::resize((std::string *)(v32 + 8), 0, 0);
        std::string::resize((std::string *)(v32 + 32), 0, 0);
        uint64_t v33 = v31 + v30;
        *(_OWORD *)(v33 + 56) = xmmword_1C8F38600;
        *(unsigned char *)(v33 + 72) = v19;
        *(_DWORD *)(v33 + 84) = 0;
        *(void *)(v33 + 76) = 4098;
        v30 += 120;
        --v20;
      }
      while (v20);
    }
    std::string::resize(v134, 0, 0);
    uint64_t v35 = 0;
    std::string::size_type v36 = 0;
    int v124 = 0;
    int v125 = -1;
    unsigned int v126 = 0;
    int v127 = 1;
LABEL_64:
    v133 = (boost::io::detail *)(v35 - 1);
    std::string::size_type v37 = v36;
    while (2)
    {
      std::string::size_type v38 = std::string::find(&v137, __c, v37);
      if (v38 != -1)
      {
        std::string::size_type v39 = v38;
        v40 = v134;
        if (v35) {
          v40 = (std::string *)(v3->i64[0] + 120 * (void)v133 + 32);
        }
        int64_t v41 = v39 + 1;
        int64_t v42 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        v43 = (std::string *)v137.__r_.__value_.__r.__words[0];
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v43 = &v137;
        }
        if (v43->__r_.__value_.__s.__data_[v41] == v43->__r_.__value_.__s.__data_[v39])
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v40, (char *)v43 + v36, (char *)v43 + v41);
          std::string::size_type v36 = v39 + 2;
          std::string::size_type v37 = v39 + 2;
LABEL_115:
          std::__fs::filesystem::path v3 = (int64x2_t *)a1;
          continue;
        }
        if (v39 != v36)
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v40, (char *)v43 + v36, (char *)v43 + v39);
          int64_t v42 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          std::string::size_type v36 = v39;
          std::__fs::filesystem::path v3 = (int64x2_t *)a1;
        }
        if ((v42 & 0x80) != 0)
        {
          int64_t v42 = v137.__r_.__value_.__l.__size_;
          v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
        }
        else
        {
          v44 = &v137;
        }
        v45 = (unsigned __int8 *)v44 + v41;
        unint64_t v46 = (unint64_t)v44 + v42;
        v138 = (char *)v44 + v42;
        uint64_t v47 = v3->i64[0];
        v48 = (int *)(v3->i64[0] + 120 * v35);
        unsigned int v49 = v3[5].u8[8];
        int *v48 = -1;
        v129 = (void *)v42;
        if (v42 <= v41)
        {
          v50 = (unsigned __int8 *)v44 + v41;
          if (v49)
          {
            v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
            v140[0] = (void *)v41;
            v140[1] = (void *)v42;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
          }
          goto LABEL_112;
        }
        uint64_t v128 = v47;
        int v131 = *v45;
        unsigned int v132 = v49;
        unsigned __int8 v130 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124);
        v50 = v45;
        if (v131 == v130)
        {
          v50 = v45 + 1;
          if ((unint64_t)(v45 + 1) >= v46)
          {
            if (v132)
            {
              v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
              v140[0] = (void *)(v41 + 1);
              v140[1] = v129;
              boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
            }
LABEL_112:
            v70 = &v137;
            if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v70 = (std::string *)v137.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v37 = v50 - (unsigned __int8 *)v70;
            goto LABEL_115;
          }
        }
        int v51 = *v50;
        if (v51 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 48)
          || (char)*v50 < 0
          || (*((_DWORD *)&v4[1].~facet + *v50) & 0x400) == 0)
        {
LABEL_83:
          char v52 = v132;
          if (v50 != (unsigned __int8 *)v46)
          {
            uint64_t v53 = v128 + 120 * v35;
            v54 = (int *)(v53 + 76);
            v55 = (int *)(v53 + 112);
            while (1)
            {
              int v56 = ((uint64_t (*)(std::locale::facet *, void, void))v4->__vftable[3].~facet)(v4, (char)*v50, 0);
              if (v56 <= 38)
              {
                if (v56 == 32)
                {
                  int v58 = *v55 | 2;
LABEL_99:
                  int *v55 = v58;
                  goto LABEL_100;
                }
                if (v56 != 35) {
                  goto LABEL_127;
                }
                int v57 = *v54 | 0x600;
              }
              else
              {
                switch(v56)
                {
                  case '\'':
                    goto LABEL_100;
                  case '(':
                  case ')':
                  case '*':
                  case ',':
                  case '.':
                  case '/':
                    goto LABEL_127;
                  case '+':
                    int v57 = *v54 | 0x800;
                    break;
                  case '-':
                    int v57 = *v54 | 0x20;
                    break;
                  case '0':
                    int v58 = *v55 | 1;
                    goto LABEL_99;
                  default:
                    if (v56 == 61)
                    {
                      int v58 = *v55 | 4;
                      goto LABEL_99;
                    }
                    if (v56 != 95)
                    {
LABEL_127:
                      int v74 = *v50;
                      if (v74 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 42))
                      {
                        ++v50;
                        goto LABEL_129;
                      }
                      if (v50 != (unsigned __int8 *)v46)
                      {
                        char v75 = v132;
                        if (((char)*v50 & 0x80000000) == 0 && (*((_DWORD *)&v4[1].~facet + *v50) & 0x400) != 0)
                        {
                          v50 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(v50, &v138, (void *)(v128 + 120 * v35 + 56), v4);
                          goto LABEL_129;
                        }
                        goto LABEL_130;
                      }
                      if ((v132 & 1) == 0)
                      {
LABEL_155:
                        v59 = (unsigned __int8 *)v46;
                        goto LABEL_103;
                      }
LABEL_276:
                      v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
                      v140[0] = (void *)(v41 - (void)v45 + v46);
                      v140[1] = v129;
                      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
                    }
                    int v57 = *v54 | 0x10;
                    break;
                }
              }
              int *v54 = v57;
LABEL_100:
              if (++v50 == (unsigned __int8 *)v46)
              {
                v50 = (unsigned __int8 *)v46;
                char v52 = v132;
                break;
              }
            }
          }
          v59 = v50;
          if (v52)
          {
            v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
            v140[0] = (void *)(v41 - (void)v45 + v46);
            v140[1] = v129;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
          }
LABEL_103:
          v60 = &v137;
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v60 = (std::string *)v137.__r_.__value_.__r.__words[0];
          }
          std::__fs::filesystem::path v3 = (int64x2_t *)a1;
          uint64_t v61 = *a1;
          uint64_t v62 = *a1 + 120 * v35;
          unsigned int v65 = *(_DWORD *)(v62 + 112);
          v63 = (unsigned int *)(v62 + 112);
          unsigned int v64 = v65;
          if (v65)
          {
            uint64_t v66 = v61 + 120 * v35;
            int v69 = *(_DWORD *)(v66 + 76);
            v67 = (unsigned int *)(v66 + 76);
            int v68 = v69;
            if ((v69 & 0x20) != 0)
            {
              v64 &= ~1u;
              unsigned int *v63 = v64;
              if ((v64 & 2) == 0) {
                goto LABEL_119;
              }
              goto LABEL_109;
            }
            v64 &= ~2u;
            unsigned int *v63 = v64;
            *(unsigned char *)(v61 + 120 * v35 + 72) = 48;
            unsigned int *v67 = v68 & 0xFFFFFF4F | 0x10;
          }
          if ((v64 & 2) == 0) {
            goto LABEL_119;
          }
LABEL_109:
          if ((*(unsigned char *)(v61 + 120 * v35 + 77) & 8) != 0) {
            unsigned int *v63 = v64 & 0xFFFFFFFD;
          }
LABEL_119:
          std::string::size_type v36 = v59 - (unsigned __int8 *)v60;
          int v71 = *(_DWORD *)(v61 + 120 * v35);
          std::string::size_type v37 = v36;
          if (v71 != -3)
          {
            int v107 = v125;
            if (v71 <= v125) {
              int v108 = v125;
            }
            else {
              int v108 = *(_DWORD *)(v61 + 120 * v35);
            }
            if (v71 == -1) {
              int v108 = v125;
            }
            int v109 = v127;
            if (v71 == -1) {
              int v110 = 0;
            }
            else {
              int v110 = v127;
            }
            BOOL v111 = v71 == -2;
            if (v71 != -2) {
              int v107 = v108;
            }
            int v112 = v124;
            if (v111) {
              int v112 = 1;
            }
            int v124 = v112;
            int v125 = v107;
            if (!v111) {
              int v109 = v110;
            }
            ++v126;
            int v127 = v109;
            ++v35;
            goto LABEL_64;
          }
          continue;
        }
        if ((unsigned __int8 *)v46 == v50) {
          goto LABEL_145;
        }
        int v72 = 0;
        while (((char)*v50 & 0x80000000) == 0)
        {
          uint64_t v73 = *v50;
          if ((*((_DWORD *)&v4[1].~facet + v73) & 0x400) == 0) {
            break;
          }
          int v72 = ((uint64_t (*)(std::locale::facet *, void, void))v4->__vftable[3].~facet)(v4, (char)v73, 0)+ 10 * v72- 48;
          if (++v50 == (unsigned __int8 *)v46) {
            goto LABEL_145;
          }
        }
        if (v46 <= (unint64_t)v50)
        {
          unint64_t v46 = (unint64_t)v50;
LABEL_145:
          std::__fs::filesystem::path v3 = (int64x2_t *)a1;
          if (v132)
          {
            v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
            v140[0] = (void *)(v41 - (void)v45 + v46);
            v140[1] = v129;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
          }
          v81 = &v137;
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v81 = (std::string *)v137.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v37 = v46 - (void)v81;
          continue;
        }
        int v80 = *v50;
        if (v80 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37))
        {
          int *v48 = v72 - 1;
          v59 = v50 + 1;
          if (v131 == v130 && (v132 & 1) != 0)
          {
            v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
            v140[0] = &v59[v41 - (void)v45];
            v140[1] = v129;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
          }
          goto LABEL_103;
        }
        int v82 = *v50;
        if (v82 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 36))
        {
          int *v48 = v72 - 1;
          ++v50;
          goto LABEL_83;
        }
        *(void *)(v128 + 120 * v35 + 56) = v72;
        int *v48 = -1;
LABEL_129:
        char v75 = v132;
LABEL_130:
        if ((unint64_t)v50 >= v46)
        {
          unint64_t v46 = (unint64_t)v50;
          if ((v75 & 1) == 0) {
            goto LABEL_155;
          }
          goto LABEL_276;
        }
        int v76 = *v50;
        if (v76 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 46))
        {
          v59 = v50 + 1;
          v77 = (unsigned __int8 *)v46;
          if (v50 + 1 == (unsigned __int8 *)v46) {
            goto LABEL_159;
          }
          int v78 = *v59;
          if (v78 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 42))
          {
            int v79 = 0;
            v59 = v50 + 2;
            v50 += 2;
LABEL_161:
            if (v50 == (unsigned __int8 *)v46)
            {
LABEL_178:
              if (v132)
              {
                v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
                v140[0] = (void *)(v41 - (void)v45 + v46);
                v140[1] = v129;
                boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
              }
              goto LABEL_103;
            }
            int v122 = v79;
            int v83 = 0;
            while (1)
            {
              int v84 = ((uint64_t (*)(std::locale::facet *, void, void))v4->__vftable[3].~facet)(v4, (char)*v50, 0);
              if ((v84 - 73) <= 0x31)
              {
                if (((1 << (v84 - 73)) & 0x2400A80000008) != 0) {
                  goto LABEL_176;
                }
                if (v84 == 73)
                {
                  int v83 = 73;
                  goto LABEL_176;
                }
              }
              switch(v84)
              {
                case '2':
                  if (v83 == 51) {
                    goto LABEL_175;
                  }
                  goto LABEL_180;
                case '3':
                  if (v83 != 73) {
                    goto LABEL_180;
                  }
                  int v83 = 51;
                  break;
                case '4':
                  if (v83 != 54) {
                    goto LABEL_180;
                  }
LABEL_175:
                  int v83 = 0;
                  break;
                case '6':
                  if (v83 != 73)
                  {
LABEL_180:
                    boost::io::detail::maybe_throw_exception(v132, (uint64_t)&v59[v41 - (void)v45], (uint64_t)v129);
                    goto LABEL_103;
                  }
                  int v83 = 54;
                  break;
                default:
                  BOOL v86 = v83 != 73 && v83 != 0;
                  if ((unint64_t)v59 >= v46 || v86)
                  {
                    unint64_t v46 = (unint64_t)v59;
                    goto LABEL_178;
                  }
                  if (v131 == v130
                    && (int v87 = *v59,
                        v87 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124)))
                  {
                    ++v59;
                  }
                  else
                  {
                    switch(((unsigned int (*)(std::locale::facet *, void, void))v4->__vftable[3].~facet)(v4, (char)*v59, 0))
                    {
                      case 'A':
                        uint64_t v96 = v128;
                        uint64_t v97 = v128 + 120 * v35;
                        int v98 = *(_DWORD *)(v97 + 76) | 0x4000;
                        *(_DWORD *)(v97 + 76) = v98;
                        goto LABEL_216;
                      case 'C':
                      case 'c':
                        *(void *)(v128 + 120 * v35 + 104) = 1;
                        goto LABEL_222;
                      case 'E':
                        uint64_t v99 = v128;
                        uint64_t v100 = v128 + 120 * v35;
                        int v101 = *(_DWORD *)(v100 + 76) | 0x4000;
                        *(_DWORD *)(v100 + 76) = v101;
                        goto LABEL_220;
                      case 'F':
                        uint64_t v94 = v128;
                        uint64_t v102 = v128 + 120 * v35;
                        int v95 = *(_DWORD *)(v102 + 76) | 0x4000;
                        *(_DWORD *)(v102 + 76) = v95;
                        goto LABEL_213;
                      case 'G':
                        uint64_t v88 = v128 + 120 * v35;
                        unsigned int v89 = *(_DWORD *)(v88 + 76) | 0x4000;
                        goto LABEL_211;
                      case 'S':
                      case 's':
                        if (v122) {
                          *(void *)(v128 + 120 * v35 + 104) = *(void *)(v128 + 120 * v35 + 64);
                        }
                        *(void *)(v128 + 120 * v35 + 64) = 6;
                        goto LABEL_222;
                      case 'T':
                        if ((unint64_t)++v59 >= v46)
                        {
                          boost::io::detail::maybe_throw_exception(v132, (uint64_t)&v59[v41 - (void)v45], (uint64_t)v129);
                          v50 = v59;
                          goto LABEL_112;
                        }
                        uint64_t v90 = v128 + 120 * v35;
                        *(unsigned char *)(v90 + 72) = *v59;
                        *(_DWORD *)(v90 + 112) |= 8u;
LABEL_203:
                        int v93 = -2;
LABEL_218:
                        int *v48 = v93;
LABEL_222:
                        v105 = v59 + 1;
                        if (v131 != v130)
                        {
                          ++v59;
                          goto LABEL_103;
                        }
                        if (v105 != (unsigned __int8 *)v46)
                        {
                          int v106 = *v105;
                          if (v106 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124))
                          {
                            v59 += 2;
                            goto LABEL_103;
                          }
                          unint64_t v46 = (unint64_t)(v59 + 1);
                        }
                        boost::io::detail::maybe_throw_exception(v132, v41 - (void)v45 + v46, (uint64_t)v129);
                        ++v59;
                        break;
                      case 'X':
                        *(_DWORD *)(v128 + 120 * v35 + 76) |= 0x4000u;
                        goto LABEL_206;
                      case 'a':
                        uint64_t v96 = v128;
                        int v98 = *(_DWORD *)(v128 + 120 * v35 + 76);
LABEL_216:
                        uint64_t v103 = v96 + 120 * v35;
                        unsigned int v104 = v98 & 0xFFFFFEB1 | 0x104;
                        goto LABEL_221;
                      case 'b':
                        uint64_t v88 = v128 + 120 * v35;
                        unsigned int v89 = *(_DWORD *)(v88 + 76) | 1;
                        goto LABEL_211;
                      case 'd':
                      case 'g':
                      case 'i':
                      case 'u':
                        goto LABEL_222;
                      case 'e':
                        uint64_t v99 = v128;
                        int v101 = *(_DWORD *)(v128 + 120 * v35 + 76);
LABEL_220:
                        uint64_t v103 = v99 + 120 * v35;
                        unsigned int v104 = v101 | 0x100;
                        goto LABEL_221;
                      case 'f':
                        uint64_t v94 = v128;
                        int v95 = *(_DWORD *)(v128 + 120 * v35 + 76);
LABEL_213:
                        uint64_t v103 = v94 + 120 * v35;
                        unsigned int v104 = v95 | 4;
LABEL_221:
                        *(_DWORD *)(v103 + 76) = v104;
                        goto LABEL_222;
                      case 'n':
                        int v93 = -3;
                        goto LABEL_218;
                      case 'o':
                        uint64_t v88 = v128 + 120 * v35;
                        unsigned int v89 = *(_DWORD *)(v88 + 76) & 0xFFFFFFB5 | 0x40;
                        goto LABEL_211;
                      case 'p':
                      case 'x':
LABEL_206:
                        uint64_t v88 = v128 + 120 * v35;
                        unsigned int v89 = *(_DWORD *)(v88 + 76) & 0xFFFFFFB5 | 8;
LABEL_211:
                        *(_DWORD *)(v88 + 76) = v89;
                        goto LABEL_222;
                      case 't':
                        char v91 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
                        uint64_t v92 = v128 + 120 * v35;
                        *(unsigned char *)(v92 + 72) = v91;
                        *(_DWORD *)(v92 + 112) |= 8u;
                        goto LABEL_203;
                      default:
                        boost::io::detail::maybe_throw_exception(v132, (uint64_t)&v59[v41 - (void)v45], (uint64_t)v129);
                        goto LABEL_222;
                    }
                  }
                  goto LABEL_103;
              }
LABEL_176:
              v50 = ++v59;
              if (v59 == (unsigned __int8 *)v46)
              {
                v59 = (unsigned __int8 *)v46;
                goto LABEL_178;
              }
            }
          }
          v77 = v50 + 1;
          if ((char)*v59 < 0 || (v77 = v50 + 1, (*((_DWORD *)&v4[1].~facet + *v59) & 0x400) == 0))
          {
LABEL_159:
            int v79 = 0;
            *(void *)(v128 + 120 * v35 + 64) = 0;
          }
          else
          {
            v77 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(v50 + 1, &v138, (void *)(v128 + 120 * v35 + 64), v4);
            v59 = v77;
            int v79 = 1;
          }
          v50 = v77;
          goto LABEL_161;
        }
        int v79 = 0;
        v59 = v50;
        goto LABEL_161;
      }
      break;
    }
    v113 = v134;
    if (v35) {
      v113 = (std::string *)(v3->i64[0] + 120 * (void)v133 + 32);
    }
    std::string::size_type v114 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v114 = v137.__r_.__value_.__l.__size_;
    }
    v115 = &v137;
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v115 = (std::string *)v137.__r_.__value_.__r.__words[0];
    }
    std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v113, (char *)v115 + v36, (char *)v115 + v114);
    int v116 = v125;
    if ((v127 & 1) == 0)
    {
      if (v125 & 0x80000000) == 0 && (v3[5].i8[8])
      {
        v139.__locale_ = (std::locale::__imp *)&unk_1F2361498;
        v140[0] = (void *)v125;
        v140[1] = 0;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v139);
      }
      int v117 = 0;
      if (v126)
      {
        v118 = (_DWORD *)v3->i64[0];
        do
        {
          if (*v118 == -1) {
            _DWORD *v118 = v117++;
          }
          v118 += 30;
          --v35;
        }
        while (v35);
      }
      int v116 = v117 - 1;
    }
    char v119 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
    LODWORD(v139.__locale_) = -1;
    char v148 = 0;
    *(_OWORD *)v140 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v142 = 0u;
    uint64_t v143 = 0;
    uint64_t v144 = 6;
    char v145 = v119;
    int v147 = 0;
    uint64_t v146 = 4098;
    uint64_t v150 = 0x7FFFFFFFFFFFFFFFLL;
    int v151 = 0;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(v3, v126, (uint64_t)&v139);
    if (v148)
    {
      std::locale::~locale(&v149);
      char v148 = 0;
    }
    if (SHIBYTE(v142) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v140[0]);
    }
    __int32 v120 = v3[3].i32[0];
    if (v124)
    {
      v120 |= 4u;
      v3[3].i32[0] = v120;
    }
    v3[3].i32[2] = v116 + 1;
    v3[3].i32[0] = v120 & 0xFFFFFFFE | v127 & 1;
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_1C8E25614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::exception a31)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(a22 + 184))
  {
    std::locale::~locale((std::locale *)(a22 + 192));
    *(unsigned char *)(a22 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a11);
  if (*(char *)(a22 + 87) < 0) {
    operator delete(*a21);
  }
  if (*a12) {
    operator delete(*a12);
  }
  std::string __p = (void *)a22;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t *boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 60))
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    if (v2 != *a1)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        if (!a1[4]
          || (unint64_t v6 = *(unsigned int *)(v3 + v4), (v6 & 0x80000000) != 0)
          || ((*(void *)(a1[3] + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) == 0)
        {
          std::string::resize((std::string *)(v3 + v4 + 8), 0, 0);
          uint64_t v3 = *a1;
          uint64_t v2 = a1[1];
        }
        ++v5;
        v4 += 120;
      }
      while (v5 < 0xEEEEEEEEEEEEEEEFLL * ((v2 - v3) >> 3));
    }
    *((_DWORD *)a1 + 13) = 0;
    *((unsigned char *)a1 + 60) = 0;
    if (a1[4] && (uint64_t v7 = *((unsigned int *)a1 + 14), (int)v7 >= 1))
    {
      unint64_t v8 = 0;
      uint64_t v9 = a1[3];
      while (((*(void *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        *((_DWORD *)a1 + 13) = ++v8;
        if (v7 == v8) {
          goto LABEL_18;
        }
      }
      LODWORD(v7) = v8;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  else
  {
    LODWORD(v7) = *((_DWORD *)a1 + 13);
  }
LABEL_18:
  uint64_t v10 = *((int *)a1 + 14);
  if ((int)v7 >= (int)v10)
  {
    if ((a1[11] & 4) != 0)
    {
      v19[0] = &unk_1F2361470;
      v19[1] = (int)v7;
      v19[2] = v10;
      boost::throw_exception<boost::io::too_many_args>((uint64_t)v19);
    }
  }
  else
  {
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    if (v11 != *a1)
    {
      unint64_t v13 = 0;
      do
      {
        if (*(_DWORD *)(v12 + 120 * v13) == *((_DWORD *)a1 + 13)) {
          boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(v19, (uint64_t)(a1 + 12));
        }
        ++v13;
      }
      while (v13 < 0xEEEEEEEEEEEEEEEFLL * ((v11 - v12) >> 3));
      LODWORD(v7) = *((_DWORD *)a1 + 13);
    }
  }
  LODWORD(v14) = v7 + 1;
  *((_DWORD *)a1 + 13) = v7 + 1;
  if (a1[4])
  {
    uint64_t v15 = *((int *)a1 + 14);
    if ((int)v14 < (int)v15)
    {
      uint64_t v16 = a1[3];
      unint64_t v14 = (int)v14;
      int v17 = v7 + 2;
      do
      {
        if (((*(void *)(v16 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        ++v14;
        *((_DWORD *)a1 + 13) = v17++;
      }
      while (v15 != v14);
    }
  }
  return a1;
}

void sub_1C8E262DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, boost::detail::shared_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,std::exception a43)
{
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(std::string *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    uint64_t v6 = *((int *)a2 + 13);
    uint64_t v7 = *((int *)a2 + 14);
    if ((int)v6 < (int)v7 && (a2[11] & 2) != 0)
    {
      v30[0] = &unk_1F2361448;
      v30[1] = v6;
      v30[2] = v7;
      boost::throw_exception<boost::io::too_few_args>((uint64_t)v30);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    if (*((char *)a2 + 87) < 0) {
      std::string::size_type v8 = a2[9];
    }
    else {
      std::string::size_type v8 = *((unsigned __int8 *)a2 + 87);
    }
    unint64_t v9 = v5 / 120;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    uint64_t v10 = (void *)(v4 + 56);
    do
    {
      if (*((char *)v10 - 25) < 0) {
        uint64_t v11 = *(v10 - 5);
      }
      else {
        uint64_t v11 = *((unsigned __int8 *)v10 - 25);
      }
      std::string::size_type v12 = v11 + v8;
      if (*((_DWORD *)v10 - 14) == -2 && v12 <= *v10) {
        std::string::size_type v12 = *v10;
      }
      if (*((char *)v10 - 1) < 0) {
        uint64_t v13 = *(v10 - 2);
      }
      else {
        uint64_t v13 = *((unsigned __int8 *)v10 - 1);
      }
      std::string::size_type v8 = v13 + v12;
      v10 += 15;
      --v9;
    }
    while (v9);
    std::string::reserve(this, v8);
    int v14 = *((char *)a2 + 87);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)(a2 + 8);
    }
    else {
      uint64_t v15 = (const std::string::value_type *)a2[8];
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)a2 + 87);
    }
    else {
      std::string::size_type v16 = a2[9];
    }
    std::string::append(this, v15, v16);
    uint64_t v17 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v18 = 0;
      uint64_t v19 = 40;
      do
      {
        int v20 = *(char *)(v17 + v19 - 9);
        if (v20 >= 0) {
          int v21 = (const std::string::value_type *)(v17 + v19 - 32);
        }
        else {
          int v21 = *(const std::string::value_type **)(v17 + v19 - 32);
        }
        if (v20 >= 0) {
          std::string::size_type v22 = *(unsigned __int8 *)(v17 + v19 - 9);
        }
        else {
          std::string::size_type v22 = *(void *)(v17 + v19 - 24);
        }
        std::string::append(this, v21, v22);
        if (*(_DWORD *)(v17 + v19 - 40) == -2)
        {
          unint64_t v23 = *(void *)(v17 + v19 + 16);
          std::string::size_type v24 = SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0
              ? this->__r_.__value_.__l.__size_
              : HIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v23 > v24) {
            std::string::append(this, v23 - v24, *(unsigned char *)(v17 + v19 + 32));
          }
        }
        int v25 = *(char *)(v17 + v19 + 15);
        if (v25 >= 0) {
          v26 = (const std::string::value_type *)(v17 + v19 - 8);
        }
        else {
          v26 = *(const std::string::value_type **)(v17 + v19 - 8);
        }
        if (v25 >= 0) {
          std::string::size_type v27 = *(unsigned __int8 *)(v17 + v19 + 15);
        }
        else {
          std::string::size_type v27 = *(void *)(v17 + v19);
        }
        std::string::append(this, v26, v27);
        ++v18;
        uint64_t v17 = *a2;
        v19 += 120;
      }
      while (v18 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3));
    }
    *((unsigned char *)a2 + 60) = 1;
  }
  else if (*((char *)a2 + 87) < 0)
  {
    uint64_t v28 = (const std::string::value_type *)a2[8];
    std::string::size_type v29 = a2[9];
    std::string::__init_copy_ctor_external(this, v28, v29);
  }
  else
  {
    *this = *(std::string *)(a2 + 8);
  }
}

void sub_1C8E26628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1F23614C0;
  if (*(unsigned char *)(a1 + 72)) {
    operator delete(*(void **)(a1 + 16));
  }
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::~basic_format(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(unsigned char *)(a1 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1 + 96);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void snlp::ssu::matcher::SSURequestHandler::~SSURequestHandler(snlp::ssu::matcher::SSURequestHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void snlp::ssu::matcher::SSUPersister::~SSUPersister(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void snlp::ssu::matcher::SSUMatcherConfig::~SSUMatcherConfig(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t snlp::ssu::matcher::SSUPersister::SSUPersister(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C8E269BC(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 40);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&this[3], (uint64_t)a2 + 72);
  std::string::size_type v7 = *((void *)a2 + 15);
  this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
  this[5].__r_.__value_.__r.__words[0] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v8 = *((void *)a2 + 17);
  this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
  this[5].__r_.__value_.__r.__words[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v9 = *((void *)a2 + 19);
  this[6].__r_.__value_.__r.__words[0] = *((void *)a2 + 18);
  this[6].__r_.__value_.__l.__size_ = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1C8E26B08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *snlp::ssu::matcher::SSUMatcher::SSUMatcher(std::string *this, long long *a2, uint64_t a3, std::string::size_type *a4, uint64_t a5, long long *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], a3);
  snlp::ssu::matcher::SSUPersister::SSUPersister((uint64_t)&this[2].__r_.__value_.__r.__words[2], a5);
  snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(this + 7, a6);
  std::string::size_type v12 = a4[1];
  this[13].__r_.__value_.__r.__words[2] = *a4;
  this[14].__r_.__value_.__r.__words[0] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  this[14].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[14].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[15].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[16].__r_.__value_.__l.__data_ = 0u;
  this[16].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void sub_1C8E26C24(_Unwind_Exception *a1)
{
  snlp::ssu::matcher::SSUPersister::~SSUPersister(v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  long long v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = *((char *)v5 + 16);
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((char *)v5 + 16);
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        uint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (i = *v10; i; i = (uint64_t **)*i)
          {
            unint64_t v12 = (unint64_t)i[1];
            if (v12 == v8)
            {
              if (*((unsigned __int8 *)i + 16) == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = operator new(0x40uLL);
      void *v13 = 0;
      v13[1] = v8;
      long long v14 = *((_OWORD *)v5 + 1);
      long long v15 = *((_OWORD *)v5 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v5 + 2);
      *((_OWORD *)v13 + 3) = v15;
      *((_OWORD *)v13 + 1) = v14;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        void *v13 = *v23;
      }
      else
      {
        void *v13 = *v6;
        void *v6 = v13;
        *(void *)(v22 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      long long v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C8E26E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<snlp::ssu::similarity::SSUSimilarityScore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F23622A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void std::__shared_ptr_emplace<snlp::ssu::similarity::SSUSimilarityScore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F23622A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(uint64_t a1, uint64_t a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v2 = a2;
  long long v4 = *(unsigned char **)(a1 + 48);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(void *)(a1 + 48) = v4 + 1;
      unsigned char *v4 = a2;
      return v2;
    }
    if ((*(unsigned char *)(a1 + 76) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v7 = *(void **)(a1 + 16);
    size_t v6 = v5 - (void)v7;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 76) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    size_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 16);
  }
  unint64_t v8 = v6 >> 1;
  if (v6 >> 1 <= 0x100) {
    unint64_t v8 = 256;
  }
  while (__CFADD__(v8, v6))
  {
    BOOL v9 = v8 >= 2;
    v8 >>= 1;
    if (!v9)
    {
      uint64_t v10 = 0;
      size_t v11 = v6;
LABEL_18:
      memmove(v10, v7, v6);
      int v12 = 0;
      goto LABEL_20;
    }
  }
  size_t v11 = v8 + v6;
  uint64_t v10 = operator new(v8 + v6);
  if (v6) {
    goto LABEL_18;
  }
  int v12 = 1;
LABEL_20:
  if (*(unsigned char *)(a1 + 72)) {
    operator delete(v7);
  }
  *(unsigned char *)(a1 + 72) = 1;
  if (v12)
  {
    uint64_t v13 = &v10[v11];
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = &v10[v11];
    *(void *)(a1 + 64) = v10;
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      long long v14 = v10 + 1;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = 0;
      long long v14 = v10;
    }
  }
  else
  {
    long long v15 = &v10[*(void *)(a1 + 64) - (void)v7];
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = *(_DWORD *)(a1 + 48) - v16;
    uint64_t v18 = v16 - (void)v7;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    size_t v21 = &v10[v18];
    uint64_t v13 = &v10[v11];
    *(void *)(a1 + 56) = &v10[v11];
    *(void *)(a1 + 64) = v15;
    uint64_t v22 = &v21[v17];
    *(void *)(a1 + 40) = v21;
    *(void *)(a1 + 48) = v22;
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      unint64_t v23 = &v10[(int)v19 - (int)v20];
      long long v14 = v22 + 1;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v23;
    }
    else
    {
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = 0;
      long long v14 = v10;
    }
    uint64_t v10 = &v21[v17];
  }
  *(void *)(a1 + 32) = v14;
  if (v10 == v13)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 104))(a1, v2);
  }
  else
  {
    *(void *)(a1 + 48) = v10 + 1;
    *uint64_t v10 = v2;
  }
  return v2;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(void *)(a1 + 16) < v2)
  {
    if (a2 == -1 || (*(_DWORD *)(a1 + 76) & 0x10) != 0)
    {
      uint64_t v3 = (unsigned char *)(v2 - 1);
      *(void *)(a1 + 24) = v3;
      if (a2 == -1) {
        return 0;
      }
      goto LABEL_10;
    }
    int v4 = *(unsigned __int8 *)(v2 - 1);
    uint64_t v3 = (unsigned char *)(v2 - 1);
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = v3;
LABEL_10:
      *uint64_t v3 = a2;
      return a2;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)v1 < *(void *)(a1 + 32)) {
      return *v1;
    }
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      unint64_t v3 = *(void *)(a1 + 48);
      if (v3)
      {
        unint64_t v4 = *(void *)(a1 + 64);
        if ((unint64_t)v1 < v3 || (unint64_t)v1 < v4)
        {
          if (v4 < v3)
          {
            *(void *)(a1 + 64) = v3;
            unint64_t v4 = v3;
          }
          *(void *)(a1 + 32) = v4;
          return *v1;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 128);
  unint64_t v5 = a1[6];
  if (v5 && a1[8] < v5) {
    a1[8] = v5;
  }
  if (v4 == -1) {
    goto LABEL_16;
  }
  if ((a3 & 8) != 0)
  {
    uint64_t v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        uint64_t v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          uint64_t v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5) {
            goto LABEL_20;
          }
          int v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          uint64_t v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  if ((a3 & 0x10) == 0)
  {
LABEL_16:
    uint64_t v10 = -1;
    goto LABEL_17;
  }
  uint64_t v10 = -1;
  if (v5 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      int v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = v10;
  return result;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5 = a1[6];
  if (v5 && a1[8] < v5) {
    a1[8] = v5;
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0) {
            goto LABEL_29;
          }
          goto LABEL_21;
        }
        if (a3 != 2) {
          goto LABEL_29;
        }
        uint64_t v7 = a1 + 8;
      }
      else
      {
        uint64_t v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        uint64_t v11 = v6 + (int)a2;
        a1[3] = v11;
        if ((a4 & 0x10) == 0 || !v5) {
          goto LABEL_27;
        }
        LODWORD(v11) = v11 - v5;
LABEL_26:
        a1[6] = v5 + (int)v11;
LABEL_27:
        uint64_t v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      uint64_t v8 = -1;
      goto LABEL_30;
    }
  }
  uint64_t v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      unint64_t v10 = a1[5];
      unint64_t v9 = v10 - v5;
      goto LABEL_16;
    }
    if (a3 == 2)
    {
      unint64_t v9 = a1[8] - v5;
      unint64_t v10 = a1[5];
LABEL_16:
      uint64_t v11 = v9 + a2;
      if (v10 <= v5 + v11)
      {
        a2 = v11;
        if (v5 + v11 <= a1[8]) {
          goto LABEL_26;
        }
      }
      goto LABEL_29;
    }
  }
LABEL_30:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v8;
  return result;
}

void boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::throw_exception<boost::io::too_few_args>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  void *exception = &unk_1F2361418;
  exception[1] = &unk_1F2361448;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  void *exception = &unk_1F235F890;
  exception[1] = &unk_1F235F8C0;
  exception[4] = &unk_1F235F8E8;
  exception[5] = 0;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

const char *boost::io::too_few_args::what(boost::io::too_few_args *this)
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

void boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1CB775C40);
}

void boost::wrapexcept<boost::io::too_few_args>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C8E27858(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2361418;
  *(void *)(a1 + 8) = &unk_1F2361448;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F2361C38;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F235F890;
  *(void *)(a1 + 8) = &unk_1F235F8C0;
  *(void *)(a1 + 32) = &unk_1F235F8E8;
  return a1;
}

void sub_1C8E27990(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::clone()
{
}

void sub_1C8E27B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::io::too_few_args::~too_few_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1CB775C40);
}

void boost::throw_exception<boost::io::too_many_args>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  void *exception = &unk_1F2361418;
  exception[1] = &unk_1F2361470;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  void *exception = &unk_1F235F908;
  exception[1] = &unk_1F235F938;
  exception[4] = &unk_1F235F960;
  exception[5] = 0;
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(void *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[3] = MEMORY[0x1E4FBA4A8] + 16;
  a1[1] = a2;
  operator new();
}

void sub_1C8E27EC8(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v2);
  MEMORY[0x1CB775B50](v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      uint64_t v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    uint64_t v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3) {
      goto LABEL_10;
    }
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    unint64_t v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      uint64_t v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    uint64_t v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(void *)a1 != -1) {
    this->__width_ = *(void *)a1;
  }
  std::streamsize v11 = *(void *)(a1 + 8);
  if (v11 != -1) {
    this->__precision_ = v11;
  }
  std::ios_base::fmtflags v12 = *(char *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      uint64_t v13 = std::locale::use_facet(&v18, MEMORY[0x1E4FBA258]);
      std::ios_base::fmtflags v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_1C8E28104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

void *boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(void *result)
{
  uint64_t v1 = result;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[6];
  if (v2) {
    BOOL v3 = v2 == result[5];
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    uint64_t result = (*(void *(**)(void *__return_ptr, void *, _OWORD *, uint64_t))(*result + 40))(v8, result, v9, 16);
  }
  uint64_t v4 = v1[3];
  if (v4) {
    BOOL v5 = v4 == v1[2];
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    return (*(void *(**)(void *__return_ptr, void *, _OWORD *, uint64_t))(*v1 + 40))(v8, v1, v6, 8);
  }
  return result;
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((atomic_uint **)(v2 + 16));
  MEMORY[0x1CB775B50](a1 + 24);
  return a1;
}

void virtual thunk to'boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(void *a1)
{
  uint64_t v1 = (atomic_uint **)((char *)a1 + *(void *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  MEMORY[0x1CB775B50](v1 + 3);
  JUMPOUT(0x1CB775C40);
}

{
  atomic_uint **v1;
  uint64_t vars8;

  uint64_t v1 = (atomic_uint **)((char *)a1 + *(void *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  JUMPOUT(0x1CB775B50);
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((atomic_uint **)(v2 + 16));
  MEMORY[0x1CB775B50](a1 + 24);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_local_deleter(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

void boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::~sp_counted_impl_pd()
{
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

const char *boost::io::too_many_args::what(boost::io::too_many_args *this)
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

void boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1CB775C40);
}

void boost::wrapexcept<boost::io::too_many_args>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C8E28728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2361418;
  *(void *)(a1 + 8) = &unk_1F2361470;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F2361C38;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F235F908;
  *(void *)(a1 + 8) = &unk_1F235F938;
  *(void *)(a1 + 32) = &unk_1F235F960;
  return a1;
}

void sub_1C8E28860(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::clone()
{
}

void sub_1C8E28A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::io::too_many_args::~too_many_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int const>()
{
  return std::ostream::operator<<();
}

std::locale *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(std::locale *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 184)) {
    JUMPOUT(0x1CB775AD0);
  }
  return std::locale::locale(a1, (const std::locale *)(a2 + 192));
}

void boost::throw_exception<boost::io::bad_format_string>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  void *exception = &unk_1F2361418;
  exception[1] = &unk_1F2361498;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  void *exception = &unk_1F235F980;
  exception[1] = &unk_1F235F9B0;
  exception[4] = &unk_1F235F9D8;
  exception[5] = 0;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(int64x2_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1->i64[0];
  uint64_t v6 = a1->i64[1];
  unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - a1->i64[0]) >> 3);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      uint64_t v31 = v5 + 120 * a2;
      while (v6 != v31)
      {
        v6 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v6);
      }
      a1->i64[1] = v31;
    }
  }
  else
  {
    uint64_t v10 = a1[1].i64[0];
    if (0xEEEEEEEEEEEEEEEFLL * ((v10 - v6) >> 3) >= v8)
    {
      unint64_t v32 = v6 + 120 * v8;
      uint64_t v33 = 120 * a2 - 8 * ((v6 - a1->i64[0]) >> 3);
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, a3);
        v6 += 120;
        v33 -= 120;
      }
      while (v33);
      a1->i64[1] = v32;
    }
    else
    {
      if (a2 > 0x222222222222222) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v38 = a1 + 1;
      unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v5) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= a2) {
        uint64_t v12 = a2;
      }
      if (v11 >= 0x111111111111111) {
        unint64_t v13 = 0x222222222222222;
      }
      else {
        unint64_t v13 = v12;
      }
      std::ios_base::fmtflags v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v13);
      uint64_t v15 = (uint64_t)&v14[120 * v7];
      uint64_t v35 = v14;
      v36.i64[0] = v15;
      v36.i64[1] = v15;
      std::string::size_type v37 = &v14[120 * v16];
      uint64_t v17 = 120 * a2;
      std::locale v18 = &v14[120 * a2];
      unint64_t v19 = v17 - 120 * v7;
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v15, a3);
        v15 += 120;
        v19 -= 120;
      }
      while (v19);
      uint64_t v21 = a1->i64[0];
      unint64_t v20 = a1->u64[1];
      uint64_t v22 = v36.i64[0];
      if (v20 == a1->i64[0])
      {
        int64x2_t v30 = vdupq_n_s64(v20);
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = v22 + v23;
          uint64_t v25 = v20 + v23;
          *(_DWORD *)(v24 - 120) = *(_DWORD *)(v20 + v23 - 120);
          long long v26 = *(_OWORD *)(v20 + v23 - 112);
          *(void *)(v24 - 96) = *(void *)(v20 + v23 - 96);
          *(_OWORD *)(v24 - 112) = v26;
          *(void *)(v25 - 104) = 0;
          *(void *)(v25 - 96) = 0;
          *(void *)(v25 - 112) = 0;
          long long v27 = *(_OWORD *)(v20 + v23 - 88);
          *(void *)(v24 - 72) = *(void *)(v20 + v23 - 72);
          *(_OWORD *)(v24 - 88) = v27;
          *(void *)(v25 - 80) = 0;
          *(void *)(v25 - 72) = 0;
          *(void *)(v25 - 88) = 0;
          long long v28 = *(_OWORD *)(v20 + v23 - 48);
          *(_OWORD *)(v24 - 64) = *(_OWORD *)(v20 + v23 - 64);
          *(_OWORD *)(v24 - 48) = v28;
          *(unsigned char *)(v24 - 32) = 0;
          if (*(unsigned char *)(v20 + v23 - 32))
          {
            std::locale::locale((std::locale *)(v24 - 24), (const std::locale *)(v25 - 24));
            *(unsigned char *)(v24 - 32) = 1;
          }
          uint64_t v29 = *(void *)(v25 - 16);
          *(_DWORD *)(v24 - 8) = *(_DWORD *)(v25 - 8);
          *(void *)(v24 - 16) = v29;
          v23 -= 120;
        }
        while (v20 + v23 != v21);
        v22 += v23;
        int64x2_t v30 = *a1;
      }
      a1->i64[0] = v22;
      a1->i64[1] = (uint64_t)v18;
      int64x2_t v36 = v30;
      uint64_t v34 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v37;
      std::string::size_type v37 = v34;
      uint64_t v35 = (char *)v30.i64[0];
      std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer((uint64_t)&v35);
    }
  }
}

void sub_1C8E28E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    std::locale::locale((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    *(unsigned char *)(a1 + 88) = 1;
  }
  uint64_t v8 = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 104) = v8;
}

void sub_1C8E28F84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a1);
}

uint64_t std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

const char *boost::io::bad_format_string::what(boost::io::bad_format_string *this)
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1CB775C40);
}

void boost::wrapexcept<boost::io::bad_format_string>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C8E292F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2361418;
  *(void *)(a1 + 8) = &unk_1F2361498;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F2361C38;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F235F980;
  *(void *)(a1 + 8) = &unk_1F235F9B0;
  *(void *)(a1 + 32) = &unk_1F235F9D8;
  return a1;
}

void sub_1C8E2942C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::clone()
{
}

void sub_1C8E29608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::io::bad_format_string::~bad_format_string(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::io::detail::maybe_throw_exception(uint64_t this, uint64_t a2, uint64_t a3)
{
  if (this)
  {
    v3[0] = &unk_1F2361498;
    v3[1] = a2;
    v3[2] = a3;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v3);
  }
  return this;
}

void sub_1C8E29714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

unsigned __int8 *boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 *a1, char **a2, void *a3, void *a4)
{
  uint64_t v4 = a1;
  for (*a3 = 0; v4 != (unsigned __int8 *)*a2; ++v4)
  {
    if ((char)*v4 < 0) {
      break;
    }
    uint64_t v8 = *v4;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0) {
      break;
    }
    *a3 = 10 * *a3
        + (*(int (**)(void *, void, void))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return v4;
}

uint64_t std::vector<BOOL>::resize(uint64_t result)
{
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<snlp::ssu::cache::SSUCacheDirectory>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

uint64_t std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void snlp::ssu::matcher::SSUMatcher::buildFromPathsWithImmediateInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1C8E299E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void snlp::ssu::matcher::SSUMatcher::getLocale(snlp::ssu::matcher::SSUMatcher *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void snlp::ssu::matcher::SSUMatcher::performFullCacheUpdate(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  uint64_t v8 = SNLPOSLoggerForCategory(8);
  uint64_t v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    *(_DWORD *)buf = 134217984;
    unint64_t v38 = v10;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "Performing a full cache update for %lu apps", buf, 0xCu);
  }
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  unint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    do
    {
      if (snlp::ssu::matcher::SSUMatcher::appAssetDirectoryExists((snlp::ssu::matcher::SSUMatcher *)v9, (const std::__fs::filesystem::path *)v11))
      {
        snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired((snlp::ssu::matcher::SSUPersister *)(a1 + 64), (const snlp::ssu::matcher::SSUAppInfo *)v11, (uint64_t)buf);
        if (v41)
        {
          unint64_t v13 = a4->u64[1];
          if (v13 >= a4[1].i64[0]) {
            goto LABEL_26;
          }
LABEL_16:
          std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)a4->i64[1], (long long *)buf);
          uint64_t updated = v13 + 56;
          a4->i64[1] = v13 + 56;
          goto LABEL_27;
        }
        std::locale v18 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          unint64_t v19 = v11;
          if (v11[23] < 0) {
            unint64_t v19 = *(char **)v11;
          }
          *(_DWORD *)uint64_t v35 = 136315138;
          int64x2_t v36 = v19;
          unint64_t v20 = v18;
          uint64_t v21 = "Cache update failed for app %s. Continuing with other apps.";
LABEL_25:
          _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, v21, v35, 0xCu);
        }
      }
      else
      {
        std::ios_base::fmtflags v14 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = v11;
          if (v11[23] < 0) {
            uint64_t v15 = *(char **)v11;
          }
          uint64_t v16 = v11 + 24;
          if (v11[47] < 0) {
            uint64_t v16 = (void *)*v16;
          }
          *(_DWORD *)buf = 136315394;
          unint64_t v38 = (unint64_t)v15;
          __int16 v39 = 2080;
          v40 = v16;
          _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "Cannot find SSU app assets for given app: %s (tried %s). Cleaning up cache files for it and removing it from the registry.", buf, 0x16u);
        }
        snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(a1 + 64, v11, (uint64_t)buf);
        if (v41)
        {
          unint64_t v13 = a4->u64[1];
          if (v13 < a4[1].i64[0]) {
            goto LABEL_16;
          }
LABEL_26:
          uint64_t updated = std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(a4, (long long *)buf);
LABEL_27:
          a4->i64[1] = updated;
          goto LABEL_28;
        }
        uint64_t v22 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = v11;
          if (v11[23] < 0) {
            uint64_t v23 = *(char **)v11;
          }
          *(_DWORD *)uint64_t v35 = 136315138;
          int64x2_t v36 = v23;
          unint64_t v20 = v22;
          uint64_t v21 = "Removing cache files failed for app %s.";
          goto LABEL_25;
        }
      }
LABEL_28:
      uint64_t v9 = std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      v11 += 48;
    }
    while (v11 != v12);
  }
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v24 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      if (!*(unsigned char *)(a3 + 24)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
      *(_DWORD *)buf = 134217984;
      unint64_t v38 = v26;
      _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "Performing a full cache update for %lu configured user shortcuts", buf, 0xCu);
    }
    if (!*(unsigned char *)(a3 + 24)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired((snlp::ssu::matcher::SSUPersister *)(a1 + 64), (uint64_t *)a3, (uint64_t)buf, v25);
    int v27 = v41;
    long long v28 = SNLPOSLoggerForCategory(8);
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
    if (v27)
    {
      if (v29)
      {
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1C8DA9000, v28, OS_LOG_TYPE_DEBUG, "Completed user shortcuts database change handling successfully", v35, 2u);
      }
      if (!v41) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unint64_t v30 = a4->u64[1];
      if (v30 >= a4[1].i64[0])
      {
        uint64_t v31 = std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(a4, (long long *)buf);
      }
      else
      {
        std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)a4->i64[1], (long long *)buf);
        uint64_t v31 = v30 + 56;
        a4->i64[1] = v30 + 56;
      }
      a4->i64[1] = v31;
    }
    else if (v29)
    {
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_1C8DA9000, v28, OS_LOG_TYPE_DEBUG, "User shortcuts database change handling failed", v35, 2u);
    }
    std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
  if (!snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(*(snlp::ssu::cache::SSUCacheDirectory **)(a1 + 96), (unsigned __int8 *)(a1 + 72)))
  {
    unint64_t v32 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C8DA9000, v32, OS_LOG_TYPE_ERROR, "Failed to clear cache files outside the current locale. Stale cache files will remain on disk.", buf, 2u);
    }
  }
  uint64_t v33 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C8DA9000, v33, OS_LOG_TYPE_DEBUG, "Completed full cache update", buf, 2u);
  }
  std::mutex::unlock(v34);
}

void sub_1C8E29FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v18 + 8) = v17;
  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a17);
  a17 = v18;
  std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::matcher::SSUMatcher::appAssetDirectoryExists(snlp::ssu::matcher::SSUMatcher *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2 + 1, 0);
  return v3 == 2;
}

void *std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  return std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
}

void sub_1C8E2A1C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(int64x2_t *a1, long long *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(56 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  unint64_t v19 = v7;
  v20.i64[0] = (uint64_t)&v7[56 * v2];
  uint64_t v21 = &v7[56 * v6];
  std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)v20.i64[0], a2);
  uint64_t v8 = v20.i64[0];
  uint64_t v9 = v20.i64[0] + 56;
  v20.i64[1] = v20.i64[0] + 56;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(_OWORD *)(v13 - 56) = v15;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 56) = 0;
      *(_DWORD *)(v13 - 32) = *(_DWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(void *)(v13 - 24) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v12 -= 56;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    int64x2_t v16 = *a1;
    uint64_t v9 = v20.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  unint64_t v19 = (char *)v16.i64[0];
  std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer((uint64_t)&v19);
  return v9;
}

void sub_1C8E2A380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 40) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a4);
    long long v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C8E2A588(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUMatcher::registerApp(snlp::ssu::matcher::SSUMatcher *this@<X0>, const snlp::ssu::matcher::SSUAppInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (std::mutex *)((char *)this + 344);
  std::mutex::lock((std::mutex *)((char *)this + 344));
  long long v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(const snlp::ssu::matcher::SSUAppInfo **)a2;
    }
    if (*((char *)a2 + 47) >= 0) {
      size_t v9 = (char *)a2 + 24;
    }
    else {
      size_t v9 = (char *)*((void *)a2 + 3);
    }
    int v13 = 136315394;
    uint64_t v14 = v8;
    __int16 v15 = 2080;
    int64x2_t v16 = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "Handling app registration for app with bundle ID %s and asset path %s", (uint8_t *)&v13, 0x16u);
  }
  snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired((snlp::ssu::matcher::SSUMatcher *)((char *)this + 64), a2, a3);
  int v10 = *(unsigned __int8 *)(a3 + 56);
  uint64_t v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = "TRUE";
    if (!v10) {
      uint64_t v12 = "FALSE";
    }
    int v13 = 136315138;
    uint64_t v14 = (void *)v12;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Completed app registration with isSuccess=%s", (uint8_t *)&v13, 0xCu);
  }
  std::mutex::unlock(v6);
}

void sub_1C8E2A718(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUMatcher::deregisterApp(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  long long v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(char **)a2;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "Handling app deregistration for app with bundle ID %s", (uint8_t *)&v12, 0xCu);
  }
  snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(a1 + 64, a2, a3);
  if (!*(unsigned char *)(a3 + 56))
  {
    size_t v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        int v10 = a2;
      }
      else {
        int v10 = *(char **)a2;
      }
      int v12 = 136315138;
      int v13 = v10;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "Hit error when removing cache files for app %s. Returning false to signal that there was an error during de-registration.", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Completed app deregistration", (uint8_t *)&v12, 2u);
  }
  std::mutex::unlock(v6);
}

void sub_1C8E2A8BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUMatcher::handleUserShortcutsDatabaseChanged(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  long long v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    int v13 = 134217984;
    unint64_t v14 = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "Handling user shortcuts database change with %lu total configured shortcuts.", (uint8_t *)&v13, 0xCu);
  }
  snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired((snlp::ssu::matcher::SSUPersister *)(a1 + 64), a2, a3, v8);
  int v10 = *(unsigned __int8 *)(a3 + 56);
  uint64_t v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v12 = "TRUE";
    if (!v10) {
      int v12 = "FALSE";
    }
    int v13 = 136315138;
    unint64_t v14 = (unint64_t)v12;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "Completed user shortcuts database change handling with isSuccess=%s", (uint8_t *)&v13, 0xCu);
  }
  std::mutex::unlock(v6);
}

void sub_1C8E2AA2C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double snlp::ssu::matcher::SSUMatcher::handleUserRequest@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v10 = v5;
  snlp::ssu::proto::SSUValidatedRequest::validateRequest((unsigned __int8 *)a1, &v10, &v11);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v12)
  {
    snlp::ssu::matcher::SSUMatcher::getTriggeredAppCategories((snlp::ssu::cache::SSUCacheDirectory **)a1, v9);
    if (v9[0] != v9[1] || (_os_feature_enabled_impl() & 1) != 0) {
      snlp::ssu::matcher::SSURequestHandler::buildResponseForApps((long long *)(a1 + 168), v9, (snlp::ssu::proto::SSUValidatedRequest *)&v11);
    }
    __n128 v8 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "SSU";
      __int16 v14 = 2080;
      uint64_t v15 = "[insights-snlp-ssu]: ";
      _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sOutputting no SSU parses since there are no triggered (app, category) tuples", (uint8_t *)buf, 0x16u);
    }
    operator new();
  }
  unint64_t v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "Request failed validation. Aborting handling.", (uint8_t *)v9, 2u);
  }
  double result = 0.0;
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

void sub_1C8E2AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (a14)
  {
    if (a13) {
      (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUMatcher::getTriggeredAppCategories(snlp::ssu::cache::SSUCacheDirectory **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForLocale(this[41], (char *)this, &v14);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v14.__r_.__value_.__r.__words[0] != v14.__r_.__value_.__l.__size_)
  {
    if (!*v14.__r_.__value_.__l.__data_) {
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this + 3, (unsigned __int8 *)(v14.__r_.__value_.__r.__words[0] + 8));
    }
    snlp::ssu::trigger::buildTrigger();
  }
  uint64_t v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (snlp::ssu::cache::SSUCacheDirectory *)this;
    if (*((char *)this + 23) < 0) {
      uint64_t v5 = *this;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "SSU";
    __int16 v16 = 2080;
    uint64_t v17 = "[insights-snlp-ssu]: ";
    __int16 v18 = 2048;
    uint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3);
    v20[0] = 2080;
    *(void *)&v20[1] = v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[%s] %sFound %lu cache files in total for locale %s. Each of these were tested for triggering against the input request.", buf, 0x2Au);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    char v12 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SSU";
      __int16 v16 = 2080;
      uint64_t v17 = "[insights-snlp-ssu]: ";
      _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] %sNo app experiences were triggered", buf, 0x16u);
    }
  }
  else
  {
    do
    {
      __n128 v8 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v9 = (void *)(v6 + 8);
        if (*(char *)(v6 + 31) < 0) {
          unint64_t v9 = (void *)*v9;
        }
        unint64_t v10 = *(unsigned __int8 *)(v6 + 32);
        uint64_t v11 = "";
        if (v10 <= 3) {
          uint64_t v11 = EnumNamesSSUCategoryType(void)::names[v10];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "SSU";
        __int16 v16 = 2080;
        uint64_t v17 = "[insights-snlp-ssu]: ";
        __int16 v18 = 2080;
        uint64_t v19 = (uint64_t)v9;
        v20[0] = 2080;
        *(void *)&v20[1] = v11;
        _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sApp '%s' with category '%s' was triggered", buf, 0x2Au);
      }
      v6 += 40;
    }
    while (v6 != v7);
  }
  *(void *)buf = &v14;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C8E2B164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
}

void std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t *std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 40);
    v2 -= 40;
    char v6 = *(unsigned char *)(v2 + 4);
    *(_DWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(unsigned char *)(v4 + 4) = v6;
    long long v7 = *(_OWORD *)(v2 + 8);
    *(void *)(v4 + 24) = *(void *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v7;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 8) = 0;
    *(unsigned char *)(v4 + 32) = *(unsigned char *)(v2 + 32);
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *double result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::forward(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  v242[3] = *MEMORY[0x1E4F143B8];
  char v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  uint64_t v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Encoder Inference", "", buf, 2u);
    }
  }
  uint64_t v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encoder Inference\"", buf, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 8));
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedEmbeddingsTensor(a1, (uint64_t)a2, &v228);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedSpansTensor(a1, (uint64_t)a2, (uint64_t)&v224);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedContextTensor(a1, (uint64_t)a2, &v220);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddingMask(a1, a2, &v216);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPositionIds((nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel *)a1, &v212);
  memset(v202, 0, sizeof(v202));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v202, v228, (uint64_t)v229, (v229 - (unsigned char *)v228) >> 3);
  memset(v203, 0, sizeof(v203));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v203, v230, (uint64_t)v231, (v231 - (unsigned char *)v230) >> 2);
  memset(v204, 0, sizeof(v204));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v204, v224, (uint64_t)v225, (v225 - (unsigned char *)v224) >> 3);
  v118 = a2;
  memset(v205, 0, sizeof(v205));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v205, v226, (uint64_t)v227, (v227 - (unsigned char *)v226) >> 2);
  memset(v206, 0, sizeof(v206));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v206, v220, (uint64_t)v221, (v221 - (unsigned char *)v220) >> 3);
  memset(v207, 0, sizeof(v207));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v207, v222, (uint64_t)v223, (v223 - (unsigned char *)v222) >> 2);
  memset(v208, 0, sizeof(v208));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v208, v216, (uint64_t)v217, (v217 - (unsigned char *)v216) >> 3);
  memset(v209, 0, sizeof(v209));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v209, v218, (uint64_t)v219, (v219 - (unsigned char *)v218) >> 2);
  memset(v210, 0, sizeof(v210));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v210, v212, (uint64_t)v213, (v213 - (unsigned char *)v212) >> 3);
  memset(v211, 0, sizeof(v211));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v211, v214, (uint64_t)v215, (v215 - (unsigned char *)v214) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule **)(a1 + 8), (const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v202, (uint64_t)&v194);
  unint64_t v11 = *((void *)v198 + 1);
  char v12 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v13, OS_SIGNPOST_INTERVAL_END, v7, "Encoder Inference", "", buf, 2u);
    }
  }
  std::string v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEFAULT, "END \"Encoder Inference\"", buf, 2u);
  }
  uint64_t v15 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v16 = os_signpost_id_generate(v15);
  uint64_t v17 = SNLPOSLoggerForCategory(7);
  unint64_t v113 = v16 - 1;
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int16 v18 = v17;
    if (os_signpost_enabled(v17))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "Decoder Inference", "", buf, 2u);
    }
  }
  uint64_t v19 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_DEFAULT, "BEGIN \"Decoder Inference\"", buf, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 16));
  os_signpost_id_t spid = v16;
  int64x2_t v20 = operator new(8uLL);
  *int64x2_t v20 = 1;
  unsigned int NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 16), (unsigned __int8 *)(a1 + 208));
  uint64_t v22 = (float *)operator new(4uLL);
  *uint64_t v22 = (float)NetworkConfig;
  int v116 = operator new(8uLL);
  *int v116 = 1;
  v115 = operator new(4uLL);
  _DWORD *v115 = 0;
  uint64_t v23 = operator new(0x10uLL);
  v191 = v23 + 2;
  *uint64_t v23 = 1;
  v23[1] = v11;
  v189 = v23;
  v190 = v23 + 2;
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&v192, v11, buf);
  v184 = 0;
  v183 = 0;
  uint64_t v185 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v183, (const void *)v118[18], v118[19], (uint64_t)(v118[19] - v118[18]) >> 3);
  v187 = 0;
  v186 = 0;
  uint64_t v188 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)v118[21], v118[22], (uint64_t)(v118[22] - v118[21]) >> 2);
  int v121 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 16), (unsigned __int8 *)(a1 + 232));
  v181 = 0;
  v180 = 0;
  unint64_t v182 = 0;
  uint64_t v167 = 0;
  *(void *)buf = 0;
  uint64_t v168 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v20, (uint64_t)(v20 + 1), 1uLL);
  memset(v169, 0, sizeof(v169));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v169, v22, (uint64_t)(v22 + 1), 1uLL);
  memset(v170, 0, sizeof(v170));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v170, v198, (uint64_t)v199, (v199 - (unsigned char *)v198) >> 3);
  memset(v171, 0, sizeof(v171));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v171, v200, (uint64_t)v201, (v201 - (unsigned char *)v200) >> 2);
  memset(v172, 0, sizeof(v172));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v172, v189, (uint64_t)v190, (v190 - (unsigned char *)v189) >> 3);
  memset(v173, 0, sizeof(v173));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v173, v192, (uint64_t)v193, (v193 - (unsigned char *)v192) >> 2);
  memset(v174, 0, sizeof(v174));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v174, v194, (uint64_t)v195, (v195 - (unsigned char *)v194) >> 3);
  uint64_t v120 = a1;
  memset(v175, 0, sizeof(v175));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v175, v196, (uint64_t)v197, (v197 - (unsigned char *)v196) >> 2);
  memset(v176, 0, sizeof(v176));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v176, v116, (uint64_t)(v116 + 1), 1uLL);
  memset(v177, 0, sizeof(v177));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v177, v115, (uint64_t)(v115 + 1), 1uLL);
  memset(v178, 0, sizeof(v178));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v178, v183, (uint64_t)v184, (v184 - (unsigned char *)v183) >> 3);
  memset(v179, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v179, v186, (uint64_t)v187, (v187 - (unsigned char *)v186) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule **)(a1 + 16), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf, (uint64_t)v161);
  uint64_t v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = v118[24];
    LODWORD(v232) = 134217984;
    *(void *)((char *)&v232 + 4) = v25;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "Running beam search with beamWidth=%lu", (uint8_t *)&v232, 0xCu);
  }
  unint64_t v26 = v118[24];
  v159[0] = (uint64_t)(v162[1] - v162[0]) >> 2;
  v159[1] = v26;
  LODWORD(v232) = 0;
  std::vector<float>::vector(v160, v159[0], &v232);
  char v119 = a3;
  nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v159, (uint64_t)v162, v158);
  std::string::size_type v114 = v20;
  nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v159, (uint64_t)v158, &v156);
  int v27 = v156;
  long long v28 = v157;
  if (v156 != v157)
  {
    do
    {
      uint64_t v29 = *v27;
      BOOL v30 = *v27 == v121 || *(void *)(v120 + 48) == 1;
      v148[0] = v30;
      uint64_t v31 = operator new(8uLL);
      *uint64_t v31 = v29;
      v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v31 + 1);
      v141 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v31 + 1);
      std::locale v139 = v31;
      unint64_t v32 = v27 + 1;
      nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v232, (uint64_t)&v139, v32, v148, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      operator delete(v31);
      uint64_t v33 = v181;
      if ((unint64_t)v181 >= v182)
      {
        uint64_t v35 = 0x34F72C234F72C235 * ((v181 - v180) >> 3);
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) > 0x11A7B9611A7B961) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x69EE58469EE5846ALL * ((uint64_t)(v182 - (void)v180) >> 3) > v36) {
          unint64_t v36 = 0x69EE58469EE5846ALL * ((uint64_t)(v182 - (void)v180) >> 3);
        }
        if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v182 - (void)v180) >> 3)) >= 0x8D3DCB08D3DCB0) {
          unint64_t v37 = 0x11A7B9611A7B961;
        }
        else {
          unint64_t v37 = v36;
        }
        uint64_t v143 = &v182;
        if (v37) {
          unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        std::locale v139 = (void *)v37;
        v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v37 + 232 * v35);
        v141 = v140;
        unint64_t v142 = v37 + 232 * v38;
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v140, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
        v141 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v141 + 232);
        std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v180, &v139);
        uint64_t v34 = v181;
        std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v139);
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v181, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
        uint64_t v34 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v33 + 232);
      }
      v181 = v34;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
      int v27 = v32 + 2;
    }
    while (v27 != v28);
  }
  if (*(void *)(v120 + 48) >= 2uLL)
  {
    uint64_t v39 = 1;
    while (2)
    {
      uint64_t v112 = v39;
      v154 = 0;
      v153 = 0;
      v155[0] = 0;
      v40 = v180;
      unsigned __int8 v41 = v181;
      int v117 = v181;
      if (v180 != v181)
      {
        do
        {
          if (*((unsigned char *)v40 + 224))
          {
            uint64_t v42 = v154;
            if ((unint64_t)v154 >= v155[0])
            {
              uint64_t v74 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) > 0x11A7B9611A7B961) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3) > v75) {
                unint64_t v75 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3);
              }
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (void)v153) >> 3)) >= 0x8D3DCB08D3DCB0) {
                unint64_t v76 = 0x11A7B9611A7B961;
              }
              else {
                unint64_t v76 = v75;
              }
              v235 = v155;
              if (v76) {
                unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v76);
              }
              else {
                uint64_t v77 = 0;
              }
              *(void *)&long long v232 = v76;
              *((void *)&v232 + 1) = v76 + 232 * v74;
              v233 = (char *)*((void *)&v232 + 1);
              v234 = (char *)(v76 + 232 * v77);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*((nlv4_inference_orchestrator::inference_engine::Trail **)&v232 + 1), v40);
              v233 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v232);
              v43 = v154;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v232);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, v40);
              v43 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 + 232);
            }
            v154 = v43;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v43, 0x34F72C234F72C235 * ((v43 - v153) >> 3));
          }
          else
          {
            nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction(v40, &v232);
            nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v40, v236);
            nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v40, v237);
            memset(v238, 0, sizeof(v238));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v238, v194, (uint64_t)v195, (v195 - (unsigned char *)v194) >> 3);
            memset(v239, 0, sizeof(v239));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v239, v196, (uint64_t)v197, (v197 - (unsigned char *)v196) >> 2);
            nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v40, v240);
            memset(v241, 0, sizeof(v241));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v241, v183, (uint64_t)v184, (v184 - (unsigned char *)v183) >> 3);
            memset(v242, 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v242, v186, (uint64_t)v187, (v187 - (unsigned char *)v186) >> 2);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule **)(v120 + 16), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&v232, (uint64_t)v148);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v159, (uint64_t)&v149, v147);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v159, (uint64_t)v147, &v145);
            std::locale v139 = 0;
            v140 = 0;
            v141 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, *((const void **)v40 + 25), *((void *)v40 + 26), (uint64_t)(*((void *)v40 + 26) - *((void *)v40 + 25)) >> 3);
            v44 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
            v45 = v140;
            unint64_t v46 = *(void *)(v120 + 48);
            if (v139)
            {
              v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
              operator delete(v139);
            }
            uint64_t v47 = (float *)v145;
            v48 = v146;
            if (v145 != v146)
            {
              unint64_t v49 = (v45 - v44) >> 3;
              float v50 = *(float *)v40;
              do
              {
                if (*(void *)v47 == v121 || v49 >= v46)
                {
                  float v144 = v50 + v47[2];
                  v136 = 0;
                  std::string v137 = 0;
                  uint64_t v138 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v136, *((const void **)v40 + 25), *((void *)v40 + 26), (uint64_t)(*((void *)v40 + 26) - *((void *)v40 + 25)) >> 3);
                  char v135 = 1;
                  nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v40, &v130);
                  nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v40, &v125);
                  nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v40, v122);
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v139, (uint64_t)&v136, &v144, &v135, (uint64_t)&v130, (uint64_t)&v125, (uint64_t)v122);
                  if (__p)
                  {
                    int v124 = __p;
                    operator delete(__p);
                  }
                  if (v122[0])
                  {
                    v122[1] = v122[0];
                    operator delete(v122[0]);
                  }
                  if (v128)
                  {
                    v129 = v128;
                    operator delete(v128);
                  }
                  if (v125)
                  {
                    unsigned int v126 = (char *)v125;
                    operator delete(v125);
                  }
                  if (v133)
                  {
                    v134 = v133;
                    operator delete(v133);
                  }
                  if (v130)
                  {
                    int v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)v130;
                    operator delete(v130);
                  }
                  if (v136)
                  {
                    std::string v137 = v136;
                    operator delete(v136);
                  }
                  char v52 = v154;
                  if ((unint64_t)v154 >= v155[0])
                  {
                    uint64_t v62 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
                    unint64_t v63 = v62 + 1;
                    if ((unint64_t)(v62 + 1) > 0x11A7B9611A7B961) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3) > v63) {
                      unint64_t v63 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3);
                    }
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (void)v153) >> 3)) >= 0x8D3DCB08D3DCB0) {
                      unint64_t v64 = 0x11A7B9611A7B961;
                    }
                    else {
                      unint64_t v64 = v63;
                    }
                    v134 = v155;
                    if (v64) {
                      unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v64);
                    }
                    else {
                      uint64_t v65 = 0;
                    }
                    unsigned __int8 v130 = (void *)v64;
                    int v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v64 + 232 * v62);
                    unsigned int v132 = v131;
                    v133 = (void *)(v64 + 232 * v65);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v131, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    unsigned int v132 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v132 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v130);
                    uint64_t v53 = v154;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v130);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    uint64_t v53 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v52 + 232);
                  }
                  v154 = v53;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v53, 0x34F72C234F72C235 * ((v53 - v153) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                }
                else
                {
                  *(float *)int v122 = v50 + v47[2];
                  int v125 = 0;
                  unsigned int v126 = 0;
                  int v127 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v125, *((const void **)v40 + 25), *((void *)v40 + 26), (uint64_t)(*((void *)v40 + 26) - *((void *)v40 + 25)) >> 3);
                  v54 = v126;
                  if (v126 >= v127)
                  {
                    int v56 = (char *)v125;
                    uint64_t v57 = (v126 - (unsigned char *)v125) >> 3;
                    unint64_t v58 = v57 + 1;
                    if ((unint64_t)(v57 + 1) >> 61) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v59 = v127 - (unsigned char *)v125;
                    if ((v127 - (unsigned char *)v125) >> 2 > v58) {
                      unint64_t v58 = v59 >> 2;
                    }
                    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v60 = v58;
                    }
                    if (v60)
                    {
                      uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v60);
                      int v56 = (char *)v125;
                      v54 = v126;
                    }
                    else
                    {
                      uint64_t v61 = 0;
                    }
                    uint64_t v66 = &v61[8 * v57];
                    *(void *)uint64_t v66 = *(void *)v47;
                    v55 = v66 + 8;
                    while (v54 != v56)
                    {
                      uint64_t v67 = *((void *)v54 - 1);
                      v54 -= 8;
                      *((void *)v66 - 1) = v67;
                      v66 -= 8;
                    }
                    int v125 = v66;
                    unsigned int v126 = v55;
                    int v127 = &v61[8 * v60];
                    if (v56) {
                      operator delete(v56);
                    }
                  }
                  else
                  {
                    *(void *)unsigned int v126 = *(void *)v47;
                    v55 = v54 + 8;
                  }
                  unsigned int v126 = v55;
                  LOBYTE(v130) = 0;
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v139, (uint64_t)&v125, v122, &v130, (uint64_t)&v150, (uint64_t)&v151, (uint64_t)&v152);
                  int v68 = v154;
                  if ((unint64_t)v154 >= v155[0])
                  {
                    uint64_t v70 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
                    unint64_t v71 = v70 + 1;
                    if ((unint64_t)(v70 + 1) > 0x11A7B9611A7B961) {
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3) > v71) {
                      unint64_t v71 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (void)v153) >> 3);
                    }
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (void)v153) >> 3)) >= 0x8D3DCB08D3DCB0) {
                      unint64_t v72 = 0x11A7B9611A7B961;
                    }
                    else {
                      unint64_t v72 = v71;
                    }
                    v134 = v155;
                    if (v72) {
                      unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v72);
                    }
                    else {
                      uint64_t v73 = 0;
                    }
                    unsigned __int8 v130 = (void *)v72;
                    int v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v72 + 232 * v70);
                    unsigned int v132 = v131;
                    v133 = (void *)(v72 + 232 * v73);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v131, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    unsigned int v132 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v132 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v130);
                    int v69 = v154;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v130);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    int v69 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v68 + 232);
                  }
                  v154 = v69;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v69, 0x34F72C234F72C235 * ((v69 - v153) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                  if (v125)
                  {
                    unsigned int v126 = (char *)v125;
                    operator delete(v125);
                  }
                }
                v47 += 4;
              }
              while (v47 != v48);
              uint64_t v47 = (float *)v145;
            }
            a3 = v119;
            unsigned __int8 v41 = v117;
            if (v47) {
              operator delete(v47);
            }
            if (v147[0])
            {
              v147[1] = v147[0];
              operator delete(v147[0]);
            }
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v148);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&v232);
          }
          v40 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v40 + 232);
        }
        while (v40 != v41);
        v40 = v181;
        int v78 = v180;
        if (v181 != v180)
        {
          do
          {
            v40 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v40 - 232);
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail(v40);
          }
          while (v40 != v78);
          v40 = v78;
        }
      }
      v181 = v40;
      unint64_t v79 = v118[24];
      if (v79)
      {
        unint64_t v80 = 0;
        v81 = v154;
        do
        {
          int v82 = v153;
          if (v153 != v81)
          {
            int v83 = v181;
            if ((unint64_t)v181 >= v182)
            {
              uint64_t v85 = 0x34F72C234F72C235 * ((v181 - v180) >> 3);
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) > 0x11A7B9611A7B961) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              if (0x69EE58469EE5846ALL * ((uint64_t)(v182 - (void)v180) >> 3) > v86) {
                unint64_t v86 = 0x69EE58469EE5846ALL * ((uint64_t)(v182 - (void)v180) >> 3);
              }
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v182 - (void)v180) >> 3)) >= 0x8D3DCB08D3DCB0) {
                unint64_t v87 = 0x11A7B9611A7B961;
              }
              else {
                unint64_t v87 = v86;
              }
              v235 = &v182;
              if (v87) {
                unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v87);
              }
              else {
                uint64_t v88 = 0;
              }
              *(void *)&long long v232 = v87;
              *((void *)&v232 + 1) = v87 + 232 * v85;
              v233 = (char *)*((void *)&v232 + 1);
              v234 = (char *)(v87 + 232 * v88);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*((nlv4_inference_orchestrator::inference_engine::Trail **)&v232 + 1), v82);
              v233 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v180, &v232);
              int v84 = v181;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v232);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v181, v153);
              int v84 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v83 + 232);
            }
            v181 = v84;
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v154, 0x34F72C234F72C235 * ((v154 - v153) >> 3));
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v154 - 232));
            v154 = v81;
            unint64_t v79 = v118[24];
          }
          ++v80;
        }
        while (v80 < v79);
        v40 = v181;
      }
      for (uint64_t i = v180; ; uint64_t i = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)i + 232))
      {
        if (i == v40)
        {
          *(void *)&long long v232 = &v153;
          std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
          goto LABEL_154;
        }
        if (!*((unsigned char *)i + 224)) {
          break;
        }
      }
      *(void *)&long long v232 = &v153;
      std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
      uint64_t v39 = v112 + 1;
      if (*(void *)(v120 + 48) > (unint64_t)(v112 + 1)) {
        continue;
      }
      break;
    }
  }
LABEL_154:
  uint64_t v90 = SNLPOSLoggerForCategory(7);
  if (v113 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v91 = v90;
    if (os_signpost_enabled(v90))
    {
      LOWORD(v232) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v91, OS_SIGNPOST_INTERVAL_END, spid, "Decoder Inference", "", (uint8_t *)&v232, 2u);
    }
  }
  uint64_t v92 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v232) = 0;
    _os_log_impl(&dword_1C8DA9000, v92, OS_LOG_TYPE_DEFAULT, "END \"Decoder Inference\"", (uint8_t *)&v232, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(v120 + 8));
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(v120 + 16));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(a3);
  int v93 = v180;
  uint64_t v94 = v181;
  if (v180 != v181)
  {
    int v95 = (unint64_t *)(a3 + 2);
    do
    {
      int v96 = *(_DWORD *)v93;
      std::locale v139 = 0;
      v140 = 0;
      v141 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, *((const void **)v93 + 25), *((void *)v93 + 26), (uint64_t)(*((void *)v93 + 26) - *((void *)v93 + 25)) >> 3);
      uint64_t v97 = v139;
      int v98 = v140;
      uint64_t v99 = v141;
      v140 = 0;
      v141 = 0;
      std::locale v139 = 0;
      unint64_t v100 = a3[1];
      unint64_t v101 = a3[2];
      if (v100 >= v101)
      {
        uint64_t v103 = *a3;
        uint64_t v104 = (uint64_t)(v100 - *a3) >> 5;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 59) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v106 = v101 - v103;
        if (v106 >> 4 > v105) {
          unint64_t v105 = v106 >> 4;
        }
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v107 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v105;
        }
        v235 = v95;
        int v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v107);
        int v109 = &v108[32 * v104];
        *(void *)&long long v232 = v108;
        *((void *)&v232 + 1) = v109;
        v234 = &v108[32 * v110];
        *(_DWORD *)int v109 = v96;
        *((void *)v109 + 1) = v97;
        *((void *)v109 + 2) = 0;
        *((void *)v109 + 2) = v98;
        *((void *)v109 + 3) = v99;
        v233 = v109 + 32;
        a3 = v119;
        std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(v119, &v232);
        uint64_t v102 = v119[1];
        std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer((uint64_t)&v232);
      }
      else
      {
        *(_DWORD *)unint64_t v100 = v96;
        *(void *)(v100 + 8) = v97;
        *(void *)(v100 + 16) = v98;
        uint64_t v102 = v100 + 32;
        *(void *)(v100 + 24) = v99;
      }
      a3[1] = v102;
      if (v139)
      {
        v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
        operator delete(v139);
      }
      int v93 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v93 + 232);
    }
    while (v93 != v94);
  }
  if (v156) {
    operator delete(v156);
  }
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v161);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf);
  *(void *)buf = &v180;
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  operator delete(v115);
  operator delete(v116);
  operator delete(v22);
  operator delete(v114);
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v202);
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
}

void sub_1C8E2CAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  os_signpost_id_t v16 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v17;
    operator delete(v17);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x3D0]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&STACK[0x490]);
  STACK[0x490] = (unint64_t)&STACK[0x5B8];
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  __int16 v18 = (void *)STACK[0x5E8];
  if (STACK[0x5E8])
  {
    STACK[0x5F0] = (unint64_t)v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v19;
    operator delete(v19);
  }
  int64x2_t v20 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)STACK[0x600];
  if (STACK[0x600])
  {
    STACK[0x608] = (unint64_t)v21;
    operator delete(v21);
  }
  operator delete(a14);
  operator delete(a15);
  operator delete(a13);
  operator delete(a12);
  uint64_t v22 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v25;
    operator delete(v25);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&STACK[0x690]);
  unint64_t v26 = (void *)STACK[0x798];
  if (STACK[0x798])
  {
    STACK[0x7A0] = (unint64_t)v26;
    operator delete(v26);
  }
  int v27 = (void *)STACK[0x780];
  if (STACK[0x780])
  {
    STACK[0x788] = (unint64_t)v27;
    operator delete(v27);
  }
  long long v28 = (void *)STACK[0x7C8];
  if (STACK[0x7C8])
  {
    STACK[0x7D0] = (unint64_t)v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)STACK[0x7B0];
  if (STACK[0x7B0])
  {
    STACK[0x7B8] = (unint64_t)v29;
    operator delete(v29);
  }
  BOOL v30 = (void *)STACK[0x7F8];
  if (STACK[0x7F8])
  {
    STACK[0x800] = (unint64_t)v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)STACK[0x7E0];
  if (STACK[0x7E0])
  {
    STACK[0x7E8] = (unint64_t)v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)STACK[0x828];
  if (STACK[0x828])
  {
    STACK[0x830] = (unint64_t)v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)STACK[0x810];
  if (STACK[0x810])
  {
    STACK[0x818] = (unint64_t)v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)STACK[0x858];
  if (STACK[0x858])
  {
    STACK[0x860] = (unint64_t)v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)STACK[0x840];
  if (STACK[0x840])
  {
    STACK[0x848] = (unint64_t)v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedEmbeddingsTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  unsigned int v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 88));
  uint64_t v8 = (void *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor(a2, NetworkConfig, v7, (uint64_t *)(a1 + 24), a3, *(float *)(a1 + 56));
  if (*a3 == a3[1])
  {
    uint64_t v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v10 = 136315138;
      unint64_t v11 = v8;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] Padding of the embeddings input is required to execute model inference", (uint8_t *)&v10, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedSpansTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  unint64_t v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 112));
  uint64_t v8 = a2 + 48;
  uint64_t v9 = (void *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor(v8, NetworkConfig, v7, (uint64_t *)(a1 + 24), (_OWORD *)a3, *(float *)(a1 + 56));
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    int v10 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      int v11 = 136315138;
      uint64_t v12 = v9;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_ERROR, "[%s] Padding of the span input is required to execute model inference", (uint8_t *)&v11, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedContextTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 112));
  uint64_t v7 = a2 + 96;
  uint64_t v8 = (void *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padContextTensor(v7, NetworkConfig, (uint64_t *)(a1 + 24), a3, *(float *)(a1 + 56));
  if (*a3 == a3[1])
  {
    uint64_t v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v10 = 136315138;
      int v11 = v8;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] Padding of the context input is required to execute model inference", (uint8_t *)&v10, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddingMask(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  int v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 184));
  unsigned int v8 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 160));
  uint64_t v9 = v8;
  int v10 = (float *)a2[21];
  if (v10 == (float *)a2[22] || (uint64_t v11 = a2[12], (unint64_t)(a2[13] - v11) >= 0x11))
  {
    uint64_t v12 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v29 = v13;
      _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_ERROR, "[%s] Invalid featurization input provided to the model.  Expected a non-empty utterance length tensor and a context tensor of at least two dimensions.", buf, 0xCu);
    }
    a3[1] = 0;
    *a3 = 0;
    a3[2] = 0;
    std::string v14 = operator new(0x10uLL);
    *a3 = v14;
    a3[2] = v14 + 2;
    *std::string v14 = 1;
    v14[1] = v9 + NetworkConfig;
    a3[1] = v14 + 2;
    std::vector<float>::vector(a3 + 3, v9 + NetworkConfig, (_DWORD *)(a1 + 56));
  }
  else
  {
    float v15 = *v10;
    uint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = v8 + NetworkConfig;
    std::vector<float>::vector(&__b, v17, (_DWORD *)(a1 + 56));
    unint64_t v18 = (unint64_t)v15;
    uint64_t v19 = (char *)__b;
    if ((uint64_t)(unint64_t)v15 >= 1) {
      memset_pattern16(__b, &unk_1C8F38660, 4 * (v18 - ((v18 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
    }
    if (NetworkConfig >= v18)
    {
      if (v16)
      {
        uint64_t v23 = (float *)a2[15];
        uint64_t v24 = &v19[4 * NetworkConfig];
        do
        {
          if ((unint64_t)*v23 != v7) {
            *(_DWORD *)uint64_t v24 = 1065353216;
          }
          v24 += 4;
          ++v23;
          --v16;
        }
        while (v16);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v25 = operator new(0x10uLL);
      a3[1] = v25 + 2;
      a3[2] = v25 + 2;
      *uint64_t v25 = 1;
      v25[1] = v17;
      *a3 = v25;
      a3[4] = 0;
      a3[5] = 0;
      a3[3] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, v19, (uint64_t)v27, (v27 - v19) >> 2);
    }
    else
    {
      int64x2_t v20 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = (void *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          uint64_t v21 = (void *)*v21;
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v29 = v21;
        __int16 v30 = 2048;
        unint64_t v31 = (unint64_t)v15;
        __int16 v32 = 2048;
        unint64_t v33 = NetworkConfig;
        _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, "[%s] The utterance length (%lu) exceeds the maximum utterance length (%lu).", buf, 0x20u);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v22 = operator new(0x10uLL);
      a3[1] = v22 + 2;
      a3[2] = v22 + 2;
      *uint64_t v22 = 1;
      v22[1] = v17;
      *a3 = v22;
      std::vector<float>::vector(a3 + 3, v9 + NetworkConfig, (_DWORD *)(a1 + 56));
    }
    if (__b)
    {
      int v27 = __b;
      operator delete(__b);
    }
  }
}

void sub_1C8E2D7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPositionIds(nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel *this@<X0>, void *a2@<X8>)
{
  unint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 64);
  std::vector<float>::vector(&__p, NetworkConfig);
  uint64_t v4 = __p;
  uint64_t v5 = (uint64_t)v10;
  if (__p != v10)
  {
    float v6 = 0.0;
    int v7 = (float *)__p;
    do
    {
      *v7++ = v6;
      float v6 = v6 + 1.0;
    }
    while (v7 != (float *)v5);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v8 = operator new(0x10uLL);
  a2[1] = v8 + 2;
  a2[2] = v8 + 2;
  void *v8 = 1;
  v8[1] = NetworkConfig;
  *a2 = v8;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_1C8E2D8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

nlv4_inference_orchestrator::inference_engine::Trail *nlv4_inference_orchestrator::inference_engine::Trail::Trail(nlv4_inference_orchestrator::inference_engine::Trail *this, const nlv4_inference_orchestrator::inference_engine::Trail *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 13, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 16, *((const void **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 19, *((const void **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 3);
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 22, *((const void **)a2 + 22), *((void *)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 2);
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 25, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  *((unsigned char *)this + 224) = *((unsigned char *)a2 + 224);
  return this;
}

void sub_1C8E2DA74(_Unwind_Exception *a1)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v4);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v2);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C8E2DAE0()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8E2DAD0);
}

void sub_1C8E2DAF8()
{
}

void sub_1C8E2DB00()
{
  uint64_t v2 = *v0;
  if (*v0)
  {
    *(void *)(v1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8E2DAD8);
}

void nlv4_inference_orchestrator::inference_engine::Trail::~Trail(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  unsigned int v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v50 = v3;
    uint64_t v51 = v4;
    unint64_t v6 = v5 >> 1;
    int v7 = (float *)(a1 + 232 * (v5 >> 1));
    unsigned int v8 = (float *)(a2 - 232);
    if (*v7 < *(float *)(a2 - 232))
    {
      float v30 = *(float *)(a2 - 232);
      long long v31 = *(_OWORD *)(a2 - 224);
      uint64_t v32 = *(void *)(a2 - 208);
      *(void *)(a2 - 224) = 0;
      *(void *)(a2 - 216) = 0;
      *(void *)(a2 - 208) = 0;
      long long v33 = *(_OWORD *)(a2 - 200);
      uint64_t v34 = *(void *)(a2 - 184);
      *(void *)(a2 - 200) = 0;
      *(void *)(a2 - 192) = 0;
      *(void *)(a2 - 184) = 0;
      long long v35 = *(_OWORD *)(a2 - 176);
      uint64_t v36 = *(void *)(a2 - 160);
      *(void *)(a2 - 176) = 0;
      *(void *)(a2 - 168) = 0;
      *(void *)(a2 - 160) = 0;
      long long v37 = *(_OWORD *)(a2 - 152);
      uint64_t v38 = *(void *)(a2 - 136);
      *(void *)(a2 - 152) = 0;
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      long long v39 = *(_OWORD *)(a2 - 128);
      uint64_t v40 = *(void *)(a2 - 112);
      *(void *)(a2 - 128) = 0;
      *(void *)(a2 - 120) = 0;
      *(void *)(a2 - 112) = 0;
      long long v41 = *(_OWORD *)(a2 - 104);
      uint64_t v42 = *(void *)(a2 - 88);
      *(void *)(a2 - 104) = 0;
      *(void *)(a2 - 96) = 0;
      *(void *)(a2 - 88) = 0;
      long long v43 = *(_OWORD *)(a2 - 80);
      uint64_t v44 = *(void *)(a2 - 64);
      *(void *)(a2 - 80) = 0;
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      long long v45 = *(_OWORD *)(a2 - 56);
      uint64_t v46 = *(void *)(a2 - 40);
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      long long v47 = *(_OWORD *)(a2 - 32);
      uint64_t v48 = *(void *)(a2 - 16);
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      char v49 = *(unsigned char *)(a2 - 8);
      float v9 = *v7;
      do
      {
        int v10 = v7;
        float *v8 = v9;
        uint64_t v11 = (void *)*((void *)v8 + 1);
        if (v11)
        {
          *((void *)v8 + 2) = v11;
          operator delete(v11);
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 2) = 0;
          *((void *)v8 + 3) = 0;
        }
        *(_OWORD *)(v8 + 2) = *(_OWORD *)(v10 + 2);
        *((void *)v8 + 3) = *((void *)v10 + 3);
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *((void *)v10 + 3) = 0;
        uint64_t v12 = (void *)*((void *)v8 + 4);
        if (v12)
        {
          *((void *)v8 + 5) = v12;
          operator delete(v12);
          *((void *)v8 + 4) = 0;
          *((void *)v8 + 5) = 0;
          *((void *)v8 + 6) = 0;
        }
        *((_OWORD *)v8 + 2) = *((_OWORD *)v10 + 2);
        *((void *)v8 + 6) = *((void *)v10 + 6);
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = 0;
        *((void *)v10 + 6) = 0;
        uint64_t v13 = (void *)*((void *)v8 + 7);
        if (v13)
        {
          *((void *)v8 + 8) = v13;
          operator delete(v13);
          *((void *)v8 + 7) = 0;
          *((void *)v8 + 8) = 0;
          *((void *)v8 + 9) = 0;
        }
        *(_OWORD *)(v8 + 14) = *(_OWORD *)(v10 + 14);
        *((void *)v8 + 9) = *((void *)v10 + 9);
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 9) = 0;
        std::string v14 = (void *)*((void *)v8 + 10);
        if (v14)
        {
          *((void *)v8 + 11) = v14;
          operator delete(v14);
          *((void *)v8 + 10) = 0;
          *((void *)v8 + 11) = 0;
          *((void *)v8 + 12) = 0;
        }
        *((_OWORD *)v8 + 5) = *((_OWORD *)v10 + 5);
        *((void *)v8 + 12) = *((void *)v10 + 12);
        *((void *)v10 + 10) = 0;
        *((void *)v10 + 11) = 0;
        *((void *)v10 + 12) = 0;
        float v15 = (void *)*((void *)v8 + 13);
        if (v15)
        {
          *((void *)v8 + 14) = v15;
          operator delete(v15);
          *((void *)v8 + 13) = 0;
          *((void *)v8 + 14) = 0;
          *((void *)v8 + 15) = 0;
        }
        *(_OWORD *)(v8 + 26) = *(_OWORD *)(v10 + 26);
        *((void *)v8 + 15) = *((void *)v10 + 15);
        *((void *)v10 + 13) = 0;
        *((void *)v10 + 14) = 0;
        *((void *)v10 + 15) = 0;
        uint64_t v16 = (void *)*((void *)v8 + 16);
        if (v16)
        {
          *((void *)v8 + 17) = v16;
          operator delete(v16);
          *((void *)v8 + 16) = 0;
          *((void *)v8 + 17) = 0;
          *((void *)v8 + 18) = 0;
        }
        *((_OWORD *)v8 + 8) = *((_OWORD *)v10 + 8);
        *((void *)v8 + 18) = *((void *)v10 + 18);
        *((void *)v10 + 16) = 0;
        *((void *)v10 + 17) = 0;
        *((void *)v10 + 18) = 0;
        unint64_t v17 = (void *)*((void *)v8 + 19);
        if (v17)
        {
          *((void *)v8 + 20) = v17;
          operator delete(v17);
          *((void *)v8 + 19) = 0;
          *((void *)v8 + 20) = 0;
          *((void *)v8 + 21) = 0;
        }
        *(_OWORD *)(v8 + 38) = *(_OWORD *)(v10 + 38);
        *((void *)v8 + 21) = *((void *)v10 + 21);
        *((void *)v10 + 19) = 0;
        *((void *)v10 + 20) = 0;
        *((void *)v10 + 21) = 0;
        unint64_t v18 = (void *)*((void *)v8 + 22);
        if (v18)
        {
          *((void *)v8 + 23) = v18;
          operator delete(v18);
          *((void *)v8 + 22) = 0;
          *((void *)v8 + 23) = 0;
          *((void *)v8 + 24) = 0;
        }
        *((_OWORD *)v8 + 11) = *((_OWORD *)v10 + 11);
        *((void *)v8 + 24) = *((void *)v10 + 24);
        *((void *)v10 + 22) = 0;
        *((void *)v10 + 23) = 0;
        *((void *)v10 + 24) = 0;
        uint64_t v19 = (void *)*((void *)v8 + 25);
        if (v19)
        {
          *((void *)v8 + 26) = v19;
          operator delete(v19);
          *((void *)v8 + 25) = 0;
          *((void *)v8 + 26) = 0;
          *((void *)v8 + 27) = 0;
        }
        *(_OWORD *)(v8 + 50) = *(_OWORD *)(v10 + 50);
        *((void *)v8 + 27) = *((void *)v10 + 27);
        *((void *)v10 + 25) = 0;
        *((void *)v10 + 26) = 0;
        *((void *)v10 + 27) = 0;
        *((unsigned char *)v8 + 224) = *((unsigned char *)v10 + 224);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        int v7 = (float *)(a1 + 232 * v6);
        float v9 = *v7;
        unsigned int v8 = v10;
      }
      while (*v7 < v30);
      *int v10 = v30;
      int64x2_t v20 = (void *)*((void *)v10 + 1);
      if (v20)
      {
        *((void *)v10 + 2) = v20;
        operator delete(v20);
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *((void *)v10 + 3) = 0;
      }
      *(_OWORD *)(v10 + 2) = v31;
      *((void *)v10 + 3) = v32;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      uint64_t v21 = (void *)*((void *)v10 + 4);
      if (v21)
      {
        *((void *)v10 + 5) = v21;
        operator delete(v21);
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = 0;
        *((void *)v10 + 6) = 0;
      }
      *((_OWORD *)v10 + 2) = v33;
      *((void *)v10 + 6) = v34;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      uint64_t v22 = (void *)*((void *)v10 + 7);
      if (v22)
      {
        *((void *)v10 + 8) = v22;
        operator delete(v22);
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 9) = 0;
      }
      *(_OWORD *)(v10 + 14) = v35;
      *((void *)v10 + 9) = v36;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      uint64_t v23 = (void *)*((void *)v10 + 10);
      if (v23)
      {
        *((void *)v10 + 11) = v23;
        operator delete(v23);
        *((void *)v10 + 10) = 0;
        *((void *)v10 + 11) = 0;
        *((void *)v10 + 12) = 0;
      }
      *((_OWORD *)v10 + 5) = v37;
      *((void *)v10 + 12) = v38;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      uint64_t v24 = (void *)*((void *)v10 + 13);
      if (v24)
      {
        *((void *)v10 + 14) = v24;
        operator delete(v24);
        *((void *)v10 + 13) = 0;
        *((void *)v10 + 14) = 0;
        *((void *)v10 + 15) = 0;
      }
      *(_OWORD *)(v10 + 26) = v39;
      *((void *)v10 + 15) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      uint64_t v25 = (void *)*((void *)v10 + 16);
      if (v25)
      {
        *((void *)v10 + 17) = v25;
        operator delete(v25);
        *((void *)v10 + 16) = 0;
        *((void *)v10 + 17) = 0;
        *((void *)v10 + 18) = 0;
      }
      *((_OWORD *)v10 + 8) = v41;
      *((void *)v10 + 18) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      unint64_t v26 = (void *)*((void *)v10 + 19);
      if (v26)
      {
        *((void *)v10 + 20) = v26;
        operator delete(v26);
        *((void *)v10 + 19) = 0;
        *((void *)v10 + 20) = 0;
        *((void *)v10 + 21) = 0;
      }
      *(_OWORD *)(v10 + 38) = v43;
      *((void *)v10 + 21) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      int v27 = (void *)*((void *)v10 + 22);
      if (v27)
      {
        *((void *)v10 + 23) = v27;
        operator delete(v27);
        *((void *)v10 + 22) = 0;
        *((void *)v10 + 23) = 0;
        *((void *)v10 + 24) = 0;
      }
      *((_OWORD *)v10 + 11) = v45;
      *((void *)v10 + 24) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      long long v28 = (void *)*((void *)v10 + 25);
      if (v28)
      {
        *((void *)v10 + 26) = v28;
        operator delete(v28);
        *((void *)v10 + 25) = 0;
        *((void *)v10 + 26) = 0;
        *((void *)v10 + 27) = 0;
      }
      *(_OWORD *)(v10 + 50) = v47;
      *((void *)v10 + 27) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *((unsigned char *)v10 + 224) = v49;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v30);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)a1;
    uint64_t v68 = 0;
    long long v67 = 0uLL;
    long long v67 = *(_OWORD *)(a1 + 8);
    uint64_t v68 = *(void *)(a1 + 24);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v70 = 0;
    long long v69 = 0uLL;
    long long v69 = *(_OWORD *)(a1 + 32);
    uint64_t v70 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    long long v71 = 0uLL;
    uint64_t v72 = 0;
    long long v71 = *(_OWORD *)(a1 + 56);
    uint64_t v72 = *(void *)(a1 + 72);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    long long v73 = 0uLL;
    uint64_t v74 = 0;
    long long v73 = *(_OWORD *)(a1 + 80);
    uint64_t v74 = *(void *)(a1 + 96);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    long long v75 = 0uLL;
    uint64_t v76 = 0;
    long long v75 = *(_OWORD *)(a1 + 104);
    uint64_t v76 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    long long v77 = 0uLL;
    uint64_t v78 = 0;
    long long v77 = *(_OWORD *)(a1 + 128);
    uint64_t v78 = *(void *)(a1 + 144);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    long long v79 = 0uLL;
    uint64_t v80 = 0;
    long long v79 = *(_OWORD *)(a1 + 152);
    uint64_t v80 = *(void *)(a1 + 168);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    long long v81 = 0uLL;
    uint64_t v82 = 0;
    long long v81 = *(_OWORD *)(a1 + 176);
    uint64_t v82 = *(void *)(a1 + 192);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    long long v83 = *(_OWORD *)(a1 + 200);
    uint64_t v84 = *(void *)(a1 + 216);
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    char v85 = *(unsigned char *)(a1 + 224);
    int64_t v64 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v5 = a1;
    int v66 = v4;
    do
    {
      uint64_t v6 = v5 + 232 * v3 + 232;
      uint64_t v7 = 2 * v3;
      uint64_t v3 = (2 * v3) | 1;
      uint64_t v8 = v7 + 2;
      if (v8 < a3 && *(float *)v6 < *(float *)(v6 + 232))
      {
        v6 += 232;
        uint64_t v3 = v8;
      }
      float v9 = (void *)(v6 + 8);
      *(_DWORD *)uint64_t v5 = *(_DWORD *)v6;
      int v10 = *(void **)(v5 + 8);
      if (v10)
      {
        *(void *)(v5 + 16) = v10;
        operator delete(v10);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
      }
      *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
      *(void *)(v5 + 24) = *(void *)(v6 + 24);
      void *v9 = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      uint64_t v11 = *(void **)(v5 + 32);
      if (v11)
      {
        *(void *)(v5 + 40) = v11;
        operator delete(v11);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
      }
      uint64_t v12 = (void *)(v6 + 32);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
      *(void *)(v5 + 48) = *(void *)(v6 + 48);
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      uint64_t v13 = *(void **)(v5 + 56);
      if (v13)
      {
        *(void *)(v5 + 64) = v13;
        operator delete(v13);
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
      }
      std::string v14 = (void *)(v6 + 56);
      *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
      *(void *)(v5 + 72) = *(void *)(v6 + 72);
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      float v15 = *(void **)(v5 + 80);
      if (v15)
      {
        *(void *)(v5 + 88) = v15;
        operator delete(v15);
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        *(void *)(v5 + 96) = 0;
      }
      uint64_t v16 = (void *)(v6 + 80);
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(v6 + 80);
      *(void *)(v5 + 96) = *(void *)(v6 + 96);
      *(void *)(v6 + 80) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      unint64_t v17 = *(void **)(v5 + 104);
      if (v17)
      {
        *(void *)(v5 + 112) = v17;
        operator delete(v17);
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
      }
      unint64_t v18 = (void *)(v6 + 104);
      *(_OWORD *)(v5 + 104) = *(_OWORD *)(v6 + 104);
      *(void *)(v5 + 120) = *(void *)(v6 + 120);
      *(void *)(v6 + 104) = 0;
      *(void *)(v6 + 112) = 0;
      *(void *)(v6 + 120) = 0;
      uint64_t v19 = *(void **)(v5 + 128);
      if (v19)
      {
        *(void *)(v5 + 136) = v19;
        operator delete(v19);
        *(void *)(v5 + 128) = 0;
        *(void *)(v5 + 136) = 0;
        *(void *)(v5 + 144) = 0;
      }
      int64x2_t v20 = (void *)(v6 + 128);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(v6 + 128);
      *(void *)(v5 + 144) = *(void *)(v6 + 144);
      *(void *)(v6 + 128) = 0;
      *(void *)(v6 + 136) = 0;
      *(void *)(v6 + 144) = 0;
      uint64_t v21 = *(void **)(v5 + 152);
      if (v21)
      {
        *(void *)(v5 + 160) = v21;
        operator delete(v21);
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        *(void *)(v5 + 168) = 0;
      }
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v6 + 152);
      *(void *)(v5 + 168) = *(void *)(v6 + 168);
      *(void *)(v6 + 152) = 0;
      *(void *)(v6 + 160) = 0;
      uint64_t v62 = (void *)(v6 + 152);
      *(void *)(v6 + 168) = 0;
      uint64_t v22 = *(void **)(v5 + 176);
      if (v22)
      {
        *(void *)(v5 + 184) = v22;
        operator delete(v22);
        *(void *)(v5 + 176) = 0;
        *(void *)(v5 + 184) = 0;
        *(void *)(v5 + 192) = 0;
      }
      *(_OWORD *)(v5 + 176) = *(_OWORD *)(v6 + 176);
      *(void *)(v5 + 192) = *(void *)(v6 + 192);
      *(void *)(v6 + 176) = 0;
      *(void *)(v6 + 184) = 0;
      unint64_t v63 = (void *)(v6 + 176);
      *(void *)(v6 + 192) = 0;
      uint64_t v23 = *(void **)(v5 + 200);
      if (v23)
      {
        *(void *)(v5 + 208) = v23;
        operator delete(v23);
        *(void *)(v5 + 200) = 0;
        *(void *)(v5 + 208) = 0;
        *(void *)(v5 + 216) = 0;
      }
      uint64_t v24 = (void *)(v6 + 200);
      *(_OWORD *)(v5 + 200) = *(_OWORD *)(v6 + 200);
      *(void *)(v5 + 216) = *(void *)(v6 + 216);
      *(void *)(v6 + 200) = 0;
      *(void *)(v6 + 208) = 0;
      *(void *)(v6 + 216) = 0;
      *(unsigned char *)(v5 + 224) = *(unsigned char *)(v6 + 224);
      uint64_t v5 = v6;
    }
    while (v3 <= v64);
    if (a2 - 232 == v6)
    {
      *(_DWORD *)uint64_t v6 = v66;
      uint64_t v51 = *(void **)(v6 + 8);
      if (v51)
      {
        *(void *)(v6 + 16) = v51;
        operator delete(v51);
        void *v9 = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
      }
      *(_OWORD *)(v6 + 8) = v67;
      *(void *)(v6 + 24) = v68;
      long long v67 = 0uLL;
      uint64_t v68 = 0;
      char v52 = *(void **)(v6 + 32);
      if (v52)
      {
        *(void *)(v6 + 40) = v52;
        operator delete(v52);
        *uint64_t v12 = 0;
        *(void *)(v6 + 40) = 0;
        *(void *)(v6 + 48) = 0;
      }
      *(_OWORD *)(v6 + 32) = v69;
      *(void *)(v6 + 48) = v70;
      long long v69 = 0uLL;
      uint64_t v70 = 0;
      uint64_t v53 = *(void **)(v6 + 56);
      if (v53)
      {
        *(void *)(v6 + 64) = v53;
        operator delete(v53);
        *std::string v14 = 0;
        *(void *)(v6 + 64) = 0;
        *(void *)(v6 + 72) = 0;
      }
      *(_OWORD *)(v6 + 56) = v71;
      *(void *)(v6 + 72) = v72;
      long long v71 = 0uLL;
      uint64_t v72 = 0;
      v54 = *(void **)(v6 + 80);
      if (v54)
      {
        *(void *)(v6 + 88) = v54;
        operator delete(v54);
        *uint64_t v16 = 0;
        *(void *)(v6 + 88) = 0;
        *(void *)(v6 + 96) = 0;
      }
      *(_OWORD *)(v6 + 80) = v73;
      *(void *)(v6 + 96) = v74;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
      v55 = *(void **)(v6 + 104);
      if (v55)
      {
        *(void *)(v6 + 112) = v55;
        operator delete(v55);
        *unint64_t v18 = 0;
        *(void *)(v6 + 112) = 0;
        *(void *)(v6 + 120) = 0;
      }
      *(_OWORD *)(v6 + 104) = v75;
      *(void *)(v6 + 120) = v76;
      long long v75 = 0uLL;
      uint64_t v76 = 0;
      int v56 = *(void **)(v6 + 128);
      if (v56)
      {
        *(void *)(v6 + 136) = v56;
        operator delete(v56);
        *int64x2_t v20 = 0;
        *(void *)(v6 + 136) = 0;
        *(void *)(v6 + 144) = 0;
      }
      *(_OWORD *)(v6 + 128) = v77;
      *(void *)(v6 + 144) = v78;
      long long v77 = 0uLL;
      uint64_t v78 = 0;
      uint64_t v57 = *(void **)(v6 + 152);
      if (v57)
      {
        *(void *)(v6 + 160) = v57;
        operator delete(v57);
        *uint64_t v62 = 0;
        *(void *)(v6 + 160) = 0;
        *(void *)(v6 + 168) = 0;
      }
      *(_OWORD *)(v6 + 152) = v79;
      *(void *)(v6 + 168) = v80;
      long long v79 = 0uLL;
      uint64_t v80 = 0;
      unint64_t v58 = *(void **)(v6 + 176);
      if (v58)
      {
        *(void *)(v6 + 184) = v58;
        operator delete(v58);
        void *v63 = 0;
        *(void *)(v6 + 184) = 0;
        *(void *)(v6 + 192) = 0;
      }
      *(_OWORD *)(v6 + 176) = v81;
      *(void *)(v6 + 192) = v82;
      long long v81 = 0uLL;
      uint64_t v82 = 0;
      uint64_t v59 = *(void **)(v6 + 200);
      if (v59)
      {
        *(void *)(v6 + 208) = v59;
        operator delete(v59);
        *uint64_t v24 = 0;
        *(void *)(v6 + 208) = 0;
        *(void *)(v6 + 216) = 0;
      }
      *(_OWORD *)(v6 + 200) = v83;
      *(void *)(v6 + 216) = v84;
      long long v83 = 0uLL;
      uint64_t v84 = 0;
      *(unsigned char *)(v6 + 224) = v85;
    }
    else
    {
      *(_DWORD *)uint64_t v6 = *(_DWORD *)(a2 - 232);
      uint64_t v25 = *(void **)(v6 + 8);
      if (v25)
      {
        *(void *)(v6 + 16) = v25;
        operator delete(v25);
        void *v9 = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
      }
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 - 224);
      *(void *)(v6 + 24) = *(void *)(a2 - 208);
      *(void *)(a2 - 224) = 0;
      *(void *)(a2 - 216) = 0;
      *(void *)(a2 - 208) = 0;
      unint64_t v26 = (void *)(a2 - 200);
      int v27 = *(void **)(v6 + 32);
      if (v27)
      {
        *(void *)(v6 + 40) = v27;
        operator delete(v27);
        *uint64_t v12 = 0;
        *(void *)(v6 + 40) = 0;
        *(void *)(v6 + 48) = 0;
      }
      *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 - 200);
      *(void *)(v6 + 48) = *(void *)(a2 - 184);
      void *v26 = 0;
      *(void *)(a2 - 192) = 0;
      *(void *)(a2 - 184) = 0;
      long long v28 = (void *)(a2 - 176);
      uint64_t v29 = *(void **)(v6 + 56);
      if (v29)
      {
        *(void *)(v6 + 64) = v29;
        operator delete(v29);
        *std::string v14 = 0;
        *(void *)(v6 + 64) = 0;
        *(void *)(v6 + 72) = 0;
      }
      *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 - 176);
      *(void *)(v6 + 72) = *(void *)(a2 - 160);
      *long long v28 = 0;
      *(void *)(a2 - 168) = 0;
      *(void *)(a2 - 160) = 0;
      float v30 = (void *)(a2 - 152);
      long long v31 = *(void **)(v6 + 80);
      if (v31)
      {
        *(void *)(v6 + 88) = v31;
        operator delete(v31);
        *uint64_t v16 = 0;
        *(void *)(v6 + 88) = 0;
        *(void *)(v6 + 96) = 0;
      }
      *(_OWORD *)(v6 + 80) = *(_OWORD *)(a2 - 152);
      *(void *)(v6 + 96) = *(void *)(a2 - 136);
      *float v30 = 0;
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      uint64_t v32 = (void *)(a2 - 128);
      long long v33 = *(void **)(v6 + 104);
      if (v33)
      {
        *(void *)(v6 + 112) = v33;
        operator delete(v33);
        *unint64_t v18 = 0;
        *(void *)(v6 + 112) = 0;
        *(void *)(v6 + 120) = 0;
      }
      *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 - 128);
      *(void *)(v6 + 120) = *(void *)(a2 - 112);
      *uint64_t v32 = 0;
      *(void *)(a2 - 120) = 0;
      *(void *)(a2 - 112) = 0;
      uint64_t v34 = (void *)(a2 - 104);
      long long v35 = *(void **)(v6 + 128);
      if (v35)
      {
        *(void *)(v6 + 136) = v35;
        operator delete(v35);
        *int64x2_t v20 = 0;
        *(void *)(v6 + 136) = 0;
        *(void *)(v6 + 144) = 0;
      }
      *(_OWORD *)(v6 + 128) = *(_OWORD *)(a2 - 104);
      *(void *)(v6 + 144) = *(void *)(a2 - 88);
      *uint64_t v34 = 0;
      *(void *)(a2 - 96) = 0;
      *(void *)(a2 - 88) = 0;
      uint64_t v36 = (void *)(a2 - 80);
      long long v37 = *(void **)(v6 + 152);
      if (v37)
      {
        *(void *)(v6 + 160) = v37;
        operator delete(v37);
        *uint64_t v62 = 0;
        *(void *)(v6 + 160) = 0;
        *(void *)(v6 + 168) = 0;
      }
      *(_OWORD *)(v6 + 152) = *(_OWORD *)(a2 - 80);
      *(void *)(v6 + 168) = *(void *)(a2 - 64);
      *uint64_t v36 = 0;
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      uint64_t v38 = (void *)(a2 - 56);
      long long v39 = *(void **)(v6 + 176);
      if (v39)
      {
        *(void *)(v6 + 184) = v39;
        operator delete(v39);
        void *v63 = 0;
        *(void *)(v6 + 184) = 0;
        *(void *)(v6 + 192) = 0;
      }
      *(_OWORD *)(v6 + 176) = *(_OWORD *)(a2 - 56);
      *(void *)(v6 + 192) = *(void *)(a2 - 40);
      *uint64_t v38 = 0;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      uint64_t v40 = (void *)(a2 - 32);
      long long v41 = *(void **)(v6 + 200);
      if (v41)
      {
        *(void *)(v6 + 208) = v41;
        operator delete(v41);
        *uint64_t v24 = 0;
        *(void *)(v6 + 208) = 0;
        *(void *)(v6 + 216) = 0;
      }
      *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 - 32);
      *(void *)(v6 + 216) = *(void *)(a2 - 16);
      void *v40 = 0;
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(unsigned char *)(v6 + 224) = *(unsigned char *)(a2 - 8);
      *(_DWORD *)(a2 - 232) = v66;
      uint64_t v42 = *(void **)(a2 - 224);
      if (v42)
      {
        *(void *)(a2 - 216) = v42;
        operator delete(v42);
        *(void *)(a2 - 224) = 0;
        *(void *)(a2 - 216) = 0;
        *(void *)(a2 - 208) = 0;
      }
      *(_OWORD *)(a2 - 224) = v67;
      *(void *)(a2 - 208) = v68;
      long long v67 = 0uLL;
      uint64_t v68 = 0;
      long long v43 = *(void **)(a2 - 200);
      if (v43)
      {
        *(void *)(a2 - 192) = v43;
        operator delete(v43);
        void *v26 = 0;
        *(void *)(a2 - 192) = 0;
        *(void *)(a2 - 184) = 0;
      }
      *(_OWORD *)(a2 - 200) = v69;
      *(void *)(a2 - 184) = v70;
      long long v69 = 0uLL;
      uint64_t v70 = 0;
      uint64_t v44 = *(void **)(a2 - 176);
      if (v44)
      {
        *(void *)(a2 - 168) = v44;
        operator delete(v44);
        *long long v28 = 0;
        *(void *)(a2 - 168) = 0;
        *(void *)(a2 - 160) = 0;
      }
      *(_OWORD *)(a2 - 176) = v71;
      *(void *)(a2 - 160) = v72;
      long long v71 = 0uLL;
      uint64_t v72 = 0;
      long long v45 = *(void **)(a2 - 152);
      if (v45)
      {
        *(void *)(a2 - 144) = v45;
        operator delete(v45);
        *float v30 = 0;
        *(void *)(a2 - 144) = 0;
        *(void *)(a2 - 136) = 0;
      }
      *(_OWORD *)(a2 - 152) = v73;
      *(void *)(a2 - 136) = v74;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
      uint64_t v46 = *(void **)(a2 - 128);
      if (v46)
      {
        *(void *)(a2 - 120) = v46;
        operator delete(v46);
        *uint64_t v32 = 0;
        *(void *)(a2 - 120) = 0;
        *(void *)(a2 - 112) = 0;
      }
      *(_OWORD *)(a2 - 128) = v75;
      *(void *)(a2 - 112) = v76;
      long long v75 = 0uLL;
      uint64_t v76 = 0;
      long long v47 = *(void **)(a2 - 104);
      if (v47)
      {
        *(void *)(a2 - 96) = v47;
        operator delete(v47);
        *uint64_t v34 = 0;
        *(void *)(a2 - 96) = 0;
        *(void *)(a2 - 88) = 0;
      }
      *(_OWORD *)(a2 - 104) = v77;
      *(void *)(a2 - 88) = v78;
      long long v77 = 0uLL;
      uint64_t v78 = 0;
      uint64_t v48 = *(void **)(a2 - 80);
      if (v48)
      {
        *(void *)(a2 - 72) = v48;
        operator delete(v48);
        *uint64_t v36 = 0;
        *(void *)(a2 - 72) = 0;
        *(void *)(a2 - 64) = 0;
      }
      *(_OWORD *)(a2 - 80) = v79;
      *(void *)(a2 - 64) = v80;
      long long v79 = 0uLL;
      uint64_t v80 = 0;
      char v49 = *(void **)(a2 - 56);
      if (v49)
      {
        *(void *)(a2 - 48) = v49;
        operator delete(v49);
        *uint64_t v38 = 0;
        *(void *)(a2 - 48) = 0;
        *(void *)(a2 - 40) = 0;
      }
      *(_OWORD *)(a2 - 56) = v81;
      *(void *)(a2 - 40) = v82;
      long long v81 = 0uLL;
      uint64_t v82 = 0;
      uint64_t v50 = *(void **)(a2 - 32);
      if (v50)
      {
        *(void *)(a2 - 24) = v50;
        operator delete(v50);
        void *v40 = 0;
        *(void *)(a2 - 24) = 0;
        *(void *)(a2 - 16) = 0;
      }
      *(_OWORD *)(a2 - 32) = v83;
      *(void *)(a2 - 16) = v84;
      long long v83 = 0uLL;
      uint64_t v84 = 0;
      *(unsigned char *)(a2 - 8) = v85;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(a1, v6 + 232, 0x34F72C234F72C235 * ((v6 + 232 - a1) >> 3));
    }
    nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v66);
  }
}

void std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)(v4 - 232));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    int v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 6);
  if (v9)
  {
    *((void *)this + 7) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 3);
  if (v10)
  {
    *((void *)this + 4) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v11;
    operator delete(v11);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

uint64_t *std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *double result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(unint64_t a1)
{
  if (a1 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(232 * a1);
}

uint64_t *std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      int v8 = *(_DWORD *)(v2 + v5 - 232);
      *(void *)(v6 - 216) = 0;
      *(void *)(v6 - 208) = 0;
      *(void *)(v6 - 224) = 0;
      *(_OWORD *)(v6 - 224) = *(_OWORD *)(v2 + v5 - 224);
      *(_DWORD *)(v6 - 232) = v8;
      *(void *)(v6 - 208) = *(void *)(v2 + v5 - 208);
      *(void *)(v7 - 224) = 0;
      *(void *)(v7 - 216) = 0;
      *(void *)(v7 - 208) = 0;
      *(void *)(v6 - 200) = 0;
      *(void *)(v6 - 192) = 0;
      *(void *)(v6 - 184) = 0;
      *(_OWORD *)(v6 - 200) = *(_OWORD *)(v2 + v5 - 200);
      *(void *)(v6 - 184) = *(void *)(v2 + v5 - 184);
      *(void *)(v7 - 200) = 0;
      *(void *)(v7 - 192) = 0;
      *(void *)(v7 - 184) = 0;
      *(void *)(v6 - 176) = 0;
      *(void *)(v6 - 168) = 0;
      *(void *)(v6 - 160) = 0;
      *(_OWORD *)(v6 - 176) = *(_OWORD *)(v2 + v5 - 176);
      *(void *)(v6 - 160) = *(void *)(v2 + v5 - 160);
      *(void *)(v7 - 176) = 0;
      *(void *)(v7 - 168) = 0;
      *(void *)(v7 - 160) = 0;
      *(void *)(v6 - 152) = 0;
      *(void *)(v6 - 144) = 0;
      *(void *)(v6 - 136) = 0;
      *(_OWORD *)(v6 - 152) = *(_OWORD *)(v2 + v5 - 152);
      *(void *)(v6 - 136) = *(void *)(v2 + v5 - 136);
      *(void *)(v7 - 152) = 0;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 136) = 0;
      *(void *)(v6 - 128) = 0;
      *(void *)(v6 - 120) = 0;
      *(void *)(v6 - 112) = 0;
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(void *)(v6 - 112) = *(void *)(v2 + v5 - 112);
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(void *)(v6 - 96) = 0;
      *(void *)(v6 - 88) = 0;
      *(_OWORD *)(v6 - 104) = *(_OWORD *)(v2 + v5 - 104);
      *(void *)(v6 - 88) = *(void *)(v2 + v5 - 88);
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 88) = 0;
      *(void *)(v6 - 80) = 0;
      *(void *)(v6 - 72) = 0;
      *(void *)(v6 - 64) = 0;
      *(_OWORD *)(v6 - 80) = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v2 + v5 - 8);
      v5 -= 232;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *double result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)(i - 232));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1C8E2F22C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::~EspressoTransformerModel(void **this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::~EspressoTransformerModel(this);
  JUMPOUT(0x1CB775C40);
}

{
  void *v2;
  void *v3;

  *this = &unk_1F235F158;
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this[2];
  this[2] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = this[1];
  this[1] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
  }
}

void snlp::ssu::encoder::SSUEncoderFactoryLazy::getEncoder(snlp::ssu::encoder::SSUEncoderFactoryLazy *this@<X0>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
    uint64_t v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        int v8 = (void *)*v8;
      }
      int v10 = 136315138;
      uint64_t v11 = v8;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[SSUEncoderFactoryLazy] Loading model from: %s", (uint8_t *)&v10, 0xCu);
    }
    snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder::SSUEncoderFactoryLazy *)((char *)this + 8), v7);
  }
  uint64_t v9 = *((void *)this + 5);
  *a2 = v5;
  a2[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v4);
}

void sub_1C8E2F4D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::encoder::buildEncoder(snlp::ssu::encoder *this, const std::__fs::filesystem::path *a2)
{
}

void sub_1C8E2F56C(_Unwind_Exception *a1)
{
  std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    v1[1] = 0;
    if (v2) {
      std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](v2);
    }
    std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 528));
  std::mutex::~mutex((std::mutex *)(a1 + 464));
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)(a1 + 32));
  JUMPOUT(0x1CB775C40);
}

uint64_t *std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    std::unique_ptr<nl_sentencepiece::SentencepieceModel const>::reset[abi:ne180100]((void **)(v1 + 8));
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void **std::unique_ptr<nl_sentencepiece::SentencepieceModel const>::reset[abi:ne180100](void **result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*v1) {
      (*(void (**)(void))(*(void *)*v1 + 8))(*v1);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](*(uint64_t **)(a1 + 24));
}

void std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void snlp::ssu::encoder::SSUEncoderFactoryLazy::~SSUEncoderFactoryLazy(snlp::ssu::encoder::SSUEncoderFactoryLazy *this)
{
  *(void *)this = &unk_1F235F298;
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1CB775C40);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1F235F298;
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t snlp::ssu::encoder::SSUEncoderFactoryPreemptive::getEncoder@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void snlp::ssu::encoder::SSUEncoderFactoryPreemptive::~SSUEncoderFactoryPreemptive(snlp::ssu::encoder::SSUEncoderFactoryPreemptive *this)
{
  *(void *)this = &unk_1F235F2C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1CB775C40);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F235F2C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

snlp::ssu::encoder::SSUEncoderFactoryLazy *snlp::ssu::encoder::SSUEncoderFactoryLazy::SSUEncoderFactoryLazy(snlp::ssu::encoder::SSUEncoderFactoryLazy *this, const std::__fs::filesystem::path *a2)
{
  *(void *)this = &unk_1F235F298;
  uint64_t v3 = (std::string *)((char *)this + 8);
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    v3->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 850045863;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  return this;
}

void snlp::ssu::encoder::SSUEncoderFactoryPreemptive::SSUEncoderFactoryPreemptive(snlp::ssu::encoder::SSUEncoderFactoryPreemptive *this, std::__fs::filesystem::path *a2)
{
  *(void *)this = &unk_1F235F2C0;
  snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder *)a2, a2);
}

{
  *(void *)this = &unk_1F235F2C0;
  snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder *)a2, a2);
}

void **nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack@<X0>(void **result@<X0>, char **a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long v4 = (void *)**result;
  if (v4)
  {
    uint64_t v5 = v4[3];
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 32);
      if (*(void *)(v5 + 24) != v6)
      {
        uint64_t v7 = (long long *)v4[2];
        if (v7)
        {
          if (v4[1])
          {
            uint64_t v9 = result;
            unint64_t v10 = *(int *)(*(void *)(v6 - 8) + 76);
            memset(v24, 0, sizeof(v24));
            if (*((char *)v7 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v7, *((void *)v7 + 1));
            }
            else
            {
              long long v11 = *v7;
              v25.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
              *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
            }
            std::string::basic_string[abi:ne180100]<0>(&v26, *a2);
            long long v29 = 0u;
            long long v28 = 0u;
            long long v27 = 0u;
            unint64_t v30 = v10;
            uint64_t v31 = 0;
            uint64_t UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(*(uint64_t **)(*(void *)*v9 + 16), v10);
            std::string::basic_string[abi:ne180100]<0>(v17, a2[1]);
            memset(&v17[3], 0, 24);
            std::string::basic_string[abi:ne180100]<0>(v18, "target");
            v18[3] = 0;
            v18[4] = 0;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v65, (const nlv4_inference_orchestrator::trees::TreeNode *)v24);
            uint64_t v19 = 0;
            int64x2_t v20 = 0;
            uint64_t v21 = 0;
            v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
            v52.__r_.__value_.__s.__data_[8] = 0;
            uint64_t v19 = (std::string *)operator new(0x90uLL);
            int64x2_t v20 = v19;
            uint64_t v21 = v19 + 6;
            int64x2_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v21, (nlv4_inference_orchestrator::trees::TreeNode *)&v65, (nlv4_inference_orchestrator::trees::TreeNode *)&v78, v19);
            long long v22 = 0u;
            long long v23 = 0u;
            v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
            if (v70 < 0) {
              operator delete(v69);
            }
            if (SHIBYTE(v68) < 0) {
              operator delete(v66);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, a2[2]);
            int v66 = 0;
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v69, "task");
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v52, (const nlv4_inference_orchestrator::trees::TreeNode *)v17);
            long long v73 = 0;
            uint64_t v74 = 0;
            long long v75 = 0;
            v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            v39.__r_.__value_.__s.__data_[8] = 0;
            long long v73 = (std::string *)operator new(0x90uLL);
            uint64_t v74 = v73;
            long long v75 = v73 + 6;
            uint64_t v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v75, (nlv4_inference_orchestrator::trees::TreeNode *)&v52, (nlv4_inference_orchestrator::trees::TreeNode *)&v65, v73);
            long long v76 = 0u;
            long long v77 = 0u;
            v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            if (v57 < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(v55) < 0) {
              operator delete(v53);
            }
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v52.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v52, "UserStatedTask");
            uint64_t v54 = 0;
            uint64_t v53 = 0;
            uint64_t v55 = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "ROOT");
            uint64_t v59 = 0;
            uint64_t v58 = 0;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v39, (const nlv4_inference_orchestrator::trees::TreeNode *)&v65);
            uint64_t v61 = 0;
            unint64_t v60 = 0;
            uint64_t v62 = 0;
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
            v33.__r_.__value_.__s.__data_[8] = 0;
            unint64_t v60 = (std::string *)operator new(0x90uLL);
            uint64_t v61 = v60;
            uint64_t v62 = v60 + 6;
            uint64_t v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v62, (nlv4_inference_orchestrator::trees::TreeNode *)&v39, (nlv4_inference_orchestrator::trees::TreeNode *)&v52, v60);
            long long v63 = 0u;
            long long v64 = 0u;
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
            if (v44 < 0) {
              operator delete(v43);
            }
            if (SHIBYTE(v42) < 0) {
              operator delete(v40);
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v39, "ROOT");
            uint64_t v41 = 0;
            uint64_t v40 = 0;
            uint64_t v42 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v43, "");
            uint64_t v46 = 0;
            uint64_t v45 = 0;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v33, (const nlv4_inference_orchestrator::trees::TreeNode *)&v52);
            uint64_t v48 = 0;
            long long v47 = 0;
            char v49 = 0;
            LOBYTE(v16) = 0;
            long long v47 = (std::string *)operator new(0x90uLL);
            uint64_t v48 = v47;
            char v49 = v47 + 6;
            uint64_t v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v49, (nlv4_inference_orchestrator::trees::TreeNode *)&v33, (nlv4_inference_orchestrator::trees::TreeNode *)&v39, v47);
            long long v50 = 0u;
            long long v51 = 0u;
            float v15 = (char *)&v38;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
            if (v37 < 0) {
              operator delete(v36);
            }
            if (v35 < 0) {
              operator delete(v34);
            }
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            uint64_t v12 = (void *)v9[2];
            uint64_t v13 = (std::__shared_weak_count *)v12[1];
            v14[0] = *v12;
            v14[1] = v13;
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            nlv4_inference_orchestrator::trees::buildUserDialogActs(&v15, (unsigned __int8 *)&v39, (uint64_t)v14);
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            operator new();
          }
        }
      }
    }
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

void sub_1C8E30300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,boost::uuids::detail::random_provider_base *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  a52 = (uint64_t)&a13;
  std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a71);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)&STACK[0x280]);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v74 - 240));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a16);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&__p);
  _Unwind_Resume(a1);
}

std::string *nlv4_inference_orchestrator::trees::TreeNode::TreeNode(std::string *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)((char *)a2 + 72);
  this[3].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)((char *)this + 88), *((long long **)a2 + 11), *((long long **)a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 4));
  long long v8 = *((_OWORD *)a2 + 8);
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *((_OWORD *)a2 + 7);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v8;
  return this;
}

void sub_1C8E306FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, nlv4_inference_orchestrator::trees::TreeNode *a3, std::string *this)
{
  long long v4 = this;
  unint64_t v10 = this;
  long long v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v4, v6);
      long long v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v6 + 144);
      long long v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C8E307D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(void **this)
{
  uint64_t v2 = this + 11;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::trees::buildUserDialogActs(char **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "ROOT");
  uint64_t v6 = a2[23];
  if ((v6 & 0x80u) == 0) {
    long long v7 = (void *)a2[23];
  }
  else {
    long long v7 = (void *)*((void *)a2 + 1);
  }
  unint64_t v8 = v44;
  unsigned __int8 v9 = v44;
  if ((v44 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  if (v7 != (void *)v8) {
    goto LABEL_23;
  }
  if ((v44 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, *((void *)a2 + 1)))
    {
LABEL_23:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_24;
    }
  }
  else if (a2[23])
  {
    long long v11 = a2;
    while (*v11 == *(unsigned __int8 *)v10)
    {
      ++v11;
      unint64_t v10 = (void **)((char *)v10 + 1);
      if (!--v6) {
        goto LABEL_17;
      }
    }
    goto LABEL_23;
  }
LABEL_17:
  uint64_t v12 = a2[71];
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 7);
  }
  if (v12) {
    goto LABEL_23;
  }
  uint64_t v13 = a2[47];
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a2 + 4);
  }
  if (v13) {
    goto LABEL_23;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v14 = *((void *)a2 + 11);
  uint64_t v15 = *((void *)a2 + 12);
  if (v14 != v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = "ROOT";
    uint64_t v41 = *((void *)a2 + 12);
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(a3 + 8);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v48, v18);
      uint64_t v20 = *(unsigned __int8 *)(v14 + 71);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = (void *)*(unsigned __int8 *)(v14 + 71);
      }
      else {
        uint64_t v21 = *(void **)(v14 + 56);
      }
      unint64_t v22 = v49;
      if ((v49 & 0x80u) != 0) {
        unint64_t v22 = (unint64_t)v48[1];
      }
      if (v21 == (void *)v22)
      {
        if ((v49 & 0x80u) == 0) {
          long long v23 = v48;
        }
        else {
          long long v23 = (void **)v48[0];
        }
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v14 + 48), v23, *(void *)(v14 + 56)))
          {
LABEL_62:
            if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v14 + 96) - *(void *)(v14 + 88)) >> 4) < 2)
            {
              uint64_t v46 = 1;
              int v47 = 0;
              operator new();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "User dialog act node has multiple children.");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          if (!*(unsigned char *)(v14 + 71)) {
            goto LABEL_62;
          }
          uint64_t v24 = 0;
          while (*(unsigned __int8 *)(v14 + v24 + 48) == *((unsigned __int8 *)v23 + v24))
          {
            if (v20 == ++v24) {
              goto LABEL_62;
            }
          }
        }
      }
      std::string v25 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_DEBUG, "Invalid model tree, removing parse from output.", buf, 2u);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      unint64_t v26 = (unint64_t)a1[2];
      if ((unint64_t)v17 >= v26)
      {
        uint64_t v42 = v19;
        uint64_t v27 = (v17 - v16) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = a3;
        unint64_t v30 = v18;
        uint64_t v31 = v26 - (void)v16;
        if (v31 >> 2 > v28) {
          unint64_t v28 = v31 >> 2;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v28;
        }
        if (v32)
        {
          if (v32 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v33 = (char *)operator new(8 * v32);
        }
        else
        {
          std::string v33 = 0;
        }
        uint64_t v34 = &v33[8 * v27];
        *(void *)uint64_t v34 = 0;
        char v35 = v34 + 8;
        if (v17 != v16)
        {
          do
          {
            uint64_t v36 = *((void *)v17 - 1);
            v17 -= 8;
            *(void *)unint64_t v17 = 0;
            *((void *)v34 - 1) = v36;
            v34 -= 8;
          }
          while (v17 != v16);
          uint64_t v16 = a1[1];
        }
        char v37 = *a1;
        *a1 = v34;
        a1[1] = v35;
        a1[2] = &v33[8 * v32];
        unint64_t v18 = v30;
        a3 = v29;
        uint64_t v19 = v42;
        while (v16 != v37)
        {
          uint64_t v39 = *((void *)v16 - 1);
          v16 -= 8;
          uint64_t v38 = v39;
          *(void *)uint64_t v16 = 0;
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
        }
        if (v37) {
          operator delete(v37);
        }
        unint64_t v17 = v35;
        uint64_t v16 = v34;
        uint64_t v15 = v41;
      }
      else
      {
        *(void *)unint64_t v17 = 0;
        v17 += 8;
      }
      a1[1] = v17;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v14 += 144;
    }
    while (v14 != v15);
    unsigned __int8 v9 = v44;
  }
LABEL_24:
  if ((v9 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8E313E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69 < 0) {
    operator delete(__p);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>()
{
}

void sub_1C8E316A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    *uint64_t v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *double result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  *(_DWORD *)this = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v8, "open /dev/urandom");
    uint64_t v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&unk_1F2361590;
    uint64_t v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/loca"
                         "l/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    uint64_t v7 = 60;
    boost::throw_exception<boost::uuids::entropy_error>(v5, &v6);
  }
  return this;
}

void sub_1C8E3191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::random_generator_pure::operator()(int *a1)
{
  unint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  do
  {
    ssize_t v3 = read(*a1, (char *)&v11 + v2, 16 - v2);
    if (v3 < 0)
    {
      uint64_t v4 = *__error();
      if (v4 != 4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v8, "read");
        std::runtime_error::runtime_error(&v9, &v8);
        v9.__vftable = (std::runtime_error_vtbl *)&unk_1F2361590;
        uint64_t v10 = v4;
        v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/"
                             "usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
        v6.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
        uint64_t v7 = 98;
        boost::throw_exception<boost::uuids::entropy_error>(&v9, &v6);
      }
    }
    else
    {
      v2 += v3;
    }
  }
  while (v2 < 0x10);
  LOBYTE(v12) = v12 & 0x3F | 0x80;
  BYTE6(v11) = BYTE6(v11) & 0xF | 0x40;
  return v11;
}

void sub_1C8E31A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(uint64_t this)
{
  if ((this & 0x80000000) == 0) {
    return close(this);
  }
  return this;
}

void boost::throw_exception<boost::uuids::entropy_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = (char *)__cxa_allocate_exception(0x48uLL);
  *(void *)exception = &unk_1F2361418;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  uint64_t v5 = a1[1].__vftable;
  *((void *)exception + 6) = 0;
  *((void *)exception + 7) = 0;
  *((void *)exception + 5) = 0;
  *(void *)exception = &unk_1F235F9F8;
  *((void *)exception + 1) = &unk_1F235FA28;
  *((void *)exception + 3) = v5;
  *((void *)exception + 4) = &unk_1F235FA58;
  *((_DWORD *)exception + 16) = a2[1].i32[0];
  *((int8x16_t *)exception + 3) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *a1 = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((void *)this + 2);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F2361C38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1CB775C40);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C8E31E70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2361418;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F2361590;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F2361C38;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F235F9F8;
  *(void *)(a1 + 8) = &unk_1F235FA28;
  *(void *)(a1 + 32) = &unk_1F235FA58;
  return a1;
}

void sub_1C8E31FB4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::clone()
{
}

void sub_1C8E32198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

nlv4_inference_orchestrator::trees::UsoGraphBuilder *nlv4_inference_orchestrator::trees::UsoGraphBuilder::UsoGraphBuilder(nlv4_inference_orchestrator::trees::UsoGraphBuilder *this)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "time");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "date");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Time");
  std::string::basic_string[abi:ne180100]<0>(v8, "common_Time12HourClock");
  std::string::basic_string[abi:ne180100]<0>(v9, "common_Time24HourClock");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 48, (unsigned __int8 *)__p, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0) {
      operator delete((void *)v9[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)this + 11, "ROOT");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 14, ".");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 17, "task");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Integer");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 160, (unsigned __int8 *)__p, 1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "integerValue");
  std::string::basic_string[abi:ne180100]<0>(v8, "denominatorValue");
  std::string::basic_string[abi:ne180100]<0>(v9, "numeratorValue");
  std::string::basic_string[abi:ne180100]<0>(v10, "wholeValue");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 200, (unsigned __int8 *)__p, 4);
  for (uint64_t j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v10[j + 2]) < 0) {
      operator delete((void *)v10[j]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)this + 30, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 33, "integerValue");
  return this;
}

void sub_1C8E32484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 263) < 0) {
    operator delete(*v23);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v21);
  if (*(char *)(v15 + 159) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v15 + 135) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v15 + 111) < 0) {
    operator delete(*v18);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17);
  if (*(char *)(v15 + 47) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const char *a1, void *a2)
{
  size_t v4 = strlen(a1);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a2 + 23)) {
      return 0;
    }
    return memcmp(a2, a1, v4) == 0;
  }
  if (v4 == a2[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a2 = (void *)*a2;
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder(void **this)
{
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 25));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 20));
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1CB774F40]();
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1C8E327F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v2 = **(void ****)(a1 + 16);
    ssize_t v3 = **(void ****)(a1 + 8);
    if (v2 != v3)
    {
      size_t v4 = v2 - 7;
      do
      {
        char v7 = v4;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v7);
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        if (*((char *)v4 - 41) < 0) {
          operator delete(*(v4 - 8));
        }
        if (*((char *)v4 - 65) < 0) {
          operator delete(*(v4 - 11));
        }
        uint64_t v5 = v4 - 11;
        v4 -= 18;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

std::string *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int8x16_t v6 = result;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_, v7);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C8E3290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, long long *a2, long long *a3, std::string *this, uint64_t a5)
{
  uint64_t v5 = this;
  uint64_t v16 = this;
  uint64_t v17 = this;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        v5->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
      }
      if (*((char *)v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v5 + 1, *((const std::string::value_type **)v7 + 3), *((void *)v7 + 4));
      }
      else
      {
        long long v9 = *(long long *)((char *)v7 + 24);
        v5[1].__r_.__value_.__r.__words[2] = *((void *)v7 + 5);
        *(_OWORD *)&v5[1].__r_.__value_.__l.__data_ = v9;
      }
      if (*((char *)v7 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5 + 2, *((const std::string::value_type **)v7 + 6), *((void *)v7 + 7));
      }
      else
      {
        long long v10 = v7[3];
        v5[2].__r_.__value_.__r.__words[2] = *((void *)v7 + 8);
        *(_OWORD *)&v5[2].__r_.__value_.__l.__data_ = v10;
      }
      long long v11 = *(long long *)((char *)v7 + 72);
      v5[3].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v5[3].__r_.__value_.__l.__data_ = v11;
      v5[4].__r_.__value_.__r.__words[0] = 0;
      v5[4].__r_.__value_.__l.__size_ = 0;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(&v5[3].__r_.__value_.__r.__words[2], *((void *)v7 + 11), *((void *)v7 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v7 + 12) - *((void *)v7 + 11)) >> 4), a5);
      long long v12 = v7[8];
      *(_OWORD *)&v5[4].__r_.__value_.__r.__words[2] = v7[7];
      *(_OWORD *)&v5[5].__r_.__value_.__r.__words[1] = v12;
      v7 += 9;
      uint64_t v5 = v17 + 6;
      v17 += 6;
    }
    while (v7 != a3);
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v5;
}

void sub_1C8E32AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 47) < 0) {
    operator delete(*v10);
  }
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a1);
}

void **nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedMessageContentHack@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v3, off_1E6580340, a2);
}

void **nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedAnnouncementContentHack@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v3, off_1E6580358, a2);
}

void **nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedNoteContentHack@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((void **)&v3, off_1E6580370, a2);
}

void sub_1C8E33020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)UPDataDetectorSpan;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C8E330FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E33198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::trigger::buildTrigger()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C8E335D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a13);
  MEMORY[0x1CB775C40](v18, 0xA1C4030951706);
  a13 = (void **)&a9;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v20 = 24;
  while (1)
  {
    uint64_t v21 = *(std::__shared_weak_count **)(&a17 + v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    v20 -= 16;
    if (v20 == -8)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      _Unwind_Resume(a1);
    }
  }
}

void std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int8x16_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>,std::shared_ptr<snlp::ssu::trigger::SSUTrigger>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

BOOL snlp::common::text_uso_graph::isMessageContentPrompt(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  unint64_t v2 = (siri::ontology *)MEMORY[0x1CB773D10](v47);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v2);
  uint64_t v5 = *SharedUsoVocabManager;
  uint64_t v4 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v45 = v5;
    uint64_t v46 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    uint64_t v45 = v5;
    uint64_t v46 = 0;
  }
  uint64_t v41 = 0;
  LODWORD(v42) = 0;
  MEMORY[0x1CB774F20](v43, &v41);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v45, (const sirinluexternal::UsoGraph *)v47, (UsoGraph *)v43);
  uint64_t v7 = v44;
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v41, (siri::ontology::UsoGraph *)v44->var1, v44);
  long long v8 = v41;
  if (v42 - v41 == 8)
  {
    siri::ontology::UsoGraph::getSuccessors((uint64_t *)&__p, (siri::ontology::UsoGraph *)v7->var1, v7);
    uint64_t v9 = *(siri::ontology::UsoGraph ***)__p;
    uint64_t v38 = __p;
    operator delete(__p);
    if ((*((unsigned int (**)(siri::ontology::UsoGraph **))*v9 + 2))(v9) == 1)
    {
      (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*v9 + 6))(&__p, v9);
      if (v40 < 0)
      {
        BOOL v12 = v38 == (unsigned char *)20
           && *(void *)__p == 0x6F633A3A646E6573
           && *((void *)__p + 1) == 0x73654D5F6E6F6D6DLL
           && *((_DWORD *)__p + 4) == 1701273971;
        operator delete(__p);
LABEL_39:
        siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&__p, v9[1], (const UsoGraphNode *)v9);
        uint64_t v16 = __p;
        if (!v12)
        {
          BOOL v6 = 0;
          goto LABEL_83;
        }
        if (v38 - (unsigned char *)__p != 16)
        {
          BOOL v6 = 1;
          goto LABEL_83;
        }
        (*(void (**)(void **__return_ptr))(**(void **)__p + 48))(v35);
        uint64_t v17 = *((void *)__p + 1);
        if (*(char *)(v17 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v17 + 32), *(void *)(v17 + 40));
        }
        else {
          std::string v34 = *(std::string *)(v17 + 32);
        }
        siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v32, v9[1], (const UsoGraphNode *)v9);
        uint64_t v18 = *(void *)v32;
        std::string v33 = v32;
        operator delete(v32);
        if ((*(unsigned int (**)(void))(**(void **)__p + 16))() != 2) {
          goto LABEL_56;
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v34.__r_.__value_.__l.__size_ != 6) {
            goto LABEL_56;
          }
          uint64_t v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) != 6) {
            goto LABEL_56;
          }
          uint64_t v19 = &v34;
        }
        int data = (int)v19->__r_.__value_.__l.__data_;
        int v21 = WORD2(v19->__r_.__value_.__r.__words[0]);
        if (data == 1735549300 && v21 == 29797)
        {
          BOOL v23 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, "common_Message");
          goto LABEL_57;
        }
LABEL_56:
        BOOL v23 = 0;
LABEL_57:
        siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&v32, *(siri::ontology::UsoGraph **)(v18 + 8), (const UsoGraphNode *)v18);
        uint64_t v24 = v32;
        if (v23)
        {
          if (v33 - (unsigned char *)v32 == 16)
          {
            (*(void (**)(void **__return_ptr))(**(void **)v32 + 48))(__s);
            uint64_t v25 = *((void *)v32 + 1);
            if (*(char *)(v25 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v25 + 32), *(void *)(v25 + 40));
            }
            else {
              std::string v29 = *(std::string *)(v25 + 32);
            }
            siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v27, *(siri::ontology::UsoGraph **)(v18 + 8), (const UsoGraphNode *)v18);
            uint64_t v26 = *(void *)v27;
            unint64_t v28 = v27;
            operator delete(v27);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26) == 3
              && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("stringContent", &v29)
              && std::string::find[abi:ne180100](__s) != -1)
            {
              siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v27, *(siri::ontology::UsoGraph **)(v26 + 8), (const UsoGraphNode *)v26);
              BOOL v6 = v28 == v27;
              if (v27)
              {
                unint64_t v28 = v27;
                operator delete(v27);
              }
            }
            else
            {
              BOOL v6 = 0;
            }
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            if (v31 < 0) {
              operator delete(__s[0]);
            }
            uint64_t v24 = v32;
          }
          else
          {
            BOOL v6 = 1;
          }
        }
        else
        {
          BOOL v6 = 0;
        }
        if (v24)
        {
          std::string v33 = v24;
          operator delete(v24);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        uint64_t v16 = __p;
LABEL_83:
        if (v16)
        {
          uint64_t v38 = v16;
          operator delete(v16);
        }
        long long v8 = v41;
        if (!v41) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (v40 == 20)
      {
        BOOL v12 = __p == (void *)0x6F633A3A646E6573 && v38 == (unsigned char *)0x73654D5F6E6F6D6DLL && v39 == 1701273971;
        goto LABEL_39;
      }
    }
    BOOL v12 = 0;
    goto LABEL_39;
  }
  BOOL v6 = 0;
  if (v41)
  {
LABEL_21:
    uint64_t v42 = v8;
    operator delete(v8);
  }
LABEL_22:
  MEMORY[0x1CB774F40](v43);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  MEMORY[0x1CB773D30](v47);
  return v6;
}

void sub_1C8E34650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  MEMORY[0x1CB774F40](&a48);
  uint64_t v50 = *(std::__shared_weak_count **)(v48 - 176);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  MEMORY[0x1CB773D30](v48 - 168);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 0;
    }
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t std::string::find[abi:ne180100](void *__s)
{
  uint64_t v1 = __s;
  if (*((char *)__s + 23) < 0)
  {
    uint64_t v1 = (void *)*__s;
    uint64_t v2 = __s[1];
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)__s + 23);
  }
  uint64_t v3 = (char *)v1 + v2;
  if (v2 >= 16)
  {
    BOOL v6 = v1;
    do
    {
      if (v2 == 15) {
        break;
      }
      size_t v4 = (char *)memchr(v6, 112, v2 - 15);
      if (!v4) {
        break;
      }
      if (*(void *)v4 == 0x766974696D697270 && *((void *)v4 + 1) == 0x676E697274535F65) {
        goto LABEL_6;
      }
      BOOL v6 = v4 + 1;
      uint64_t v2 = v3 - (unsigned char *)v6;
    }
    while (v3 - (unsigned char *)v6 > 15);
  }
  size_t v4 = v3;
LABEL_6:
  if (v4 == v3) {
    return -1;
  }
  else {
    return v4 - (char *)v1;
  }
}

BOOL snlp::common::text_uso_graph::isIntercomPayloadPrompt(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  uint64_t v2 = (siri::ontology *)MEMORY[0x1CB773D10](v48);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v2);
  uint64_t v5 = *SharedUsoVocabManager;
  size_t v4 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v46 = v5;
    int v47 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    uint64_t v46 = v5;
    int v47 = 0;
  }
  uint64_t v42 = 0;
  LODWORD(v43) = 0;
  MEMORY[0x1CB774F20](v44, &v42);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v46, (const sirinluexternal::UsoGraph *)v48, (UsoGraph *)v44);
  uint64_t v7 = v45;
  siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v42, (siri::ontology::UsoGraph *)v45->var1, v45);
  long long v8 = v42;
  if (v43 - v42 == 8)
  {
    siri::ontology::UsoGraph::getSuccessors((uint64_t *)&__p, (siri::ontology::UsoGraph *)v7->var1, v7);
    uint64_t v9 = *(siri::ontology::UsoGraph ***)__p;
    char v40 = __p;
    operator delete(__p);
    if ((*((unsigned int (**)(siri::ontology::UsoGraph **))*v9 + 2))(v9) == 1)
    {
      (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*v9 + 6))(&__p, v9);
      if (SHIBYTE(v41) < 0)
      {
        BOOL v13 = v40 == (unsigned char *)25
           && *(void *)__p == 0x6F633A3A646E6573
           && *((void *)__p + 1) == 0x6E6E415F6E6F6D6DLL
           && *((void *)__p + 2) == 0x6E656D65636E756FLL
           && *((unsigned char *)__p + 24) == 116;
        operator delete(__p);
LABEL_45:
        siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&__p, v9[1], (const UsoGraphNode *)v9);
        uint64_t v18 = __p;
        if (!v13)
        {
          BOOL v6 = 0;
          goto LABEL_89;
        }
        if (v40 - (unsigned char *)__p != 16)
        {
          BOOL v6 = 1;
          goto LABEL_89;
        }
        (*(void (**)(void **__return_ptr))(**(void **)__p + 48))(v37);
        uint64_t v19 = *((void *)__p + 1);
        if (*(char *)(v19 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v19 + 32), *(void *)(v19 + 40));
        }
        else {
          std::string v36 = *(std::string *)(v19 + 32);
        }
        siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v34, v9[1], (const UsoGraphNode *)v9);
        uint64_t v20 = *(void *)v34;
        char v35 = v34;
        operator delete(v34);
        if ((*(unsigned int (**)(void))(**(void **)__p + 16))() != 2) {
          goto LABEL_62;
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v36.__r_.__value_.__l.__size_ != 6) {
            goto LABEL_62;
          }
          int v21 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) != 6) {
            goto LABEL_62;
          }
          int v21 = &v36;
        }
        int data = (int)v21->__r_.__value_.__l.__data_;
        int v23 = WORD2(v21->__r_.__value_.__r.__words[0]);
        if (data == 1735549300 && v23 == 29797)
        {
          BOOL v25 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, "common_Announcement");
          goto LABEL_63;
        }
LABEL_62:
        BOOL v25 = 0;
LABEL_63:
        siri::ontology::UsoGraph::getSuccessorsWithEdges((uint64_t *)&v34, *(siri::ontology::UsoGraph **)(v20 + 8), (const UsoGraphNode *)v20);
        uint64_t v26 = v34;
        if (v25)
        {
          if (v35 - (unsigned char *)v34 == 16)
          {
            (*(void (**)(void **__return_ptr))(**(void **)v34 + 48))(__s);
            uint64_t v27 = *((void *)v34 + 1);
            if (*(char *)(v27 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v27 + 32), *(void *)(v27 + 40));
            }
            else {
              std::string v31 = *(std::string *)(v27 + 32);
            }
            siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v29, *(siri::ontology::UsoGraph **)(v20 + 8), (const UsoGraphNode *)v20);
            uint64_t v28 = *(void *)v29;
            unint64_t v30 = v29;
            operator delete(v29);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28) == 3
              && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("content", &v31)
              && std::string::find[abi:ne180100](__s) != -1)
            {
              siri::ontology::UsoGraph::getSuccessors((uint64_t *)&v29, *(siri::ontology::UsoGraph **)(v28 + 8), (const UsoGraphNode *)v28);
              BOOL v6 = v30 == v29;
              if (v29)
              {
                unint64_t v30 = v29;
                operator delete(v29);
              }
            }
            else
            {
              BOOL v6 = 0;
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (v33 < 0) {
              operator delete(__s[0]);
            }
            uint64_t v26 = v34;
          }
          else
          {
            BOOL v6 = 1;
          }
        }
        else
        {
          BOOL v6 = 0;
        }
        if (v26)
        {
          char v35 = v26;
          operator delete(v26);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
        uint64_t v18 = __p;
LABEL_89:
        if (v18)
        {
          char v40 = v18;
          operator delete(v18);
        }
        long long v8 = v42;
        if (!v42) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      if (SHIBYTE(v41) == 25)
      {
        BOOL v13 = __p == (void *)0x6F633A3A646E6573
           && v40 == (unsigned char *)0x6E6E415F6E6F6D6DLL
           && v41 == 0x6E656D65636E756FLL
           && v42 == 116;
        goto LABEL_45;
      }
    }
    BOOL v13 = 0;
    goto LABEL_45;
  }
  BOOL v6 = 0;
  if (v42)
  {
LABEL_24:
    long long v43 = v8;
    operator delete(v8);
  }
LABEL_25:
  MEMORY[0x1CB774F40](v44);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  MEMORY[0x1CB773D30](v48);
  return v6;
}

void sub_1C8E34DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  MEMORY[0x1CB774F40](&a48);
  uint64_t v50 = *(std::__shared_weak_count **)(v48 - 176);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  MEMORY[0x1CB773D30](v48 - 168);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::context::Embedder::embed(void **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  unint64_t v30 = 0;
  std::string v31 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v27 = 0;
  }
  else
  {
    do
    {
      uint64_t v7 = itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*a1, v4);
      uint64_t TokenId = itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)*a1, *a1);
      float v9 = (float)(unint64_t)v7;
      if (v10 && v9 == (float)(unint64_t)TokenId)
      {
        long long v11 = SNLPOSLoggerForCategory(2);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *((int *)a1 + 4);
          if (v12 >= 8)
          {
            uint64_t v22 = SNLPOSLoggerForCategory(4);
            BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
            BOOL v13 = "<UNDEFINED_COMPONENT>";
            if (v23)
            {
              *(_DWORD *)buf = 136315394;
              char v33 = "<UNDEFINED_COMPONENT>";
              __int16 v34 = 2048;
              uint64_t v35 = v12;
              _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
              BOOL v13 = "<UNDEFINED_COMPONENT>";
            }
          }
          else
          {
            BOOL v13 = off_1E65808C8[v12];
          }
          uint64_t v24 = v4;
          if (*(char *)(v4 + 23) < 0) {
            uint64_t v24 = *(void *)v4;
          }
          *(_DWORD *)buf = 136315394;
          char v33 = v13;
          __int16 v34 = 2080;
          uint64_t v35 = v24;
          _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "[%s] Warning: cannot embed OOV token '%s'.\n", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v14 = v30;
        if (v30 >= v31)
        {
          uint64_t v16 = __p;
          uint64_t v17 = v30 - __p;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = (char *)v31 - (char *)__p;
          if (((char *)v31 - (char *)__p) >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v31, v20);
            uint64_t v16 = __p;
            uint64_t v14 = v30;
          }
          else
          {
            int v21 = 0;
          }
          BOOL v25 = (float *)&v21[4 * v17];
          *BOOL v25 = v9;
          char v15 = v25 + 1;
          while (v14 != v16)
          {
            int v26 = *((_DWORD *)v14-- - 1);
            *((_DWORD *)v25-- - 1) = v26;
          }
          std::string __p = v25;
          std::string v31 = (float *)&v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *unint64_t v30 = v9;
          char v15 = v30 + 1;
        }
        unint64_t v30 = v15;
      }
      v4 += 24;
    }
    while (v4 != v5);
    uint64_t v27 = v30 - __p;
  }
  uint64_t v28 = operator new(0x10uLL);
  *uint64_t v28 = 1;
  v28[1] = v27;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v28, (uint64_t)(v28 + 2), 2uLL);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v30, v30 - __p);
  operator delete(v28);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1C8E351BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v16 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v16;
    operator delete(v16);
  }
  operator delete(v14);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::SSUPersister(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  *(void *)a1 = 5;
  long long v7 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  long long v8 = (std::string *)(a1 + 80);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v9 = *a6;
    v8->__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C8E352A8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  BOOL v6 = *(std::__shared_weak_count **)(v1 + 40);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = snlp::ssu::cache::SSUCacheDirectory::removeCacheFilesForApp(*(void *)(a1 + 32), a2);
  if ((v5 & 0xFF00000000) != 0)
  {
    int v6 = v5;
    snlp::ssu::selflogging::buildAppBundleIdSaltedHash(a2, &v8);
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 24) = v6;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 56) = v7;
}

BOOL snlp::ssu::matcher::SSUPersister::clearCacheFilesOutsideLocale(snlp::ssu::matcher::SSUPersister *this)
{
  return snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(*((snlp::ssu::cache::SSUCacheDirectory **)this + 4), (unsigned __int8 *)this + 8);
}

void snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired(snlp::ssu::matcher::SSUPersister *this@<X0>, const snlp::ssu::matcher::SSUAppInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v6 != 53) {
    goto LABEL_7;
  }
  if (v7 < 0) {
    a2 = *(const snlp::ssu::matcher::SSUAppInfo **)a2;
  }
  if (!memcmp("com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts", a2, 0x35uLL))
  {
    char v15 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts";
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "Received an app bundle ID that clashes with the special user shortcuts one: %s. Call updateCacheForUserShortcutsIfRequired instead.", (uint8_t *)&buf, 0xCu);
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
  }
  else
  {
LABEL_7:
    if (snlp::ssu::matcher::SSUPersister::appRequiresUpdate(this, (std::__fs::filesystem::path *)v3))
    {
      long long v8 = (std::__shared_weak_count *)*((void *)this + 5);
      v24[0] = *((void *)this + 4);
      v24[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      snlp::ssu::app::SSUAppAssets::loadAssetsFromDirectory((uint64_t)v3, (const void **)this + 1, (uint64_t)v24, (uint64_t)&buf);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if ((_BYTE)v32)
      {
        uint64_t v9 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          if (!(_BYTE)v32) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          int v10 = *((char *)v3 + 23);
          std::string::size_type v11 = *(void *)v3;
          uint64_t v12 = (char *)*((void *)v3 + 3);
          int v13 = *((char *)v3 + 47);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v25, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else {
            std::string v25 = buf;
          }
          if (v13 >= 0) {
            uint64_t v17 = (char *)v3 + 24;
          }
          else {
            uint64_t v17 = v12;
          }
          if (v10 >= 0) {
            unint64_t v18 = v3;
          }
          else {
            unint64_t v18 = (const snlp::ssu::matcher::SSUAppInfo *)v11;
          }
          uint64_t v19 = &v25;
          *(_DWORD *)int v26 = 136315650;
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          *(void *)&v26[4] = v18;
          *(_WORD *)&v26[12] = 2080;
          *(void *)&v26[14] = v17;
          *(_WORD *)&v26[22] = 2080;
          uint64_t v27 = v19;
          _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "Could not read app assets for %s (path %s): %s", v26, 0x20u);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
        }
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 56) = 0;
      }
      else
      {
        if (!v33[112]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        snlp::ssu::app::SSUAppAssets::allSupportedCategories((snlp::ssu::app::SSUAppAssets *)v33, (unsigned __int8 **)__p);
        if (__p[0] == __p[1])
        {
          if (__p[0]) {
            operator delete(__p[0]);
          }
          snlp::ssu::selflogging::buildAppBundleIdSaltedHash((char *)v3, v26);
          LODWORD(v27) = 0;
          long long v28 = 0uLL;
          uint64_t v29 = 0;
          std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(&v28, 0, 0, 0);
          *(_OWORD *)a3 = *(_OWORD *)v26;
          *(void *)(a3 + 16) = *(void *)&v26[16];
          *(_DWORD *)(a3 + 24) = v27;
          *(_OWORD *)(a3 + 32) = v28;
          *(void *)(a3 + 48) = v29;
          *(unsigned char *)(a3 + 56) = 1;
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)__p[0];
          snlp::ssu::matcher::SSUPersister::loadAppAssets((uint64_t)v3, (uint64_t)v33, *(unsigned char *)__p[0], (uint64_t)v26);
          if (v30) {
            snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory(this, (int)v3, (snlp::ssu::app::SSULoadedAppAssets *)v26);
          }
          unint64_t v20 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)v3 + 23) >= 0) {
              std::string::size_type v21 = (std::string::size_type)v3;
            }
            else {
              std::string::size_type v21 = *(void *)v3;
            }
            if (v16 <= 3u) {
              uint64_t v22 = EnumNamesSSUCategoryType(void)::names[v16];
            }
            else {
              uint64_t v22 = "";
            }
            LODWORD(v25.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = v21;
            WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
            _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, "Failed to load app assets for app %s and category %s", (uint8_t *)&v25, 0x16u);
          }
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 56) = 0;
          std::__optional_destruct_base<snlp::ssu::app::SSULoadedAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v26);
          if (__p[0]) {
            operator delete(__p[0]);
          }
        }
      }
      std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v33);
      if ((_BYTE)v32)
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      snlp::ssu::selflogging::buildAppBundleIdSaltedHash((char *)v3, &buf);
      int v32 = 0;
      memset(v33, 0, 24);
      uint64_t v14 = operator new(0x10uLL);
      *(_WORD *)uint64_t v14 = 0;
      v14[1] = 0;
      void v14[2] = 0;
      void v14[3] = 1;
      *(std::string *)a3 = buf;
      *(_DWORD *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = v14;
      *(void *)(a3 + 40) = v14 + 4;
      *(void *)(a3 + 48) = v14 + 4;
      *(unsigned char *)(a3 + 56) = 1;
    }
  }
}

void sub_1C8E359B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v47) {
    operator delete(v47);
  }
  snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::~SSUResultOpt((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::appRequiresUpdate(snlp::ssu::matcher::SSUPersister *this, std::__fs::filesystem::path *a2)
{
  uint64_t v2 = a2;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion((uint64_t)this, a2, &__s1);
  if (!v25)
  {
LABEL_35:
    uint64_t v20 = 1;
    goto LABEL_36;
  }
  uint64_t v4 = (unsigned __int8 **)((char *)this + 80);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = *((unsigned __int8 *)this + 103);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)this + 11);
  }
  if (size == v6)
  {
    if (v7 >= 0) {
      long long v8 = (unsigned __int8 *)this + 80;
    }
    else {
      long long v8 = *v4;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v14 = memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_) != 0;
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v12 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v11 = v12;
        int v13 = *v8++;
        BOOL v14 = v11 != v13;
      }
      while (v11 == v13 && v9-- != 0);
    }
    else
    {
      BOOL v14 = 0;
    }
  }
  else
  {
    BOOL v14 = 1;
  }
  char v16 = v14 | !snlp::ssu::app::SSUAppAssets::directoryHasAssetVersion((uint64_t)&v2[1], (const void **)this + 1, &v24);
  uint64_t v17 = SNLPOSLoggerForCategory(8);
  unint64_t v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v2 = (std::__fs::filesystem::path *)v2->__pn_.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 103) < 0) {
        uint64_t v4 = (unsigned __int8 **)*v4;
      }
      if (!v25) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      snlp::ssu::cache::SSUCacheFileVersion::toString(&__p, (uint64_t)&__s1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v2;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v4;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      long long v28 = p_p;
      _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "App assets for %s have an out-of-date cache file (current encoder version=%s, cache version is %s)", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_35;
  }
  uint64_t v20 = 0;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v2 = (std::__fs::filesystem::path *)v2->__pn_.__r_.__value_.__r.__words[0];
    }
    if (!v25) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    snlp::ssu::cache::SSUCacheFileVersion::toString(&buf, (uint64_t)&__s1);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v2;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "App assets for %s already have an up-to-date cache file with version %s", (uint8_t *)&__p, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = 0;
  }
LABEL_36:
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__s1);
  return v20;
}

void sub_1C8E35CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUPersister::loadAppAssets(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 a3@<W3>, uint64_t a4@<X8>)
{
  if (*(char *)(a2 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else {
    std::string v18 = *(std::string *)(a2 + 72);
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  unsigned __int8 v12 = a3;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v18;
  }
  snlp::ssu::app::SSUAppAssets::loadNegativeExamples(a2, a3, (uint64_t)&v14);
  snlp::ssu::app::SSUAppAssets::loadPositiveExamples(a2, a3, &v16);
  *(_DWORD *)a4 = 0;
  *(unsigned char *)(a4 + 4) = 0;
  *(std::string *)(a4 + 8) = v11;
  memset(&v11, 0, sizeof(v11));
  *(unsigned char *)(a4 + 32) = v12;
  *(std::string *)(a4 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  long long v8 = v14;
  uint64_t v9 = v15;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3);
  *(void *)(a4 + 80) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a4 + 64), v8, v9, v10);
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>((void *)(a4 + 88), v16, v17, 0x8E38E38E38E38E39 * ((v17 - v16) >> 3));
  *(unsigned char *)(a4 + 112) = 1;
  uint64_t v19 = (long long **)&v16;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  uint64_t v19 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E35F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::app::SSULoadedAppAssets,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v3 = (void **)(a1 + 88);
    std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

void snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory(snlp::ssu::matcher::SSUPersister *a1, int a2, snlp::ssu::app::SSULoadedAppAssets *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFile(a1, a3);
}

void sub_1C8E362CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (v24 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::~SSUResultOpt(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFile(snlp::ssu::matcher::SSUPersister *this, const snlp::ssu::app::SSULoadedAppAssets *a2)
{
  snlp::ssu::matcher::SSUPersister::buildIntentList((uint64_t)a2, (uint64_t *)&v7);
  snlp::ssu::cache::SSUCacheDirectory::buildTemporaryCacheFilePath(*((snlp::ssu::cache::SSUCacheDirectory **)this + 4), (const void **)this + 1, (uint64_t)a2 + 40, &__p);
  long long v4 = v7;
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFileInner((uint64_t)this, (uint64_t)&v4, (uint64_t)a2);
}

void sub_1C8E3648C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a9 = v21 - 64;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::file_status snlp::ssu::matcher::SSUPersister::cleanUpTemporaryCacheFile(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_DEBUG, "Cleaning up by removing temporary file", buf, 2u);
  }
  std::__fs::filesystem::file_status result = std::__fs::filesystem::__status(this, 0);
  if (v5)
  {
    if (v5 != 255) {
      return (std::__fs::filesystem::file_status)std::__fs::filesystem::__remove(this, 0);
    }
  }
  return result;
}

void snlp::ssu::matcher::SSUPersister::buildIntentList(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
  long long v4 = *(long long **)(a1 + 88);
  int v32 = *(long long **)(a1 + 96);
  if (v4 != v32)
  {
    char v30 = (unint64_t *)(a2 + 2);
    std::string v31 = a2;
    do
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      unint64_t v37 = 0;
      unsigned __int8 v5 = (long long *)*((void *)v4 + 3);
      uint64_t v6 = (long long *)*((void *)v4 + 4);
      while (v5 != v6)
      {
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v5, *((void *)v5 + 1));
        }
        else
        {
          long long v7 = *v5;
          v33.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
        }
        if (*((char *)v5 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 3), *((void *)v5 + 4));
        }
        else
        {
          long long v8 = *(long long *)((char *)v5 + 24);
          __p.__r_.__value_.__r.__words[2] = *((void *)v5 + 5);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        unint64_t v9 = v36;
        if (v36 >= v37)
        {
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v35) >> 4);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x555555555555555) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v37 - v35) >> 4) > v13) {
            unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v37 - v35) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v35) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v14 = 0x555555555555555;
          }
          else {
            unint64_t v14 = v13;
          }
          uint64_t v42 = &v37;
          if (v14) {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v14);
          }
          else {
            uint64_t v15 = 0;
          }
          unint64_t v16 = v14 + 48 * v12;
          p_p = (std::string *)v14;
          int v39 = (std::string *)v16;
          unint64_t v41 = v14 + 48 * v15;
          long long v17 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
          *(void *)(v16 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v16 = v17;
          memset(&v33, 0, sizeof(v33));
          long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v16 + 40) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v16 + 24) = v18;
          memset(&__p, 0, sizeof(__p));
          char v40 = (std::string *)(v16 + 48);
          std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v35, &p_p);
          unint64_t v19 = v36;
          std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&p_p);
          unint64_t v36 = v19;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
          *(void *)(v36 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v9 = v10;
          memset(&v33, 0, sizeof(v33));
          std::string::size_type v11 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v9 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v9 + 40) = v11;
          memset(&__p, 0, sizeof(__p));
          unint64_t v36 = v9 + 48;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        v5 += 3;
      }
      if (*((char *)v4 + 23) < 0)
      {
        uint64_t v21 = v31;
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v20 = *v4;
        v33.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        uint64_t v21 = v31;
      }
      memset(&__p, 0, sizeof(__p));
      std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v35) >> 4));
      unint64_t v23 = v21[1];
      unint64_t v22 = v21[2];
      if (v23 >= v22)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *v21) >> 4);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x555555555555555) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v21) >> 4);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v28 = 0x555555555555555;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v42 = v30;
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        p_p = (std::string *)v28;
        int v39 = (std::string *)(v28 + 48 * v25);
        char v40 = v39;
        unint64_t v41 = v28 + 48 * v29;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>(v39, (long long *)&v33);
        v40 += 2;
        std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(v21, &p_p);
        uint64_t v24 = v21[1];
        std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)&p_p);
      }
      else
      {
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>((std::string *)v21[1], (long long *)&v33);
        uint64_t v24 = v23 + 48;
        v21[1] = v23 + 48;
      }
      v21[1] = v24;
      p_p = &__p;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      long long v4 = (long long *)((char *)v4 + 72);
    }
    while (v4 != v32);
  }
}

void sub_1C8E369F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
}

void snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFileInner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 88);
  uint64_t v4 = *(void *)(a3 + 96);
  if (v3 != v4)
  {
    int v5 = 0;
    do
    {
      v5 -= 1431655765 * ((*(void *)(v3 + 56) - *(void *)(v3 + 48)) >> 3);
      v3 += 72;
    }
    while (v3 != v4);
  }
  operator new();
}

void sub_1C8E36C20(_Unwind_Exception *a1)
{
  std::default_delete<snlp::ssu::cache::SSUCacheFileWriteStream>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C8E36C3C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, uint64_t *a13, long long a14)
{
  MEMORY[0x1CB775C40](v17, 0x10F2C408EB745A8);
  if (a2 == 1)
  {
    long long v20 = __cxa_begin_catch(a1);
    uint64_t v21 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(v14 + 8);
      uint64_t v23 = v14 + 8;
      uint64_t v22 = v24;
      if (*(char *)(v23 + 23) >= 0) {
        uint64_t v25 = v23;
      }
      else {
        uint64_t v25 = v22;
      }
      unint64_t v26 = (void *)(v15 + 8);
      if (*(char *)(v15 + 31) < 0) {
        unint64_t v26 = (void *)*v26;
      }
      if (*((char *)v16 + 23) >= 0) {
        unint64_t v27 = v16;
      }
      else {
        unint64_t v27 = (uint64_t *)*v16;
      }
      uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = v25;
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v26;
      a12 = 2080;
      a13 = v27;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v28;
      _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_ERROR, "Error opening cache file write stream for app %s, locale %s (temporary path %s): %s", (uint8_t *)&a9, 0x2Au);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8E36BDCLL);
  }
  JUMPOUT(0x1C8E36C34);
}

void sub_1C8E36D50()
{
}

void std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::default_delete<snlp::ssu::cache::SSUCacheFileWriteStream>::operator()[abi:ne180100](uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_oarchive,boost::archive::text_oarchive>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 592));
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 24) = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 24 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1CB7756B0](a1 + 32);
  std::ostream::~ostream();
  MEMORY[0x1CB775B50](a1 + 440);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB775C40);
}

uint64_t snlp::ssu::matcher::SSUPersister::writeNegativeExamplesLoop(std::vector<std::string>::size_type *this, snlp::ssu::cache::SSUCacheFileWriteStream *a2, const snlp::ssu::app::SSULoadedAppAssets *a3)
{
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::reserve(&v19, *this);
  uint64_t v6 = *((void *)a3 + 8);
  uint64_t v7 = *((void *)a3 + 9);
  if (v6 == v7)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      std::vector<std::string>::pointer end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        std::string::size_type v11 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v19, (long long *)v6);
      }
      else
      {
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v19.__end_, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v10 = *(_OWORD *)v6;
          v19.__end_->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        }
        std::string::size_type v11 = end + 1;
      }
      v19.__end_ = v11;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v19.__begin_) >> 3) == *this)
      {
        if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative((uint64_t)this, (uint64_t)a2, (uint64_t *)&v19) & 1) == 0) {
          goto LABEL_19;
        }
        std::vector<std::string>::pointer begin = v19.__begin_;
        std::vector<std::string>::pointer v12 = v19.__end_;
        std::vector<std::string>::resize(&v19, 0);
        v8 -= 1431655765 * ((unint64_t)((char *)v12 - (char *)begin) >> 3);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  int64_t v14 = (char *)v19.__end_ - (char *)v19.__begin_;
  if (v19.__end_ != v19.__begin_)
  {
    if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative((uint64_t)this, (uint64_t)a2, (uint64_t *)&v19) & 1) == 0)
    {
LABEL_19:
      int v16 = 0;
      uint64_t v17 = 0;
      unsigned int v15 = 0;
      goto LABEL_20;
    }
    v8 -= 1431655765 * (v14 >> 3);
  }
  unsigned int v15 = v8 & 0xFFFFFF00;
  int v16 = v8;
  uint64_t v17 = 0x100000000;
LABEL_20:
  long long v20 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v17 | v15 | v16;
}

void sub_1C8E370E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::writePositiveExamplesLoop(std::vector<std::string>::size_type *this, std::string *a2, const snlp::ssu::app::SSULoadedAppAssets *a3)
{
  uint64_t v5 = *((void *)a3 + 11);
  uint64_t v6 = *((void *)a3 + 12);
  v36[0] = v5;
  v36[1] = v6;
  v36[2] = v5;
  if (v5 == v6)
  {
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v37 = *(void *)(v5 + 48);
    uint64_t v38 = 1;
  }
  long long v35 = 0u;
  memset(v34, 0, sizeof(v34));
  std::vector<std::string>::reserve((std::vector<std::string> *)v34, *this);
  std::vector<unsigned long>::reserve((void **)&v34[24], *this);
  snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v36, (uint64_t)v33);
  if (v33[24])
  {
    int v7 = 0;
    do
    {
      int v8 = *(_OWORD **)&v34[8];
      if (*(void *)&v34[8] >= *(void *)&v34[16])
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v34[8] - *(void *)v34) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*(void *)&v34[16] - *(void *)v34) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * ((uint64_t)(*(void *)&v34[16] - *(void *)v34) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v34[16] - *(void *)v34) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v34[16];
        if (v12) {
          unint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v34[16], v12);
        }
        else {
          unint64_t v13 = 0;
        }
        std::__split_buffer<std::string>::pointer end = v13 + v10;
        __v.__first_ = v13;
        __v.__begin_ = end;
        __v.__end_ = end;
        __v.__end_cap_.__value_ = &v13[v12];
        if (*(char *)(*(void *)&v33[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(end, **(const std::string::value_type ***)&v33[16], *(void *)(*(void *)&v33[16] + 8));
          std::__split_buffer<std::string>::pointer end = __v.__end_;
        }
        else
        {
          long long v15 = **(_OWORD **)&v33[16];
          end->__r_.__value_.__r.__words[2] = *(void *)(*(void *)&v33[16] + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        }
        __v.__end_ = end + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v34, &__v);
        uint64_t v16 = *(void *)&v34[8];
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        *(void *)&v34[8] = v16;
        if (!v33[24]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
      }
      else
      {
        if (*(char *)(*(void *)&v33[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)&v34[8], **(const std::string::value_type ***)&v33[16], *(void *)(*(void *)&v33[16] + 8));
        }
        else
        {
          long long v9 = **(_OWORD **)&v33[16];
          *(void *)(*(void *)&v34[8] + 16) = *(void *)(*(void *)&v33[16] + 16);
          _OWORD *v8 = v9;
        }
        *(void *)&v34[8] = (char *)v8 + 24;
      }
      uint64_t v17 = (char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        std::vector<std::string> v19 = *(char **)&v34[24];
        uint64_t v20 = (uint64_t)(v35 - *(void *)&v34[24]) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = *((void *)&v35 + 1) - *(void *)&v34[24];
        if ((uint64_t)(*((void *)&v35 + 1) - *(void *)&v34[24]) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v35 + 8, v23);
          std::vector<std::string> v19 = *(char **)&v34[24];
          uint64_t v17 = (char *)v35;
        }
        else
        {
          uint64_t v24 = 0;
        }
        uint64_t v25 = &v24[8 * v20];
        *(void *)uint64_t v25 = *(void *)v33;
        long long v18 = v25 + 8;
        while (v17 != v19)
        {
          uint64_t v26 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v25 - 1) = v26;
          v25 -= 8;
        }
        *(void *)&v34[24] = v25;
        *(void *)&long long v35 = v18;
        *((void *)&v35 + 1) = &v24[8 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)long long v35 = *(void *)v33;
        long long v18 = v17 + 8;
      }
      *(void *)&long long v35 = v18;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v34[8] - *(void *)v34) >> 3);
      if (v27 == *this)
      {
        if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive((snlp::ssu::matcher::SSUPersister *)this, a2, (const snlp::ssu::matcher::BatchData *)v34) & 1) == 0)goto LABEL_50; {
        std::vector<std::string>::resize((std::vector<std::string> *)v34, 0);
        }
        std::vector<unsigned long>::resize((uint64_t)&v34[24], 0);
        v7 += v27;
      }
      snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v36, (uint64_t)&__v);
      *(_OWORD *)&v33[9] = *(_OWORD *)((char *)&__v.__begin_ + 1);
      *(_OWORD *)std::string v33 = *(_OWORD *)&__v.__first_;
    }
    while (LOBYTE(__v.__end_cap_.__value_));
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v28 = *(void *)&v34[8] - *(void *)v34;
  if (*(void *)&v34[8] == *(void *)v34) {
    goto LABEL_49;
  }
  if (snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive((snlp::ssu::matcher::SSUPersister *)this, a2, (const snlp::ssu::matcher::BatchData *)v34))
  {
    v7 -= 1431655765 * (v28 >> 3);
LABEL_49:
    unsigned int v29 = v7 & 0xFFFFFF00;
    int v30 = v7;
    uint64_t v31 = 0x100000000;
    goto LABEL_51;
  }
LABEL_50:
  int v30 = 0;
  unsigned int v29 = 0;
  uint64_t v31 = 0;
LABEL_51:
  if (*(void *)&v34[24])
  {
    *(void *)&long long v35 = *(void *)&v34[24];
    operator delete(*(void **)&v34[24]);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v31 | v29 | v30;
}

void sub_1C8E374C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17)
{
}

BOOL snlp::ssu::matcher::SSUPersister::writeDebugInformation(void *a1, uint64_t a2, uint64_t a3)
{
  long long v43 = 0uLL;
  unint64_t v44 = 0;
  long long v41 = 0uLL;
  unint64_t v42 = 0;
  uint64_t v5 = *(void *)(a3 + 88);
  uint64_t v6 = *(void *)(a3 + 96);
  v38[0] = v5;
  v38[1] = v6;
  v38[2] = v5;
  if (v5 == v6)
  {
    LOBYTE(v39) = 0;
    LOBYTE(v40) = 0;
  }
  else
  {
    uint64_t v39 = *(void *)(v5 + 48);
    uint64_t v40 = 1;
  }
  snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v38, (uint64_t)v37);
  if (v37[24])
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *((void *)&v43 + 1);
      if (!(v7 % *a1))
      {
        if (*((void *)&v43 + 1) >= v44)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v43 + 1) - v43) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v44 - v43) >> 3) > v11) {
            unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v44 - v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v43) >> 3) >= 0x555555555555555) {
            unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v12 = v11;
          }
          *(void *)&v35[32] = &v44;
          if (v12) {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v12);
          }
          else {
            uint64_t v13 = 0;
          }
          int64_t v14 = (void *)(v12 + 24 * v10);
          *(void *)long long v35 = v12;
          *(void *)&v35[8] = v14;
          *(void *)&v35[24] = v12 + 24 * v13;
          *int64_t v14 = 0;
          v14[1] = 0;
          void v14[2] = 0;
          *(void *)&v35[16] = v14 + 3;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v43, v35);
          uint64_t v9 = *((void *)&v43 + 1);
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v35);
        }
        else
        {
          **((void **)&v43 + 1) = 0;
          *(void *)(v9 + 8) = 0;
          *(void *)(v9 + 16) = 0;
          v9 += 24;
        }
        unint64_t v7 = 0;
        *((void *)&v43 + 1) = v9;
      }
      unint64_t v15 = *(void *)(v9 - 8);
      uint64_t v16 = *(char **)(v9 - 16);
      if ((unint64_t)v16 >= v15)
      {
        long long v18 = *(char **)(v9 - 24);
        uint64_t v19 = (v16 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = v15 - (void)v18;
        unint64_t v21 = (uint64_t)(v15 - (void)v18) >> 2;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9 - 8, v22);
          long long v18 = *(char **)(v9 - 24);
          uint64_t v16 = *(char **)(v9 - 16);
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        *(void *)uint64_t v24 = v8;
        uint64_t v17 = v24 + 8;
        while (v16 != v18)
        {
          uint64_t v25 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v24 - 1) = v25;
          v24 -= 8;
        }
        *(void *)(v9 - 24) = v24;
        *(void *)(v9 - 16) = v17;
        *(void *)(v9 - 8) = &v23[8 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v16 = v8;
        uint64_t v17 = v16 + 8;
      }
      *(void *)(v9 - 16) = v17;
      if (!v37[24]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v26 = (_OWORD *)*((void *)&v41 + 1);
      if (*((void *)&v41 + 1) >= v42)
      {
        uint64_t v28 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v41, *(long long **)&v37[16]);
      }
      else
      {
        if (*(char *)(*(void *)&v37[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v41 + 1), **(const std::string::value_type ***)&v37[16], *(void *)(*(void *)&v37[16] + 8));
        }
        else
        {
          long long v27 = **(_OWORD **)&v37[16];
          *(void *)(*((void *)&v41 + 1) + 16) = *(void *)(*(void *)&v37[16] + 16);
          _OWORD *v26 = v27;
        }
        uint64_t v28 = (uint64_t)v26 + 24;
      }
      *((void *)&v41 + 1) = v28;
      snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v38, (uint64_t)v35);
      ++v8;
      ++v7;
      *(_OWORD *)&v37[9] = *(_OWORD *)&v35[9];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v35;
    }
    while (v35[24]);
    long long v29 = v43;
    unint64_t v30 = v44;
    long long v31 = v41;
    unint64_t v32 = v42;
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v30 = 0;
    long long v31 = 0uLL;
    long long v29 = 0uLL;
  }
  *(_OWORD *)long long v35 = v29;
  *(void *)&v35[16] = v30;
  unint64_t v44 = 0;
  long long v43 = 0uLL;
  *(_OWORD *)&v35[24] = v31;
  unint64_t v36 = v32;
  unint64_t v42 = 0;
  long long v41 = 0uLL;
  BOOL v33 = snlp::ssu::cache::SSUCacheFileWriteStream::writeDebugInformation(a2, (uint64_t)v35);
  *(void *)uint64_t v37 = &v35[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(void *)uint64_t v37 = v35;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(void *)long long v35 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
  *(void *)long long v35 = &v43;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
  return v33;
}

void sub_1C8E3787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  snlp::ssu::cache::SSUCacheObjectDebugInformation::~SSUCacheObjectDebugInformation(&a11);
  a22 = (void **)&a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  a22 = (void **)(v27 - 112);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *std::__fs::filesystem::file_status result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void snlp::ssu::cache::SSUCacheObjectDebugInformation::~SSUCacheObjectDebugInformation(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive(snlp::ssu::matcher::SSUPersister *this, std::string *a2, const snlp::ssu::matcher::BatchData *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 8) + 16))(&v23);
  snlp::ssu::encoder::SSUEncoder::computeEncodings(v23, (uint64_t *)a3, (uint64_t)v19);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v19;
  uint64_t v13 = v20;
  v19[0] = 0;
  v19[1] = 0;
  *(_OWORD *)int64_t v14 = *(_OWORD *)v21;
  uint64_t v5 = v22;
  uint64_t v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  uint64_t v15 = v5;
  std::string __p = 0;
  uint64_t v6 = (const void *)*((void *)a3 + 3);
  uint64_t v7 = *((void *)a3 + 4);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 3);
  if (snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchPositive((uint64_t)a2, (uint64_t)v12))
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v27, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else {
        std::string v27 = *a2;
      }
      unint64_t v10 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v26 = v10;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "Error writing positive batch for cache file %s", buf, 0xCu);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v8 = 0;
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  if (v21[0]) {
    operator delete(v21[0]);
  }
  if (v19[0]) {
    operator delete(v19[0]);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return v8;
}

void sub_1C8E37C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::vector<std::string>::pointer end = this->__end_;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      uint64_t v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      size_t v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::string>::size_type v10 = 2 * v9;
      if (2 * v9 <= __sz) {
        std::vector<std::string>::size_type v10 = __sz;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)p_end_cap, v11);
      uint64_t v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_1C8E37F6C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void snlp::ssu::matcher::BatchData::~BatchData(snlp::ssu::matcher::BatchData *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::~SSUCacheObjectEncodingsBatchPositive(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v17);
  snlp::ssu::encoder::SSUEncoder::computeEncodings(v17, a3, (uint64_t)v13);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v13;
  uint64_t v10 = v14;
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)v15;
  uint64_t v12 = v16;
  uint64_t v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  if (snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchNegative(a2, (uint64_t)v9))
  {
    uint64_t v5 = 1;
  }
  else
  {
    unint64_t v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v21 = *(std::string *)a2;
      }
      uint64_t v7 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v20 = v7;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "Error writing negative batch for cache file %s)", buf, 0xCu);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v5 = 0;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v9[0]) {
    operator delete(v9[0]);
  }
  if (v15[0]) {
    operator delete(v15[0]);
  }
  if (v13[0]) {
    operator delete(v13[0]);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return v5;
}

void sub_1C8E381E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::string *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_oarchive,boost::archive::text_oarchive>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[32];
  if (v2 != -1) {
    off_1F2362610[v2]((int)&v4, (boost::archive::detail::basic_oarchive *)a1);
  }
  a1[32] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_oarchiveENS9_13text_oarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_oarchive *this)
{
  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_oarchiveENS9_13text_oarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_oarchive *this)
{
  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive();
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4));
}

void sub_1C8E38518(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheObjectIntent::~SSUCacheObjectIntent(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *std::__fs::filesystem::file_status result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *std::__fs::filesystem::file_status result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::app::SSULoadedAppAssets::~SSULoadedAppAssets(void **this)
{
  uint64_t v2 = this + 11;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    long long v6 = result;
    std::__fs::filesystem::file_status result = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(a4);
    long long v7 = result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[9 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v7[v9 / 8];
        unint64_t v11 = (long long *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9 / 8], *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          v10[2] = *((void *)v11 + 2);
          *(_OWORD *)uint64_t v10 = v12;
        }
        uint64_t v13 = &v7[v9 / 8];
        uint64_t v14 = &v7[v9 / 8];
        void v14[3] = 0;
        v14[4] = 0;
        v7[v9 / 8 + 5] = 0;
        std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(&v7[v9 / 8 + 3], *(void *)(a2 + v9 + 24), *(void *)(a2 + v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v9 + 32) - *(void *)(a2 + v9 + 24)) >> 4));
        v13[6] = 0;
        v13[7] = 0;
        size_t v15 = (std::string *)&v7[v9 / 8 + 6];
        v15->__r_.__value_.__r.__words[2] = 0;
        std::__fs::filesystem::file_status result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v15, *(long long **)(a2 + v9 + 48), *(long long **)(a2 + v9 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v9 + 56) - *(void *)(a2 + v9 + 48)) >> 3));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      long long v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C8E3890C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v7[v9];
        unint64_t v11 = (long long *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9], *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *(_OWORD *)uint64_t v10 = v12;
        }
        uint64_t v13 = (std::string *)&v7[v9 + 24];
        uint64_t v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(void *)(a2 + v9 + 32));
        }
        else
        {
          long long v15 = *(_OWORD *)v14;
          *(void *)&v7[v9 + 40] = *(void *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    a1[1] = v7;
  }
}

void sub_1C8E38A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

void snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion(uint64_t a1@<X0>, std::__fs::filesystem::path *a2@<X1>, std::string *a3@<X8>)
{
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(*(void *)(a1 + 32), (char *)(a1 + 8), a2, (uint64_t)v9);
  uint64_t v4 = v9[0];
  if (v9[0] == v9[1])
  {
    char v6 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (*(char *)(v9[0] + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9[0] + 32), *(void *)(v9[0] + 40));
    }
    else
    {
      long long v5 = *(_OWORD *)(v9[0] + 32);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v9[0] + 48);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
    long long v7 = a3 + 1;
    if (*(char *)(v4 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v4 + 56), *(void *)(v4 + 64));
    }
    else
    {
      long long v8 = *(_OWORD *)(v4 + 56);
      a3[1].__r_.__value_.__r.__words[2] = *(void *)(v4 + 72);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    char v6 = 1;
  }
  a3[2].__r_.__value_.__s.__data_[0] = v6;
  uint64_t v10 = (void **)v9;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1C8E38BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  a12 = (void **)&a9;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheFileVersion::toString(std::string *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v20, "SSUCacheFileVersion{encoderVersion=");
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    long long v5 = (const std::string::value_type *)a2;
  }
  else {
    long long v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  long long v7 = std::string::append(&v20, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v21, ", datasetVersion=");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = *(const std::string::value_type **)(a2 + 24);
  uint64_t v12 = a2 + 24;
  unint64_t v11 = v13;
  int v14 = *(char *)(v12 + 23);
  if (v14 >= 0) {
    long long v15 = (const std::string::value_type *)v12;
  }
  else {
    long long v15 = v11;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(v12 + 8);
  }
  uint64_t v17 = std::string::append(&v22, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v23, "}");
  *this = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E38D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired(snlp::ssu::matcher::SSUPersister *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  snlp::ssu::usershortcut::computeHash(a2, a4);
  if (snlp::ssu::matcher::SSUPersister::userShortcutsRequireUpdate((uint64_t)a1, (std::string::size_type)&v21))
  {
    int v11 = 0;
    char v12 = 0;
    uint64_t v13 = operator new(0x38uLL);
    long long v14 = xmmword_1C8F38610;
    strcpy((char *)v13, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
    qmemcpy(v10, "sing.SSUUserShorturalLanguageParcom.apple.SiriNa", sizeof(v10));
    char v15 = 1;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v21;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    snlp::ssu::usershortcut::buildPositiveExamples((long long **)a2, v20);
    uint64_t v9 = (char *)operator new(0x38uLL);
    std::string buf = v9;
    long long v23 = xmmword_1C8F38610;
    *(_OWORD *)uint64_t v9 = v10[2];
    *((_OWORD *)v9 + 1) = v10[1];
    *((_OWORD *)v9 + 2) = v10[0];
    strcpy(v9 + 45, "hortcuts");
    snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory(a1, (int)&buf, (snlp::ssu::app::SSULoadedAppAssets *)&v11);
  }
  long long v7 = (char *)operator new(0x38uLL);
  strcpy(v7, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
  long long v8 = operator new(0x10uLL);
  *(_WORD *)long long v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  void v8[3] = 1;
  *(void *)a3 = v7;
  *(_OWORD *)(a3 + 8) = xmmword_1C8F38610;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v8 + 4;
  *(void *)(a3 + 48) = v8 + 4;
  *(unsigned char *)(a3 + 56) = 1;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E39128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::matcher::SSUPersister::userShortcutsRequireUpdate(uint64_t a1, std::string::size_type a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1C8F38610;
  strcpy(v36.__r_.__value_.__l.__data_, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
  snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion(a1, (std::__fs::filesystem::path *)&v36, &__s1);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (!v34) {
    goto LABEL_62;
  }
  int v4 = (unsigned __int8 **)(a1 + 80);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 103);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 88);
  }
  if (size == v6)
  {
    if (v7 >= 0) {
      long long v8 = (unsigned __int8 **)(a1 + 80);
    }
    else {
      long long v8 = (unsigned __int8 **)*v4;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v17 = memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v12 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v11 = v12;
        int v14 = *(unsigned __int8 *)v8;
        long long v8 = (unsigned __int8 **)((char *)v8 + 1);
        int v13 = v14;
        BOOL v16 = v9-- != 0;
        BOOL v17 = v11 == v13;
      }
      while (v11 == v13 && v16);
    }
    else
    {
      BOOL v17 = 1;
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  uint64_t v18 = v33;
  if ((v33 & 0x80u) == 0) {
    size_t v19 = v33;
  }
  else {
    size_t v19 = v32;
  }
  uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a2 + 8);
  }
  if (v19 != v20) {
    goto LABEL_51;
  }
  std::string v22 = v21 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
  if ((v33 & 0x80) != 0)
  {
    LOBYTE(v18) = memcmp(v31, v22, v32) != 0;
  }
  else if (v33)
  {
    long long v23 = &v31;
    while (*(unsigned __int8 *)v23 == *v22)
    {
      long long v23 = (void **)((char *)v23 + 1);
      ++v22;
      if (!--v18) {
        goto LABEL_41;
      }
    }
    goto LABEL_51;
  }
LABEL_41:
  if (!v17 || (v18 & 1) != 0)
  {
LABEL_51:
    std::string v27 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 103) < 0) {
        int v4 = (unsigned __int8 **)*v4;
      }
      if (*(char *)(a2 + 23) < 0) {
        a2 = *(void *)a2;
      }
      if (!v34) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      snlp::ssu::cache::SSUCacheFileVersion::toString(&buf, (uint64_t)&__s1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v36.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      WORD2(v36.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = a2;
      HIWORD(v36.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v37 = p_buf;
      _os_log_impl(&dword_1C8DA9000, v27, OS_LOG_TYPE_DEBUG, "User shortcuts have an out-of-date cache file (current encoder version=%s, current dataset version=%s, cache version=%s,)", (uint8_t *)&v36, 0x20u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
LABEL_62:
    uint64_t v25 = 1;
    goto LABEL_63;
  }
  uint64_t v24 = SNLPOSLoggerForCategory(8);
  uint64_t v25 = 0;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    if (!v34) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    snlp::ssu::cache::SSUCacheFileVersion::toString(&v36, (uint64_t)&__s1);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v36;
    }
    else {
      uint64_t v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEFAULT, "User shortcuts already have an up-to-date cache file with version %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    uint64_t v25 = 0;
  }
LABEL_63:
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__s1);
  return v25;
}

void sub_1C8E39518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::computeTotalNumExamples(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = result - 1431655765 * ((*(void *)(v1 + 56) - *(void *)(v1 + 48)) >> 3);
    v1 += 72;
  }
  while (v1 != v2);
  return result;
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (uint64_t *)(a1 + 144);
  long long v8 = (void *)(a1 + 168);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 168, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 152);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*v7 + 8 * v3);
    if (v14)
    {
      uint64_t v31 = a3;
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 176, i + 16, (unsigned __int8 *)a2)) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
      a3 = v31;
    }
  }
  BOOL v17 = operator new(0x30uLL);
  *BOOL v17 = 0;
  v17[1] = v10;
  uint64_t v18 = (std::string *)(v17 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v17[4] = *(void *)(a2 + 16);
  }
  v17[5] = a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 168) + 1);
  float v20 = *(float *)(a1 + 176);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v7, v24);
    unint64_t v11 = *(void *)(a1 + 152);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *v7;
  uint64_t v26 = *(void **)(*v7 + 8 * v3);
  if (v26)
  {
    *BOOL v17 = *v26;
LABEL_42:
    void *v26 = v17;
    goto LABEL_43;
  }
  *BOOL v17 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v17;
  *(void *)(v25 + 8 * v3) = a1 + 160;
  if (*v17)
  {
    unint64_t v27 = *(void *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*v7 + 8 * v27);
    goto LABEL_42;
  }
LABEL_43:
  ++*v8;
LABEL_44:
  uint64_t v28 = (uint64_t *)(a1 + 184);
  unint64_t v29 = *(void *)(a1 + 192);
  if (v29 >= *(void *)(a1 + 200))
  {
    uint64_t result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v28, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v28, (long long *)a2);
    uint64_t result = v29 + 24;
  }
  *(void *)(a1 + 192) = result;
  return result;
}

void sub_1C8E39810(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(nlv4_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, std::string *a2@<X8>)
{
  char v3 = *((unsigned char *)this + 120);
  if (v3)
  {
    if (*((char *)this + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
    }
    char v3 = 1;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  a2[1].__r_.__value_.__s.__data_[0] = v3;
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadTokenId(nlv4_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return *((void *)this + 14);
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::getUnknownTokenId(nlv4_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return *((void *)this + 12);
}

unsigned __int8 *nlv4_inference_orchestrator::vocabulary::Vocabulary::getTokenId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 144), a2);
  if (result) {
    return (unsigned __int8 *)*((void *)result + 5);
  }
  return result;
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v4 = std::locale::use_facet(&v17, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v17);
  uint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
    goto LABEL_2;
  }
  uint64_t v8 = HIBYTE(v16);
  if (v16 < 0) {
    uint64_t v8 = v15;
  }
  if (!v8)
  {
LABEL_2:
    uint64_t v7 = 0;
  }
  else
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 184), *(void *)(a1 + 136));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1 + 144, vcvtps_u32_f32((float)*(unint64_t *)(a1 + 136) / *(float *)(a1 + 176)));
    nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, 0);
    uint64_t v7 = 1;
  }
  unint64_t v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    unint64_t v10 = std::locale::use_facet(&v17, v9);
    unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v17);
    uint8x8_t v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v11);
    uint64_t v13 = HIBYTE(v16);
    if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v16 < 0) {
      uint64_t v13 = v15;
    }
    if (v13) {
      nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, v7++);
    }
  }
  if (v16 < 0) {
    operator delete(__p);
  }
}

void sub_1C8E39AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[19] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = (unsigned __int8 *)(std::string::basic_string[abi:ne180100]<0>((void *)a1, "[UNK]") + 3);
  std::string::basic_string[abi:ne180100]<0>(v5, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "[CLS]");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 72), "[SEP]");
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0x10000;
  *(void *)(a1 + 136) = a3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v6 = std::ifstream::basic_ifstream(v16);
  MEMORY[0x1F4188790](v6);
  (*(void (**)(void *))(v17[0] + 24))(v17);
  if ((*((unsigned char *)&v17[2] + *(void *)(v16[0] - 24)) & 5) != 0)
  {
    std::ifstream::close(v16);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  nlv4_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(a1, v16);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)), *(_DWORD *)((char *)&v17[2] + *(void *)(v16[0] - 24)) | 4);
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 144), v5);
  if (v7)
  {
    uint64_t v8 = *((void *)v7 + 5);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    uint64_t v8 = 0;
  }
  *(void *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 120) = v9;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 144), (unsigned __int8 *)a1);
  if (v10)
  {
    uint64_t v11 = *((void *)v10 + 5);
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v12;
  v16[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v17);
  std::istream::~istream();
  MEMORY[0x1CB775B50](v18);
  return a1;
}

void sub_1C8E39E98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0)
  {
    operator delete(*(void **)(v1 + 8));
    if ((v7 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream((void *)(v1 + 32));
      *(void *)(v1 + 32) = v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 32));
      std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v5);
      if (*(char *)(v2 + 95) < 0) {
        operator delete(*v6);
      }
      if (*(char *)(v2 + 71) < 0) {
        operator delete(*v4);
      }
      if (*(char *)(v2 + 47) < 0) {
        operator delete(*v3);
      }
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v7)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v8);
  goto LABEL_6;
}

void sub_1C8E3A0F0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1CB775B50](v1);
  _Unwind_Resume(a1);
}

void std::ifstream::close(void *a1)
{
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "tokenText argument is empty");
    goto LABEL_11;
  }
  int v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 144), (unsigned __int8 *)a2);
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 104))
    {
      uint64_t v5 = (unsigned __int8 *)(a1 + 96);
      return *(void *)v5;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Encountered unknown token text and the vocabulary hasno special unknown token");
LABEL_11:
    __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v5 = v4 + 40;
  return *(void *)v5;
}

void sub_1C8E3A244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(nlv4_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 23);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 24) - v3) >> 3) <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Encountered unknown token ID");
    __cxa_throw(exception, (struct type_info *)off_1E657FB30, MEMORY[0x1E4FBA1B8]);
  }
  int v4 = (long long *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
  {
    uint64_t v6 = *(const std::string::value_type **)v4;
    std::string::size_type v7 = *((void *)v4 + 1);
    std::string::__init_copy_ctor_external(a3, v6, v7);
  }
  else
  {
    long long v5 = *v4;
    a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C8E3A348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromLegacyNlContext(const void **this@<X0>, const sirinluexternal::LegacyNLContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v5 = *((void *)a2 + 1);
  if (!v5)
  {
LABEL_35:
    std::string v15 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *((int *)this + 14);
      if (v16 >= 8)
      {
        BOOL v21 = SNLPOSLoggerForCategory(4);
        std::locale v17 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          __int16 v32 = 2048;
          *(void *)unsigned __int8 v33 = v16;
          _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        std::locale v17 = off_1E65808C8[v16];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] Failed to featurize any labels from legacyNlContext", buf, 0xCu);
    }
    return;
  }
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_35;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_35;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)buf, this + 82, (const void **)v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, buf, (uint64_t)buf);
  char v7 = *((unsigned char *)a2 + 72);
  if ((v7 & 2) != 0)
  {
    if (*((unsigned char *)a2 + 68)) {
      uint64_t v8 = "TRUE";
    }
    else {
      uint64_t v8 = "FALSE";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v38, this + 76, (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v38, (uint64_t)v38);
    if (v41 < 0) {
      operator delete(*(void **)v38);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)__p);
    }
    char v7 = *((unsigned char *)a2 + 72);
  }
  if ((v7 & 8) != 0)
  {
    if (*((unsigned char *)a2 + 70)) {
      uint64_t v9 = "TRUE";
    }
    else {
      uint64_t v9 = "FALSE";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v38, this + 79, (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v38, (uint64_t)v38);
    if (v41 < 0) {
      operator delete(*(void **)v38);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if ((v33[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (!*(void *)(a3 + 24)) {
    goto LABEL_35;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v10 = a3 + 16;
  while (1)
  {
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33[2], (uint64_t)", ", 2);
    int v12 = *(char *)(v10 + 39);
    if (v12 >= 0) {
      uint64_t v13 = v10 + 16;
    }
    else {
      uint64_t v13 = *(void *)(v10 + 16);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 39);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  uint64_t v18 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *((int *)this + 14);
    if (v19 >= 8)
    {
      unint64_t v22 = SNLPOSLoggerForCategory(4);
      float v20 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v38 = 136315394;
        *(void *)&v38[4] = "<UNDEFINED_COMPONENT>";
        __int16 v39 = 2048;
        uint64_t v40 = v19;
        _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v38, 0x16u);
      }
    }
    else
    {
      float v20 = off_1E65808C8[v19];
    }
    uint64_t v23 = *(void *)(a3 + 24);
    std::stringbuf::str();
    if (v41 >= 0) {
      size_t v24 = v38;
    }
    else {
      size_t v24 = *(unsigned char **)v38;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v20;
    __int16 v27 = 2048;
    uint64_t v28 = v23;
    __int16 v29 = 2080;
    unint64_t v30 = v24;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "[%s] Featurized the following %lu LegacyNLContext features in ITFMParserRequest: %s", __p, 0x20u);
    if (v41 < 0) {
      operator delete(*(void **)v38);
    }
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA408];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v33[2] = v25;
  uint64_t v34 = MEMORY[0x1E4FBA470] + 16;
  if (v36 < 0) {
    operator delete(v35);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](&v37);
}

void sub_1C8E3A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromNLContext(itfm_inference_orchestrator::context::ContextFeaturizer *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = (const void **)((char *)this + 64);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels((itfm_inference_orchestrator::context::ContextFeaturizer *)((char *)this + 64), a2, a3);
  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(v5, a2, (uint64_t)&__p);
    size_t v6 = v10;
    if (v10)
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)v6 + 16, (uint64_t)(v6 + 2));
        size_t v6 = (void **)*v6;
      }
      while (v6);
      char v7 = v10;
    }
    else
    {
      char v7 = 0;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v7);
    uint64_t v8 = __p;
    std::string __p = 0;
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_1C8E3AA88(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabels(itfm_inference_orchestrator::context::ContextFeaturizer *this@<X0>, sirinluexternal::LegacyNLContext *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v8 = *((unsigned __int8 *)a2 + 80);
  if (*((unsigned char *)a2 + 80)) {
    BOOL v9 = *(_DWORD *)this > 1u;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *((int *)this + 14);
      if (v11 >= 8)
      {
        uint64_t v13 = SNLPOSLoggerForCategory(4);
        int v12 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v11;
          _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        int v12 = off_1E65808C8[v11];
      }
      int v14 = *(_DWORD *)this;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] Warning: Legacy NL context features were supplied, but the asset directory major version (%u) does not support these. These will not be featurized.", buf, 0x12u);
    }
    int v8 = *((unsigned __int8 *)a2 + 80);
  }
  memset(buf, 0, sizeof(buf));
  int v54 = 1065353216;
  if (v8)
  {
    itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromLegacyNlContext((const void **)this, a2, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)buf, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v52[2]);
    std::string v15 = *(void **)__p;
    *(void *)std::string __p = 0;
    if (v15) {
      operator delete(v15);
    }
    if (!*((unsigned char *)a2 + 80)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v8 = *((_DWORD *)a2 + 16);
    uint64_t v16 = *(void *)&buf[24];
  }
  else
  {
    uint64_t v16 = 0;
  }
  char v17 = *(unsigned char *)(a3 + 112);
  if (v17)
  {
    BOOL v18 = *(void *)(a3 + 8) != *(void *)(a3 + 16);
    char v17 = *(void *)(a3 + 32) != *(void *)(a3 + 40);
    if (*(void *)(a3 + 88) != *(void *)(a3 + 96))
    {
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 1065353216;
LABEL_31:
      size_t v24 = SNLPOSLoggerForCategory(2);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v25 = *((int *)this + 14);
        if (v25 >= 8)
        {
          __int16 v27 = SNLPOSLoggerForCategory(4);
          uint64_t v26 = "<UNDEFINED_COMPONENT>";
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
            __int16 v51 = 2048;
            *(void *)std::string v52 = v25;
            _os_log_impl(&dword_1C8DA9000, v27, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
          }
        }
        else
        {
          uint64_t v26 = off_1E65808C8[v25];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v26;
        _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "[%s] Using context featurization labels extracted from the NL Context", __p, 0xCu);
      }
      if (!*(unsigned char *)(a3 + 112)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromNLContext(this, (const sirinluexternal::NLContext *)a3, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a4, (uint64_t *)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v52[2]);
      uint64_t v28 = *(void **)__p;
      *(void *)std::string __p = 0;
      if (v28) {
        operator delete(v28);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 584, (uint64_t)this + 584);
      if (*((unsigned char *)a2 + 80))
      {
        __int16 v29 = SNLPOSLoggerForCategory(2);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v30 = *((int *)this + 14);
          if (v30 >= 8)
          {
            uint64_t v34 = SNLPOSLoggerForCategory(4);
            uint64_t v31 = "<UNDEFINED_COMPONENT>";
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
              __int16 v51 = 2048;
              *(void *)std::string v52 = v30;
              _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
            }
          }
          else
          {
            uint64_t v31 = off_1E65808C8[v30];
          }
          *(_DWORD *)std::string __p = 136315138;
          *(void *)&__p[4] = v31;
          _os_log_impl(&dword_1C8DA9000, v29, OS_LOG_TYPE_DEBUG, "[%s] Warning: The request's nlContext contains a SDA. Skipping featurization for the legacy context.", __p, 0xCu);
        }
      }
      goto LABEL_60;
    }
  }
  else
  {
    BOOL v18 = 0;
  }
  BOOL v19 = v8 != 2 && v18;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if ((v17 & 1) != 0 || v19) {
    goto LABEL_31;
  }
  float v20 = SNLPOSLoggerForCategory(2);
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v21)
    {
      uint64_t v22 = *((int *)this + 14);
      if (v22 >= 8)
      {
        long long v35 = SNLPOSLoggerForCategory(4);
        uint64_t v23 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
          __int16 v51 = 2048;
          *(void *)std::string v52 = v22;
          _os_log_impl(&dword_1C8DA9000, v35, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
        }
      }
      else
      {
        uint64_t v23 = off_1E65808C8[v22];
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v23;
      _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEBUG, "[%s] SDA not featurized; using featurized labels from Legacy NL Context instead",
        __p,
        0xCu);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 560, (uint64_t)this + 560);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 536, (uint64_t)this + 536);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 512, (uint64_t)this + 512);
    char v36 = *(unsigned __int8 **)&buf[16];
    if (*(void *)&buf[16])
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, v36 + 16, (uint64_t)(v36 + 16));
        char v36 = *(unsigned __int8 **)v36;
      }
      while (v36);
    }
  }
  else
  {
    if (v21)
    {
      uint64_t v32 = *((int *)this + 14);
      if (v32 >= 8)
      {
        uint64_t v37 = SNLPOSLoggerForCategory(4);
        unsigned __int8 v33 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
          __int16 v51 = 2048;
          *(void *)std::string v52 = v32;
          _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
        }
      }
      else
      {
        unsigned __int8 v33 = off_1E65808C8[v32];
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v33;
      _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEBUG, "[%s] Failed to extract any labels from NL Context or Legacy NL Context", __p, 0xCu);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 560, (uint64_t)this + 560);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 584, (uint64_t)this + 584);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 536, (uint64_t)this + 536);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 512, (uint64_t)this + 512);
  }
LABEL_60:
  for (uint64_t i = *(void **)(a4 + 16);
        i;
        uint64_t i = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase((void *)a4, (void **)i))
  {
    while (1)
    {
      __int16 v39 = i + 2;
      uint64_t v40 = itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*((void **)this + 2), (uint64_t)(i + 2));
      uint64_t TokenId = itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId(*((void *)this + 2), *((void **)this + 2));
      if (v42 && v40 == TokenId) {
        break;
      }
      uint64_t i = (void *)*i;
      if (!i) {
        goto LABEL_76;
      }
    }
    unint64_t v44 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v45 = *((int *)this + 14);
      if (v45 >= 8)
      {
        int v47 = SNLPOSLoggerForCategory(4);
        BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
        uint64_t v46 = "<UNDEFINED_COMPONENT>";
        if (v48)
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "<UNDEFINED_COMPONENT>";
          __int16 v51 = 2048;
          *(void *)std::string v52 = v45;
          _os_log_impl(&dword_1C8DA9000, v47, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
          uint64_t v46 = "<UNDEFINED_COMPONENT>";
        }
      }
      else
      {
        uint64_t v46 = off_1E65808C8[v45];
      }
      if (*((char *)i + 39) < 0) {
        __int16 v39 = (void *)*v39;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v46;
      __int16 v51 = 2080;
      *(void *)std::string v52 = v39;
      _os_log_impl(&dword_1C8DA9000, v44, OS_LOG_TYPE_DEBUG, "[%s] Label '%s' not present in vocabulary. Skipping. (Is this label supported by the provided assets?)", __p, 0x16u);
    }
  }
LABEL_76:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&buf[16]);
  unsigned __int8 v49 = *(void **)buf;
  *(void *)std::string buf = 0;
  if (v49) {
    operator delete(v49);
  }
}

void sub_1C8E3B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  char v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  BOOL v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(void *a1, void **a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *a2;
  unint64_t v3 = (unint64_t)a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v6 = *(void ***)(*a1 + 8 * v3);
  do
  {
    char v7 = v6;
    uint64_t v6 = (void **)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = (unint64_t)v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    BOOL v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = v4[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  BOOL v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    BOOL v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = v9[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    BOOL v9 = *a2;
  }
LABEL_27:
  *char v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::featurize(uint64_t a1, char **a2, uint64_t a3, sirinluexternal::LegacyNLContext *a4, uint64_t a5)
{
  v85[19] = *MEMORY[0x1E4F143B8];
  itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabels((itfm_inference_orchestrator::context::ContextFeaturizer *)a1, a4, a3, (uint64_t)&v71);
  memset(&v70, 0, sizeof(v70));
  unint64_t v8 = (long long *)v72;
  *(void *)std::string buf = &v70;
  if (v72)
  {
    do
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)buf, v8 + 1);
      unint64_t v8 = *(long long **)v8;
    }
    while (v8);
    std::vector<std::string>::pointer begin = v70.__begin_;
    std::vector<std::string>::pointer end = (__n128 *)v70.__end_;
  }
  else
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  unint64_t v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  if (end == (__n128 *)begin) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((unint64_t)begin, end, v12, 1);
  unint64_t v13 = (long long *)v70.__end_;
  unint64_t v14 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3) > v14)
  {
    std::string v15 = (long long *)&v70.__begin_[v14];
    memset(&v77, 0, sizeof(v77));
    *(void *)std::string buf = &v77;
    uint8_t buf[8] = 0;
    if ((long long *)v70.__end_ != v15)
    {
      std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](&v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v15) >> 3));
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77.__r_.__value_.__r.__words[2], v15, v13, (std::string *)v77.__r_.__value_.__l.__size_);
    }
    itfm_inference_orchestrator::inference_engine::vectorToString<std::string>((uint64_t)&__p, (uint64_t *)&v70);
    uint64_t v16 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(int *)(a1 + 56);
      if (v17 >= 8)
      {
        BOOL v19 = SNLPOSLoggerForCategory(4);
        BOOL v18 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v17;
          _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        BOOL v18 = off_1E65808C8[v17];
      }
      uint64_t v20 = *(void *)(a1 + 8);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = v20;
      *(_WORD *)&uint8_t buf[32] = 2080;
      *(void *)&buf[34] = p_p;
      _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_DEFAULT, "[%s] Number of context features (%lu) exceeds maximum limit (%lu): truncating by removing features %s", buf, 0x2Au);
    }
    std::vector<std::string>::resize(&v70, *(void *)(a1 + 8));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)std::string buf = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  itfm_inference_orchestrator::inference_engine::vectorToString<std::string>((uint64_t)v68, (uint64_t *)&v70);
  uint64_t v23 = (int *)(a1 + 56);
  uint64_t v22 = *(unsigned int *)(a1 + 56);
  if (v22 > 6) {
    int v24 = 4;
  }
  else {
    int v24 = dword_1C8F3FFAC[v22];
  }
  uint64_t v25 = SNLPOSLoggerForCategory(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *v23;
    __int16 v27 = "UNKNOWN";
    uint64_t v28 = "SSU";
    __int16 v29 = "LVC";
    uint64_t v30 = "PSC";
    uint64_t v31 = "OWL";
    uint64_t v32 = "UaaP";
    unsigned __int8 v33 = "SNLC";
    uint64_t v34 = "[insights-snlp-nlv4]: ";
    long long v35 = "NLv4";
    switch(*v23)
    {
      case 0:
        break;
      case 1:
LABEL_27:
        uint64_t v34 = "[insights-snlp-snlc]: ";
        long long v35 = v33;
        break;
      case 2:
LABEL_31:
        uint64_t v34 = "[insights-snlp-owl]: ";
        long long v35 = v31;
        break;
      case 3:
LABEL_32:
        uint64_t v34 = "[insights-snlp-uaap]: ";
        long long v35 = v32;
        break;
      case 4:
LABEL_33:
        uint64_t v34 = "[insights-snlp-psc]: ";
        long long v35 = v30;
        break;
      case 5:
LABEL_34:
        uint64_t v34 = "[insights-snlp-lvc]: ";
        long long v35 = v29;
        break;
      case 6:
LABEL_35:
        uint64_t v34 = "[insights-snlp-ssu]: ";
        long long v35 = v28;
        break;
      case 7:
LABEL_37:
        uint64_t v37 = SNLPOSLoggerForCategory(4);
        uint64_t v34 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v26;
          _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
        long long v35 = v27;
        break;
      default:
        char v36 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v26;
          _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
        unsigned __int8 v33 = "<UNDEFINED_COMPONENT>";
        uint64_t v32 = "<UNDEFINED_COMPONENT>";
        uint64_t v31 = "<UNDEFINED_COMPONENT>";
        uint64_t v30 = "<UNDEFINED_COMPONENT>";
        __int16 v29 = "<UNDEFINED_COMPONENT>";
        uint64_t v28 = "<UNDEFINED_COMPONENT>";
        long long v35 = "<UNDEFINED_COMPONENT>";
        uint64_t v34 = "[insights-snlp-nlv4]: ";
        switch(*v23)
        {
          case 0:
            goto LABEL_40;
          case 1:
            goto LABEL_27;
          case 2:
            goto LABEL_31;
          case 3:
            goto LABEL_32;
          case 4:
            goto LABEL_33;
          case 5:
            goto LABEL_34;
          case 6:
            goto LABEL_35;
          default:
            __int16 v27 = "<UNDEFINED_COMPONENT>";
            int v26 = *v23;
            goto LABEL_37;
        }
    }
LABEL_40:
    uint64_t v38 = v68;
    if (v69 < 0) {
      uint64_t v38 = (void **)v68[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v35;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v34;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v38;
    _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_DEBUG, "[%s] %sITFM context: %s", buf, 0x20u);
  }
  itfm_inference_orchestrator::context::Embedder::embed((void **)(a1 + 32), (uint64_t *)&v70, buf);
  __int16 v39 = *a2;
  if (*a2)
  {
    a2[1] = v39;
    operator delete(v39);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)buf;
  a2[2] = *(char **)&buf[16];
  memset(buf, 0, 24);
  char v41 = a2 + 3;
  uint64_t v40 = a2[3];
  if (v40)
  {
    a2[4] = v40;
    operator delete(v40);
    *char v41 = 0;
    a2[4] = 0;
    a2[5] = 0;
    uint64_t v40 = *(char **)buf;
  }
  *(_OWORD *)(a2 + 3) = *(_OWORD *)&buf[24];
  a2[5] = *(char **)&buf[40];
  memset(&buf[24], 0, 24);
  if (v40)
  {
    *(void *)&uint8_t buf[8] = v40;
    operator delete(v40);
  }
  if (*(unsigned char *)(a5 + 24))
  {
    itfm_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore(a1);
  }
  else
  {
    char v42 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *v23;
      if (v43 >= 8)
      {
        uint64_t v45 = SNLPOSLoggerForCategory(4);
        unint64_t v44 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v43;
          _os_log_impl(&dword_1C8DA9000, v45, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        unint64_t v44 = off_1E65808C8[v43];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v44;
      _os_log_impl(&dword_1C8DA9000, v42, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of context featurized response into FeatureStore", buf, 0xCu);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v47 = *v23;
    if (v47 >= 8)
    {
      unsigned __int8 v49 = SNLPOSLoggerForCategory(4);
      BOOL v48 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v47;
        _os_log_impl(&dword_1C8DA9000, v49, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      BOOL v48 = off_1E65808C8[v47];
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
    for (uint64_t i = *a2; i != a2[1]; i += 8)
    {
      if (i != *a2) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      }
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
    std::stringbuf::str();
    *(void *)std::string buf = *MEMORY[0x1E4FBA408];
    uint64_t v51 = *(void *)buf;
    uint64_t v52 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    uint64_t v53 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v53;
    uint64_t v54 = v52;
    *(void *)&uint8_t buf[16] = v52;
    *(void *)&uint8_t buf[24] = MEMORY[0x1E4FBA470] + 16;
    if (v84 < 0) {
      operator delete(v83);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CB775B50](v85);
    uint64_t v55 = std::string::insert(&v75, 0, "shape = ");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    char v57 = std::string::append(&__p, " data = ");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
    for (uint64_t j = a2[3]; j != a2[4]; j += 4)
    {
      if (j != *v41) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      }
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
    std::stringbuf::str();
    *(void *)std::string buf = v51;
    *(void *)&buf[*(void *)(v51 - 24)] = v53;
    *(void *)&uint8_t buf[16] = v54;
    *(void *)&uint8_t buf[24] = MEMORY[0x1E4FBA470] + 16;
    if (v84 < 0) {
      operator delete(v83);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CB775B50](v85);
    if ((v74 & 0x80u) == 0) {
      unint64_t v60 = v73;
    }
    else {
      unint64_t v60 = (void **)v73[0];
    }
    if ((v74 & 0x80u) == 0) {
      std::string::size_type v61 = v74;
    }
    else {
      std::string::size_type v61 = (std::string::size_type)v73[1];
    }
    uint64_t v62 = std::string::append(&v77, (const std::string::value_type *)v60, v61);
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    int64_t v67 = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v66 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if ((char)v74 < 0) {
      operator delete(v73[0]);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    long long v64 = v66;
    if (v67 < 0) {
      long long v64 = (void **)v66[0];
    }
    *(_DWORD *)uint64_t v78 = 136315394;
    long long v79 = v48;
    __int16 v80 = 2080;
    long long v81 = v64;
    _os_log_impl(&dword_1C8DA9000, v46, OS_LOG_TYPE_DEBUG, "[%s] ITFM non-padded context input tensor: %s", v78, 0x16u);
    if (SHIBYTE(v67) < 0) {
      operator delete(v66[0]);
    }
  }
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  *(void *)std::string buf = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v72);
  std::string v65 = v71;
  uint64_t v71 = 0;
  if (v65) {
    operator delete(v65);
  }
}

void sub_1C8E3C078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::string __p = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  unint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v10 = &a2[-2].n128_u64[1];
    int v96 = a2 - 3;
    int v98 = a2;
    unint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, (void *)a1))
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v42;
                  __n128 v43 = v99;
                  v10[2] = v100;
                  *(__n128 *)unint64_t v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            unint64_t v44 = (__n128 *)(a1 + 24);
            BOOL v46 = (__n128 *)a1 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  unsigned __int8 v49 = n128_u64;
                  n128_u64 = v44->n128_u64;
                  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v44, v49))
                  {
                    __n128 v50 = *(__n128 *)n128_u64;
                    unint64_t v100 = n128_u64[2];
                    __n128 v99 = v50;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      uint64_t v52 = a1 + v51;
                      *(_OWORD *)(v52 + 24) = *(_OWORD *)(a1 + v51);
                      *(void *)(v52 + 40) = *(void *)(a1 + v51 + 16);
                      *(unsigned char *)(v52 + 23) = 0;
                      *(unsigned char *)uint64_t v52 = 0;
                      if (!v51) {
                        break;
                      }
                      v51 -= 24;
                      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v99, (void *)(v51 + a1)))
                      {
                        uint64_t v53 = a1 + v51 + 24;
                        goto LABEL_87;
                      }
                    }
                    uint64_t v53 = a1;
LABEL_87:
                    __n128 v54 = v99;
                    *(void *)(v53 + 16) = v100;
                    *(__n128 *)uint64_t v53 = v54;
                  }
                  unint64_t v44 = (__n128 *)(n128_u64 + 3);
                  v47 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v46)
            {
              do
              {
                unsigned int v89 = (void *)a1;
                a1 = (unint64_t)v44;
                if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v44, v89))
                {
                  __n128 v90 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v90;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v91 = a1;
                  do
                  {
                    unint64_t v92 = v91 - 24;
                    *(_OWORD *)unint64_t v91 = *(_OWORD *)(v91 - 24);
                    *(void *)(v91 + 16) = *(void *)(v91 - 8);
                    *(unsigned char *)(v91 - 1) = 0;
                    *(unsigned char *)(v91 - 24) = 0;
                    BOOL v93 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v99, (void *)(v91 - 48));
                    unint64_t v91 = v92;
                  }
                  while (v93);
                  __n128 v94 = v99;
                  *(void *)(v92 + 16) = v100;
                  *(__n128 *)unint64_t v92 = v94;
                }
                unint64_t v44 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v14
                    && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)(a1 + 24 * v58), (void *)(v59 + 24)))
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  unint64_t v60 = (__n128 *)(a1 + 24 * v57);
                  a2 = v98;
                  if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)v59, v60))
                  {
                    __n128 v61 = *v60;
                    unint64_t v100 = v60[1].n128_u64[0];
                    __n128 v99 = v61;
                    v60->n128_u64[1] = 0;
                    v60[1].n128_u64[0] = 0;
                    v60->n128_u64[0] = 0;
                    do
                    {
                      uint64_t v62 = (__n128 *)v59;
                      __n128 v63 = *(__n128 *)v59;
                      v60[1].n128_u64[0] = *(void *)(v59 + 16);
                      __n128 *v60 = v63;
                      *(unsigned char *)(v59 + 23) = 0;
                      *(unsigned char *)unint64_t v59 = 0;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v64;
                      uint64_t v65 = 2 * v58 + 2;
                      if (v65 < (uint64_t)v14
                        && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)(a1 + 24 * v64), (void *)(v59 + 24)))
                      {
                        v59 += 24;
                        uint64_t v64 = v65;
                      }
                      unint64_t v60 = v62;
                      uint64_t v58 = v64;
                    }
                    while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)v59, &v99));
                    __n128 v66 = v99;
                    v62[1].n128_u64[0] = v100;
                    *uint64_t v62 = v66;
                    a2 = v98;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v67 = v13 / 0x18uLL;
              do
              {
                uint64_t v68 = a2;
                uint64_t v69 = 0;
                unint64_t v95 = *(void *)a1;
                v101.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v101.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v70 = v67 - 2;
                if (v67 < 2) {
                  uint64_t v70 = v67 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v69 + 24;
                  uint64_t v74 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v75 = v74 + 2;
                  if (v74 + 2 < v67
                    && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)v73, (void *)(v73 + 24)))
                  {
                    v73 += 24;
                    uint64_t v69 = v75;
                  }
                  if (*(char *)(v72 + 23) < 0) {
                    operator delete(*(void **)v72);
                  }
                  __n128 v76 = *(__n128 *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(__n128 *)unint64_t v72 = v76;
                  *(unsigned char *)(v73 + 23) = 0;
                  *(unsigned char *)uint64_t v73 = 0;
                  unint64_t v72 = v73;
                }
                while (v69 <= v71);
                a2 = (__n128 *)((char *)v68 - 24);
                if ((__int8 *)v73 == &v68[-2].n128_i8[8])
                {
                  *(void *)uint64_t v73 = v95;
                  uint64_t v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                  *(void *)(v73 + 8) = v101.n128_u64[0];
                  *(void *)(v73 + 15) = v87;
                  *(unsigned char *)(v73 + 23) = v97;
                  int64_t v80 = v67 - 1;
                }
                else
                {
                  __n128 v77 = *a2;
                  *(void *)(v73 + 16) = v68[-1].n128_u64[1];
                  *(__n128 *)uint64_t v73 = v77;
                  v68[-2].n128_u64[1] = v95;
                  unint64_t v78 = v101.n128_u64[0];
                  *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                  v68[-1].n128_u64[0] = v78;
                  v68[-1].n128_u8[15] = v97;
                  uint64_t v79 = v73 - a1 + 24;
                  int64_t v80 = v67 - 1;
                  if (v79 >= 25)
                  {
                    unint64_t v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)v82, (void *)v73))
                    {
                      __n128 v83 = *(__n128 *)v73;
                      unint64_t v100 = *(void *)(v73 + 16);
                      __n128 v99 = v83;
                      *(void *)(v73 + 8) = 0;
                      *(void *)(v73 + 16) = 0;
                      *(void *)uint64_t v73 = 0;
                      do
                      {
                        uint64_t v84 = v82;
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v73 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v73 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v73 = v84;
                      }
                      while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)v82, &v99));
                      __n128 v86 = v99;
                      *(void *)(v84 + 16) = v100;
                      *(__n128 *)uint64_t v84 = v86;
                    }
                  }
                }
                BOOL v88 = v67 <= 2;
                int64_t v67 = v80;
              }
              while (!v88);
            }
            return;
          }
          std::string v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v100 = *(void *)(a1 + 16);
            __n128 v99 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v99;
            v15[2] = v100;
            *(__n128 *)std::string v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v98;
          if ((a4 & 1) != 0
            || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)(a1 - 24), (void *)a1))
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v102 = *(void *)(a1 + 16);
          __n128 v101 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v10))
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v12));
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v98) {
                break;
              }
              BOOL v33 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while (!v33);
          }
          uint64_t v34 = v98;
          if (v12 < v98)
          {
            uint64_t v34 = v98;
            do
              uint64_t v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v34));
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v100 = v12[1].n128_u64[0];
            __n128 v99 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *uint64_t v12 = v36;
            __n128 v37 = v99;
            v34[1].n128_u64[0] = v100;
            *uint64_t v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v12));
            do
              uint64_t v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v34));
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v101;
          v12[-1].n128_u64[1] = v102;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v102 = *(void *)(a1 + 16);
        __n128 v101 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          BOOL v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v20, &v101));
        uint64_t v22 = v98;
        if (v21 == (__n128 *)a1)
        {
          uint64_t v22 = v98;
          do
          {
            if (v20 >= v22) {
              break;
            }
            uint64_t v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &v101));
        }
        else
        {
          do
            uint64_t v22 = (__n128 *)((char *)v22 - 24);
          while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &v101));
        }
        uint64_t v12 = v20;
        if (v20 < v22)
        {
          uint64_t v23 = v22;
          do
          {
            __n128 v99 = *v12;
            __n128 v24 = v99;
            unint64_t v100 = v12[1].n128_u64[0];
            unint64_t v25 = v100;
            unint64_t v26 = v23[1].n128_u64[0];
            *uint64_t v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *uint64_t v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v12, &v101));
            do
              uint64_t v23 = (__n128 *)((char *)v23 - 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v23, &v101));
          }
          while (v12 < v23);
        }
        __int16 v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v101;
        v12[-1].n128_u64[1] = v102;
        *(__n128 *)__int16 v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v98))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

uint64_t itfm_inference_orchestrator::inference_engine::vectorToString<std::string>(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
  for (uint64_t i = *a2; i != a2[1]; i += 24)
  {
    if (i != *a2) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
    }
    int v4 = *(char *)(i + 23);
    if (v4 >= 0) {
      uint64_t v5 = i;
    }
    else {
      uint64_t v5 = *(void *)i;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(i + 23);
    }
    else {
      uint64_t v6 = *(void *)(i + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v5, v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v12);
}

void sub_1C8E3CE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl()) {
    itfm_inference_orchestrator::context::ContextFeaturizer::makeContextResponse();
  }
  int8x8_t v2 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(int *)(a1 + 56);
    if (v3 >= 8)
    {
      uint64_t v5 = SNLPOSLoggerForCategory(4);
      int v4 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        char v11 = "<UNDEFINED_COMPONENT>";
        __int16 v12 = 2048;
        uint64_t v13 = v3;
        _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v10, 0x16u);
      }
    }
    else
    {
      int v4 = off_1E65808C8[v3];
    }
    int v10 = 136315138;
    char v11 = v4;
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "[%s] Skipping insertion of ITFM context featurizer response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v6 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(int *)(a1 + 56);
    if (v7 >= 8)
    {
      BOOL v9 = SNLPOSLoggerForCategory(4);
      unint64_t v8 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        char v11 = "<UNDEFINED_COMPONENT>";
        __int16 v12 = 2048;
        uint64_t v13 = v7;
        _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v10, 0x16u);
      }
    }
    else
    {
      unint64_t v8 = off_1E65808C8[v7];
    }
    int v10 = 136315138;
    char v11 = v8;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Unable to insert context featurizer response into FeatureStore", (uint8_t *)&v10, 0xCu);
  }
}

void itfm_inference_orchestrator::context::ContextFeaturizer::makeContextResponse()
{
}

void sub_1C8E3D5E0(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x1012C40EC159624);
  MEMORY[0x1CB774200](v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  int v4 = this;
  char v11 = this;
  __int16 v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        int v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      __int16 v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C8E3D74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void *a1, void *a2, void *a3)
{
  BOOL v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1);
  BOOL result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1[2];
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      BOOL result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    BOOL result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1);
    if (result)
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a4, a3))
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2))
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a5, a4))
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a4, a3))
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2))
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 24);
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&a2[-2].n128_u64[1], a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v17, (void *)v15 + 3))
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void snlp::ssu::parse::SSUGraphBuilderShortcuts::buildUtteranceIdentifier(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(v1);
  operator new();
}

void sub_1C8E3DD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x1CB775C40](v28, 0x1012C40071C2685);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *snlp::ssu::parse::SSUGraphBuilderShortcuts::identifierAppBundleId@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Shortcuts");
}

void snlp::ssu::parse::SSUGraphBuilderShortcuts::~SSUGraphBuilderShortcuts(snlp::ssu::parse::SSUGraphBuilderShortcuts *this)
{
}

void snlp::ssu::app::SSUCompressedFileWrapper::SSUCompressedFileWrapper(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
}

void sub_1C8E3DE98(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1CB775C40](v3, 0x20C4093837F09);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::app::SSUCompressedFileWrapper::decompressSSUFileToDisk(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  snlp::ssu::app::SSUCompressedFileWrapper::findCompressedSSUFileForAppLocale((uint64_t)a1, a2, (uint64_t)__p);
  snlp::ssu::app::SSUCompressedFileWrapper::buildDecompressedFilePath(a3, (uint64_t)a2, a1, (std::string *)a4);
  siri_nlu_types::ssu_compression_utilities::decompressFromCompressedSSUFilePath((siri_nlu_types::ssu_compression_utilities *)__p, (const std::__fs::filesystem::path *)a4, v8);
  unint64_t v9 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v11 = *(std::string *)a4;
    }
    long long v10 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v15 = v10;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "Finished writing decompressed SSUFile to %s", buf, 0xCu);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8E3E010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::string *a13, uint64_t a14, std::string *a15, long long __p, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__pa,uint64_t __p_8,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  if (a27 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::app::SSUCompressedFileWrapper::findCompressedSSUFileForAppLocale(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 24;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v27, &snlp::ssu::app::file_extensions::kCompressedSSUFile);
  std::__fs::filesystem::operator/[abi:ne180100](&v28.__pn_, v5, (std::__fs::filesystem::path *)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v28, 0);
  if (v27.__r_.__value_.__s.__data_[0] == 1)
  {
    if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)a3, v28.__pn_.__r_.__value_.__l.__data_, v28.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      *(std::__fs::filesystem::path *)a3 = v28;
    }
  }
  else
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v6 = (size_t)a2[1];
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0) {
        __n128 v8 = a2;
      }
      else {
        __n128 v8 = *a2;
      }
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, ".nlu.lzfse");
    std::string v27 = __p;
    memset(&__p, 0, sizeof(__p));
    std::__fs::filesystem::operator/[abi:ne180100]((std::string *)a3, v5, (std::__fs::filesystem::path *)&v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, 0);
    if (v27.__r_.__value_.__s.__data_[0] != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      long long v10 = std::string::append(&v22, " not supported by assets directory since neither generic file (");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((v28.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v28;
      }
      else {
        uint64_t v12 = (std::__fs::filesystem::path *)v28.__pn_.__r_.__value_.__r.__words[0];
      }
      char v13 = std::string::append(&v23, (const std::string::value_type *)v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = std::string::append(&v24, " not locale-specific file (");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) >= 0) {
        long long v17 = (const std::string::value_type *)a3;
      }
      else {
        long long v17 = *(const std::string::value_type **)a3;
      }
      unint64_t v18 = std::string::append(&v25, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      unint64_t v20 = std::string::append(&__p, ") is prsent.");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v27);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
  }
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E3E534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_16:
      if (*(char *)(v42 + 23) < 0) {
        operator delete(*(void **)v42);
      }
      if (*(char *)(v45 - 65) < 0) {
        operator delete(*(void **)(v45 - 88));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v43);
  goto LABEL_16;
}

void snlp::ssu::app::SSUCompressedFileWrapper::buildDecompressedFilePath(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, std::string *a4@<X8>)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  LODWORD(v33) = 0;
  __n128 v8 = (int *)boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
  v35[0] = boost::uuids::random_generator_pure::operator()(v8);
  v35[1] = v9;
  boost::uuids::detail::random_provider_base::destroy(v33);
  if (*((char *)a3 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v10 = (size_t)a3[1];
  }
  long long v11 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v10 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = *a3;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    long long v14 = (const std::string::value_type *)a2;
  }
  else {
    long long v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  long long v16 = std::string::append(&v29, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v30, "_");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unint64_t v20 = operator new(0x28uLL);
  std::string __p = v20;
  long long v28 = xmmword_1C8F38620;
  *unint64_t v20 = 0u;
  v20[1] = 0u;
  *(void *)((char *)v20 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)v35, v20);
  if (v28 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v28 >= 0) {
    std::string::size_type v22 = HIBYTE(v28);
  }
  else {
    std::string::size_type v22 = v28;
  }
  std::string v23 = std::string::append(&v31, p_p, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::string v25 = std::string::append(&v32, ".nlu");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v34 = v25->__r_.__value_.__r.__words[2];
  long long v33 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v32, (char *)&v33);
  std::__fs::filesystem::operator/[abi:ne180100](a4, a1, (std::__fs::filesystem::path *)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
}

void sub_1C8E3E8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::uuids::to_chars<char *>(uint64_t result, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    if (*(unsigned __int8 *)(result + i) >= 0xA0u) {
      char v3 = 87;
    }
    else {
      char v3 = 48;
    }
    *a2 = v3 + (*(unsigned char *)(result + i) >> 4);
    unsigned int v4 = *(unsigned char *)(result + i) & 0xF;
    if (v4 >= 0xA) {
      char v5 = 87;
    }
    else {
      char v5 = 48;
    }
    char v6 = v5 + v4;
    unint64_t v7 = a2 + 2;
    a2[1] = v6;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      unint64_t v7 = a2 + 3;
      a2[2] = 45;
    }
    a2 = v7;
  }
  return result;
}

void snlp::ssu::app::SSUCompressedFileWrapper::~SSUCompressedFileWrapper(snlp::ssu::app::SSUCompressedFileWrapper *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (snlp::ssu::app::SSUFileWrapper **)((char *)this + 24);
  std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100]((snlp::ssu::app::SSUFileWrapper **)this + 3);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)this, 0);
  char v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)this + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((void *)this + 1));
    }
    else {
      std::string __p = *(std::string *)this;
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v7 = p_p;
    _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_DEBUG, "Temporary decompressed SSUFile removed at location: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100](v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1C8E3EB48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

snlp::ssu::app::SSUFileWrapper *std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100](snlp::ssu::app::SSUFileWrapper **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t snlp::ssu::app::SSUCompressedFileWrapper::fileWrapper(snlp::ssu::app::SSUCompressedFileWrapper *this)
{
  return *((void *)this + 3);
}

void sub_1C8E3EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8E3F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8E3F3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E3F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C8E3FA60(_Unwind_Exception *a1)
{
  char v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8E3FC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E3FD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::getInsertionPointLabel(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  std::to_string(&v36, *(void *)(a2 + 112));
  long long v14 = std::string::insert(&v36, 0, "Searching for span with UTF-16 indices (");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v37, ", ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v35, *(void *)(a2 + 120));
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v18 = &v35;
  }
  else {
    unint64_t v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = std::string::append(&v38, (const std::string::value_type *)v18, size);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v22 = std::string::append(&v41, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  int64_t v40 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  long long v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    std::string v25 = __p;
    if (v40 < 0) {
      std::string v25 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v41, 0xCu);
  }
  uint64_t v26 = *(unsigned __int8 *)(a1 + 23);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v27 = *(void *)(a1 + 8);
  }
  uint64_t v28 = *(unsigned __int8 *)(a2 + 71);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a2 + 56);
  }
  if (v27 != v28) {
    goto LABEL_37;
  }
  if (v29 >= 0) {
    std::string v30 = (unsigned __int8 *)(a2 + 48);
  }
  else {
    std::string v30 = *(unsigned __int8 **)(a2 + 48);
  }
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, v30, *(void *)(a1 + 8))) {
      goto LABEL_37;
    }
LABEL_40:
    uint64_t v32 = *a5;
    uint64_t v33 = a5[1];
    v34[0] = v32;
    v34[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    nlv4_inference_orchestrator::trees::SpanUsoInserter::findClosestSpan(a1, a3, a2, a4, (uint64_t)v34, a6);
  }
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_40;
  }
  std::string v31 = (unsigned __int8 *)a1;
  while (*v31 == *v30)
  {
    ++v31;
    ++v30;
    if (!--v26) {
      goto LABEL_40;
    }
  }
LABEL_37:
  *a7 = 0;
  a7[8] = 0;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8E400C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::findClosestSpan(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v30, "common_Date");
  std::string::basic_string[abi:ne180100]<0>(v28, "common_Timer");
  uint64_t v9 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v10 = v32;
  }
  else {
    size_t v10 = v31;
  }
  uint64_t v11 = a4[23];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)a4 + 1);
  }
  if (v10 != v11) {
    goto LABEL_31;
  }
  if (v12 >= 0) {
    int v13 = a4;
  }
  else {
    int v13 = *(unsigned __int8 **)a4;
  }
  if ((v32 & 0x80) != 0)
  {
    if (memcmp(v30, v13, v31)) {
      goto LABEL_31;
    }
  }
  else if (v32)
  {
    long long v14 = &v30;
    while (*(unsigned __int8 *)v14 == *v13)
    {
      long long v14 = (const void **)((char *)v14 + 1);
      ++v13;
      if (!--v9) {
        goto LABEL_18;
      }
    }
LABEL_31:
    std::string::size_type v22 = *(std::__shared_weak_count **)(a5 + 8);
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    operator new();
  }
LABEL_18:
  uint64_t v15 = a6[23];
  if ((v15 & 0x80u) == 0) {
    long long v16 = a6;
  }
  else {
    long long v16 = *(unsigned __int8 **)a6;
  }
  if ((v29 & 0x80u) == 0) {
    long long v17 = (char *)v28;
  }
  else {
    long long v17 = (char *)v28[0];
  }
  unint64_t v18 = a6;
  if ((v29 & 0x80u) == 0) {
    int64_t v19 = v29;
  }
  else {
    int64_t v19 = v28[1];
  }
  if (v19)
  {
    uint64_t v20 = *((void *)v18 + 1);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = v20;
    }
    long long v21 = (char *)&v16[v15];
    if (v15 >= v19)
    {
      int v23 = *v17;
      long long v24 = v16;
      do
      {
        uint64_t v25 = v15 - v19;
        if (v25 == -1) {
          break;
        }
        uint64_t v26 = (char *)memchr(v24, v23, v25 + 1);
        if (!v26) {
          break;
        }
        uint64_t v27 = v26;
        if (!memcmp(v26, v17, v19)) {
          break;
        }
        long long v24 = (unsigned __int8 *)(v27 + 1);
        uint64_t v15 = v21 - (v27 + 1);
      }
      while (v15 >= v19);
    }
  }
  goto LABEL_31;
}

void sub_1C8E40F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v69 - 121) < 0) {
    operator delete(*(void **)(v69 - 144));
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v69 - 224));
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v69 - 216));
  uint64_t v71 = *(std::__shared_weak_count **)(v69 - 200);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (*(char *)(v69 - 169) < 0) {
    operator delete(*(void **)(v69 - 192));
  }
  if (*(char *)(v69 - 145) < 0) {
    operator delete(*(void **)(v69 - 168));
  }
  _Unwind_Resume(a1);
}

void sub_1C8E41170()
{
}

std::string *nlv4_inference_orchestrator::trees::SpanUsoInserter::getDomainFromOriginalParse@<X0>(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *__str@<X1>, std::string *a3@<X8>)
{
  int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    char v6 = __str;
  }
  else {
    char v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  uint64_t v9 = (char *)*((void *)this + 8);
  unint64_t v7 = (char *)this + 64;
  uint64_t v8 = v9;
  int v10 = v7[23];
  if (v10 >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v10 >= 0) {
    int64_t v12 = v7[23];
  }
  else {
    int64_t v12 = *((void *)v7 + 1);
  }
  if (v12)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    int v13 = (char *)v6 + size;
    if (size >= v12)
    {
      int v17 = *v11;
      unint64_t v18 = v6;
      do
      {
        int64_t v19 = size - v12;
        if (v19 == -1) {
          break;
        }
        uint64_t v20 = (char *)memchr(v18, v17, v19 + 1);
        if (!v20) {
          break;
        }
        long long v14 = v20;
        if (!memcmp(v20, v11, v12)) {
          goto LABEL_15;
        }
        unint64_t v18 = (std::string *)(v14 + 1);
        int64_t size = v13 - (v14 + 1);
      }
      while (size >= v12);
    }
    long long v14 = v13;
LABEL_15:
    if (v14 == v13) {
      std::string::size_type v15 = -1;
    }
    else {
      std::string::size_type v15 = v14 - (char *)v6;
    }
  }
  else
  {
    std::string::size_type v15 = 0;
  }
  return std::string::basic_string(a3, __str, 0, v15, (std::allocator<char> *)&v21);
}

BOOL nlv4_inference_orchestrator::trees::SpanUsoInserter::checkLabelMatch(nlv4_inference_orchestrator::trees::SpanUsoInserter *a1, unsigned __int8 *a2, siri::ontology::UsoGraph *a3, unsigned __int8 *a4)
{
  nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph(a1, &__p);
  uint64_t v7 = a4[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a4[23];
  }
  else {
    uint64_t v8 = *((void *)a4 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v8 != size) {
    goto LABEL_17;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, p_p, *((void *)a4 + 1))) {
      goto LABEL_17;
    }
LABEL_18:
    BOOL v12 = 1;
    goto LABEL_20;
  }
  if (!a4[23]) {
    goto LABEL_18;
  }
  uint64_t v11 = a4;
  while (*v11 == p_p->__r_.__value_.__s.__data_[0])
  {
    ++v11;
    p_p = (std::string *)((char *)p_p + 1);
    if (!--v7) {
      goto LABEL_18;
    }
  }
LABEL_17:
  if (nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimeLabelMatch((uint64_t)a1, a4, (unsigned __int8 *)&__p))goto LABEL_18; {
  BOOL v12 = nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimerDateLabelMatch((uint64_t)a1, a2, a4, (unsigned __int8 *)&__p);
  }
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1C8E41388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t nlv4_inference_orchestrator::trees::SpanUsoInserter::findUtteranceAlignments(nlv4_inference_orchestrator::trees::SpanUsoInserter *this, const siri::ontology::UsoGraph *a2, const sirinluexternal::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  if (v28 - (unsigned char *)__p == 8
  {
    unsigned __int8 v6 = v25[0];
    uint64_t v3 = v25[2];
    unsigned int v7 = v25[0] & 0xFFFFFF00;
  }
  else
  {
    uint64_t v8 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "No utterance alignments found in the entity node; searching the descendant nodes for utterance alignments instead.",
        (uint8_t *)v25,
        2u);
    }
    uint64_t v9 = (uint64_t *)*((void *)a3 + 1);
    int v10 = (uint64_t *)*((void *)a3 + 2);
    if (v9 == v10)
    {
      unsigned __int8 v6 = 0;
      unsigned int v7 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = -1;
      do
      {
        uint64_t v13 = *v9;
        if ((*(unsigned char *)(*v9 + 40) & 2) != 0)
        {
          long long v14 = *(uint64_t **)(v13 + 8);
          if (v14 != *(uint64_t **)(v13 + 16))
          {
            uint64_t v15 = *v14;
            unsigned int v16 = *(_DWORD *)(*v14 + 20);
            if (v16 < v12) {
              unsigned int v12 = v16;
            }
            unsigned int v17 = *(_DWORD *)(v15 + 8);
            if (v11 <= v17) {
              unsigned int v11 = v17;
            }
          }
        }
        ++v9;
      }
      while (v9 != v10);
      unsigned int v18 = v12 & 0xFFFFFF00;
      if (v12 <= v11) {
        unsigned int v19 = v11;
      }
      else {
        unsigned int v19 = v12;
      }
      if (v12 <= v11) {
        unsigned __int8 v20 = v12;
      }
      else {
        unsigned __int8 v20 = 0;
      }
      if (v12 > v11) {
        unsigned int v18 = 0;
      }
      BOOL v21 = v11 == 0;
      if (v11) {
        unsigned int v22 = v19;
      }
      else {
        unsigned int v22 = v12;
      }
      if (v21) {
        unsigned __int8 v23 = 0;
      }
      else {
        unsigned __int8 v23 = v20;
      }
      if (v21) {
        unsigned int v18 = 0;
      }
      if (v12 == -1) {
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v3 = v22;
      }
      if (v12 == -1) {
        unsigned __int8 v6 = 0;
      }
      else {
        unsigned __int8 v6 = v23;
      }
      if (v12 == -1) {
        unsigned int v7 = 0;
      }
      else {
        unsigned int v7 = v18;
      }
    }
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  return v7 | v6 | (unint64_t)(v3 << 32);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *a2@<X8>)
{
  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  if (__p == v12)
  {
    unsigned int v4 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v10 = 0;
      char v5 = "Found no entities in the uso graph of matching span, skipping...";
      goto LABEL_7;
    }
  }
  else if ((unint64_t)(v12 - (unsigned char *)__p) < 9)
  {
    if (v6)
    {
      uint64_t v7 = v6[3];
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
      }
      else
      {
        long long v8 = *(_OWORD *)(v7 + 8);
        a2->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
      }
      goto LABEL_9;
    }
    uint64_t v9 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "The first level entity is not of entity node type, skipping...", v10, 2u);
    }
  }
  else
  {
    unsigned int v4 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v10 = 0;
      char v5 = "There is more than one entity in the USO graph of matching span, skipping...";
LABEL_7:
      _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, v5, v10, 2u);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
LABEL_9:
  if (__p)
  {
    unsigned int v12 = __p;
    operator delete(__p);
  }
}

unsigned __int8 *nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimeLabelMatch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v4 = (void *)(a1 + 24);
  BOOL result = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 24), a2);
  if (result) {
    return (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a3) != 0);
  }
  return result;
}

BOOL nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimerDateLabelMatch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "common_Timer");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Date");
  uint64_t v8 = a2[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = (void *)a2[23];
  }
  else {
    uint64_t v9 = (void *)*((void *)a2 + 1);
  }
  unint64_t v10 = v21;
  if ((v21 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v20[1];
  }
  if (v9 != (void *)v10) {
    goto LABEL_31;
  }
  if ((v21 & 0x80u) == 0) {
    unsigned int v11 = v20;
  }
  else {
    unsigned int v11 = (void **)v20[0];
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, *((void *)a2 + 1))) {
      goto LABEL_31;
    }
  }
  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v11)
    {
      ++a2;
      unsigned int v11 = (void **)((char *)v11 + 1);
      if (!--v8) {
        goto LABEL_16;
      }
    }
    goto LABEL_31;
  }
LABEL_16:
  uint64_t v12 = a3[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = (void *)a3[23];
  }
  else {
    uint64_t v13 = (void *)*((void *)a3 + 1);
  }
  unint64_t v14 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 != (void *)v14) {
    goto LABEL_31;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v12 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v15, *((void *)a3 + 1))) {
      goto LABEL_37;
    }
LABEL_31:
    BOOL v16 = 0;
    goto LABEL_32;
  }
  if (a3[23])
  {
    while (*a3 == *(unsigned __int8 *)v15)
    {
      ++a3;
      uint64_t v15 = (void **)((char *)v15 + 1);
      if (!--v12) {
        goto LABEL_37;
      }
    }
    goto LABEL_31;
  }
LABEL_37:
  BOOL v16 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 24), a4) != 0;
LABEL_32:
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  return v16;
}

void sub_1C8E419CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E42038(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf)
{
  char v26 = v25;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  if (a2 == 1)
  {
    unsigned __int8 v29 = __cxa_begin_catch(a1);
    std::string v30 = SNLPOSLoggerForCategory(3);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
      LODWORD(buf) = 136642819;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_impl(&dword_1C8DA9000, v30, OS_LOG_TYPE_ERROR, "Error predicting utterance: %{sensitive}s", (uint8_t *)&buf, 0xCu);
    }

    if (v24)
    {
      *long long v24 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.uaapcustomluframework" code:0 userInfo:0];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8E41F38);
  }

  _Unwind_Resume(a1);
}

void UPInferenceResult::~UPInferenceResult(UPInferenceResult *this)
{
  std::vector<std::string>::pointer begin = this->var2.data.__begin_;
  if (begin)
  {
    this->var2.data.__end_ = begin;
    operator delete(begin);
  }
  uint64_t v3 = this->var2.shape.__begin_;
  if (v3)
  {
    this->var2.shape.__end_ = v3;
    operator delete(v3);
  }
  unsigned int v4 = this->var1.data.__begin_;
  if (v4)
  {
    this->var1.data.__end_ = v4;
    operator delete(v4);
  }
  char v5 = this->var1.shape.__begin_;
  if (v5)
  {
    this->var1.shape.__end_ = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = this->var0.data.__begin_;
  if (v6)
  {
    this->var0.data.__end_ = v6;
    operator delete(v6);
  }
  uint64_t v7 = this->var0.shape.__begin_;
  if (this->var0.shape.__begin_)
  {
    this->var0.shape.__end_ = v7;
    operator delete(v7);
  }
}

void sub_1C8E4284C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  a14 = &a27;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  nl_featurization::postprocessing::PostProcessingOutput::~PostProcessingOutput(&a30);
  nl_featurization::postprocessing::base::BaseModelOutput::~BaseModelOutput((nl_featurization::postprocessing::base::BaseModelOutput *)&a36);
  nl_featurization::postprocessing::base::BaseModelQueryContext::~BaseModelQueryContext(&a43);

  _Unwind_Resume(a1);
}

void *std::vector<nl_featurization::Token>::__init_with_size[abi:ne180100]<nl_featurization::Token*,nl_featurization::Token*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int8 v6 = result;
    std::vector<nl_featurization::Token>::__vallocate[abi:ne180100](result, a4);
    BOOL result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::Token>,nl_featurization::Token*,nl_featurization::Token*,nl_featurization::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C8E42A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<std::optional<unsigned long>>::__init_with_size[abi:ne180100]<std::optional<unsigned long>*,std::optional<unsigned long>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int8 v6 = result;
    BOOL result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C8E42AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  char v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::basic_string<char16_t>::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB) {
      std::basic_string<char16_t>::size_type v6 = __sz | 3;
    }
    uint64_t v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    char v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

__n128 std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(a1 + 32), *(const std::basic_string<char16_t>::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a1 + 56), (long long *)(a2 + 56));
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_1C8E42BD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void nl_featurization::postprocessing::LabelledSpan::~LabelledSpan(void **this)
{
  if (*((unsigned char *)this + 80) && *((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

__n128 std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan const&>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(a1 + 32), *(const std::basic_string<char16_t>::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a1 + 56), (long long *)(a2 + 56));
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_1C8E42CB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<nl_featurization::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void nl_featurization::postprocessing::PostProcessingOutput::~PostProcessingOutput(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nl_featurization::postprocessing::base::BaseModelOutput::~BaseModelOutput(nl_featurization::postprocessing::base::BaseModelOutput *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void nl_featurization::postprocessing::base::BaseModelQueryContext::~BaseModelQueryContext(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<nl_featurization::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

void std::vector<nl_featurization::postprocessing::LabelledSpan>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan const&>(v6 + v7 - 104, v4 + v7 - 104);
      v7 -= 104;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *a1;
  *a1 = v6;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<nl_featurization::postprocessing::LabelledSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::basic_string<char16_t> *std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](std::basic_string<char16_t> *this, long long *a2)
{
  LOBYTE(this->__r_.__value_.__l.__data_) = 0;
  LOBYTE(this[1].__r_.__value_.__l.__data_) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    LOBYTE(this[1].__r_.__value_.__l.__data_) = 1;
  }
  return this;
}

void sub_1C8E4311C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nl_featurization::Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::Token>,nl_featurization::Token*,nl_featurization::Token*,nl_featurization::Token*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      *(_OWORD *)uint64_t v4 = *(v6 - 1);
      uint64_t v7 = (std::basic_string<char16_t> *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v7, *(const std::basic_string<char16_t>::value_type **)v6, *((void *)v6 + 1));
        uint64_t v9 = v15;
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        uint64_t v9 = v4;
      }
      uint64_t v10 = v6 - 1;
      *(unsigned char *)(v4 + 40) = *((unsigned char *)v6 + 24);
      uint64_t v4 = v9 + 48;
      uint64_t v15 = v9 + 48;
      v6 += 3;
    }
    while (v10 + 3 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::Token>,nl_featurization::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C8E43258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::Token>,nl_featurization::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0) {
        operator delete(*(void **)(v3 - 32));
      }
      v3 -= 48;
    }
  }
  return a1;
}

void sub_1C8E43CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v43 - 176) = &a27;
  std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 176));
  uint64_t v45 = *(void **)(v43 - 224);
  if (v45)
  {
    *(void *)(v43 - 216) = v45;
    operator delete(v45);
  }
  a27 = &a30;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unsigned int v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)a1[5];
  std::__tree<unsigned long>::destroy(v5);
}

void std::__tree<unsigned long>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(*a1);
    std::__tree<unsigned long>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1C8E443C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  UPInferenceResult::~UPInferenceResult(v28);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a11);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a17);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a23);
  if (*(char *)(v29 - 113) < 0) {
    operator delete(*(void **)(v29 - 136));
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_1C8E447D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(void *__dst, char *__src)
{
  if (*(_WORD *)__src)
  {
    unint64_t v4 = 0;
    do
      int64_t v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v4 >= 0xB)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB) {
        uint64_t v7 = v4 | 3;
      }
      uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v7 + 1);
      __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v6;
    }
    else
    {
      *((unsigned char *)__dst + 23) = v4;
      uint64_t v6 = __dst;
      if (!v4) {
        goto LABEL_9;
      }
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  unint64_t v4 = 0;
  *((unsigned char *)__dst + 23) = 0;
LABEL_9:
  uint64_t v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

void sub_1C8E44A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E44D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E44DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t snlp::ssu::trigger::SSUTriggerDisjunction::isTriggered(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v2 == v3)
  {
    int v8 = 0;
    unint64_t v9 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 16))(*v2, a2);
      uint64_t v6 = v5 & 0xFF00000000;
      if ((v5 & 0xFF00000000) != 0) {
        break;
      }
      v2 += 2;
      if (v2 == v3)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        int v8 = v5 & 0xFFFFFF00;
        unint64_t v9 = v5 & 0xFFFFFF0000000000;
        return v9 | v6 | v8 & 0xFFFFFF00 | v7;
      }
    }
    int v8 = v5 & 0xFFFFFF00;
    unint64_t v9 = v5 & 0xFFFFFF0000000000;
    uint64_t v7 = v5;
  }
  return v9 | v6 | v8 & 0xFFFFFF00 | v7;
}

void snlp::ssu::trigger::SSUTriggerDisjunction::~SSUTriggerDisjunction(snlp::ssu::trigger::SSUTriggerDisjunction *this)
{
  *(void *)this = &unk_1F235F360;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1CB775C40);
}

{
  void **v1;

  *(void *)this = &unk_1F235F360;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *snlp::ssu::trigger::SSUTriggerDisjunction::SSUTriggerDisjunction(void *result, uint64_t a2)
{
  *__n128 result = &unk_1F235F360;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *(_OWORD *)(result + 1) = *(_OWORD *)a2;
  result[3] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  for (uint64_t i = (void *)result[1]; i != (void *)result[2]; i += 2)
  {
    if (!*i)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot construct SSUTriggerDisjunction with nullptr");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return result;
}

void sub_1C8E4501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  a10 = a9;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::trigger::SSUTriggerDisjunction::subTriggers@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(char **)(this + 8);
  uint64_t v3 = *(char **)(this + 16);
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = operator new(v3 - v2);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[2 * (v4 >> 4)];
    uint64_t v10 = v6;
    unsigned int v11 = v6;
    v8[0] = a2 + 2;
    v8[1] = &v10;
    v8[2] = &v11;
    do
    {
      void *v6 = *(void *)v2;
      uint64_t v7 = *((void *)v2 + 1);
      v6[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      v2 += 16;
    }
    while (v2 != v3);
    unsigned int v11 = v6;
    char v9 = 1;
    this = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>,std::shared_ptr<snlp::ssu::trigger::SSUTrigger>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    a2[1] = v6;
  }
  return this;
}

void sub_1C8E45128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::Trail(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)a1 = *a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 8), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 32), *(const void **)(a5 + 24), *(void *)(a5 + 32), (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 56), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 80), *(const void **)(a6 + 24), *(void *)(a6 + 32), (uint64_t)(*(void *)(a6 + 32) - *(void *)(a6 + 24)) >> 2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 104), *(const void **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 128), *(const void **)(a7 + 24), *(void *)(a7 + 32), (uint64_t)(*(void *)(a7 + 32) - *(void *)(a7 + 24)) >> 2);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 200), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(unsigned char *)(a1 + 224) = *a4;
  uint64_t v13 = operator new(8uLL);
  void *v13 = 1;
  uint64_t v14 = v13 + 1;
  unint64_t v15 = *(void *)(*(void *)(a1 + 208) - 8);
  BOOL v16 = (float *)operator new(4uLL);
  *BOOL v16 = (float)v15;
  unsigned int v17 = *(void **)(a1 + 152);
  if (v17)
  {
    *(void *)(a1 + 160) = v17;
    operator delete(v17);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  unsigned int v18 = *(void **)(a1 + 176);
  *(void *)(a1 + 152) = v13;
  *(void *)(a1 + 160) = v14;
  *(void *)(a1 + 168) = v14;
  if (v18)
  {
    *(void *)(a1 + 184) = v18;
    operator delete(v18);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
  }
  *(void *)(a1 + 176) = v16;
  *(void *)(a1 + 184) = v16 + 1;
  *(void *)(a1 + 192) = v16 + 1;
  return a1;
}

void sub_1C8E45304(_Unwind_Exception *a1)
{
  operator delete(v5);
  char v9 = *v7;
  if (*v7)
  {
    *(void *)(v2 + 208) = v9;
    operator delete(v9);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v6);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v4);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C8E45378()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8E45368);
}

void sub_1C8E45390()
{
}

void sub_1C8E45398()
{
  uint64_t v2 = *v0;
  if (*v0)
  {
    *(void *)(v1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8E45370);
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::setFinal(uint64_t this)
{
  *(unsigned char *)(this + 224) = 1;
  return this;
}

float nlv4_inference_orchestrator::inference_engine::Trail::getScore(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  return *(float *)this;
}

void *nlv4_inference_orchestrator::inference_engine::Trail::getTokenHistory@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 25), *((void *)this + 26), (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3);
}

void *nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 19), *((void *)this + 20), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 22), *((void *)this + 23), (uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 2);
}

void sub_1C8E45440(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *nlv4_inference_orchestrator::inference_engine::Trail::getHidden@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 4), *((void *)this + 5), (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2);
}

void sub_1C8E454B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *nlv4_inference_orchestrator::inference_engine::Trail::getMemory@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 7), *((void *)this + 8), (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 10), *((void *)this + 11), (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2);
}

void sub_1C8E45530(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 13), *((void *)this + 14), (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 16), *((void *)this + 17), (uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2);
}

void sub_1C8E455A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::isFinal(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t *uaap::EspressoModule::EspressoModule(uint64_t *a1)
{
  return a1;
}

{
  uaap::EspressoModule::deserializeModule(a1);
  return a1;
}

uint64_t uaap::EspressoModule::deserializeModule(uint64_t *a1)
{
  uint64_t context = espresso_create_context();
  *a1 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso context is nil.");
    goto LABEL_8;
  }
  uint64_t plan = espresso_create_plan();
  a1[1] = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso plan is nil.");
    goto LABEL_8;
  }
  uint64_t result = espresso_plan_add_network();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create espresso plan.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E456D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void uaap::EspressoModule::~EspressoModule(uaap::EspressoModule *this)
{
}

uint64_t uaap::EspressoModule::buildPlan(uaap::EspressoModule *this)
{
  uint64_t result = espresso_plan_build();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E457B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::executePlan(uaap::EspressoModule *this)
{
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to execute espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E45824(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::cleanPlan(uaap::EspressoModule *this)
{
  uint64_t result = espresso_plan_build_clean();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E45898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::reshape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = SNLPOSLoggerForCategory(3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "Reshaping network to handle current request inputs", buf, 2u);
  }
  uint64_t v6 = 0;
  long long v36 = xmmword_1E6580390;
  uint64_t v7 = *(void **)a2;
  int v8 = *(void **)a3;
  uint64_t v9 = *(void *)(*(void *)a3 + 8);
  v35[0] = *(void *)(*(void *)a2 + 16);
  v35[1] = v9;
  char v10 = 1;
  v34[0] = 1;
  v34[1] = *v8;
  v33[0] = *v7;
  v33[1] = 1;
  uint64_t v32 = 0x100000001;
  uint64_t v31 = -1;
  uint64_t v30 = 0x300000003;
  do
  {
    char v11 = v10;
    uint64_t v12 = SNLPOSLoggerForCategory(3);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *((void *)&v36 + v6);
      int v14 = v35[v6];
      int v15 = v34[v6];
      int v16 = v33[v6];
      int v17 = v33[v6 - 2];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = v14;
      __int16 v24 = 1024;
      int v25 = v15;
      __int16 v26 = 1024;
      int v27 = v16;
      __int16 v28 = 1024;
      int v29 = v17;
      _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "Reshaping blob '%s' to w=%d, h=%d, k=%d, n=%d", buf, 0x24u);
    }
    char v10 = 0;
    uint64_t v6 = 1;
  }
  while ((v11 & 1) != 0);
  uint64_t result = espresso_network_change_input_blob_shapes_seq_rank();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to reshape espresso blob.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E45AE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  espresso_buffer_pack_tensor_shape();
  int v7 = 65568;
  uint64_t result = espresso_network_bind_buffer();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E45BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void uaap::EspressoModule::getOutput(uint64_t a1@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v14 = 65568;
  uint64_t v2 = v13;
  if (espresso_network_bind_buffer())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v12 = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  long long v11 = 0uLL;
  std::string __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, &v15, (uint64_t)&v15 + 8 * v12, v12);
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = (uint64_t *)__p;
  *(void *)a1 = __p;
  std::string v5 = (void *)v11;
  *(_OWORD *)(a1 + 8) = v11;
  if (v5 == v4)
  {
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v6 = v5 - v4;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    unint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v4++;
      v7 *= v8;
      --v6;
    }
    while (v6);
  }
  std::string __p = 0;
  long long v11 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v13, (uint64_t)v13 + 4 * v7, v7);
  if ((void **)(a1 + 24) != &__p) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), (char *)__p, v11, (uint64_t)(v11 - (void)__p) >> 2);
  }
  if (__p)
  {
    *(void *)&long long v11 = __p;
    operator delete(__p);
  }
  if (v2) {
    free(v2);
  }
}

void sub_1C8E45E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (*(char *)(v13 - 113) < 0)
  {
    operator delete(*(void **)(v13 - 136));
    if ((v12 & 1) == 0)
    {
LABEL_6:
      if (v10) {
        free(v10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v11);
  goto LABEL_6;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned int v18 = v9;
      unsigned __int8 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned int v18 = v9;
    unsigned __int8 v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

void *uaap::DateDurationHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::mapDateDurationToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapDateDurationToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"DateDuration");
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a1);
  uaap::DateHandler::mapDateToItemizedUsos(a1);
  uaap::mapTimeSpansToItemizedUsos(a1);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  std::string v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void uaap::DateDurationHandler::~DateDurationHandler(uaap::DateDurationHandler *this)
{
}

float nlv4_inference_orchestrator::inference_engine::BeamSearch::findBorderScore(uint64_t a1, float **a2)
{
  unint64_t v4 = *(void *)(a1 + 8) + 1;
  int v30 = 0;
  std::vector<float>::vector(&__p, v4, &v30);
  unint64_t v6 = (float *)__p;
  std::string v5 = v32;
  if (__p != v32)
  {
    uint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    uint64_t v9 = (char *)__p;
    if (*a2 == v7)
    {
      uint64_t v8 = a2[1];
    }
    else
    {
      do
      {
        float v10 = *v8++;
        *(float *)uint64_t v9 = v10;
        v9 += 4;
      }
      while (v8 != v7 && v9 != v5);
    }
    uint64_t v12 = v9 - (char *)v6;
    if (v9 - (char *)v6 >= 5)
    {
      unint64_t v13 = (unint64_t)(((v9 - (char *)v6) >> 2) - 2) >> 1;
      unint64_t v14 = v13 + 1;
      unint64_t v15 = &v6[v13];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>((uint64_t)v6, (v9 - (char *)v6) >> 2, v15--);
        --v14;
      }
      while (v14);
    }
    while (v8 != v7)
    {
      if (*v8 > *v6)
      {
        float *v6 = *v8;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>((uint64_t)v6, (v9 - (char *)v6) >> 2, v6);
      }
      ++v8;
    }
    if (v12 >= 5)
    {
      uint64_t v16 = (unint64_t)v12 >> 2;
      do
      {
        uint64_t v17 = 0;
        float v18 = *v6;
        unsigned __int8 v19 = v6;
        do
        {
          unsigned __int8 v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }
          *unsigned __int8 v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v9 -= 4;
        if (v19 != (float *)v9)
        {
          *unsigned __int8 v19 = *(float *)v9;
          *(float *)uint64_t v9 = v18;
          uint64_t v23 = (char *)v19 - (char *)v6 + 4;
          if (v23 < 5) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          int v25 = &v6[v24];
          float v26 = *v25;
          float v18 = *v19;
          if (*v25 <= *v19) {
            continue;
          }
          do
          {
            *unsigned __int8 v19 = v26;
            unsigned __int8 v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            int v25 = &v6[v24];
            float v26 = *v25;
          }
          while (*v25 > v18);
        }
        *unsigned __int8 v19 = v18;
      }
      while (v16-- > 2);
    }
  }
  float v28 = *((float *)__p + *(void *)(a1 + 8));
  uint64_t v32 = (char *)__p;
  operator delete(__p);
  return v28;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 2)
    {
      uint64_t v5 = v3 >> 1;
      uint64_t v6 = (v3 >> 1) | 1;
      unint64_t v7 = (float *)(result + 4 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[1])
      {
        ++v7;
        uint64_t v6 = v8;
      }
      float v9 = *v7;
      float v10 = *a3;
      if (*v7 <= *a3)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v11 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          unint64_t v7 = (float *)(result + 4 * v6);
          uint64_t v12 = v11 + 2;
          if (v12 < a2 && *v7 > v7[1])
          {
            ++v7;
            uint64_t v6 = v12;
          }
          float v9 = *v7;
        }
        while (*v7 <= v10);
        *a3 = v10;
      }
    }
  }
  return result;
}

double nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6.n128_f32[0] = nlv4_inference_orchestrator::inference_engine::BeamSearch::findBorderScore(a1, (float **)a2);
  unint64_t v7 = *(float **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    unint64_t v10 = 0;
    float v9 = 0;
  }
  else
  {
    float v8 = v6.n128_f32[0];
    float v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      float v12 = v7[v11];
      if (v12 > v8)
      {
        unint64_t v13 = (unint64_t)a3[2];
        if (v10 >= v13)
        {
          uint64_t v14 = (uint64_t)(v10 - (void)v9) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v13 - (void)v9;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float v18 = (char *)operator new(16 * v17);
          }
          else
          {
            float v18 = 0;
          }
          unsigned __int8 v19 = (float *)&v18[16 * v14];
          *(void *)unsigned __int8 v19 = v11;
          v19[2] = v12;
          unsigned __int8 v20 = v19;
          if ((void *)v10 != v9)
          {
            do
            {
              uint64_t v21 = *(void *)(v10 - 16);
              v10 -= 16;
              int v22 = *(_DWORD *)(v10 + 8);
              *((void *)v20 - 2) = v21;
              v20 -= 4;
              *((_DWORD *)v20 + 2) = v22;
            }
            while ((void *)v10 != v9);
            float v9 = *a3;
          }
          unint64_t v10 = (unint64_t)(v19 + 4);
          *a3 = v20;
          a3[1] = v19 + 4;
          a3[2] = &v18[16 * v17];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(void *)unint64_t v10 = v11;
          *(float *)(v10 + 8) = v12;
          v10 += 16;
        }
        a3[1] = (void *)v10;
        float v9 = *a3;
      }
      if (*(void *)(a1 + 8) == (uint64_t)(v10 - (void)v9) >> 4) {
        break;
      }
      ++v11;
      unint64_t v7 = *(float **)a2;
    }
    while (v11 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  unint64_t v23 = 126 - 2 * __clz((uint64_t)(v10 - (void)v9) >> 4);
  if ((void *)v10 == v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>((unint64_t)v9, v10, v24, 1, v6);
}

void sub_1C8E465C8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = (uint64_t *)(a2 - 16);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = (uint64_t)(a2 - v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                a5.n128_u32[0] = *(_DWORD *)(a2 - 8);
                if (a5.n128_f32[0] < *(float *)(v12 + 8))
                {
                  a5 = *(__n128 *)v12;
                  __n128 v90 = *(__n128 *)v12;
                  uint64_t v44 = *v11;
                  *(_DWORD *)(v12 + 8) = *(_DWORD *)(a2 - 8);
                  *(void *)unint64_t v12 = v44;
                  *(_DWORD *)(a2 - 8) = v90.n128_u32[2];
                  uint64_t *v11 = v90.n128_u64[0];
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)v12, (float *)(v12 + 16), a2 - 16);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(v12, (float *)(v12 + 16), (__n128 *)(v12 + 32), a2 - 16).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__n128 *)v12, (long long *)(v12 + 16), (__n128 *)(v12 + 32), (__n128 *)(v12 + 48), a2 - 16).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            uint64_t v45 = (void *)(v12 + 16);
            BOOL v47 = v12 == a2 || v45 == (void *)a2;
            if (a4)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unsigned __int8 v49 = (void *)v12;
                do
                {
                  a5.n128_u32[0] = *((_DWORD *)v49 + 6);
                  float v50 = *((float *)v49 + 2);
                  unsigned __int8 v49 = v45;
                  if (a5.n128_f32[0] < v50)
                  {
                    uint64_t v51 = *v45;
                    uint64_t v52 = v48;
                    while (1)
                    {
                      uint64_t v53 = v12 + v52;
                      *(void *)(v53 + 16) = *(void *)(v12 + v52);
                      *(_DWORD *)(v53 + 24) = *(_DWORD *)(v12 + v52 + 8);
                      if (!v52) {
                        break;
                      }
                      v52 -= 16;
                      if (a5.n128_f32[0] >= *(float *)(v53 - 8))
                      {
                        uint64_t v54 = v12 + v52 + 16;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v54 = v12;
LABEL_83:
                    *(void *)uint64_t v54 = v51;
                    *(_DWORD *)(v54 + 8) = a5.n128_u32[0];
                  }
                  uint64_t v45 = v49 + 2;
                  v48 += 16;
                }
                while (v49 + 2 != (void *)a2);
              }
            }
            else if (!v47)
            {
              do
              {
                a5.n128_u32[0] = *(_DWORD *)(a1 + 24);
                float v81 = *(float *)(a1 + 8);
                a1 = (unint64_t)v45;
                if (a5.n128_f32[0] < v81)
                {
                  uint64_t v82 = *v45;
                  __n128 v83 = v45;
                  do
                  {
                    uint64_t v84 = v83;
                    uint64_t v85 = *(v83 - 2);
                    v83 -= 2;
                    *uint64_t v84 = v85;
                    *((_DWORD *)v84 + 2) = *((_DWORD *)v84 - 2);
                  }
                  while (a5.n128_f32[0] < *((float *)v84 - 6));
                  *__n128 v83 = v82;
                  *((_DWORD *)v83 + 2) = a5.n128_u32[0];
                }
                uint64_t v45 = (void *)(a1 + 16);
              }
              while (a1 + 16 != a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = v12 + 16 * v58;
                  if (2 * v57 + 2 < (uint64_t)v14 && *(float *)(v59 + 8) < *(float *)(v59 + 24))
                  {
                    v59 += 16;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  float v60 = *(float *)(v12 + 16 * v57 + 8);
                  if (*(float *)(v59 + 8) >= v60)
                  {
                    unint64_t v61 = v12 + 16 * v57;
                    uint64_t v62 = *(void *)v61;
                    do
                    {
                      unint64_t v63 = v61;
                      unint64_t v61 = v59;
                      uint64_t v64 = *(void *)v59;
                      *(_DWORD *)(v63 + 8) = *(_DWORD *)(v61 + 8);
                      *(void *)unint64_t v63 = v64;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v65 = 2 * v58;
                      uint64_t v58 = (2 * v58) | 1;
                      unint64_t v59 = v12 + 16 * v58;
                      uint64_t v66 = v65 + 2;
                      if (v66 < (uint64_t)v14 && *(float *)(v59 + 8) < *(float *)(v59 + 24))
                      {
                        v59 += 16;
                        uint64_t v58 = v66;
                      }
                    }
                    while (*(float *)(v59 + 8) >= v60);
                    *(void *)unint64_t v61 = v62;
                    *(float *)(v61 + 8) = v60;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              uint64_t v67 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v68 = 0;
                a5 = *(__n128 *)v12;
                long long v91 = *(_OWORD *)v12;
                unint64_t v69 = v12;
                do
                {
                  unint64_t v70 = v69;
                  v69 += 16 * (v68 + 1);
                  uint64_t v71 = 2 * v68;
                  uint64_t v68 = (2 * v68) | 1;
                  uint64_t v72 = v71 + 2;
                  if (v72 < v67)
                  {
                    a5.n128_u32[0] = *(_DWORD *)(v69 + 8);
                    if (a5.n128_f32[0] < *(float *)(v69 + 24))
                    {
                      v69 += 16;
                      uint64_t v68 = v72;
                    }
                  }
                  uint64_t v73 = *(void *)v69;
                  *(_DWORD *)(v70 + 8) = *(_DWORD *)(v69 + 8);
                  *(void *)unint64_t v70 = v73;
                }
                while (v68 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 16;
                if (v69 == a2)
                {
                  *(_DWORD *)(v69 + 8) = DWORD2(v91);
                  *(void *)unint64_t v69 = v91;
                }
                else
                {
                  uint64_t v74 = *(void *)a2;
                  *(_DWORD *)(v69 + 8) = *(_DWORD *)(a2 + 8);
                  *(void *)unint64_t v69 = v74;
                  *(_DWORD *)(a2 + 8) = DWORD2(v91);
                  *(void *)a2 = v91;
                  uint64_t v75 = v69 - v12 + 16;
                  if (v75 >= 17)
                  {
                    unint64_t v76 = (unint64_t)((v75 >> 4) - 2) >> 1;
                    a5.n128_u32[0] = *(_DWORD *)(v69 + 8);
                    if (*(float *)(v12 + 16 * v76 + 8) < a5.n128_f32[0])
                    {
                      uint64_t v77 = *(void *)v69;
                      do
                      {
                        unint64_t v78 = v69;
                        unint64_t v69 = v12 + 16 * v76;
                        uint64_t v79 = *(void *)v69;
                        *(_DWORD *)(v78 + 8) = *(_DWORD *)(v69 + 8);
                        *(void *)unint64_t v78 = v79;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                      }
                      while (*(float *)(v12 + 16 * v76 + 8) < a5.n128_f32[0]);
                      *(void *)unint64_t v69 = v77;
                      *(_DWORD *)(v69 + 8) = a5.n128_u32[0];
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = v12 + 16 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)a1, (float *)(a1 + 16 * (v14 >> 1)), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)(a1 + 16), (float *)(v16 - 16), a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)(a1 + 32), (float *)(a1 + 16 + 16 * v15), a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)(v16 - 16), (float *)v16, a1 + 16 + 16 * v15);
            a5 = *(__n128 *)a1;
            long long v87 = *(_OWORD *)a1;
            uint64_t v17 = *(void *)v16;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v16 + 8);
            *(void *)a1 = v17;
            *(_DWORD *)(v16 + 8) = DWORD2(v87);
            *(void *)unint64_t v16 = v87;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)(a1 + 16 * (v14 >> 1)), (float *)a1, a2 - 16);
          }
          --a3;
          if (a4) {
            break;
          }
          a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
          if (*(float *)(a1 - 8) < a5.n128_f32[0]) {
            goto LABEL_12;
          }
          if (a5.n128_f32[0] >= *(float *)(a2 - 8))
          {
            unint64_t v34 = a1 + 16;
            do
            {
              unint64_t v12 = v34;
              if (v34 >= a2) {
                break;
              }
              float v35 = *(float *)(v34 + 8);
              v34 += 16;
            }
            while (a5.n128_f32[0] >= v35);
          }
          else
          {
            unint64_t v32 = a1;
            do
            {
              unint64_t v12 = v32 + 16;
              float v33 = *(float *)(v32 + 24);
              v32 += 16;
            }
            while (a5.n128_f32[0] >= v33);
          }
          unint64_t v36 = a2;
          if (v12 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v36 = v37 - 16;
              float v38 = *(float *)(v37 - 8);
              v37 -= 16;
            }
            while (a5.n128_f32[0] < v38);
          }
          uint64_t v39 = *(void *)a1;
          while (v12 < v36)
          {
            long long v89 = *(_OWORD *)v12;
            uint64_t v40 = *(void *)v36;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v36 + 8);
            *(void *)unint64_t v12 = v40;
            *(_DWORD *)(v36 + 8) = DWORD2(v89);
            *(void *)unint64_t v36 = v89;
            do
            {
              float v41 = *(float *)(v12 + 24);
              v12 += 16;
            }
            while (a5.n128_f32[0] >= v41);
            do
            {
              float v42 = *(float *)(v36 - 8);
              v36 -= 16;
            }
            while (a5.n128_f32[0] < v42);
          }
          BOOL v5 = v12 - 16 >= a1;
          BOOL v6 = v12 - 16 == a1;
          if (v12 - 16 != a1)
          {
            uint64_t v43 = *(void *)(v12 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 - 8);
            *(void *)a1 = v43;
          }
          a4 = 0;
          *(void *)(v12 - 16) = v39;
          *(_DWORD *)(v12 - 8) = a5.n128_u32[0];
        }
        a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
LABEL_12:
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = a1;
        do
        {
          unint64_t v20 = v19;
          v19 += 16;
        }
        while (*(float *)(v20 + 24) < a5.n128_f32[0]);
        unint64_t v21 = a2;
        if (v20 == a1)
        {
          unint64_t v24 = a2;
          while (v19 < v24)
          {
            unint64_t v22 = v24 - 16;
            float v25 = *(float *)(v24 - 8);
            v24 -= 16;
            if (v25 < a5.n128_f32[0]) {
              goto LABEL_22;
            }
          }
          unint64_t v22 = v24;
        }
        else
        {
          do
          {
            unint64_t v22 = v21 - 16;
            float v23 = *(float *)(v21 - 8);
            v21 -= 16;
          }
          while (v23 >= a5.n128_f32[0]);
        }
LABEL_22:
        unint64_t v12 = v19;
        if (v19 < v22)
        {
          unint64_t v26 = v22;
          do
          {
            long long v88 = *(_OWORD *)v12;
            uint64_t v27 = *(void *)v26;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v26 + 8);
            *(void *)unint64_t v12 = v27;
            *(_DWORD *)(v26 + 8) = DWORD2(v88);
            *(void *)unint64_t v26 = v88;
            do
            {
              float v28 = *(float *)(v12 + 24);
              v12 += 16;
            }
            while (v28 < a5.n128_f32[0]);
            do
            {
              float v29 = *(float *)(v26 - 8);
              v26 -= 16;
            }
            while (v29 >= a5.n128_f32[0]);
          }
          while (v12 < v26);
        }
        if (v12 - 16 != a1)
        {
          uint64_t v30 = *(void *)(v12 - 16);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 - 8);
          *(void *)a1 = v30;
        }
        *(void *)(v12 - 16) = v18;
        *(_DWORD *)(v12 - 8) = a5.n128_u32[0];
        if (v19 >= v22) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>(a1, v12 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(a1, v12 - 16);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(v12, a2))
      {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v12 - 16;
    if (!v31) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(long long *result, float *a2, uint64_t a3)
{
  float v3 = a2[2];
  float v4 = *(float *)(a3 + 8);
  if (v3 >= *((float *)result + 2))
  {
    if (v4 < v3)
    {
      long long v11 = *(_OWORD *)a2;
      int v6 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v6;
      *(void *)a3 = v11;
      *(_DWORD *)(a3 + 8) = DWORD2(v11);
      if (a2[2] < *((float *)result + 2))
      {
        long long v12 = *result;
        int v7 = *((_DWORD *)a2 + 2);
        *(void *)uint64_t result = *(void *)a2;
        *((_DWORD *)result + 2) = v7;
        *(void *)a2 = v12;
        a2[2] = *((float *)&v12 + 2);
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v13 = *result;
      int v8 = *((_DWORD *)a2 + 2);
      *(void *)uint64_t result = *(void *)a2;
      *((_DWORD *)result + 2) = v8;
      *(void *)a2 = v13;
      a2[2] = *((float *)&v13 + 2);
      if (*(float *)(a3 + 8) >= a2[2]) {
        return result;
      }
      long long v10 = *(_OWORD *)a2;
      int v9 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      long long v10 = *result;
      int v5 = *(_DWORD *)(a3 + 8);
      *(void *)uint64_t result = *(void *)a3;
      *((_DWORD *)result + 2) = v5;
    }
    *(void *)a3 = v10;
    *(_DWORD *)(a3 + 8) = DWORD2(v10);
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(uint64_t a1, float *a2, __n128 *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)a1, a2, (uint64_t)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  if (result.n128_f32[0] < a3->n128_f32[2])
  {
    __n128 result = *a3;
    __n128 v12 = *a3;
    unsigned __int32 v9 = *(_DWORD *)(a4 + 8);
    a3->n128_u64[0] = *(void *)a4;
    a3->n128_u32[2] = v9;
    *(void *)a4 = v12.n128_u64[0];
    *(_DWORD *)(a4 + 8) = v12.n128_u32[2];
    result.n128_u32[0] = a3->n128_u32[2];
    if (result.n128_f32[0] < a2[2])
    {
      __n128 result = *(__n128 *)a2;
      __n128 v13 = *(__n128 *)a2;
      unsigned __int32 v10 = a3->n128_u32[2];
      *(void *)a2 = a3->n128_u64[0];
      *((_DWORD *)a2 + 2) = v10;
      a3->n128_u64[0] = v13.n128_u64[0];
      a3->n128_u32[2] = v13.n128_u32[2];
      result.n128_f32[0] = a2[2];
      if (result.n128_f32[0] < *(float *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        long long v14 = *(_OWORD *)a1;
        int v11 = *((_DWORD *)a2 + 2);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v11;
        *(void *)a2 = v14;
        a2[2] = *((float *)&v14 + 2);
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(__n128 *a1, long long *a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((uint64_t)a1, (float *)a2, a3, (uint64_t)a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 8);
  if (result.n128_f32[0] < a4->n128_f32[2])
  {
    __n128 result = *a4;
    __n128 v15 = *a4;
    unsigned __int32 v11 = *(_DWORD *)(a5 + 8);
    a4->n128_u64[0] = *(void *)a5;
    a4->n128_u32[2] = v11;
    *(void *)a5 = v15.n128_u64[0];
    *(_DWORD *)(a5 + 8) = v15.n128_u32[2];
    result.n128_u32[0] = a4->n128_u32[2];
    if (result.n128_f32[0] < a3->n128_f32[2])
    {
      __n128 result = *a3;
      __n128 v16 = *a3;
      unsigned __int32 v12 = a4->n128_u32[2];
      a3->n128_u64[0] = a4->n128_u64[0];
      a3->n128_u32[2] = v12;
      a4->n128_u64[0] = v16.n128_u64[0];
      a4->n128_u32[2] = v16.n128_u32[2];
      result.n128_u32[0] = a3->n128_u32[2];
      if (result.n128_f32[0] < *((float *)a2 + 2))
      {
        __n128 result = (__n128)*a2;
        long long v17 = *a2;
        unsigned __int32 v13 = a3->n128_u32[2];
        *(void *)a2 = a3->n128_u64[0];
        *((_DWORD *)a2 + 2) = v13;
        a3->n128_u64[0] = v17;
        a3->n128_u32[2] = DWORD2(v17);
        result.n128_u32[0] = *((_DWORD *)a2 + 2);
        if (result.n128_f32[0] < a1->n128_f32[2])
        {
          __n128 result = *a1;
          __n128 v18 = *a1;
          unsigned __int32 v14 = *((_DWORD *)a2 + 2);
          a1->n128_u64[0] = *(void *)a2;
          a1->n128_u32[2] = v14;
          *(void *)a2 = v18.n128_u64[0];
          *((_DWORD *)a2 + 2) = v18.n128_u32[2];
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 8))
      {
        long long v16 = *(_OWORD *)a1;
        int v6 = *(_DWORD *)(a2 - 8);
        *(void *)a1 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = v6;
        *(void *)(a2 - 16) = v16;
        *(_DWORD *)(a2 - 8) = DWORD2(v16);
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)a1, (float *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(a1, (float *)(a1 + 16), (__n128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__n128 *)a1, (long long *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 16);
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((long long *)a1, (float *)(a1 + 16), a1 + 32);
      uint64_t v8 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)(v8 + 8);
    if (v11 < *(float *)(v7 + 8))
    {
      uint64_t v12 = *(void *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        uint64_t v14 = a1 + v13;
        *(void *)(v14 + 48) = *(void *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32) {
          break;
        }
        v13 -= 16;
        if (v11 >= *(float *)(v14 + 24))
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(void *)uint64_t v15 = v12;
      *(float *)(v15 + 8) = v11;
      if (++v10 == 8) {
        return v8 + 16 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2) {
      return 1;
    }
  }
}

float nlv4_inference_orchestrator::inference_engine::BeamSearch::logsumexp(uint64_t a1, float **a2)
{
  CFHashCode v2 = *a2;
  float v3 = a2[1];
  uint64_t v4 = (uint64_t)(*a2 + 1);
  BOOL v5 = *a2 == v3 || v4 == (void)v3;
  int v6 = *a2;
  if (!v5)
  {
    float v7 = *v2;
    int v6 = *a2;
    uint64_t v8 = *a2 + 1;
    do
    {
      float v9 = *v8++;
      float v10 = v9;
      if (v7 < v9)
      {
        float v7 = v10;
        int v6 = (float *)v4;
      }
      uint64_t v4 = (uint64_t)v8;
    }
    while (v8 != v3);
  }
  float v11 = *v6;
  float v12 = 0.0;
  while (v2 != v3)
  {
    float v13 = *v2++;
    float v12 = v12 + expf(v13 - v11);
  }
  return v11 + logf(v12);
}

void *nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  float v6 = nlv4_inference_orchestrator::inference_engine::BeamSearch::logsumexp(a1, (float **)a2);
  float v7 = *(float **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = v8 - *(void *)a2;
  if (v8 == *(void *)a2)
  {
    float v12 = *(float **)(a1 + 16);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = v9 >> 2;
    float v12 = *(float **)(a1 + 16);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      v12[v10] = v7[v10] - v6;
      ++v10;
    }
    while (v11 != v10);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v13 = *(void *)(a1 + 24);
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, v12, v13, (v13 - (uint64_t)v12) >> 2);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  int v17 = 1065353216;
  nlv4_inference_orchestrator::context::Embedder::embed((nlv4_inference_orchestrator::context::Embedder *)(a1 + 72), (uint64_t)__p, (unint64_t **)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
  float v6 = v18;
  uint64_t v7 = (uint64_t)v19;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a3, v6, v7, (v7 - (uint64_t)v6) >> 3);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a3 + 24), v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 2);
  *(_WORD *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 50) = 0;
  uint64_t v8 = *(void *)(a2 + 72);
  if (!v8)
  {
    BOOL v10 = 0;
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(v8 + 136);
  if (v9) {
    BOOL v10 = *(void *)(v9 + 16) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = *(void *)(v8 + 128);
  if (!v11) {
    goto LABEL_8;
  }
  BOOL v12 = *(void *)(v11 + 32) != 0;
LABEL_9:
  LOBYTE(__p[0]) = 0;
  BYTE8(v16) = 0;
  uint64_t v13 = *(void *)(a2 + 48);
  if (v13)
  {
    uint64_t v14 = *(const std::string **)(v13 + 16);
    if (v14) {
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)__p, v14);
    }
  }
  if (v10)
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(a1, a3, *(const sirinluexternal::NLContext **)(*(void *)(*(void *)(a2 + 72) + 136) + 16), (uint64_t)__p);
  }
  else if (v12)
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::featurize((uint64_t)a1, a3, *(void **)(*(void *)(*(void *)(a2 + 72) + 128) + 32));
  }
  if (BYTE8(v16) && SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    unint64_t v19 = v18;
    operator delete(v18);
  }
}

void sub_1C8E47544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  unint64_t v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + 8) = v20;
    operator delete(v20);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a18);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(unsigned __int8 *a1, uint64_t a2, const sirinluexternal::NLContext *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (const void **)(a1 + 304);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)(a1 + 304), a3, (uint64_t)v23);
  *(_OWORD *)unint64_t v20 = 0u;
  *(_OWORD *)unint64_t v21 = 0u;
  int v22 = 1065353216;
  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(v8, a3, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v20, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
    uint64_t v9 = __p[0];
    __p[0] = 0;
    if (v9) {
      operator delete(v9);
    }
    BOOL v10 = (unsigned __int8 *)v21[0];
    if (v21[0])
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v10 + 16, (uint64_t)(v10 + 16));
        BOOL v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = "NLv4";
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = "[insights-snlp-nlv4]: ";
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "[%s] %sFeaturizing the following context labels in NLv4ParserRequest.\n", (uint8_t *)__p, 0x16u);
  }
  BOOL v12 = (char *)v24;
  if (v24)
  {
    do
    {
      uint64_t v13 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = v12 + 16;
        if (v12[39] < 0) {
          uint64_t v14 = (void *)*v14;
        }
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "NLv4";
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = "[insights-snlp-nlv4]: ";
        HIWORD(__p[2]) = 2080;
        *(void *)&long long v26 = v14;
        _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "[%s] %s%s", (uint8_t *)__p, 0x20u);
      }
      BOOL v12 = *(char **)v12;
    }
    while (v12);
  }
  *(unsigned char *)(a2 + 48) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1) != 0;
  *(unsigned char *)(a2 + 49) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1 + 24) != 0;
  *(unsigned char *)(a2 + 50) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1 + 48) != 0;
  nlv4_inference_orchestrator::context::Embedder::embed((nlv4_inference_orchestrator::context::Embedder *)(a1 + 72), (uint64_t)v23, (unint64_t **)__p);
  uint64_t v15 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v15;
    operator delete(v15);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void **)(a2 + 16) = __p[2];
  memset(__p, 0, sizeof(__p));
  long long v16 = *(void **)(a2 + 24);
  if (v16)
  {
    *(void *)(a2 + 32) = v16;
    operator delete(v16);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    long long v16 = __p[0];
  }
  *(_OWORD *)(a2 + 24) = v26;
  *(void *)(a2 + 40) = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  if (v16)
  {
    __p[1] = v16;
    operator delete(v16);
  }
  if (*(unsigned char *)(a4 + 24))
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore();
  }
  else
  {
    int v17 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEBUG, "nlu_request_id not found so skipping insertion of context featurized response into FeatureStore", (uint8_t *)__p, 2u);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v21[0]);
  uint64_t v18 = v20[0];
  v20[0] = 0;
  if (v18) {
    operator delete(v18);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v24);
  unint64_t v19 = v23[0];
  v23[0] = 0;
  if (v19) {
    operator delete(v19);
  }
}

void sub_1C8E4797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels(a1 + 304, a3, (uint64_t)&__p);
}

void sub_1C8E47C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore()
{
  if (_os_feature_enabled_impl()) {
    nlv4_inference_orchestrator::context::ContextFeaturizer::makeContextResponse();
  }
  uint64_t v0 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CFHashCode v2 = 0;
    _os_log_impl(&dword_1C8DA9000, v0, OS_LOG_TYPE_DEBUG, "Skipping insertion of NLv4 context featurizer response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", v2, 2u);
  }
  uint64_t v1 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CFHashCode v2 = 0;
    _os_log_impl(&dword_1C8DA9000, v1, OS_LOG_TYPE_DEBUG, "Unable to insert context featurizer response into FeatureStore", v2, 2u);
  }
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::makeContextResponse()
{
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  BOOL v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void snlp::ssu::app::SSUFileWrapper::SSUFileWrapper(snlp::ssu::app::SSUFileWrapper *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  long long v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_DEBUG, "Loading SSUFile...", buf, 2u);
  }
  snlp::ssu::app::SSUFileWrapper::openFileHandle(&a2->__pn_, v4);
  operator new();
}

void sub_1C8E48F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB775C40](v28, 0x1070C400E7C11DFLL);
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100](a12, 0);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::app::SSUFileWrapper::openFileHandle(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(void *)&__p.st_uid = *((void *)&this->__r_.__value_.__l + 2);
  }
  if ((__p.st_gid & 0x80000000) == 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = *(const char **)&__p.st_dev;
  }
  unsigned int v4 = open(p_p, 0, *(void *)&__p.st_dev, __p.st_ino, *(void *)&__p.st_uid);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  if (v4 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = *this;
    }
    unint64_t v8 = std::string::insert(&v11, 0, "Unable to open file: ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)&__p.st_uid = *((void *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)&__p.st_dev = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (fstat(v4, &__p) < 0)
  {
    uint8x8_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to gather stats on file");
    std::runtime_error::runtime_error(v7, &v11);
    v7->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  return v4;
}

void sub_1C8E491AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    if ((unint64_t)(*(void *)v2 + 1) >= 2 && munmap(*(void **)v2, *(void *)(v2 + 8)) == -1)
    {
      long long v3 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned int v4 = 0;
        _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_ERROR, "Error when unmapping the memory for SSU file", v4, 2u);
      }
    }
    *(void *)(v2 + 24) = 0;
    *(void *)uint64_t v2 = 0;
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t apple::aiml::flatbuffers2::Verifier::VerifyOffset(apple::aiml::flatbuffers2::Verifier *this, unint64_t a2)
{
  if ((a2 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + a2);
  if ((int)v4 < 1) {
    return 0;
  }
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyTableStart(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v11 = 0;
    if (*((unsigned char *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL apple::aiml::flatbuffers2::Table::VerifyOffset(apple::aiml::flatbuffers2::Table *this, const apple::aiml::flatbuffers2::Verifier *a2, unsigned int a3)
{
  unint64_t v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || apple::aiml::flatbuffers2::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(void *)a2) != 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyString(apple::aiml::flatbuffers2::Verifier *a1, const unsigned __int8 *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v6 = 0;
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    unint64_t v4 = *((void *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(unsigned char *)(*(void *)a1 + v6) == 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }
  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(apple::aiml::flatbuffers2::Verifier *this, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (*a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = a2 + 1;
    do
    {
      uint64_t v7 = a2[v4 + 1];
      unint64_t v8 = (const unsigned __int8 *)&a2[v4] + v7;
      BOOL v9 = (apple::aiml::flatbuffers2::Table *)(v8 + 4);
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v8 + 4);
      if (!result) {
        return result;
      }
      uint64_t v11 = v7 - *((int *)v8 + 1);
      unsigned int v12 = *(unsigned __int16 *)((char *)&a2[v4 + 1] + v11);
      if (v12 >= 5)
      {
        if (*(_WORD *)((char *)&a2[v4 + 2] + v11))
        {
          BOOL result = 0;
          unint64_t v13 = *((void *)this + 1);
          if (v13 < 2
            || v13 - 1 < (unint64_t)&v6[v4]
                       + v7
                       + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11)
                       - *(void *)this)
          {
            return result;
          }
        }
      }
      BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset(v9, this, 6u);
      if (!result) {
        return result;
      }
      if (v12 < 7)
      {
        if (v12 < 5) {
          goto LABEL_36;
        }
      }
      else if (*(_WORD *)((char *)&a2[v4 + 2] + v11 + 2))
      {
        uint64_t v14 = v7 + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11 + 2);
        uint64_t v15 = (unsigned __int8 *)&a2[v4 + 1] + v14 + *(unsigned int *)((char *)&a2[v4 + 1] + v14);
        goto LABEL_15;
      }
      uint64_t v15 = 0;
LABEL_15:
      if (*(_WORD *)((char *)&a2[v4 + 2] + v11))
      {
        int v16 = *((unsigned __int8 *)&a2[v4 + 1] + v7 + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11));
        if (v16 != 2)
        {
          if (v16 != 1 || v15 == 0) {
            goto LABEL_36;
          }
          BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v15);
          if (!result) {
            return result;
          }
          BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v15, this, 4u);
          if (!result) {
            return result;
          }
          uint64_t v18 = &v15[-*(int *)v15];
          if (*(unsigned __int16 *)v18 >= 5u && (uint64_t v19 = *((unsigned __int16 *)v18 + 2)) != 0) {
            unint64_t v20 = &v15[v19 + *(unsigned int *)&v15[v19]];
          }
          else {
            unint64_t v20 = 0;
          }
          if (!apple::aiml::flatbuffers2::Verifier::VerifyString(this, v20)) {
            return 0;
          }
          goto LABEL_35;
        }
        if (v15)
        {
          BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v15);
          if (!result) {
            return result;
          }
          BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v15, this, 4u);
          if (!result) {
            return result;
          }
          unint64_t v21 = &v15[-*(int *)v15];
          if (*(unsigned __int16 *)v21 >= 5u)
          {
            uint64_t v22 = *((unsigned __int16 *)v21 + 2);
            if (v22)
            {
              if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(this, &v15[v22 + *(unsigned int *)&v15[v22]], 4uLL, 0))return 0; {
            }
              }
          }
LABEL_35:
          --*((_DWORD *)this + 4);
        }
      }
LABEL_36:
      --*((_DWORD *)this + 4);
      ++v5;
      ++v4;
    }
    while (v5 < *a2);
  }
  return 1;
}

void snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper(snlp::ssu::app::SSUFileWrapper *this)
{
  close(*(_DWORD *)(*(void *)this + 16));
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100]((uint64_t *)this, 0);
  uint64_t v2 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "SSUFile relinquished", v3, 2u);
  }
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t snlp::ssu::app::SSUFileWrapper::getAssetDirectoryFormatVersion(snlp::ssu::app::SSUFileWrapper *this)
{
  uint64_t v1 = *(int **)(*(void *)this + 24);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (uint64_t v3 = v2[2]) != 0) {
    return *(unsigned __int16 *)((char *)v1 + v3);
  }
  else {
    return 0;
  }
}

void *snlp::ssu::app::SSUFileWrapper::getLocale@<X0>(snlp::ssu::app::SSUFileWrapper *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (unsigned int *)(*(void *)(*(void *)this + 24)
                      + *(unsigned __int16 *)(*(void *)(*(void *)this + 24)
                                            - **(int **)(*(void *)this + 24)
                                            + 8));
  return std::string::basic_string[abi:ne180100](a2, (char *)v2 + *v2 + 4, *(unsigned int *)((char *)v2 + *v2));
}

void *snlp::ssu::app::SSUFileWrapper::getDataVersion@<X0>(snlp::ssu::app::SSUFileWrapper *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (unsigned int *)(*(void *)(*(void *)this + 24)
                      + *(unsigned __int16 *)(*(void *)(*(void *)this + 24)
                                            - **(int **)(*(void *)this + 24)
                                            + 6));
  uint64_t v3 = (unsigned int *)((char *)v2
                      + *v2
                      + *(unsigned __int16 *)((char *)v2 + *v2 - *(unsigned int *)((char *)v2 + *v2) + 4));
  return std::string::basic_string[abi:ne180100](a2, (char *)v3 + *v3 + 4, *(unsigned int *)((char *)v3 + *v3));
}

void snlp::ssu::app::SSUFileWrapper::getAllCategoriesWithGroup(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)a1 + 24)
                      + *(unsigned __int16 *)(*(void *)(*(void *)a1 + 24) - **(int **)(*(void *)a1 + 24) + 10));
  uint64_t v5 = *v4;
  uint64_t v7 = (unsigned int *)((char *)v4 + v5 + 4);
  uint64_t v6 = *(unsigned int *)((char *)v4 + v5);
  if (v6)
  {
    unint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = &v7[v6];
    do
    {
      unint64_t v13 = (int *)((char *)v7 + *v7);
      a1 = (uint64_t)snlp::ssu::app::SSUFileWrapper::lookupGroup(a1, v13, v8);
      if (a1)
      {
        uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
          char v16 = *((unsigned char *)v13 + v15);
        }
        else {
          char v16 = 0;
        }
        if (v11 >= v10)
        {
          uint64_t v18 = &v11[-v9];
          uint64_t v19 = (uint64_t)&v11[-v9 + 1];
          if (v19 < 0) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          if (2 * (uint64_t)&v10[-v9] > (unint64_t)v19) {
            uint64_t v19 = 2 * (void)&v10[-v9];
          }
          if ((unint64_t)&v10[-v9] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v20 = v19;
          }
          if (v20) {
            a1 = (uint64_t)operator new(v20);
          }
          else {
            a1 = 0;
          }
          unint64_t v21 = &v18[a1];
          uint64_t v22 = &v18[a1];
          *uint64_t v22 = v16;
          int v17 = v22 + 1;
          if (v11 != (char *)v9)
          {
            float v23 = &v11[~v9];
            do
            {
              char v24 = *--v11;
              (v23--)[a1] = v24;
            }
            while (v11 != (char *)v9);
            unint64_t v21 = (char *)a1;
          }
          unint64_t v10 = (char *)(a1 + v20);
          *a3 = v21;
          a3[1] = v17;
          a3[2] = a1 + v20;
          if (v9) {
            operator delete((void *)v9);
          }
          unint64_t v9 = (unint64_t)v21;
          unint64_t v8 = a2;
        }
        else
        {
          char *v11 = v16;
          int v17 = v11 + 1;
        }
        a3[1] = v17;
        uint64_t v11 = v17;
      }
      ++v7;
    }
    while (v7 != v12);
  }
}

void sub_1C8E49A88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *snlp::ssu::app::SSUFileWrapper::lookupGroup(uint64_t a1, int *a2, const void **a3)
{
  uint64_t v3 = *(unsigned __int16 *)((char *)a2 - *a2 + 6);
  uint64_t v4 = *(unsigned int *)((char *)a2 + v3);
  uint64_t v5 = (int *)((char *)a2 + v3 + v4);
  uint64_t v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = 0;
    int v8 = *((char *)a3 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v9 = (size_t)a3[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a3;
    }
    else {
      unint64_t v10 = *a3;
    }
    uint64_t v11 = (char *)a2 + v3 + v4;
    while (1)
    {
      unint64_t v12 = v5[v7 + 1]
          + (unint64_t)*(unsigned __int16 *)&v11[v7 * 4
                                                      + 8
                                                      + v5[v7 + 1]
                                                      - (uint64_t)*(int *)((char *)&v5[v7 + 1] + v5[v7 + 1])];
      uint64_t v13 = *(unsigned int *)&v11[v7 * 4 + 4 + v12];
      if (v9 == *(_DWORD *)&v11[v12 + 4 + v7 * 4 + v13] && !memcmp(v10, &v11[v7 * 4 + 8 + v12 + v13], v9)) {
        break;
      }
      if (v6 == ++v7) {
        return 0;
      }
    }
    uint64_t v14 = &v5[v7 + 1];
  }
  else
  {
    uint64_t v14 = v5 + 1;
  }
  if (&v5[v6 + 1] == v14) {
    return 0;
  }
  else {
    return (char *)v14 + *v14;
  }
}

void *snlp::ssu::app::SSUFileWrapper::getNegativeExampleEncodedVectors@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  uint64_t v6 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v6 >= 9u && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0) {
    int v8 = &Group[v7 + *(unsigned int *)&Group[v7]];
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)v8;
  if (v9)
  {
    unint64_t v10 = (unsigned int *)(v8 + 4);
    uint64_t v11 = (int *)SSUExample::data_as_encoded_vector((SSUExample *)&v8[*((unsigned int *)v8 + 1) + 4]);
    unint64_t v12 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 4));
    uint64_t v13 = *(unsigned int *)((char *)v12 + *v12);
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v36 = 0;
    uint64_t v34 = v13;
    std::vector<float>::reserve(__p, v13 * (unint64_t)v9);
    uint64_t v14 = *(unsigned int *)v8;
    if (v14)
    {
      uint64_t v15 = &v10[v14];
      do
      {
        char v16 = (int *)SSUExample::data_as_encoded_vector((SSUExample *)((char *)v10 + *v10));
        int v17 = (unsigned int *)((char *)v16 + *(unsigned __int16 *)((char *)v16 - *v16 + 4));
        uint64_t v18 = *v17;
        size_t v20 = (int *)((char *)v17 + v18 + 4);
        uint64_t v19 = *(unsigned int *)((char *)v17 + v18);
        if (v19)
        {
          unint64_t v21 = &v20[v19];
          uint64_t v22 = (char *)__p[1];
          do
          {
            int v23 = *v20;
            if (v22 >= v36)
            {
              float v25 = (char *)__p[0];
              uint64_t v26 = (v22 - (char *)__p[0]) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v36 - (char *)__p[0];
              if ((v36 - (char *)__p[0]) >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v36, v29);
                float v25 = (char *)__p[0];
                uint64_t v22 = (char *)__p[1];
              }
              else
              {
                uint64_t v30 = 0;
              }
              BOOL v31 = &v30[4 * v26];
              *(_DWORD *)BOOL v31 = v23;
              char v24 = v31 + 4;
              while (v22 != v25)
              {
                int v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              __p[0] = v31;
              __p[1] = v24;
              unint64_t v36 = &v30[4 * v29];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v22 = v23;
              char v24 = v22 + 4;
            }
            __p[1] = v24;
            ++v20;
            uint64_t v22 = (char *)v24;
          }
          while (v20 != v21);
        }
        ++v10;
      }
      while (v10 != v15);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    BOOL result = operator new(0x10uLL);
    *(void *)(a4 + 8) = result + 2;
    *(void *)(a4 + 16) = result + 2;
    *BOOL result = v9;
    result[1] = v34;
    *(void *)a4 = result;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)__p;
    *(void *)(a4 + 40) = v36;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    BOOL result = operator new(0x10uLL);
    *BOOL result = 0;
    result[1] = 0;
    *(void *)a4 = result;
    *(void *)(a4 + 8) = result + 2;
    *(void *)(a4 + 16) = result + 2;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
  }
  return result;
}

void sub_1C8E49E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *snlp::ssu::app::SSUFileWrapper::getGroup(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = a2;
  uint64_t v5 = *(int **)(*(void *)a1 + 24);
  uint64_t v6 = *(unsigned __int16 *)((char *)v5 - *v5 + 10);
  uint64_t v7 = *(unsigned int *)((char *)v5 + v6);
  int v8 = (int *)((char *)v5 + v6 + v7);
  uint64_t v9 = v8 + 1;
  uint64_t v10 = *v8;
  if (*v8)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (char *)v5 + v6 + v7;
    while (1)
    {
      uint64_t v13 = v8[v11 + 1];
      uint64_t v14 = &v12[v11 * 4 + v13 - *(int *)((char *)&v8[v11 + 1] + v13)];
      if (*((unsigned __int16 *)v14 + 2) >= 5u && (uint64_t v15 = *((unsigned __int16 *)v14 + 4)) != 0) {
        int v16 = v12[v11 * 4 + 4 + v13 + v15];
      }
      else {
        int v16 = 0;
      }
      if (v16 == a2) {
        break;
      }
      if (v10 == ++v11) {
        goto LABEL_9;
      }
    }
    uint64_t v19 = &v8[v11 + 1];
  }
  else
  {
    uint64_t v19 = v8 + 1;
  }
  if (&v9[v10] == v19)
  {
LABEL_9:
    int v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, "No such category in the SSU file: ");
    if (v4 <= 3) {
      uint64_t v18 = EnumNamesSSUCategoryType(void)::names[v4];
    }
    else {
      uint64_t v18 = "";
    }
    unint64_t v21 = std::string::append(v17, v18);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    int v23 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      char v24 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v41);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  BOOL result = snlp::ssu::app::SSUFileWrapper::lookupGroup(a1, (int *)((char *)v19 + *v19), (const void **)a3);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "No such group in the SSU file category ");
    if (v4 <= 3) {
      uint64_t v26 = EnumNamesSSUCategoryType(void)::names[v4];
    }
    else {
      uint64_t v26 = "";
    }
    unint64_t v27 = std::string::append(&v39, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    unint64_t v29 = std::string::append(&v40, " and group ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v31 = *(char *)(a3 + 23);
    if (v31 >= 0) {
      int v32 = (const std::string::value_type *)a3;
    }
    else {
      int v32 = *(const std::string::value_type **)a3;
    }
    if (v31 >= 0) {
      std::string::size_type v33 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v33 = *(void *)(a3 + 8);
    }
    uint64_t v34 = std::string::append(&buf, v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    unint64_t v36 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      unint64_t v37 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    float v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, &v41);
    v38->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  return result;
}

void sub_1C8E4A1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SSUExample::data_as_encoded_vector(SSUExample *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *((unsigned char *)this + v1[2]) == 2) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

void snlp::ssu::app::SSUFileWrapper::getNegativeExampleUtterances(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  uint64_t v6 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v6 >= 9u && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0) {
    int v8 = &Group[v7 + *(unsigned int *)&Group[v7]];
  }
  else {
    int v8 = 0;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a4, *(unsigned int *)v8);
  unsigned int v11 = *(_DWORD *)v8;
  uint64_t v10 = (unsigned int *)(v8 + 4);
  uint64_t v9 = v11;
  if (v11)
  {
    uint64_t v12 = 4 * v9;
    do
    {
      uint64_t v13 = (int *)SSUExample::data_as_utterance((SSUExample *)((char *)v10 + *v10));
      uint64_t v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v14 + *v14 + 4, *(unsigned int *)((char *)v14 + *v14));
      unint64_t v16 = *(void *)(a4 + 8);
      unint64_t v15 = *(void *)(a4 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a4) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a4) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v21) {
          long long v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a4 + 16, v21);
        }
        else {
          long long v22 = 0;
        }
        int v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)__p;
        v23->__r_.__value_.__r.__words[2] = v28;
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        __p[1] = 0;
        std::string::size_type v28 = 0;
        __p[0] = 0;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        uint64_t v25 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v26 = SHIBYTE(v28);
        *(void *)(a4 + 8) = v25;
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v28;
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(a4 + 8) = v16 + 24;
      }
      ++v10;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_1C8E4A4AC(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, ...)
{
  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

uint64_t SSUExample::data_as_utterance(SSUExample *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *((unsigned char *)this + v1[2]) == 1) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

void snlp::ssu::app::SSUFileWrapper::getPositiveExamples(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  uint64_t v5 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v5 >= 7u && (uint64_t v6 = *((unsigned __int16 *)v5 + 3)) != 0) {
    uint64_t v7 = &Group[v6 + *(unsigned int *)&Group[v6]];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  unint64_t v78 = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::reserve(&v76, *(unsigned int *)v7);
  uint64_t v9 = (unsigned int *)(v7 + 4);
  uint64_t v8 = *(unsigned int *)v7;
  if (v8)
  {
    uint64_t v64 = &v9[v8];
    do
    {
      uint64_t v65 = v9;
      uint64_t v66 = (unsigned int *)v7;
      uint64_t v10 = *v9;
      unsigned int v11 = (int *)((char *)v9 + v10);
      uint64_t v12 = (unsigned int *)((char *)v9 + v10 + *(unsigned __int16 *)((char *)v9 + v10 - *(int *)((char *)v9 + v10) + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v12 + *v12 + 4, *(unsigned int *)((char *)v12 + *v12));
      uint64_t v71 = 0;
      unint64_t v72 = 0;
      unint64_t v73 = 0;
      uint64_t v13 = *v11;
      uint64_t v14 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - v13 + 6));
      unint64_t v15 = *(unsigned int *)((char *)v14 + *v14);
      if (v15)
      {
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v73;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v15);
        __v.__begin_ = __v.__first_;
        __v.__end_ = __v.__first_;
        __v.__end_cap_.__value_ = &__v.__first_[2 * v16];
        std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v71, &__v);
        std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&__v);
        uint64_t v13 = *v11;
      }
      uint64_t v17 = *(unsigned __int16 *)((char *)v11 - v13 + 6);
      uint64_t v18 = *(unsigned int *)((char *)v11 + v17);
      uint64_t v19 = *(unsigned int *)((char *)v11 + v17 + v18);
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 4 * v19;
        long long v22 = (char *)v66 + v17 + v10 + v18;
        do
        {
          uint64_t v23 = *(unsigned int *)&v22[v20 + 8];
          long long v24 = &v22[v20 + v23];
          uint64_t v25 = v23 + *(unsigned __int16 *)&v22[v20 + 12 + v23 - *((int *)v24 + 2)];
          int v26 = &v22[v20 + v25 + *(unsigned int *)&v22[v20 + 8 + v25]];
          std::string::basic_string[abi:ne180100](&__v, v26 + 12, *((unsigned int *)v26 + 2));
          uint64_t v27 = v23 + *(unsigned __int16 *)&v22[v20 + 14 + v23 - *((int *)v24 + 2)];
          std::string::size_type v28 = &v22[v20 + v27 + *(unsigned int *)&v22[v20 + 8 + v27]];
          std::string::basic_string[abi:ne180100](&__v.__end_cap_.__value_, v28 + 12, *((unsigned int *)v28 + 2));
          unint64_t v29 = v72;
          if (v72 >= v73)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v71) >> 4);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0x555555555555555) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v73 - v71) >> 4) > v33) {
              unint64_t v33 = 0x5555555555555556 * ((uint64_t)(v73 - v71) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - v71) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v34 = 0x555555555555555;
            }
            else {
              unint64_t v34 = v33;
            }
            uint64_t v82 = &v73;
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            unint64_t v36 = v34 + 48 * v32;
            *(void *)&long long __dst = v34;
            *((void *)&__dst + 1) = v36;
            unint64_t v81 = v34 + 48 * v35;
            long long v37 = *(_OWORD *)&__v.__first_;
            *(void *)(v36 + 16) = __v.__end_;
            *(_OWORD *)unint64_t v36 = v37;
            memset(&__v, 0, 24);
            std::__compressed_pair<std::string *> end_cap = __v.__end_cap_;
            *(void *)(v36 + 40) = v68;
            *(std::__compressed_pair<std::string *> *)(v36 + 24) = end_cap;
            __v.__end_cap_.__value_ = 0;
            uint64_t v68 = 0;
            __v.__end_cap_.__value_ = 0;
            std::string::size_type v80 = v36 + 48;
            std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v71, &__dst);
            unint64_t v39 = v72;
            std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&__dst);
            unint64_t v72 = v39;
            if (SHIBYTE(v68) < 0) {
              operator delete(__v.__end_cap_.__value_);
            }
          }
          else
          {
            long long v30 = *(_OWORD *)&__v.__first_;
            *(void *)(v72 + 16) = __v.__end_;
            *(_OWORD *)unint64_t v29 = v30;
            memset(&__v, 0, 24);
            uint64_t v31 = v68;
            *(std::__compressed_pair<std::string *> *)(v29 + 24) = __v.__end_cap_;
            *(void *)(v29 + 40) = v31;
            __v.__end_cap_.__value_ = 0;
            uint64_t v68 = 0;
            __v.__end_cap_.__value_ = 0;
            unint64_t v72 = v29 + 48;
          }
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          v20 += 4;
        }
        while (v21 != v20);
      }
      memset(&v70, 0, sizeof(v70));
      std::string v40 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
      std::vector<std::string>::reserve(&v70, *(unsigned int *)((char *)v40 + *v40));
      std::string v41 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
      uint64_t v42 = *v41;
      uint64_t v44 = (unsigned int *)((char *)v41 + v42 + 4);
      uint64_t v43 = *(unsigned int *)((char *)v41 + v42);
      if (v43)
      {
        uint64_t v45 = 4 * v43;
        do
        {
          BOOL v46 = (int *)SSUExample::data_as_utterance((SSUExample *)((char *)v44 + *v44));
          BOOL v47 = (unsigned int *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 4));
          std::string::basic_string[abi:ne180100](&__dst, (char *)v47 + *v47 + 4, *(unsigned int *)((char *)v47 + *v47));
          std::vector<std::string>::pointer end = v70.__end_;
          if (v70.__end_ >= v70.__end_cap_.__value_)
          {
            unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
            unint64_t v51 = v50 + 1;
            if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v51) {
              unint64_t v51 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v52 = v51;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
            if (v52) {
              uint64_t v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v70.__end_cap_, v52);
            }
            else {
              uint64_t v53 = 0;
            }
            uint64_t v54 = v53 + v50;
            __v.__first_ = v53;
            __v.__begin_ = v54;
            __v.__end_cap_.__value_ = &v53[v52];
            long long v55 = __dst;
            v54->__r_.__value_.__r.__words[2] = v80;
            *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
            std::string::size_type v80 = 0;
            long long __dst = 0uLL;
            __v.__end_ = v54 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
            int64_t v56 = v70.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v70.__end_ = v56;
            if (SHIBYTE(v80) < 0) {
              operator delete((void *)__dst);
            }
          }
          else
          {
            long long v49 = __dst;
            v70.__end_->__r_.__value_.__r.__words[2] = v80;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v49;
            v70.__end_ = end + 1;
          }
          ++v44;
          v45 -= 4;
        }
        while (v45);
      }
      if (SHIBYTE(v75) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&__v.__first_ = *(_OWORD *)__p;
        __v.__end_ = v75;
      }
      __v.__end_cap_.__value_ = 0;
      __v.__end_cap_.__value_ = 0;
      uint64_t v68 = 0;
      std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(&__v.__end_cap_.__value_, v71, v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v71) >> 4));
      memset(&v69, 0, sizeof(v69));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, (long long *)v70.__begin_, (long long *)v70.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3));
      unint64_t v57 = v77;
      if (v77 >= v78)
      {
        unint64_t v59 = 0x8E38E38E38E38E39 * ((uint64_t)(v77 - v76) >> 3);
        unint64_t v60 = v59 + 1;
        if (v59 + 1 > 0x38E38E38E38E38ELL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 3) > v60) {
          unint64_t v60 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v61 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v61 = v60;
        }
        uint64_t v82 = &v78;
        if (v61) {
          unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v61);
        }
        else {
          uint64_t v62 = 0;
        }
        *(void *)&long long __dst = v61;
        *((void *)&__dst + 1) = v61 + 72 * v59;
        std::string::size_type v80 = *((void *)&__dst + 1);
        unint64_t v81 = v61 + 72 * v62;
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(*((uint64_t *)&__dst + 1), (long long *)&__v);
        v80 += 72;
        std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(&v76, &__dst);
        unint64_t v58 = v77;
        std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)&__dst);
      }
      else
      {
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v77, (long long *)&__v);
        unint64_t v58 = v57 + 72;
      }
      unint64_t v77 = v58;
      *(void *)&long long __dst = &v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
      *(void *)&long long __dst = &__v.__end_cap_;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v71;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if (SHIBYTE(v75) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v65 + 1;
      uint64_t v7 = (char *)(v66 + 1);
    }
    while (v65 + 1 != v64);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(a4, v76, v77, 0x8E38E38E38E38E39 * ((uint64_t)(v77 - v76) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C8E4AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__split_buffer<std::string> *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)(v33 - 168);
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void *std::vector<snlp::ssu::app::SSUAppIntent>::reserve(void *result, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 72 * v4;
    std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1C8E4AE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = (std::string *)(a1 + 48);
  v3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
}

void sub_1C8E4AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v12;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::app::SSUAppIntent::~SSUAppIntent(void **this)
{
  long long v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = this + 3;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v14 = result;
    unint64_t v15 = a2;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (const std::string::value_type **)(v2 + v5 - 72);
      if (*(char *)(v2 + v5 - 49) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v4 + v5 - 72), *v6, *(void *)(v2 + v5 - 64));
      }
      else
      {
        long long v7 = *(_OWORD *)v6;
        *(void *)(v4 + v5 - 56) = *(void *)(v2 + v5 - 56);
        *(_OWORD *)(v4 + v5 - 72) = v7;
      }
      uint64_t v8 = v4 + v5;
      uint64_t v9 = v4 + v5;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v4 + v5 - 32) = 0;
      std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>((void *)(v4 + v5 - 48), *(void *)(v2 + v5 - 48), *(void *)(v2 + v5 - 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + v5 - 40) - *(void *)(v2 + v5 - 48)) >> 4));
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v10 = (std::string *)(v4 + v5 - 24);
      v10->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v10, *(long long **)(v2 + v5 - 24), *(long long **)(v2 + v5 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + v5 - 16) - *(void *)(v2 + v5 - 24)) >> 3));
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
    BOOL result = v14;
    a2 = v15;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *BOOL result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_1C8E4B080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  while (v12 != v13)
  {
    std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](v12);
    v12 += 72;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::GroupNameTransform(void *a1, _OWORD **a2, uint64_t a3)
{
  uint64_t v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_GroupNameTransform");
  v6[3] = "group_name_transform";
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "smsGroupName");
  std::string::basic_string[abi:ne180100]<0>(a1 + 7, "personFullName");
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(a1 + 10, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getSmsGroupNameSpans((uint64_t)a1, a3, a1 + 13);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getPersonFullNameSpans((uint64_t)a1, a3, a1 + 16);
  return a1;
}

void sub_1C8E4B1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void *std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(void *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x1C71C71C71C71C8) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a4);
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[18 * v7];
    while (a2 != a3)
    {
      uint64_t v8 = (_OWORD *)MEMORY[0x1CB773EE0](result, a2);
      long long v9 = a2[6];
      long long v10 = a2[8];
      v8[7] = a2[7];
      v8[8] = v10;
      v8[6] = v9;
      a2 += 9;
      BOOL result = v8 + 9;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C8E4B31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getSmsGroupNameSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVSmsGroupNameSpan(a1, v5))
    {
      std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5);
    }
    v5 += 11;
  }
  uint64_t v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    int v10 = 136315394;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found %lu smsGroupName matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C8E4B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getPersonFullNameSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVPersonFullNameSpan(a1, v5))
    {
      std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5);
    }
    v5 += 11;
  }
  uint64_t v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    int v10 = 136315394;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found %lu personFullName matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C8E4B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 88;
      uint64_t v7 = v4 - 88;
      uint64_t v8 = v4 - 88;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x1CB773EF0](v4 - 144);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVPersonFullNameSpan(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v2[23];
  }
  else {
    uint64_t v4 = *((void *)v2 + 1);
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 79);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 64);
  }
  if (v4 != v5) {
    return 0;
  }
  BOOL v10 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v8 = (unsigned __int8 *)(a1 + 56);
  uint64_t v9 = v10;
  if (v6 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v2, v11, *((void *)v2 + 1))) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v2[23])
  {
    while (*v2 == *v11)
    {
      ++v2;
      ++v11;
      if (!--v3) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v13 = (_DWORD *)a2[1];
  uint64_t v14 = (_DWORD *)a2[2];
  if (v13 != v14)
  {
    while (*v13 != 2)
    {
      if (++v13 == v14)
      {
        uint64_t v13 = (_DWORD *)a2[2];
        return v13 != v14;
      }
    }
  }
  return v13 != v14;
}

uint64_t std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x2E8BA2E8BA2E8BALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x1745D1745D1745DLL) {
      unint64_t v12 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    unint64_t v15 = v12 + 88 * v9;
    unint64_t v17 = v12 + 88 * v13;
    MEMORY[0x1CB773E00](v15, a2);
    unint64_t v16 = v15 + 88;
    std::vector<sirinluinternal::MatchingSpan>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<sirinluinternal::MatchingSpan>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = MEMORY[0x1CB773E00]();
    uint64_t v8 = result + 88;
  }
  a1[1] = v8;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

uint64_t std::vector<sirinluinternal::MatchingSpan>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 88;
    uint64_t result = MEMORY[0x1CB773DF0](result - 88, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<sirinluinternal::MatchingSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 88);
    *(void *)(a1 + 16) = i - 88;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVSmsGroupNameSpan(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v2[23];
  }
  else {
    uint64_t v4 = *((void *)v2 + 1);
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 55);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 40);
  }
  if (v4 != v5) {
    return 0;
  }
  unint64_t v10 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v8 = (unsigned __int8 *)(a1 + 32);
  uint64_t v9 = v10;
  if (v6 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v2, v11, *((void *)v2 + 1))) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v2[23])
  {
    while (*v2 == *v11)
    {
      ++v2;
      ++v11;
      if (!--v3) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v13 = (_DWORD *)a2[1];
  unint64_t v14 = (_DWORD *)a2[2];
  if (v13 != v14)
  {
    while (*v13 != 2)
    {
      if (++v13 == v14)
      {
        uint64_t v13 = (_DWORD *)a2[2];
        return v13 != v14;
      }
    }
  }
  return v13 != v14;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transform(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  if (*((void *)this + 13) == *((void *)this + 14)) {
    return 0;
  }
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  uint64_t v3 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      uint64_t v5 = v3 - 1;
      int v6 = *(std::string **)(*(void *)(*((void *)&v12[0] + 1)
                                       + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v13 + v5) & 0x1FF));
      *((void *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      BOOL v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transformTreeNode(this, v6, &v10);
      v4 |= v10;
      uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)v6[3].__r_.__value_.__r.__words[2];
      std::string::pointer data = v6[4].__r_.__value_.__l.__data_;
      while (v8 != (nlv4_inference_orchestrator::trees::TreeNode *)data)
      {
        uint64_t v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      uint64_t v3 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    BOOL v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C8E4BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      uint64_t v12 = *(void *)v5;
      BOOL v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          BOOL v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            BOOL v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            BOOL v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            long long v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            long long v22 = (char *)a1[1];
          }
          BOOL v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)BOOL v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    long long v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      uint64_t v27 = operator new(0x1000uLL);
      std::string::size_type v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v55 = (uint64_t *)a1[1];
          int64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            int64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            unint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)unint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          unint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        unint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            unsigned __int8 v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v96);
            __n128 v99 = &v97[8 * (v96 >> 2)];
            unint64_t v100 = (uint64_t *)a1[1];
            unint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              unint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            unint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              unint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            unint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)unint64_t v63 = v64;
      }
      else
      {
        *(void *)BOOL v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v109 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v109;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v106 = v36;
      long long v109 = v38;
      operator delete(v30);
      long long v36 = v106;
    }
    long long v38 = v109;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      unint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        std::string::size_type v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          __n128 v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
          uint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            long long v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            long long v91 = v79;
            unint64_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)long long v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v107 = v36;
            long long v111 = v38;
            operator delete(v78);
            long long v36 = v107;
            long long v38 = v111;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            std::string::size_type v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v108 = *((void *)&v36 + 1);
            uint64_t v110 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v108;
            *(void *)&long long v38 = v110;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    unint64_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1C8E4C178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transformTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, std::string *a2, BOOL *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isCommonPersonOrAgentNode((nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)a2, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))
  {
    uint64_t v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)a2[3].__r_.__value_.__r.__words[2];
    for (uint64_t i = (const nlv4_inference_orchestrator::trees::TreeNode *)a2[4].__r_.__value_.__l.__data_;
          v6 != i;
          uint64_t v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v6 + 144))
    {
      unint64_t v9 = (const sirinluinternal::MatchingSpan *)*((void *)this + 13);
      unint64_t v8 = (const sirinluinternal::MatchingSpan *)*((void *)this + 14);
      while (v9 != v8)
      {
        if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(this, v9, v6))
        {
          BOOL v10 = SNLPOSLoggerForCategory(1);
          BOOL doesCharacterRangeMatch = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
          if (doesCharacterRangeMatch)
          {
            uint64_t v12 = *((void *)this + 3);
            *(_DWORD *)std::string buf = 136315138;
            uint64_t v24 = v12;
            _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] Found an smsGroupName span that matches a common_Person or common_Agent node", buf, 0xCu);
          }
          uint64_t v14 = (const sirinluinternal::MatchingSpan *)*((void *)this + 16);
          uint64_t v13 = (const sirinluinternal::MatchingSpan *)*((void *)this + 17);
          while (v14 != v13)
          {
            BOOL doesCharacterRangeMatch = nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(this, v14, v6);
            if (doesCharacterRangeMatch)
            {
              int64_t v21 = SNLPOSLoggerForCategory(1);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v22 = *((void *)this + 3);
                *(_DWORD *)std::string buf = 136315138;
                uint64_t v24 = v22;
                _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_DEBUG, "[%s] Found a personFullName span that matches a common_Person or common_Agent node, so skipping group_name_transform", buf, 0xCu);
              }
              goto LABEL_21;
            }
            uint64_t v14 = (const sirinluinternal::MatchingSpan *)((char *)v14 + 88);
          }
          uint64_t v15 = siri::ontology::oname::graph::ontology_init::common_Group((siri::ontology::oname::graph::ontology_init *)doesCharacterRangeMatch);
          uint64_t v16 = (const std::string *)(v15 + 8);
          uint64_t v17 = SNLPOSLoggerForCategory(1);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v18 = a2;
            }
            else {
              uint64_t v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
            }
            uint64_t v19 = v15 + 8;
            if (*(char *)(v15 + 31) < 0) {
              uint64_t v19 = v16->__r_.__value_.__r.__words[0];
            }
            uint64_t v20 = *((void *)this + 3);
            *(_DWORD *)std::string buf = 136315650;
            uint64_t v24 = v20;
            __int16 v25 = 2080;
            uint64_t v26 = v18;
            __int16 v27 = 2080;
            uint64_t v28 = v19;
            _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEBUG, "[%s] Replacing the node label \"%s\" with \"%s\"", buf, 0x20u);
          }
          std::string::operator=(a2, v16);
          *a3 = 1;
          break;
        }
        unint64_t v9 = (const sirinluinternal::MatchingSpan *)((char *)v9 + 88);
      }
LABEL_21:
      ;
    }
  }
}

uint64_t std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isCommonPersonOrAgentNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = siri::ontology::oname::graph::ontology_init::common_Person(this);
  uint64_t v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    uint64_t v5 = *((void *)v2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v3 + 16);
  }
  if (v5 == v6)
  {
    uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
    v3 += 8;
    uint64_t v8 = v9;
    if (v7 >= 0) {
      BOOL v10 = (unsigned __int8 *)v3;
    }
    else {
      BOOL v10 = v8;
    }
    if ((v4 & 0x80) != 0)
    {
      uint64_t v3 = memcmp(*(const void **)v2, v10, *((void *)v2 + 1));
      BOOL v19 = v3 == 0;
    }
    else if (*((unsigned char *)v2 + 23))
    {
      uint64_t v11 = v4 - 1;
      uint64_t v12 = v2;
      do
      {
        int v14 = *(unsigned __int8 *)v12;
        uint64_t v12 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)((char *)v12 + 1);
        int v13 = v14;
        int v16 = *v10++;
        int v15 = v16;
        BOOL v17 = v11-- != 0;
        char v18 = v17;
        BOOL v19 = v13 == v15;
      }
      while (v13 == v15 && (v18 & 1) != 0);
    }
    else
    {
      BOOL v19 = 1;
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  uint64_t v20 = siri::ontology::oname::graph::ontology_init::common_Agent((siri::ontology::oname::graph::ontology_init *)v3);
  uint64_t v21 = *((unsigned __int8 *)v2 + 23);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    uint64_t v22 = *((void *)v2 + 1);
  }
  uint64_t v23 = *(unsigned __int8 *)(v20 + 31);
  int v24 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *(void *)(v20 + 16);
  }
  if (v22 == v23)
  {
    __int16 v27 = *(unsigned __int8 **)(v20 + 8);
    __int16 v25 = (unsigned __int8 *)(v20 + 8);
    uint64_t v26 = v27;
    if (v24 >= 0) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = v26;
    }
    if ((v21 & 0x80) != 0)
    {
      BOOL v36 = memcmp(*(const void **)v2, v28, *((void *)v2 + 1)) == 0;
    }
    else if (*((unsigned char *)v2 + 23))
    {
      uint64_t v29 = v21 - 1;
      do
      {
        int v31 = *(unsigned __int8 *)v2;
        uint64_t v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)((char *)v2 + 1);
        int v30 = v31;
        int v33 = *v28++;
        int v32 = v33;
        BOOL v17 = v29-- != 0;
        char v34 = v17;
        BOOL v35 = v30 == v32;
        BOOL v36 = v30 == v32;
      }
      while (v35 && (v34 & 1) != 0);
    }
    else
    {
      BOOL v36 = 1;
    }
  }
  else
  {
    BOOL v36 = 0;
  }
  return v19 | v36;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, const sirinluinternal::MatchingSpan *a2, const nlv4_inference_orchestrator::trees::TreeNode *a3)
{
  unint64_t v3 = *((unsigned int *)a2 + 19);
  uint64_t v4 = *((void *)this + 10);
  unint64_t v5 = 0x8E38E38E38E38E39 * ((*((void *)this + 11) - v4) >> 4);
  if (v5 <= v3 || (unint64_t v6 = (*((_DWORD *)a2 + 18) - 1), v5 <= v6)) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  return *((void *)a3 + 9) == *(void *)(v4 + 144 * v3 + 112)
      && *((void *)a3 + 10) == *(void *)(v4 + 144 * v6 + 120);
}

void snlp::common::text_uso_graph::UsoGraphWithAliases::constUsoGraph(snlp::common::text_uso_graph::UsoGraphWithAliases *this)
{
}

void sub_1C8E4C760(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph const>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1CB774F40]();
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UsoGraphWithAliases::protobufGraph(siri::ontology::UsoGraphProtoWriter **this, const UsoGraph *a2)
{
  return siri::ontology::UsoGraphProtoWriter::toProtobuf(*this, a2);
}

void snlp::common::text_uso_graph::readUsoGraphFromText(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser((uint64_t)&v3, v2, 1, 0);
}

void sub_1C8E4CC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer(&a18);
      snlp::common::text_uso_graph::UsoGraphTextTreeParser::~UsoGraphTextTreeParser((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)(v20 - 248));
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void snlp::common::text_uso_graph::SpacedTextTreeLexer::SpacedTextTreeLexer(snlp::common::text_uso_graph::SpacedTextTreeLexer *this)
{
  *(void *)this = &unk_1F235F428;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 32), "^ *\"(.*)\"");
}

void sub_1C8E4CDC4(_Unwind_Exception *a1)
{
  uint64_t v9 = v5;
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v9);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v7);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v6);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v4);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v3);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v8);
  }
  _Unwind_Resume(a1);
}

void sub_1C8E4CE34()
{
}

void sub_1C8E4CE3C()
{
}

void snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer(std::locale *this)
{
  this->__locale_ = (std::locale::__imp *)&unk_1F235F428;
  uint64_t v2 = this + 52;
  locale = (std::__shared_weak_count *)this[58].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  uint64_t v4 = (std::__shared_weak_count *)this[50].__locale_;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::locale::~locale(this + 44);
  unint64_t v5 = (std::__shared_weak_count *)this[42].__locale_;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::locale::~locale(this + 36);
  unint64_t v6 = (std::__shared_weak_count *)this[34].__locale_;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::locale::~locale(this + 28);
  int v7 = (std::__shared_weak_count *)this[26].__locale_;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::locale::~locale(this + 20);
  uint64_t v8 = (std::__shared_weak_count *)this[18].__locale_;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::locale::~locale(this + 12);
  uint64_t v9 = (std::__shared_weak_count *)this[10].__locale_;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::locale::~locale(this + 4);
  if (SHIBYTE(this[3].__locale_) < 0) {
    operator delete(this[1].__locale_);
  }
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParser::~UsoGraphTextTreeParser(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  *(void *)this = &unk_1F235F498;
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 112);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 72) && *((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)this + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParseError::~UsoGraphTextTreeParseError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

void snlp::common::text_uso_graph::readUserDialogActFromText(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  snlp::common::text_uso_graph::UDATextTreeParser::UDATextTreeParser((uint64_t)v3, v2);
}

void sub_1C8E4D1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer(&a16);
      snlp::common::text_uso_graph::UDATextTreeParser::~UDATextTreeParser((snlp::common::text_uso_graph::UDATextTreeParser *)(v18 - 232));
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = &unk_1F235F498;
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 112);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x1CB775C40);
}

void snlp::common::text_uso_graph::UDATextTreeParser::~UDATextTreeParser(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  *(void *)this = &unk_1F235F3D8;
  uint64_t v2 = (std::locale *)((char *)this + 120);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v5);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 8);
}

void snlp::common::text_uso_graph::UDATextTreeParseError::~UDATextTreeParseError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

void *uaap::TimeHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)DDResultHasType();
  if (result)
  {
    uaap::mapTimeSpansToItemizedUsos(a3);
    return uaap::mapTimeSpanSpansToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapTimeSpansToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"Time");
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t result = *(void **)(v5 + 8 * v6);
        if (result)
        {
          if (result) {
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
  }
  return result;
}

void sub_1C8E4D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  MEMORY[0x1CB775C40](v3, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *uaap::mapTimeSpanSpansToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"TimeSpan");
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t result = *(void **)(v5 + 8 * v6);
        if (result)
        {
          if (result) {
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
  }
  return result;
}

void sub_1C8E4D938(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

void *uaap::TimeHandler::resolveDateTimeQualifierListValue(uaap::TimeHandler *this, uaap::UPDDDateTimeBaseSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t v4 = 0;
  if (!this || !a2 || !a3) {
    return v4;
  }
  uint64_t v6 = *((void *)this + 6);
  if (!v6) {
    return 0;
  }
  uint64_t v4 = *(void **)(v6 + 24);
  if (!v4) {
    return v4;
  }
  siri::ontology::oname::graph::ontology_init::common_DateTime(this);
  int v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
  if (v7)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(v7);
    uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if (v8)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(v8);
      uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if (v9)
      {
        siri::ontology::oname::graph::ontology_init::common_Time(v9);
        BOOL v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if (v10)
        {
          siri::ontology::oname::graph::ontology_init::common_Integer(v10);
          uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
          if (v11)
          {
            siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v11);
            uint64_t v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
            if (v12)
            {
              siri::ontology::oname::graph::ontology_init::common_MonthOfYear(v12);
              int v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
              if (v13)
              {
                siri::ontology::oname::graph::ontology_init::Root(v13);
                if (siri::ontology::operator!=()) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  int v14 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, @"this");
  if (!v14)
  {
    int v15 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, @"last");
    if (v15)
    {
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Previous(v15);
      goto LABEL_20;
    }
    int v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, @"next");
    if (v16)
    {
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Next(v16);
      goto LABEL_20;
    }
    return 0;
  }
  siri::ontology::oname::graph::ontology_init::common_ListPosition_Current(v14);
LABEL_20:
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::common_ListPosition(EntityNode);
  uint64_t v4 = (void *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v4);
  uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
  if (v18)
  {
    siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)v4, *((siri::ontology::UsoEntityNode **)this + 6), v19);
  }
  else
  {
    siri::ontology::oname::graph::ontology_init::Argument_usoListPosition(v18);
    uint64_t v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  }
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 6), v21);
  return v4;
}

void uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(uaap::AbstractDateTimeHandler *this, siri::ontology::UsoEntityNode *a2, uaap::UPDDSpan *a3)
{
  uint64_t v5 = (char *)operator new(8uLL);
  *(void *)uint64_t v5 = a2;
  v6[1] = v5 + 8;
  v6[2] = v5 + 8;
  v6[0] = v5;
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uint64_t)this, v6);
  operator delete(v5);
}

void sub_1C8E4DC58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveRecurringTime(uint64_t a1, uaap::UPDDDateTimeBaseSpan *a2, uint64_t a3, uint64_t a4)
{
  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7
      && (uint64_t v8 = *(void *)(v7 + 48)) != 0
      && (uint64_t v9 = *(const void **)(v8 + 24)) != 0
      && (BOOL v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(@"every", v9), v10)
      && (siri::ontology::oname::graph::ontology_init::Root(v10), uint64_t v11 = siri::ontology::operator!=(), (v11 & 1) == 0)
      && (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v11),
          uint64_t v12 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          uaap::TimeHandler::resolveDateTimeRangeValue(*(uaap::TimeHandler **)(a1 + 120), a2, v12, v13)))
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v12, (siri::ontology::UsoEntityNode *)a1, v14);
      siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(v15);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(EntityNode);
      int v16 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v18 = *(void *)(a1 + 48);
      if (v18 && *(void *)(v18 + 24)) {
        int v16 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeQualifierListValue((uaap::TimeHandler *)a1, a2, v12, v17);
      }
      uint64_t v19 = siri::ontology::oname::graph::ontology_init::Argument_time(v16);
      uaap::TimeHandler::resolveTime((uaap::TimeHandler *)a1, a2, (uint64_t)v12, v19);
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v20);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveTimeWithDateTimeRange(siri::ontology::UsoEntityNode *a1, uaap::UPDDDateTimeBaseSpan *a2, uint64_t a3, uint64_t a4)
{
  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v7 = *((void *)a1 + 15);
    if (v7
      && *(void *)(v7 + 96)
      && (siri::ontology::oname::graph::ontology_init::Root(a1), uint64_t v8 = siri::ontology::operator!=(), (v8 & 1) == 0)
      && (uint64_t v9 = (uaap::TimeHandler *)*((void *)a1 + 15),
          siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v8),
          EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          (uint64_t v11 = uaap::TimeHandler::resolveDateTimeRangeValue(v9, a2, EntityNode, v10)) != 0))
    {
      int v13 = v11;
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v12);
      uint64_t v16 = *((void *)v9 + 6);
      if (v16 && *(void *)(v16 + 24)) {
        int v14 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v9, a2, v13, v15);
      }
      uint64_t v17 = siri::ontology::oname::graph::ontology_init::Argument_time(v14);
      uaap::TimeHandler::resolveTime(a1, a2, (uint64_t)EntityNode, v17);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveTime(uaap::TimeHandler *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    return EntityNode;
  }
  uint64_t v6 = a1;
  if (!*((void *)a1 + 7) && !*((void *)a1 + 8) && !*((void *)a1 + 10))
  {
    if (!*((void *)a1 + 12)) {
      return 0;
    }
LABEL_10:
    siri::ontology::oname::graph::ontology_init::common_Time(a1);
    EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::TimeHandler::resolveDateTimeRangeValue(v6, a2, EntityNode, v9);
    goto LABEL_11;
  }
  a1 = (uaap::TimeHandler *)uaap::TimeHandler::resolveTimeAndMeridian((siri::ontology::UsoEntityNode **)a1, (uint64_t)a2, a3, a4);
  EntityNode = a1;
  if (!*((void *)v6 + 12))
  {
    if (!a1) {
      return EntityNode;
    }
    goto LABEL_13;
  }
  if (!a1) {
    goto LABEL_10;
  }
LABEL_11:
  uaap::TimeHandler::resolveSpecialTimePeriod(v6, a2, EntityNode, v8);
LABEL_13:
  if (*((void *)EntityNode + 7) == *((void *)EntityNode + 8)) {
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v6, v7);
  }
  uint64_t v10 = *((void *)v6 + 6);
  if (v10 && *(void *)(v10 + 24)) {
    uaap::TimeHandler::resolveDateTimeQualifierListValue(v6, a2, EntityNode, v8);
  }
  return EntityNode;
}

uint64_t uaap::mapNowAndTimeOffsetToItemizedUsos(uint64_t result)
{
  if (*(void *)(result + 112)) {
    operator new();
  }
  if (*(void *)(result + 104)) {
    operator new();
  }
  return result;
}

void sub_1C8E4E1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t uaap::mapMinutesBeforeToItemizedUsos(uint64_t result)
{
  if (*(void *)(result + 72)) {
    operator new();
  }
  return result;
}

void sub_1C8E4E33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeOffsetGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetDurationValueGraph(siri::ontology::UsoGraph *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = *((void *)a2 + 11);
    uint64_t v5 = (CFTypeRef *)*((void *)this + 9);
    if (!v5)
    {
      if (!*((void *)this + 14)) {
        return this;
      }
      uint64_t v5 = (CFTypeRef *)*((void *)this + 13);
    }
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveOffsetDurationValue(v5, a2, v4, v6);
  }
  return this;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetDurationValue(CFTypeRef *a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], @"MinutesBefore");
    if (v7
      || (uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], @"TimeOffset"), v7)
      || (uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], @"TimeSpan"), v7))
    {
      siri::ontology::oname::graph::ontology_init::Root(v7);
      uint64_t v8 = siri::ontology::operator!=();
      if (!v8
        || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v8),
            uint64_t v8 = siri::ontology::operator!=(),
            (v8 & 1) == 0))
      {
        siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v8);
        EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
        if (CFEqual(a1[1], @"MinutesBefore"))
        {
          uaap::TimeSpanHandler::resolveMinutesBeforeTimeSpanWithUnit(a1, a2, EntityNode, v9);
LABEL_16:
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v10);
          siri::ontology::UsoGraphNode::setSuccessor();
          return EntityNode;
        }
        if (CFEqual(a1[1], @"TimeOffset") || CFEqual(a1[1], @"TimeSpan"))
        {
          if (v11)
          {
            uaap::TimeSpanHandler::resolveTimeSpanWithUnit(v11, a2, EntityNode, v12);
            goto LABEL_16;
          }
        }
      }
    }
    return 0;
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*((void *)a1 + 9) && !*((void *)a1 + 14) && !*((void *)a1 + 13)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
    uint64_t v4 = (siri::ontology::UsoGraph *)EntityNode;
    uint64_t v10 = (void *)*((void *)a1 + 13);
    if (v10
      && (uint64_t v11 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue((siri::ontology::oname::graph::ontology_init *)EntityNode),
          (uint64_t EntityNode = (uint64_t)uaap::TimeHandler::resolveOffsetDurationValue((CFTypeRef *)v10, a2, (uint64_t)v4, v11)) != 0))
    {
      char v12 = 0;
      LODWORD(v13) = 1;
    }
    else
    {
      int v13 = (CFTypeRef *)*((void *)a1 + 9);
      if (v13)
      {
        uint64_t v14 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue((siri::ontology::oname::graph::ontology_init *)EntityNode);
        uint64_t EntityNode = (uint64_t)uaap::TimeHandler::resolveOffsetDurationValue(v13, a2, (uint64_t)v4, v14);
        LODWORD(v13) = EntityNode != 0;
      }
      char v12 = 1;
      if (!v10)
      {
LABEL_19:
        if (*((void *)a1 + 9))
        {
LABEL_20:
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before((siri::ontology::oname::graph::ontology_init *)EntityNode);
          goto LABEL_31;
        }
        if (v10)
        {
          uint64_t EntityNode = CFEqual(v10, @"after");
          if (EntityNode)
          {
LABEL_30:
            siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After((siri::ontology::oname::graph::ontology_init *)EntityNode);
LABEL_31:
            uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v18);
            uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_direction(v19);
            uint64_t v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
            siri::ontology::UsoGraphNode::setSuccessor();
            uint64_t v23 = (siri::ontology::UsoEntityNode *)*((void *)a1 + 9);
            if (v23
              || (v25 = *((void *)a1 + 13)) != 0 && (uint64_t v23 = *(siri::ontology::UsoEntityNode **)(v25 + 48)) != 0)
            {
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v18, v23, v21);
            }
            uaap::TimeHandler::resolveOffsetReference((CFTypeRef **)a1, a2, v4, v22);
            goto LABEL_34;
          }
          uint64_t EntityNode = CFEqual(v10, @"before");
          if (EntityNode) {
            goto LABEL_20;
          }
        }
        if (v12)
        {
          if (uaap::TimeHandler::resolveOffsetReference((CFTypeRef **)a1, a2, v4, v9)) {
            int v17 = 1;
          }
          else {
            int v17 = (int)v13;
          }
          if (v17 != 1) {
            return 0;
          }
LABEL_34:
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v16);
          siri::ontology::UsoGraphNode::setSuccessor();
          return v4;
        }
        goto LABEL_30;
      }
    }
    uint64_t v15 = v10[6];
    if (v15) {
      uint64_t v10 = *(void **)(v15 + 24);
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_19;
  }
  return v4;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetReference(CFTypeRef **this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t EntityNode = 0;
  if (this && a2 && a3)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
    uint64_t v7 = siri::ontology::operator!=();
    if ((v7 & 1) == 0
      && ((siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
           uint64_t EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode(),
           (uint64_t v9 = this[14]) == 0)
        ? (BOOL v10 = 0)
        : (uint64_t v9 = (CFTypeRef *)uaap::TimeHandler::resolveNow(v9, a2, EntityNode, v8), v10 = v9 != 0),
          (uint64_t v11 = siri::ontology::oname::graph::ontology_init::Argument_time((siri::ontology::oname::graph::ontology_init *)v9),
           (char v12 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveTimeAndMeridian((siri::ontology::UsoEntityNode **)this, (uint64_t)a2, (uint64_t)EntityNode, v11)) != 0)|| v10))
    {
      siri::ontology::oname::graph::ontology_init::Argument_offsetReference(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveNow(CFTypeRef *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t v4 = 0;
  if (this && a2 && a3)
  {
    uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(this[1], @"Now");
    if (!v6) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::Root(v6);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7
      && (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
          uint64_t v7 = siri::ontology::operator!=(),
          (v7 & 1) != 0))
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
      if (v8)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTime(v8);
        uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)this, v10);
        siri::ontology::oname::graph::ontology_init::Argument_entity(v11);
        uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      siri::ontology::oname::graph::ontology_init::common_DateTime_Now(v8);
      uint64_t v4 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, (siri::ontology::UsoEntityNode *)this, v12);
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v13);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return v4;
}

uint64_t uaap::TimeHandler::resolveTimeAndMeridian(siri::ontology::UsoEntityNode **Length, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (!Length || !a2 || !a3 || !a4) {
    return EntityNode;
  }
  uint64_t v6 = Length;
  uint64_t v7 = Length[7];
  if ((!v7 || (Length = (siri::ontology::UsoEntityNode **)CFStringGetLength(*((CFStringRef *)v7 + 3))) == 0)
    && !v6[8]
    && !v6[10])
  {
    return 0;
  }
  uint64_t v8 = v6[7];
  if (v8 && (Length = (siri::ontology::UsoEntityNode **)CFStringGetLength(*((CFStringRef *)v8 + 3))) != 0)
  {
    Length = (siri::ontology::UsoEntityNode **)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[7] + 3), v9);
    uint64_t v10 = (uint64_t)Length;
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFLL;
  }
  stat __p = 0;
  int64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v11 = v6[11];
  if (!v11)
  {
    if (v10 && (v10 - 13) > 0xB)
    {
      siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)Length);
      uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_Time24HourClock((siri::ontology::oname::graph::ontology_init *)Length);
      uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    char v12 = 0;
    int v13 = 0;
    goto LABEL_24;
  }
  char v12 = (char *)operator new(8uLL);
  *(void *)char v12 = v11;
  int v13 = v12 + 8;
  int64_t v56 = v12 + 8;
  uint64_t v57 = v12 + 8;
  stat __p = v12;
  siri::ontology::oname::graph::ontology_init::common_Time12HourClock((siri::ontology::oname::graph::ontology_init *)v12);
  uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  uint64_t v14 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6[11] + 3), @"am");
  if (v14)
  {
    siri::ontology::oname::graph::ontology_init::common_Meridiem_AM(v14);
  }
  else
  {
    uint64_t v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6[11] + 3), @"pm");
    if (!v16) {
      goto LABEL_24;
    }
    siri::ontology::oname::graph::ontology_init::common_Meridiem_PM(v16);
  }
  int v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::common_Meridiem(v17);
  uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_meridiem(v18);
  uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v19);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v17, v6[11], v20);
LABEL_24:
  uint64_t v21 = v6[7];
  if (v21 && CFStringGetLength(*((CFStringRef *)v21 + 3)))
  {
    uint64_t v22 = v13 - v12;
    uint64_t v23 = (v13 - v12) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v6[7];
    if (v22 >> 2 > v24) {
      unint64_t v24 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26) {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    int v30 = (siri::ontology::UsoEntityNode **)(v26 + 8 * v23);
    unint64_t v28 = v26 + 8 * v27;
    *int v30 = v25;
    uint64_t v29 = (char *)(v30 + 1);
    if (v13 == v12)
    {
      int v32 = v12;
    }
    else
    {
      do
      {
        int v31 = (siri::ontology::UsoEntityNode *)*((void *)v13 - 1);
        v13 -= 8;
        *--int v30 = v31;
      }
      while (v13 != v12);
      int v32 = __p;
    }
    char v12 = (char *)v30;
    stat __p = v30;
    uint64_t v57 = (char *)v28;
    if (v32) {
      operator delete(v32);
    }
    int64_t v56 = v29;
    uint64_t v33 = siri::ontology::oname::graph::ontology_init::Argument_hour((siri::ontology::oname::graph::ontology_init *)v32);
    uaap::TimeHandler::_buildTimeWithUnit((siri::ontology::oname::graph::ontology_init *)v10, v33, a2, EntityNode, v6[7]);
  }
  else
  {
    unint64_t v28 = (unint64_t)v13;
    uint64_t v29 = v13;
  }
  char v34 = v6[8];
  if (v34)
  {
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v36 = (v29 - v12) >> 3;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v28 - (void)v12) >> 2 > v37) {
        unint64_t v37 = (uint64_t)(v28 - (void)v12) >> 2;
      }
      if (v28 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v38);
      }
      else {
        CFStringRef v15 = 0;
      }
      uint64_t v39 = (char *)(v38 + 8 * v36);
      *(void *)uint64_t v39 = v34;
      BOOL v35 = v39 + 8;
      if (v29 != v12)
      {
        do
        {
          uint64_t v40 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v29 != v12);
        char v12 = (char *)__p;
      }
      stat __p = v39;
      uint64_t v57 = (char *)(v38 + 8 * (void)v15);
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)uint64_t v29 = v34;
      BOOL v35 = v29 + 8;
    }
    int64_t v56 = v35;
    IntValueFromCFStringRef = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[8] + 3), v15);
    uint64_t v42 = siri::ontology::oname::graph::ontology_init::Argument_minute(IntValueFromCFStringRef);
    uaap::TimeHandler::_buildTimeWithUnit(IntValueFromCFStringRef, v42, a2, EntityNode, v6[8]);
  }
  else
  {
    BOOL v35 = v29;
  }
  uint64_t v43 = v6[10];
  if (v43)
  {
    if (v35 >= v57)
    {
      uint64_t v45 = (char *)__p;
      uint64_t v46 = (v35 - (unsigned char *)__p) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = v57 - (unsigned char *)__p;
      if ((v57 - (unsigned char *)__p) >> 2 > v47) {
        unint64_t v47 = v48 >> 2;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49) {
        unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v49);
      }
      else {
        CFStringRef v15 = 0;
      }
      unint64_t v50 = (siri::ontology::UsoEntityNode **)(v49 + 8 * v46);
      char *v50 = v43;
      uint64_t v44 = (char *)(v50 + 1);
      if (v35 != v45)
      {
        do
        {
          unint64_t v51 = (siri::ontology::UsoEntityNode *)*((void *)v35 - 1);
          v35 -= 8;
          *--unint64_t v50 = v51;
        }
        while (v35 != v45);
        BOOL v35 = (char *)__p;
      }
      stat __p = v50;
      uint64_t v57 = (char *)(v49 + 8 * (void)v15);
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)BOOL v35 = v43;
      uint64_t v44 = v35 + 8;
    }
    int64_t v56 = v44;
    uint64_t v52 = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[10] + 3), v15);
    uint64_t v53 = siri::ontology::oname::graph::ontology_init::Argument_second(v52);
    uaap::TimeHandler::_buildTimeWithUnit(v52, v53, a2, EntityNode, v6[10]);
  }
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (char **)&__p);
  if (__p) {
    operator delete(__p);
  }
  return EntityNode;
}

void sub_1C8E4EEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t uaap::TimeHandler::_buildTimeWithUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  siri::ontology::oname::graph::ontology_init::common_Time24HourClock(a1);
  uint64_t v6 = siri::ontology::operator!=();
  if (v6)
  {
    siri::ontology::oname::graph::ontology_init::common_Time12HourClock((siri::ontology::oname::graph::ontology_init *)v6);
    uint64_t v6 = siri::ontology::operator!=();
    if (v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)v6);
      uint64_t v6 = siri::ontology::operator!=();
      if (v6) {
        return 0;
      }
    }
  }
  siri::ontology::oname::graph::ontology_init::Argument_hour((siri::ontology::oname::graph::ontology_init *)v6);
  uint64_t v7 = siri::ontology::operator!=();
  if (v7)
  {
    siri::ontology::oname::graph::ontology_init::Argument_minute((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7)
    {
      siri::ontology::oname::graph::ontology_init::Argument_second((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t v7 = siri::ontology::operator!=();
      if (v7) {
        return 0;
      }
    }
  }
  siri::ontology::oname::graph::ontology_init::common_Integer((siri::ontology::oname::graph::ontology_init *)v7);
  uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a5, v10);
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveDateTimeRangeValue(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t v4 = 0;
  if (this && a2 && a3)
  {
    if (!*((void *)this + 12)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_Time(this);
    uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if (v6)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime(v6);
      if (siri::ontology::operator!=()) {
        return 0;
      }
    }
    if (!uaap::TimeHandler::getSpecialTimeDefinedValue((uint64_t)this))
    {
      return 0;
    }
    else
    {
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(EntityNode);
      uint64_t v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_occurringIn(v4);
      uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v8);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 12), v9);
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveSpecialTimePeriod(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t EntityNode = 0;
  if (this && a2 && a3)
  {
    if (!*((void *)this + 12)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_Time(this);
    if (siri::ontology::operator!=()) {
      return 0;
    }
    uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)this + 12) + 24), @"midnight");
    if (v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Time_Midnight(v6);
    }
    else
    {
      uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)this + 12) + 24), @"noon");
      if (!v7) {
        return 0;
      }
      siri::ontology::oname::graph::ontology_init::common_Time_Noon(v7);
    }
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(EntityNode);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 12), v8);
  }
  return EntityNode;
}

uint64_t uaap::TimeHandler::getSpecialTimeDefinedValue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 24);
  if (!v2) {
    return 0;
  }
  if (CFEqual(*(CFTypeRef *)(v1 + 24), @"afternoon"))
  {
    return MEMORY[0x1F4157C88]();
  }
  if (CFEqual(v2, @"breakfast"))
  {
    return MEMORY[0x1F4157D20]();
  }
  if (CFEqual(v2, @"brunch"))
  {
    return MEMORY[0x1F4157CC0]();
  }
  if (CFEqual(v2, @"dinner"))
  {
    return MEMORY[0x1F4157CC8]();
  }
  if (CFEqual(v2, @"evening"))
  {
    return MEMORY[0x1F4157C08]();
  }
  if (CFEqual(v2, @"lunch"))
  {
    return MEMORY[0x1F4157C90]();
  }
  if (CFEqual(v2, @"morning"))
  {
    return MEMORY[0x1F4157C10]();
  }
  if (!CFEqual(v2, @"night")) {
    return 0;
  }
  return MEMORY[0x1F4157B38]();
}

void uaap::TimeHandler::~TimeHandler(uaap::TimeHandler *this)
{
}

uint64_t uaap::TimeHandler::resolveDateTimeRangeQualifierValue(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange((siri::ontology::oname::graph::ontology_init *)a1);
    if (siri::ontology::operator!=()) {
      return 0;
    }
    uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], @"restof");
    if (v6 || (uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], @"late"), v6))
    {
      siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_RestOf(v6);
    }
    else
    {
      uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], @"early");
      if (v11)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_EarlierPartOf(v11);
      }
      else
      {
        char v12 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], @"middle");
        if (v12)
        {
          siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_MiddleOf(v12);
        }
        else
        {
          int v13 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], @"beginning");
          if (!v13) {
            return 0;
          }
          siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_StartOf(v13);
        }
      }
    }
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(EntityNode);
    uint64_t v4 = siri::ontology::UsoGraph::createEntityNode();
    uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(v8);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v9);
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t v7 = siri::ontology::operator!=();
      if (v7) {
        return 0;
      }
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v8 = siri::ontology::oname::graph::ontology_init::Argument_time(EntityNode);
    CFStringRef v9 = uaap::TimeHandler::resolveTime(a1, a2, (uint64_t)EntityNode, v8);
    uint64_t v11 = uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, EntityNode, v10);
    int v13 = uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, EntityNode, v12);
    if (v9 || v11 || v13) {
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveNowGraph(uaap::AbstractDateTimeHandler *this, siri::ontology::UsoGraph **a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this)
  {
    this = (uaap::AbstractDateTimeHandler *)*((void *)this + 14);
    if (this) {
      return uaap::TimeHandler::resolveNow((CFTypeRef *)this, (uaap::UPDDSpan *)a2, a2[11], a4);
    }
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTime(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveRecurringTimeGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveRecurringTime(v4, a2, v5, v6);
  }
  return this;
}

uaap::TimeHandler *uaap::TimeHandler::resolveDateTimeQualifierListValueGraph(uaap::TimeHandler *this, siri::ontology::UsoGraph **a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this) {
    return (uaap::TimeHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(this, (uaap::UPDDDateTimeBaseSpan *)a2, a2[11], a4);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::resolveTimeGraphWithDateTimeRange(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTimeWithDateTimeRange(v4, a2, v5, v6);
  }
  return this;
}

void *uaap::TimeHandler::mapTimeToItemizedUsos(uint64_t a1)
{
  uaap::mapTimeSpansToItemizedUsos(a1);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1);
}

uint64_t std::default_delete<snlp::common::asset_logger::SNLPAssetLogger>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*(void **)(result + 80));
    if (*(unsigned char *)(v1 + 64) && *(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    MEMORY[0x1CB7740A0](v1 + 8);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void sub_1C8E4FD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    sirinluinternalitfm::ITFMParserResponse::operator=();
  }
  else
  {
    MEMORY[0x1CB773F80](a1);
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_1C8E50C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned __int8 a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 233) < 0) {
    operator delete(*(void **)(v54 - 256));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, a29);
  if (a36 < 0) {
    operator delete(a31);
  }
  std::ifstream::~ifstream(&a49);

  if (a24 < 0) {
    operator delete(a19);
  }
  MEMORY[0x1CB7740A0](&a25);
  _Unwind_Resume(a1);
}

void *nlohmann::operator>>(void *a1, unsigned __int8 *a2)
{
  v8[19] = *(void **)MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  v6[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v7, (uint64_t)v5, v6);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v7, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v5);
  return a1;
}

void sub_1C8E50F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(v2 + 40));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(char a1, uint64_t a2)
{
  if (a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 207, (uint64_t)v4);
  }
  return a2 + 32;
}

void sub_1C8E50FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(unsigned char *result, int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *v2;
      if (v5 > 9) {
        uint64_t v6 = "number";
      }
      else {
        uint64_t v6 = off_1E6580268[v5];
      }
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      uint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C8E51140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v29 = v7;
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
      uint64_t v7 = v29;
    }
  }
  int v16 = (void *)(a1 + 16);
  int v17 = (char *)operator new(0x48uLL);
  v30[0] = v17;
  v30[1] = a1 + 16;
  char v31 = 0;
  *(void *)int v17 = 0;
  *((void *)v17 + 1) = v9;
  uint64_t v18 = (std::string *)(v17 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v17 + 4) = *(void *)(a3 + 16);
  }
  v17[40] = 0;
  *((_DWORD *)v17 + 16) = -1;
  uint64_t v19 = *(unsigned int *)(a3 + 48);
  if (v19 != -1)
  {
    ((void (*)(char *))off_1F2362620[v19])(&v32);
    *((_DWORD *)v17 + 16) = v19;
  }
  char v31 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)int v17 = *v27;
LABEL_44:
    *uint64_t v27 = v17;
    goto LABEL_45;
  }
  *(void *)int v17 = *v16;
  *int v16 = v17;
  *(void *)(v26 + 8 * v3) = v16;
  if (*(void *)v17)
  {
    unint64_t v28 = *(void *)(*(void *)v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  v30[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
}

void sub_1C8E51454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(unsigned char *result, unsigned int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unsigned int v3 = result[8];
      break;
    case 5:
    case 6:
      unsigned int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      unsigned int v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *v2;
      if (v5 > 9) {
        uint64_t v6 = "number";
      }
      else {
        uint64_t v6 = off_1E6580268[v5];
      }
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      uint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C8E515C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(uint64_t *result, float *a2)
{
  uint64_t v2 = result;
  switch(*(unsigned char *)result)
  {
    case 4:
      float v3 = 0.0;
      if (*((unsigned char *)result + 8)) {
        float v3 = 1.0;
      }
      break;
    case 5:
      float v3 = (float)result[1];
      break;
    case 6:
      float v3 = (float)(unint64_t)result[1];
      break;
    case 7:
      float v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *(unsigned __int8 *)v2;
      if (v5 > 9) {
        uint64_t v6 = "number";
      }
      else {
        uint64_t v6 = off_1E6580268[v5];
      }
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      uint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C8E51774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(unsigned __int8 *result, unsigned char *a2)
{
  uint64_t v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v4 = *v2;
    if (v4 > 9) {
      unint64_t v5 = "number";
    }
    else {
      unint64_t v5 = off_1E6580268[v4];
    }
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0, "type must be BOOLean, but is ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v9);
  }
  *a2 = result[8];
  return result;
}

void sub_1C8E518C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = 4;
  return this;
}

void sub_1C8E519AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(uint64_t a1, unsigned __int8 *a2, long long **a3, void *a4)
{
  long long v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      BOOL v35 = a4;
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
      a4 = v35;
    }
  }
  uint64_t v18 = (void *)(a1 + 16);
  uint64_t v19 = (char *)operator new(0x48uLL);
  float v20 = v19;
  v36[0] = v19;
  v36[1] = a1 + 16;
  char v37 = 0;
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = v11;
  float v21 = *a3;
  int v22 = (long long *)*a4;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v19 + 16), *(const std::string::value_type **)v21, *((void *)v21 + 1));
  }
  else
  {
    long long v23 = *v21;
    *((void *)v19 + 4) = *((void *)v21 + 2);
    *((_OWORD *)v19 + 1) = v23;
  }
  unint64_t v24 = (std::string *)(v20 + 40);
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v22, *((void *)v22 + 1));
  }
  else
  {
    long long v25 = *v22;
    *((void *)v20 + 7) = *((void *)v22 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  *((_DWORD *)v20 + 16) = 4;
  char v37 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v31);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v4);
  if (v33)
  {
    *(void *)float v20 = *v33;
LABEL_45:
    *uint64_t v33 = v20;
    goto LABEL_46;
  }
  *(void *)float v20 = *v18;
  *uint64_t v18 = v20;
  *(void *)(v32 + 8 * v4) = v18;
  if (*(void *)v20)
  {
    unint64_t v34 = *(void *)(*(void *)v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v34 >= v12) {
        v34 %= v12;
      }
    }
    else
    {
      v34 &= v12 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_45;
  }
LABEL_46:
  v36[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
}

void sub_1C8E51C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 + 39) < 0) {
    operator delete(*v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_1C8E51F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E5204C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1)
{
  float result = *a1;
  *a1 = 0;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void sub_1C8E521AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);

  _Unwind_Resume(a1);
}

void sub_1C8E52CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t *a19, void *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  MEMORY[0x1CB775C40](v76, 0x10F3C406283AB8ALL);
  if (a27 < 0) {
    operator delete(__p);
  }

  if (a43 < 0) {
    operator delete(a38);
  }

  if (a49 < 0) {
    operator delete(a44);
  }

  if (a55 < 0) {
    operator delete(a50);
  }

  if (a61 < 0) {
    operator delete(a56);
  }

  MEMORY[0x1CB7740A0](&a62);
  if (a2 == 1)
  {
    std::string::size_type v80 = __cxa_begin_catch(a1);
    uint64_t v81 = NSString;
    uint64_t v82 = [a20 loggingComponentString];
    uint64_t v89 = [a20 loggingComponentString];
    (*(void (**)(void *))(*(void *)v80 + 16))(v80);
    uint64_t v83 = [v81 stringWithFormat:@"%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"];

    if (a16)
    {
      uint64_t v84 = (void *)MEMORY[0x1E4F28C58];
      unint64_t v85 = [a20 errorDomain];
      uint64_t v86 = *MEMORY[0x1E4F28588];
      a66 = *MEMORY[0x1E4F28568];
      a67 = v86;
      a68 = v83;
      a69 = v83;
      uint64_t v87 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v79 - 224 forKeys:v79 - 240 count:2];
      *a16 = [v84 errorWithDomain:v85 code:1 userInfo:v87];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8E52CB0);
  }
  uint64_t v88 = *a19;
  *a19 = 0;
  if (v88) {
    (*(void (**)(uint64_t))(*(void *)v88 + 16))(v88);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E5351C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E535D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::forward(snlp::common::espresso_inference::pre_e5ml::EspressoModule *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v30 = 0;
  size_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v30, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v33, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 80, (uint64_t)&v30);
  unint64_t v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v24, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  float v27 = 0;
  BOOL v28 = 0;
  uint64_t v29 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v27, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 104, (uint64_t)&v24);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v18, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  float v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 128, (uint64_t)&v18);
  unint64_t v12 = 0;
  uint8x8_t v13 = 0;
  uint64_t v14 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v12, *(const void **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
  stat __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 152, (uint64_t)&v12);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(a1);
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  itfm_inference_orchestrator::inference_engine::ITFMModule::getITFMOutput(&v8);
  uint64_t v6 = v9;
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = v11;
  *(_OWORD *)(a3 + 24) = v10;
  *(void *)(a3 + 40) = v7;
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    uint8x8_t v13 = v12;
    operator delete(v12);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (v27)
  {
    BOOL v28 = v27;
    operator delete(v27);
  }
  if (v24)
  {
    long long v25 = v24;
    operator delete(v24);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  if (v30)
  {
    size_t v31 = v30;
    operator delete(v30);
  }
}

void sub_1C8E5381C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v28);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a27);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v29 - 96));
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::getITFMOutput(void *a1@<X8>)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput((uint64_t)&v3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, v3, (uint64_t)v4, (v4 - (unsigned char *)v3) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 3, __p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    uint64_t v4 = v3;
    operator delete(v3);
  }
}

void sub_1C8E53968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setEmbeddingInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 80, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setSpansFeaturesInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 104, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setContextFeaturesInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 128, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setMaskInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 152, a2);
}

void *uaap::DateSpanHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a3);
  }
  return result;
}

void *uaap::DateSpanHandler::mapDateSpanToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"DateSpan");
  float result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        float result = *(void **)(v5 + 8 * v6);
        if (result)
        {
          if (result)
          {
            uint64_t v7 = result;
            if (uaap::DateSpanHandler::isRecurringDate((uint64_t)result)) {
              operator new();
            }
            uint64_t v8 = v7[16];
            if (v8 && *(void *)(v8 + 48)) {
              operator new();
            }
            if (v7[10])
            {
              if (v7[16]) {
                operator new();
              }
            }
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
  }
  return result;
}

void sub_1C8E53DE8(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

uint64_t uaap::DateSpanHandler::isRecurringDate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 48);
    if (v2)
    {
      float v3 = *(const void **)(v2 + 24);
      if (v3)
      {
        if (CFEqual(@"every", v3)) {
          return 1;
        }
      }
    }
    uint64_t v4 = *(void *)(v1 + 128);
    if (v4 && (uint64_t v5 = *(const void **)(v4 + 96)) != 0)
    {
      if (CFEqual(@"every", v5)) {
        return 1;
      }
      return CFEqual(@"potentialEvery", *(CFTypeRef *)(*(void *)(v1 + 128) + 96)) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveRecurringDateSpan(siri::ontology::oname::graph::ontology_init *a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a2 && a1 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v8 = siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(EntityNode);
    uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)uaap::DateHandler::resolveDurationValueAndUnit(a1, a2, (uint64_t)EntityNode, v8);
    siri::ontology::oname::graph::ontology_init::common_DateTime(v9);
    long long v10 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    unint64_t v12 = uaap::DateHandler::resolveDateTimeRangeValue(a1, a2, v10, v11);
    if (v12)
    {
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v15 = *((void *)a1 + 6);
      if (v15 && *(void *)(v15 + 24)) {
        uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, v10, v14);
      }
    }
    else if (!v9)
    {
      return 0;
    }
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v13);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateSpanHandler::resolveDateSpan(siri::ontology::oname::graph::ontology_init *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    return EntityNode;
  }
  siri::ontology::oname::graph::ontology_init::common_Date(a1);
  uint64_t EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
  uint64_t v10 = *((void *)a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 48);
    BOOL v12 = *(void *)(v10 + 88) != 0;
    if (v11)
    {
      BOOL v13 = CFEqual(*(CFTypeRef *)(v11 + 24), @"week") != 0;
      BOOL v23 = CFEqual(*(CFTypeRef *)(*(void *)(*((void *)a1 + 16) + 48) + 24), @"year") != 0;
      goto LABEL_11;
    }
    BOOL v13 = 0;
  }
  else
  {
    BOOL v13 = 0;
    BOOL v12 = 0;
  }
  BOOL v23 = 0;
LABEL_11:
  uint64_t v14 = uaap::DateSpanHandler::resolveDateSpanMonthOfYear((__CFString *)a1, a2, EntityNode, v9);
  uint64_t v17 = v14;
  BOOL v18 = v14 != 0;
  uint64_t v19 = *((void *)a1 + 6);
  if (!v19)
  {
    if (!v12) {
      goto LABEL_27;
    }
LABEL_18:
    if (v13)
    {
      siri::ontology::oname::graph::ontology_init::common_Integer(v14);
      uint64_t v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_weekOfYear(v17);
      uint64_t v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      BOOL v18 = 1;
    }
    if (v23)
    {
      siri::ontology::oname::graph::ontology_init::common_Integer(v14);
      uint64_t v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_year(v17);
      siri::ontology::UsoGraphNode::setSuccessor();
      BOOL v18 = 1;
    }
    else if (!v17)
    {
LABEL_24:
      if (!uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, (uaap::UPDDDateTimeBaseSpan *)a2, EntityNode, v16)
        && !uaap::DateSpanHandler::resolveDateSpanWithOrdinalCount(a1, a2, v17, v16))
      {
        goto LABEL_27;
      }
LABEL_26:
      BOOL v18 = 1;
      goto LABEL_27;
    }
    if (uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, (uaap::UPDDDateTimeBaseSpan *)a2, v17, v16)) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if (*(void *)(v19 + 24)) {
    char v20 = 1;
  }
  else {
    char v20 = v12;
  }
  if (v20) {
    goto LABEL_18;
  }
LABEL_27:
  if (v10)
  {
    if (uaap::DateHandler::resolveDateTimeRangeValue(a1, (uaap::UPDDDateSpan *)a2, EntityNode, v16)) {
      char v21 = 1;
    }
    else {
      char v21 = v18;
    }
    if (v21) {
      goto LABEL_32;
    }
  }
  else if (v18)
  {
LABEL_32:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v15);
    siri::ontology::UsoGraphNode::setSuccessor();
    return EntityNode;
  }
  return uaap::resolveDateSpanRelativeDay((uint64_t)a1, (uint64_t)a2, a3, a4);
}

uaap::DateHandler *uaap::DateSpanHandler::resolveDateTimeRangeSpanGraph(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    float v3 = this;
    uint64_t v4 = *((void *)this + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 48);
      if (v5)
      {
        if (*(void *)(v5 + 24))
        {
          siri::ontology::oname::graph::ontology_init::common_DateTime(this);
          uint64_t EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
          this = uaap::DateHandler::resolveDateTimeRangeValue(v3, a2, EntityNode, v8);
          if (this)
          {
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v3, v9);
            siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
            this = (uaap::DateHandler *)siri::ontology::UsoGraphNode::setSuccessor();
            uint64_t v12 = *((void *)v3 + 6);
            if (v12)
            {
              if (*(void *)(v12 + 24))
              {
                return (uaap::DateHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v3, a2, EntityNode, v11);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanMonthOfYear(__CFString *this, const __CFString *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t EntityNode = 0;
  if (this && a2 && a3)
  {
    uint64_t v5 = this;
    isa = this[4].isa;
    if (isa)
    {
      uint64_t v7 = *((void *)isa + 7);
      if (v7 && (this = *(__CFString **)(v7 + 24)) != 0)
      {
        this = (__CFString *)uaap::DateSpanHandler::getMonthOfYearDefinedValue(this, a2);
        BOOL v8 = this != 0;
        isa = v5[4].isa;
      }
      else
      {
        BOOL v8 = 0;
      }
      isa = (void *)*((void *)isa + 6);
      if (isa)
      {
        this = (__CFString *)CFEqual(*((CFTypeRef *)isa + 3), @"month");
        LODWORD(isa) = this != 0;
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    if (v8 || isa)
    {
      siri::ontology::oname::graph::ontology_init::common_MonthOfYear((siri::ontology::oname::graph::ontology_init *)this);
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(EntityNode);
      siri::ontology::UsoGraphNode::setSuccessor();
      if (v8)
      {
        uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*((void *)v5[4].isa + 7) + 24), v9);
        uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_definedValue(v10);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v10, *((siri::ontology::UsoEntityNode **)v5[4].isa + 7), v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanWithOrdinalCount(uaap::DateSpanHandler *this, const __CFString *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t EntityNode = 0;
  if (this && a2 && a3)
  {
    uint64_t v7 = *((void *)this + 16);
    if (!v7) {
      return 0;
    }
    if (!*(void *)(v7 + 88)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime(this);
    BOOL v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if (v8)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(v8);
      uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if (v10)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(v10);
        uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if (v11)
        {
          siri::ontology::oname::graph::ontology_init::common_Time(v11);
          uint64_t v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
          if (v12)
          {
            siri::ontology::oname::graph::ontology_init::common_Integer(v12);
            BOOL v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
            if (v13)
            {
              siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v13);
              uint64_t v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
              if (v14)
              {
                siri::ontology::oname::graph::ontology_init::common_MonthOfYear(v14);
                uint64_t v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
                if (v15)
                {
                  siri::ontology::oname::graph::ontology_init::Root(v15);
                  if (siri::ontology::operator!=()) {
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
    OrdinalCountAsListPositionVal = (siri::ontology::oname::graph::ontology_init *)uaap::getOrdinalCountAsListPositionVal(this, a2, v9);
    if (!OrdinalCountAsListPositionVal)
    {
      return 0;
    }
    else
    {
      uint64_t v17 = OrdinalCountAsListPositionVal;
      siri::ontology::oname::graph::ontology_init::common_ListPosition(OrdinalCountAsListPositionVal);
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Root(EntityNode);
      BOOL v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
      if (v18)
      {
        siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *(siri::ontology::UsoEntityNode **)(*((void *)this + 16) + 88), v19);
      }
      else
      {
        siri::ontology::oname::graph::ontology_init::Argument_usoListPosition(v18);
        char v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v17, this, v21);
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::resolveDateSpanRelativeDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v6 = *(void *)(a1 + 104);
    if (v6)
    {
      return uaap::DateHandler::resolveRelativeDayOfWeek(v6, a2, a3, a4);
    }
    else
    {
      float result = *(uaap::AbstractDateTimeHandler **)(a1 + 96);
      if (result)
      {
        return uaap::DateHandler::resolveRelativeDay((uint64_t)result, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t uaap::getOrdinalCountAsListPositionVal(uaap *this, const __CFString *a2, siri::ontology::UsoGraph *a3)
{
  if (!this) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 88);
  if (!v4) {
    return 0;
  }
  IntValueFromCFStringRef = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(v4 + 24), a2);
  switch((int)IntValueFromCFStringRef)
  {
    case -1:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Last(IntValueFromCFStringRef);
      break;
    case 0:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Current(IntValueFromCFStringRef);
      break;
    case 1:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_First(IntValueFromCFStringRef);
      break;
    case 2:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Second(IntValueFromCFStringRef);
      break;
    case 3:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Third(IntValueFromCFStringRef);
      break;
    case 4:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourth(IntValueFromCFStringRef);
      break;
    case 5:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifth(IntValueFromCFStringRef);
      break;
    case 6:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixth(IntValueFromCFStringRef);
      break;
    case 7:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventh(IntValueFromCFStringRef);
      break;
    case 8:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighth(IntValueFromCFStringRef);
      break;
    case 9:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Ninth(IntValueFromCFStringRef);
      break;
    case 10:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Tenth(IntValueFromCFStringRef);
      break;
    case 11:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eleventh(IntValueFromCFStringRef);
      break;
    case 12:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Twelfth(IntValueFromCFStringRef);
      break;
    case 13:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Thirteenth(IntValueFromCFStringRef);
      break;
    case 14:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourteenth(IntValueFromCFStringRef);
      break;
    case 15:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifteenth(IntValueFromCFStringRef);
      break;
    case 16:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixteenth(IntValueFromCFStringRef);
      break;
    case 17:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventeenth(IntValueFromCFStringRef);
      break;
    case 18:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighteenth(IntValueFromCFStringRef);
      break;
    case 19:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Nineteenth(IntValueFromCFStringRef);
      break;
    case 20:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Twentieth(IntValueFromCFStringRef);
      break;
    case 21:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFirst(IntValueFromCFStringRef);
      break;
    case 22:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentySecond(IntValueFromCFStringRef);
      break;
    case 23:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyThird(IntValueFromCFStringRef);
      break;
    case 24:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFourth(IntValueFromCFStringRef);
      break;
    case 25:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFifth(IntValueFromCFStringRef);
      break;
    default:
      return 0;
  }
  return siri::ontology::UsoGraph::createEntityNode();
}

uint64_t uaap::DateSpanHandler::getMonthOfYearDefinedValue(const __CFString *this, const __CFString *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int IntValueFromCFStringRef = uaap::UPDDSpan::extractIntValueFromCFStringRef(this, a2);
  switch(IntValueFromCFStringRef)
  {
    case 0:
      uint64_t v4 = SNLPOSLoggerForCategory(3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, this);
        if (v9 >= 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v11 = v5;
        _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEFAULT, "Warning: failed to parse month number string as an integer: '%s'. Returning nullptr.", buf, 0xCu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_31;
    case 1:
      uint64_t result = MEMORY[0x1F4157B70]();
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4157BE0]();
      break;
    case 3:
      uint64_t result = MEMORY[0x1F4157AC8]();
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4157AC0]();
      break;
    case 5:
      uint64_t result = MEMORY[0x1F4157A30]();
      break;
    case 6:
      uint64_t result = MEMORY[0x1F4157A88]();
      break;
    case 7:
      uint64_t result = MEMORY[0x1F4157A80]();
      break;
    case 8:
      uint64_t result = MEMORY[0x1F4157B30]();
      break;
    case 9:
      uint64_t result = MEMORY[0x1F4157C38]();
      break;
    case 10:
      uint64_t result = MEMORY[0x1F4157B78]();
      break;
    case 11:
      uint64_t result = MEMORY[0x1F4157BE8]();
      break;
    case 12:
      uint64_t result = MEMORY[0x1F4157BD8]();
      break;
    default:
      uint64_t v6 = SNLPOSLoggerForCategory(3);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = IntValueFromCFStringRef;
        _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEFAULT, "Warning: parsed month number not in [1, 12]: %u. Returning nullptr.", (uint8_t *)__p, 8u);
      }
LABEL_31:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a2);
    CFIndex maxBufLen = 0;
    v12.location = 0;
    v12.length = Length;
    CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
    if (*(char *)(a1 + 23) >= 0) {
      BOOL v8 = (UInt8 *)a1;
    }
    else {
      BOOL v8 = *(UInt8 **)a1;
    }
    v13.location = 0;
    v13.length = Length;
    return (void *)CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
  }
}

void sub_1C8E54E6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void uaap::DateSpanHandler::~DateSpanHandler(uaap::DateSpanHandler *this)
{
}

BOOL uaap::DateSpanHandler::isDateSpanWithUnit(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 128);
    return v1 && *(void *)(v1 + 48);
  }
  return result;
}

siri::ontology::UsoGraph *uaap::DateSpanHandler::resolveDateWithMonthOfYear(siri::ontology::oname::graph::ontology_init *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_Date(a1);
    uint64_t EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    if (uaap::DateSpanHandler::resolveDateSpanMonthOfYear((__CFString *)a1, a2, EntityNode, v7)) {
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else {
      return 0;
    }
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, __CFString *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t length = a2[2].length;
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanHandler::resolveDateSpan(v4, a2, length, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveRecurringDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanHandler::resolveRecurringDateSpan(v4, a2, v5, v6);
  }
  return this;
}

void *snlp::ssu::parse::SSUParseBuilder::SSUParseBuilder(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

void snlp::ssu::parse::SSUParseBuilder::buildParse(siri::ontology **a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  snlp::ssu::parse::SSUGraphBuilder::buildGraph(*a1);
}

void sub_1C8E554EC()
{
}

void sub_1C8E554F8()
{
}

uint64_t snlp::ssu::app::SSUAppExamplesPositiveIterable::SSUAppExamplesPositiveIterable(uint64_t result, void *a2)
{
  *(void *)uint64_t result = *a2;
  uint64_t v2 = a2[1];
  *(void *)(result + 8) = v2;
  uint64_t v3 = *a2;
  *(void *)(result + 16) = *a2;
  if (v3 == v2)
  {
    *(unsigned char *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
  }
  else
  {
    *(void *)(result + 24) = *(void *)(v3 + 48);
    *(void *)(result + 32) = 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)uint64_t result = *a2;
  uint64_t v2 = a2[1];
  *(void *)(result + 8) = v2;
  uint64_t v3 = *a2;
  *(void *)(result + 16) = *a2;
  if (v3 == v2)
  {
    *(unsigned char *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
  }
  else
  {
    *(void *)(result + 24) = *(void *)(v3 + 48);
    *(void *)(result + 32) = 1;
  }
  return result;
}

uint64_t snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = *(void *)(this + 16);
  int v4 = *(unsigned __int8 *)(this + 32);
  while (1)
  {
    BOOL v5 = v3 == v2;
    if (v4) {
      break;
    }
    if (v3 == v2)
    {
      int v4 = 0;
      uint64_t v3 = v2;
      BOOL v5 = 1;
      goto LABEL_18;
    }
    *(void *)(this + 16) = v3 + 72;
    if (v3 + 72 == v2) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(v3 + 120);
    int v4 = 1;
    *(unsigned char *)(this + 32) = 1;
    v3 += 72;
    BOOL v8 = 1;
LABEL_15:
    BOOL v5 = 0;
    *(void *)(this + 24) = v10;
    if (v8)
    {
LABEL_18:
      if (v5)
      {
LABEL_19:
        char v11 = 0;
        *(unsigned char *)a2 = 0;
        goto LABEL_20;
      }
    }
  }
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v7 = *(void *)(this + 24);
  BOOL v8 = v7 == v6;
  if (v7 == v6 && v3 != v2)
  {
    *(void *)(this + 16) = v3 + 72;
    if (v3 + 72 == v2) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(v3 + 120);
    v3 += 72;
    goto LABEL_15;
  }
  if (v7 == v6) {
    goto LABEL_18;
  }
  *(void *)(this + 24) = v7 + 24;
  *(void *)a2 = 0x8E38E38E38E38E39 * ((v3 - *(void *)this) >> 3);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v7;
  char v11 = 1;
LABEL_20:
  *(unsigned char *)(a2 + 24) = v11;
  return this;
}

id snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v2 = [NSString stringWithUTF8String:v1];
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v2];
    int v4 = (void *)[objc_alloc(MEMORY[0x1E4FA1378]) initWithNSUUID:v3];

    goto LABEL_8;
  }
  if (a1[1])
  {
    uint64_t v1 = (uint64_t *)*a1;
    goto LABEL_6;
  }
LABEL_7:
  int v4 = 0;
LABEL_8:
  return v4;
}

void sub_1C8E557BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  id v7 = v3;
  if (v3)
  {
    int v4 = [v3 toSafeNSUUID];
    BOOL v5 = [v4 UUIDString];

    id v6 = v5;
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v6 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1C8E55878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::e5ml::selflogging::convertAssetAcquisitionType(_DWORD *a1)
{
  if (*a1 == 1) {
    return 1;
  }
  else {
    return 2 * (*a1 == 2);
  }
}

uint64_t snlp::common::espresso_inference::e5ml::selflogging::convertErrorCode(unsigned int *a1)
{
  if (*a1 - 1 >= 7) {
    return 0;
  }
  else {
    return *a1;
  }
}

void snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  int v4 = [v3 trpId];
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v4, &v17);

  BOOL v5 = [v3 nlId];
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v5, v15);

  std::string::basic_string[abi:ne180100]<0>(v13, "");
  id v6 = [v3 resultCandidateId];

  if (v6)
  {
    id v7 = [v3 resultCandidateId];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v7 UTF8String]);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  int v8 = [v3 componentInvocationSource];
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
  }
  else
  {
    *(_OWORD *)a2 = v17;
    *(void *)(a2 + 16) = v18;
  }
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 24), (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v15;
    *(void *)(a2 + 40) = v16;
  }
  char v9 = (std::string *)(a2 + 48);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    int v10 = SHIBYTE(v14);
    *(_DWORD *)(a2 + 72) = v8;
    if (v10 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    *(void *)(a2 + 64) = v14;
    *(_DWORD *)(a2 + 72) = v8;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)v17);
  }
}

void sub_1C8E55A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }

  _Unwind_Resume(a1);
}

id snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(snlp::common::espresso_inference::e5ml::selflogging *this, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2)
{
  id v3 = snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID((uint64_t *)this);
  int v4 = snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID((uint64_t *)this + 3);
  if (*((char *)this + 71) >= 0) {
    BOOL v5 = (char *)this + 48;
  }
  else {
    BOOL v5 = (char *)*((void *)this + 6);
  }
  id v6 = [NSString stringWithUTF8String:v5];
  id v7 = v6;
  uint64_t v8 = *((unsigned __int8 *)this + 71);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 7);
  }
  if (!v8)
  {

    id v7 = 0;
  }
  uint64_t v9 = *((unsigned int *)this + 18);
  id v10 = objc_alloc_init(MEMORY[0x1E4FA0C68]);
  [v10 setNlId:v4];
  [v10 setTrpId:v3];
  [v10 setResultCandidateId:v7];
  [v10 setComponentInvocationSource:v9];

  return v10;
}

void sub_1C8E55C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E56464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a10);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a27);

  _Unwind_Resume(a1);
}

void siri::ontology::UsoUtteranceAlignment::UsoUtteranceAlignment(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  operator new();
}

void sub_1C8E566BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          MEMORY[0x1CB775C40](v6, 0x1000C405AAC83ABLL);
        }
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C8E56BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  _Unwind_Resume(a1);
}

void sub_1C8E56DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8E572A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  float v27 = *(std::__shared_weak_count **)(v25 - 104);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E57700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E57870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E579A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E57AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1C8E57DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8E5800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1C8E58150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *uaap::DateHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::DateHandler::mapDateToItemizedUsos(a3);
  }
  return result;
}

void *uaap::DateHandler::mapDateToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"Date");
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    int v4 = result;
    CFHashCode v5 = CFHash(@"DateTime");
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v5);
    uint64_t v6 = v4[3];
    if (v4[4] != v6)
    {
      uint64_t v7 = result;
      unint64_t v8 = 0;
      do
      {
        uint64_t result = *(void **)(v6 + 8 * v8);
        if (result)
        {
          if (result)
          {
            uint64_t v9 = result;
            if (!v7)
            {
              uint64_t result = (void *)uaap::DateSpanHandler::isRecurringDate((uint64_t)result);
              if (result) {
                operator new();
              }
            }
            if (v9[15]) {
              operator new();
            }
            if (v9[13]) {
              operator new();
            }
            if (v9[12]) {
              operator new();
            }
            if (v9[14]) {
              operator new();
            }
            if (v9[6]) {
              operator new();
            }
          }
        }
        ++v8;
        uint64_t v6 = v4[3];
      }
      while (v8 < (v4[4] - v6) >> 3);
    }
  }
  return result;
}

void sub_1C8E58608(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRecurringDateSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDDateOffsetSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::common_DateTime(EntityNode);
    unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v9 = siri::ontology::oname::graph::ontology_init::Argument_date(v8);
    if (!uaap::DateHandler::resolveDate(a1, a2, v8, v9, v10))
    {
      return 0;
    }
    else
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::DateHandler::resolveDateOffset(uint64_t a1, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = a3;
      if (a3)
      {
        if (a4)
        {
          unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(a1 + 8), @"Date");
          if (v8
            && *(void *)(a1 + 120)
            && ((siri::ontology::oname::graph::ontology_init::Root(v8), uint64_t v9 = siri::ontology::operator!=(), !v9)
             || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v9),
                 uint64_t v9 = siri::ontology::operator!=(),
                 (v9 & 1) == 0)))
          {
            id v10 = *(siri::ontology::UsoEntityNode **)(a1 + 120);
            siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v9);
            uint64_t v11 = siri::ontology::operator==();
            if ((v11 & 1) == 0)
            {
              siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v11);
              uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v10, v14);
              siri::ontology::UsoGraphNode::setSuccessor();
              uint64_t v7 = EntityNode;
            }
            uaap::DateHandler::resolveOffsetDirection((siri::ontology::UsoEntityNode **)v10, a2, v7, v12);
            uint64_t v16 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue(v15);
            uaap::DateHandler::resolveOffsetDurationValueAndUnit((uint64_t)v10, a2, (uint64_t)v7, v16);
            uaap::resolveOffsetReference(a1, a2, v7, v17);
            return v7;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveDateDurationGraphFromDateOffset(uaap::AbstractDateTimeHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveOffsetDurationValueAndUnit(v3, a2, v5, v6);
  }
  return this;
}

void uaap::DateHandler::resolveRelativeDayOfWeekGraph(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = *((void *)this + 13);
    uint64_t v7 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    uint64_t v9 = uaap::DateHandler::resolveRelativeDayOfWeek(v6, (uint64_t)a2, v5, v7);
    uaap::DateHandler::updateDayOfWeekWithListValIfExists(this, a2, v9, v8, v10);
  }
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRelativeDayGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveRelativeDay(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDAbsoluteDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = (uaap::AbstractDateTimeHandler *)*((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveAbsoluteDate(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeWithQualifier(siri::ontology::oname::graph::ontology_init *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (*((void *)a1 + 6)
      && (*((void *)a1 + 16) || *((void *)a1 + 12) || *((void *)a1 + 13) || *((void *)a1 + 14)))
    {
      siri::ontology::oname::graph::ontology_init::Root(a1);
      uint64_t v7 = siri::ontology::operator!=();
      if ((v7 & 1) == 0)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTimeRange((siri::ontology::oname::graph::ontology_init *)v7);
        uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        unint64_t v8 = (CFTypeRef *)*((void *)a1 + 6);
        uint64_t v9 = siri::ontology::oname::graph::ontology_init::Argument_qualifier(EntityNode);
        id v10 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeRangeQualifierValue(v8, (uint64_t)a2, (uint64_t)EntityNode, v9);
        if (v10)
        {
          siri::ontology::oname::graph::ontology_init::common_DateTime(v10);
          uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          char v12 = v11;
          CFRange v13 = (siri::ontology::oname::graph::ontology_init *)*((void *)a1 + 16);
          if (v13)
          {
            uint64_t v14 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            uint64_t v11 = uaap::DateHandler::resolveSpecialDatePeriodUnit(v13, (uint64_t)a2, (uint64_t)v12, v14);
            if (v11)
            {
              BOOL v15 = 1;
            }
            else
            {
              uint64_t v16 = siri::ontology::oname::graph::ontology_init::Argument_date(0);
              uint64_t v11 = uaap::DateSpanHandler::resolveDateWithMonthOfYear(a1, a2, (uint64_t)v12, v16);
              BOOL v15 = v11 != 0;
            }
          }
          else
          {
            BOOL v15 = 0;
          }
          uint64_t v17 = *((void *)a1 + 12);
          if (v17)
          {
            uint64_t v18 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            uint64_t v11 = uaap::DateHandler::resolveRelativeDay(v17, (uint64_t)a2, (uint64_t)v12, v18);
            if (v11) {
              BOOL v15 = 1;
            }
          }
          uint64_t v19 = *((void *)a1 + 13);
          if (v19)
          {
            uint64_t v20 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            uint64_t v11 = uaap::DateHandler::resolveRelativeDayOfWeek(v19, (uint64_t)a2, (uint64_t)v12, v20);
            if (v11) {
              BOOL v15 = 1;
            }
          }
          uint64_t v21 = *((void *)a1 + 14);
          if (v21)
          {
            uint64_t v22 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            uint64_t v11 = uaap::DateHandler::resolveAbsoluteDate(v21, (uint64_t)a2, v12, v22);
            if (v11) {
              char v23 = 1;
            }
            else {
              char v23 = v15;
            }
            if (v23) {
              goto LABEL_28;
            }
          }
          else if (v15)
          {
LABEL_28:
            siri::ontology::oname::graph::ontology_init::Argument_at(v11);
            siri::ontology::UsoGraphNode::setSuccessor();
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v24);
            return EntityNode;
          }
        }
      }
    }
    return 0;
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveSpecialDatePeriodUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*((void *)a1 + 6)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime(a1);
    if (siri::ontology::operator!=()) {
      return 0;
    }
    uint64_t v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)a1 + 6) + 24), @"day");
    if (v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(v6);
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
      uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_dayOfMonth(v7);
    }
    else
    {
      unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)a1 + 6) + 24), @"week");
      if (v8)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(v8);
        uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
        uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_weekOfYear(v7);
      }
      else
      {
        uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)a1 + 6) + 24), @"month");
        if (v9)
        {
          siri::ontology::oname::graph::ontology_init::common_Date(v9);
          uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_MonthOfYear(EntityNode);
          uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v7);
        }
        else
        {
          id v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((void *)a1 + 6) + 24), @"year");
          if (!v10) {
            return 0;
          }
          siri::ontology::oname::graph::ontology_init::common_Date(v10);
          uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
          uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_year(v7);
        }
      }
    }
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v7, a1, v11);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveRelativeDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), @"RelativeDay")
      && (RelativeDayDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getRelativeDayDefinedValue(*(const __CFString **)(a1 + 24), v6)) != 0)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(RelativeDayDefinedValue);
      uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v8);
      siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v9);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v9, (siri::ontology::UsoEntityNode *)a1, v10);
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveRelativeDayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || !a2 || !a3) {
    return 0;
  }
  uint64_t EntityNode = 0;
  if (a4)
  {
    if ((CFEqual(*(CFTypeRef *)(a1 + 8), @"DayOfWeek")
       || CFEqual(*(CFTypeRef *)(a1 + 8), @"DayOfNextWeek")
       || CFEqual(*(CFTypeRef *)(a1 + 8), @"DayOfThisWeek"))
      && (DayOfWeekDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getDayOfWeekDefinedValue(*(const __CFString **)(a1 + 24), v6)) != 0)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(DayOfWeekDefinedValue);
      uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v8);
      uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v9);
      id v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_dayOfWeek(v10);
      siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v11 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v11, (siri::ontology::UsoEntityNode *)a1, v12);
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v13);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveAbsoluteDate(uint64_t a1, uint64_t a2, uaap::AbstractDateTimeHandler *a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (*(void *)(a1 + 24)
      && (*(void *)(a1 + 56) || *(void *)(a1 + 64) || *(void *)(a1 + 72) || *(void *)(a1 + 80))
      && ((siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1),
           uint64_t v7 = siri::ontology::operator!=(),
           !v7)
       || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
           uint64_t v7 = siri::ontology::operator!=(),
           !v7)
       || (siri::ontology::oname::graph::ontology_init::common_Date((siri::ontology::oname::graph::ontology_init *)v7),
           uint64_t v7 = siri::ontology::operator!=(),
           (v7 & 1) == 0)))
    {
      siri::ontology::oname::graph::ontology_init::common_Date((siri::ontology::oname::graph::ontology_init *)v7);
      MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if (MonthOfYearDefinedValue)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(MonthOfYearDefinedValue);
        uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
        MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      else
      {
        uint64_t EntityNode = a3;
      }
      uint64_t v11 = *(void *)(a1 + 56);
      if (v11 && *(void *)(v11 + 24)) {
        uaap::toUTF8String(*(const __CFString **)(a1 + 24), v9);
      }
      uint64_t v12 = *(void *)(a1 + 64);
      if (v12 && *(void *)(v12 + 24))
      {
        siri::ontology::oname::graph::ontology_init::common_Integer(MonthOfYearDefinedValue);
        CFRange v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_dayOfMonth(v13);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(*(void *)(a1 + 64) + 24), v14);
        IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, *(siri::ontology::UsoEntityNode **)(a1 + 64), v16);
      }
      uint64_t v17 = *(void *)(a1 + 72);
      if (v17)
      {
        MonthOfYearDefinedValue = *(siri::ontology::oname::graph::ontology_init **)(v17 + 24);
        if (MonthOfYearDefinedValue)
        {
          MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::DateSpanHandler::getMonthOfYearDefinedValue((const __CFString *)MonthOfYearDefinedValue, v9);
          if (MonthOfYearDefinedValue)
          {
            siri::ontology::oname::graph::ontology_init::common_MonthOfYear(MonthOfYearDefinedValue);
            uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v18);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*(void *)(a1 + 72) + 24), v19);
            uint64_t v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v20, *(siri::ontology::UsoEntityNode **)(a1 + 72), v21);
          }
        }
      }
      uint64_t v22 = *(void *)(a1 + 80);
      if (v22 && *(void *)(v22 + 24))
      {
        siri::ontology::oname::graph::ontology_init::common_Integer(MonthOfYearDefinedValue);
        char v23 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_year(v23);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(*(void *)(a1 + 80) + 24), v24);
        uint64_t v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_integerValue(v25);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v25, *(siri::ontology::UsoEntityNode **)(a1 + 80), v26);
      }
      uint64_t v27 = *(void *)(a1 + 88);
      if (v27)
      {
        CFStringRef v28 = *(const __CFString **)(v27 + 24);
        if (v28)
        {
          DayOfWeekDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getDayOfWeekDefinedValue(v28, v9);
          if (DayOfWeekDefinedValue)
          {
            siri::ontology::oname::graph::ontology_init::common_DayOfWeek(DayOfWeekDefinedValue);
            unint64_t v30 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_dayOfWeek(v30);
            siri::ontology::UsoGraphNode::setSuccessor();
            size_t v31 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v31);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v30, *(siri::ontology::UsoEntityNode **)(a1 + 88), v32);
          }
        }
      }
      if (*((void *)EntityNode + 7) == *((void *)EntityNode + 8)) {
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v10);
      }
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

void sub_1C8E59490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31 && a30 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t uaap::getDayOfWeekDefinedValue(const __CFString *this, const __CFString *a2)
{
  if (!this) {
    return 0;
  }
  switch(CFStringGetIntValue(this))
  {
    case 0:
      uint64_t result = MEMORY[0x1F4157A78]();
      break;
    case 1:
      uint64_t result = MEMORY[0x1F4157A70]();
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4157AA0]();
      break;
    case 3:
      uint64_t result = MEMORY[0x1F4157B40]();
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4157AF0]();
      break;
    case 5:
      uint64_t result = MEMORY[0x1F4157A68]();
      break;
    case 6:
      uint64_t result = MEMORY[0x1F4157AE8]();
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t uaap::getRelativeDayDefinedValue(const __CFString *this, const __CFString *a2)
{
  if (!this) {
    return 0;
  }
  switch(CFStringGetIntValue(this))
  {
    case -2:
      uint64_t result = MEMORY[0x1F4157C98]();
      break;
    case -1:
      uint64_t result = MEMORY[0x1F4157A00]();
      break;
    case 0:
      uint64_t result = MEMORY[0x1F41578B8]();
      break;
    case 1:
      uint64_t result = MEMORY[0x1F41579A8]();
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4157C20]();
      break;
    default:
      return 0;
  }
  return result;
}

void uaap::DateHandler::updateDayOfWeekWithListValIfExists(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4, siri::ontology::UsoEntityNode *a5)
{
  uint64_t v7 = uaap::TimeHandler::resolveDateTimeQualifierListValue(this, a2, a4, a4);
  if (a3 && v7)
  {
    CFStringRef v9 = (uint64_t *)*((void *)a3 + 7);
    for (uint64_t i = (uint64_t *)*((void *)a3 + 8);
          i != v9;
          std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](i))
    {
      --i;
    }
    *((void *)a3 + 8) = v9;
    uint64_t v10 = *((void *)this + 6);
    uint64_t v11 = *((void *)this + 13);
    uint64_t v12 = (char *)operator new(0x10uLL);
    v13[1] = v12 + 16;
    v13[2] = v12 + 16;
    *(void *)uint64_t v12 = v10;
    *((void *)v12 + 1) = v11;
    v13[0] = v12;
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uint64_t)a3, v13);
    operator delete(v12);
  }
}

void sub_1C8E59724(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveOffsetDurationValueAndUnit(uint64_t a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7)
    {
      siri::ontology::oname::graph::ontology_init::common_OffsetDateTime((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t v7 = siri::ontology::operator!=();
      if (v7)
      {
        siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
        uint64_t v7 = siri::ontology::operator!=();
        if (v7) {
          return 0;
        }
      }
    }
    uint64_t v10 = *(CFTypeRef **)(a1 + 80);
    if (v10)
    {
      uint64_t v7 = uaap::addSpecialDateUnit(a2, v10, v8);
      uint64_t v12 = v7;
      if (v7) {
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)v7, (siri::ontology::UsoEntityNode *)a1, v11);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    CFRange v13 = *(siri::ontology::UsoGraph **)(a1 + 56);
    if (v13 && *((void *)v13 + 3))
    {
      uint64_t v7 = (uint64_t)uaap::addOccurrenceCount(a2, v13, *(uaap::UPDDSpan **)(a1 + 72), *(uaap::UPDDSpan **)(a1 + 64), v9);
      uint64_t v14 = v7;
    }
    else
    {
      uint64_t v14 = 0;
    }
    if (!(v12 | v14))
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v15);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::DateHandler::addUnitAndOccurance(EntityNode, (siri::ontology::UsoEntityNode *)v14, a2, (siri::ontology::UsoGraph *)v12, (siri::ontology::UsoEntityNode *)a1, v16);
    }
  }
  return EntityNode;
}

uint64_t uaap::addSpecialDateUnit(uaap *this, CFTypeRef *a2, const uaap::UPDDSpan *a3)
{
  uint64_t v4 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"day");
  if (v4)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Day(v4);
  }
  else
  {
    uint64_t v5 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"week");
    if (v5)
    {
      siri::ontology::oname::graph::ontology_init::common_TimeUnit_Week(v5);
    }
    else
    {
      CFStringRef v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"month");
      if (v6)
      {
        siri::ontology::oname::graph::ontology_init::common_TimeUnit_Month(v6);
      }
      else
      {
        uint64_t v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"year");
        if (v7)
        {
          siri::ontology::oname::graph::ontology_init::common_TimeUnit_Year(v7);
        }
        else
        {
          unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"season");
          if (v8)
          {
            siri::ontology::oname::graph::ontology_init::common_TimeUnit_SeasonOfYear(v8);
          }
          else
          {
            CFStringRef v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], @"quarter");
            if (!v9) {
              return 0;
            }
            siri::ontology::oname::graph::ontology_init::common_TimeUnit_QuarterOfYear(v9);
          }
        }
      }
    }
  }
  return siri::ontology::UsoGraph::createEntityNode();
}

siri::ontology::oname::graph::ontology_init *uaap::addOccurrenceCount(uaap *this, siri::ontology::UsoGraph *a2, uaap::UPDDSpan *a3, uaap::UPDDSpan *a4, uaap::UPDDSpan *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  CFStringRef v6 = (const __CFString *)*((void *)a2 + 3);
  if (!v6) {
    return 0;
  }
  if (!uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)a2 + 3), (const __CFString *)a2)&& !CFEqual(@"0", v6))
  {
    if (a3)
    {
      CFStringRef v14 = (const __CFString *)*((void *)a3 + 3);
      if (v14)
      {
        uint64_t IntValueFromCFStringRef = uaap::UPDDSpan::extractIntValueFromCFStringRef(v14, v9);
        if (!IntValueFromCFStringRef)
        {
          uint64_t IntValueFromCFStringRef = CFEqual(@"0", v14);
          if (!IntValueFromCFStringRef)
          {
            uint64_t v18 = SNLPOSLoggerForCategory(6);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              return 0;
            }
            *(_DWORD *)std::string buf = 134217984;
            *(void *)&uint8_t buf[4] = CFStringGetDoubleValue(v14);
            uint64_t v20 = "Unsupported denominator in occurrence count with value: %.4f";
            goto LABEL_18;
          }
        }
        if (a4 && *((void *)a4 + 3))
        {
          CFStringRef str = (CFStringRef)*((void *)a4 + 3);
          *(void *)std::string buf = &str;
          unint64_t v17 = uaap::addOccurrenceCount(siri::ontology::UsoGraph *,uaap::UPDDSpan *,uaap::UPDDSpan *,uaap::UPDDSpan *)::$_2::operator()((const __CFString ***)buf, v16);
          if (!HIDWORD(v17))
          {
            uint64_t v18 = SNLPOSLoggerForCategory(6);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              double DoubleValue = CFStringGetDoubleValue(str);
              *(_DWORD *)std::string buf = 134217984;
              *(double *)&uint8_t buf[4] = DoubleValue;
              uint64_t v20 = "Unsupported numerator in occurrence count with value: %.4f";
LABEL_18:
              _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
              return 0;
            }
            return 0;
          }
          siri::ontology::oname::graph::ontology_init::common_MixedFraction((siri::ontology::oname::graph::ontology_init *)v17);
          uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
          siri::ontology::oname::graph::ontology_init::Argument_numeratorValue(IntNode);
          siri::ontology::UsoGraphNode::setSuccessor();
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a2, v24);
        }
        else
        {
          siri::ontology::oname::graph::ontology_init::common_MixedFraction((siri::ontology::oname::graph::ontology_init *)IntValueFromCFStringRef);
          uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          uint64_t v22 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
          siri::ontology::oname::graph::ontology_init::Argument_numeratorValue(v22);
          siri::ontology::UsoGraphNode::setSuccessor();
        }
        uint64_t v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_denominatorValue(v25);
        siri::ontology::UsoGraphNode::setSuccessor();
        CFRange v13 = v25;
        goto LABEL_6;
      }
    }
    uint64_t v18 = SNLPOSLoggerForCategory(6);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = CFStringGetDoubleValue(v6);
      uint64_t v20 = "Unsupported occurrence count with value: %.4f";
      goto LABEL_18;
    }
    return 0;
  }
  uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::common_Integer(v10);
  uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(EntityNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  CFRange v13 = v10;
LABEL_6:
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v13, a2, v12);
  return EntityNode;
}

void uaap::DateHandler::addUnitAndOccurance(uaap::DateHandler *this, siri::ontology::UsoEntityNode *a2, siri::ontology::UsoEntityNode *a3, siri::ontology::UsoGraph *a4, siri::ontology::UsoEntityNode *a5, uaap::UPDDSpan *a6)
{
  siri::ontology::oname::graph::ontology_init::common_DurationComponent(this);
  uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_components(EntityNode);
  uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  if (a4)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit(v10);
    uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::Argument_unit(v11);
    uint64_t v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(v12);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(a4, a5, v13);
  }
  if (a2)
  {
    siri::ontology::oname::graph::ontology_init::Argument_value(v10);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
}

uint64_t uaap::addOccurrenceCount(siri::ontology::UsoGraph *,uaap::UPDDSpan *,uaap::UPDDSpan *,uaap::UPDDSpan *)::$_2::operator()(const __CFString ***a1, const __CFString *a2)
{
  int IntValueFromCFStringRef = uaap::UPDDSpan::extractIntValueFromCFStringRef(**a1, a2);
  if (IntValueFromCFStringRef || CFEqual(@"0", **a1))
  {
    uint64_t v4 = IntValueFromCFStringRef & 0xFFFFFF00;
    uint64_t v5 = IntValueFromCFStringRef;
    uint64_t v6 = 0x100000000;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  return v6 | v4 | v5;
}

void uaap::DateHandler::resolveOffsetDirection(siri::ontology::UsoEntityNode **this, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this)
  {
    if (a2)
    {
      if (a3)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
        uint64_t v5 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if (!v5
          || (siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(v5),
              (siri::ontology::operator!=() & 1) == 0))
        {
          uint64_t v6 = this[6];
          if (v6)
          {
            uint64_t v7 = (const void *)*((void *)v6 + 3);
            if (v7)
            {
              unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6 + 3), @"before");
              if (v8)
              {
                siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v8);
              }
              else
              {
                CFStringRef v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v7, @"after");
                if (!v9) {
                  return;
                }
                siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v9);
              }
              uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::common_OffsetDirection(EntityNode);
              uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::Argument_direction(v11);
              uint64_t v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
              siri::ontology::oname::graph::ontology_init::Argument_definedValue(v12);
              siri::ontology::UsoGraphNode::setSuccessor();
              CFStringRef v14 = this[6];
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v14, v13);
            }
          }
        }
      }
    }
  }
}

uint64_t uaap::resolveOffsetReference(uint64_t this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v5 = this;
        siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
        this = siri::ontology::operator!=();
        if (!this
          || (siri::ontology::oname::graph::ontology_init::common_OffsetDateTime((siri::ontology::oname::graph::ontology_init *)this),
              this = siri::ontology::operator!=(),
              (this & 1) == 0))
        {
          uint64_t v6 = *(void *)(v5 + 112);
          if (v6)
          {
            if (*(void *)(v6 + 24))
            {
              siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
              uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::Argument_offsetReference(EntityNode);
              unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
              uint64_t v9 = *(void *)(v5 + 112);
              uint64_t v10 = siri::ontology::oname::graph::ontology_init::Argument_date(v8);
              return (uint64_t)uaap::DateHandler::resolveAbsoluteDate(v9, (uint64_t)a2, EntityNode, v10);
            }
          }
        }
      }
    }
  }
  return this;
}

siri::ontology::UsoGraph *uaap::DateHandler::resolveDate(uaap::DateHandler *a1, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  uint64_t v5 = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v10 = *((void *)a1 + 12);
    if (v10) {
      uint64_t v5 = uaap::DateHandler::resolveRelativeDay(v10, (uint64_t)a2, (uint64_t)a3, a4);
    }
    else {
      uint64_t v5 = 0;
    }
    if (*((void *)a1 + 15)) {
      uint64_t v5 = uaap::DateHandler::resolveDateOffset((uint64_t)a1, a2, a3, a4);
    }
    uint64_t v11 = *((void *)a1 + 13);
    if (v11)
    {
      uint64_t v5 = uaap::DateHandler::resolveRelativeDayOfWeek(v11, (uint64_t)a2, (uint64_t)a3, a4);
      CFRange v13 = v12;
    }
    else
    {
      CFRange v13 = 0;
    }
    uint64_t v14 = *((void *)a1 + 14);
    if (v14) {
      uint64_t v5 = uaap::DateHandler::resolveAbsoluteDate(v14, (uint64_t)a2, a3, a4);
    }
    uaap::DateHandler::updateDayOfWeekWithListValIfExists(a1, a2, v5, v13, a5);
  }
  return v5;
}

void uaap::DateHandler::~DateHandler(uaap::DateHandler *this)
{
}

uint64_t uaap::DateHandler::getSpecialDateUnitDefinedValue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 128);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(const void **)(v3 + 24);
  if (!v4) {
    return 0;
  }
  if (CFEqual(*(CFTypeRef *)(v3 + 24), @"weekend"))
  {
    return MEMORY[0x1F4157C18]();
  }
  if (CFEqual(v4, @"weekday"))
  {
    return MEMORY[0x1F4157C58]();
  }
  if (CFEqual(v4, @"spring"))
  {
    return MEMORY[0x1F4157BA0]();
  }
  if (CFEqual(v4, @"summer"))
  {
    return MEMORY[0x1F4157BA8]();
  }
  if (CFEqual(v4, @"autumn"))
  {
    return MEMORY[0x1F4157B98]();
  }
  if (CFEqual(v4, @"winter"))
  {
    return MEMORY[0x1F4157BB0]();
  }
  if ((uaap::DateSpanHandler::isRecurringDate(a1) & 1) != 0 || !CFEqual(v4, @"day")) {
    return 0;
  }
  return MEMORY[0x1F4157C00]();
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeValue(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t v4 = 0;
  if (a2 && this && a3)
  {
    uint64_t v6 = *((void *)this + 16);
    if (v6
      && (uint64_t v7 = *(void *)(v6 + 48)) != 0
      && *(void *)(v7 + 24)
      && ((siri::ontology::oname::graph::ontology_init::common_Date(this),
           unint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=(),
           !v8)
       || (siri::ontology::oname::graph::ontology_init::common_DateTime(v8), (siri::ontology::operator!=() & 1) == 0))
      && uaap::DateHandler::getSpecialDateUnitDefinedValue((uint64_t)this))
    {
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(EntityNode);
      uint64_t v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_occurringIn(v4);
      uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v10);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 16), v11);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDurationValueAndUnitGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return (siri::ontology::oname::graph::ontology_init *)uaap::DateHandler::resolveDurationValueAndUnit(v4, a2, v5, v6);
  }
  return this;
}

uint64_t uaap::DateHandler::resolveDurationValueAndUnit(siri::ontology::oname::graph::ontology_init *a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          uint64_t EntityNode = *((void *)a1 + 16);
          if (EntityNode)
          {
            siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(a1);
            uint64_t v7 = siri::ontology::operator!=();
            if (v7)
            {
              siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
              uint64_t v7 = siri::ontology::operator!=();
              if (v7) {
                return 0;
              }
            }
            uint64_t v10 = *(CFTypeRef **)(EntityNode + 48);
            if (v10)
            {
              uint64_t v7 = uaap::addSpecialDateUnit(a2, v10, v8);
              uint64_t v11 = v7;
            }
            else
            {
              uint64_t v11 = 0;
            }
            uint64_t v12 = *(siri::ontology::UsoGraph **)(EntityNode + 64);
            if (v12 && *((void *)v12 + 3))
            {
              uint64_t v7 = (uint64_t)uaap::addOccurrenceCount(a2, v12, *(uaap::UPDDSpan **)(EntityNode + 80), *(uaap::UPDDSpan **)(EntityNode + 72), v9);
              uint64_t v13 = v7;
            }
            else
            {
              uint64_t v13 = 0;
            }
            if (!(v11 | v13))
            {
              return 0;
            }
            else
            {
              siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
              uint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)EntityNode, a1, v14);
              siri::ontology::UsoGraphNode::setSuccessor();
              uaap::DateHandler::addUnitAndOccurance((uaap::DateHandler *)EntityNode, (siri::ontology::UsoEntityNode *)v13, a2, (siri::ontology::UsoGraph *)v11, a1, v15);
            }
          }
        }
      }
    }
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateWithSpecialPeriod(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uaap::AbstractDateTimeHandler *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if ((*((void *)a1 + 7)
       || *((void *)a1 + 8)
       || *((void *)a1 + 9)
       || *((void *)a1 + 10)
       || *((void *)a1 + 16))
      && (siri::ontology::oname::graph::ontology_init::Root(a1), (siri::ontology::operator!=() & 1) == 0))
    {
      uint64_t v9 = uaap::DateHandler::resolveAbsoluteDate((uint64_t)a1, a2, a3, a4);
      uint64_t v4 = v9;
      if (v9)
      {
        uint64_t v10 = *((void *)a1 + 16);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 56);
          if (v11)
          {
            if (*(void *)(v11 + 24))
            {
              siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v9);
              siri::ontology::UsoGraph::getSuccessors();
              if (v18) {
                operator delete(v18);
              }
              MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*(void *)(*((void *)a1 + 16) + 56) + 24), v12);
              if (v19 == v18 && MonthOfYearDefinedValue)
              {
                siri::ontology::oname::graph::ontology_init::common_MonthOfYear(MonthOfYearDefinedValue);
                uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
                siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(EntityNode);
                siri::ontology::UsoGraphNode::setSuccessor();
                BOOL v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
                siri::ontology::oname::graph::ontology_init::Argument_definedValue(v15);
                siri::ontology::UsoGraphNode::setSuccessor();
                uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v15, *(siri::ontology::UsoEntityNode **)(*((void *)a1 + 16) + 56), v16);
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateOffsetGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = (siri::ontology::UsoGraph *)*((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveDateOffset(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateWithSpecialDatePeriodGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = (uaap::AbstractDateTimeHandler *)*((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveAbsoluteDateWithSpecialPeriod(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRecurringDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveRecurringDateSpan(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeWithQualifierGraph(siri::ontology::oname::graph::ontology_init *this, const __CFString *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t length = a2[2].length;
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveDateTimeRangeWithQualifier(v4, a2, length, v6);
  }
  return this;
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F235EC50;
  std::mutex::~mutex((std::mutex *)this + 25);
  itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer((void **)this + 115);
  uint64_t v2 = *((void *)this + 114);
  *((void *)this + 114) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 911) < 0) {
    operator delete(*((void **)this + 111));
  }
  if (*((char *)this + 887) < 0) {
    operator delete(*((void **)this + 108));
  }
  if (*((char *)this + 863) < 0) {
    operator delete(*((void **)this + 105));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 792);
  if (*((char *)this + 791) < 0) {
    operator delete(*((void **)this + 96));
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)((char *)this + 184));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x1CB774030]((char *)this + 64);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(void **this)
{
  if (*((char *)this + 679) < 0) {
    operator delete(this[82]);
  }
  if (*((char *)this + 655) < 0) {
    operator delete(this[79]);
  }
  if (*((char *)this + 631) < 0) {
    operator delete(this[76]);
  }
  if (*((char *)this + 607) < 0) {
    operator delete(this[73]);
  }
  if (*((char *)this + 583) < 0) {
    operator delete(this[70]);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(this[67]);
  }
  if (*((char *)this + 535) < 0) {
    operator delete(this[64]);
  }
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)(this + 8));
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)this + 528);
  MEMORY[0x1CB773E20]((char *)this + 440);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 392);
  MEMORY[0x1CB773E20]((char *)this + 304);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  uint64_t v4 = (void **)((char *)this + 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 192);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor(nlv4_inference_orchestrator::context::ContextLabelsExtractor *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v133, "Received null input parser request");
    std::runtime_error::runtime_error(exception, &v133);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::validateRequest(a1, v5, (uint64_t)&v131);
  if (v132)
  {
    uint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v94 = &v93->__vftable;
    if (!v132) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::runtime_error::runtime_error(v93, &v131);
    *uint64_t v94 = &unk_1F235F530;
  }
  v129.__r_.__value_.__s.__data_[0] = 0;
  char v130 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 5);
  if (v8)
  {
    uint64_t v9 = *(const std::string **)(v8 + 16);
    if (v9)
    {
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&v129, v9);
      uint64_t v7 = *a2;
    }
  }
  unint64_t v96 = a2;
  unsigned __int8 v97 = a1;
  uint64_t v95 = a3;
  uint64_t v10 = *((void *)v7 + 8);
  int v127 = 0;
  unint64_t v128 = 0;
  unsigned int v126 = 0;
  uint64_t v98 = v10;
  uint64_t v11 = *(void *)(v10 + 24);
  if (v11)
  {
    CFStringRef v12 = *(uint64_t **)(v11 + 24);
    uint64_t v13 = *(uint64_t **)(v11 + 32);
    if (v12 != v13)
    {
      while (1)
      {
        uint64_t v14 = *v12;
        if ((~*(unsigned __int8 *)(*v12 + 92) & 3) != 0) {
          break;
        }
        uint64_t v15 = *(unsigned int *)(v14 + 72);
        unint64_t v16 = *(unsigned int *)(v14 + 76);
        if ((int)v15 > (int)v16 || ((v16 | v15) & 0x80000000) != 0) {
          break;
        }
        unint64_t v17 = *(uint64_t **)(v98 + 16);
        uint64_t UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v17, *(unsigned int *)(v14 + 72));
        uint64_t v20 = v19;
        uint64_t v21 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v17, v16);
        uint64_t v23 = v22;
        MEMORY[0x1CB773EE0](buf, v14);
        *(void *)&long long v146 = v20;
        *((void *)&v146 + 1) = v23;
        *(void *)&long long v147 = v15;
        *((void *)&v147 + 1) = v16;
        *(void *)&long long v148 = UnicodeScalarAndUtf8Offsets;
        *((void *)&v148 + 1) = v21;
        MEMORY[0x1CB773EE0](&v133, buf);
        long long v139 = v146;
        long long v140 = v147;
        long long v141 = v148;
        LOBYTE(v142[0]) = 1;
        MEMORY[0x1CB773EF0](buf);
        if (!LOBYTE(v142[0])) {
          goto LABEL_15;
        }
        if ((unint64_t)v127 >= v128)
        {
          uint64_t v27 = (char *)std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>((void **)&v126, &v133);
        }
        else
        {
          CFStringRef v24 = (_OWORD *)MEMORY[0x1CB773EE0](v127, &v133);
          long long v25 = v139;
          long long v26 = v141;
          v24[7] = v140;
          v24[8] = v26;
          v24[6] = v25;
          uint64_t v27 = (char *)(v24 + 9);
        }
        int v127 = v27;
LABEL_21:
        if (LOBYTE(v142[0])) {
          MEMORY[0x1CB773EF0](&v133);
        }
        if (++v12 == v13) {
          goto LABEL_24;
        }
      }
      v133.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v142[0]) = 0;
LABEL_15:
      uint64_t v28 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(uint64_t **)(v14 + 64);
        if (*((char *)v29 + 23) < 0) {
          uint64_t v29 = (uint64_t *)*v29;
        }
        *(_DWORD *)std::string buf = 136642819;
        char v145 = v29;
        _os_log_impl(&dword_1C8DA9000, v28, OS_LOG_TYPE_ERROR, "A token could not be reindexed; %{sensitive}s",
          buf,
          0xCu);
      }
      goto LABEL_21;
    }
  }
LABEL_24:
  *(_OWORD *)int v124 = 0u;
  long long v125 = 0u;
  *(_OWORD *)uint64_t v123 = 0u;
  unint64_t v30 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v31 = os_signpost_id_generate(v30);
  uint64_t v32 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v33 = v32;
    if (os_signpost_enabled(v32))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v31, "ITFM Span Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  unint64_t v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Span Featurization\"", (uint8_t *)&v133, 2u);
  }
  uint64_t v35 = (char *)*((void *)*v96 + 2);
  uint64_t v36 = (char *)*((void *)*v96 + 3);
  uint64_t v120 = 0;
  int v121 = 0;
  int v122 = 0;
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
  v133.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v37 = v36 - v35;
  if (v36 != v35)
  {
    if ((unint64_t)v37 >= 0x1745D1745D1745D1) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = (const sirinluinternal::MatchingSpan *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v37 >> 3);
    uint64_t v120 = v38;
    int v121 = v38;
    int v122 = (char *)v38 + 88 * v39;
    do
    {
      uint64_t v40 = *(void *)v35;
      v35 += 8;
      unint64_t v38 = (const sirinluinternal::MatchingSpan *)(MEMORY[0x1CB773E00](v38, v40) + 88);
    }
    while (v35 != v36);
    int v121 = v38;
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid(v97);
  unsigned int v41 = (*(uint64_t (**)(void))(**((void **)v97 + 114) + 48))(*((void *)v97 + 114));
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize((int *)v97 + 46, (char *)v123, &v120, (uint64_t *)&v126, (uint64_t)&v129, v41);
  if (v130)
  {
    if (_os_feature_enabled_impl())
    {
      if (v130) {
        snlp::common::logging::feature_store_utilities::insertITFMAssetVersionToFeatureStore();
      }
      std::__throw_bad_optional_access[abi:ne180100]();
    }
  }
  else
  {
    uint64_t v42 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v43 = *((int *)v97 + 12);
      if (v43 >= 8)
      {
        uint64_t v45 = SNLPOSLoggerForCategory(4);
        uint64_t v44 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v133.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(v133.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 6) = v43;
          _os_log_impl(&dword_1C8DA9000, v45, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v133, 0x16u);
        }
      }
      else
      {
        uint64_t v44 = off_1E65808C8[v43];
      }
      LODWORD(v133.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      _os_log_impl(&dword_1C8DA9000, v42, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of asset version into FeatureStore", (uint8_t *)&v133, 0xCu);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v47 = v46;
    if (os_signpost_enabled(v46))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v47, OS_SIGNPOST_INTERVAL_END, v31, "ITFM Span Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  uint64_t v48 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v48, OS_LOG_TYPE_DEFAULT, "END \"ITFM Span Featurization\"", (uint8_t *)&v133, 2u);
  }
  unint64_t v49 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v50 = os_signpost_id_generate(v49);
  unint64_t v51 = SNLPOSLoggerForCategory(7);
  if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v52 = v51;
    if (os_signpost_enabled(v51))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v52, OS_SIGNPOST_INTERVAL_BEGIN, v50, "ITFM Context Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  uint64_t v53 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v53, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Context Featurization\"", (uint8_t *)&v133, 2u);
  }
  *(_OWORD *)v118 = 0u;
  long long v119 = 0u;
  *(_OWORD *)int v117 = 0u;
  v115[0] = 0;
  char v116 = 0;
  uint64_t v54 = *((void *)*v96 + 9);
  if (!v54) {
    goto LABEL_64;
  }
  uint64_t v55 = *(void *)(v54 + 136);
  if (!v55) {
    goto LABEL_64;
  }
  if (!*(void *)(v55 + 8)) {
    goto LABEL_61;
  }
  MEMORY[0x1CB773C20](&v133);
  LOBYTE(v137) = 1;
  MEMORY[0x1CB773C10](v115, &v133);
  char v116 = 1;
  if ((_BYTE)v137) {
    MEMORY[0x1CB773C30](&v133);
  }
  uint64_t v56 = *((void *)*v96 + 9);
  if (v56 && (uint64_t v55 = *(void *)(v56 + 136)) != 0)
  {
LABEL_61:
    uint64_t v57 = *(void *)(v55 + 16);
    buf[0] = 0;
    LOBYTE(v147) = 0;
    if (v57)
    {
      MEMORY[0x1CB773D50](&v133);
      LOBYTE(v140) = 1;
      if ((_BYTE)v147)
      {
        sirinluexternal::NLContext::operator=();
      }
      else
      {
        MEMORY[0x1CB773D40](buf, &v133);
        LOBYTE(v147) = 1;
      }
      if ((_BYTE)v140) {
        MEMORY[0x1CB773D60](&v133);
      }
    }
  }
  else
  {
LABEL_64:
    buf[0] = 0;
    LOBYTE(v147) = 0;
  }
  itfm_inference_orchestrator::context::ContextFeaturizer::featurize((uint64_t)v97 + 920, (char **)v117, (uint64_t)buf, (sirinluexternal::LegacyNLContext *)v115, (uint64_t)&v129);
  uint64_t v58 = SNLPOSLoggerForCategory(7);
  if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v59 = v58;
    if (os_signpost_enabled(v58))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v59, OS_SIGNPOST_INTERVAL_END, v50, "ITFM Context Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  uint64_t v60 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v60, OS_LOG_TYPE_DEFAULT, "END \"ITFM Context Featurization\"", (uint8_t *)&v133, 2u);
  }
  unsigned int v61 = (*(uint64_t (**)(void))(**((void **)v97 + 114) + 24))(*((void *)v97 + 114));
  unint64_t v63 = v126;
  uint64_t v62 = v127;
  uint64_t v64 = operator new(0x10uLL);
  unint64_t v65 = 0x8E38E38E38E38E39 * ((v62 - v63) >> 4);
  *uint64_t v64 = v61;
  v64[1] = v65;
  LODWORD(v133.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v113, v65, &v133);
  uint64_t v66 = *v96;
  uint64_t v67 = *((void *)*v96 + 1);
  uint64_t v68 = *(void *)(v67 + 56);
  uint64_t v69 = *(void *)(v67 + 40);
  uint64_t v70 = operator new(0x18uLL);
  uint64_t v108 = v70 + 3;
  long long v109 = v70 + 3;
  void *v70 = 1;
  v70[1] = v68;
  v70[2] = v69;
  long long v107 = v70;
  uint64_t v71 = *((void *)v66 + 1);
  long long v111 = 0;
  uint64_t v112 = 0;
  stat __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v71 + 8), *(void *)(v71 + 16), (uint64_t)(*(void *)(v71 + 16) - *(void *)(v71 + 8)) >> 2);
  memset(&v133, 0, sizeof(v133));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v133, v107, (uint64_t)v108, (v108 - (unsigned char *)v107) >> 3);
  memset(v134, 0, sizeof(v134));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v134, __p, (uint64_t)v111, (v111 - (unsigned char *)__p) >> 2);
  memset(v135, 0, sizeof(v135));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v135, v123[0], (uint64_t)v123[1], ((char *)v123[1] - (char *)v123[0]) >> 3);
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  uint64_t v138 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v136, v124[1], v125, (uint64_t)(v125 - (unint64_t)v124[1]) >> 2);
  long long v139 = 0uLL;
  *(void *)&long long v140 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, v117[0], (uint64_t)v117[1], ((char *)v117[1] - (char *)v117[0]) >> 3);
  long long v141 = 0uLL;
  *((void *)&v140 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v140 + 1, v118[1], v119, (uint64_t)(v119 - (unint64_t)v118[1]) >> 2);
  memset(v142, 0, sizeof(v142));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v142, v64, (uint64_t)(v64 + 2), 2uLL);
  memset(v143, 0, sizeof(v143));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v143, v113, (uint64_t)v114, (v114 - (unsigned char *)v113) >> 2);
  long long v105 = 0u;
  long long v106 = 0u;
  long long v104 = 0u;
  std::mutex::lock((std::mutex *)v97 + 25);
  int64_t v72 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v73 = os_signpost_id_generate(v72);
  unint64_t v74 = SNLPOSLoggerForCategory(7);
  if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v75 = v74;
    if (os_signpost_enabled(v74))
    {
      *(_WORD *)uint64_t v101 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v75, OS_SIGNPOST_INTERVAL_BEGIN, v73, "ITFM Inference", "", v101, 2u);
    }
  }
  uint64_t v76 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v101 = 0;
    _os_log_impl(&dword_1C8DA9000, v76, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Inference\"", v101, 2u);
  }
  (*(void (**)(uint8_t *__return_ptr))(**((void **)v97 + 114) + 16))(v101);
  unint64_t v100 = *(void **)v101;
  long long v104 = *(_OWORD *)v101;
  unint64_t v77 = (float *)*((void *)&v102 + 1);
  long long v105 = v102;
  __n128 v99 = (float *)v103;
  long long v106 = v103;
  unint64_t v78 = SNLPOSLoggerForCategory(7);
  if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v79 = v78;
    if (os_signpost_enabled(v78))
    {
      *(_WORD *)uint64_t v101 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v79, OS_SIGNPOST_INTERVAL_END, v73, "ITFM Inference", "", v101, 2u);
    }
  }
  std::string::size_type v80 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v101 = 0;
    _os_log_impl(&dword_1C8DA9000, v80, OS_LOG_TYPE_DEFAULT, "END \"ITFM Inference\"", v101, 2u);
  }
  std::mutex::unlock((std::mutex *)v97 + 25);
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse((sirinluinternalitfm::ITFMParserResponse *)v95);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::addHypothesesToResponse(v97, v95, (_DWORD **)&v104);
  uint64_t v81 = *(void **)(v95 + 8);
  unint64_t v82 = *(void *)(v95 + 16) - (void)v81;
  if (!v82) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  if (v82 <= 8) {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  int v83 = *(_DWORD *)(*v81 + 20);
  if (v77 == v99 || (uint64_t v84 = v77 + 1, v77 + 1 == v99))
  {
    char v91 = *(unsigned char *)(v95 + 48);
    *(unsigned char *)(v95 + 48) = v91 | 2;
    *(unsigned char *)(v95 + 44) = 0;
LABEL_91:
    int v85 = v83;
    goto LABEL_92;
  }
  int v85 = *(_DWORD *)(v81[1] + 20);
  float v86 = *v77;
  uint64_t v87 = v77;
  uint64_t v88 = v77 + 1;
  do
  {
    float v89 = *v88++;
    float v90 = v89;
    if (v86 < v89)
    {
      float v86 = v90;
      uint64_t v87 = v84;
    }
    uint64_t v84 = v88;
  }
  while (v88 != v99);
  char v91 = *(unsigned char *)(v95 + 48);
  *(unsigned char *)(v95 + 48) = v91 | 2;
  *(unsigned char *)(v95 + 44) = v87 != v77;
  if (v87 == v77) {
    goto LABEL_91;
  }
LABEL_92:
  *(unsigned char *)(v95 + 48) = v91 | 3;
  *(_DWORD *)(v95 + 40) = v85;
  if (v77) {
    operator delete(v77);
  }
  if (v100) {
    operator delete(v100);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&v133);
  if (__p)
  {
    long long v111 = __p;
    operator delete(__p);
  }
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
  if (v113)
  {
    std::string::size_type v114 = v113;
    operator delete(v113);
  }
  operator delete(v64);
  if ((_BYTE)v147) {
    MEMORY[0x1CB773D60](buf);
  }
  if (v116) {
    MEMORY[0x1CB773C30](v115);
  }
  if (v118[1]) {
    operator delete(v118[1]);
  }
  if (v117[0]) {
    operator delete(v117[0]);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (v124[1])
  {
    *(void **)&long long v125 = v124[1];
    operator delete(v124[1]);
  }
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (v130 && SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (v132 && SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E5BB98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C8E5BC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,int a51,__int16 a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  MEMORY[0x1CB773FB0](a11);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a25);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x230]);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a31);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v69);
  if (*(unsigned char *)(v70 - 144)) {
    MEMORY[0x1CB773D60](v70 - 256);
  }
  if (a50) {
    MEMORY[0x1CB773C30](&a40);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a52);
  STACK[0x230] = (unint64_t)&a59;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a62);
  STACK[0x230] = (unint64_t)&a69;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  JUMPOUT(0x1C8E5BD24);
}

void sub_1C8E5BD5C()
{
  uint64_t v0 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C8E5BCB4);
}

void sub_1C8E5BD74()
{
}

void sub_1C8E5BD7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8E5BCBCLL);
}

void sub_1C8E5BD94()
{
}

void sub_1C8E5BD9C()
{
}

void sub_1C8E5BDA4()
{
}

void sub_1C8E5BDB4(_Unwind_Exception *a1)
{
}

void sub_1C8E5BDBC()
{
}

void sub_1C8E5BDC4()
{
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::validateRequest(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this@<X0>, const sirinluinternalitfm::ITFMParserRequest *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  if ((itfm_inference_orchestrator::orchestration::ITFMOrchestrator::isAssetVersionValid(this) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "ITFM Orchestrator failed with incompatible major version");
LABEL_48:
    *(unsigned char *)(a3 + 24) = 1;
    return;
  }
  uint64_t v6 = *((void *)a2 + 8);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "Request does not contain a tokenised utterance");
    goto LABEL_48;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "Request does not contain a token chain");
    goto LABEL_48;
  }
  uint64_t v8 = *((void *)a2 + 1);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "Request does not contain embeddings");
    goto LABEL_48;
  }
  unint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *(void *)(v7 + 32) - *(void *)(v7 + 24);
  if (v9 == v10 >> 3) {
    goto LABEL_25;
  }
  std::to_string(&v32, v9);
  uint64_t v11 = std::string::insert(&v32, 0, "Request embeddings num tokens (");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v33, ") does not match actual num tokens (");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10 >> 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v17 = std::string::append(&v34, (const std::string::value_type *)p_p, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v35, ")");
  std::string v36 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (long long *)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a3 + 24))
  {
LABEL_25:
    unsigned int v20 = (*(uint64_t (**)(void))(**((void **)this + 114) + 32))(*((void *)this + 114));
    unint64_t v21 = *(void *)(*((void *)a2 + 1) + 56);
    if (v21 > v20)
    {
      std::to_string(&v32, v21);
      uint64_t v22 = std::string::insert(&v32, 0, "Request embeddings (");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      CFStringRef v24 = std::string::append(&v33, ") exceeds maximum (");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v26 = &__p;
      }
      else {
        long long v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = std::string::append(&v34, (const std::string::value_type *)v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      unint64_t v30 = std::string::append(&v35, ")");
      std::string v36 = *v30;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (long long *)&v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C8E5C154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(unsigned char *)(v33 + 24))
  {
    if (*(char *)(v33 + 23) < 0) {
      operator delete(*(void **)v33);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>(void **a1, _OWORD *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v9 = &v8[144 * v7];
  uint64_t v10 = (_OWORD *)MEMORY[0x1CB773EE0](&v8[144 * v2], a2);
  long long v11 = a2[6];
  long long v12 = a2[8];
  v10[7] = a2[7];
  uint8_t v10[8] = v12;
  v10[6] = v11;
  uint64_t v13 = v10 + 9;
  uint64_t v15 = (char *)*a1;
  long long v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v9;
  }
  else
  {
    do
    {
      unint64_t v16 = v10;
      uint64_t v10 = (_OWORD *)MEMORY[0x1CB773EE0](v10 - 9, v14 - 144);
      long long v17 = *((_OWORD *)v14 - 3);
      long long v18 = *((_OWORD *)v14 - 1);
      *(v16 - 2) = *((_OWORD *)v14 - 2);
      *(v16 - 1) = v18;
      *(v16 - 3) = v17;
      v14 -= 144;
    }
    while (v14 != v15);
    long long v14 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v9;
    while (v19 != v14)
    {
      v19 -= 144;
      MEMORY[0x1CB773EF0](v19);
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ITFM");
  SNLPAssetVersionChecks::assertAssetVersionValid((uint64_t)__p, (uint64_t)this + 52, *((void *)this + 10), (uint64_t)this + 88, (uint64_t)this + 128);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8E5C3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

itfm_inference_orchestrator::orchestration::ITFMOrchestrator *itfm_inference_orchestrator::orchestration::ITFMOrchestrator::addHypothesesToResponse(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *result, uint64_t a2, _DWORD **a3)
{
  if (*((void *)*a3 + 1))
  {
    uint64_t v4 = result;
    sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v9);
    char v5 = v13;
    v13 |= 1u;
    int v11 = 0;
    int v6 = *a3[3];
    char v13 = v5 | 3;
    int v12 = v6;
    itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getLabelStringFromTargetVocabulary(v4, 0, &__str);
    if (v8)
    {
      sirinluinternalitfm::ITFMHypothesis::makeStringLabel((uint64_t)v9);
      std::string::operator=(v10, &__str);
    }
    operator new();
  }
  return result;
}

void sub_1C8E5C5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  MEMORY[0x1CB773F60](&a18);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getLabelStringFromTargetVocabulary(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this@<X0>, itfm_inference_orchestrator::orchestration::itfm_response_types *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[24] = 0;
  char v5 = (itfm_inference_orchestrator::vocabulary::Vocabulary *)*((void *)this + 1);
  if (v5)
  {
    itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(v5, (unint64_t)a2, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a3, (long long *)&__p);
LABEL_8:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  int v6 = *((_DWORD *)this + 12);
  if (v6 == 4)
  {
    itfm_inference_orchestrator::orchestration::itfm_response_types::convertPSCLabelToStringLabel(a2, &__p);
LABEL_7:
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a3, (__n128 *)&__p);
    if (!v23) {
      return;
    }
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    itfm_inference_orchestrator::orchestration::itfm_response_types::convertSNLCLabelToStringLabel(a2, &__p);
    goto LABEL_7;
  }
  uint64_t v7 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v8 = *((_DWORD *)this + 12);
    unint64_t v9 = "UNKNOWN";
    uint64_t v10 = "SSU";
    int v11 = "LVC";
    int v12 = "PSC";
    char v13 = "OWL";
    long long v14 = "NLv4";
    uint64_t v15 = "NLv4";
    unint64_t v16 = "UaaP";
    long long v17 = "SNLC";
    switch(v8)
    {
      case 0:
        break;
      case 1:
LABEL_13:
        uint64_t v15 = "SNLC";
        long long v14 = v17;
        break;
      case 2:
LABEL_17:
        uint64_t v15 = "OWL";
        long long v14 = v13;
        break;
      case 3:
LABEL_18:
        uint64_t v15 = "UaaP";
        long long v14 = v16;
        break;
      case 4:
LABEL_19:
        uint64_t v15 = "PSC";
        long long v14 = v12;
        break;
      case 5:
LABEL_20:
        uint64_t v15 = "LVC";
        long long v14 = v11;
        break;
      case 6:
LABEL_21:
        uint64_t v15 = "SSU";
        long long v14 = v10;
        break;
      case 7:
LABEL_22:
        uint64_t v15 = "UNKNOWN";
        long long v14 = v9;
        break;
      default:
        long long v18 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v8;
          _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__p, 0x16u);
        }
        int v19 = *((_DWORD *)this + 12);
        uint64_t v15 = "NLv4";
        long long v17 = "<UNDEFINED_COMPONENT>";
        unint64_t v16 = "<UNDEFINED_COMPONENT>";
        char v13 = "<UNDEFINED_COMPONENT>";
        int v12 = "<UNDEFINED_COMPONENT>";
        int v11 = "<UNDEFINED_COMPONENT>";
        uint64_t v10 = "<UNDEFINED_COMPONENT>";
        unint64_t v9 = "<UNDEFINED_COMPONENT>";
        long long v14 = "<UNDEFINED_COMPONENT>";
        switch(v19)
        {
          case 0:
            goto LABEL_23;
          case 1:
            goto LABEL_13;
          case 2:
            goto LABEL_17;
          case 3:
            goto LABEL_18;
          case 4:
            goto LABEL_19;
          case 5:
            goto LABEL_20;
          case 6:
            goto LABEL_21;
          case 7:
            goto LABEL_22;
          default:
            uint64_t v20 = SNLPOSLoggerForCategory(4);
            BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
            long long v14 = "<UNDEFINED_COMPONENT>";
            uint64_t v15 = "<UNDEFINED_COMPONENT>";
            if (v21)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v19;
              _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__p, 0x16u);
              uint64_t v15 = "<UNDEFINED_COMPONENT>";
            }
            break;
        }
        break;
    }
LABEL_23:
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] Could not find output label mapping for component %s", (uint8_t *)&__p, 0x16u);
  }
}

uint64_t sirinluinternalitfm::ITFMHypothesis::makeStringLabel(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

char *std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t itfm_inference_orchestrator::orchestration::ITFMOrchestrator::isAssetVersionValid(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ITFM");
  uint64_t isAssetVersionValid = SNLPAssetVersionChecks::isAssetVersionValid((uint64_t *)__p, (uint64_t)this + 52, *((void *)this + 10), (uint64_t)this + 88, (uint64_t)this + 128);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return isAssetVersionValid;
}

void sub_1C8E5CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F235EC50;
  if (*(unsigned char *)(a11 + 24))
  {
    std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(__p);
    long long v13 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  }
  else
  {
    long long v13 = 0uLL;
  }
  *(_OWORD *)(a1 + 8) = v13;
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)(a1 + 24), "config.json");
  *(_DWORD *)(a1 + 48) = *a10;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(__p, a3);
  *(void *)(a1 + 52) = getAssetDirectoryGenerationNumber((const std::__fs::filesystem::path *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)(a1 + 64));
}

{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

{
  std::string v18;
  char v19;
  std::string v20;
  char v21;

  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    uint64_t v20 = *(std::string *)a5;
  }
  BOOL v21 = 1;
  if (*(char *)(a11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a11, *(void *)(a11 + 8));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    v18.__r_.__value_.__r.__words[2] = *(void *)(a11 + 16);
  }
  int v19 = 1;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v20, a6, a7, a8, a9, a10, (uint64_t)&v18);
}

{
  std::string v18;
  char v19;
  std::string v20;
  char v21;

  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    uint64_t v20 = *(std::string *)a5;
  }
  BOOL v21 = 1;
  if (*(char *)(a11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a11, *(void *)(a11 + 8));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    v18.__r_.__value_.__r.__words[2] = *(void *)(a11 + 16);
  }
  int v19 = 1;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v20, a6, a7, a8, a9, a10, (uint64_t)&v18);
}

void sub_1C8E5D9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t **a12, void **a13, nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer *a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (*(char *)(v59 - 233) < 0) {
    operator delete(*(void **)(v59 - 256));
  }
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a12, a33);
  if (a40 < 0) {
    operator delete(a35);
  }
  std::ifstream::~ifstream(&a53);
  if (a30 < 0) {
    operator delete(a25);
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(a14);
  uint64_t v60 = *(std::__shared_weak_count **)(v58 + 176);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  MEMORY[0x1CB774030](a17);
  if (*(char *)(v58 + 47) < 0) {
    operator delete(*a13);
  }
  unsigned int v61 = *(std::__shared_weak_count **)(v58 + 16);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(void *a1)
{
  unint64_t v2 = operator new(0xA8uLL);
  v2[1] = 0;
  uint64_t v2[2] = 0;
  *unint64_t v2 = &unk_1F2362270;
  __n128 result = itfm_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(v2 + 3);
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_1C8E5DE04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  char v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8E5DE5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  char v3 = (sirinluinternalsnlp_intermediate::ITFMAssetVersion *)sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(a1);
  sirinluinternalsnlp_intermediate::ITFMAssetVersion::makeVersion(v3);
  operator new();
}

void sub_1C8E5E034(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x1012C40EC159624);
  MEMORY[0x1CB774030](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1C8E5E0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::~ITFMModelBuilder(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t nlv4_inference_orchestrator::context::ContextLabelsExtractor::ContextLabelsExtractor(uint64_t a1, void *a2, _DWORD *a3)
{
  _OWORD v10[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v9, "SystemGaveOptions");
  std::string::basic_string[abi:ne180100]<0>(v10, "SystemOffered");
  std::unordered_set<std::string>::unordered_set(a1, v9, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0) {
      operator delete(*(void **)&v9[i * 8 + 24]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 40), "sda");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), "executed_task");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 88), "salient_entity");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 112), "active_task");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "sdas");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "executed_tasks");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 184), "salient_entities");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 208), "active_tasks");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 232), "_type=");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 256), "_full_path=");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 280), "_verb_entity=");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 304), "_verb=");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 328), "_below_verb=");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 352), "_are_present");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 376), "_are_absent");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 400), "[NO_SDAS]");
  *(void *)(a1 + 424) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 432) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 440) = *a3;
  return a1;
}

void sub_1C8E5E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17)
{
  if (v17[399] < 0) {
    operator delete(*v22);
  }
  if (v17[375] < 0) {
    operator delete(*v24);
  }
  if (v17[351] < 0) {
    operator delete(*v23);
  }
  if (v17[327] < 0) {
    operator delete(*v21);
  }
  if (v17[303] < 0) {
    operator delete(*v20);
  }
  if (v17[279] < 0) {
    operator delete(*v19);
  }
  if (v17[255] < 0) {
    operator delete(*v18);
  }
  if (v17[231] < 0) {
    operator delete(*a10);
  }
  if (v17[207] < 0) {
    operator delete(*a11);
  }
  if (v17[183] < 0) {
    operator delete(*a12);
  }
  if (v17[159] < 0) {
    operator delete(*a13);
  }
  if (v17[135] < 0) {
    operator delete(*a14);
  }
  if (v17[111] < 0) {
    operator delete(*a15);
  }
  if (v17[87] < 0) {
    operator delete(*a16);
  }
  if (v17[63] < 0) {
    operator delete(*a17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v17);
  _Unwind_Resume(a1);
}

void sub_1C8E5E508()
{
}

void sub_1C8E5E510()
{
}

void sub_1C8E5E518()
{
}

void sub_1C8E5E520()
{
}

void sub_1C8E5E528()
{
}

void sub_1C8E5E530()
{
}

void sub_1C8E5E538()
{
}

void sub_1C8E5E540()
{
  uint64_t v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 47) < 0) {
      operator delete(*(void **)(v0 + v1 + 24));
    }
    v1 -= 24;
    if (v1 == -48) {
      JUMPOUT(0x1C8E5E500);
    }
  }
}

void sub_1C8E5E56C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8E5E500);
}

void sub_1C8E5E584()
{
}

uint64_t std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v28 = (float *)(a1 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  char v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    int v6 = (void *)(a1 + 24);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        int v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v28, i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v15 = (char *)operator new(0x48uLL);
      unint64_t v16 = v15;
      v29[0] = v15;
      v29[1] = a1 + 16;
      char v30 = 0;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        *((void *)v15 + 4) = *((void *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v16 + 40), (uint64_t)(v5 + 40));
      char v30 = 1;
      float v18 = (float)(unint64_t)(*v6 + 1);
      float v19 = *v28;
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * v2);
      uint64_t v25 = v29[0];
      if (v24)
      {
        *(void *)v29[0] = *v24;
      }
      else
      {
        *(void *)v29[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v25;
        *(void *)(*(void *)a1 + 8 * v2) = a1 + 16;
        if (!*(void *)v25) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*(void *)v25 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        uint64_t v24 = (void *)(*(void *)a1 + 8 * v26);
      }
      *uint64_t v24 = v25;
LABEL_43:
      v29[0] = 0;
      ++*v6;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_44:
      char v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C8E5E84C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  char v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8E5E8D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [43],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  char v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8E5E92C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1F2362648[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

void sub_1C8E5E9AC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int v12 = operator new(0x18uLL);
  *int v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v12 = *v20;
LABEL_38:
    *BOOL v20 = v12;
    goto LABEL_39;
  }
  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1C8E5EC14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(a1 + 152));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2362270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  LOBYTE(v11) = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  char v10 = 0;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v11, a5, a6, a7, a8, a9, (uint64_t)&__p);
}

{
  void *__p;
  char v10;
  uint64_t v11;
  char v12;

  LOBYTE(v11) = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  char v10 = 0;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v11, a5, a6, a7, a8, a9, (uint64_t)&__p);
}

void sub_1C8E5EE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v19 - 24))
  {
    if (*(char *)(v19 - 25) < 0) {
      operator delete(*(void **)(v19 - 48));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E5EF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v19 - 24))
  {
    if (*(char *)(v19 - 25) < 0) {
      operator delete(*(void **)(v19 - 48));
    }
  }
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10)
{
  LOBYTE(__p) = 0;
  char v21 = 0;
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a10, *(void *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v18.__r_.__value_.__r.__words[2] = *(void *)(a10 + 16);
  }
  char v19 = 1;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&__p, a5, a6, a7, a8, a9, (uint64_t)&v18);
}

{
  std::string v18;
  char v19;
  void *__p;
  char v21;

  LOBYTE(__p) = 0;
  char v21 = 0;
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a10, *(void *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v18.__r_.__value_.__r.__words[2] = *(void *)(a10 + 16);
  }
  char v19 = 1;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&__p, a5, a6, a7, a8, a9, (uint64_t)&v18);
}

void sub_1C8E5F094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E5F1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v19 = *(std::string *)a5;
  }
  char v20 = 1;
  LOBYTE(__p) = 0;
  char v18 = 0;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v19, a6, a7, a8, a9, a10, (uint64_t)&__p);
}

{
  void *__p;
  char v18;
  std::string v19;
  char v20;

  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v19 = *(std::string *)a5;
  }
  char v20 = 1;
  LOBYTE(__p) = 0;
  char v18 = 0;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, (uint64_t)&v19, a6, a7, a8, a9, a10, (uint64_t)&__p);
}

void sub_1C8E5F31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  if (a26)
  {
    if (a25 < 0) {
      operator delete(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E5F458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  if (a26)
  {
    if (a25 < 0) {
      operator delete(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E5F5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E5F720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::ContactTypeSplit(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *a1, _OWORD **a2, unsigned int **a3)
{
  unint64_t v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_ContactTypeSplit");
  v6[3] = "contact_type_split";
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "contactType");
  std::string::basic_string[abi:ne180100]<0>((void *)a1 + 7, "emailType");
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>((void *)a1 + 10, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getContactTypeMatchingSpans(a1, a3, (uint64_t)a1 + 104);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans((uint64_t)a1, a3, (uint64_t)a1 + 144);
  return a1;
}

void sub_1C8E5F840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v5);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getContactTypeMatchingSpans(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::isContactTypeMatchingSpan(this, (const sirinluinternal::MatchingSpan *)v5))
      {
        unint64_t v8 = v5[19];
        *(void *)char v12 = v8;
        unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t *)a3, v8, v12);
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v9 + 3, (uint64_t)v5);
        ++v7;
      }
      v5 += 22;
    }
    while (v5 != v6);
  }
  char v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *((void *)this + 3);
    *(_DWORD *)char v12 = 136315394;
    *(void *)&v12[4] = v11;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu contact type matching spans", v12, 0x16u);
  }
}

void sub_1C8E5F9DC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan((nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)v5, (const sirinluinternal::MatchingSpan *)a2))
      {
        unint64_t v8 = v5[19];
        *(void *)unint64_t v17 = v8;
        unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t *)a3, v8, v17);
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v9 + 3, (uint64_t)v5);
        ++v7;
      }
      v5 += 22;
    }
    while (v5 != v6);
    for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
    {
      uint64_t v11 = i[3];
      char v12 = (sirinluinternal *)i[4];
      unint64_t v13 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v12 - v11) >> 3));
      if (v12 == (sirinluinternal *)v11) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = (sirinluinternal::MatchingSpan *)v13;
      }
      std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(v11, v12, v14, 1);
    }
  }
  uint64_t v15 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 24);
    *(_DWORD *)unint64_t v17 = 136315394;
    *(void *)&v17[4] = v16;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu person matching spans", v17, 0x16u);
  }
}

void sub_1C8E5FB64(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = *(char **)v2;
      unint64_t v6 = (void **)(v2 + 24);
      std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  char v12 = a1 + 2;
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *unint64_t v22 = *v28;
          *uint64_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unint64_t v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  os_signpost_id_t v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *os_signpost_id_t v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  *char v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    os_signpost_id_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C8E5FFCC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(uint64_t result, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3, char a4)
{
  unint64_t v7 = a3;
  uint8x8_t v8 = (sirinluinternal *)result;
  while (2)
  {
    unint64_t v9 = a2;
    char v10 = (sirinluinternal *)((char *)a2 - 88);
    unint64_t v11 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint8x8_t v8 = v11;
          uint64_t v12 = v9 - v11;
          uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) <= (*((_DWORD *)v8 + 18)
                                                                               - *((_DWORD *)v8 + 19)))
                  return result;
                unint64_t v49 = v8;
                os_signpost_id_t v50 = (sirinluinternal *)((char *)a2 - 88);
                break;
              case 3:
                return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v8, (sirinluinternal *)((char *)v8 + 88), v10);
              case 4:
                return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v8, (sirinluinternal *)((char *)v8 + 88), (sirinluinternal *)((char *)v8 + 176), v10);
              case 5:
                float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v8, (sirinluinternal *)((char *)v8 + 88), (sirinluinternal *)((char *)v8 + 176), (sirinluinternal *)((char *)v8 + 264));
                if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) <= (*((_DWORD *)v8 + 84)
                                                                               - *((_DWORD *)v8 + 85)))
                  return result;
                float result = sirinluinternal::swap((sirinluinternal *)((char *)v8 + 264), v10, v51);
                if (*((_DWORD *)v8 + 84) - *((_DWORD *)v8 + 85) <= (*((_DWORD *)v8 + 62)
                                                                                 - *((_DWORD *)v8 + 63)))
                  return result;
                float result = sirinluinternal::swap((sirinluinternal *)((char *)v8 + 176), (sirinluinternal *)((char *)v8 + 264), v52);
                if (*((_DWORD *)v8 + 62) - *((_DWORD *)v8 + 63) <= (*((_DWORD *)v8 + 40)
                                                                                 - *((_DWORD *)v8 + 41)))
                  return result;
                float result = sirinluinternal::swap((sirinluinternal *)((char *)v8 + 88), (sirinluinternal *)((char *)v8 + 176), v53);
                if (*((_DWORD *)v8 + 40) - *((_DWORD *)v8 + 41) <= (*((_DWORD *)v8 + 18)
                                                                                 - *((_DWORD *)v8 + 19)))
                  return result;
                unint64_t v49 = v8;
                os_signpost_id_t v50 = (sirinluinternal *)((char *)v8 + 88);
                break;
              default:
                JUMPOUT(0);
            }
            return sirinluinternal::swap(v49, v50, a3);
          }
          if (v12 <= 2111)
          {
            if (a4)
            {
              if (v8 != v9)
              {
                uint64_t v54 = (sirinluinternal *)((char *)v8 + 88);
                if ((sirinluinternal *)((char *)v8 + 88) != a2)
                {
                  uint64_t v55 = 0;
                  uint64_t v56 = v8;
                  do
                  {
                    int v57 = *((_DWORD *)v56 + 40);
                    int v58 = *((_DWORD *)v56 + 41);
                    int v59 = *((_DWORD *)v56 + 18);
                    int v60 = *((_DWORD *)v56 + 19);
                    uint64_t v56 = v54;
                    if (v57 - v58 > (v59 - v60))
                    {
                      MEMORY[0x1CB773DF0](v85, v54);
                      uint64_t v61 = v55;
                      do
                      {
                        uint64_t v62 = (char *)v8 + v61;
                        sirinluinternal::MatchingSpan::operator=();
                        if (!v61) {
                          break;
                        }
                        v61 -= 88;
                      }
                      while (v86 - v87 > (*((_DWORD *)v62 - 4) - *((_DWORD *)v62 - 3)));
                      sirinluinternal::MatchingSpan::operator=();
                      float result = MEMORY[0x1CB773E20](v85);
                    }
                    uint64_t v54 = (sirinluinternal *)((char *)v56 + 88);
                    v55 += 88;
                  }
                  while ((sirinluinternal *)((char *)v56 + 88) != a2);
                }
              }
            }
            else if (v8 != v9)
            {
              std::string::size_type v80 = (_DWORD *)((char *)v8 + 88);
              if ((sirinluinternal *)((char *)v8 + 88) != a2)
              {
                do
                {
                  uint64_t v81 = v80;
                  if (*((_DWORD *)v8 + 40) - *((_DWORD *)v8 + 41) > (*((_DWORD *)v8 + 18)
                                                                                  - *((_DWORD *)v8 + 19)))
                  {
                    MEMORY[0x1CB773DF0](v85, v80);
                    do
                    {
                      unint64_t v82 = v8;
                      sirinluinternal::MatchingSpan::operator=();
                      uint8x8_t v8 = (sirinluinternal *)((char *)v8 - 88);
                    }
                    while (v86 - v87 > (*((_DWORD *)v82 - 4) - *((_DWORD *)v82 - 3)));
                    sirinluinternal::MatchingSpan::operator=();
                    float result = MEMORY[0x1CB773E20](v85);
                  }
                  std::string::size_type v80 = v81 + 22;
                  uint8x8_t v8 = (sirinluinternal *)v81;
                }
                while (v81 + 22 != (_DWORD *)a2);
              }
            }
            return result;
          }
          if (!v7)
          {
            if (v8 != v9)
            {
              int64_t v63 = (unint64_t)(v13 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = (_DWORD *)((char *)v8 + 88 * v66);
                  if (2 * v64 + 2 < v13)
                  {
                    BOOL v68 = *((_DWORD *)v8 + 22 * v66 + 18) - *((_DWORD *)v8 + 22 * v66 + 19) > (v67[40] - v67[41]);
                    v67 += 22 * v68;
                    if (v68) {
                      uint64_t v66 = 2 * v64 + 2;
                    }
                  }
                  if (v67[18] - v67[19] <= (*((_DWORD *)v8 + 22 * v64 + 18)
                                                         - *((_DWORD *)v8 + 22 * v64 + 19)))
                  {
                    MEMORY[0x1CB773DF0](v85, (char *)v8 + 88 * v64);
                    do
                    {
                      sirinluinternal::MatchingSpan::operator=();
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v69 = (2 * v66) | 1;
                      uint64_t v70 = (_DWORD *)((char *)v8 + 88 * v69);
                      if (2 * v66 + 2 < v13)
                      {
                        BOOL v68 = *((_DWORD *)v8 + 22 * v69 + 18) - *((_DWORD *)v8 + 22 * v69 + 19) > (v70[40] - v70[41]);
                        v70 += 22 * v68;
                        if (v68) {
                          uint64_t v69 = 2 * v66 + 2;
                        }
                      }
                      uint64_t v66 = v69;
                    }
                    while (v70[18] - v70[19] <= (v86 - v87));
                    sirinluinternal::MatchingSpan::operator=();
                    MEMORY[0x1CB773E20](v85);
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              int64_t v71 = v12 / 0x58uLL;
              do
              {
                MEMORY[0x1CB773DF0](v84, v8);
                uint64_t v72 = 0;
                os_signpost_id_t v73 = (char *)v8;
                do
                {
                  uint64_t v74 = v72 + 1;
                  uint64_t v75 = &v73[88 * v72 + 88];
                  uint64_t v76 = (2 * v72) | 1;
                  uint64_t v77 = 2 * v72 + 2;
                  if (v77 < v71)
                  {
                    BOOL v68 = *(_DWORD *)&v73[88 * v74 + 72] - *(_DWORD *)&v73[88 * v74 + 76] > (*((_DWORD *)v75 + 40) - *((_DWORD *)v75 + 41));
                    v75 += 88 * v68;
                    if (v68) {
                      uint64_t v76 = v77;
                    }
                  }
                  sirinluinternal::MatchingSpan::operator=();
                  os_signpost_id_t v73 = v75;
                  uint64_t v72 = v76;
                }
                while (v76 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
                BOOL v5 = v75 == (char *)a2 - 88;
                a2 = (sirinluinternal *)((char *)a2 - 88);
                if (v5)
                {
                  sirinluinternal::MatchingSpan::operator=();
                }
                else
                {
                  sirinluinternal::MatchingSpan::operator=();
                  sirinluinternal::MatchingSpan::operator=();
                  uint64_t v78 = v75 - (char *)v8 + 88;
                  if (v78 >= 89)
                  {
                    unint64_t v79 = (v78 / 0x58uLL - 2) >> 1;
                    if (*((_DWORD *)v8 + 22 * v79 + 18) - *((_DWORD *)v8 + 22 * v79 + 19) > (*((_DWORD *)v75 + 18) - *((_DWORD *)v75 + 19)))
                    {
                      MEMORY[0x1CB773DF0](v85, v75);
                      do
                      {
                        sirinluinternal::MatchingSpan::operator=();
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                      }
                      while (*((_DWORD *)v8 + 22 * v79 + 18) - *((_DWORD *)v8 + 22 * v79 + 19) > (v86 - v87));
                      sirinluinternal::MatchingSpan::operator=();
                      MEMORY[0x1CB773E20](v85);
                    }
                  }
                }
                float result = MEMORY[0x1CB773E20](v84);
                BOOL v68 = v71-- <= 2;
              }
              while (!v68);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          BOOL v15 = (sirinluinternal *)((char *)v8 + 88 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 < 0x2C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v15, v8, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v8, v15, v10);
            uint64_t v16 = 88 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v8 + 88), (sirinluinternal *)((char *)v8 + v16 - 88), (sirinluinternal *)((char *)a2 - 176));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v8 + 176), (sirinluinternal *)((char *)v8 + v16 + 88), (sirinluinternal *)((char *)a2 - 264));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v8 + v16 - 88), v15, (sirinluinternal *)((char *)v8 + v16 + 88));
            sirinluinternal::swap(v8, v15, v17);
          }
          unint64_t v7 = (sirinluinternal::MatchingSpan *)((char *)v7 - 1);
          if ((a4 & 1) != 0
            || *((_DWORD *)v8 - 4) - *((_DWORD *)v8 - 3) > (*((_DWORD *)v8 + 18) - *((_DWORD *)v8 + 19)))
          {
            break;
          }
          MEMORY[0x1CB773DF0](v85, v8);
          unsigned int v36 = v86 - v87;
          if (v86 - v87 <= (*((_DWORD *)v9 - 4) - *((_DWORD *)v9 - 3)))
          {
            uint64_t v39 = (sirinluinternal *)((char *)v8 + 88);
            do
            {
              unint64_t v11 = v39;
              if (v39 >= v9) {
                break;
              }
              unsigned int v40 = *((_DWORD *)v39 + 18) - *((_DWORD *)v39 + 19);
              uint64_t v39 = (sirinluinternal::MatchingSpan *)((char *)v39 + 88);
            }
            while (v36 <= v40);
          }
          else
          {
            uint64_t v37 = v8;
            do
            {
              unint64_t v11 = (sirinluinternal *)((char *)v37 + 88);
              unsigned int v38 = *((_DWORD *)v37 + 40) - *((_DWORD *)v37 + 41);
              uint64_t v37 = (sirinluinternal *)((char *)v37 + 88);
            }
            while (v36 <= v38);
          }
          unsigned int v41 = v9;
          if (v11 < v9)
          {
            uint64_t v42 = v9;
            do
            {
              unsigned int v41 = (sirinluinternal *)((char *)v42 - 88);
              unsigned int v43 = *((_DWORD *)v42 - 4) - *((_DWORD *)v42 - 3);
              uint64_t v42 = (sirinluinternal *)((char *)v42 - 88);
            }
            while (v36 > v43);
          }
          while (v11 < v41)
          {
            sirinluinternal::swap(v11, v41, v35);
            unsigned int v44 = v86 - v87;
            do
            {
              int v45 = *((_DWORD *)v11 + 40);
              int v46 = *((_DWORD *)v11 + 41);
              unint64_t v11 = (sirinluinternal::MatchingSpan *)((char *)v11 + 88);
            }
            while (v44 <= v45 - v46);
            do
            {
              int v47 = *((_DWORD *)v41 - 4);
              int v48 = *((_DWORD *)v41 - 3);
              unsigned int v41 = (sirinluinternal::MatchingSpan *)((char *)v41 - 88);
            }
            while (v44 > v47 - v48);
          }
          if ((sirinluinternal::MatchingSpan *)((char *)v11 - 88) != v8) {
            sirinluinternal::MatchingSpan::operator=();
          }
          sirinluinternal::MatchingSpan::operator=();
          float result = MEMORY[0x1CB773E20](v85);
          a4 = 0;
        }
        MEMORY[0x1CB773DF0](v85, v8);
        unsigned int v19 = v86 - v87;
        uint64_t v20 = v8;
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (sirinluinternal *)((char *)v20 + 88);
        }
        while (*((_DWORD *)v21 + 40) - *((_DWORD *)v21 + 41) > v19);
        unint64_t v22 = v9;
        if (v21 == v8)
        {
          unint64_t v25 = a2;
          while (v20 < v25)
          {
            unint64_t v23 = (sirinluinternal *)((char *)v25 - 88);
            unsigned int v26 = *((_DWORD *)v25 - 4) - *((_DWORD *)v25 - 3);
            unint64_t v25 = (sirinluinternal *)((char *)v25 - 88);
            if (v26 > v19) {
              goto LABEL_22;
            }
          }
          unint64_t v23 = v25;
        }
        else
        {
          do
          {
            unint64_t v23 = (sirinluinternal *)((char *)v22 - 88);
            unsigned int v24 = *((_DWORD *)v22 - 4) - *((_DWORD *)v22 - 3);
            unint64_t v22 = (sirinluinternal *)((char *)v22 - 88);
          }
          while (v24 <= v19);
        }
LABEL_22:
        if (v20 < v23)
        {
          uint64_t v27 = v20;
          uint64_t v28 = v23;
          do
          {
            sirinluinternal::swap(v27, v28, v18);
            unsigned int v29 = v86 - v87;
            do
            {
              uint64_t v21 = v27;
              uint64_t v27 = (sirinluinternal *)((char *)v27 + 88);
            }
            while (*((_DWORD *)v21 + 40) - *((_DWORD *)v21 + 41) > v29);
            do
            {
              int v30 = *((_DWORD *)v28 - 4);
              int v31 = *((_DWORD *)v28 - 3);
              uint64_t v28 = (sirinluinternal::MatchingSpan *)((char *)v28 - 88);
            }
            while (v30 - v31 <= v29);
          }
          while (v27 < v28);
        }
        if (v21 != v8) {
          sirinluinternal::MatchingSpan::operator=();
        }
        sirinluinternal::MatchingSpan::operator=();
        MEMORY[0x1CB773E20](v85);
        BOOL v4 = v20 >= v23;
        unint64_t v9 = a2;
        if (v4) {
          break;
        }
LABEL_34:
        float result = std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(v8, v21, v7, a4 & 1);
        a4 = 0;
        unint64_t v11 = (sirinluinternal *)((char *)v21 + 88);
      }
      BOOL v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v8, v21, v32);
      unint64_t v11 = (sirinluinternal *)((char *)v21 + 88);
      float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v21 + 88), a2, v34);
      if (result) {
        break;
      }
      if (!v33) {
        goto LABEL_34;
      }
    }
    a2 = v21;
    if (!v33) {
      continue;
    }
    return result;
  }
}

sirinluinternal *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *this, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3)
{
  BOOL v5 = this;
  unsigned int v6 = *((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19);
  unsigned int v7 = *((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19);
  if (v6 <= *((_DWORD *)this + 18) - *((_DWORD *)this + 19))
  {
    if (v7 <= v6) {
      return this;
    }
    this = (sirinluinternal *)sirinluinternal::swap(a2, a3, a3);
    if (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19) <= (*((_DWORD *)v5 + 18) - *((_DWORD *)v5 + 19))) {
      return this;
    }
    this = v5;
    uint8x8_t v8 = a2;
  }
  else
  {
    if (v7 <= v6)
    {
      this = (sirinluinternal *)sirinluinternal::swap(this, a2, a3);
      if (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19) <= (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19))) {
        return this;
      }
      this = a2;
    }
    uint8x8_t v8 = a3;
  }
  return (sirinluinternal *)sirinluinternal::swap(this, v8, a3);
}

sirinluinternal *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *a1, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3, sirinluinternal::MatchingSpan *a4)
{
  float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(a1, a2, a3);
  if (*((_DWORD *)a4 + 18) - *((_DWORD *)a4 + 19) > (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19)))
  {
    float result = (sirinluinternal *)sirinluinternal::swap(a3, a4, v9);
    if (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19) > (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19)))
    {
      float result = (sirinluinternal *)sirinluinternal::swap(a2, a3, v10);
      if (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19) > (*((_DWORD *)a1 + 18) - *((_DWORD *)a1 + 19)))
      {
        return (sirinluinternal *)sirinluinternal::swap(a1, a2, v11);
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *this, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3)
{
  BOOL v5 = 1;
  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - this) >> 3))
  {
    case 0:
    case 1:
      return v5;
    case 2:
      if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)this + 18) - *((_DWORD *)this + 19))) {
        sirinluinternal::swap(this, (sirinluinternal *)((char *)a2 - 88), a3);
      }
      return v5;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)a2 - 88));
      return v5;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)a2 - 88));
      return v5;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)this + 264));
      if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)this + 84) - *((_DWORD *)this + 85)))
      {
        sirinluinternal::swap((sirinluinternal *)((char *)this + 264), (sirinluinternal *)((char *)a2 - 88), v12);
        if (*((_DWORD *)this + 84) - *((_DWORD *)this + 85) > (*((_DWORD *)this + 62)
                                                                            - *((_DWORD *)this + 63)))
        {
          sirinluinternal::swap((sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)this + 264), v13);
          if (*((_DWORD *)this + 62) - *((_DWORD *)this + 63) > (*((_DWORD *)this + 40)
                                                                              - *((_DWORD *)this + 41)))
          {
            sirinluinternal::swap((sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), v14);
            if (*((_DWORD *)this + 40) - *((_DWORD *)this + 41) > (*((_DWORD *)this + 18)
                                                                                - *((_DWORD *)this + 19)))
              sirinluinternal::swap(this, (sirinluinternal *)((char *)this + 88), v15);
          }
        }
      }
      return 1;
    default:
      unsigned int v6 = (sirinluinternal *)((char *)this + 176);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176));
      unsigned int v7 = (sirinluinternal *)((char *)this + 264);
      if ((sirinluinternal *)((char *)this + 264) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (*((_DWORD *)v7 + 18) - *((_DWORD *)v7 + 19) <= (*((_DWORD *)v6 + 18) - *((_DWORD *)v6 + 19)))
  {
LABEL_13:
    unsigned int v6 = v7;
    v8 += 88;
    unsigned int v7 = (sirinluinternal *)((char *)v7 + 88);
    if (v7 == a2) {
      return 1;
    }
  }
  MEMORY[0x1CB773DF0](v17, v7);
  uint64_t v10 = v8;
  do
  {
    sirinluinternal::MatchingSpan::operator=();
    if (v10 == -176) {
      break;
    }
    unsigned int v11 = *(_DWORD *)((char *)this + v10 + 160) - *(_DWORD *)((char *)this + v10 + 164);
    v10 -= 88;
  }
  while (v18 - v19 > v11);
  sirinluinternal::MatchingSpan::operator=();
  if (++v9 != 8)
  {
    MEMORY[0x1CB773E20](v17);
    goto LABEL_13;
  }
  BOOL v5 = (sirinluinternal *)((char *)v7 + 88) == a2;
  MEMORY[0x1CB773E20](v17);
  return v5;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 3;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::isContactTypeMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, const sirinluinternal::MatchingSpan *a2)
{
  BOOL v4 = (const void **)((char *)this + 32);
  uint64_t v5 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0)
  {
    unsigned int v6 = (char *)*((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
  }
  else
  {
    unsigned int v6 = (char *)this + 32;
    uint64_t v7 = v5;
  }
  unsigned __int8 v8 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v6, v7, 2, a2);
  int v9 = (unsigned __int8 *)*((void *)a2 + 6);
  if ((v5 & 0x80u) == 0) {
    uint64_t v10 = v5;
  }
  else {
    uint64_t v10 = *((void *)this + 5);
  }
  int v11 = (char)v9[23];
  if (v11 >= 0) {
    uint64_t v12 = v9[23];
  }
  else {
    uint64_t v12 = *((void *)v9 + 1);
  }
  if (v10 != v12) {
    goto LABEL_20;
  }
  if (v11 >= 0) {
    uint64_t v13 = (unsigned __int8 *)*((void *)a2 + 6);
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)v9;
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v4, v13, *((void *)this + 5))) {
      goto LABEL_21;
    }
LABEL_20:
    unsigned __int8 v14 = v8;
    BOOL v15 = 0;
    goto LABEL_30;
  }
  if (v5)
  {
    while (*(unsigned __int8 *)v4 == *v13)
    {
      BOOL v4 = (const void **)((char *)v4 + 1);
      ++v13;
      if (!--v5) {
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v16 = (_DWORD *)*((void *)a2 + 1);
  unint64_t v17 = (_DWORD *)*((void *)a2 + 2);
  if (v16 != v17)
  {
    while (*v16 != 3 && *v16 != 8)
    {
      if (++v16 == v17)
      {
        unsigned __int8 v14 = v8;
        uint64_t v16 = (_DWORD *)*((void *)a2 + 2);
        goto LABEL_29;
      }
    }
  }
  unsigned __int8 v14 = v8;
LABEL_29:
  BOOL v15 = v17 != v16;
LABEL_30:
  int v19 = (const void **)((char *)this + 56);
  uint64_t v20 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    uint64_t v21 = (char *)*((void *)this + 7);
    uint64_t v22 = *((void *)this + 8);
  }
  else
  {
    uint64_t v21 = (char *)this + 56;
    uint64_t v22 = *((unsigned __int8 *)this + 79);
  }
  unsigned int v23 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v21, v22, 2, a2);
  if ((v20 & 0x80u) == 0) {
    uint64_t v24 = v20;
  }
  else {
    uint64_t v24 = *((void *)this + 8);
  }
  if (v24 != v12) {
    goto LABEL_46;
  }
  if (v11 >= 0) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(unsigned __int8 **)v9;
  }
  if ((v20 & 0x80) != 0)
  {
    unsigned int v26 = v23;
    int v27 = memcmp(*v19, v25, *((void *)this + 8));
    unsigned int v23 = v26;
    if (!v27) {
      goto LABEL_47;
    }
LABEL_46:
    BOOL v28 = 0;
    goto LABEL_55;
  }
  if (v20)
  {
    while (*(unsigned __int8 *)v19 == *v25)
    {
      int v19 = (const void **)((char *)v19 + 1);
      ++v25;
      if (!--v20) {
        goto LABEL_47;
      }
    }
    goto LABEL_46;
  }
LABEL_47:
  unsigned int v29 = (_DWORD *)*((void *)a2 + 1);
  int v30 = (_DWORD *)*((void *)a2 + 2);
  if (v29 != v30)
  {
    while (*v29 != 3 && *v29 != 8)
    {
      if (++v29 == v30)
      {
        unsigned int v29 = (_DWORD *)*((void *)a2 + 2);
        break;
      }
    }
  }
  BOOL v28 = v30 != v29;
LABEL_55:
  unsigned int v32 = v23 | v28;
  if ((v14 | v15)) {
    return 1;
  }
  else {
    return v32;
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitContactTypes(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  BOOL v4 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_DEBUG, "[%s] Splitting common_Person nodes in-place", buf, 0xCu);
  }
  unsigned int v6 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Iterating through all tree nodes", buf, 0xCu);
  }
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)std::string buf = 0u;
  uint64_t v39 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v39);
  uint64_t v8 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    LOBYTE(v9) = 0;
    while (1)
    {
      char v38 = v9;
      uint64_t v10 = v8 - 1;
      uint64_t v11 = *(void *)(*(void *)(*(void *)&buf[8] + (((unint64_t)(v44 + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v44 + v10) & 0x1FF));
      *((void *)&v44 + 1) = v10;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
      uint64_t v37 = *((void *)this + 3);
      uint64_t v39 = 0;
      unsigned int v40 = 0;
      uint64_t v41 = 0;
      uint64_t v12 = *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 88);
      if (v12 == *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 96))
      {
        unsigned __int8 v14 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        unsigned __int8 v14 = 0;
        BOOL v15 = 0;
        do
        {
          if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitCommonPersonNodes(this, (unint64_t *)&v39, v12))
          {
            if ((unint64_t)v14 >= v13)
            {
              uint64_t v16 = ((char *)v14 - (char *)v15) >> 3;
              unint64_t v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v13 - (void)v15) >> 2 > v17) {
                unint64_t v17 = (uint64_t)(v13 - (void)v15) >> 2;
              }
              if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v17;
              }
              if (v18) {
                unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v18);
              }
              else {
                uint64_t v19 = 0;
              }
              uint64_t v20 = (unint64_t *)(v18 + 8 * v16);
              *uint64_t v20 = (unint64_t)v12;
              uint64_t v21 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v20 + 1);
              if (v14 != (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15)
              {
                do
                {
                  unint64_t v22 = (unint64_t)*--v14;
                  *--uint64_t v20 = v22;
                }
                while (v14 != (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15);
                unsigned __int8 v14 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15;
              }
              BOOL v15 = v20;
              unint64_t v13 = v18 + 8 * v19;
              if (v14) {
                operator delete(v14);
              }
              unsigned __int8 v14 = v21;
            }
            else
            {
              *v14++ = v12;
            }
          }
          uint64_t v12 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v12 + 144);
        }
        while (v12 != *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 96));
        if (v15 != (unint64_t *)v14)
        {
          unsigned int v23 = SNLPOSLoggerForCategory(1);
          BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          uint64_t v25 = (char *)v14 - (char *)v15;
          if (v24)
          {
            *(_DWORD *)int v45 = 136315394;
            unint64_t v26 = v25 >> 3;
            *(void *)&v45[4] = v37;
            __int16 v46 = 2048;
            uint64_t v47 = v25 >> 3;
            _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_DEBUG, "[%s] Deleting %lu nodes", v45, 0x16u);
          }
          else
          {
            unint64_t v26 = v25 >> 3;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v14, (unint64_t *)v14, (uint64_t)v15, v15, 126 - 2 * __clz(v26), 1);
          BOOL v28 = (uint64_t *)v15;
          do
          {
            uint64_t v29 = *v28++;
            int v30 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((long long *)(v29 + 144), *(long long **)(v11 + 96), v29);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v11 + 88, v30);
          }
          while (v28 != (uint64_t *)v14);
          unsigned int v27 = 1;
          unsigned __int8 v14 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15;
          goto LABEL_37;
        }
      }
      unsigned int v27 = 0;
LABEL_37:
      if (v39 != v40)
      {
        int v31 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v45 = 136315394;
          *(void *)&v45[4] = v37;
          __int16 v46 = 2048;
          uint64_t v47 = 0x8E38E38E38E38E39 * ((v40 - v39) >> 4);
          _os_log_impl(&dword_1C8DA9000, v31, OS_LOG_TYPE_DEBUG, "[%s] Inserting %lu spawned nodes", v45, 0x16u);
        }
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve((uint64_t *)(v11 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v11 + 96) - *(void *)(v11 + 88)) >> 4)- 0x71C71C71C71C71C7 * ((v40 - v39) >> 4));
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(v39, v40, (uint64_t *)(v11 + 88));
        unsigned int v27 = 1;
      }
      *(void *)int v45 = &v39;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
      if (v14) {
        operator delete(v14);
      }
      if (v38) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v27;
      }
      unsigned int v32 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v11 + 88);
      BOOL v33 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v11 + 96);
      while (v32 != v33)
      {
        uint64_t v39 = v32;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v39);
        unsigned int v32 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v32 + 144);
      }
      uint64_t v8 = *((void *)&v44 + 1);
      if (!*((void *)&v44 + 1)) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_52:
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
  uint64_t v34 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v35 = *((void *)this + 3);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_DEBUG, "[%s] Finished iterating through all tree nodes", buf, 0xCu);
  }
  return v9;
}

void sub_1C8E61484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, char a6)
{
  while (2)
  {
    while (2)
    {
      while (2)
      {
        float v89 = a1;
        uint64_t v12 = (uint64_t)a1;
        for (uint64_t i = (char *)a2; ; uint64_t i = (char *)v28)
        {
          uint64_t v14 = i - (char *)a4;
          unint64_t v15 = (i - (char *)a4) >> 3;
          if (v7 || !v6)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v45 = *((void *)i - 1);
                if (*a4 < v45)
                {
                  *((void *)i - 1) = *a4;
                  *a4 = v45;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v12, (uint64_t)i, (uint64_t)(i - 8), (uint64_t)(i - 8), a3, (uint64_t)(a4 + 1));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v12, (uint64_t)i, (uint64_t)(i - 8), (uint64_t)(i - 8), (uint64_t)(i - 16), (uint64_t)(i - 16), a3, (uint64_t)(a4 + 1));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v12, (uint64_t)i, (uint64_t)(i - 8), (uint64_t)(i - 8), (uint64_t)(i - 16), (uint64_t)(i - 16), (uint64_t)(i - 24), (uint64_t)(i - 24), a3, (uint64_t)(a4 + 1));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 191)
          {
            __int16 v46 = (unint64_t *)(i - 8);
            BOOL v48 = i == (char *)a4 || v46 == a4;
            if (a6)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                os_signpost_id_t v50 = (unint64_t *)(i - 8);
                do
                {
                  unint64_t v52 = *--v50;
                  unint64_t v51 = v52;
                  unint64_t v53 = *v46;
                  if (v52 < v53)
                  {
                    uint64_t v54 = v49;
                    while (1)
                    {
                      uint64_t v55 = v54;
                      uint64_t v56 = &i[v54];
                      *((void *)v56 - 2) = v53;
                      if (!v55) {
                        break;
                      }
                      unint64_t v53 = *(void *)&i[v55];
                      uint64_t v54 = v55 + 8;
                      if (v53 <= v51)
                      {
                        int v57 = &i[v55 - 8];
                        goto LABEL_76;
                      }
                    }
                    int v57 = v56 - 8;
LABEL_76:
                    *(void *)int v57 = v51;
                  }
                  v49 -= 8;
                  __int16 v46 = v50;
                }
                while (v50 != a4);
              }
            }
            else if (!v48)
            {
              int v83 = i - 16;
              uint64_t v84 = (unint64_t *)(i - 8);
              do
              {
                unint64_t v86 = *--v84;
                unint64_t v85 = v86;
                unint64_t v87 = *v46;
                if (v86 < v87)
                {
                  uint64_t v88 = v83;
                  do
                  {
                    *uint64_t v88 = v87;
                    unint64_t v87 = v88[2];
                    ++v88;
                  }
                  while (v87 > v85);
                  *uint64_t v88 = v85;
                }
                v83 -= 8;
                __int16 v46 = v84;
              }
              while (v84 != a4);
            }
            return;
          }
          if (!a5)
          {
            if (i != (char *)a4)
            {
              int64_t v58 = (v15 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= (8 * v59) >> 3)
                {
                  uint64_t v61 = (8 * v59) >> 2;
                  uint64_t v62 = v61 | 1;
                  int64_t v63 = &i[-8 * (v61 | 1)];
                  uint64_t v64 = v61 + 2;
                  if (v64 < (uint64_t)v15 && *((void *)v63 - 1) < *((void *)v63 - 2))
                  {
                    v63 -= 8;
                    uint64_t v62 = v64;
                  }
                  int64_t v65 = &i[-8 * v60];
                  unint64_t v66 = *((void *)v63 - 1);
                  unint64_t v67 = *((void *)v65 - 1);
                  if (v66 >= v67)
                  {
                    do
                    {
                      *((void *)v65 - 1) = v66;
                      int64_t v65 = v63;
                      if (v58 < v62) {
                        break;
                      }
                      uint64_t v68 = (2 * v62) | 1;
                      int64_t v63 = &i[-8 * v68];
                      uint64_t v69 = 2 * v62 + 2;
                      if (v69 < (uint64_t)v15 && *((void *)v63 - 1) < *((void *)v63 - 2))
                      {
                        v63 -= 8;
                        uint64_t v68 = v69;
                      }
                      unint64_t v66 = *((void *)v63 - 1);
                      uint64_t v62 = v68;
                    }
                    while (v66 >= v67);
                    *((void *)v65 - 1) = v67;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v70 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v71 = 0;
                unint64_t v72 = *((void *)i - 1);
                os_signpost_id_t v73 = i;
                do
                {
                  uint64_t v74 = (unint64_t *)&v73[8 * ~v71];
                  uint64_t v75 = (2 * v71) | 1;
                  uint64_t v76 = 2 * v71 + 2;
                  if (v76 < v70 && *(v74 - 1) < *(v74 - 2))
                  {
                    --v74;
                    uint64_t v75 = v76;
                  }
                  *((void *)v73 - 1) = *(v74 - 1);
                  os_signpost_id_t v73 = (char *)v74;
                  uint64_t v71 = v75;
                }
                while (v75 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                uint64_t v77 = v74 - 1;
                if (v74 == a4 + 1)
                {
                  unint64_t *v77 = v72;
                }
                else
                {
                  unint64_t *v77 = *a4;
                  *a4 = v72;
                  if (i - (char *)v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)(i - (char *)v77) >> 3) - 2) >> 1;
                    unint64_t v79 = (unint64_t *)&i[-8 * v78];
                    unint64_t v80 = *(v79 - 1);
                    unint64_t v81 = *v77;
                    if (v80 < v81)
                    {
                      do
                      {
                        *(v74 - 1) = v80;
                        uint64_t v74 = v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        unint64_t v79 = (unint64_t *)&i[-8 * v78];
                        unint64_t v80 = *(v79 - 1);
                      }
                      while (v80 < v81);
                      *(v74 - 1) = v81;
                    }
                  }
                }
                ++a4;
              }
              while (v70-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (uint64_t)&i[-8 * (v15 >> 1)];
          if ((unint64_t)v14 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v12, (uint64_t)i, (uint64_t)&i[-8 * (v15 >> 1)], (uint64_t)&i[-8 * (v15 >> 1)], (uint64_t)(a4 + 1), (uint64_t)(a4 + 1));
            uint64_t v18 = v12;
            uint64_t v19 = (uint64_t)&i[8 * (1 - v16)];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)(i - 8), (uint64_t)(i - 8), v19, v19, (uint64_t)(a4 + 2), (uint64_t)(a4 + 2));
            uint64_t v20 = (uint64_t)&i[8 * ~v16];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)(i - 16), (uint64_t)(i - 16), v20, v20, (uint64_t)(a4 + 3), (uint64_t)(a4 + 3));
            uint64_t v21 = v19;
            uint64_t v22 = v19;
            uint64_t v12 = v18;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v21, v22, v17, v17, v20, v20);
            uint64_t v23 = *((void *)i - 1);
            *((void *)i - 1) = *(void *)(v17 - 8);
            *(void *)(v17 - 8) = v23;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)&i[-8 * (v15 >> 1)], (uint64_t)&i[-8 * (v15 >> 1)], v12, (uint64_t)i, (uint64_t)(a4 + 1), (uint64_t)(a4 + 1));
          }
          --a5;
          BOOL v24 = (unint64_t *)(i - 8);
          if (a6) {
            break;
          }
          unint64_t v25 = *((void *)i - 1);
          if (*(void *)i < v25) {
            goto LABEL_29;
          }
          unint64_t v26 = (unint64_t *)(i - 8);
          if (*a4 <= v25)
          {
            do
            {
              BOOL v28 = v26;
              if (v26 <= a4) {
                break;
              }
              --v26;
            }
            while (*(v28 - 1) <= v25);
          }
          else
          {
            unsigned int v27 = i;
            do
            {
              BOOL v28 = (unint64_t *)(v27 - 8);
              unint64_t v29 = *((void *)v27 - 2);
              v27 -= 8;
            }
            while (v29 <= v25);
          }
          int v30 = a4;
          if (v28 > a4)
          {
            int v30 = a4;
            do
              unint64_t v31 = *v30++;
            while (v31 > v25);
          }
          while (v30 < v28)
          {
            unint64_t v32 = *(v28 - 1);
            *(v28 - 1) = *(v30 - 1);
            *(v30 - 1) = v32;
            do
            {
              unint64_t v33 = *(v28 - 2);
              --v28;
            }
            while (v33 <= v25);
            do
              unint64_t v34 = *v30++;
            while (v34 > v25);
          }
          BOOL v6 = v28 + 1 >= (unint64_t *)i;
          BOOL v7 = v28 + 1 == (unint64_t *)i;
          if (v28 + 1 != (unint64_t *)i) {
            *BOOL v24 = *v28;
          }
          a6 = 0;
          *BOOL v28 = v25;
        }
        unint64_t v25 = *v24;
LABEL_29:
        uint64_t v35 = i;
        do
        {
          unsigned int v36 = v35;
          v35 -= 8;
        }
        while (*((void *)v36 - 2) < v25);
        uint64_t v37 = a4;
        if (v36 == i)
        {
          uint64_t v37 = a4;
          do
          {
            if (v37 >= (unint64_t *)v35) {
              break;
            }
            unint64_t v39 = *v37++;
          }
          while (v39 >= v25);
        }
        else
        {
          do
            unint64_t v38 = *v37++;
          while (v38 >= v25);
        }
        a2 = (unint64_t *)v35;
        if (v37 < (unint64_t *)v35)
        {
          unsigned int v40 = v37;
          do
          {
            unint64_t v41 = *(a2 - 1);
            *(a2 - 1) = *(v40 - 1);
            *(v40 - 1) = v41;
            do
            {
              unint64_t v42 = *(a2 - 2);
              --a2;
            }
            while (v42 < v25);
            do
              unint64_t v43 = *v40++;
            while (v43 >= v25);
          }
          while (v40 < a2);
        }
        if (a2 + 1 != (unint64_t *)i) {
          *BOOL v24 = *a2;
        }
        *a2 = v25;
        if (v37 < (unint64_t *)v35)
        {
LABEL_50:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v12, i, a2 + 1, a2 + 1, a5, a6 & 1);
          a6 = 0;
          a1 = a2 + 1;
          continue;
        }
        break;
      }
      char v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v12, (uint64_t)i, (uint64_t)(a2 + 1), a2 + 1);
      if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)a2, (uint64_t)a2, a3, a4))
      {
        a1 = a2 + 1;
        if (v44) {
          continue;
        }
        goto LABEL_50;
      }
      break;
    }
    a3 = (uint64_t)(a2 + 1);
    a4 = a2 + 1;
    a2 = (unint64_t *)i;
    a1 = v89;
    if ((v44 & 1) == 0) {
      continue;
    }
    break;
  }
}

uint64_t *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve(uint64_t *result, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 144 * v4;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

const nlv4_inference_orchestrator::trees::TreeNode *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(const nlv4_inference_orchestrator::trees::TreeNode *result, const nlv4_inference_orchestrator::trees::TreeNode *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    BOOL v6 = a3 + 2;
    BOOL v7 = (std::string *)a3[1];
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        unint64_t v8 = 0x8E38E38E38E38E39 * (((uint64_t)v7 - *a3) >> 4);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0x1C71C71C71C71C7) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((*v6 - *a3) >> 4) > v9) {
          unint64_t v9 = 0x1C71C71C71C71C72 * ((*v6 - *a3) >> 4);
        }
        if (0x8E38E38E38E38E39 * ((*v6 - *a3) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v10 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v10 = v9;
        }
        unint64_t v16 = v6;
        if (v10) {
          unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        unint64_t v12 = v10;
        unint64_t v13 = (std::string *)(v10 + 144 * v8);
        uint64_t v14 = v13;
        unint64_t v15 = v10 + 144 * v11;
        nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v13, v5);
        v14 += 6;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(a3, &v12);
        BOOL v7 = (std::string *)a3[1];
        float result = (const nlv4_inference_orchestrator::trees::TreeNode *)std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v12);
      }
      else
      {
        float result = (const nlv4_inference_orchestrator::trees::TreeNode *)nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v7, v5);
        v7 += 6;
        a3[1] = (uint64_t)v7;
      }
      a3[1] = (uint64_t)v7;
      uint64_t v5 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v5 + 144);
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1C8E61DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 144;
      long long v6 = *(_OWORD *)(v3 - 144);
      *(void *)(v4 - 128) = *(void *)(v3 - 128);
      *(_OWORD *)(v4 - 144) = v6;
      *(void *)(v3 - 136) = 0;
      *(void *)(v3 - 128) = 0;
      *(void *)(v3 - 144) = 0;
      long long v7 = *(_OWORD *)(v3 - 120);
      *(void *)(v4 - 104) = *(void *)(v3 - 104);
      *(_OWORD *)(v4 - 120) = v7;
      *(void *)(v3 - 112) = 0;
      *(void *)(v3 - 104) = 0;
      *(void *)(v3 - 120) = 0;
      long long v8 = *(_OWORD *)(v3 - 96);
      *(void *)(v4 - 80) = *(void *)(v3 - 80);
      *(_OWORD *)(v4 - 96) = v8;
      *(void *)(v3 - 88) = 0;
      *(void *)(v3 - 80) = 0;
      *(void *)(v3 - 96) = 0;
      *(_OWORD *)(v4 - 72) = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 48) = 0;
      *(void *)(v4 - 40) = 0;
      *(void *)(v4 - 56) = 0;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 40) = *(void *)(v3 - 40);
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      long long v9 = *(_OWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = v9;
      v4 -= 144;
      v3 -= 144;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v10 = *result;
  *float result = v5;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 88);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(a2 - 8);
  unint64_t v8 = *(void *)(a6 - 8);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(void *)(a4 - 8) = v8;
      *(void *)(a6 - 8) = v6;
      unint64_t v9 = *(void *)(a4 - 8);
      unint64_t v10 = *(void *)(a2 - 8);
      if (v9 < v10)
      {
        *(void *)(a2 - 8) = v9;
        *(void *)(a4 - 8) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(void *)(a2 - 8) = v6;
      *(void *)(a4 - 8) = v7;
      unint64_t v11 = *(void *)(a6 - 8);
      if (v11 >= v7) {
        return;
      }
      *(void *)(a4 - 8) = v11;
    }
    else
    {
      *(void *)(a2 - 8) = v8;
    }
    *(void *)(a6 - 8) = v7;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a3, a4, a5, a6);
  unint64_t v12 = *(void *)(a8 - 8);
  unint64_t v13 = *(void *)(a6 - 8);
  if (v12 < v13)
  {
    *(void *)(a6 - 8) = v12;
    *(void *)(a8 - 8) = v13;
    unint64_t v14 = *(void *)(a6 - 8);
    unint64_t v15 = *(void *)(a4 - 8);
    if (v14 < v15)
    {
      *(void *)(a4 - 8) = v14;
      *(void *)(a6 - 8) = v15;
      unint64_t v16 = *(void *)(a4 - 8);
      unint64_t v17 = *(void *)(a2 - 8);
      if (v16 < v17)
      {
        *(void *)(a2 - 8) = v16;
        *(void *)(a4 - 8) = v17;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v14 = *(void *)(a10 - 8);
  unint64_t v15 = *(void *)(a8 - 8);
  if (v14 < v15)
  {
    *(void *)(a8 - 8) = v14;
    *(void *)(a10 - 8) = v15;
    unint64_t v16 = *(void *)(a8 - 8);
    unint64_t v17 = *(void *)(a6 - 8);
    if (v16 < v17)
    {
      *(void *)(a6 - 8) = v16;
      *(void *)(a8 - 8) = v17;
      unint64_t v18 = *(void *)(a6 - 8);
      unint64_t v19 = *(void *)(a4 - 8);
      if (v18 < v19)
      {
        *(void *)(a4 - 8) = v18;
        *(void *)(a6 - 8) = v19;
        unint64_t v20 = *(void *)(a4 - 8);
        unint64_t v21 = *(void *)(a2 - 8);
        if (v20 < v21)
        {
          *(void *)(a2 - 8) = v20;
          *(void *)(a4 - 8) = v21;
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6 = 1;
  switch((a2 - (uint64_t)a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      unint64_t v7 = *(void *)(a2 - 8);
      if (*a4 < v7)
      {
        *(void *)(a2 - 8) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, (uint64_t)(a4 + 1));
LABEL_18:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v8 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      unint64_t v10 = (void *)(a2 - 24);
      if ((unint64_t *)(a2 - 24) == a4) {
        goto LABEL_14;
      }
      int v11 = 0;
      uint64_t v9 = a2 - 24;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v9 - 8);
    v9 -= 8;
    unint64_t v12 = v13;
    if (v13 < *(void *)(v8 - 8))
    {
      unint64_t v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (void *)a2) {
          break;
        }
        unint64_t v15 = v14 + 1;
        unint64_t v16 = v14[1];
        ++v14;
        if (v16 <= v12) {
          goto LABEL_12;
        }
      }
      unint64_t v15 = (void *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8) {
        break;
      }
    }
    uint64_t v8 = (uint64_t)v10;
    unint64_t v10 = (void *)v9;
    if ((unint64_t *)v9 == a4)
    {
LABEL_14:
      char v17 = 1;
      goto LABEL_20;
    }
  }
  char v17 = 0;
  LOBYTE(v9) = v9 == (void)a4;
LABEL_20:
  char v6 = v17 | v9;
  return v6 & 1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitCommonPersonNodes(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *a1, unint64_t *a2, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(this, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))return 0; {
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::handleCommonPersonSubtree(a1, this, v21);
  }
  int v6 = v22;
  BOOL v7 = v22 != 0;
  uint64_t v8 = SNLPOSLoggerForCategory(1);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 3);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] Successfully split the common_Person node into name/contact type", (uint8_t *)&buf, 0xCu);
    }
    if (!v22) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    unint64_t v11 = a2[2];
    unint64_t v12 = a2[1];
    if (v12 >= v11)
    {
      unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - *a2) >> 4);
      if (v15 + 1 > 0x1C71C71C71C71C7) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - *a2) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v15 + 1) {
        uint64_t v17 = v15 + 1;
      }
      if (v16 >= 0xE38E38E38E38E3) {
        unint64_t v18 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v18 = v17;
      }
      unint64_t v26 = a2 + 2;
      if (v18) {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      *(void *)&long long buf = v18;
      *((void *)&buf + 1) = v18 + 144 * v15;
      uint64_t v24 = *((void *)&buf + 1);
      unint64_t v25 = v18 + 144 * v19;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*((std::string **)&buf + 1), (const nlv4_inference_orchestrator::trees::TreeNode *)v21);
      v24 += 144;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)a2, &buf);
      unint64_t v13 = a2[1];
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)a2[1], (const nlv4_inference_orchestrator::trees::TreeNode *)v21);
      unint64_t v13 = v12 + 144;
      a2[1] = v13;
    }
    a2[1] = v13;
  }
  else if (v9)
  {
    uint64_t v14 = *((void *)a1 + 3);
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v14;
    _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] Could not split this common_Person node", (uint8_t *)&buf, 0xCu);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
  return v7;
}

void sub_1C8E6256C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v2 - 112);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::handleCommonPersonSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  BOOL v7 = SNLPOSLoggerForCategory(1);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 3);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] Handling common_Person subtree", buf, 0xCu);
  }
  uint64_t v10 = *((void *)a2 + 11);
  if (*((void *)a2 + 12) - v10 != 144)
  {
    unint64_t v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *((void *)this + 3);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
LABEL_23:
      unint64_t v25 = v21;
      os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
LABEL_24:
      _os_log_impl(&dword_1C8DA9000, v25, v26, v23, buf, 0xCu);
    }
LABEL_25:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  uint64_t v11 = siri::ontology::oname::graph::ontology_init::Argument_name((siri::ontology::oname::graph::ontology_init *)v8);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 71);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(v10 + 71);
  }
  else {
    uint64_t v13 = *(void *)(v10 + 56);
  }
  uint64_t v14 = *(unsigned __int8 *)(v11 + 31);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(v11 + 16);
  }
  if (v13 != v14)
  {
LABEL_21:
    unint64_t v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *((void *)this + 3);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v24;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  unint64_t v16 = (const void **)(v10 + 48);
  uint64_t v19 = *(unsigned __int8 **)(v11 + 8);
  uint64_t v17 = (unsigned __int8 *)(v11 + 8);
  unint64_t v18 = v19;
  if (v15 >= 0) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v18;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v20, *(void *)(v10 + 56))) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(v10 + 71))
  {
    while (*(unsigned __int8 *)v16 == *v20)
    {
      unint64_t v16 = (const void **)((char *)v16 + 1);
      ++v20;
      if (!--v12) {
        goto LABEL_26;
      }
    }
    goto LABEL_21;
  }
LABEL_26:
  uint64_t v27 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *((void *)this + 3);
    unint64_t v29 = (void *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0) {
      unint64_t v29 = (void *)*v29;
    }
    *(_DWORD *)long long buf = 136315395;
    *(void *)&uint8_t buf[4] = v28;
    __int16 v72 = 2085;
    os_signpost_id_t v73 = v29;
    _os_log_impl(&dword_1C8DA9000, v27, OS_LOG_TYPE_DEBUG, "[%s] common_Person.name value: %{sensitive}s", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, *((char **)this + 3));
  uint64_t v30 = *((void *)this + 10);
  uint64_t v31 = *((void *)this + 11) - v30;
  if (!v31)
  {
LABEL_34:
    int v35 = 1;
    unsigned int v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = buf;
      if (v74 < 0) {
        uint64_t v37 = *(unsigned char **)buf;
      }
      uint64_t v38 = *(void *)(v10 + 72);
      *(_DWORD *)unint64_t v66 = 136315394;
      unint64_t v67 = v37;
      __int16 v68 = 2048;
      uint64_t v69 = v38;
      unint64_t v39 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_46:
      _os_log_impl(&dword_1C8DA9000, v36, OS_LOG_TYPE_DEFAULT, v39, v66, 0x16u);
    }
LABEL_47:
    unint64_t v32 = 0;
    goto LABEL_48;
  }
  unint64_t v32 = 0;
  uint64_t v33 = v31 >> 4;
  unint64_t v34 = (uint64_t *)(v30 + 104);
  while (*(v34 - 1) != *(void *)(v10 + 72))
  {
    ++v32;
    v34 += 18;
    if (v32 >= 0x8E38E38E38E38E39 * v33) {
      goto LABEL_34;
    }
  }
  unint64_t v40 = 0x8E38E38E38E38E39 * v33;
  if (v32 >= v40)
  {
LABEL_42:
    int v35 = 1;
    unsigned int v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v42 = buf;
      if (v74 < 0) {
        unint64_t v42 = *(unsigned char **)buf;
      }
      uint64_t v43 = *(void *)(v10 + 80);
      *(_DWORD *)unint64_t v66 = 136315394;
      unint64_t v67 = v42;
      __int16 v68 = 2048;
      uint64_t v69 = v43;
      unint64_t v39 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  unint64_t v3 = v32;
  while (1)
  {
    uint64_t v41 = *v34;
    v34 += 18;
    ++v3;
    if (v41 == *(void *)(v10 + 80)) {
      break;
    }
    if (v40 == v3) {
      goto LABEL_42;
    }
  }
  int v35 = 0;
LABEL_48:
  if (v74 < 0) {
    operator delete(*(void **)buf);
  }
  if (v35) {
    goto LABEL_25;
  }
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::hasMatchingSpanPerson(this, v32, v3))
  {
    char v44 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_25;
    }
    uint64_t v45 = *((void *)this + 3);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v45;
    uint64_t v23 = "[%s] There exists a person matching span covering this entire common_Person.name node. Skipping.";
    unint64_t v25 = v44;
    os_log_type_t v26 = OS_LOG_TYPE_DEBUG;
    goto LABEL_24;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplit(this, v32, v3, buf);
  if (v78)
  {
    uint64_t v48 = *((void *)a2 + 6);
    uint64_t v47 = (char *)a2 + 48;
    uint64_t v46 = v48;
    int v49 = v47[23];
    if (v49 >= 0) {
      uint64_t v50 = (uint64_t)v47;
    }
    else {
      uint64_t v50 = v46;
    }
    if (v49 >= 0) {
      uint64_t v51 = v47[23];
    }
    else {
      uint64_t v51 = *((void *)v47 + 1);
    }
    if (*(char *)(v10 + 47) < 0)
    {
      uint64_t v52 = *(void *)(v10 + 24);
      std::string::size_type v53 = *(void *)(v10 + 32);
    }
    else
    {
      uint64_t v52 = v10 + 24;
      std::string::size_type v53 = *(unsigned __int8 *)(v10 + 47);
    }
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::generateCommonPersonNode(this, (uint64_t)buf, (uint64_t)&v76, v50, v51, v52, v53, *(void **)(v10 + 72), (uint64_t)v66);
    if (v70)
    {
      std::__optional_copy_base<nlv4_inference_orchestrator::trees::TreeNode,false>::__optional_copy_base[abi:ne180100](a3, (const nlv4_inference_orchestrator::trees::TreeNode *)v66);
    }
    else
    {
      uint64_t v56 = (const char *)v75;
      if (v75)
      {
        if (*(char *)(v75 + 23) < 0) {
          uint64_t v56 = *(const char **)v75;
        }
      }
      else
      {
        uint64_t v56 = "nullptr";
      }
      int v57 = (const char *)v77;
      if (v77)
      {
        if (*(char *)(v77 + 23) < 0) {
          int v57 = *(const char **)v77;
        }
      }
      else
      {
        int v57 = "nullptr";
      }
      int64_t v58 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v59 = *((void *)this + 3);
        int v60 = 136315651;
        uint64_t v61 = v59;
        __int16 v62 = 2085;
        int64_t v63 = v56;
        __int16 v64 = 2085;
        int64_t v65 = v57;
        _os_log_impl(&dword_1C8DA9000, v58, OS_LOG_TYPE_DEFAULT, "[%s] Warning: Failed to generate a node for matching span (personInput=%{sensitive}s, contactTypeInput=%{sensitive}s)", (uint8_t *)&v60, 0x20u);
      }
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[6].__r_.__value_.__s.__data_[0] = 0;
    }
    std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v66);
  }
  else
  {
    uint64_t v54 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v55 = (unsigned char *)*((void *)this + 3);
      *(_DWORD *)unint64_t v66 = 136315138;
      unint64_t v67 = v55;
      _os_log_impl(&dword_1C8DA9000, v54, OS_LOG_TYPE_DEBUG, "[%s] Could not find a split for this common_Person. Skipping.", v66, 0xCu);
    }
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
  }
  std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
}

void sub_1C8E62B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    unint64_t v3 = (void **)(a1 + 88);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::hasMatchingSpanPerson(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, unint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>((void *)this + 18, a2);
  if (result)
  {
    uint64_t v6 = *(void *)(result + 24);
    uint64_t v5 = *(void *)(result + 32);
    if (v6 == v5)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = v6 + 88;
      do
      {
        uint64_t v8 = *(unsigned int *)(v7 - 16);
        uint64_t result = v8 == a3;
        BOOL v9 = v8 == a3 || v7 == v5;
        v7 += 88;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplit@<X0>(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v7 = (void *)((char *)this + 144);
  uint64_t v8 = (void *)((char *)this + 104);
  uint64_t result = (uint64_t)nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder(a2, a3, (void *)this + 18, (void *)this + 13, a4);
  if (!a4[176])
  {
    std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a4);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder(a2, a3, v8, v7, v12);
    if (v13[88])
    {
      MEMORY[0x1CB773E00](v10, v13);
      MEMORY[0x1CB773E00](v11, v12);
      MEMORY[0x1CB773DF0](a4, v10);
      MEMORY[0x1CB773DF0](a4 + 88, v11);
      a4[176] = 1;
      MEMORY[0x1CB773E20](v11);
      MEMORY[0x1CB773E20](v10);
      return std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
    }
    else
    {
      uint64_t result = std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
      *a4 = 0;
      a4[176] = 0;
    }
  }
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::generateCommonPersonNode(siri::ontology::oname::graph::ontology_init *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string::size_type a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  v107[1] = *MEMORY[0x1E4F143B8];
  unint64_t v10 = *(unsigned int *)(a2 + 76);
  uint64_t v11 = *((void *)a1 + 10);
  unint64_t v12 = 0x8E38E38E38E38E39 * ((*((void *)a1 + 11) - v11) >> 4);
  if (v12 <= v10
    || (unint64_t v13 = (*(_DWORD *)(a2 + 72) - 1), v12 <= v13)
    || (unint64_t v14 = *(unsigned int *)(a3 + 76), v12 <= v14)
    || (unint64_t v15 = (*(_DWORD *)(a3 + 72) - 1), v12 <= v15))
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  v95[1] = 0;
  v96[0] = 0;
  *(_OWORD *)float v90 = 0u;
  memset(v91, 0, sizeof(v91));
  memset(&__p, 0, sizeof(__p));
  v95[0] = 0;
  uint64_t v18 = siri::ontology::oname::graph::ontology_init::Argument_name(a1);
  uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)std::string::operator=(&__p, (const std::string *)(v18 + 8));
  unint64_t v20 = (void *)(v11 + 144 * v10);
  std::string::size_type v21 = v20[12];
  std::string::size_type v93 = v21;
  v96[1] = v20[14];
  v96[3] = v20[16];
  uint64_t v22 = (void *)(v11 + 144 * v13);
  uint64_t v23 = (void *)v22[13];
  uint64_t v94 = v23;
  v96[2] = v22[15];
  v96[4] = v22[17];
  std::string::size_type v24 = v21 - (void)a8;
  if (v21 < (unint64_t)a8)
  {
    unint64_t v25 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
LABEL_21:
      *(unsigned char *)a9 = 0;
      *(unsigned char *)(a9 + 144) = 0;
      goto LABEL_22;
    }
    std::string::size_type v26 = *((void *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    __n128 v99 = a8;
    uint64_t v27 = "[%s] newNameNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_20:
    _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, 0x20u);
    goto LABEL_21;
  }
  BOOL v28 = (unint64_t)v23 >= v21;
  std::string::size_type v29 = (std::string::size_type)v23 - v21;
  if (v29 == 0 || !v28)
  {
    unint64_t v25 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    std::string::size_type v33 = *((void *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    __n128 v99 = v94;
    uint64_t v27 = "[%s] newNameNode character indices imply an empty or impossible substring (%lu -> %lu)";
    goto LABEL_20;
  }
  if (a7 < v24) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  if (a7 - v24 >= v29) {
    std::string::size_type v30 = v29;
  }
  else {
    std::string::size_type v30 = a7 - v24;
  }
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v30 >= 0x17)
  {
    uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v34 = v30 | 7;
    }
    uint64_t v35 = v34 + 1;
    p_std::string buf = (std::string *)operator new(v34 + 1);
    buf.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    buf.__r_.__value_.__l.__size_ = v30;
    goto LABEL_32;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v30;
  p_std::string buf = &buf;
  if (v30) {
LABEL_32:
  }
    uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)memmove(p_buf, (const void *)(a6 + v24), v30);
  p_buf->__r_.__value_.__s.__data_[v30] = 0;
  if (SHIBYTE(v91[3]) < 0) {
    operator delete(v91[1]);
  }
  *(std::string *)&v91[1] = buf;
  *(_OWORD *)uint64_t v84 = 0u;
  memset(v85, 0, sizeof(v85));
  memset(&v86, 0, sizeof(v86));
  memset(v89, 0, 24);
  uint64_t v36 = siri::ontology::oname::graph::ontology_init::Argument_label(v19);
  uint64_t v37 = (siri::ontology::oname::graph::ontology_init *)std::string::operator=(&v86, (const std::string *)(v36 + 8));
  uint64_t v38 = v11 + 144 * v14;
  std::string::size_type v39 = *(void *)(v38 + 96);
  std::string::size_type v87 = v39;
  v89[3] = *(void **)(v38 + 112);
  v89[5] = *(void **)(v38 + 128);
  uint64_t v40 = v11 + 144 * v15;
  uint64_t v41 = *(void **)(v40 + 104);
  uint64_t v88 = v41;
  v89[4] = *(void **)(v40 + 120);
  v89[6] = *(void **)(v40 + 136);
  std::string::size_type v42 = v39 - (void)a8;
  if (v39 >= (unint64_t)a8)
  {
    BOOL v28 = (unint64_t)v41 >= v39;
    std::string::size_type v46 = (std::string::size_type)v41 - v39;
    if (v46 == 0 || !v28)
    {
      uint64_t v43 = SNLPOSLoggerForCategory(1);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        goto LABEL_51;
      }
      std::string::size_type v50 = *((void *)a1 + 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v87;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      __n128 v99 = v88;
      uint64_t v45 = "[%s] contactAddressLabelNode character indices imply an empty or impossible substring (%lu -> %lu)";
      goto LABEL_50;
    }
    if (a7 < v42) {
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    }
    if (a7 - v42 >= v46) {
      std::string::size_type v47 = v46;
    }
    else {
      std::string::size_type v47 = a7 - v42;
    }
    if (v47 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v47 >= 0x17)
    {
      uint64_t v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v51 = v47 | 7;
      }
      uint64_t v52 = v51 + 1;
      uint64_t v48 = (std::string *)operator new(v51 + 1);
      buf.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      buf.__r_.__value_.__l.__size_ = v47;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v47;
      uint64_t v48 = &buf;
      if (!v47) {
        goto LABEL_62;
      }
    }
    uint64_t v37 = (siri::ontology::oname::graph::ontology_init *)memmove(v48, (const void *)(a6 + v42), v47);
LABEL_62:
    v48->__r_.__value_.__s.__data_[v47] = 0;
    if (SHIBYTE(v85[3]) < 0) {
      operator delete(v85[1]);
    }
    *(std::string *)&v85[1] = buf;
    memset(v76, 0, sizeof(v76));
    long long v77 = 0u;
    memset(&v78, 0, sizeof(v78));
    memset(v81, 0, sizeof(v81));
    uint64_t v53 = siri::ontology::oname::graph::ontology_init::common_ContactAddress(v37);
    uint64_t v54 = std::string::operator=((std::string *)v76, (const std::string *)(v53 + 8));
    uint64_t v55 = siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress((siri::ontology::oname::graph::ontology_init *)v54);
    std::string::operator=(&v78, (const std::string *)(v55 + 8));
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&buf, (const nlv4_inference_orchestrator::trees::TreeNode *)v84);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v81, (nlv4_inference_orchestrator::trees::TreeNode *)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)v106, 1uLL);
    v68[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
    if (v104 < 0) {
      operator delete(v103);
    }
    if (v102 < 0) {
      operator delete(v99);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v73 = 0;
    memset(v68, 0, sizeof(v68));
    *(_OWORD *)uint64_t v69 = 0u;
    long long v72 = 0uLL;
    uint64_t v70 = 0;
    uint64_t v57 = siri::ontology::oname::graph::ontology_init::common_Person(v56);
    std::string::operator=(v68, (const std::string *)(v57 + 8));
    MEMORY[0x1CB7755C0](v69, a4, a5);
    long long v71 = 0uLL;
    long long v74 = 0u;
    long long v75 = 0u;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&buf, (const nlv4_inference_orchestrator::trees::TreeNode *)v90);
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v106, (const nlv4_inference_orchestrator::trees::TreeNode *)v76);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v72, (nlv4_inference_orchestrator::trees::TreeNode *)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)v107, 2uLL);
    uint64_t v58 = 36;
    do
    {
      uint64_t v59 = (void **)((char *)&buf.__r_.__value_.__l.__data_ + v58 * 8);
      unsigned __int8 v97 = (void **)&v96[v58];
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v97);
      if (*((char *)&v94 + v58 * 8 + 7) < 0) {
        operator delete(*(v59 - 12));
      }
      if (*((char *)v59 - 97) < 0) {
        operator delete(v91[v58 + 3]);
      }
      if (SHIBYTE(v91[v58 + 2]) < 0) {
        operator delete(*(v59 - 18));
      }
      v58 -= 18;
    }
    while (v58 * 8);
    int v60 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v61 = *((void *)a1 + 3);
      if (SHIBYTE(v91[3]) >= 0) {
        __int16 v62 = &v91[1];
      }
      else {
        __int16 v62 = (void **)v91[1];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315907;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v61;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      __n128 v99 = v94;
      __int16 v100 = 2085;
      uint64_t v101 = v62;
      _os_log_impl(&dword_1C8DA9000, v60, OS_LOG_TYPE_DEBUG, "[%s] Generated new common_Person.name node with newNameNode.startCharIndex=%lu, newNameNode.endCharIndex=%lu, newNameNode.value=%{sensitive}s", (uint8_t *)&buf, 0x2Au);
    }
    *(std::string *)a9 = v68[0];
    memset(v68, 0, 32);
    *(std::string *)(a9 + 24) = v68[1];
    *(_OWORD *)&v68[1].__r_.__value_.__r.__words[1] = 0uLL;
    *(void *)(a9 + 64) = v70;
    *(_OWORD *)(a9 + 48) = *(_OWORD *)v69;
    v69[1] = 0;
    uint64_t v70 = 0;
    v69[0] = 0;
    *(_OWORD *)(a9 + 72) = v71;
    *(_OWORD *)(a9 + 88) = v72;
    *(void *)(a9 + 104) = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    long long v63 = v75;
    *(_OWORD *)(a9 + 112) = v74;
    *(_OWORD *)(a9 + 128) = v63;
    *(unsigned char *)(a9 + 144) = 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (SHIBYTE(v68[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68[0].__r_.__value_.__l.__data_);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(*(void **)&v76[24]);
    }
    if ((v76[23] & 0x80000000) != 0) {
      operator delete(*(void **)v76);
    }
    goto LABEL_52;
  }
  uint64_t v43 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v44 = *((void *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v44;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    __n128 v99 = a8;
    uint64_t v45 = "[%s] contactAddressLabelNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_50:
    _os_log_impl(&dword_1C8DA9000, v43, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, 0x20u);
  }
LABEL_51:
  *(unsigned char *)a9 = 0;
  *(unsigned char *)(a9 + 144) = 0;
LABEL_52:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85[3]) < 0) {
    operator delete(v85[1]);
  }
  if (SHIBYTE(v85[0]) < 0) {
    operator delete(v84[0]);
  }
LABEL_22:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91[3]) < 0) {
    operator delete(v91[1]);
  }
  if (SHIBYTE(v91[0]) < 0) {
    operator delete(v90[0]);
  }
}

void sub_1C8E6365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 144; i != -144; i -= 144)
    nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v67 + i));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a13);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a31);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a49);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a67);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<nlv4_inference_orchestrator::trees::TreeNode,false>::__optional_copy_base[abi:ne180100](std::string *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[6].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(this, a2);
    this[6].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C8E637B0(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    MEMORY[0x1CB773E20](a1 + 88);
    MEMORY[0x1CB773E20](a1);
  }
  return a1;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, nlv4_inference_orchestrator::trees::TreeNode *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1);
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_10;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v13 = (std::string *)((char *)a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)a2, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, (nlv4_inference_orchestrator::trees::TreeNode *)v13, a3, *(std::string **)(a1 + 8));
LABEL_10:
    *(void *)(a1 + 8) = v12;
    return;
  }
  unint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)a2, (std::string *)a3, v9);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a1, (void **)&v14->__r_.__value_.__l.__data_);
}

void sub_1C8E63960(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C8E63968(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      std::string::operator=(this + 2, v5 + 2);
      *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
      if (this != v5) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&this[3].__r_.__value_.__r.__words[2], (std::string *)v5[3].__r_.__value_.__r.__words[2], (long long *)v5[4].__r_.__value_.__l.__data_, 0x8E38E38E38E38E39* ((uint64_t)(v5[4].__r_.__value_.__r.__words[0] - v5[3].__r_.__value_.__r.__words[2]) >> 4));
      }
      long long v6 = *(_OWORD *)&v5[5].__r_.__value_.__r.__words[1];
      *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[4].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v6;
      this += 6;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1);
    if (a4 > 0x1C71C71C71C71C7) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8), v12);
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v14 = (long long *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(__str, __str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4), v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, v14, a3, *(std::string **)(a1 + 8), v15);
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  unint64_t v16 = (void **)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(__str, (int)a3, v9);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a1, v16);
}

void sub_1C8E63B9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C8E63BA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder@<X0>(unint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned char *a5@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(a3, a1);
  if (result)
  {
    uint64_t v9 = result[3];
    uint64_t v10 = result[4];
    while (v9 != v10)
    {
      unint64_t v11 = *(unsigned int *)(v9 + 72);
      if (v11 < a2)
      {
        uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(a4, v11);
        if (result)
        {
          for (uint64_t i = result[3]; i != result[4]; i += 88)
          {
            if (*(_DWORD *)(i + 72) == a2)
            {
              MEMORY[0x1CB773E00](v13, v9);
              MEMORY[0x1CB773E00](v14, i);
              MEMORY[0x1CB773DF0](a5, v13);
              MEMORY[0x1CB773DF0](a5 + 88, v14);
              a5[176] = 1;
              MEMORY[0x1CB773E20](v14);
              return (void *)MEMORY[0x1CB773E20](v13);
            }
          }
        }
      }
      v9 += 88;
    }
  }
  *a5 = 0;
  a5[176] = 0;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void snlp::ssu::selflogging::logUserRequestStarted(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
}

void sub_1C8E63DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logUserRequestEnded(snlp::ssu::selflogging *a1, unsigned int **a2)
{
  id v8 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v5 = *a2;
  long long v6 = a2[1];
  while (v5 != v6)
  {
    unint64_t v7 = snlp::ssu::selflogging::convertUserRequestCacheEntryInfo(v5);
    [v8 addObject:v7];

    v5 += 16;
  }
  snlp::ssu::selflogging::convertRequestId(a1, v4);
}

void sub_1C8E63E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logUserRequestFailed(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
}

void sub_1C8E63F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::logBackgroundUpdateStarted(uint64_t a1)
{
  id v2 = +[SNLPSSUSELFLoggingUtils logBackgroundUpdateStarted:snlp::ssu::selflogging::convertBackgroundUpdateType(a1)];
  uint8x8_t v3 = v2;
  if (v2 && [v2 hasLowInt] && (objc_msgSend(v3, "hasHighInt") & 1) != 0)
  {
    uint64_t v1 = [v3 lowInt];
    [v3 highInt];
  }

  return v1;
}

void sub_1C8E63FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logBackgroundUpdateEnded(uint64_t *a1, uint64_t *a2, char ***a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  id v12 = [NSString stringWithUTF8String:v5];
  unint64_t v7 = [MEMORY[0x1E4F1CA48] array];
  id v8 = *a3;
  uint64_t v9 = a3[1];
  while (v8 != v9)
  {
    uint64_t v10 = snlp::ssu::selflogging::convertBackgroundUpdateAppInfo(v8, v6);
    [v7 addObject:v10];

    v8 += 7;
  unint64_t v11 = };
  +[SNLPSSUSELFLoggingUtils logBackgroundUpdateEnded:v11 locale:v12 appInfos:v7];
}

void sub_1C8E640A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::objcUUIDFromCpp(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4FA29C8]);
  [v4 setNamespaceA:0];
  [v4 setLowInt:a1];
  [v4 setHighInt:a2];
  return v4;
}

void sub_1C8E64154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logBackgroundUpdateFailed(uint64_t *a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logBackgroundUpdateFailed:](SNLPSSUSELFLoggingUtils, "logBackgroundUpdateFailed:");
}

void sub_1C8E641C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::buildAppBundleIdSaltedHash(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = [v4 UUIDString];
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)[v6 UTF8String]);

    boost::hash<std::string>::operator()((char *)v13);
    boost::hash<std::string>::operator()(a1);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    *(void *)uint64_t v9 = *MEMORY[0x1E4FBA408];
    uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&v9[*(void *)(*(void *)v9 - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v10[0] = v7;
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CB775B50](&v12);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    id v8 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_ERROR, "Failed to get salt. Returning constant string to preserve privacy.", v9, 2u);
    }

    std::string::basic_string[abi:ne180100]<0>(a2, "salt_error");
  }
}

void sub_1C8E644A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t boost::hash<std::string>::operator()(char *a1)
{
  uint64_t v1 = a1[23];
  uint64_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) == 0) {
    uint8x8_t v3 = a1;
  }
  else {
    uint8x8_t v3 = *(char **)a1;
  }
  unint64_t result = 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = v2;
  }
  for (; v1; --v1)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

void ___ZN12_GLOBAL__N_121getDeviceBootUniqueIdEv_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, sizeof(v10));
  size_t v7 = 37;
  int v0 = sysctlbyname("kern.bootsessionuuid", v10, &v7, 0, 0);
  if (v0)
  {
    uint64_t v1 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = strerror(v0);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v9 = v2;
      _os_log_impl(&dword_1C8DA9000, v1, OS_LOG_TYPE_ERROR, "Failed getting kern.bootsessionuuid with sysctlbyname() %s", buf, 0xCu);
    }
  }
  else
  {
    id v4 = objc_alloc(MEMORY[0x1E4F29128]);
    uint8x8_t v3 = (void *)[[NSString alloc] initWithUTF8String:v10];
    uint64_t v5 = [v4 initWithUUIDString:v3];
  }
}

void sub_1C8E64684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlc_inference_orchestrator::orchestration::SNLCOrchestrator::~SNLCOrchestrator(snlc_inference_orchestrator::orchestration::SNLCOrchestrator *this)
{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1CB775C40);
}

void snlc_inference_orchestrator::orchestration::SNLCOrchestrator::handle(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::generateOverrideResponse(*a2, v8);
  if (v9)
  {
    MEMORY[0x1CB773F90](a3, v8);
  }
  else
  {
    id v6 = *a2;
    *a2 = 0;
    size_t v7 = v6;
    itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle(a1, &v7, a3);
    if (v6) {
      (*(void (**)(const sirinluinternalitfm::ITFMParserRequest *))(*(void *)v6 + 8))(v6);
    }
  }
  if (v9) {
    MEMORY[0x1CB773FB0](v8);
  }
}

void sub_1C8E64790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (a18) {
    MEMORY[0x1CB773FB0](&a11);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels(nlv4_inference_orchestrator::context::ContextLabelsExtractor *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v6 = *((void *)a2 + 11);
  uint64_t v7 = *((void *)a2 + 12);
  id v8 = (char *)this + 112;
  if (v6 == v7) {
    id v8 = (char *)this + 64;
  }
  if (v8[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    uint64_t v6 = *((void *)a2 + 11);
    uint64_t v7 = *((void *)a2 + 12);
  }
  else
  {
    std::string v33 = *(std::string *)v8;
  }
  if (v6 == v7) {
    char v9 = (char *)this + 160;
  }
  else {
    char v9 = (char *)this + 208;
  }
  if (v9[23] < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else {
    std::string v32 = *(std::string *)v9;
  }
  for (uint64_t i = (uint64_t *)*((void *)a2 + 1); ; ++i)
  {
    if (i == *((uint64_t **)a2 + 2))
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v32.__r_.__value_.__l.__data_, (const void **)this + 47);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
      goto LABEL_20;
    }
    uint64_t v11 = *i;
    if (*(void *)(*i + 24) || *(void *)(v11 + 16) || *(void *)(v11 + 8)) {
      break;
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v32.__r_.__value_.__l.__data_, (const void **)this + 44);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
LABEL_20:
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t j = *((void *)a2 + 1); j != *((void *)a2 + 2); j += 8)
  {
    if (*(void *)(*(void *)j + 16)) {
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
    }
  }
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v14 = *((void *)a2 + 5);
  if (v13 != v14)
  {
    do
    {
      if (*(void *)(*(void *)v13 + 16)) {
        nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
      }
      v13 += 8;
    }
    while (v13 != v14);
    for (k = (uint64_t *)*((void *)a2 + 4); k != *((uint64_t **)a2 + 5); ++k)
    {
      uint64_t v16 = *k;
      if (*(void *)(*k + 24) || *(void *)(v16 + 16) || *(void *)(v16 + 8))
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 44);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
        uint64_t v19 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)a3, (unsigned __int8 *)__p);
        unint64_t v20 = v19;
        if ((SHIBYTE(v31) & 0x80000000) == 0)
        {
          if (v19) {
            goto LABEL_50;
          }
          goto LABEL_52;
        }
        operator delete(__p[0]);
        if (!v20) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 44);
  uint64_t v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)a3, (unsigned __int8 *)__p);
  uint64_t v18 = v17;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if (!v18) {
      goto LABEL_52;
    }
  }
  else if (!v17)
  {
    goto LABEL_52;
  }
LABEL_50:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)a3, (unsigned __int8 *)__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
LABEL_52:
  std::string::size_type v21 = (void **)*((void *)a2 + 11);
  uint64_t v22 = (void **)*((void *)a2 + 12);
  if (v21 != v22)
  {
    do
    {
      uint64_t v23 = (uint64_t)*v21;
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct((uint64_t)this, *v21, (uint64_t)__p);
      for (m = v31; m; m = (void **)*m)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)m + 16, (uint64_t)(m + 2));
      if (!*(void *)(v23 + 32)) {
        nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths(v24, a3, (const void **)this + 5);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v31);
      std::string::size_type v26 = __p[0];
      __p[0] = 0;
      if (v26) {
        operator delete(v26);
      }
      ++v21;
    }
    while (v21 != v22);
    for (uint64_t n = *((void *)a2 + 11); n != *((void *)a2 + 12); n += 8)
    {
      BOOL v28 = *(void **)n;
      if (*(void *)(*(void *)n + 64) || v28[7] || v28[5] || v28[4] || v28[3] || v28[1])
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 17, (const void **)this + 44);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_74;
      }
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 17, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)this + 400, (uint64_t)this + 400);
LABEL_74:
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(v29, a3);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E64CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x28uLL);
  *uint64_t v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t v16 = *v24;
LABEL_38:
    *uint64_t v24 = v16;
    goto LABEL_39;
  }
  *uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
}

void sub_1C8E64FE8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 1;
  int v1 = 0;
  operator new();
}

void sub_1C8E659B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v55 = *(void **)(v54 - 224);
  if (v55)
  {
    *(void *)(v54 - 216) = v55;
    operator delete(v55);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v57);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&v59);
  _Unwind_Resume(v56);
}

void sub_1C8E65A80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  operator delete(v66);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::~deque[abi:ne180100](v67 - 224);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);
  if (*(char *)(v67 - 145) < 0) {
    operator delete(*(void **)(v67 - 168));
  }
  JUMPOUT(0x1C8E65B78);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths(uint64_t a1, uint64_t a2, const void **a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "::");
  std::string::basic_string[abi:ne180100]<0>(&v13, "::common");
  std::string::basic_string[abi:ne180100]<0>(&v12, "_verb=");
  std::string::basic_string[abi:ne180100]<0>(&v11, ".");
  if (*((char *)a3 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v4 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v9, v4 + 12);
  if (v10 >= 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = (void **)v9[0];
  }
  if (v4)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = *a3;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_below_verb=");
  std::string::basic_string[abi:ne180100]<0>(&v8, "_verb_entity");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v7, "((\\w+)::common_(\\w+)(\\.)?(\\w+))");
}

void sub_1C8E665BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (*(char *)(v79 - 185) < 0) {
    operator delete(*(void **)(v79 - 208));
  }
  if (a53) {
    operator delete(a53);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a67);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a72);
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a79);
  }
  if (*(char *)(v79 - 233) < 0) {
    operator delete(*(void **)(v79 - 256));
  }
  if (*(char *)(v79 - 209) < 0) {
    operator delete(*(void **)(v79 - 232));
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    return (unsigned __int8 *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, (void **)result);
  }
  return result;
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (a2[5])
  {
    uint64_t v6 = "SystemPrompted";
  }
  else if (a2[4])
  {
    uint64_t v6 = "SystemOffered";
  }
  else if (a2[1])
  {
    uint64_t v6 = "SystemGaveOptions";
  }
  else if (a2[3])
  {
    uint64_t v6 = "SystemInformed";
  }
  else if (a2[8])
  {
    uint64_t v6 = "SystemReportedSuccess";
  }
  else if (a2[7])
  {
    uint64_t v6 = "SystemReportedFailure";
  }
  else
  {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v26, v6);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v22, (const void **)(a1 + 40), (const void **)(a1 + 232));
  if ((v27 & 0x80u) == 0) {
    uint64_t v7 = (const std::string::value_type *)v26;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v8 = v27;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)v26[1];
  }
  unint64_t v9 = std::string::append((std::string *)v22, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v9->__r_.__value_.__r.__words[2];
  long long v24 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((v22[23] & 0x80000000) != 0) {
    operator delete(*(void **)v22);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)&v24, (uint64_t)&v24);
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  uint64_t v11 = a2[5];
  if (v11)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(a1, v11, (uint64_t)__p);
    goto LABEL_30;
  }
  uint64_t v12 = a2[4];
  if (v12)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((int *)a1, v12, (uint64_t)__p);
    goto LABEL_30;
  }
  uint64_t v13 = a2[1];
  if (v13)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)a1, v13, (uint64_t)__p);
    goto LABEL_30;
  }
  uint64_t v14 = a2[3];
  if (v14)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(v14, (uint64_t)__p);
LABEL_30:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v22, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
    unint64_t v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
    goto LABEL_32;
  }
  uint64_t v19 = a2[8];
  if (v19)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(a1, v19, (uint64_t)__p);
  }
  else
  {
    uint64_t v20 = a2[7];
    if (!v20) {
      goto LABEL_32;
    }
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(a1, v20, (uint64_t)__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v22, (uint64_t *)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
LABEL_32:
  uint64_t v16 = *(unsigned __int8 **)&v22[16];
  if (*(void *)&v22[16])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v16 + 16, (uint64_t)(v16 + 16));
      uint64_t v16 = *(unsigned __int8 **)v16;
    }
    while (v16);
    float v17 = *(void ***)&v22[16];
  }
  else
  {
    float v17 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v17);
  float v18 = *(void **)v22;
  *(void *)size_t v22 = 0;
  if (v18) {
    operator delete(v18);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if ((char)v27 < 0) {
    operator delete(v26[0]);
  }
}

void sub_1C8E66A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  if (*(char *)(v8 - 57) < 0) {
    operator delete(*(void **)(v8 - 80));
  }
  if (*(char *)(v8 - 33) < 0) {
    operator delete(*(void **)(v8 - 56));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::string::size_type v26 = 0u;
  *(_OWORD *)unsigned __int8 v27 = 0u;
  int v28 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".primitive_String");
    uint64_t v4 = *((unsigned __int8 *)i + 39);
    if (*((char *)i + 39) < 0)
    {
      uint64_t v5 = (char *)i[2];
      uint64_t v6 = i[3];
    }
    else
    {
      uint64_t v5 = (char *)(i + 2);
      uint64_t v6 = *((unsigned __int8 *)i + 39);
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v31 & 0x80u) == 0) {
      int64_t v8 = v31;
    }
    else {
      int64_t v8 = (int64_t)__p[1];
    }
    if (v8)
    {
      if (v6 >= v8)
      {
        unint64_t v9 = &v5[v6];
        int v10 = *(char *)v7;
        uint64_t v11 = v5;
        do
        {
          uint64_t v12 = v6 - v8;
          if (v12 == -1) {
            break;
          }
          uint64_t v13 = (char *)memchr(v11, v10, v12 + 1);
          if (!v13) {
            break;
          }
          uint64_t v14 = v13;
          if (!memcmp(v13, v7, v8))
          {
            if (v14 == v9 || v14 - v5 == -1) {
              break;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v14 + 1;
          uint64_t v6 = v9 - (v14 + 1);
        }
        while (v6 >= v8);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v26, (unsigned __int8 *)i + 16, (uint64_t)(i + 2));
      goto LABEL_33;
    }
LABEL_22:
    if ((v4 & 0x80) != 0)
    {
      unint64_t v15 = (char *)i[2];
      uint64_t v4 = i[3];
      if (v8)
      {
LABEL_24:
        uint64_t v16 = &v15[v4];
        if (v4 >= v8)
        {
          int v19 = *(char *)v7;
          uint64_t v20 = v15;
          do
          {
            if (v4 - v8 == -1) {
              break;
            }
            unint64_t v21 = (char *)memchr(v20, v19, v4 - v8 + 1);
            if (!v21) {
              break;
            }
            float v17 = v21;
            if (!memcmp(v21, v7, v8)) {
              goto LABEL_26;
            }
            uint64_t v20 = v17 + 1;
            uint64_t v4 = v16 - (v17 + 1);
          }
          while (v4 >= v8);
        }
        float v17 = v16;
LABEL_26:
        if (v17 == v16) {
          std::string::size_type v18 = -1;
        }
        else {
          std::string::size_type v18 = v17 - v15;
        }
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v15 = (char *)(i + 2);
      if (v8) {
        goto LABEL_24;
      }
    }
    std::string::size_type v18 = 0;
LABEL_31:
    std::string::basic_string(&v29, (const std::string *)(i + 2), 0, v18, (std::allocator<char> *)&v32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v26, (unsigned __int8 *)&v29, (uint64_t)&v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
LABEL_33:
    if ((char)v31 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a2, (uint64_t *)v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v27[0]);
  size_t v22 = v26[0];
  v26[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  nlv4_inference_orchestrator::context::generateUserStatedTaskPaths((uint64_t)v26, *(uint64_t **)(a2 + 16));
  int v23 = (unsigned __int8 *)v27[0];
  if (v27[0])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, v23 + 16, (uint64_t)(v23 + 16));
      int v23 = *(unsigned __int8 **)v23;
    }
    while (v23);
    long long v24 = (void **)v27[0];
  }
  else
  {
    long long v24 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v24);
  std::string::size_type v25 = v26[0];
  v26[0] = 0;
  if (v25) {
    operator delete(v25);
  }
}

void sub_1C8E66CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::generateUserStatedTaskPaths(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v39, "SystemOffered.offered_act.UserStatedTask");
      std::string::basic_string[abi:ne180100]<0>(v37, "SystemOffered.offered_act.UserWantedToProceed");
      uint64_t v3 = *((unsigned __int8 *)v2 + 39);
      if (*((char *)v2 + 39) < 0)
      {
        uint64_t v4 = (char *)v2[2];
        uint64_t v5 = v2[3];
      }
      else
      {
        uint64_t v4 = (char *)(v2 + 2);
        uint64_t v5 = *((unsigned __int8 *)v2 + 39);
      }
      if ((v41 & 0x80u) == 0) {
        uint64_t v6 = (void **)&v39;
      }
      else {
        uint64_t v6 = v39;
      }
      if ((v41 & 0x80u) == 0) {
        int64_t v7 = v41;
      }
      else {
        int64_t v7 = v40;
      }
      if (v7)
      {
        if (v5 >= v7)
        {
          int64_t v8 = &v4[v5];
          int v9 = *(char *)v6;
          int v10 = v4;
          while (1)
          {
            uint64_t v11 = v5 - v7;
            if (v11 == -1) {
              break;
            }
            uint64_t v12 = (char *)memchr(v10, v9, v11 + 1);
            if (!v12) {
              break;
            }
            uint64_t v13 = v12;
            if (!memcmp(v12, v6, v7))
            {
              if (v13 == v8 || v13 - v4 == -1) {
                goto LABEL_56;
              }
              goto LABEL_22;
            }
            int v10 = v13 + 1;
            uint64_t v5 = v8 - (v13 + 1);
            if (v5 < v7) {
              goto LABEL_56;
            }
          }
        }
        goto LABEL_56;
      }
LABEL_22:
      if ((v3 & 0x80) != 0)
      {
        uint64_t v14 = (char *)v2[2];
        uint64_t v3 = v2[3];
        if (v7)
        {
LABEL_24:
          unint64_t v15 = &v14[v3];
          if (v3 >= v7)
          {
            int v28 = *(char *)v6;
            std::string v29 = v14;
            do
            {
              if (v3 - v7 == -1) {
                break;
              }
              uint64_t v30 = (char *)memchr(v29, v28, v3 - v7 + 1);
              if (!v30) {
                break;
              }
              uint64_t v16 = v30;
              if (!memcmp(v30, v6, v7)) {
                goto LABEL_26;
              }
              std::string v29 = v16 + 1;
              uint64_t v3 = v15 - (v16 + 1);
            }
            while (v3 >= v7);
          }
          uint64_t v16 = v15;
LABEL_26:
          if (v16 == v15) {
            std::string::size_type v17 = -1;
          }
          else {
            std::string::size_type v17 = v16 - v14;
          }
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v14 = (char *)(v2 + 2);
        if (v7) {
          goto LABEL_24;
        }
      }
      std::string::size_type v17 = 0;
LABEL_31:
      std::string::basic_string(&v33, (const std::string *)(v2 + 2), 0, v17, (std::allocator<char> *)&v32);
      if ((v38 & 0x80u) == 0) {
        std::string::size_type v18 = v37;
      }
      else {
        std::string::size_type v18 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        std::string::size_type v19 = v38;
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v37[1];
      }
      uint64_t v20 = std::string::append(&v33, (const std::string::value_type *)v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      int64_t v22 = v41;
      if ((v41 & 0x80u) != 0) {
        int64_t v22 = v40;
      }
      if (*((char *)v2 + 39) < 0) {
        std::string::size_type v23 = v2[3];
      }
      else {
        std::string::size_type v23 = *((unsigned __int8 *)v2 + 39);
      }
      std::string::basic_string(&v32, (const std::string *)(v2 + 2), v22 + v17, v23, (std::allocator<char> *)v42);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v24 = &v32;
      }
      else {
        long long v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = std::string::append(&v34, (const std::string::value_type *)v24, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
LABEL_56:
      if ((char)v38 < 0) {
        operator delete(v37[0]);
      }
      if ((char)v41 < 0) {
        operator delete(v39);
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_1C8E6703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(void *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "SystemPrompted");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
  }
  uint64_t v3 = *(int *)(a1 + 440);
  if (v3 >= 8)
  {
    uint64_t v5 = SNLPOSLoggerForCategory(4);
    uint64_t v4 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = off_1E65808C8[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  uint64_t v6 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int64_t v7 = __p;
    if (SHIBYTE(v9) < 0) {
      int64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemPrompted dialog act; needs to contain the target UsoGraph.",
      buf,
      0xCu);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  void *v9;
  unsigned char buf[12];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(void *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "SystemReportedSuccess");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
  }
  uint64_t v3 = *(int *)(a1 + 440);
  if (v3 >= 8)
  {
    uint64_t v5 = SNLPOSLoggerForCategory(4);
    uint64_t v4 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = off_1E65808C8[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  uint64_t v6 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int64_t v7 = __p;
    if (SHIBYTE(v9) < 0) {
      int64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemReportedSuccess dialog act; needs to supply the task UsoGraph.",
      buf,
      0xCu);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  void *v9;
  void *v10;
  _DWORD buf[3];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(void *)(a2 + 8) && *(void *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "SystemReportedFailure");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
  }
  uint64_t v3 = *(int *)(a1 + 440);
  if (v3 >= 8)
  {
    uint64_t v5 = SNLPOSLoggerForCategory(4);
    uint64_t v4 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "<UNDEFINED_COMPONENT>";
      uint64_t v12 = 2048;
      uint64_t v13 = v3;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)buf, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = off_1E65808C8[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  uint64_t v6 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int64_t v7 = __p;
    if (SHIBYTE(v9) < 0) {
      int64_t v7 = (void **)__p[0];
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v7;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemReportedFailure dialog act; needs to supply the UsoGraphs for the failed task and for the failure reason.",
      (uint8_t *)buf,
      0xCu);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8E672AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    if (v4[1])
    {
      uint64_t v6 = "UserAccepted";
    }
    else if (v4[2])
    {
      uint64_t v6 = "UserAcknowledged";
    }
    else if (v4[4])
    {
      uint64_t v6 = "UserCancelled";
    }
    else if (v4[6])
    {
      uint64_t v6 = "UserRejected";
    }
    else if (v4[7])
    {
      uint64_t v6 = "UserStatedTask";
    }
    else if (v4[8])
    {
      uint64_t v6 = "UserWantedToPause";
    }
    else if (v4[9])
    {
      uint64_t v6 = "UserWantedToProceed";
    }
    else if (v4[10])
    {
      uint64_t v6 = "UserWantedToRepeat";
    }
    else
    {
      uint64_t v6 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v6);
    uint64_t v12 = std::string::insert(&v14, 0, "SystemOffered.offered_act.");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromUserDialogAct((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)a1, a1 + 40, *(sirinluexternal::UserDialogAct **)(a2 + 8));
  }
  uint64_t v7 = a1[110];
  if (v7 >= 8)
  {
    int v9 = SNLPOSLoggerForCategory(4);
    int64_t v8 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v7;
      _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    int64_t v8 = off_1E65808C8[v7];
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v8);
  int v10 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    __int16 v11 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemOffered dialog act; needs to contain a user dialog act.",
      buf,
      0xCu);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E6759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v23);
  _Unwind_Resume(a1);
}

double nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct@<D0>(nlv4_inference_orchestrator::context::ContextLabelsExtractor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *(sirinluexternal::UserDialogAct ***)(a2 + 8);
  if (v4 != *(sirinluexternal::UserDialogAct ***)(a2 + 16))
  {
    int v6 = a1 + 40;
    uint64_t v7 = *v4;
    int64_t v8 = "UserAccepted";
    if (!*((void *)*v4 + 1))
    {
      int64_t v8 = "UserAcknowledged";
      if (!*((void *)v7 + 2))
      {
        int64_t v8 = "UserCancelled";
        if (!*((void *)v7 + 4))
        {
          int64_t v8 = "UserRejected";
          if (!*((void *)v7 + 6))
          {
            int64_t v8 = "UserStatedTask";
            if (!*((void *)v7 + 7))
            {
              int64_t v8 = "UserWantedToPause";
              if (!*((void *)v7 + 8))
              {
                int64_t v8 = "UserWantedToProceed";
                if (!*((void *)v7 + 9))
                {
                  if (*((void *)v7 + 10)) {
                    int64_t v8 = "UserWantedToRepeat";
                  }
                  else {
                    int64_t v8 = "";
                  }
                }
              }
            }
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    int v9 = std::string::insert(&v11, 0, "SystemGaveOptions.option.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromUserDialogAct(a1, v6, (int)__p, v7);
  }
  return result;
}

void sub_1C8E677B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v23);
  _Unwind_Resume(a1);
}

double nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v3, "SystemInformed.entity");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
  }
  return result;
}

void sub_1C8E678FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

void sub_1C8E67B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void sub_1C8E67D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromUserDialogAct(nlv4_inference_orchestrator::context::ContextLabelsExtractor *a1, int a2, int a3, sirinluexternal::UserDialogAct *a4)
{
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(a1, a4, (sirinluexternal::UsoGraph *)v4);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(nlv4_inference_orchestrator::context::ContextLabelsExtractor *this@<X0>, const sirinluexternal::UserDialogAct *a2@<X1>, sirinluexternal::UsoGraph *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 1065353216;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (v6)
  {
    uint64_t v5 = *(void *)(v6 + 8);
    if (v5) {
      goto LABEL_15;
    }
  }
  uint64_t v7 = *((void *)a2 + 4);
  if (v7)
  {
    uint64_t v5 = *(void *)(v7 + 8);
    if (v5) {
      goto LABEL_15;
    }
  }
  uint64_t v8 = *((void *)a2 + 6);
  if (v8)
  {
    uint64_t v5 = *(void *)(v8 + 16);
    if (v5) {
      goto LABEL_15;
    }
  }
  if ((v9 = *((void *)a2 + 7)) != 0 && (uint64_t v5 = *(void *)(v9 + 8)) != 0
    || (v10 = *((void *)a2 + 8)) != 0 && (uint64_t v5 = *(void *)(v10 + 8)) != 0
    || (v11 = *((void *)a2 + 9)) != 0 && (uint64_t v5 = *(void *)(v11 + 8)) != 0)
  {
LABEL_15:
    uint64_t v12 = a3;
    uint64_t v13 = v5;
LABEL_16:
    MEMORY[0x1CB773D10](v12, v13);
    goto LABEL_17;
  }
  uint64_t v14 = *((void *)a2 + 10);
  if (v14)
  {
    uint64_t v13 = *(void *)(v14 + 8);
    if (v13)
    {
      uint64_t v12 = a3;
      goto LABEL_16;
    }
  }
  uint64_t v15 = *((int *)this + 110);
  if (v15 >= 8)
  {
    std::string::size_type v17 = SNLPOSLoggerForCategory(4);
    uint64_t v16 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      std::string::size_type v26 = "<UNDEFINED_COMPONENT>";
      __int16 v27 = 2048;
      uint64_t v28 = v15;
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v16 = off_1E65808C8[v15];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  std::string::size_type v18 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = __p;
    if (v21 < 0) {
      uint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string::size_type v26 = (const char *)v19;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "[%s] Warning: Badly formed user dialog act.", buf, 0xCu);
  }
  sirinluexternal::UsoGraph::UsoGraph(a3);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_17:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
}

void sub_1C8E68064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromUserDialogAct(nlv4_inference_orchestrator::context::ContextLabelsExtractor *a1, int a2, sirinluexternal::UserDialogAct *a3)
{
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(a1, a3, (sirinluexternal::UsoGraph *)v3);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromGraph();
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromGraph()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 1;
  int v1 = 0;
  operator new();
}

void sub_1C8E685A4(_Unwind_Exception *a1)
{
  if (v4) {
    operator delete(v4);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v2 - 152));
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::generatePlaceholderVerbPaths()
{
  std::string::basic_string[abi:ne180100]<0>(&v1, "::");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "((\\w+)::common_(\\w+)(\\.)?(\\w+))");
}

void sub_1C8E68BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,std::locale a55)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a55);
  if (*(char *)(v55 - 209) < 0) {
    operator delete(*(void **)(v55 - 232));
  }
  _Unwind_Resume(a1);
}

void std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 102 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 != a1[5] + v8) {
    goto LABEL_38;
  }
  BOOL v9 = v8 >= 0x66;
  unint64_t v10 = v8 - 102;
  if (v9)
  {
    a1[4] = v10;
    uint64_t v13 = *(void *)v4;
    uint64_t v11 = v4 + 8;
    uint64_t v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      uint64_t v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1) {
          unint64_t v42 = 1;
        }
        else {
          unint64_t v42 = (uint64_t)&v5[-*a1] >> 2;
        }
        uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
        uint64_t v45 = &v43[8 * (v42 >> 2)];
        std::string::size_type v46 = (uint64_t *)a1[1];
        uint64_t v5 = v45;
        uint64_t v47 = a1[2] - (void)v46;
        if (v47)
        {
          uint64_t v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v48 = 8 * (v47 >> 3);
          int v49 = &v43[8 * (v42 >> 2)];
          do
          {
            uint64_t v50 = *v46++;
            *(void *)int v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        uint64_t v51 = (char *)*a1;
        *a1 = v43;
        a1[1] = v45;
        a1[2] = v5;
        a1[3] = &v43[8 * v44];
        if (v51)
        {
          operator delete(v51);
          uint64_t v5 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v15 = v14 >> 3;
        BOOL v16 = v14 >> 3 < -1;
        uint64_t v17 = (v14 >> 3) + 2;
        if (v16) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v15 + 1;
        }
        uint64_t v19 = -(v18 >> 1);
        uint64_t v20 = v18 >> 1;
        char v21 = &v11[-8 * v20];
        int64_t v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          uint64_t v5 = (char *)a1[1];
        }
        long long v23 = &v5[8 * v19];
        uint64_t v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(void *)uint64_t v5 = v12;
    goto LABEL_36;
  }
  int v24 = (char *)a1[3];
  std::string::size_type v25 = (char *)*a1;
  uint64_t v26 = (uint64_t)&v24[-*a1];
  if (v6 >= v26 >> 3)
  {
    uint64_t v29 = v26 >> 2;
    if (v24 == v25) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v29;
    }
    unsigned __int8 v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    uint64_t v33 = v32;
    std::string v34 = &v31[8 * v6];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v114 = v35;
    std::string::size_type v36 = operator new(0xFF0uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v6 == v33)
    {
      uint64_t v38 = 8 * v6;
      *(void *)&long long v39 = v114;
      if (v5 - v4 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_68;
      }
      uint64_t v78 = v38 >> 2;
      if (v5 == v4) {
        unint64_t v79 = 1;
      }
      else {
        unint64_t v79 = v78;
      }
      uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v79);
      std::string v34 = &v80[8 * (v79 >> 2)];
      *(void *)&long long v39 = v80;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v80[8 * v81];
      if (!v31)
      {
LABEL_68:
        *(void *)std::string v34 = v36;
        *(void *)&long long v37 = v37 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          long long v83 = (void *)*((void *)&v39 + 1);
          if (*((void *)&v39 + 1) == (void)v39)
          {
            unint64_t v85 = (unsigned char *)v37;
            if ((unint64_t)v37 >= *((void *)&v37 + 1))
            {
              if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
                unint64_t v90 = 1;
              }
              else {
                unint64_t v90 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
              }
              char v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v90);
              uint64_t v84 = &v91[(2 * v90 + 6) & 0xFFFFFFFFFFFFFFF8];
              std::string::size_type v93 = v84;
              uint64_t v94 = v85 - (unsigned char *)v83;
              if (v85 != (unsigned char *)v83)
              {
                std::string::size_type v93 = &v84[v94 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v95 = 8 * (v94 >> 3);
                unint64_t v96 = v84;
                unsigned __int8 v97 = v83;
                do
                {
                  uint64_t v98 = *v97++;
                  *(void *)unint64_t v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              *(void *)&long long v39 = v91;
              *((void *)&v39 + 1) = v84;
              *(void *)&long long v37 = v93;
              *((void *)&v37 + 1) = &v91[8 * v92];
              if (v83)
              {
                long long v112 = v37;
                long long v116 = v39;
                operator delete(v83);
                long long v37 = v112;
                long long v39 = v116;
              }
            }
            else
            {
              uint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
              if (v86 >= -1) {
                uint64_t v87 = v86 + 1;
              }
              else {
                uint64_t v87 = v86 + 2;
              }
              uint64_t v88 = v87 >> 1;
              uint64_t v89 = v37 + 8 * (v87 >> 1);
              uint64_t v84 = (char *)(v89 - (v37 - *((void *)&v39 + 1)));
              if ((void)v37 == *((void *)&v39 + 1))
              {
                unint64_t v85 = (unsigned char *)*((void *)&v39 + 1);
              }
              else
              {
                uint64_t v113 = *((void *)&v37 + 1);
                uint64_t v115 = v39;
                memmove((void *)(v89 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
                *((void *)&v37 + 1) = v113;
                *(void *)&long long v39 = v115;
              }
              *((void *)&v39 + 1) = v84;
              *(void *)&long long v37 = &v85[8 * v88];
            }
          }
          else
          {
            uint64_t v84 = (char *)*((void *)&v39 + 1);
          }
          uint64_t v99 = *(void *)(i - 8);
          *((void *)v84 - 1) = v99;
          *((void *)&v39 + 1) -= 8;
        }
        __int16 v100 = (char *)*a1;
        *(_OWORD *)a1 = v39;
        *((_OWORD *)a1 + 1) = v37;
        if (v100)
        {
          operator delete(v100);
          uint64_t v5 = (char *)a1[2];
        }
        else
        {
          uint64_t v5 = (char *)v37;
        }
        goto LABEL_37;
      }
      long long v111 = v37;
      long long v114 = v39;
      operator delete(v31);
      long long v37 = v111;
    }
    long long v39 = v114;
    goto LABEL_68;
  }
  __int16 v27 = operator new(0xFF0uLL);
  uint64_t v28 = v27;
  if (v24 == v5)
  {
    if (v4 == v25)
    {
      if (v5 == v4) {
        unint64_t v56 = 1;
      }
      else {
        unint64_t v56 = (v24 - v4) >> 2;
      }
      uint64_t v57 = 2 * v56;
      uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v56);
      uint64_t v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
      int v60 = (uint64_t *)a1[1];
      std::string::size_type v61 = v4;
      uint64_t v62 = a1[2] - (void)v60;
      if (v62)
      {
        std::string::size_type v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v63 = 8 * (v62 >> 3);
        __int16 v64 = v4;
        do
        {
          uint64_t v65 = *v60++;
          *(void *)__int16 v64 = v65;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      unint64_t v66 = (char *)*a1;
      *a1 = v58;
      a1[1] = v4;
      a1[2] = v61;
      a1[3] = &v58[8 * v59];
      if (v66)
      {
        operator delete(v66);
        uint64_t v4 = (char *)a1[1];
      }
    }
    *((void *)v4 - 1) = v28;
    uint64_t v67 = (char *)a1[1];
    __int16 v68 = (char *)a1[2];
    a1[1] = v67 - 8;
    uint64_t v69 = *((void *)v67 - 1);
    a1[1] = v67;
    if (v68 == (char *)a1[3])
    {
      uint64_t v70 = (uint64_t)&v67[-*a1];
      if ((unint64_t)v67 <= *a1)
      {
        if (v68 == (char *)*a1) {
          unint64_t v101 = 1;
        }
        else {
          unint64_t v101 = (uint64_t)&v68[-*a1] >> 2;
        }
        char v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v101);
        char v104 = &v102[8 * (v101 >> 2)];
        uint64_t v105 = (uint64_t *)a1[1];
        __int16 v68 = v104;
        uint64_t v106 = a1[2] - (void)v105;
        if (v106)
        {
          __int16 v68 = &v104[v106 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v107 = 8 * (v106 >> 3);
          uint64_t v108 = &v102[8 * (v101 >> 2)];
          do
          {
            uint64_t v109 = *v105++;
            *(void *)uint64_t v108 = v109;
            v108 += 8;
            v107 -= 8;
          }
          while (v107);
        }
        uint64_t v110 = (char *)*a1;
        *a1 = v102;
        a1[1] = v104;
        a1[2] = v68;
        a1[3] = &v102[8 * v103];
        if (v110)
        {
          operator delete(v110);
          __int16 v68 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v71 = v70 >> 3;
        BOOL v16 = v70 >> 3 < -1;
        uint64_t v72 = (v70 >> 3) + 2;
        if (v16) {
          uint64_t v73 = v72;
        }
        else {
          uint64_t v73 = v71 + 1;
        }
        uint64_t v74 = -(v73 >> 1);
        uint64_t v75 = v73 >> 1;
        uint64_t v76 = &v67[-8 * v75];
        int64_t v77 = v68 - v67;
        if (v68 != v67)
        {
          memmove(&v67[-8 * v75], v67, v68 - v67);
          uint64_t v67 = (char *)a1[1];
        }
        __int16 v68 = &v76[v77];
        a1[1] = &v67[8 * v74];
        a1[2] = &v76[v77];
      }
    }
    *(void *)__int16 v68 = v69;
  }
  else
  {
    *(void *)uint64_t v5 = v27;
  }
LABEL_36:
  uint64_t v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  uint64_t v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    uint64_t v53 = 0;
  }
  else
  {
    unint64_t v52 = a1[5] + a1[4];
    uint64_t v53 = (void *)(*(void *)&v4[8 * (v52 / 0x66)] + 40 * (v52 % 0x66));
  }
  *uint64_t v53 = *(void *)a2;
  v53[1] = *(void *)(a2 + 8);
  uint64_t v54 = (std::string *)(v53 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v55 = *(_OWORD *)(a2 + 16);
    v53[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
  }
  ++a1[5];
}

void sub_1C8E69298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x66] + 40 * ((*(void *)(a1 + 40) + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 39) < 0)
        {
          operator delete(*(void **)(v8 + 16));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 51;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 102;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(const void **this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 8);
  if (v4 == v5) {
    goto LABEL_19;
  }
  do
  {
    if (*(void *)(*(void *)v4 + 40)) {
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph();
    }
    v4 += 8;
  }
  while (v4 != v5);
  uint64_t v6 = *((void *)a2 + 7);
  while (2)
  {
    if (v6 == *((void *)a2 + 8))
    {
LABEL_19:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, this + 23, this + 47);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
    }
    else
    {
      unint64_t v7 = *(void **)v6;
      for (uint64_t i = *(void *)(*(void *)v6 + 8); i != *(void *)(*(void *)v6 + 16); i += 8)
      {
        if (*(void *)(*(void *)i + 8) || *(void *)(*(void *)i + 16)) {
          goto LABEL_20;
        }
      }
      if (!v7[4] && !v7[5] && !v7[6] && !v7[7] && !v7[8] && !v7[9])
      {
        v6 += 8;
        continue;
      }
LABEL_20:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, this + 23, this + 44);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
    }
    break;
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(v9, a3);
}

void sub_1C8E695F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct(a1, a2, (uint64_t)&v5);
  for (uint64_t i = v6; i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, i + 16, (uint64_t)(i + 16));
  nlv4_inference_orchestrator::context::generatePlaceholderVerbPaths();
}

void sub_1C8E69748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 - 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void uaap_orchestration::resolution::InverseResolutionTable::lookupSemanticValue(void *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2);
  if (v4)
  {
    if (*((char *)v4 + 63) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3, *((const std::basic_string<char16_t>::value_type **)v4 + 5), *((void *)v4 + 6));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)(v4 + 20);
      *(void *)(a3 + 16) = *((void *)v4 + 7);
    }
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v5;
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(void *a1, unsigned __int16 *a2)
{
  unint64_t v4 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int16 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

unint64_t std::__string_hash<char16_t>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = (uint64_t *)a1;
  }
  else {
    uint64_t v2 = *(uint64_t **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, v2, 2 * v1);
}

BOOL std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *((char *)a1 + 23);
  uint64_t v3 = *((void *)a1 + 1);
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (v5 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(unsigned __int16 **)a2;
  }
  if (v2 >= 0) {
    uint8x8_t v7 = a1;
  }
  else {
    uint8x8_t v7 = *(unsigned __int16 **)a1;
  }
  uint64_t v8 = v3 - 1;
  do
  {
    int v10 = *v7++;
    int v9 = v10;
    int v12 = *v6++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL result = v11 == v9;
  }
  while (v11 == v9 && v14);
  return result;
}

uint64_t uaap_orchestration::resolution::InverseResolutionTable::buildMapFromResolutionTable@<X0>(const uaap_orchestration::grammar::ResolutionTable *a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uaap_orchestration::grammar::ResolutionTable::getSemanticValues(a1, (uint64_t)v13);
  for (uint64_t i = v14; i; uint64_t i = *(unsigned __int16 **)i)
  {
    uaap_orchestration::grammar::ResolutionTable::getSynonyms(a1, i + 8, v12);
    unint64_t v6 = (long long *)v12[0];
    uint8x8_t v7 = (long long *)v12[1];
    while (v6 != v7)
    {
      std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>::pair[abi:ne180100]<true,0>(&v9, v6, (long long *)i + 1);
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>>(a2, (unsigned __int16 *)&v9, (uint64_t)&v9);
      if (v11 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
    }
    v9.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  return std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v13);
}

void sub_1C8E69AB0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>::pair[abi:ne180100]<true,0>(std::basic_string<char16_t> *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v6, *(const std::basic_string<char16_t>::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C8E69B78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x40uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  char v28 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = (std::basic_string<char16_t> *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v17, *(const std::basic_string<char16_t>::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  std::string::size_type v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t v16 = *v25;
LABEL_41:
    *std::string::size_type v25 = v16;
    goto LABEL_42;
  }
  *(void *)uint64_t v16 = *v15;
  *uint64_t v15 = v16;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)v16)
  {
    unint64_t v26 = *(void *)(*(void *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    std::string::size_type v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
}

void sub_1C8E69E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

unint64_t uaap_orchestration::resolution::Resolver::getInverseResolutionTableForLabel@<X0>(void *a1@<X0>, unsigned __int16 *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    goto LABEL_17;
  }
  unint64_t v8 = result;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = result;
    if (result >= *(void *)&v7) {
      unint64_t v11 = result % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & result;
  }
  int v12 = *(unsigned __int16 ***)(*a1 + 8 * v11);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_17:
    char v15 = 0;
    *a3 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v14 = *((void *)v13 + 1);
    if (v8 == v14) {
      break;
    }
    if (v10 > 1)
    {
      if (v14 >= *(void *)&v7) {
        v14 %= *(void *)&v7;
      }
    }
    else
    {
      v14 &= *(void *)&v7 - 1;
    }
    if (v14 != v11) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v13 = *(unsigned __int16 **)v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  unint64_t result = std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](v13 + 8, a2);
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t result = std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map((uint64_t)a3, (uint64_t)(v13 + 20));
  char v15 = 1;
LABEL_18:
  a3[40] = v15;
  return result;
}

uint64_t std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int16 **)(a2 + 16); i; uint64_t i = *(unsigned __int16 **)i)
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_1C8E6A048(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  char v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x40uLL);
  uint64_t v17 = v16;
  v28[0] = v16;
  v28[1] = a1 + 16;
  char v29 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(v16 + 16), *(const std::basic_string<char16_t>::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  float v18 = (std::basic_string<char16_t> *)(v17 + 5);
  if (*(char *)(a3 + 47) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v18, *(const std::basic_string<char16_t>::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
    v17[7] = *(void *)(a3 + 40);
  }
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *uint64_t v17 = *v26;
LABEL_44:
    void *v26 = v17;
    goto LABEL_45;
  }
  *uint64_t v17 = *v15;
  *char v15 = v17;
  *(void *)(v25 + 8 * v3) = v15;
  if (*v17)
  {
    unint64_t v27 = *(void *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
}

void sub_1C8E6A2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void uaap_orchestration::resolution::Resolver::lookupSemanticValueForLabel(void *a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int16 *a3@<X2>, unsigned char *a4@<X8>)
{
  uaap_orchestration::resolution::Resolver::getInverseResolutionTableForLabel(a1, a2, v6);
  if (v7)
  {
    uaap_orchestration::resolution::InverseResolutionTable::lookupSemanticValue(v6, a3, (uint64_t)a4);
    if (v7) {
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v6);
    }
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C8E6A384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::resolution::Resolver::buildResolutionTablesFromGrammar(const uaap_orchestration::grammar::UaapGrammar *a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  if (*(void *)a1 != v6)
  {
    uint64_t v44 = (void *)(a2 + 16);
    while (1)
    {
      std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v55, v5 + 48);
      if (v56[48])
      {
        std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](v53, (uint64_t)v56);
        if (v54) {
          break;
        }
      }
LABEL_96:
      std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v55);
      v5 += 184;
      if (v5 == v6) {
        return;
      }
    }
    uaap_orchestration::resolution::InverseResolutionTable::buildMapFromResolutionTable((const uaap_orchestration::grammar::ResolutionTable *)v53, (uint64_t)v52);
    if (*(char *)(v5 + 23) < 0) {
      std::basic_string<char16_t>::__init_copy_ctor_external(&v45, *(const std::basic_string<char16_t>::value_type **)v5, *(void *)(v5 + 8));
    }
    else {
      std::basic_string<char16_t> v45 = *(std::basic_string<char16_t> *)v5;
    }
    std::basic_string<char16_t> __p = v45;
    memset(&v45, 0, sizeof(v45));
    std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map((uint64_t)&v47, (uint64_t)v52);
    unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)&__p);
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a2 + 8);
    if (v9)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      unint64_t v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v3 = v7;
        if (v7 >= v9) {
          unint64_t v3 = v7 % v9;
        }
      }
      else
      {
        unint64_t v3 = (v9 - 1) & v7;
      }
      int v12 = *(unsigned __int16 ***)(*(void *)a2 + 8 * v3);
      if (v12)
      {
        for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int16 **)i)
        {
          unint64_t v14 = *((void *)i + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, (unsigned __int16 *)&__p)) {
              goto LABEL_90;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
        }
      }
    }
    char v15 = operator new(0x50uLL);
    v57[0] = v15;
    v57[1] = v44;
    char v58 = 0;
    *char v15 = 0;
    v15[1] = v8;
    uint64_t v16 = (std::basic_string<char16_t> *)(v15 + 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15[4] = *((void *)&__p.__r_.__value_.__l + 2);
    }
    uint64_t v17 = v47;
    unint64_t v18 = v48;
    uint64_t v19 = v49;
    uint64_t v20 = v50;
    v15[7] = v49;
    BOOL v21 = v15 + 7;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    *(v21 - 2) = v17;
    *(v21 - 1) = v18;
    v21[1] = v20;
    *((_DWORD *)v21 + 4) = v51;
    if (v20)
    {
      unint64_t v22 = *(void *)(v19 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v22 >= v18) {
          v22 %= v18;
        }
      }
      else
      {
        v22 &= v18 - 1;
      }
      *(void *)(v17 + 8 * v22) = v21;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
    }
    char v58 = 1;
    float v23 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
    float v24 = *(float *)(a2 + 32);
    if (v9 && (float)(v24 * (float)v9) >= v23)
    {
LABEL_80:
      uint64_t v40 = *(void **)(*(void *)a2 + 8 * v3);
      uint64_t v41 = v57[0];
      if (v40)
      {
        *(void *)v57[0] = *v40;
      }
      else
      {
        *(void *)v57[0] = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v41;
        *(void *)(*(void *)a2 + 8 * v3) = v44;
        if (!*(void *)v41) {
          goto LABEL_89;
        }
        unint64_t v42 = *(void *)(*(void *)v41 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v42 >= v9) {
            v42 %= v9;
          }
        }
        else
        {
          v42 &= v9 - 1;
        }
        uint64_t v40 = (void *)(*(void *)a2 + 8 * v42);
      }
      void *v40 = v41;
LABEL_89:
      v57[0] = 0;
      ++*(void *)(a2 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v57);
LABEL_90:
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&v47);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v52);
      if (v54) {
        std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v53);
      }
      goto LABEL_96;
    }
    BOOL v25 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_46;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
      if (v9 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a2 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v29 = operator new(8 * *(void *)&prime);
          unint64_t v30 = *(void **)a2;
          *(void *)a2 = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *(int8x8_t *)(a2 + 8) = prime;
          do
            *(void *)(*(void *)a2 + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          uint64_t v32 = (void *)*v44;
          if (*v44)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a2 + 8 * v33) = v44;
            uint64_t v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(void *)(*(void *)a2 + 8 * v39))
                  {
                    *(void *)(*(void *)a2 + 8 * v39) = v32;
                    goto LABEL_71;
                  }
                  *uint64_t v32 = *v38;
                  *uint64_t v38 = **(void **)(*(void *)a2 + 8 * v39);
                  **(void **)(*(void *)a2 + 8 * v39) = v38;
                  uint64_t v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_71:
                uint64_t v32 = v38;
                uint64_t v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_75;
        }
        uint64_t v43 = *(void **)a2;
        *(void *)a2 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v9 = 0;
        *(void *)(a2 + 8) = 0;
      }
    }
LABEL_75:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    goto LABEL_80;
  }
}

void sub_1C8E6A948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100](v43 - 112);
  std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>::~pair((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&a28);
  if (a38) {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a33);
  }
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a40);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>>>::~__hash_table(v42);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 120)) {
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(a1 + 80);
    }
    unint64_t v3 = (void **)(a1 + 56);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    unint64_t v3 = (void **)(a1 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::ContactAddressDowncaster(uint64_t a1, _OWORD **a2, uint64_t a3)
{
  uint64_t v6 = std::string::basic_string[abi:ne180100]<0>((void *)a1, "TreeManipulation_ContactAddressDowncaster");
  v6[3] = "contact_address_downcast";
  unint64_t v7 = v6 + 4;
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "emailAddress");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "phoneNumber");
  if (*(char *)(a1 + 55) < 0)
  {
    unint64_t v9 = *(const void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 55);
    unint64_t v9 = v7;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(a1, a3, v9, v8, (uint64_t *)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
  {
    unint64_t v11 = *(const void **)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 79);
    unint64_t v11 = (const void *)(a1 + 56);
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(a1, a3, v11, v10, (uint64_t *)(a1 + 104));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>((void *)(a1 + 128), *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  return a1;
}

void sub_1C8E6AD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = *(void **)a2;
  unint64_t v9 = *(void **)(a2 + 8);
  if (*(void **)a2 != v9)
  {
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isRelevantMatchingSpan(v8, a3, a4))std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a5, (uint64_t)v8); {
      v8 += 11;
      }
    }
    while (v8 != v9);
  }
  unint64_t v11 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3);
    int v14 = 136315650;
    uint64_t v15 = v12;
    __int16 v16 = 2048;
    uint64_t v17 = v13;
    __int16 v18 = 2080;
    uint64_t v19 = a3;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu %s matching spans", (uint8_t *)&v14, 0x20u);
  }
}

void sub_1C8E6AF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

const void **nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isRelevantMatchingSpan(void *a1, const void *a2, uint64_t a3)
{
  unint64_t result = (const void **)a1[6];
  if (result)
  {
    if (*((char *)result + 23) < 0)
    {
      uint64_t v6 = result;
      unint64_t result = (const void **)*result;
      size_t v5 = (size_t)v6[1];
    }
    else
    {
      size_t v5 = *((unsigned __int8 *)result + 23);
    }
    if (v5 == a3 && !memcmp(result, a2, v5))
    {
      unint64_t v7 = (_DWORD *)a1[1];
      uint64_t v8 = (_DWORD *)a1[2];
      if (v7 != v8)
      {
        while (*v7 != 8)
        {
          if (++v7 == v8)
          {
            unint64_t v7 = (_DWORD *)a1[2];
            return (const void **)(v7 != v8);
          }
        }
      }
      return (const void **)(v7 != v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::findTokenIndicesOfUngroundedNode(char **this@<X0>, nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v60 = 0u;
  memset(v59, 0, sizeof(v59));
  __p[0] = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v59, __p);
  uint64_t v6 = *((void *)&v60 + 1);
  if (!*((void *)&v60 + 1))
  {
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v59);
    unint64_t v7 = 0;
    goto LABEL_74;
  }
  std::basic_string<char16_t> v55 = v3;
  unint64_t v56 = a3;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = v6 - 1;
    unint64_t v11 = *(void **)(*(void *)(*(void *)&v59[8] + (((unint64_t)(v60 + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v60 + v10) & 0x1FF));
    *((void *)&v60 + 1) = v10;
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v59);
    if (v11[11] != v11[12]) {
      goto LABEL_46;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, this[3]);
    uint64_t v13 = this[16];
    uint64_t v12 = this[17];
    uint64_t v14 = v12 - v13;
    if (v12 == v13)
    {
LABEL_8:
      char v20 = 1;
      BOOL v21 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v22 = __p;
        if (v58 < 0) {
          unint64_t v22 = (void **)__p[0];
        }
        uint64_t v23 = v11[9];
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v62 = v22;
        __int16 v63 = 2048;
        uint64_t v64 = v23;
        float v24 = v21;
        BOOL v25 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_20:
        _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x16u);
      }
    }
    else
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0x8E38E38E38E38E39 * (v14 >> 4);
      uint64_t v17 = (uint64_t *)(v13 + 96);
      __int16 v18 = (uint64_t *)(v13 + 104);
      while (1)
      {
        uint64_t v19 = *v17;
        v17 += 18;
        if (v19 == v11[9]) {
          break;
        }
        ++v15;
        v18 += 18;
        if (v15 >= v16) {
          goto LABEL_8;
        }
      }
      if (v15 < v16)
      {
        BOOL v21 = v15;
        while (1)
        {
          uint64_t v26 = *v18;
          v18 += 18;
          BOOL v21 = ((char *)v21 + 1);
          if (v26 == v11[10]) {
            break;
          }
          if (v16 == v21) {
            goto LABEL_16;
          }
        }
        char v20 = 0;
        unint64_t v30 = v15 & 0xFFFFFFFFFFFFFF00;
        uint64_t v29 = v15;
        goto LABEL_22;
      }
LABEL_16:
      char v20 = 1;
      BOOL v21 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v27 = __p;
        if (v58 < 0) {
          unint64_t v27 = (void **)__p[0];
        }
        uint64_t v28 = v11[10];
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v62 = v27;
        __int16 v63 = 2048;
        uint64_t v64 = v28;
        float v24 = v21;
        BOOL v25 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
        goto LABEL_20;
      }
    }
    uint64_t v29 = 0;
    unint64_t v30 = 0;
LABEL_22:
    if (v58 < 0)
    {
      operator delete(__p[0]);
      if (v20) {
        goto LABEL_46;
      }
    }
    else if (v20)
    {
      goto LABEL_46;
    }
    if (v8 >= v9)
    {
      uint64_t v31 = ((char *)v8 - (char *)v7) >> 4;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      if (v9 - v7 > v32) {
        unint64_t v32 = v9 - v7;
      }
      if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33)
      {
        if (v33 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint8x8_t v34 = (char *)operator new(16 * v33);
      }
      else
      {
        uint8x8_t v34 = 0;
      }
      unint64_t v35 = (unint64_t *)&v34[16 * v31];
      *unint64_t v35 = v30 | v29;
      v35[1] = (unint64_t)v21;
      if (v8 == v7)
      {
        uint64_t v37 = &v34[16 * v31];
      }
      else
      {
        uint8x8_t v36 = &v34[16 * v31];
        do
        {
          uint64_t v37 = v36 - 16;
          *((_OWORD *)v36 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 2;
          v36 -= 16;
        }
        while (v8 != v7);
      }
      unint64_t v9 = (unint64_t *)&v34[16 * v33];
      uint64_t v8 = v35 + 2;
      if (v7) {
        operator delete(v7);
      }
      unint64_t v7 = (unint64_t *)v37;
    }
    else
    {
      unint64_t *v8 = v30 | v29;
      v8[1] = (unint64_t)v21;
      v8 += 2;
    }
LABEL_46:
    uint64_t v38 = (char *)v11[11];
    unint64_t v39 = (char *)v11[12];
    while (v38 != v39)
    {
      __p[0] = v38;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v59, __p);
      v38 += 144;
    }
    uint64_t v6 = *((void *)&v60 + 1);
  }
  while (*((void *)&v60 + 1));
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v59);
  if (v7 != v8)
  {
    char v40 = 0;
    unint64_t v41 = 0;
    char v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = v7;
    a3 = v56;
    do
    {
      unint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      v44 += 2;
      if (v40) {
        BOOL v47 = v45 >= v41;
      }
      else {
        BOOL v47 = 0;
      }
      if (!v47)
      {
        unint64_t v41 = v45;
        char v40 = 1;
      }
      if (v42) {
        BOOL v49 = v43 >= v46;
      }
      else {
        BOOL v49 = 0;
      }
      if (!v49)
      {
        unint64_t v43 = v46;
        char v42 = 1;
      }
    }
    while (v44 != v8);
    *unint64_t v56 = v41;
    v56[1] = v43;
    char v51 = 1;
    goto LABEL_80;
  }
  unint64_t v3 = v55;
  a3 = v56;
LABEL_74:
  unint64_t v52 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v53 = this[3];
    if (*((char *)v3 + 23) >= 0) {
      char v54 = v3;
    }
    else {
      char v54 = *(nlv4_inference_orchestrator::trees::TreeNode **)v3;
    }
    *(_DWORD *)uint64_t v59 = 136315394;
    *(void *)&v59[4] = v53;
    *(_WORD *)&v59[12] = 2080;
    *(void *)&v59[14] = v54;
    _os_log_impl(&dword_1C8DA9000, v52, OS_LOG_TYPE_DEBUG, "[%s] No grounded tokens found under node: %s", v59, 0x16u);
  }
  char v51 = 0;
  *(unsigned char *)a3 = 0;
LABEL_80:
  *((unsigned char *)a3 + 16) = v51;
  if (v7) {
    operator delete(v7);
  }
}

void sub_1C8E6B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::handleTreeNode(char **this, nlv4_inference_orchestrator::trees::TreeNode *a2, BOOL *a3)
{
  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isCommonContactAddressNode(a2, a2))
  {
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::findTokenIndicesOfUngroundedNode(this, a2, &v13);
    if (v15)
    {
      unint64_t v7 = v13;
      uint64_t v8 = v14;
      for (uint64_t i = this[10]; i != this[11]; i += 88)
      {
        if ((i[80] & 2) != 0 && (i[80] & 1) != 0 && v13 == *((_DWORD *)i + 19) && v14 == *((_DWORD *)i + 18))
        {
          uint64_t v10 = siri::ontology::oname::graph::ontology_init::common_EmailAddress((siri::ontology::oname::graph::ontology_init *)v6);
          uint64_t v6 = std::string::operator=((std::string *)a2, (const std::string *)(v10 + 8));
          *a3 = 1;
          break;
        }
      }
      for (uint64_t j = this[13]; j != this[14]; j += 88)
      {
        if ((j[80] & 2) != 0 && (j[80] & 1) != 0 && v7 == *((_DWORD *)j + 19) && v8 == *((_DWORD *)j + 18))
        {
          uint64_t v12 = siri::ontology::oname::graph::ontology_init::common_PhoneNumber((siri::ontology::oname::graph::ontology_init *)v6);
          std::string::operator=((std::string *)a2, (const std::string *)(v12 + 8));
          *a3 = 1;
          return;
        }
      }
    }
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isCommonContactAddressNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = siri::ontology::oname::graph::ontology_init::common_ContactAddress(this);
  uint64_t v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    uint64_t v5 = *((void *)v2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v3 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 **)(v3 + 8);
  uint64_t v8 = (unsigned __int8 *)(v3 + 8);
  unint64_t v9 = v10;
  if (v7 >= 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v9;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)v2, v11, *((void *)v2 + 1)) == 0;
  }
  if (!*((unsigned char *)v2 + 23)) {
    return 1;
  }
  uint64_t v12 = v4 - 1;
  do
  {
    int v14 = *(unsigned __int8 *)v2;
    uint64_t v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *)((char *)v2 + 1);
    int v13 = v14;
    int v16 = *v11++;
    int v15 = v16;
    BOOL v18 = v12-- != 0;
    BOOL result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::hasMatchingSpanWithIndices(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = *a2; ; i += 88)
  {
    if (i == a2[1]) {
      return 0;
    }
    if ((*(unsigned char *)(i + 80) & 2) != 0
      && (*(unsigned char *)(i + 80) & 1) != 0
      && *(_DWORD *)(i + 76) == a3
      && *(_DWORD *)(i + 72) == a4)
    {
      break;
    }
  }
  return 1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::downcast(char **this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  unint64_t v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  uint64_t v3 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      uint64_t v5 = v3 - 1;
      uint64_t v6 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(void *)(*((void *)&v12[0] + 1)
                                                                        + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * ((v13 + v5) & 0x1FF));
      *((void *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      BOOL v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::handleTreeNode(this, v6, &v10);
      v4 |= v10;
      uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v6 + 11);
      int v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v6 + 12);
      while (v8 != v7)
      {
        unint64_t v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      uint64_t v3 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    BOOL v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C8E6B7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::cache::SSUCacheFileReadStreamManager::SSUCacheFileReadStreamManager(std::string *this, long long *a2, std::string::size_type *a3, long long *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (std::string *)((char *)this + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    this[2].__r_.__value_.__l.__size_ = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[4].__r_.__value_.__l.__data_) = 1065353216;
  return this;
}

void sub_1C8E6BCC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::openReadStream(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>((void *)(a1 + 64), (char *)a2))
  {
    BOOL v4 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v6 = a2 + 8;
      uint64_t v5 = v7;
      if (*(char *)(v6 + 23) >= 0) {
        uint64_t v5 = v6;
      }
      unint64_t v8 = *(unsigned __int8 *)(v6 + 24);
      if (v8 <= 3) {
        unint64_t v9 = EnumNamesSSUCategoryType(void)::names[v8];
      }
      else {
        unint64_t v9 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v24 = v5;
      __int16 v25 = 2080;
      uint64_t v26 = v9;
      _os_log_impl(&dword_1C8DA9000, v4, OS_LOG_TYPE_ERROR, "Cache file read stream already open for app=%s, category=%s.", buf, 0x16u);
    }
  }
  else
  {
    snlp::ssu::cache::SSUCacheDirectory::lookupCacheFileForCategory(*(void *)(a1 + 24), (char *)a1, (std::__fs::filesystem::path *)(a2 + 8), *(unsigned char *)(a2 + 32), (size_t *)(a1 + 40), buf);
    if (v27) {
      operator new();
    }
    long long v10 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 31) >= 0) {
        uint64_t v11 = a2 + 8;
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      unint64_t v12 = *(unsigned __int8 *)(a2 + 32);
      if (v12 <= 3) {
        long long v13 = EnumNamesSSUCategoryType(void)::names[v12];
      }
      else {
        long long v13 = "";
      }
      int v15 = 136315906;
      int v16 = "SSU";
      __int16 v17 = 2080;
      BOOL v18 = "[insights-snlp-ssu]: ";
      __int16 v19 = 2080;
      uint64_t v20 = v11;
      __int16 v21 = 2080;
      unint64_t v22 = v13;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] %sCache file is missing for app %s and category %s. This means that it has not yet been registered outside the request handling path. Skipping.", (uint8_t *)&v15, 0x2Au);
    }
    std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
  return 0;
}

void sub_1C8E6C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(bufa, a3);
  uint64_t buf = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100]((uint64_t)bufa);
  std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v3);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(void *a1, char *a2)
{
  unint64_t v4 = snlp::ssu::app::SSUAppCategoryHash::operator()((uint64_t)a1, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (snlp::ssu::app::SSUAppCategory::operator==((uint64_t)(v11 + 2), (uint64_t)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 704);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 576));
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *(void *)a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1CB7756B0](a1 + 16);
  std::istream::~istream();
  MEMORY[0x1CB775B50](a1 + 424);
  JUMPOUT(0x1CB775C40);
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[30];
  if (v2 != -1) {
    off_1F2362690[v2]((int)&v4, (boost::archive::detail::basic_iarchive *)a1);
  }
  a1[30] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_iarchiveENS9_13text_iarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_iarchiveENS9_13text_iarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive();
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::numReadStreams(snlp::ssu::cache::SSUCacheFileReadStreamManager *this)
{
  return *((void *)this + 11);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::getReadStream(uint64_t a1, char *a2)
{
  unint64_t v4 = snlp::ssu::app::SSUAppCategoryHash::operator()(a1, a2);
  int8x8_t v5 = *(int8x8_t *)(a1 + 72);
  if (v5)
  {
    unint64_t v6 = v4;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v4 >= *(void *)&v5) {
        unint64_t v9 = v4 % *(void *)&v5;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v5 - 1) & v4;
    }
    uint64_t v10 = *(void **)(*(void *)(a1 + 64) + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v6 == v12)
          {
            if (snlp::ssu::app::SSUAppCategory::operator==((uint64_t)(v11 + 2), (uint64_t)a2)) {
              return v11[7];
            }
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= *(void *)&v5) {
                v12 %= *(void *)&v5;
              }
            }
            else
            {
              v12 &= *(void *)&v5 - 1;
            }
            if (v12 != v9) {
              return 0;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  return 0;
}

void snlp::ssu::cache::SSUCacheFileReadStreamManager::releaseReadStream(void *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = a1 + 8;
  uint8x8_t v7 = std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(a1 + 8, a2);
  if (v7)
  {
    uint64_t v8 = v7[7];
    v7[7] = 0;
    *a3 = v8;
    unint64_t v9 = std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(v6, a2);
    if (v9)
    {
      int8x8_t v10 = (int8x8_t)a1[9];
      unint64_t v11 = v9[1];
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v10) {
          v11 %= *(void *)&v10;
        }
      }
      else
      {
        v11 &= *(void *)&v10 - 1;
      }
      long long v13 = *(void **)(*v6 + 8 * v11);
      do
      {
        int v14 = v13;
        long long v13 = (void *)*v13;
      }
      while (v13 != v9);
      if (v14 == a1 + 10) {
        goto LABEL_21;
      }
      unint64_t v15 = v14[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v10) {
          v15 %= *(void *)&v10;
        }
      }
      else
      {
        v15 &= *(void *)&v10 - 1;
      }
      if (v15 != v11)
      {
LABEL_21:
        if (!*v9) {
          goto LABEL_22;
        }
        unint64_t v16 = *(void *)(*v9 + 8);
        if (v12.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&v10) {
            v16 %= *(void *)&v10;
          }
        }
        else
        {
          v16 &= *(void *)&v10 - 1;
        }
        if (v16 != v11) {
LABEL_22:
        }
          *(void *)(*v6 + 8 * v11) = 0;
      }
      uint64_t v17 = *v9;
      if (*v9)
      {
        unint64_t v18 = *(void *)(v17 + 8);
        if (v12.u32[0] > 1uLL)
        {
          if (v18 >= *(void *)&v10) {
            v18 %= *(void *)&v10;
          }
        }
        else
        {
          v18 &= *(void *)&v10 - 1;
        }
        if (v18 != v11)
        {
          *(void *)(*v6 + 8 * v18) = v14;
          uint64_t v17 = *v9;
        }
      }
      *int v14 = v17;
      void *v9 = 0;
      --a1[11];
      v19[0] = v9;
      v19[1] = a1 + 10;
      char v20 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t **itfm_inference_orchestrator::vocabulary::Vocabulary::insertToken(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = (void **)(a1 + 96);
  BOOL result = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1 + 96, &v20, (void *)a2);
  if (!*result)
  {
    uint64_t v8 = result;
    unint64_t v9 = (uint64_t *)operator new(0x40uLL);
    int8x8_t v10 = (std::string *)(v9 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v9[6] = *(void *)(a2 + 16);
    }
    v9[7] = a3;
    uint64_t v11 = v20;
    uint64_t *v9 = 0;
    v9[1] = 0;
    void v9[2] = v11;
    nlv4_inference_orchestrator::trees::TreeNode *v8 = v9;
    uint8x8_t v12 = (void *)**v6;
    if (v12)
    {
      void *v6 = v12;
      unint64_t v9 = *v8;
    }
    BOOL result = (uint64_t **)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v9);
    ++*(void *)(a1 + 112);
  }
  int v14 = (uint64_t **)(a1 + 128);
  long long v13 = *(uint64_t **)(a1 + 128);
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v15 = (uint64_t **)v13;
        unint64_t v16 = v13[4];
        if (v16 <= a3) {
          break;
        }
        long long v13 = *v15;
        int v14 = v15;
        if (!*v15) {
          goto LABEL_16;
        }
      }
      if (v16 >= a3) {
        break;
      }
      long long v13 = v15[1];
      if (!v13)
      {
        int v14 = v15 + 1;
        goto LABEL_16;
      }
    }
  }
  else
  {
    unint64_t v15 = (uint64_t **)(a1 + 128);
LABEL_16:
    uint64_t v17 = (uint64_t *)operator new(0x40uLL);
    v17[4] = a3;
    unint64_t v18 = (std::string *)(v17 + 5);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v17[7] = *(void *)(a2 + 16);
    }
    *uint64_t v17 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v15;
    *int v14 = v17;
    uint64_t v19 = **(void **)(a1 + 120);
    if (v19)
    {
      *(void *)(a1 + 120) = v19;
      uint64_t v17 = *v14;
    }
    BOOL result = (uint64_t **)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), v17);
    ++*(void *)(a1 + 136);
  }
  return result;
}

void sub_1C8E6CC8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getPadTokenId(itfm_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)this, (void *)this + 3);
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 96;
  if ((void *)(a1 + 104) == std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(a1 + 96, a2))return 0; {
  uint64_t v4 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v3, &v6, a2);
  }
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return *(void *)(v4 + 56);
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int8x8_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v3 + 4, a2);
    uint8x8_t v7 = v3 + 1;
    if (!v6)
    {
      uint8x8_t v7 = v3;
      int8x8_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getUnknownTokenId(itfm_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)this, this);
}

void itfm_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(uint64_t a1, void *a2)
{
  unint64_t v4 = 0;
  std::basic_string<char16_t> __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int8x8_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    BOOL v6 = std::locale::use_facet(&v13, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v13);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v7);
    uint64_t v9 = HIBYTE(v12);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v12 < 0) {
      uint64_t v9 = v11;
    }
    if (v9) {
      itfm_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, v4++);
    }
  }
  if (v12 < 0) {
    operator delete(__p);
  }
}

void sub_1C8E6CED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *itfm_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(void *a1)
{
  v18[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "[UNK]");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "[CLS]");
  std::string::basic_string[abi:ne180100]<0>(a1 + 9, "[SEP]");
  a1[16] = 0;
  a1[13] = 0;
  a1[12] = a1 + 13;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = a1 + 16;
  std::ifstream::basic_ifstream(v16);
  if ((v17[*(void *)(v16[0] - 24) + 16] & 5) != 0)
  {
    std::ifstream::close(v16);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int8x8_t v5 = std::string::append(&v13, " Error code: ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v11.__val_ = 0;
    v11.__cat_ = std::system_category();
    std::error_code::message(&v12, &v11);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v7 = &v12;
    }
    else {
      unsigned __int8 v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::string::append(&v14, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v15);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  itfm_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream((uint64_t)a1, v16);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)), *(_DWORD *)&v17[*(void *)(v16[0] - 24) + 16] | 4);
  }
  v16[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB7756B0](v17);
  std::istream::~istream();
  MEMORY[0x1CB775B50](v18);
  return a1;
}

void sub_1C8E6D204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v41 & 1) == 0)
    {
LABEL_12:
      std::ifstream::~ifstream(&a36);
      std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(v36 + 128));
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(v36 + 104));
      if (*(char *)(v36 + 95) < 0) {
        operator delete(*v39);
      }
      if (*(char *)(v36 + 71) < 0) {
        operator delete(*v38);
      }
      if (*(char *)(v36 + 47) < 0) {
        operator delete(*v37);
      }
      if (*(char *)(v36 + 23) < 0) {
        operator delete(*(void **)v36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v40);
  goto LABEL_12;
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "tokenText argument is empty");
    goto LABEL_9;
  }
  uint64_t v4 = (uint64_t)(a1 + 12);
  int8x8_t v5 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)(a1 + 12), (void *)a2);
  if (a1 + 13 == v5)
  {
    long long v6 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(v4, a1);
    BOOL v7 = v5 == v6;
    int8x8_t v5 = v6;
    if (v7)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Encountered unknown token text and the vocabulary hasno special unknown token");
LABEL_9:
      __cxa_throw(exception, (struct type_info *)off_1E657FB50, MEMORY[0x1E4FBA1E8]);
    }
  }
  return v5[7];
}

void sub_1C8E6D3EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(itfm_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  int8x8_t v5 = (void *)*((void *)this + 16);
  uint64_t v3 = (char *)this + 128;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_17;
  }
  long long v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      long long v6 = (char *)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || *((void *)v6 + 4) > a2)
  {
LABEL_17:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Encountered unknown token ID");
    __cxa_throw(exception, (struct type_info *)off_1E657FB30, MEMORY[0x1E4FBA1B8]);
  }
  if (v6[63] < 0)
  {
    std::error_code v11 = (const std::string::value_type *)*((void *)v6 + 5);
    std::string::size_type v12 = *((void *)v6 + 6);
    std::string::__init_copy_ctor_external(a3, v11, v12);
  }
  else
  {
    long long v10 = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 7);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C8E6D4D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::usershortcut::operator<(const void **a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1;
  int v4 = (char)a2[23];
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  unint64_t v7 = (const void **)*a1;
  size_t v6 = (size_t)a1[1];
  if ((v5 & 0x80u) == 0) {
    size_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v8 = (size_t)a1[1];
  }
  if ((v5 & 0x80u) != 0) {
    a1 = (const void **)*a1;
  }
  if (v4 >= 0) {
    size_t v9 = a2[23];
  }
  else {
    size_t v9 = *((void *)a2 + 1);
  }
  if (v4 >= 0) {
    long long v10 = a2;
  }
  else {
    long long v10 = *(unsigned __int8 **)a2;
  }
  if (v9 >= v8) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(a1, v10, v11);
  BOOL v13 = v8 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  if (v8 == v9)
  {
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(v7, v10, v6)) {
        return 0;
      }
    }
    else if (v5)
    {
      std::string v15 = v3;
      while (*(unsigned __int8 *)v15 == *v10)
      {
        std::string v15 = (const void **)((char *)v15 + 1);
        ++v10;
        if (!--v5) {
          goto LABEL_27;
        }
      }
      return 0;
    }
LABEL_27:
    unint64_t v18 = (unsigned __int8 *)*((void *)a2 + 3);
    uint64_t v17 = a2 + 24;
    unint64_t v16 = v18;
    int v19 = (char)v17[23];
    unint64_t v22 = (unsigned __int8 *)v3[3];
    __int16 v21 = (unsigned __int8 *)(v3 + 3);
    uint64_t v20 = v22;
    int v23 = (char)v21[23];
    if (v23 >= 0) {
      size_t v24 = v21[23];
    }
    else {
      size_t v24 = *((void *)v21 + 1);
    }
    if (v23 >= 0) {
      __int16 v25 = v21;
    }
    else {
      __int16 v25 = v20;
    }
    if (v19 >= 0) {
      size_t v26 = v17[23];
    }
    else {
      size_t v26 = *((void *)v17 + 1);
    }
    if (v19 >= 0) {
      char v27 = v17;
    }
    else {
      char v27 = v16;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v25, v27, v28);
    BOOL v30 = v24 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30) {
      return 1;
    }
  }
  return 0;
}

void snlp::ssu::usershortcut::computeHash(uint64_t *a1, __n128 a2)
{
  BOOL v47 = 0;
  unint64_t v48 = 0;
  BOOL v49 = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v39 = (void **)&v47;
  char v40 = 0;
  if (v3 == v2)
  {
    BOOL v13 = 0;
    std::string v14 = 0;
  }
  else
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4);
    if (v4 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v4);
    unint64_t v6 = 0;
    BOOL v47 = v5;
    unint64_t v48 = (const void **)v5;
    BOOL v49 = (char *)&v5[6 * v7];
    do
    {
      size_t v8 = (char *)&v5[v6 / 8];
      size_t v9 = (long long *)(v2 + v6);
      if (*(char *)(v2 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v5[v6 / 8], *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *((void *)v8 + 2) = *((void *)v9 + 2);
        *(_OWORD *)size_t v8 = v10;
      }
      size_t v11 = (std::string *)&v5[v6 / 8 + 3];
      int v12 = (const std::string::value_type **)(v2 + v6 + 24);
      if (*(char *)(v2 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(v2 + v6 + 32));
      }
      else
      {
        a2 = *(__n128 *)v12;
        v5[v6 / 8 + 5] = *(void *)(v2 + v6 + 40);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = a2;
      }
      v6 += 48;
    }
    while (v2 + v6 != v3);
    BOOL v13 = (const void **)&v5[v6 / 8];
    std::string v14 = v47;
    unint64_t v48 = v13;
  }
  if ((char *)v13 - (char *)v14 < 1)
  {
LABEL_17:
    int v19 = 0;
    unint64_t v16 = 0;
  }
  else
  {
    std::string v15 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 4);
    while (1)
    {
      uint64_t v17 = operator new(48 * v16, v15);
      if (v17) {
        break;
      }
      BOOL v18 = v16 > 1;
      v16 >>= 1;
      if (!v18) {
        goto LABEL_17;
      }
    }
    int v19 = v17;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v14, v13, (uint64_t)&v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 4), (uint64_t)v19, v16, a2);
  if (v19) {
    operator delete(v19);
  }
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  std::vector<unsigned long>::reserve((void **)&v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 4));
  uint64_t v20 = (uint64_t)v47;
  __int16 v21 = v48;
  if (v47 == (uint64_t *)v48)
  {
    size_t v26 = v45;
  }
  else
  {
    do
    {
      unint64_t v22 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v39, v20);
      unint64_t v23 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v39, v20 + 24);
      unint64_t v24 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v23) ^ ((0xC6A4A7935BD1E995 * v23) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v22) ^ ((0xC6A4A7935BD1E995 * v22) >> 47)) + 3864292196u));
      __int16 v25 = v45;
      if (v45 >= v46)
      {
        char v27 = v44;
        uint64_t v28 = v45 - v44;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = (char *)v46 - (char *)v44;
        if (((char *)v46 - (char *)v44) >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v46, v31);
          char v27 = v44;
          __int16 v25 = v45;
        }
        else
        {
          unint64_t v32 = 0;
        }
        unint64_t v33 = (unint64_t *)&v32[8 * v28];
        *unint64_t v33 = v24;
        size_t v26 = v33 + 1;
        while (v25 != v27)
        {
          unint64_t v34 = *--v25;
          *--unint64_t v33 = v34;
        }
        uint64_t v44 = v33;
        unint64_t v45 = v26;
        unint64_t v46 = (unint64_t *)&v32[8 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        unint64_t *v45 = v24;
        size_t v26 = v25 + 1;
      }
      unint64_t v45 = v26;
      v20 += 48;
    }
    while ((const void **)v20 != v21);
  }
  unint64_t v35 = v44;
  if (v44 != v26)
  {
    unint64_t v36 = 0;
    do
    {
      uint64_t v37 = *v35++;
      unint64_t v36 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47))) ^ v36);
    }
    while (v35 != v26);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v39);
  *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1] + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  unint64_t v39 = (void **)*MEMORY[0x1E4FBA408];
  uint64_t v38 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void ***)((char *)&v39 + (void)*(v39 - 3)) = *(void ***)(MEMORY[0x1E4FBA408] + 64);
  v41[0] = v38;
  v41[1] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete((void *)v41[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB775B50](&v43);
  if (v44)
  {
    unint64_t v45 = v44;
    operator delete(v44);
  }
  unint64_t v39 = (void **)&v47;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v39);
}

void sub_1C8E6DB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  BOOL v13 = *(void **)(v11 - 136);
  if (v13)
  {
    *(void *)(v11 - 128) = v13;
    operator delete(v13);
  }
  a11 = (void **)(v11 - 112);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(uint64_t *a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (snlp::ssu::usershortcut::operator<(a2 - 6, (unsigned __int8 *)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(a1, (uint64_t)(a2 - 6));
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != (uint64_t *)a2)
      {
        unint64_t v16 = (const void **)(a1 + 6);
        if (a1 + 6 != (uint64_t *)a2)
        {
          uint64_t v17 = 0;
          BOOL v18 = a1;
          do
          {
            int v19 = v16;
            if (snlp::ssu::usershortcut::operator<(v16, (unsigned __int8 *)v18))
            {
              long long v60 = *(_OWORD *)v19;
              std::string::size_type v61 = v19[2];
              v19[1] = 0;
              void v19[2] = 0;
              *int v19 = 0;
              long long v62 = *(_OWORD *)(v18 + 9);
              uint64_t v63 = v18[11];
              v18[9] = 0;
              v18[10] = 0;
              uint64_t v20 = v17;
              v18[11] = 0;
              while (1)
              {
                uint64_t v21 = v20;
                unint64_t v22 = (char *)a1 + v20;
                unint64_t v23 = (void **)(v22 + 48);
                if (v22[71] < 0) {
                  operator delete(*v23);
                }
                *(_OWORD *)unint64_t v23 = *(_OWORD *)v22;
                *((void *)v22 + 8) = *((void *)v22 + 2);
                v22[23] = 0;
                *unint64_t v22 = 0;
                unint64_t v24 = (void **)(v22 + 72);
                if (v22[95] < 0) {
                  operator delete(*v24);
                }
                __int16 v25 = (char *)a1 + v21;
                long long v26 = *(_OWORD *)((char *)a1 + v21 + 24);
                *((void *)v22 + 11) = *(uint64_t *)((char *)a1 + v21 + 40);
                *(_OWORD *)unint64_t v24 = v26;
                v25[47] = 0;
                v25[24] = 0;
                if (!v21) {
                  break;
                }
                uint64_t v20 = v21 - 48;
                if ((snlp::ssu::usershortcut::operator<((const void **)&v60, (unsigned __int8 *)a1 + v21 - 48) & 1) == 0)
                {
                  char v27 = (uint64_t *)((char *)a1 + v21);
                  uint64_t v28 = (uint64_t)a1 + v21 + 24;
                  goto LABEL_25;
                }
              }
              uint64_t v28 = (uint64_t)(v25 + 24);
              char v27 = a1;
LABEL_25:
              if (*((char *)v27 + 23) < 0) {
                operator delete((void *)*v27);
              }
              *(_OWORD *)char v27 = v60;
              void v27[2] = (uint64_t)v61;
              if (*((char *)v27 + 47) < 0) {
                operator delete(*(void **)v28);
              }
              *(_OWORD *)uint64_t v28 = v62;
              *(void *)(v28 + 16) = v63;
            }
            unint64_t v16 = v19 + 6;
            v17 += 48;
            BOOL v18 = (uint64_t *)v19;
          }
          while (v19 + 6 != a2);
        }
      }
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = (uint64_t)&a1[6 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        __n128 v29 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)a1, (const void **)&a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a7);
        uint64_t v30 = a5 + 48 * v13;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)&a1[6 * (a4 >> 1)], a2, a3, a4 - v13, v30, v29);
        *(void *)&long long v60 = a4;
        unint64_t v31 = a5 + 48 * a4;
        unint64_t v32 = (char *)a1 + 47;
        uint64_t v33 = v30;
        uint64_t v34 = a5;
        while (v33 != v31)
        {
          unint64_t v35 = (void **)(v32 - 47);
          int v36 = snlp::ssu::usershortcut::operator<((const void **)v33, (unsigned __int8 *)v34);
          int v37 = *(v32 - 24);
          if (v36)
          {
            if (v37 < 0) {
              operator delete(*v35);
            }
            long long v38 = *(_OWORD *)v33;
            *(void *)(v32 - 31) = *(void *)(v33 + 16);
            *(_OWORD *)unint64_t v35 = v38;
            *(unsigned char *)(v33 + 23) = 0;
            *(unsigned char *)uint64_t v33 = 0;
            unint64_t v39 = (void **)(v32 - 23);
            if (*v32 < 0) {
              operator delete(*v39);
            }
            long long v40 = *(_OWORD *)(v33 + 24);
            *(void *)(v32 - 7) = *(void *)(v33 + 40);
            *(_OWORD *)unint64_t v39 = v40;
            *(unsigned char *)(v33 + 47) = 0;
            *(unsigned char *)(v33 + 24) = 0;
            v33 += 48;
          }
          else
          {
            if (v37 < 0) {
              operator delete(*v35);
            }
            long long v41 = *(_OWORD *)v34;
            *(void *)(v32 - 31) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v35 = v41;
            *(unsigned char *)(v34 + 23) = 0;
            *(unsigned char *)uint64_t v34 = 0;
            char v42 = (void **)(v32 - 23);
            if (*v32 < 0) {
              operator delete(*v42);
            }
            long long v43 = *(_OWORD *)(v34 + 24);
            *(void *)(v32 - 7) = *(void *)(v34 + 40);
            *(_OWORD *)char v42 = v43;
            *(unsigned char *)(v34 + 47) = 0;
            *(unsigned char *)(v34 + 24) = 0;
            v34 += 48;
          }
          v32 += 48;
          if (v34 == v30)
          {
            if (v33 != v31)
            {
              uint64_t v44 = 0;
              do
              {
                unint64_t v45 = &v32[v44];
                unint64_t v46 = (void **)&v32[v44 - 47];
                if (v32[v44 - 24] < 0) {
                  operator delete(*v46);
                }
                uint64_t v47 = v33 + v44;
                long long v48 = *(_OWORD *)(v33 + v44);
                *(void *)&v32[v44 - 31] = *(void *)(v33 + v44 + 16);
                *(_OWORD *)unint64_t v46 = v48;
                *(unsigned char *)(v47 + 23) = 0;
                *(unsigned char *)uint64_t v47 = 0;
                int v50 = *v45;
                BOOL v49 = v45 - 23;
                if (v50 < 0) {
                  operator delete(*(void **)v49);
                }
                long long v51 = *(_OWORD *)(v47 + 24);
                *((void *)v49 + 2) = *(void *)(v47 + 40);
                *(_OWORD *)BOOL v49 = v51;
                *(unsigned char *)(v47 + 47) = 0;
                *(unsigned char *)(v47 + 24) = 0;
                v44 += 48;
              }
              while (v47 + 48 != v31);
            }
            goto LABEL_61;
          }
        }
        if (v34 != v30)
        {
          uint64_t v52 = 0;
          do
          {
            uint64_t v53 = &v32[v52];
            char v54 = (void **)&v32[v52 - 47];
            if (v32[v52 - 24] < 0) {
              operator delete(*v54);
            }
            uint64_t v55 = v34 + v52;
            long long v56 = *(_OWORD *)(v34 + v52);
            *(void *)&v32[v52 - 31] = *(void *)(v34 + v52 + 16);
            *(_OWORD *)char v54 = v56;
            *(unsigned char *)(v55 + 23) = 0;
            *(unsigned char *)uint64_t v55 = 0;
            int v58 = *v53;
            uint64_t v57 = v53 - 23;
            if (v58 < 0) {
              operator delete(*(void **)v57);
            }
            long long v59 = *(_OWORD *)(v55 + 24);
            *((void *)v57 + 2) = *(void *)(v55 + 40);
            *(_OWORD *)uint64_t v57 = v59;
            *(unsigned char *)(v55 + 47) = 0;
            *(unsigned char *)(v55 + 24) = 0;
            v52 += 48;
          }
          while (v55 + 48 != v30);
        }
LABEL_61:
        if (a5) {
          std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>((unint64_t *)&v60, a5);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, &a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v14, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)a1, v14, a2, a3, v13, v15, a5, a6);
      }
    }
  }
}

void sub_1C8E6E08C(_Unwind_Exception *exception_object, ...)
{
  va_start(va, exception_object);
  if (v1) {
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>((unint64_t *)va, v1);
  }
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)int v12 = a1[1];
  *(void *)&v12[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v6 = a1 + 3;
  uint64_t v5 = a1[3];
  *(void *)uint64_t v11 = a1[4];
  *(void *)&v11[7] = *(uint64_t *)((char *)a1 + 39);
  char v7 = *((unsigned char *)a1 + 47);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v8;
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)*v6);
  }
  long long v9 = *(_OWORD *)(a2 + 24);
  v6[2] = *(void *)(a2 + 40);
  *(_OWORD *)unint64_t v6 = v9;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    int v10 = *(char *)(a2 + 47);
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = *(void *)v12;
    *(void *)(a2 + 15) = *(void *)&v12[7];
    *(unsigned char *)(a2 + 23) = v4;
    if (v10 < 0) {
      operator delete(*(void **)(a2 + 24));
    }
  }
  else
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = *(void *)v12;
    *(void *)(a2 + 15) = *(void *)&v12[7];
    *(unsigned char *)(a2 + 23) = v4;
  }
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = *(void *)v11;
  *(void *)(a2 + 39) = *(void *)&v11[7];
  *(unsigned char *)(a2 + 47) = v7;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 result)
{
  if (a4)
  {
    uint64_t v6 = a5;
    long long v9 = a1;
    if (a4 == 2)
    {
      int v12 = a2 - 6;
      int v13 = snlp::ssu::usershortcut::operator<(a2 - 6, (unsigned __int8 *)a1);
      uint64_t v14 = (_OWORD *)(v6 + 24);
      uint64_t v15 = (_OWORD *)(v6 + 48);
      if (v13)
      {
        long long v16 = *(_OWORD *)v12;
        *(void *)(v6 + 16) = *(a2 - 4);
        *(_OWORD *)uint64_t v6 = v16;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *int v12 = 0;
        long long v17 = *(_OWORD *)(a2 - 3);
        *(void *)(v6 + 40) = *(a2 - 1);
        *uint64_t v14 = v17;
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        *(a2 - 3) = 0;
        long long v18 = *(_OWORD *)v9;
        *(void *)(v6 + 64) = v9[2];
        *uint64_t v15 = v18;
        v9[1] = 0;
        void v9[2] = 0;
        long long *v9 = 0;
        uint64_t v11 = v9 + 3;
        BOOL result = *(__n128 *)(v9 + 3);
        int v19 = v9[5];
      }
      else
      {
        long long v36 = *(_OWORD *)v9;
        *(void *)(v6 + 16) = v9[2];
        *(_OWORD *)uint64_t v6 = v36;
        v9[1] = 0;
        void v9[2] = 0;
        long long *v9 = 0;
        long long v37 = *(_OWORD *)(v9 + 3);
        *(void *)(v6 + 40) = v9[5];
        *uint64_t v14 = v37;
        v9[4] = 0;
        v9[5] = 0;
        void v9[3] = 0;
        long long v38 = *(_OWORD *)v12;
        *(void *)(v6 + 64) = *(a2 - 4);
        *uint64_t v15 = v38;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *int v12 = 0;
        uint64_t v11 = a2 - 3;
        BOOL result = *(__n128 *)(a2 - 3);
        int v19 = *(a2 - 1);
      }
      *(void *)(v6 + 88) = v19;
      *(__n128 *)(v6 + 72) = result;
      goto LABEL_31;
    }
    if (a4 == 1)
    {
      long long v10 = *(_OWORD *)a1;
      *(void *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v10;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      uint64_t v11 = a1 + 3;
      BOOL result = *(__n128 *)(a1 + 3);
      *(void *)(a5 + 40) = a1[5];
      *(__n128 *)(a5 + 24) = result;
LABEL_31:
      std::string *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      return result;
    }
    if ((uint64_t)a4 > 8)
    {
      long long v40 = &a1[6 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, v40, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(&v9[6 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v6 + 48 * (a4 >> 1), a4 - (a4 >> 1));
      long long v41 = &v9[6 * (a4 >> 1)];
      while (v41 != a2)
      {
        int v42 = snlp::ssu::usershortcut::operator<(v41, (unsigned __int8 *)v9);
        long long v43 = (__n128 *)(v6 + 24);
        if (v42)
        {
          long long v44 = *(_OWORD *)v41;
          *(void *)(v6 + 16) = v41[2];
          *(_OWORD *)uint64_t v6 = v44;
          v41[1] = 0;
          v41[2] = 0;
          *long long v41 = 0;
          BOOL result = *(__n128 *)(v41 + 3);
          *(void *)(v6 + 40) = v41[5];
          __n128 *v43 = result;
          v41[4] = 0;
          v41[5] = 0;
          v41[3] = 0;
          v41 += 6;
        }
        else
        {
          long long v45 = *(_OWORD *)v9;
          *(void *)(v6 + 16) = v9[2];
          *(_OWORD *)uint64_t v6 = v45;
          v9[1] = 0;
          void v9[2] = 0;
          long long *v9 = 0;
          BOOL result = *(__n128 *)(v9 + 3);
          *(void *)(v6 + 40) = v9[5];
          __n128 *v43 = result;
          v9[4] = 0;
          v9[5] = 0;
          void v9[3] = 0;
          v9 += 6;
        }
        v6 += 48;
        if (v9 == v40)
        {
          if (v41 != a2)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = &v41[v46];
              uint64_t v48 = v6 + v46 * 8;
              long long v49 = *(_OWORD *)&v41[v46];
              *(void *)(v48 + 16) = v41[v46 + 2];
              *(_OWORD *)uint64_t v48 = v49;
              v47[1] = 0;
              v47[2] = 0;
              *uint64_t v47 = 0;
              BOOL result = *(__n128 *)&v41[v46 + 3];
              *(void *)(v48 + 40) = v41[v46 + 5];
              *(__n128 *)(v48 + 24) = result;
              v47[4] = 0;
              v47[5] = 0;
              v47[3] = 0;
              v46 += 6;
            }
            while (v47 + 6 != a2);
          }
          return result;
        }
      }
      if (v9 != v40)
      {
        uint64_t v50 = 0;
        do
        {
          uint64_t v51 = v6 + v50 * 8;
          uint64_t v52 = &v9[v50];
          long long v53 = *(_OWORD *)&v9[v50];
          *(void *)(v51 + 16) = v9[v50 + 2];
          *(_OWORD *)uint64_t v51 = v53;
          v52[1] = 0;
          v52[2] = 0;
          NSObject *v52 = 0;
          BOOL result = *(__n128 *)&v9[v50 + 3];
          *(void *)(v51 + 40) = v9[v50 + 5];
          *(__n128 *)(v51 + 24) = result;
          v52[4] = 0;
          v52[5] = 0;
          v52[3] = 0;
          v50 += 6;
        }
        while (v52 + 6 != v40);
      }
    }
    else if (a1 != a2)
    {
      long long v20 = *(_OWORD *)a1;
      *(void *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v20;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      BOOL result = *(__n128 *)(a1 + 3);
      *(void *)(a5 + 40) = a1[5];
      *(__n128 *)(a5 + 24) = result;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
      uint64_t v21 = a1 + 6;
      if (a1 + 6 != a2)
      {
        uint64_t v22 = 0;
        unint64_t v23 = (_OWORD *)a5;
        do
        {
          unint64_t v24 = v21;
          __int16 v25 = v23 + 3;
          int v26 = snlp::ssu::usershortcut::operator<(v21, (unsigned __int8 *)v23);
          char v27 = (_OWORD *)((char *)v23 + 72);
          if (v26)
          {
            *__int16 v25 = *v23;
            *((void *)v23 + 8) = *((void *)v23 + 2);
            *(void *)unint64_t v23 = 0;
            *((void *)v23 + 1) = 0;
            long long v28 = *(_OWORD *)((char *)v23 + 24);
            *((void *)v23 + 2) = 0;
            *((void *)v23 + 3) = 0;
            *char v27 = v28;
            *((void *)v23 + 11) = *((void *)v23 + 5);
            uint64_t v29 = v6;
            *((void *)v23 + 4) = 0;
            *((void *)v23 + 5) = 0;
            if (v23 != (_OWORD *)v6)
            {
              uint64_t v30 = v22;
              while (1)
              {
                uint64_t v29 = v6 + v30;
                if (!snlp::ssu::usershortcut::operator<(v24, (unsigned __int8 *)(v6 + v30 - 48))) {
                  break;
                }
                if (*(char *)(v29 + 23) < 0) {
                  operator delete(*(void **)v29);
                }
                uint64_t v31 = v6 + v30;
                *(_OWORD *)uint64_t v29 = *(_OWORD *)(v6 + v30 - 48);
                *(void *)(v29 + 16) = *(void *)(v6 + v30 - 32);
                *(unsigned char *)(v6 + v30 - 25) = 0;
                *(unsigned char *)(v29 - 48) = 0;
                unint64_t v32 = (void **)(v6 + v30 + 24);
                if (*(char *)(v6 + v30 + 47) < 0) {
                  operator delete(*v32);
                }
                *(_OWORD *)unint64_t v32 = *(_OWORD *)(v31 - 24);
                *(void *)(v6 + v30 + 40) = *(void *)(v31 - 8);
                *(unsigned char *)(v31 - 1) = 0;
                *(unsigned char *)(v31 - 24) = 0;
                v30 -= 48;
                if (!v30)
                {
                  uint64_t v29 = v6;
                  break;
                }
              }
            }
            if (*(char *)(v29 + 23) < 0) {
              operator delete(*(void **)v29);
            }
            long long v33 = *(_OWORD *)v24;
            *(void *)(v29 + 16) = v24[2];
            *(_OWORD *)uint64_t v29 = v33;
            *((unsigned char *)v9 + 71) = 0;
            *(unsigned char *)unint64_t v24 = 0;
            uint64_t v34 = (void **)(v29 + 24);
            if (*(char *)(v29 + 47) < 0) {
              operator delete(*v34);
            }
            BOOL result = *(__n128 *)(v9 + 9);
            *(void *)(v29 + 40) = v9[11];
            *(__n128 *)uint64_t v34 = result;
            *((unsigned char *)v9 + 95) = 0;
            *((unsigned char *)v9 + 72) = 0;
          }
          else
          {
            long long v35 = *(_OWORD *)v24;
            *((void *)v23 + 8) = v24[2];
            *__int16 v25 = v35;
            v24[1] = 0;
            void v24[2] = 0;
            *unint64_t v24 = 0;
            BOOL result = *(__n128 *)(v9 + 9);
            *((void *)v23 + 11) = v9[11];
            *char v27 = result;
            v9[10] = 0;
            v9[11] = 0;
            v9[9] = 0;
          }
          uint64_t v21 = v24 + 6;
          v22 += 48;
          unint64_t v23 = v25;
          long long v9 = v24;
        }
        while (v24 + 6 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    char v4 = (char *)(a2 + 23);
    do
    {
      if (v4[24] < 0) {
        operator delete(*(void **)(v4 + 1));
      }
      if (*v4 < 0) {
        operator delete(*(void **)(v4 - 23));
      }
      ++v3;
      v4 += 48;
    }
    while (v3 < *a1);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(const void **a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a6) {
    return;
  }
  uint64_t v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    while ((snlp::ssu::usershortcut::operator<((const void **)a2, (unsigned __int8 *)a1) & 1) == 0)
    {
      a1 += 6;
      if (!--a5) {
        return;
      }
    }
    uint64_t v85 = a7;
    uint64_t v86 = a3;
    uint64_t v84 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>((uint64_t *)a1, a2);
        return;
      }
      if (a5 >= 0) {
        uint64_t v20 = a5;
      }
      else {
        uint64_t v20 = a5 + 1;
      }
      uint64_t v19 = v20 >> 1;
      long long v17 = (unsigned __int8 *)&a1[6 * (v20 >> 1)];
      if (a3 != (const void **)a2)
      {
        uint64_t v82 = v20 >> 1;
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 4);
        a3 = (const void **)a2;
        do
        {
          uint64_t v22 = &a3[6 * (v21 >> 1)];
          int v23 = snlp::ssu::usershortcut::operator<(v22, v17);
          if (v23) {
            v21 += ~(v21 >> 1);
          }
          else {
            v21 >>= 1;
          }
          if (v23) {
            a3 = v22 + 6;
          }
        }
        while (v21);
        a8 = v84;
        uint64_t v19 = v82;
      }
      uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 4);
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v10 + 1;
      }
      uint64_t v16 = v15 >> 1;
      a3 = (const void **)(a2 + 48 * (v15 >> 1));
      long long v17 = (unsigned __int8 *)a2;
      if ((const void **)a2 != a1)
      {
        uint64_t v80 = v15 >> 1;
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 4);
        long long v17 = (unsigned __int8 *)a1;
        do
        {
          if (snlp::ssu::usershortcut::operator<(a3, &v17[48 * (v18 >> 1)]))
          {
            v18 >>= 1;
          }
          else
          {
            v17 += 48 * (v18 >> 1) + 48;
            v18 += ~(v18 >> 1);
          }
        }
        while (v18);
        a8 = v84;
        uint64_t v16 = v80;
      }
      uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (unsigned __int8 *)a1) >> 4);
    }
    if (v17 == (unsigned __int8 *)a2)
    {
      unint64_t v24 = a3;
    }
    else if (a3 == (const void **)a2)
    {
      unint64_t v24 = (const void **)v17;
    }
    else
    {
      uint64_t v81 = v16;
      uint64_t v83 = v19;
      unint64_t v24 = (const void **)(v17 + 48);
      __int16 v25 = (uint64_t *)v17;
      uint64_t v26 = a2;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(v25, a2);
        v25 += 6;
        a2 += 48;
        if ((const void **)a2 == a3) {
          break;
        }
        if (v25 == (uint64_t *)v26) {
          uint64_t v26 = a2;
        }
        v24 += 6;
      }
      if (v25 != (uint64_t *)v26)
      {
        char v27 = (uint64_t *)v26;
        do
        {
          while (1)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(v25, v26);
            v25 += 6;
            v26 += 48;
            if ((const void **)v26 == a3) {
              break;
            }
            if (v25 == v27) {
              char v27 = (uint64_t *)v26;
            }
          }
          uint64_t v26 = (uint64_t)v27;
        }
        while (v25 != v27);
      }
      a8 = v84;
      a7 = v85;
      uint64_t v16 = v81;
      uint64_t v19 = v83;
    }
    a5 -= v19;
    v10 -= v16;
    if (v19 + v16 >= a5 + v10)
    {
      long long v28 = a3;
      uint64_t v29 = v19;
      uint64_t v30 = a5;
      uint64_t v31 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v24, v28, v86, a4, v30, v10, a7, a8);
      a2 = (uint64_t)v17;
      uint64_t v10 = v31;
      a5 = v29;
      a3 = v24;
      if (!v10) {
        return;
      }
    }
    else
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, v17, v24, a4, v19, v16, a7, a8);
      a1 = v24;
      a2 = (uint64_t)a3;
      a3 = v86;
      if (!v10) {
        return;
      }
    }
  }
  if (a5 <= v10)
  {
    if (a1 != (const void **)a2)
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      do
      {
        uint64_t v51 = a7 + v49 * 8;
        uint64_t v52 = &a1[v49];
        long long v53 = *(_OWORD *)&a1[v49];
        *(void *)(v51 + 16) = a1[v49 + 2];
        *(_OWORD *)uint64_t v51 = v53;
        v52[1] = 0;
        v52[2] = 0;
        NSObject *v52 = 0;
        long long v54 = *(_OWORD *)&a1[v49 + 3];
        *(void *)(v51 + 40) = a1[v49 + 5];
        *(_OWORD *)(v51 + 24) = v54;
        v52[4] = 0;
        v52[5] = 0;
        v52[3] = 0;
        ++v50;
        v49 += 6;
      }
      while (v52 + 6 != (const void **)a2);
      uint64_t v55 = a7 + v49 * 8;
      unint64_t v88 = v50;
      if (a7 + v49 * 8 != a7)
      {
        uint64_t v56 = v55 - 48;
        uint64_t v57 = a7;
        while ((const void **)a2 != a3)
        {
          int v58 = snlp::ssu::usershortcut::operator<((const void **)a2, (unsigned __int8 *)v57);
          int v59 = *((char *)a1 + 23);
          if (v58)
          {
            if (v59 < 0) {
              operator delete((void *)*a1);
            }
            long long v60 = *(_OWORD *)a2;
            a1[2] = *(const void **)(a2 + 16);
            *(_OWORD *)a1 = v60;
            *(unsigned char *)(a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            std::string::size_type v61 = (void **)(a1 + 3);
            if (*((char *)a1 + 47) < 0) {
              operator delete(*v61);
            }
            long long v62 = *(_OWORD *)(a2 + 24);
            a1[5] = *(const void **)(a2 + 40);
            *(_OWORD *)std::string::size_type v61 = v62;
            *(unsigned char *)(a2 + 47) = 0;
            *(unsigned char *)(a2 + 24) = 0;
            a2 += 48;
          }
          else
          {
            if (v59 < 0) {
              operator delete((void *)*a1);
            }
            long long v63 = *(_OWORD *)v57;
            a1[2] = *(const void **)(v57 + 16);
            *(_OWORD *)a1 = v63;
            *(unsigned char *)(v57 + 23) = 0;
            *(unsigned char *)uint64_t v57 = 0;
            uint64_t v64 = (void **)(a1 + 3);
            if (*((char *)a1 + 47) < 0) {
              operator delete(*v64);
            }
            long long v65 = *(_OWORD *)(v57 + 24);
            a1[5] = *(const void **)(v57 + 40);
            *(_OWORD *)uint64_t v64 = v65;
            *(unsigned char *)(v57 + 47) = 0;
            *(unsigned char *)(v57 + 24) = 0;
            v57 += 48;
          }
          a1 += 6;
          if (v57 == v55) {
            goto LABEL_97;
          }
        }
        if (v57 != v55)
        {
          uint64_t v74 = 0;
          do
          {
            uint64_t v75 = &a1[v74];
            if (SHIBYTE(a1[v74 + 2]) < 0) {
              operator delete((void *)*v75);
            }
            uint64_t v76 = v57 + v74 * 8;
            long long v77 = *(_OWORD *)(v57 + v74 * 8);
            v75[2] = *(const void **)(v57 + v74 * 8 + 16);
            *(_OWORD *)uint64_t v75 = v77;
            *(unsigned char *)(v76 + 23) = 0;
            *(unsigned char *)uint64_t v76 = 0;
            uint64_t v78 = (void **)(v75 + 3);
            if (*((char *)v75 + 47) < 0) {
              operator delete(*v78);
            }
            long long v79 = *(_OWORD *)(v76 + 24);
            v75[5] = *(const void **)(v76 + 40);
            *(_OWORD *)uint64_t v78 = v79;
            *(unsigned char *)(v76 + 47) = 0;
            *(unsigned char *)(v76 + 24) = 0;
            v74 += 6;
          }
          while (v76 != v56);
        }
      }
      goto LABEL_97;
    }
  }
  else if (a3 != (const void **)a2)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    do
    {
      uint64_t v34 = a7 + v32;
      long long v35 = (void *)(a2 + v32);
      long long v36 = *(_OWORD *)(a2 + v32);
      *(void *)(v34 + 16) = *(void *)(a2 + v32 + 16);
      *(_OWORD *)uint64_t v34 = v36;
      v35[1] = 0;
      _DWORD v35[2] = 0;
      *long long v35 = 0;
      long long v37 = *(_OWORD *)(a2 + v32 + 24);
      *(void *)(v34 + 40) = *(void *)(a2 + v32 + 40);
      *(_OWORD *)(v34 + 24) = v37;
      uint8_t v35[4] = 0;
      v35[5] = 0;
      void v35[3] = 0;
      ++v33;
      v32 += 48;
    }
    while (v35 + 6 != a3);
    uint64_t v38 = a7 + v32;
    unint64_t v88 = v33;
    while (v38 != a7)
    {
      if ((const void **)a2 == a1)
      {
        if (v38 != a7)
        {
          unint64_t v66 = 0;
          do
          {
            uint64_t v67 = &a3[v66 / 8];
            __int16 v68 = (void **)&a3[v66 / 8 - 6];
            if (*((char *)&a3[v66 / 8 - 3] - 1) < 0) {
              operator delete(*v68);
            }
            uint64_t v69 = (long long *)(v38 + v66 - 48);
            long long v70 = *v69;
            a3[v66 / 8 - 4] = *(const void **)(v38 + v66 - 32);
            *(_OWORD *)__int16 v68 = v70;
            *(unsigned char *)(v38 + v66 - 25) = 0;
            *(unsigned char *)uint64_t v69 = 0;
            uint64_t v71 = (void **)(v67 - 3);
            if (*((char *)v67 - 1) < 0) {
              operator delete(*v71);
            }
            unint64_t v72 = v38 + v66;
            long long v73 = *(_OWORD *)(v38 + v66 - 24);
            *(v67 - 1) = *(const void **)(v38 + v66 - 8);
            *(_OWORD *)uint64_t v71 = v73;
            *(unsigned char *)(v72 - 1) = 0;
            *(unsigned char *)(v72 - 24) = 0;
            v66 -= 48;
          }
          while (v38 + v66 != a7);
        }
        goto LABEL_97;
      }
      int v39 = snlp::ssu::usershortcut::operator<((const void **)(v38 - 48), (unsigned __int8 *)(a2 - 48));
      long long v40 = (void **)(a3 - 6);
      int v41 = *((char *)a3 - 25);
      if (v39)
      {
        if (v41 < 0) {
          operator delete(*v40);
        }
        long long v42 = *(_OWORD *)(a2 - 48);
        *(a3 - 4) = *(const void **)(a2 - 32);
        *(_OWORD *)long long v40 = v42;
        *(unsigned char *)(a2 - 25) = 0;
        *(unsigned char *)(a2 - 48) = 0;
        long long v43 = (void **)(a3 - 3);
        if (*((char *)a3 - 1) < 0) {
          operator delete(*v43);
        }
        long long v44 = *(_OWORD *)(a2 - 24);
        *(a3 - 1) = *(const void **)(a2 - 8);
        *(_OWORD *)long long v43 = v44;
        uint64_t v45 = a2;
        a2 -= 48;
      }
      else
      {
        if (v41 < 0) {
          operator delete(*v40);
        }
        long long v46 = *(_OWORD *)(v38 - 48);
        *(a3 - 4) = *(const void **)(v38 - 32);
        *(_OWORD *)long long v40 = v46;
        *(unsigned char *)(v38 - 25) = 0;
        *(unsigned char *)(v38 - 48) = 0;
        uint64_t v47 = (void **)(a3 - 3);
        if (*((char *)a3 - 1) < 0) {
          operator delete(*v47);
        }
        long long v48 = *(_OWORD *)(v38 - 24);
        *(a3 - 1) = *(const void **)(v38 - 8);
        *(_OWORD *)uint64_t v47 = v48;
        uint64_t v45 = v38;
        v38 -= 48;
      }
      *(unsigned char *)(v45 - 1) = 0;
      *(unsigned char *)(v45 - 24) = 0;
      a3 -= 6;
    }
    goto LABEL_97;
  }
  unint64_t v88 = 0;
LABEL_97:
  if (a7) {
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>(&v88, a7);
  }
}

void snlp::ssu::usershortcut::buildPositiveExamples(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::reserve(&v17, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  unint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)v3 + 3), *((void *)v3 + 4));
      }
      else
      {
        long long v5 = *(long long *)((char *)v3 + 24);
        v25.__r_.__value_.__r.__words[2] = *((void *)v3 + 5);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
      }
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v20 = (std::string *)&v14;
      LOBYTE(v21) = 0;
      uint64_t v14 = (long long *)operator new(0x18uLL);
      uint64_t v15 = v14;
      uint64_t v16 = (char *)v14 + 24;
      uint64_t v15 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (long long *)&v25, (long long *)v26, (std::string *)v14);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        v25.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
      }
      memset(v26, 0, sizeof(v26));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26[1], v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
      unint64_t v7 = v18;
      if (v18 >= v19)
      {
        unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - v17) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x38E38E38E38E38ELL) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v19 - v17) >> 3) > v10) {
          unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(v19 - v17) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v19 - v17) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v11 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v11 = v10;
        }
        unint64_t v24 = &v19;
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v20 = (std::string *)v11;
        uint64_t v21 = v11 + 72 * v9;
        uint64_t v22 = v21;
        unint64_t v23 = v11 + 72 * v12;
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v21, (long long *)&v25);
        v22 += 72;
        std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(&v17, &v20);
        unint64_t v8 = v18;
        std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)&v20);
      }
      else
      {
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v18, (long long *)&v25);
        unint64_t v8 = v7 + 72;
      }
      unint64_t v18 = v8;
      uint64_t v20 = &v26[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      uint64_t v20 = v26;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      v3 += 3;
    }
    while (v3 != v4);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(a2, v17, v18, 0x8E38E38E38E38E39 * ((uint64_t)(v18 - v17) >> 3));
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1C8E6F100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::basic_string<char16_t> __p = &a13;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1C8E6F194(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8E6F140);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::requiredForLocale(unsigned __int8 **a1)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v10, "de_DE");
  std::string::basic_string[abi:ne180100]<0>(v11, "en_AU");
  std::string::basic_string[abi:ne180100]<0>(v12, "en_CA");
  std::string::basic_string[abi:ne180100]<0>(v13, "en_GB");
  std::string::basic_string[abi:ne180100]<0>(v14, "en_IN");
  std::string::basic_string[abi:ne180100]<0>(v15, "en_US");
  std::string::basic_string[abi:ne180100]<0>(v16, "fr_FR");
  long long v6 = 0;
  unint64_t v7 = 0;
  v8[0] = 0;
  v8[1] = &v6;
  char v9 = 0;
  long long v6 = (std::string *)operator new(0xA8uLL);
  unint64_t v7 = v6;
  v8[0] = v6 + 7;
  uint64_t v2 = 0;
  unint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v8, &v10, &v17, v6);
  do
  {
    if (SHIBYTE(v16[v2 + 2]) < 0) {
      operator delete((void *)v16[v2]);
    }
    v2 -= 3;
  }
  while (v2 != -21);
  unint64_t v3 = v7;
  BOOL v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v6, (uint64_t)v7, a1) != (void)v3;
  *(void *)&long long v10 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v4;
}

void sub_1C8E6F368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 167) < 0) {
      operator delete(*(void **)(&a15 + v16 + 144));
    }
    v16 -= 24;
    if (v16 == -168) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      long long v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      long long v6 = a3[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        char v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        char v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::MinimumMaximumLabeller(uint64_t a1, uint64_t a2)
{
  BOOL v4 = std::string::basic_string[abi:ne180100]<0>((void *)a1, "TreeManipulation_MinimumMaximumLabeller");
  void v4[3] = "min_max_labeller";
  std::string::basic_string[abi:ne180100]<0>(v4 + 4, "minimumMaximum");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "floatSettingState");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), "minimum");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 104), "maximum");
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpans(a1, a2, (std::string *)(a1 + 128));
  return a1;
}

void sub_1C8E6F548(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  long long v6 = (const void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v8 = *(const void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 55);
    uint64_t v8 = (const void *)(a1 + 32);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    char v9 = *(const void **)(a1 + 80);
    uint64_t v10 = *(void *)(a1 + 88);
  }
  else
  {
    char v9 = (const void *)(a1 + 80);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 103);
  }
  unsigned int v11 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, v8, v7, v9, v10);
  if (*(char *)(a1 + 55) < 0)
  {
    int v13 = *(const void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    int v13 = v6;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    uint64_t v14 = *(const void **)(a1 + 104);
    uint64_t v15 = *(void *)(a1 + 112);
  }
  else
  {
    uint64_t v14 = (const void *)(a1 + 104);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 127);
  }
  if (v11 | nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, v13, v12, v14, v15))uint64_t v16 = (uint64_t)v6; {
  else
  }
    uint64_t v16 = a1 + 56;
  if (*(char *)(v16 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
  }
  else {
    std::string __p = *(std::string *)v16;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpecificSpans(a1, a2, p_p, size, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E6F6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v9 = *(void **)a2;
  uint64_t v10 = *(void **)(a2 + 8);
  if (*(void **)a2 == v10)
  {
    int v13 = 0;
  }
  else
  {
    do
    {
      int v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::doesMatchingSpanHaveLabelAndSemanticValue(v9, a3, a4, a5, a6);
      if (v13) {
        break;
      }
      v9 += 11;
    }
    while (v9 != v10);
  }
  uint64_t v14 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(void *)(a1 + 24);
    int v17 = 136315906;
    uint64_t v18 = v15;
    __int16 v19 = 2080;
    uint64_t v20 = a3;
    __int16 v21 = 2080;
    uint64_t v22 = a5;
    __int16 v23 = 1024;
    int v24 = (int)v13;
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] MatchingSpan with label %s, semantic value %s found?: %{BOOL}d", (uint8_t *)&v17, 0x26u);
  }
  return v13;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpecificSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  uint64_t v10 = (void *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
  {
    uint64_t v12 = *(const void **)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
    uint64_t v12 = (const void *)(a1 + 80);
  }
  unsigned int v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, a3, a4, v12, v11);
  uint64_t v14 = (void *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
  {
    uint64_t v16 = *(const void **)(a1 + 104);
    uint64_t v15 = *(void *)(a1 + 112);
  }
  else
  {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 127);
    uint64_t v16 = (const void *)(a1 + 104);
  }
  int v17 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, a3, a4, v16, v15);
  if (((v13 ^ 1) & 1) == 0 && (v17 & 1) == 0)
  {
    uint64_t v18 = siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue((siri::ontology::oname::graph::ontology_init *)v17);
LABEL_19:
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a5, (const std::string *)(v18 + 8));
    return;
  }
  if (((v13 | v17 ^ 1) & 1) == 0)
  {
    uint64_t v18 = siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue((siri::ontology::oname::graph::ontology_init *)v17);
    goto LABEL_19;
  }
  if (((v13 ^ 1 | v17 ^ 1) & 1) == 0)
  {
    __int16 v19 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 103) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v20 = *(void *)(a1 + 24);
      if (*(char *)(a1 + 127) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      int v21 = 136315906;
      uint64_t v22 = v20;
      __int16 v23 = 2080;
      int v24 = v10;
      __int16 v25 = 2080;
      uint64_t v26 = v14;
      __int16 v27 = 2080;
      long long v28 = a3;
      _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_DEBUG, "[%s] Both %s and %s semantic values found when using %s spans", (uint8_t *)&v21, 0x2Au);
    }
  }
}

void sub_1C8E6F9EC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::doesMatchingSpanHaveLabelAndSemanticValue(void *a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  BOOL result = (unsigned __int8 *)a1[6];
  if (result)
  {
    if ((char)result[23] < 0)
    {
      uint64_t v10 = result;
      BOOL result = *(unsigned __int8 **)result;
      size_t v9 = *((void *)v10 + 1);
    }
    else
    {
      size_t v9 = result[23];
    }
    if (v9 != a3 || memcmp(result, a2, v9)) {
      return 0;
    }
    BOOL result = (unsigned __int8 *)a1[7];
    if (result)
    {
      if ((char)result[23] < 0)
      {
        BOOL result = *(unsigned __int8 **)result;
        size_t v11 = *(void *)(a1[7] + 8);
      }
      else
      {
        size_t v11 = result[23];
      }
      if (v11 != a5 || memcmp(result, a4, v11)) {
        return 0;
      }
      uint64_t v12 = (_DWORD *)a1[1];
      unsigned int v13 = (_DWORD *)a1[2];
      if (v12 != v13)
      {
        while (*v12 != 3 && *v12 != 8)
        {
          if (++v12 == v13)
          {
            uint64_t v12 = (_DWORD *)a1[2];
            return (unsigned __int8 *)(v13 != v12);
          }
        }
      }
      return (unsigned __int8 *)(v13 != v12);
    }
  }
  return result;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue(size_t *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3 = siri::ontology::oname::graph::ontology_init::Argument_definedValue((siri::ontology::oname::graph::ontology_init *)this);
  uint64_t v4 = *((unsigned __int8 *)this + 71);
  if ((v4 & 0x80u) == 0) {
    size_t v5 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v5 = this[7];
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v3 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(this + 6);
  size_t v11 = *(unsigned __int8 **)(v3 + 8);
  size_t v9 = (unsigned __int8 *)(v3 + 8);
  uint64_t v10 = v11;
  if (v7 >= 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v8, v12, this[7]) == 0;
  }
  if (!*((unsigned char *)this + 71)) {
    return 1;
  }
  uint64_t v13 = v4 - 1;
  do
  {
    int v15 = *(unsigned __int8 *)v8;
    uint64_t v8 = (const void **)((char *)v8 + 1);
    int v14 = v15;
    int v17 = *v12++;
    int v16 = v17;
    BOOL v19 = v13-- != 0;
    BOOL result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::handleTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2, BOOL *a3)
{
  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMinOrMaxDefinedValue((size_t *)a2, a2))
  {
    uint64_t v7 = *((void *)a2 + 11);
    uint64_t v8 = *((void *)a2 + 12);
    if (*((unsigned char *)this + 152))
    {
      for (; v7 != v8; v7 += 144)
      {
        if (nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v7, v6))
        {
          if (!*((unsigned char *)this + 152)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          std::string::operator=((std::string *)v7, (const std::string *)((char *)this + 128));
        }
      }
    }
    else
    {
      if (v7 != v8)
      {
        while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v7, v6))
        {
          v7 += 144;
          if (v7 == v8)
          {
            uint64_t v7 = v8;
            goto LABEL_25;
          }
        }
        if (v7 != v8 && v7 + 144 != v8)
        {
          size_t v9 = (_OWORD *)(v7 + 256);
          do
          {
            if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v9 - 14, v6))
            {
              if (*(char *)(v7 + 23) < 0) {
                operator delete(*(void **)v7);
              }
              long long v10 = *(v9 - 7);
              *(void *)(v7 + 16) = *((void *)v9 - 12);
              *(_OWORD *)uint64_t v7 = v10;
              *((unsigned char *)v9 - 89) = 0;
              *((unsigned char *)v9 - 112) = 0;
              size_t v11 = (void **)(v7 + 24);
              if (*(char *)(v7 + 47) < 0) {
                operator delete(*v11);
              }
              long long v12 = *(_OWORD *)((char *)v9 - 88);
              *(void *)(v7 + 40) = *((void *)v9 - 9);
              *(_OWORD *)size_t v11 = v12;
              *((unsigned char *)v9 - 65) = 0;
              *((unsigned char *)v9 - 88) = 0;
              uint64_t v13 = (void **)(v7 + 48);
              if (*(char *)(v7 + 71) < 0) {
                operator delete(*v13);
              }
              long long v14 = *(v9 - 4);
              *(void *)(v7 + 64) = *((void *)v9 - 6);
              *(_OWORD *)uint64_t v13 = v14;
              *((unsigned char *)v9 - 41) = 0;
              *((unsigned char *)v9 - 64) = 0;
              *(_OWORD *)(v7 + 72) = *(_OWORD *)((char *)v9 - 40);
              std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v7 + 88);
              *(_OWORD *)(v7 + 88) = *(_OWORD *)((char *)v9 - 24);
              *(void *)(v7 + 104) = *((void *)v9 - 1);
              *((void *)v9 - 3) = 0;
              *((void *)v9 - 2) = 0;
              *((void *)v9 - 1) = 0;
              long long v15 = v9[1];
              *(_OWORD *)(v7 + 112) = *v9;
              *(_OWORD *)(v7 + 128) = v15;
              v7 += 144;
            }
            int v16 = v9 + 2;
            v9 += 9;
          }
          while (v16 != (_OWORD *)v8);
        }
      }
LABEL_25:
      int v17 = (long long *)*((void *)a2 + 12);
      if ((long long *)v7 != v17)
      {
        uint64_t v18 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>(v17, *((long long **)a2 + 12), v7);
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)a2 + 88, v18);
      }
    }
    *a3 = 1;
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMinOrMaxDefinedValue(size_t *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3 = siri::ontology::oname::graph::ontology_init::common_Number((siri::ontology::oname::graph::ontology_init *)this);
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if ((v4 & 0x80u) == 0) {
    size_t v5 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v5 = this[1];
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v3 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  long long v10 = *(unsigned __int8 **)(v3 + 8);
  uint64_t v8 = (unsigned __int8 *)(v3 + 8);
  size_t v9 = v10;
  if (v7 >= 0) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v9;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp((const void *)*this, v11, this[1])) {
      return 0;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)this + 23))
  {
LABEL_18:
    size_t v14 = this[11];
    size_t v15 = this[12];
    while (v14 != v15)
    {
      BOOL isDefinedValue = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v14, (const nlv4_inference_orchestrator::trees::TreeNode *)v11);
      if (isDefinedValue)
      {
        uint64_t v17 = siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue((siri::ontology::oname::graph::ontology_init *)isDefinedValue);
        uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
        if ((v18 & 0x80u) == 0) {
          uint64_t v19 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          uint64_t v19 = *(void *)(v14 + 8);
        }
        uint64_t v20 = *(unsigned __int8 *)(v17 + 31);
        int v21 = (char)v20;
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(v17 + 16);
        }
        if (v19 == v20)
        {
          __int16 v23 = *(unsigned __int8 **)(v17 + 8);
          v17 += 8;
          uint64_t v22 = v23;
          if (v21 >= 0) {
            int v24 = (unsigned __int8 *)v17;
          }
          else {
            int v24 = v22;
          }
          if ((v18 & 0x80) != 0)
          {
            uint64_t v17 = memcmp(*(const void **)v14, v24, *(void *)(v14 + 8));
            if (!v17) {
              return 1;
            }
          }
          else
          {
            if (!*(unsigned char *)(v14 + 23)) {
              return 1;
            }
            uint64_t v25 = 0;
            while (*(unsigned __int8 *)(v14 + v25) == v24[v25])
            {
              if (v18 == ++v25) {
                return 1;
              }
            }
          }
        }
        uint64_t v26 = siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue((siri::ontology::oname::graph::ontology_init *)v17);
        uint64_t v27 = *(unsigned __int8 *)(v14 + 23);
        if ((v27 & 0x80u) == 0) {
          uint64_t v28 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          uint64_t v28 = *(void *)(v14 + 8);
        }
        uint64_t v29 = *(unsigned __int8 *)(v26 + 31);
        int v30 = (char)v29;
        if ((v29 & 0x80u) != 0) {
          uint64_t v29 = *(void *)(v26 + 16);
        }
        if (v28 == v29)
        {
          unint64_t v33 = *(unsigned __int8 **)(v26 + 8);
          uint64_t v31 = (unsigned __int8 *)(v26 + 8);
          uint64_t v32 = v33;
          if (v30 >= 0) {
            size_t v11 = v31;
          }
          else {
            size_t v11 = v32;
          }
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v14, v11, *(void *)(v14 + 8))) {
              return 1;
            }
          }
          else
          {
            if (!*(unsigned char *)(v14 + 23)) {
              return 1;
            }
            uint64_t v34 = 0;
            while (*(unsigned __int8 *)(v14 + v34) == v11[v34])
            {
              if (v27 == ++v34) {
                return 1;
              }
            }
          }
        }
      }
      v14 += 144;
    }
    return 0;
  }
  long long v12 = this;
  while (*(unsigned __int8 *)v12 == *v11)
  {
    long long v12 = (size_t *)((char *)v12 + 1);
    ++v11;
    if (!--v4) {
      goto LABEL_18;
    }
  }
  return 0;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::label(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  size_t v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  uint64_t v3 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      uint64_t v5 = v3 - 1;
      uint64_t v6 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(void *)(*((void *)&v12[0] + 1)
                                                                        + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * ((v13 + v5) & 0x1FF));
      *((void *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      BOOL v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::handleTreeNode(this, v6, &v10);
      v4 |= v10;
      uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v6 + 11);
      int v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v6 + 12);
      while (v8 != v7)
      {
        size_t v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      uint64_t v3 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    BOOL v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C8E7001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::app::SSUAppCategory::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    size_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
    }
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
}

unint64_t snlp::ssu::app::SSUAppCategoryHash::operator()(uint64_t a1, char *a2)
{
  unint64_t v3 = 0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *(int *)a2) ^ ((0xC6A4A7935BD1E995 * *(int *)a2) >> 47))
     + 3864292196u;
  unint64_t v4 = boost::hash<std::string>::operator()(a2 + 8);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[32]) ^ ((0xC6A4A7935BD1E995 * a2[32]) >> 47))) ^ (3864292196u - 0x395B586CA42E166BLL * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3)));
}

void uaap_orchestration::grammar::parseValueToString(unsigned int *a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  unsigned int v2 = *a1;
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
  {
    std::basic_string<char16_t>::size_type v3 = (21 - *((char *)a1 + 21));
  }
  else
  {
    a1 = (unsigned int *)*((void *)a1 + 1);
    std::basic_string<char16_t>::size_type v3 = v2;
  }
  toU16String((const char *)a1, v3, a2);
}

unint64_t uaap_orchestration::grammar::Path::size(uaap_orchestration::grammar::Path *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
}

void uaap_orchestration::grammar::Path::getFirstComponent(uaap_orchestration::grammar::Path *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this == *((void *)this + 1))
  {
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *(const std::basic_string<char16_t>::value_type **)v3, *(void *)(v3 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      *(void *)(a2 + 16) = *(void *)(v3 + 16);
    }
    char v4 = 1;
  }
  *(unsigned char *)(a2 + 24) = v4;
}

void uaap_orchestration::grammar::Path::getLastComponent(uaap_orchestration::grammar::Path *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this == v3)
  {
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    if (*(char *)(v3 - 1) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *(const std::basic_string<char16_t>::value_type **)(v3 - 24), *(void *)(v3 - 16));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(v3 - 24);
      *(void *)(a2 + 16) = *(void *)(v3 - 8);
    }
    char v4 = 1;
  }
  *(unsigned char *)(a2 + 24) = v4;
}

std::basic_string<char16_t> *uaap_orchestration::grammar::Path::toString@<X0>(std::basic_string<char16_t> *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  unsigned int v2 = (std::basic_string<char16_t>::__raw *)this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::basic_string<char16_t>::size_type v4 = this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0] != this->__r_.__value_.__l.__size_)
  {
    int v5 = *(char *)(v4 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (const std::basic_string<char16_t>::value_type *)this->__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v6 = *(const std::basic_string<char16_t>::value_type **)v4;
    }
    if (v5 >= 0) {
      std::basic_string<char16_t>::size_type v7 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v7 = *(void *)(v4 + 8);
    }
    this = std::basic_string<char16_t>::append(a2, v6, v7);
    std::basic_string<char16_t>::size_type v4 = v2->__words[0];
  }
  for (std::basic_string<char16_t>::size_type i = v4 + 24; i != v2->__words[1]; i += 24)
  {
    std::basic_string<char16_t>::append(a2, (const std::basic_string<char16_t>::value_type *)".", 1uLL);
    int v9 = *(char *)(i + 23);
    if (v9 >= 0) {
      BOOL v10 = (const std::basic_string<char16_t>::value_type *)i;
    }
    else {
      BOOL v10 = *(const std::basic_string<char16_t>::value_type **)i;
    }
    if (v9 >= 0) {
      std::basic_string<char16_t>::size_type v11 = *(unsigned __int8 *)(i + 23);
    }
    else {
      std::basic_string<char16_t>::size_type v11 = *(void *)(i + 8);
    }
    this = std::basic_string<char16_t>::append(a2, v10, v11);
  }
  return this;
}

void sub_1C8E7035C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char16_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char16_t>::size_type v6 = 10;
    std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      uint64_t v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        uint64_t v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      std::basic_string<char16_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    size_t v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (__old_cap > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v19);
  std::basic_string<char16_t>::size_type v21 = (std::basic_string<char16_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 2 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  }
  std::basic_string<char16_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  }
  if (__old_cap != 10) {
    operator delete(v15);
  }
  std::basic_string<char16_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

uint64_t uaap_orchestration::grammar::Path::extendWithComponent@<X0>(long long **a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::basic_string<char16_t>>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) + 1);
  std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(a3, (std::basic_string<char16_t> *)*a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  unint64_t v6 = a3[1];
  if (v6 >= a3[2])
  {
    uint64_t result = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, a2);
  }
  else
  {
    std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)a3, a2);
    uint64_t result = v6 + 24;
  }
  a3[1] = result;
  return result;
}

void sub_1C8E70634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::basic_string<char16_t>>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(uint64_t *a1, std::basic_string<char16_t> *a2, long long *a3, long long *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = a3;
  std::basic_string<char16_t>::size_type v7 = a2;
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v9 = a1[2];
  std::basic_string<char16_t>::size_type v11 = (std::basic_string<char16_t> *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) < a5)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *a1) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v13) {
      uint64_t v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *a1) >> 3);
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v46 = v10;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v33 = (std::basic_string<char16_t> *)(v17 + 24 * v14);
    long long v43 = (uint64_t *)v17;
    *(void *)&long long v44 = v33;
    *((void *)&v44 + 1) = v33;
    unint64_t v45 = v17 + 24 * v18;
    uint64_t v34 = 3 * a5;
    long long v35 = &v33[a5];
    uint64_t v36 = 8 * v34;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v33, *(const std::basic_string<char16_t>::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v37 = *v6;
        v33->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v37;
      }
      ++v33;
      unint64_t v6 = (long long *)((char *)v6 + 24);
      v36 -= 24;
    }
    while (v36);
    *((void *)&v44 + 1) = v35;
    *(void *)&long long v44 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(v10, (uint64_t)v7, (uint64_t)v7, *a1, *a1, v44, v44);
    uint64_t v38 = (std::basic_string<char16_t> *)a1[1];
    uint64_t v49 = v35;
    unint64_t v50 = v35;
    v47[0] = v10;
    v47[1] = &v49;
    v47[2] = &v50;
    if (v7 != v38)
    {
      do
      {
        long long v39 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v35->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
        ++v35;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        ++v7;
      }
      while (v7 != v38);
      unint64_t v50 = v35;
    }
    char v48 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v47);
    long long v40 = *(_OWORD *)a1;
    uint64_t v41 = v45;
    *a1 = v44;
    a1[1] = (uint64_t)v35;
    long long v44 = v40;
    uint64_t v42 = a1[2];
    a1[2] = v41;
    unint64_t v45 = v42;
    long long v43 = (uint64_t *)v40;
    std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v43);
    return;
  }
  uint64_t v19 = (char *)v11 - (char *)a2;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)a2) >> 3)) >= a5)
  {
    std::basic_string<char16_t>::size_type v21 = (long long *)((char *)a3 + 24 * a5);
    uint64_t v22 = (std::basic_string<char16_t> *)a1[1];
LABEL_21:
    std::basic_string<char16_t>::size_type v25 = &v7[a5];
    uint64_t v26 = &v22[-a5];
    uint64_t v27 = v22;
    if (v26 < v11)
    {
      uint64_t v27 = v22;
      do
      {
        long long v28 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        ++v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        ++v26;
      }
      while (v26 < v11);
    }
    a1[1] = (uint64_t)v27;
    if (v22 != v25)
    {
      uint64_t v29 = v22 - 1;
      uint64_t v30 = 8 * (((char *)v22 - (char *)v25) >> 3);
      do
      {
        if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29->__r_.__value_.__l.__data_);
        }
        uint64_t v31 = (long long *)((char *)&v7[-1] + v30);
        long long v32 = *v31;
        v29->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[(unint64_t)v30 / 8 - 1];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v32;
        --v29;
        *((unsigned char *)&v7->__r_.__value_.__l + v30 - 1) = 0;
        *(_WORD *)uint64_t v31 = 0;
        v30 -= 24;
      }
      while (v30);
    }
    for (; v6 != v21; ++v7)
    {
      std::basic_string<char16_t>::operator=(v7, (const std::basic_string<char16_t> *)v6);
      unint64_t v6 = (long long *)((char *)v6 + 24);
    }
    return;
  }
  v47[0] = a1[1];
  unint64_t v50 = v11;
  std::basic_string<char16_t>::size_type v21 = (long long *)((char *)a3 + 8 * (((char *)v11 - (char *)a2) >> 3));
  long long v43 = a1 + 2;
  *(void *)&long long v44 = &v50;
  *((void *)&v44 + 1) = v47;
  LOBYTE(v45) = 0;
  uint64_t v22 = v11;
  if (v21 != a4)
  {
    uint64_t v23 = (long long *)((char *)a3 + 8 * (((char *)v11 - (char *)a2) >> 3));
    do
    {
      if (*((char *)v23 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v22, *(const std::basic_string<char16_t>::value_type **)v23, *((void *)v23 + 1));
        uint64_t v22 = (std::basic_string<char16_t> *)v47[0];
      }
      else
      {
        long long v24 = *v23;
        v22->__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
      }
      uint64_t v23 = (long long *)((char *)v23 + 24);
      v47[0] = ++v22;
    }
    while (v23 != a4);
  }
  LOBYTE(v45) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v43);
  a1[1] = (uint64_t)v22;
  if (v19 >= 1) {
    goto LABEL_21;
  }
}

void sub_1C8E70A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(void *)(v2 + 8) = v3;
  _Unwind_Resume(a1);
}

void std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(*(std::basic_string<char16_t> **)(a1 + 8), *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1C8E70AF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v17 = v6;
  if (v7)
  {
    uint64_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (std::basic_string<char16_t> *)&v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  unint64_t v15 = v10;
  uint64_t v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
    uint64_t v10 = v15;
  }
  else
  {
    long long v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  unint64_t v15 = v10 + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C8E70C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      long long v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        long long v4 = *(void ***)(a1 + 16);
      }
      unint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24)
  {
    long long v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::operator=(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::basic_string<char16_t>::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        std::basic_string<char16_t>::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __CFStringRef str = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
        std::basic_string<char16_t>::size_type v4 = size;
      }
      return std::basic_string<char16_t>::__assign_no_alias<false>(this, (const std::basic_string<char16_t>::value_type *)__str, v4);
    }
    else if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char16_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<true>(std::basic_string<char16_t> *__dst, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  BOOL v5 = __n_add > 0xA;
  std::basic_string<char16_t>::size_type v6 = __n_add - 10;
  if (v5)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(__dst, 0xAuLL, v6, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add) {
      memmove(__dst, __src, 2 * __n_add);
    }
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<false>(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t>::size_type v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    std::basic_string<char16_t>::size_type v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add) {
      memmove(v6, __src, 2 * __n_add);
    }
    *((_WORD *)v6 + __n_add) = 0;
  }
  return this;
}

uint64_t uaap_orchestration::grammar::Path::singletonPath@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a2, a1);
  a2[1] = result;
  return result;
}

void sub_1C8E70F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::ResolutionTable::getSemanticValues(uaap_orchestration::grammar::ResolutionTable *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 3));
  for (std::basic_string<char16_t>::size_type i = (long long *)*((void *)this + 2); i; std::basic_string<char16_t>::size_type i = *(long long **)i)
  {
    std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100](&__p, i + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::basic_string<char16_t>::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::basic_string<char16_t> v7 = __p;
    }
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(a2, (unsigned __int16 *)&v7, (uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    long long v8 = (void **)&v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8E71024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100](std::basic_string<char16_t> *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[1], *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1C8E710DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (std::basic_string<char16_t>::size_type i = *v12; i; std::basic_string<char16_t>::size_type i = *(unsigned __int16 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = operator new(0x28uLL);
  *unint64_t v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t v15 = *v23;
LABEL_38:
    *uint64_t v23 = v15;
    goto LABEL_39;
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v24 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1C8E71320(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::~pair(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    unint64_t v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a4);
    unint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[v9];
    unint64_t v14 = v7;
    unint64_t v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    char v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v7, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
          unint64_t v7 = v14;
        }
        else
        {
          long long v10 = *a2;
          v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
        }
        a2 = (long long *)((char *)a2 + 24);
        unint64_t v14 = ++v7;
      }
      while (a2 != a3);
      unint64_t v8 = v7;
    }
    char v12 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1C8E71480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t uaap_orchestration::grammar::ResolutionTable::getSynonyms@<X0>(void *a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X8>)
{
  long long v4 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_string<char16_t>::size_type v5 = (long long *)*((void *)v4 + 5);
  uint64_t v6 = (long long *)*((void *)v4 + 6);
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a3, v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
}

void uaap_orchestration::grammar::ResolutionTable::loadSemanticValueToSynonyms(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (*a1)
  {
    uint64_t v3 = *((void *)a1 + 1);
    uint64_t v58 = v3 + 24 * *a1;
    do
    {
      if (*(_WORD *)(v3 + 22) != 3)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: row.IsObject() == false [for key: ");
        uint64_t v52 = std::string::append(&v61, "resolution-table");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        long long v54 = std::string::append(&__p, " entry");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        uint64_t v56 = std::string::append(&v63, "]");
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v64);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v4 = *(_DWORD *)v3;
      std::basic_string<char16_t>::size_type v5 = *(int **)(v3 + 8);
      Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v3, v5, "semantic-value");
      if (&v5[12 * v4] == Member || (__int16 v7 = *((_WORD *)Member + 23), (v7 & 0x400) == 0))
      {
        uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Error parsing JSON grammar: parsedSemanticValue != row.MemberEnd() && parsedSemanticValue->value.IsString() == false [for key: ");
        uint64_t v42 = std::string::append(&__p, "semantic-value");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        long long v44 = std::string::append(&v63, "]");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v41, &v64);
        __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v10 = Member[6];
      unint64_t v8 = Member + 6;
      unsigned int v9 = v10;
      if ((v7 & 0x1000) != 0)
      {
        std::basic_string<char16_t>::size_type v11 = (21 - *((char *)v8 + 21));
      }
      else
      {
        unint64_t v8 = (int *)*((void *)v8 + 1);
        std::basic_string<char16_t>::size_type v11 = v9;
      }
      toU16String((const char *)v8, v11, (std::basic_string<char16_t> *)&v63);
      unsigned int v12 = *(_DWORD *)v3;
      unint64_t v13 = *(int **)(v3 + 8);
      unint64_t v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v3, v13, "synonyms");
      if (&v13[12 * v12] == v14 || *((_WORD *)v14 + 23) != 4)
      {
        uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: parsedSynonyms != row.MemberEnd() && parsedSynonyms->value.IsArray() == false [for key: ");
        uint64_t v47 = std::string::append(&v61, "synonyms");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&__p, "]");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, &v64);
        __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v15 = v14[6];
      if (v15)
      {
        float v16 = (unsigned int *)*((void *)v14 + 4);
        uint64_t v17 = 24 * v15;
        do
        {
          if ((*((_WORD *)v16 + 11) & 0x400) == 0)
          {
            uint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v60, "Error parsing JSON grammar: parsedSynonym.IsString() == false [for key: ");
            long long v35 = std::string::append(&v60, "synonyms");
            long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            long long v37 = std::string::append(&v61, " entry");
            long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            long long v39 = std::string::append(&__p, "]");
            long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v34, &v64);
            __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
          BOOL v18 = (uint64_t *)std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>(v2, (unsigned __int16 *)&v63, (long long **)&v64);
          if ((*((_WORD *)v16 + 11) & 0x1000) != 0) {
            unint64_t v19 = (const char *)v16;
          }
          else {
            unint64_t v19 = (const char *)*((void *)v16 + 1);
          }
          if ((*((_WORD *)v16 + 11) & 0x1000) != 0) {
            std::basic_string<char16_t>::size_type v20 = (21 - *((char *)v16 + 21));
          }
          else {
            std::basic_string<char16_t>::size_type v20 = *v16;
          }
          toU16String(v19, v20, (std::basic_string<char16_t> *)&__p);
          unint64_t v21 = v18[7];
          unint64_t v22 = v18[6];
          if (v22 >= v21)
          {
            uint64_t v24 = v18[5];
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v24) >> 3);
            unint64_t v26 = v25 + 1;
            if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v24) >> 3);
            if (2 * v27 > v26) {
              unint64_t v26 = 2 * v27;
            }
            if (v27 >= 0x555555555555555) {
              unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v28 = v26;
            }
            unint64_t v66 = v18 + 7;
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            std::string::size_type v30 = v28 + 24 * v25;
            v64.__r_.__value_.__r.__words[0] = v28;
            v64.__r_.__value_.__l.__size_ = v30;
            unint64_t v65 = v28 + 24 * v29;
            long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v30 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type v30 = v31;
            memset(&__p, 0, sizeof(__p));
            v64.__r_.__value_.__r.__words[2] = v30 + 24;
            std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v18 + 5, &v64);
            uint64_t v32 = v18[6];
            std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v64);
            int v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v18[6] = v32;
            uint64_t v2 = a2;
            if (v33 < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v22 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v22 = v23;
            v18[6] = v22 + 24;
          }
          v16 += 6;
          v17 -= 24;
        }
        while (v17);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      v3 += 24;
    }
    while (v3 != v58);
  }
}

void sub_1C8E71A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    uint64_t v41 = a11;
    if ((v37 & 1) == 0)
    {
LABEL_12:
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v41);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v41 = a11;
    if (!v37) {
      goto LABEL_12;
    }
  }
  __cxa_free_exception(v38);
  goto LABEL_12;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(unsigned int a1, int *a2, char *__s)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  v8[1] = __s;
  void v8[2] = 0x405000000000000;
  v8[0] = strlen(__s);
  if (a1)
  {
    std::basic_string<char16_t>::size_type v5 = &a2[12 * a1];
    uint64_t v6 = 48 * a1;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((unsigned int *)v8, a2))
    {
      a2 += 12;
      v6 -= 48;
      if (!v6) {
        return v5;
      }
    }
  }
  return a2;
}

char *std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unsigned int v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100]((unsigned __int16 *)v13 + 8, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  float v16 = (std::basic_string<char16_t> *)(v13 + 16);
  uint64_t v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v16, *(const std::basic_string<char16_t>::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 7) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)unint64_t v13 = *v26;
LABEL_41:
    void *v26 = v13;
    goto LABEL_42;
  }
  *(void *)unint64_t v13 = *v15;
  *uint64_t v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_1C8E71FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(unsigned int *a1, int *a2)
{
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
    unsigned int v2 = 21 - *((char *)a1 + 21);
  }
  else {
    unsigned int v2 = *a1;
  }
  int v3 = 21 - *((char *)a2 + 21);
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0) {
    int v3 = *a2;
  }
  if (v2 != v3) {
    return 0;
  }
  if ((*((_WORD *)a1 + 11) & 0x1000) == 0) {
    a1 = (unsigned int *)*((void *)a1 + 1);
  }
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0) {
    a2 = (int *)*((void *)a2 + 1);
  }
  return a1 == (unsigned int *)a2 || memcmp(a1, a2, v2) == 0;
}

std::basic_string<char16_t> *uaap_orchestration::grammar::ValueConstraints::getValueType@<X0>(uaap_orchestration::grammar::ValueConstraints *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](a2, (long long *)this);
}

uint64_t uaap_orchestration::grammar::ValueConstraints::getEnumChoices@<X0>(long long **this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

uint64_t uaap_orchestration::grammar::ValueConstraints::getOpenListChoices@<X0>(long long **this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a2, this[7], this[8], 0xAAAAAAAAAAAAAAABLL * (((char *)this[8] - (char *)this[7]) >> 3));
}

unsigned char *uaap_orchestration::grammar::ValueConstraints::getResolutionTable@<X0>(uaap_orchestration::grammar::ValueConstraints *this@<X0>, unsigned char *a2@<X8>)
{
  return std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](a2, (uint64_t)this + 80);
}

unsigned char *std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1C8E721A8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  std::basic_string<char16_t>::size_type v5 = *(unsigned __int16 **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)(v5 + 8));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        unsigned int v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (std::basic_string<char16_t>::size_type i = *v12; i; std::basic_string<char16_t>::size_type i = *(unsigned __int16 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, v5 + 8)) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v15 = (char *)operator new(0x40uLL);
      v26[0] = v15;
      v26[1] = a1 + 16;
      char v27 = 0;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = v8;
      std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100]((std::basic_string<char16_t> *)(v15 + 16), (long long *)v5 + 1);
      char v27 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        *(void *)uint64_t v15 = *v23;
      }
      else
      {
        *(void *)uint64_t v15 = *v6;
        void *v6 = v15;
        *(void *)(v22 + 8 * v2) = v6;
        if (!*(void *)v15) {
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(*(void *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9) {
            v24 %= v9;
          }
        }
        else
        {
          v24 &= v9 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_40:
      v26[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
LABEL_41:
      std::basic_string<char16_t>::size_type v5 = *(unsigned __int16 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C8E7242C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::ValueConstraints::loadValueType(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  unsigned int v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "type");
  if (&v4[12 * v3] == Member)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    __int16 v6 = *((_WORD *)Member + 23);
    if ((v6 & 0x400) == 0)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "Error parsing JSON grammar: parsedValueType->value.IsString() == false [for key: ");
      unsigned int v12 = std::string::append(&v16, "type");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      unint64_t v14 = std::string::append(&v17, "]");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v18);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v9 = Member[6];
    unint64_t v7 = Member + 6;
    unsigned int v8 = v9;
    if ((v6 & 0x1000) != 0)
    {
      std::basic_string<char16_t>::size_type v10 = (21 - *((char *)v7 + 21));
    }
    else
    {
      unint64_t v7 = (int *)*((void *)v7 + 1);
      std::basic_string<char16_t>::size_type v10 = v8;
    }
    toU16String((const char *)v7, v10, (std::basic_string<char16_t> *)&v18);
    *a2 = v18;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void sub_1C8E725AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::ValueConstraints::loadEnumChoices(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  unsigned int v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "enum-choices");
  if (&v4[12 * v3] == Member)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    __int16 v6 = Member;
    if (*((_WORD *)Member + 23) != 4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v27, "Error parsing JSON grammar: parsedEnumChoices->value.IsArray() == false [for key: ");
      unint64_t v20 = std::string::append(&v27, "enum-choices");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = std::string::append(&v28, "]");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::basic_string<char16_t>>::reserve(a2, Member[6]);
    unint64_t v7 = (unsigned int *)*((void *)v6 + 4);
    uint64_t v8 = v6[6];
    uint64_t v25 = a2;
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      do
      {
        if ((*((_WORD *)v7 + 11) & 0x400) == 0)
        {
          unsigned int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "Error parsing JSON grammar: enumChoice.IsString() == false [for key: ");
          long long v13 = std::string::append(&v26, "enum-choices");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          long long v15 = std::string::append(&v27, " entry");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::string v17 = std::string::append(&v28, "]");
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v12, &v29);
          __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0) {
          std::basic_string<char16_t>::size_type v10 = (const char *)v7;
        }
        else {
          std::basic_string<char16_t>::size_type v10 = (const char *)*((void *)v7 + 1);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0) {
          std::basic_string<char16_t>::size_type v11 = (21 - *((char *)v7 + 21));
        }
        else {
          std::basic_string<char16_t>::size_type v11 = *v7;
        }
        toU16String(v10, v11, &__p);
        std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&v25, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v7 += 6;
        v9 -= 24;
      }
      while (v9);
    }
  }
}

void sub_1C8E72894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 41) < 0) {
    operator delete(*(void **)(v37 - 64));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

uint64_t **std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  unsigned int v4 = *a1;
  unint64_t v5 = (*a1)[1];
  __int16 v6 = (unint64_t *)(*a1 + 2);
  if (v5 >= *v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(*v6 - *v4) >> 3) > v10) {
      unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*v6 - *v4) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v6 - *v4) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    v16[4] = v6;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 24 * v9;
    v16[0] = v11;
    v16[1] = v13;
    void v16[3] = v11 + 24 * v12;
    long long v14 = *a2;
    *(void *)(v13 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v13 = v14;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v16[2] = v13 + 24;
    std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v4, v16);
    uint64_t v8 = v4[1];
    std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    long long v7 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v7;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v8 = v5 + 24;
  }
  v4[1] = v8;
  return a1;
}

void uaap_orchestration::grammar::ValueConstraints::loadOpenListChoices(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  unsigned int v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "open-list-choices");
  if (&v4[12 * v3] == Member)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    __int16 v6 = Member;
    if (*((_WORD *)Member + 23) != 4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v27, "Error parsing JSON grammar: parsedOpenListChoices->value.IsArray() == false [for key: ");
      unint64_t v20 = std::string::append(&v27, "open-list-choices");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = std::string::append(&v28, "]");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::basic_string<char16_t>>::reserve(a2, Member[6]);
    long long v7 = (unsigned int *)*((void *)v6 + 4);
    uint64_t v8 = v6[6];
    uint64_t v25 = a2;
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      do
      {
        if ((*((_WORD *)v7 + 11) & 0x400) == 0)
        {
          uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "Error parsing JSON grammar: openListChoice.IsString() == false [for key: ");
          unint64_t v13 = std::string::append(&v26, "open-list-choices");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          long long v15 = std::string::append(&v27, " entry");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::string v17 = std::string::append(&v28, "]");
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v12, &v29);
          __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0) {
          unint64_t v10 = (const char *)v7;
        }
        else {
          unint64_t v10 = (const char *)*((void *)v7 + 1);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0) {
          std::basic_string<char16_t>::size_type v11 = (21 - *((char *)v7 + 21));
        }
        else {
          std::basic_string<char16_t>::size_type v11 = *v7;
        }
        toU16String(v10, v11, &__p);
        std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&v25, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v7 += 6;
        v9 -= 24;
      }
      while (v9);
    }
  }
}

void sub_1C8E72D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 41) < 0) {
    operator delete(*(void **)(v37 - 64));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

int *uaap_orchestration::grammar::ValueConstraints::loadResolutionTable@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  unsigned int v4 = *(int **)(a1 + 8);
  uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "resolution-table");
  if (&v4[12 * v3] == result)
  {
    *a2 = 0;
    a2[40] = 0;
  }
  else
  {
    if (*((_WORD *)result + 23) != 4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v12, "Error parsing JSON grammar: parsedResolutionTable->value.IsArray() == false [for key: ");
      long long v7 = std::string::append(&v12, "resolution-table");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = std::string::append(&v13, "]");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v11);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uaap_orchestration::grammar::ResolutionTable::loadSemanticValueToSynonyms((unsigned int *)result + 6, (uint64_t)&v11);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)a2, (uint64_t *)&v11);
    a2[40] = 1;
    return (int *)std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&v11);
  }
  return result;
}

void sub_1C8E72FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::getLeftLabel(uaap_orchestration::grammar::Rule *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(a2, *(const std::basic_string<char16_t>::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t uaap_orchestration::grammar::Rule::getRightLabels@<X0>(long long **this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>((uint64_t)a2, this[3], this[4], ((char *)this[4] - (char *)this[3]) >> 5);
}

uint64_t std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    __int16 v6 = (void *)result;
    long long v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(a4);
    p_std::basic_string<char16_t>::size_type size = (std::basic_string<char16_t>::size_type *)v7;
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = (char *)v7 + 32 * v9;
    long long v15 = v7;
    long long v16 = v7;
    v13[0] = v6 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    char v14 = 0;
    if (a2 != a3)
    {
      long long v10 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
          std::string v12 = v16;
        }
        else
        {
          long long v11 = *a2;
          v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
          std::string v12 = v10;
        }
        LOBYTE(v10[1].__r_.__value_.__l.__data_) = *((unsigned char *)a2 + 24);
        a2 += 2;
        long long v10 = (std::basic_string<char16_t> *)((char *)v12 + 32);
        long long v16 = (std::basic_string<char16_t> *)((char *)v12 + 32);
      }
      while (a2 != a3);
      p_std::basic_string<char16_t>::size_type size = &v12[1].__r_.__value_.__l.__size_;
    }
    char v14 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v6[1] = p_size;
  }
  return result;
}

void sub_1C8E731AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0) {
        operator delete(*(void **)(v3 - 32));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void uaap_orchestration::grammar::Rule::getRightLabelNames(uaap_orchestration::grammar::Rule *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  for (std::basic_string<char16_t>::size_type i = a2; v2 != v3; v2 += 32)
  {
    if (*(char *)(v2 + 23) < 0) {
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::basic_string<char16_t> __p = *(std::basic_string<char16_t> *)v2;
    }
    std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&i, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8E73358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

std::basic_string<char16_t> *uaap_orchestration::grammar::Rule::getValueConstraints@<X0>(uaap_orchestration::grammar::Rule *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](a2, (uint64_t)this + 48);
}

std::basic_string<char16_t> *std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](std::basic_string<char16_t> *this, uint64_t a2)
{
  LOBYTE(this->__r_.__value_.__l.__data_) = 0;
  LOBYTE(this[5].__r_.__value_.__r.__words[1]) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](this, (long long *)a2);
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    this[2].__r_.__value_.__r.__words[0] = 0;
    std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[1].__r_.__value_.__l.__size_, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    this[2].__r_.__value_.__l.__size_ = 0;
    this[2].__r_.__value_.__r.__words[2] = 0;
    this[3].__r_.__value_.__r.__words[0] = 0;
    std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[2].__r_.__value_.__l.__size_, *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
    std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](&this[3].__r_.__value_.__r.__words[1], a2 + 80);
    LOBYTE(this[5].__r_.__value_.__r.__words[1]) = 1;
  }
  return this;
}

void sub_1C8E73450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
  }
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::Rule::loadLeftLabelFromJson(uint64_t a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  uint64_t v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "left-label");
  if (&v4[12 * v3] == Member || (__int16 v6 = *((_WORD *)Member + 23), (v6 & 0x400) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "Error parsing JSON grammar: leftLabel != jsonRule.MemberEnd() && leftLabel->value.IsString() == false [for key: ");
    std::string v12 = std::string::append(&v16, "left-label");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v17, "]");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = Member[6];
  long long v7 = Member + 6;
  unsigned int v8 = v9;
  if ((v6 & 0x1000) != 0)
  {
    std::basic_string<char16_t>::size_type v10 = (21 - *((char *)v7 + 21));
  }
  else
  {
    long long v7 = (int *)*((void *)v7 + 1);
    std::basic_string<char16_t>::size_type v10 = v8;
  }
  toU16String((const char *)v7, v10, a2);
}

void sub_1C8E735E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::loadValueConstraintsFromJson(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  uint64_t v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "value-constraints");
  if (&v4[12 * v3] == Member)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 128) = 0;
  }
  else
  {
    if (*((_WORD *)Member + 23) != 3)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::basic_string<char16_t>::size_type v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v23, "Error parsing JSON grammar: parsedValueConstraints->value.IsObject() == false [for key: ");
      long long v11 = std::string::append(v10, "value-constraints");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      long long v13 = std::string::append(&v24, "]");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v6 = (uint64_t)(Member + 6);
    uaap_orchestration::grammar::ValueConstraints::loadValueType((uint64_t)(Member + 6), &__p);
    uaap_orchestration::grammar::ValueConstraints::loadEnumChoices(v6, (uint64_t *)&v17);
    uaap_orchestration::grammar::ValueConstraints::loadOpenListChoices(v6, (uint64_t *)&v19);
    uaap_orchestration::grammar::ValueConstraints::loadResolutionTable(v6, v21);
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (v16)
    {
      *(std::string *)a2 = __p;
      memset(&__p, 0, sizeof(__p));
      *(unsigned char *)(a2 + 24) = 1;
    }
    long long v7 = v17;
    *(unsigned char *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    *(_OWORD *)(a2 + 56) = v19;
    *(void *)(a2 + 72) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    *(unsigned char *)(a2 + 120) = 0;
    if (v22)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a2 + 80, v21);
      *(unsigned char *)(a2 + 120) = 1;
      int v8 = v22;
      *(unsigned char *)(a2 + 128) = 1;
      if (v8) {
        std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v21);
      }
    }
    else
    {
      *(unsigned char *)(a2 + 128) = 1;
    }
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C8E7389C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 57) < 0) {
    operator delete(*(void **)(v17 - 80));
  }
  if (*(char *)(v17 - 81) < 0)
  {
    operator delete(*(void **)(v17 - 104));
    if ((v16 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v15);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::loadRightLabelsFromJson(uint64_t a1@<X0>, std::string **a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)a1;
  uint64_t v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "right-labels");
  if (&v4[12 * v3] == Member || *((_WORD *)Member + 23) != 4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedRightLabels != jsonRule.MemberEnd() && parsedRightLabels->value.IsArray() == false [for key: ");
    long long v55 = std::string::append(&v62, "right-labels");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    long long v57 = std::string::append(&v63, "]");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v6 = Member[6];
  if (v6)
  {
    long long v7 = 0;
    uint64_t v8 = *((void *)Member + 4);
    uint64_t v9 = v8 + 24 * v6;
    do
    {
      if (*(_WORD *)(v8 + 22) != 3)
      {
        uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: rightLabelObject.IsObject() == false [for key: ");
        long long v48 = std::string::append(&v61, "right-labels");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        long long v50 = std::string::append(&v62, " entry");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = std::string::append(&v63, "]");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v47, &__p);
        __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v10 = *(_DWORD *)v8;
      long long v11 = *(int **)(v8 + 8);
      long long v12 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v8, v11, "name");
      long long v13 = &v11[12 * v10];
      if (v13 == v12 || (long long v14 = v12, v15 = *((_WORD *)v12 + 23), (v15 & 0x400) == 0))
      {
        uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedName != rightLabelObject.MemberEnd() && parsedName->value.IsString() == false [for key: ");
        long long v38 = std::string::append(&v62, "name");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        long long v40 = std::string::append(&v63, "]");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v37, &__p);
        __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v10, v11, "repeated");
      if (v13 == v16 || (uint64_t v17 = v16, (*((_WORD *)v16 + 23) & 8) == 0))
      {
        uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedRepeatedFlag != rightLabelObject.MemberEnd() && parsedRepeatedFlag->value.IsBool() == false [for key: ");
        long long v43 = std::string::append(&v62, "repeated");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        long long v45 = std::string::append(&v63, "]");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v42, &__p);
        __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if ((v15 & 0x1000) != 0) {
        uint64_t v18 = (const char *)(v14 + 6);
      }
      else {
        uint64_t v18 = (const char *)*((void *)v14 + 4);
      }
      if ((v15 & 0x1000) != 0) {
        std::basic_string<char16_t>::size_type v19 = (21 - *((char *)v14 + 45));
      }
      else {
        std::basic_string<char16_t>::size_type v19 = v14[6];
      }
      toU16String(v18, v19, (std::basic_string<char16_t> *)&v63);
      int v20 = *((unsigned __int16 *)v17 + 23);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&__p, (const std::basic_string<char16_t>::value_type *)v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v63;
      }
      BOOL v21 = v20 == 10;
      BOOL v60 = v20 == 10;
      unint64_t v22 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v22)
      {
        std::string v24 = (void **)*a2;
        uint64_t v25 = ((char *)v7 - (char *)*a2) >> 5;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 59) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v22 - (void)v24;
        if (v27 >> 4 > v26) {
          unint64_t v26 = v27 >> 4;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v28);
        char v30 = (std::string *)&v29[32 * v25];
        *char v30 = __p;
        uint64_t v32 = &v29[32 * v31];
        memset(&__p, 0, sizeof(__p));
        v30[1].__r_.__value_.__s.__data_[0] = v21;
        p_std::basic_string<char16_t>::size_type size = &v30[1].__r_.__value_.__l.__size_;
        if (v7 == v24)
        {
          *a2 = v30;
          a2[1] = (std::string *)p_size;
          a2[2] = (std::string *)v32;
        }
        else
        {
          do
          {
            long long v34 = *((_OWORD *)v7 - 2);
            v30[-1].__r_.__value_.__l.__size_ = (std::string::size_type)*(v7 - 2);
            *(_OWORD *)&v30[-2].__r_.__value_.__r.__words[2] = v34;
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 4) = 0;
            v30[-1].__r_.__value_.__s.__data_[16] = *((unsigned char *)v7 - 8);
            char v30 = (std::string *)((char *)v30 - 32);
            v7 -= 4;
          }
          while (v7 != v24);
          long long v7 = (void **)*a2;
          long long v35 = (void **)a2[1];
          *a2 = v30;
          a2[1] = (std::string *)p_size;
          a2[2] = (std::string *)v32;
          while (v35 != v7)
          {
            if (*((char *)v35 - 9) < 0) {
              operator delete(*(v35 - 4));
            }
            v35 -= 4;
          }
        }
        if (v7) {
          operator delete(v7);
        }
        int v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = (std::string *)p_size;
        if (v36 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        long long v7 = (void **)p_size;
      }
      else
      {
        long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        std::regex_traits<char> v7[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v7 = v23;
        *((unsigned char *)v7 + 24) = v60;
        v7 += 4;
        a2[1] = (std::string *)v7;
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
}

void sub_1C8E73EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

void sub_1C8E74094()
{
}

void uaap_orchestration::grammar::UaapGrammar::UaapGrammar(void *a1, uint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = (uint64_t *)*a2;
  }
  unsigned int v3 = v2;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v4);
}

void sub_1C8E742E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)va);
  std::vector<uaap_orchestration::grammar::Rule>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = 1024;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  operator new();
}

void sub_1C8E74398(_Unwind_Exception *a1)
{
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v1 + 40);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::UaapGrammar::loadRulesFromJson(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  v46[17] = *MEMORY[0x1E4F143B8];
  if (*((_WORD *)a1 + 11) != 3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "Error parsing JSON grammar: jsonGrammar.IsObject() == false [for key: ");
    long long v34 = std::string::append(&v40, "(root)");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    int v36 = std::string::append(&v41, "]");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __p.__r_.__value_.__r.__words[2] = 0x405000000000000;
  __p.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)"rules";
  __p.__r_.__value_.__r.__words[0] = 5;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *a1;
  if (v4)
  {
    uint64_t v5 = 48 * v4;
    uint64_t v6 = *((void *)a1 + 1);
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((unsigned int *)&__p, (int *)v6))
    {
      v6 += 48;
      v5 -= 48;
      if (!v5)
      {
        uint64_t v6 = v3 + 48 * v4;
        break;
      }
    }
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 1);
  }
  if (v6 == v3 + 48 * v4 || *(_WORD *)(v6 + 46) != 4)
  {
    unint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "Error parsing JSON grammar: parsedRules != jsonGrammar.MemberEnd() && parsedRules->value.IsArray() == false [for key: ");
    int v29 = std::string::append(&v40, "rules");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = std::string::append(&v41, "]");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v28, (const std::string *)&__p);
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v7 = *(unsigned int *)(v6 + 24);
  if (v7)
  {
    v45[1] = (std::string *)(a2 + 16);
    __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule>>(v7);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0];
    v45[0] = (std::string *)(__p.__r_.__value_.__r.__words[0] + 184 * v8);
    std::vector<uaap_orchestration::grammar::Rule>::__swap_out_circular_buffer((uint64_t *)a2, &__p);
    std::__split_buffer<uaap_orchestration::grammar::Rule>::~__split_buffer((uint64_t)&__p);
    uint64_t v9 = *(unsigned int *)(v6 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(v6 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        if (*(_WORD *)(v10 + 22) != 3)
        {
          BOOL v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v38, "Error parsing JSON grammar: parsedRule.IsObject() == false [for key: ");
          unint64_t v22 = std::string::append(&v38, "rules");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          std::string v24 = std::string::append(&v39, " entry");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          unint64_t v26 = std::string::append(&v40, "]");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v21, &v41);
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uaap_orchestration::grammar::Rule::loadLeftLabelFromJson(v10, &__p);
        uaap_orchestration::grammar::Rule::loadRightLabelsFromJson(v10, v45);
        uaap_orchestration::grammar::Rule::loadValueConstraintsFromJson(v10, (uint64_t)v46);
        unint64_t v13 = *(void *)(a2 + 8);
        unint64_t v12 = *(void *)(a2 + 16);
        if (v13 >= v12)
        {
          unint64_t v15 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v13 - *(void *)a2) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x1642C8590B21642) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - *(void *)a2) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0xB21642C8590B21) {
            unint64_t v18 = 0x1642C8590B21642;
          }
          else {
            unint64_t v18 = v16;
          }
          uint64_t v43 = a2 + 16;
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          std::string::size_type v20 = v18 + 184 * v15;
          v41.__r_.__value_.__r.__words[0] = v18;
          v41.__r_.__value_.__l.__size_ = v20;
          unint64_t v42 = v18 + 184 * v19;
          std::allocator<uaap_orchestration::grammar::Rule>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule,uaap_orchestration::grammar::Rule>(v20, (long long *)&__p);
          v41.__r_.__value_.__r.__words[2] = v20 + 184;
          std::vector<uaap_orchestration::grammar::Rule>::__swap_out_circular_buffer((uint64_t *)a2, &v41);
          unint64_t v14 = *(void *)(a2 + 8);
          std::__split_buffer<uaap_orchestration::grammar::Rule>::~__split_buffer((uint64_t)&v41);
        }
        else
        {
          std::allocator<uaap_orchestration::grammar::Rule>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule,uaap_orchestration::grammar::Rule>(*(void *)(a2 + 8), (long long *)&__p);
          unint64_t v14 = v13 + 184;
        }
        *(void *)(a2 + 8) = v14;
        std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v46);
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void sub_1C8E74870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v45 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v44);
  goto LABEL_10;
}

void std::vector<uaap_orchestration::grammar::Rule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<uaap_orchestration::grammar::Rule>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      while (v3 != *(void **)(v2 + 16))
      {
        uint64_t v4 = (void *)v3[2];
        free(v3);
        *(void *)uint64_t v2 = v4;
        uint64_t v3 = v4;
        if (!v4) {
          goto LABEL_7;
        }
      }
      v3[1] = 0;
    }
LABEL_7:
    uint64_t v5 = *(void *)(v2 + 32);
    if (v5) {
      MEMORY[0x1CB775C40](v5, 0xC400A2AC0F1);
    }
    MEMORY[0x1CB775C40](v2, 0x10A0C40AAA3F4FELL);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a1 + 40);
  return a1;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void std::allocator<uaap_orchestration::grammar::Rule>::destroy[abi:ne180100](uint64_t a1)
{
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void uaap_orchestration::grammar::Rule::~Rule(void **this)
{
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 6));
  uint64_t v2 = this + 3;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::allocator<uaap_orchestration::grammar::Rule>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule,uaap_orchestration::grammar::Rule>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_OWORD *)(result + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(result + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 176) = 0;
  if (*((unsigned char *)a2 + 176))
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 72) = 0;
    if (*((unsigned char *)a2 + 72))
    {
      long long v4 = a2[3];
      *(void *)(result + 64) = *((void *)a2 + 8);
      *(_OWORD *)(result + 48) = v4;
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 8) = 0;
      *((void *)a2 + 6) = 0;
      *(unsigned char *)(result + 72) = 1;
    }
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 96) = 0;
    *(_OWORD *)(result + 80) = a2[5];
    *(void *)(result + 96) = *((void *)a2 + 12);
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 12) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = *(long long *)((char *)a2 + 104);
    *(void *)(result + 120) = *((void *)a2 + 15);
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *(unsigned char *)(result + 128) = 0;
    result += 128;
    *(unsigned char *)(v3 + 168) = 0;
    if (*((unsigned char *)a2 + 168))
    {
      uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(result, (uint64_t *)a2 + 16);
      *(unsigned char *)(v3 + 168) = 1;
    }
    *(unsigned char *)(v3 + 176) = 1;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule>>(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(184 * a1);
}

uint64_t *std::vector<uaap_orchestration::grammar::Rule>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (long long *)*result;
  long long v4 = (long long *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 184;
    long long v4 = (long long *)((char *)v4 - 184);
    uint64_t result = (uint64_t *)std::allocator<uaap_orchestration::grammar::Rule>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule,uaap_orchestration::grammar::Rule>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<uaap_orchestration::grammar::Rule>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    std::allocator<uaap_orchestration::grammar::Rule>::destroy[abi:ne180100](i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit(uint64_t a1)
{
  long long v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 56);
  v2[8] = v3;
  free(v3);
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  return a1;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(void *a1, size_t size)
{
  long long v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (size)
  {
    uint64_t result = (char *)malloc_type_realloc(v4, size, 0x2B9619CuLL);
  }
  else
  {
    free(v4);
    uint64_t result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[size];
  return result;
}

BOOL rapidjson::ParseResult::IsError(rapidjson::ParseResult *this)
{
  return *(_DWORD *)this != 0;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, char *a3, __n128 a4)
{
  uint64_t v7 = (char *)*a2;
  int v8 = (char)**a2;
  if (v8 > 109)
  {
    switch(v8)
    {
      case '{':
        *a2 = (unsigned __int8 *)(v7 + 1);
        uint64_t v13 = *((void *)a3 + 8);
        if (*((void *)a3 + 9) - v13 <= 23)
        {
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
          uint64_t v13 = *((void *)a3 + 8);
        }
        *((void *)a3 + 8) = v13 + 24;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        *(void *)uint64_t v13 = 0;
        *(_WORD *)(v13 + 22) = 3;
        for (uint64_t i = *a2; ; ++i)
        {
          unsigned int v15 = *i;
          BOOL v16 = v15 > 0x20;
          uint64_t v17 = (1 << v15) & 0x100002600;
          if (v16 || v17 == 0) {
            break;
          }
        }
        *a2 = i;
        if (!*(_DWORD *)(a1 + 48))
        {
          int v19 = *i;
          if (v19 == 125)
          {
            *a2 = i + 1;
            uint64_t v20 = *((void *)a3 + 8);
            __int16 v21 = 3;
LABEL_67:
            *(_WORD *)(v20 - 2) = v21;
            *(void *)(v20 - 24) = 0;
            *(void *)(v20 - 16) = 0;
            return;
          }
          if (v19 != 34)
          {
LABEL_181:
            int64_t v57 = i - a2[1];
            int v58 = 4;
            goto LABEL_144;
          }
          unsigned int v59 = 0;
          while (1)
          {
            v60.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
            if (*(_DWORD *)(a1 + 48)) {
              break;
            }
            for (uint64_t j = *a2; ; ++j)
            {
              unsigned int v62 = *j;
              BOOL v16 = v62 > 0x20;
              uint64_t v63 = (1 << v62) & 0x100002600;
              if (v16 || v63 == 0) {
                break;
              }
            }
            *a2 = j;
            if (*j != 58)
            {
              int64_t v57 = j - a2[1];
              int v58 = 5;
              goto LABEL_144;
            }
            unint64_t v65 = j + 1;
            *a2 = v65;
            while (1)
            {
              unsigned int v66 = *v65;
              BOOL v16 = v66 > 0x20;
              uint64_t v67 = (1 << v66) & 0x100002600;
              if (v16 || v67 == 0) {
                break;
              }
              ++v65;
            }
            *a2 = v65;
            rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v60);
            if (*(_DWORD *)(a1 + 48)) {
              return;
            }
            for (k = (char *)*a2; ; ++k)
            {
              unsigned int v70 = *k;
              BOOL v16 = v70 > 0x20;
              uint64_t v71 = (1 << v70) & 0x100002600;
              if (v16 || v71 == 0) {
                break;
              }
            }
            *a2 = (unsigned __int8 *)k;
            ++v59;
            int v73 = *k;
            if (v73 != 44)
            {
              if (v73 != 125)
              {
                int64_t v57 = k - (char *)a2[1];
                int v58 = 6;
                goto LABEL_144;
              }
              *a2 = (unsigned __int8 *)(k + 1);
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v59);
              return;
            }
            uint64_t i = (unsigned __int8 *)(k + 1);
            *a2 = i;
            while (1)
            {
              unsigned int v74 = *i;
              BOOL v16 = v74 > 0x20;
              uint64_t v75 = (1 << v74) & 0x100002600;
              if (v16 || v75 == 0) {
                break;
              }
              ++i;
            }
            *a2 = i;
            if (*i != 34) {
              goto LABEL_181;
            }
          }
        }
        break;
      case 't':
        uint64_t v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] == 114)
        {
          uint64_t v9 = v7 + 2;
          *a2 = (unsigned __int8 *)(v7 + 2);
          if (v7[2] == 117)
          {
            uint64_t v9 = v7 + 3;
            *a2 = (unsigned __int8 *)(v7 + 3);
            if (v7[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v7 + 4);
              uint64_t v10 = *((void *)a3 + 8);
              if (*((void *)a3 + 9) - v10 <= 23)
              {
                rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v10 = *((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v10 + 24;
              *(void *)(v10 + 8) = 0;
              *(void *)(v10 + 16) = 0;
              *(void *)uint64_t v10 = 0;
              __int16 v11 = 10;
              goto LABEL_63;
            }
          }
        }
        goto LABEL_143;
      case 'n':
        uint64_t v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] != 117
          || (uint64_t v9 = v7 + 2, *a2 = (unsigned __int8 *)(v7 + 2), v7[2] != 108)
          || (uint64_t v9 = v7 + 3, *a2 = (unsigned __int8 *)(v7 + 3), v7[3] != 108))
        {
LABEL_143:
          int64_t v57 = v9 - a2[1];
          int v58 = 3;
LABEL_144:
          *(_DWORD *)(a1 + 48) = v58;
          *(void *)(a1 + 56) = v57;
          return;
        }
        *a2 = (unsigned __int8 *)(v7 + 4);
        unint64_t v12 = (void *)*((void *)a3 + 8);
        if ((uint64_t)(*((void *)a3 + 9) - (void)v12) <= 23)
        {
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
          unint64_t v12 = (void *)*((void *)a3 + 8);
        }
        *((void *)a3 + 8) = v12 + 3;
        *unint64_t v12 = 0;
        v12[1] = 0;
        _OWORD v12[2] = 0;
        break;
      default:
        goto LABEL_35;
    }
  }
  else
  {
    switch(v8)
    {
      case '""':
        rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
        break;
      case '[':
        *a2 = (unsigned __int8 *)(v7 + 1);
        uint64_t v32 = *((void *)a3 + 8);
        if (*((void *)a3 + 9) - v32 <= 23)
        {
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
          uint64_t v32 = *((void *)a3 + 8);
        }
        *((void *)a3 + 8) = v32 + 24;
        *(void *)(v32 + 8) = 0;
        *(void *)(v32 + 16) = 0;
        *(void *)uint64_t v32 = 0;
        *(_WORD *)(v32 + 22) = 4;
        for (m = *a2; ; ++m)
        {
          unsigned int v34 = *m;
          BOOL v16 = v34 > 0x20;
          uint64_t v35 = (1 << v34) & 0x100002600;
          if (v16 || v35 == 0) {
            break;
          }
        }
        *a2 = m;
        if (!*(_DWORD *)(a1 + 48))
        {
          if (*m == 93)
          {
            *a2 = m + 1;
            uint64_t v20 = *((void *)a3 + 8);
            __int16 v21 = 4;
            goto LABEL_67;
          }
          unsigned int v77 = 0;
          while (1)
          {
            rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, a4);
            if (*(_DWORD *)(a1 + 48)) {
              break;
            }
            for (uint64_t n = *a2; ; ++n)
            {
              unsigned int v79 = *n;
              BOOL v16 = v79 > 0x20;
              uint64_t v80 = (1 << v79) & 0x100002600;
              if (v16 || v80 == 0) {
                break;
              }
            }
            ++v77;
            *a2 = n;
            int v82 = *n;
            if (v82 != 44)
            {
              if (v82 != 93)
              {
                int64_t v57 = n - a2[1];
                int v58 = 7;
                goto LABEL_144;
              }
              *a2 = n + 1;
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v77);
              return;
            }
            uint64_t v83 = n + 1;
            *a2 = v83;
            while (1)
            {
              unsigned int v84 = *v83;
              BOOL v16 = v84 > 0x20;
              uint64_t v85 = (1 << v84) & 0x100002600;
              if (v16 || v85 == 0) {
                break;
              }
              ++v83;
            }
            *a2 = v83;
          }
        }
        break;
      case 'f':
        uint64_t v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] == 97)
        {
          uint64_t v9 = v7 + 2;
          *a2 = (unsigned __int8 *)(v7 + 2);
          if (v7[2] == 108)
          {
            uint64_t v9 = v7 + 3;
            *a2 = (unsigned __int8 *)(v7 + 3);
            if (v7[3] == 115)
            {
              uint64_t v9 = v7 + 4;
              *a2 = (unsigned __int8 *)(v7 + 4);
              if (v7[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v7 + 5);
                uint64_t v10 = *((void *)a3 + 8);
                if (*((void *)a3 + 9) - v10 <= 23)
                {
                  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                  uint64_t v10 = *((void *)a3 + 8);
                }
                *((void *)a3 + 8) = v10 + 24;
                *(void *)(v10 + 8) = 0;
                *(void *)(v10 + 16) = 0;
                *(void *)uint64_t v10 = 0;
                __int16 v11 = 9;
LABEL_63:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        goto LABEL_143;
      default:
LABEL_35:
        int v22 = **a2;
        long long v23 = (char *)a2[1];
        if (v22 == 45)
        {
          long long v25 = (unsigned __int8 *)(v7 + 1);
          int v24 = v7[1];
        }
        else
        {
          int v24 = **a2;
          long long v25 = *a2;
        }
        unsigned int v26 = v24 - 48;
        if (v24 == 48)
        {
          int v38 = 0;
          LODWORD(v31) = 0;
          unint64_t v39 = 0;
          int v40 = 0;
          double v30 = 0.0;
          unsigned int v27 = v25[1];
          unint64_t v28 = v25 + 1;
        }
        else
        {
          if ((v24 - 49) > 8)
          {
            int v54 = 3;
            goto LABEL_221;
          }
          unint64_t v28 = v25 + 1;
          unsigned int v27 = v25[1];
          unsigned int v29 = v27 - 48;
          double v30 = 0.0;
          if (v22 == 45)
          {
            if (v29 <= 9)
            {
              uint64_t v31 = 0;
              while (1)
              {
                if (v26 > 0xCCCCCCB)
                {
                  if (v26 != 214748364) {
                    goto LABEL_48;
                  }
                  if (v27 > 0x38) {
                    break;
                  }
                }
                unsigned int v26 = v27 + 10 * v26 - 48;
                unsigned int v27 = v25[v31++ + 2];
                if (v27 - 48 >= 0xA)
                {
                  int v38 = 0;
                  unint64_t v39 = 0;
                  int v40 = 0;
                  unint64_t v28 = &v25[v31 + 1];
                  goto LABEL_94;
                }
              }
              unsigned int v27 = 57;
              unsigned int v26 = 214748364;
LABEL_48:
              unint64_t v28 = &v25[v31 + 1];
LABEL_77:
              unint64_t v39 = v26;
              if (v22 == 45)
              {
                while (v39 <= 0xCCCCCCCCCCCCCCBLL || v39 == 0xCCCCCCCCCCCCCCCLL && v27 <= 0x38)
                {
                  unsigned int v37 = *++v28;
                  unint64_t v39 = v27 - 48 + 10 * v39;
                  LODWORD(v31) = v31 + 1;
                  unsigned int v27 = v37;
                  if (v37 - 48 >= 0xA) {
                    goto LABEL_92;
                  }
                }
              }
              else
              {
                while (v39 <= 0x1999999999999998 || v39 == 0x1999999999999999 && v27 <= 0x35)
                {
                  unsigned int v41 = *++v28;
                  unint64_t v39 = v27 - 48 + 10 * v39;
                  LODWORD(v31) = v31 + 1;
                  unsigned int v27 = v41;
                  if (v41 - 48 >= 0xA)
                  {
LABEL_92:
                    int v38 = 0;
                    double v30 = 0.0;
                    goto LABEL_93;
                  }
                }
              }
              double v30 = (double)v39;
              do
              {
                unsigned int v42 = *++v28;
                double v30 = (double)(int)(v27 - 48) + v30 * 10.0;
                unsigned int v27 = v42;
              }
              while (v42 - 48 < 0xA);
              int v38 = 1;
LABEL_93:
              int v40 = 1;
              goto LABEL_94;
            }
          }
          else if (v29 <= 9)
          {
            uint64_t v31 = 0;
            while (1)
            {
              if (v26 > 0x19999998)
              {
                if (v26 != 429496729) {
                  goto LABEL_76;
                }
                if (v27 > 0x35) {
                  break;
                }
              }
              unsigned int v26 = v27 + 10 * v26 - 48;
              unsigned int v27 = v25[v31++ + 2];
              if (v27 - 48 >= 0xA)
              {
                int v38 = 0;
                unint64_t v39 = 0;
                int v40 = 0;
                unint64_t v28 = &v25[v31 + 1];
                goto LABEL_94;
              }
            }
            unsigned int v26 = 429496729;
LABEL_76:
            unint64_t v28 = &v25[v31 + 1];
            goto LABEL_77;
          }
          int v38 = 0;
          LODWORD(v31) = 0;
          unint64_t v39 = 0;
          int v40 = 0;
        }
LABEL_94:
        if (v27 == 46)
        {
          unsigned int v27 = v28[1];
          long long v25 = v28 + 1;
          if (v27 - 48 > 9)
          {
            int v54 = 14;
            goto LABEL_221;
          }
          int v43 = 0;
          if ((v38 & 1) == 0)
          {
            if (!v40) {
              unint64_t v39 = v26;
            }
            while (v27 <= 0x39 && !(v39 >> 53))
            {
              int v45 = (char)*++v25;
              int v44 = v45;
              unint64_t v39 = v27 - 48 + 10 * v39;
              --v43;
              if (v39) {
                LODWORD(v31) = v31 + 1;
              }
              unsigned int v27 = v44;
              if (v44 <= 47)
              {
                int v46 = 0;
                double v30 = (double)v39;
                unint64_t v28 = v25;
                goto LABEL_113;
              }
            }
            double v30 = (double)v39;
          }
          unint64_t v28 = v25;
          while (v27 <= 0x39)
          {
            if ((int)v31 <= 16)
            {
              double v30 = (double)(int)(v27 - 48) + v30 * 10.0;
              --v43;
              if (v30 > 0.0) {
                LODWORD(v31) = v31 + 1;
              }
            }
            int v47 = (char)*++v28;
            unsigned int v27 = v47;
            if (v47 <= 47) {
              goto LABEL_112;
            }
          }
          int v38 = 1;
        }
        else
        {
          int v43 = 0;
        }
        if (v27 != 101 && v27 != 69)
        {
          if ((v38 & 1) == 0)
          {
            if (v40)
            {
              if (v22 == 45) {
                rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v39);
              }
              else {
                rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v39);
              }
            }
            else if (v22 == 45)
            {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v26);
            }
            else
            {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v26);
            }
            goto LABEL_141;
          }
LABEL_112:
          int v46 = 0;
LABEL_113:
          unsigned int v48 = v43 + v46;
          if (v43 + v46 > -309)
          {
            if ((v48 & 0x80000000) == 0)
            {
              double v49 = v30 * rapidjson::internal::Pow10(int)::e[v48];
              goto LABEL_133;
            }
            unsigned int v50 = -v48;
          }
          else
          {
            double v49 = 0.0;
            if (v48 < 0xFFFFFD98) {
              goto LABEL_136;
            }
            double v30 = v30 / 1.0e308;
            unsigned int v50 = -308 - v48;
          }
          double v49 = v30 / rapidjson::internal::Pow10(int)::e[v50];
LABEL_133:
          if (v49 > 1.79769313e308)
          {
LABEL_134:
            int v54 = 13;
            long long v25 = (unsigned __int8 *)v7;
LABEL_135:
            *(_DWORD *)(a1 + 48) = v54;
            *(void *)(a1 + 56) = v25 - (unsigned __int8 *)v23;
LABEL_141:
            *a2 = v28;
            a2[1] = (unsigned __int8 *)v23;
            return;
          }
LABEL_136:
          double v55 = -v49;
          if (v22 != 45) {
            double v55 = v49;
          }
          uint64_t v56 = *((void *)a3 + 8);
          if (*((void *)a3 + 9) - v56 <= 23)
          {
            double v92 = v55;
            rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
            uint64_t v56 = *((void *)a3 + 8);
            double v55 = v92;
          }
          *((void *)a3 + 8) = v56 + 24;
          *(void *)(v56 + 8) = 0;
          *(void *)(v56 + 16) = 0;
          *(double *)uint64_t v56 = v55;
          *(_WORD *)(v56 + 22) = 534;
          goto LABEL_141;
        }
        long long v25 = v28 + 1;
        int v51 = v28[1];
        if (!v40) {
          unint64_t v39 = v26;
        }
        if (!v38) {
          double v30 = (double)v39;
        }
        if (v51 == 43)
        {
          long long v25 = v28 + 2;
          int v51 = v28[2];
          if ((v51 - 48) < 0xA)
          {
            uint64_t v52 = 3;
            goto LABEL_125;
          }
        }
        else if (v51 == 45)
        {
          long long v25 = v28 + 2;
          int v87 = v28[2] - 48;
          if (v87 < 0xA)
          {
            int v89 = v28[3];
            v28 += 3;
            int v88 = v89;
            if ((v89 - 48) <= 9)
            {
              while (1)
              {
                int v87 = v88 + 10 * v87 - 48;
                if (v87 > (v43 + 2147483639) / 10) {
                  break;
                }
                int v90 = *++v28;
                int v88 = v90;
                if ((v90 - 48) >= 0xA) {
                  goto LABEL_215;
                }
              }
              do
                int v91 = *++v28;
              while ((v91 - 48) < 0xA);
            }
LABEL_215:
            int v46 = -v87;
            goto LABEL_113;
          }
        }
        else if ((v51 - 48) < 0xA)
        {
          uint64_t v52 = 2;
LABEL_125:
          v28 += v52;
          int v46 = v51 - 48;
          while (1)
          {
            int v53 = *v28;
            if ((v53 - 48) > 9) {
              goto LABEL_113;
            }
            ++v28;
            int v46 = v53 + 10 * v46 - 48;
            if (v46 > 308 - v43) {
              goto LABEL_134;
            }
          }
        }
        int v54 = 15;
LABEL_221:
        unint64_t v28 = v25;
        goto LABEL_135;
    }
  }
}

void sub_1C8E75AC0(_Unwind_Exception *a1)
{
  void *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, void *a3)
{
  long long v27 = *a2;
  uint64_t v5 = (unsigned __int8 *)(v27 + 1);
  unint64_t v28 = a2;
  *(void *)&long long v27 = v27 + 1;
  *(void *)long long v25 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      unsigned int v6 = *v5;
      if (v6 != 92) {
        break;
      }
      *(void *)&long long v27 = v5 + 1;
      uint64_t v9 = v5[1];
      LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::FileReadStream,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::FileReadStream &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v9];
      if ((_BYTE)v6)
      {
        v5 += 2;
        *(void *)&long long v27 = v5;
        uint64_t v7 = *(void *)v25;
        int v8 = *(unsigned char **)(*(void *)v25 + 24);
        if ((uint64_t)(*(void *)(*(void *)v25 + 32) - (void)v8) > 0) {
          goto LABEL_6;
        }
LABEL_9:
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v25);
        int v8 = *(unsigned char **)(v7 + 24);
        goto LABEL_6;
      }
      uint64_t v10 = (uint64_t)&v5[-*((void *)&v27 + 1)];
      if (v9 != 117)
      {
        *(_DWORD *)(a1 + 48) = 10;
        *(void *)(a1 + 56) = v10;
        goto LABEL_29;
      }
      *(void *)&long long v27 = v5 + 2;
      uint64_t v24 = (uint64_t)&v5[-*((void *)&v27 + 1)];
      unsigned int v11 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v27, v10);
      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_29;
      }
      unsigned int v12 = v11;
      if (v11 >> 11 == 27)
      {
        if (v11 >> 10 > 0x36) {
          goto LABEL_31;
        }
        uint64_t v13 = v27;
        if (*(unsigned char *)v27 != 92) {
          goto LABEL_31;
        }
        int v14 = *(unsigned __int8 *)(v27 + 1);
        *(void *)&long long v27 = v27 + 1;
        if (v14 != 117) {
          goto LABEL_31;
        }
        unsigned int v15 = v11;
        *(void *)&long long v27 = v13 + 2;
        int v16 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v27, v24);
        if (*(_DWORD *)(a1 + 48)) {
          goto LABEL_29;
        }
        if ((v16 - 57344) <= 0xFFFFFBFF)
        {
LABEL_31:
          *(_DWORD *)(a1 + 48) = 9;
          __int16 v21 = (unsigned __int8 *)v24;
LABEL_28:
          *(void *)(a1 + 56) = v21;
          goto LABEL_29;
        }
        unsigned int v12 = ((v16 - 56320) | ((v15 << 10) - 56623104)) + 0x10000;
      }
      rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v25, v12);
      uint64_t v5 = (unsigned __int8 *)v27;
    }
    if (v6 == 34) {
      break;
    }
    if (v6 <= 0x1F)
    {
      __int16 v21 = &v5[-*((void *)&v27 + 1)];
      if (*v5) {
        int v22 = 12;
      }
      else {
        int v22 = 11;
      }
      *(_DWORD *)(a1 + 48) = v22;
      goto LABEL_28;
    }
    *(void *)&long long v27 = ++v5;
    uint64_t v7 = *(void *)v25;
    int v8 = *(unsigned char **)(*(void *)v25 + 24);
    if ((uint64_t)(*(void *)(*(void *)v25 + 32) - (void)v8) <= 0) {
      goto LABEL_9;
    }
LABEL_6:
    *(void *)(v7 + 24) = v8 + 1;
    unsigned char *v8 = v6;
  }
  *(void *)&long long v27 = v5 + 1;
  uint64_t v17 = *(void *)v25;
  unint64_t v18 = *(unsigned char **)(*(void *)v25 + 24);
  if ((uint64_t)(*(void *)(*(void *)v25 + 32) - (void)v18) <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v25);
    unint64_t v18 = *(unsigned char **)(v17 + 24);
  }
  *(void *)(v17 + 24) = v18 + 1;
  *unint64_t v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    size_t v19 = __n;
    uint64_t v20 = (const void *)(*(void *)(v17 + 24) - (__n + 1));
    *(void *)(v17 + 24) = v20;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v20, v19);
  }
LABEL_29:
  double result = *(double *)&v27;
  *unint64_t v28 = v27;
  return result;
}

void sub_1C8E75D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(char *result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  *(_WORD *)(v4 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000) {
      return result;
    }
    __int16 v6 = 182;
    goto LABEL_11;
  }
  if (HIDWORD(a2)) {
    __int16 v5 = 406;
  }
  else {
    __int16 v5 = 470;
  }
  *(_WORD *)(v4 + 22) = v5;
  if (!(a2 >> 31))
  {
    __int16 v6 = v5 | 0x20;
LABEL_11:
    *(_WORD *)(v4 + 22) = v6;
  }
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 278;
  }
  else {
    __int16 v5 = 406;
  }
  *(_WORD *)(v4 + 22) = v5;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v4 + 22) = v5 | 0x40;
    if (!((unint64_t)a2 >> 31)) {
      *(_WORD *)(v4 + 22) = v5 | 0x60;
    }
  }
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(char *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 182;
  }
  else {
    __int16 v5 = 502;
  }
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(char *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 470;
  }
  else {
    __int16 v5 = 502;
  }
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  unint64_t v3 = a1[3] - v1 + 24;
  if (v2 <= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = (_WORD *)(*(void *)(a1 + 64) - 24 * a2);
  *(void *)(a1 + 64) = v3;
  double result = *(void **)(a1 + 24);
  *(v3 - 1) = 4;
  if (a2)
  {
    uint64_t v5 = 24 * a2;
    __int16 v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((void *)v3 - 2) = v6;
    double result = memcpy(v6, v3, v5);
  }
  else
  {
    *((void *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v4 = *(void **)a1;
  if (!v4 || (uint64_t v5 = v4[1], v6 = v5 + v3, v5 + v3 > *v4))
  {
    if (*(void *)(a1 + 8) <= v3) {
      unint64_t v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (!*(void *)(a1 + 24)) {
      operator new();
    }
    if (v7 == -24) {
      return 0;
    }
    size_t v4 = malloc_type_malloc(v7 + 24, 0xD84A1C40uLL);
    if (!v4) {
      return 0;
    }
    uint64_t v5 = 0;
    void *v4 = v7;
    v4[1] = 0;
    v4[2] = *(void *)a1;
    *(void *)a1 = v4;
    unint64_t v6 = v3;
  }
  uint64_t v8 = (uint64_t)v4 + v5 + 24;
  v4[1] = v6;
  return v8;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = (_WORD *)(*(void *)(a1 + 64) - 48 * a2);
  *(void *)(a1 + 64) = v3;
  double result = *(void **)(a1 + 24);
  *(v3 - 1) = 3;
  if (a2)
  {
    uint64_t v5 = 48 * a2;
    unint64_t v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((void *)v3 - 2) = v6;
    double result = memcpy(v6, v3, v5);
  }
  else
  {
    *((void *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  uint64_t v3 = a1[3] - v1;
  if (v2 <= v3 + 1) {
    size_t v4 = v3 + 1;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *a2;
  while (1)
  {
    int v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    int v7 = -48;
LABEL_8:
    double result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if (v4 == 4) {
      return result;
    }
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    int v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    int v7 = -87;
    goto LABEL_8;
  }
  double result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(void *)(v3 + 56) = a3;
  return result;
}

char *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(char *result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2 <= 0x7F)
  {
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v5) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    unsigned char *v5 = a2;
    int v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    unsigned int v7 = (a2 >> 6) | 0xFFFFFFC0;
    uint64_t v8 = *(void *)result;
    uint64_t v9 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v9) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      uint64_t v9 = *(unsigned char **)(v8 + 24);
    }
    *(void *)(v8 + 24) = v9 + 1;
    unsigned char *v9 = v7;
    int v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    long long v27 = *(void **)v3;
    unint64_t v28 = (unsigned char *)v27[3];
    if ((uint64_t)(v27[4] - (void)v28) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v27);
      unint64_t v28 = (unsigned char *)v27[3];
    }
    v27[3] = v28 + 1;
    *unint64_t v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)result;
  unsigned int v11 = *(unsigned char **)(*(void *)result + 24);
  uint64_t v12 = *(void *)(*(void *)result + 32) - (void)v11;
  if (HIWORD(a2))
  {
    unsigned int v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      unsigned int v11 = *(unsigned char **)(v10 + 24);
    }
    *(void *)(v10 + 24) = v11 + 1;
    unsigned char *v11 = v20;
    int v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    int v22 = *(void **)v3;
    long long v23 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v23) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
      unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      long long v23 = (unsigned char *)v22[3];
    }
    v22[3] = v23 + 1;
    *long long v23 = v21;
    ++*((_DWORD *)v3 + 2);
    unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    uint64_t v25 = *(void *)v3;
    unsigned int v26 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v26) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
      unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      unsigned int v26 = *(unsigned char **)(v25 + 24);
    }
    *(void *)(v25 + 24) = v26 + 1;
    unsigned char *v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  unsigned int v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
    unsigned int v11 = *(unsigned char **)(v10 + 24);
  }
  *(void *)(v10 + 24) = v11 + 1;
  unsigned char *v11 = v13;
  int v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  uint64_t v15 = *(void *)v3;
  int v16 = *(unsigned char **)(*(void *)v3 + 24);
  if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v16) <= 0)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
    unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    int v16 = *(unsigned char **)(v15 + 24);
  }
  *(void *)(v15 + 24) = v16 + 1;
  *int v16 = v14;
  ++*((_DWORD *)v3 + 2);
  char v17 = a2 & 0x3F | 0x80;
  unint64_t v18 = *(void **)v3;
  size_t v19 = (unsigned char *)v18[3];
  if ((uint64_t)(v18[4] - (void)v19) <= 0)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v18);
    char v17 = a2 & 0x3F | 0x80;
    size_t v19 = (unsigned char *)v18[3];
  }
  v18[3] = v19 + 1;
  *size_t v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(void *a1, const void *a2, size_t __n)
{
  unsigned int v3 = __n;
  int v6 = (void *)a1[8];
  if ((uint64_t)(a1[9] - (void)v6) <= 23)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a1 + 5);
    int v6 = (void *)a1[8];
  }
  a1[8] = v6 + 3;
  uint64_t v7 = a1[3];
  void *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (v3 > 0x15)
  {
    *((_WORD *)v6 + 11) = 3077;
    *(_DWORD *)int v6 = v3;
    uint64_t v8 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v7, v3 + 1);
    v6[1] = v8;
    int v6 = (void *)v8;
  }
  else
  {
    *((_WORD *)v6 + 11) = 7173;
    *((unsigned char *)v6 + 21) = 21 - v3;
  }
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = &rapidjson::GenericStringRef<char>::emptyString;
  }
  double result = memcpy(v6, v9, v3);
  *((unsigned char *)v6 + v3) = 0;
  return result;
}

void uaap_orchestration::grammar::UaapGrammar::fromFile(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v1 = *(void *)v1;
  }
  unsigned int v3 = fopen((const char *)v1, "r");
  if (v3)
  {
    v10[0] = v3;
    v10[1] = &v13;
    v10[2] = 0x10000;
    _OWORD v10[3] = 0;
    v10[5] = 0;
    v10[6] = 0;
    void v10[4] = &v13;
    char v11 = 0;
    rapidjson::FileReadStream::Read((size_t)v10);
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v12);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Could not open grammar file for reading: ");
  int v5 = *(char *)(v2 + 23);
  if (v5 >= 0) {
    int v6 = (const std::string::value_type *)v2;
  }
  else {
    int v6 = *(const std::string::value_type **)v2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(v2 + 8);
  }
  uint64_t v8 = std::string::append(&v12, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v13);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1C8E76A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

size_t rapidjson::FileReadStream::Read(size_t this)
{
  size_t v1 = this;
  unint64_t v2 = *(void *)(this + 32);
  if (v2 >= *(void *)(this + 24))
  {
    if (!*(unsigned char *)(this + 56))
    {
      *(void *)(this + 48) += *(void *)(this + 40);
      this = fread(*(void **)(this + 8), 1uLL, *(void *)(this + 16), *(FILE **)this);
      uint64_t v3 = *(void *)(v1 + 8);
      unint64_t v4 = *(void *)(v1 + 16);
      *(void *)(v1 + 24) = v3 + this - 1;
      *(void *)(v1 + 32) = v3;
      *(void *)(v1 + 40) = this;
      if (this < v4)
      {
        *(unsigned char *)(v3 + this) = 0;
        ++*(void *)(v1 + 24);
        *(unsigned char *)(v1 + 56) = 1;
      }
    }
  }
  else
  {
    *(void *)(this + 32) = v2 + 1;
  }
  return this;
}

char *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(char *result, rapidjson::FileReadStream *a2, char *a3)
{
  uint64_t v5 = (uint64_t)result;
  int v6 = (unsigned __int8 *)*((void *)a2 + 4);
  int v7 = (char)*v6;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
        if (*v8 == 114)
        {
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
          if (*v8 == 117)
          {
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
            if (*v8 == 101)
            {
              double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
              uint64_t v9 = *((void *)a3 + 8);
              if (*((void *)a3 + 9) - v9 <= 23)
              {
                double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v9 = *((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v9 + 24;
              *(void *)(v9 + 8) = 0;
              *(void *)(v9 + 16) = 0;
              *(void *)uint64_t v9 = 0;
              __int16 v10 = 10;
              goto LABEL_142;
            }
          }
        }
      }
      else
      {
        if (v7 != 110) {
          goto LABEL_46;
        }
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
        if (*v8 == 117)
        {
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
          if (*v8 == 108)
          {
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
            if (*v8 == 108)
            {
              double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
              char v11 = (void *)*((void *)a3 + 8);
              if ((uint64_t)(*((void *)a3 + 9) - (void)v11) <= 23)
              {
                double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                char v11 = (void *)*((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v11 + 3;
              void *v11 = 0;
              v11[1] = 0;
              v11[2] = 0;
              return result;
            }
          }
        }
      }
LABEL_145:
      unsigned int v50 = &v8[*((void *)a2 + 6) - *((void *)a2 + 1)];
      int v51 = 3;
LABEL_146:
      *(_DWORD *)(v5 + 48) = v51;
      *(void *)(v5 + 56) = v50;
      return result;
    }
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    uint64_t v15 = *((void *)a3 + 8);
    if (*((void *)a3 + 9) - v15 <= 23)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
      uint64_t v15 = *((void *)a3 + 8);
    }
    *((void *)a3 + 8) = v15 + 24;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 0;
    *(_WORD *)(v15 + 22) = 3;
    while (1)
    {
      int v16 = (unsigned __int8 *)*((void *)a2 + 4);
      unsigned int v17 = *v16;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0) {
        break;
      }
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    }
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    if (v17 != 125)
    {
      if (v17 != 34)
      {
LABEL_200:
        unsigned int v50 = &v16[*((void *)a2 + 6) - *((void *)a2 + 1)];
        int v51 = 4;
        goto LABEL_146;
      }
      unsigned int v60 = 0;
      while (1)
      {
        double result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        while (1)
        {
          std::string v61 = (unsigned __int8 *)*((void *)a2 + 4);
          unsigned int v62 = *v61;
          if (v62 > 0x20 || ((1 << v62) & 0x100002600) == 0) {
            break;
          }
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        }
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        if (v62 != 58)
        {
          unsigned int v50 = &v61[*((void *)a2 + 6) - *((void *)a2 + 1)];
          int v51 = 5;
          goto LABEL_146;
        }
        do
        {
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          unsigned int v64 = **((unsigned __int8 **)a2 + 4);
          BOOL v57 = v64 > 0x20;
          uint64_t v65 = (1 << v64) & 0x100002600;
        }
        while (!v57 && v65 != 0);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        double result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        while (1)
        {
          uint64_t v67 = (unsigned __int8 *)*((void *)a2 + 4);
          unsigned int v68 = *v67;
          if (v68 > 0x20 || ((1 << v68) & 0x100002600) == 0) {
            break;
          }
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        }
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        unsigned int v68 = (char)v68;
        ++v60;
        if ((char)v68 != 44)
        {
          if (v68 != 125)
          {
            unsigned int v50 = &v67[*((void *)a2 + 6) - *((void *)a2 + 1)];
            int v51 = 6;
            goto LABEL_146;
          }
          rapidjson::FileReadStream::Read((size_t)a2);
          return (char *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v60);
        }
        do
        {
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          int v16 = (unsigned __int8 *)*((void *)a2 + 4);
          unsigned int v70 = *v16;
        }
        while (v70 <= 0x20 && ((1 << v70) & 0x100002600) != 0);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        if (v70 != 34) {
          goto LABEL_200;
        }
      }
    }
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    uint64_t v30 = *((void *)a3 + 8);
    __int16 v31 = 3;
LABEL_65:
    *(_WORD *)(v30 - 2) = v31;
    *(void *)(v30 - 24) = 0;
    *(void *)(v30 - 16) = 0;
    return result;
  }
  switch(v7)
  {
    case '""':
      return (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)result, a2, a3);
    case '[':
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      uint64_t v12 = *((void *)a3 + 8);
      if (*((void *)a3 + 9) - v12 <= 23)
      {
        double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
        uint64_t v12 = *((void *)a3 + 8);
      }
      *((void *)a3 + 8) = v12 + 24;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      *(_WORD *)(v12 + 22) = 4;
      while (1)
      {
        unsigned int v13 = **((unsigned __int8 **)a2 + 4);
        if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0) {
          break;
        }
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      }
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if (v13 != 93)
      {
        unsigned int v52 = 0;
        while (1)
        {
          double result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
          while (1)
          {
            int v53 = (unsigned __int8 *)*((void *)a2 + 4);
            unsigned int v54 = *v53;
            if (v54 > 0x20 || ((1 << v54) & 0x100002600) == 0) {
              break;
            }
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          }
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
          ++v52;
          if (v54 != 44)
          {
            if (v54 != 93)
            {
              unsigned int v50 = &v53[*((void *)a2 + 6) - *((void *)a2 + 1)];
              int v51 = 7;
              goto LABEL_146;
            }
            rapidjson::FileReadStream::Read((size_t)a2);
            return (char *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v52);
          }
          do
          {
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            unsigned int v56 = **((unsigned __int8 **)a2 + 4);
            BOOL v57 = v56 > 0x20;
            uint64_t v58 = (1 << v56) & 0x100002600;
          }
          while (!v57 && v58 != 0);
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
        }
      }
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      uint64_t v30 = *((void *)a3 + 8);
      __int16 v31 = 4;
      goto LABEL_65;
    case 'f':
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
      if (*v8 == 97)
      {
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
        if (*v8 == 108)
        {
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
          if (*v8 == 115)
          {
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
            if (*v8 == 101)
            {
              double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
              uint64_t v9 = *((void *)a3 + 8);
              if (*((void *)a3 + 9) - v9 <= 23)
              {
                double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v9 = *((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v9 + 24;
              *(void *)(v9 + 8) = 0;
              *(void *)(v9 + 16) = 0;
              *(void *)uint64_t v9 = 0;
              __int16 v10 = 9;
LABEL_142:
              *(_WORD *)(v9 + 22) = v10;
              return result;
            }
          }
        }
      }
      goto LABEL_145;
  }
LABEL_46:
  int v19 = *v6;
  uint64_t v20 = *((void *)a2 + 6);
  uint64_t v21 = *((void *)a2 + 1);
  if (v19 == 45)
  {
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    int v22 = (unsigned __int8 *)*((void *)a2 + 4);
    int v23 = *v22;
  }
  else
  {
    int v23 = *v6;
    int v22 = (unsigned __int8 *)*((void *)a2 + 4);
  }
  unsigned int v24 = v23 - 48;
  uint64_t v73 = v21;
  uint64_t v74 = v5;
  int v72 = v19;
  if (v23 == 48)
  {
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    int v33 = 0;
    int v28 = 0;
    unint64_t v32 = 0;
    int v75 = 0;
    unsigned int v25 = **((unsigned __int8 **)a2 + 4);
    double v27 = 0.0;
    goto LABEL_90;
  }
  if ((v23 - 49) > 8)
  {
    int v36 = &v22[*((void *)a2 + 6) - *((void *)a2 + 1)];
    int v45 = 3;
    goto LABEL_135;
  }
  double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
  unsigned int v25 = **((unsigned __int8 **)a2 + 4);
  unsigned int v26 = v25 - 48;
  double v27 = 0.0;
  if (v19 != 45)
  {
    if (v26 <= 9)
    {
      int v28 = 0;
      unsigned int v29 = 429496729;
      while (1)
      {
        if (v24 > 0x19999998)
        {
          if (v24 != 429496729)
          {
LABEL_144:
            unsigned int v29 = v24;
            goto LABEL_73;
          }
          if (v25 > 0x35) {
            goto LABEL_73;
          }
        }
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        unsigned int v24 = v25 + 10 * v24 - 48;
        ++v28;
        unsigned int v25 = **((unsigned __int8 **)a2 + 4);
        if (v25 - 48 >= 0xA)
        {
LABEL_80:
          int v33 = 0;
          unint64_t v32 = 0;
          int v75 = 0;
          goto LABEL_90;
        }
      }
    }
    goto LABEL_148;
  }
  if (v26 > 9)
  {
LABEL_148:
    int v33 = 0;
    int v28 = 0;
    unint64_t v32 = 0;
    int v75 = 0;
    goto LABEL_90;
  }
  int v28 = 0;
  unsigned int v29 = 214748364;
  while (1)
  {
    if (v24 > 0xCCCCCCB)
    {
      if (v24 != 214748364) {
        goto LABEL_144;
      }
      if (v25 > 0x38) {
        break;
      }
    }
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    unsigned int v24 = v25 + 10 * v24 - 48;
    ++v28;
    unsigned int v25 = **((unsigned __int8 **)a2 + 4);
    if (v25 - 48 >= 0xA) {
      goto LABEL_80;
    }
  }
  unsigned int v25 = 57;
LABEL_73:
  unint64_t v32 = v29;
  if (v19 == 45)
  {
    while (v32 <= 0xCCCCCCCCCCCCCCBLL || v32 == 0xCCCCCCCCCCCCCCCLL && v25 <= 0x38)
    {
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      ++v28;
      unsigned int v25 = **((unsigned __int8 **)a2 + 4);
      if (v25 - 48 >= 0xA) {
        goto LABEL_89;
      }
    }
  }
  else
  {
    while (v32 <= 0x1999999999999998 || v32 == 0x1999999999999999 && v25 <= 0x35)
    {
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      ++v28;
      unsigned int v25 = **((unsigned __int8 **)a2 + 4);
      if (v25 - 48 >= 0xA)
      {
LABEL_89:
        int v33 = 0;
        double v27 = 0.0;
        int v75 = 1;
        unsigned int v24 = v29;
        goto LABEL_90;
      }
    }
  }
  double v27 = (double)v32;
  do
  {
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    double v27 = (double)(int)(v25 - 48) + v27 * 10.0;
    unsigned int v25 = **((unsigned __int8 **)a2 + 4);
  }
  while (v25 - 48 < 0xA);
  int v33 = 1;
  unsigned int v24 = v29;
  int v75 = 1;
LABEL_90:
  if (v25 == 46)
  {
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    unsigned int v34 = (unsigned __int8 *)*((void *)a2 + 4);
    unsigned int v25 = *v34;
    if (v25 - 48 >= 0xA)
    {
      int v36 = &v34[*((void *)a2 + 6) - *((void *)a2 + 1)];
      int v45 = 14;
      goto LABEL_122;
    }
    int v35 = 0;
    if (v33) {
      goto LABEL_237;
    }
    if (!v75) {
      unint64_t v32 = v24;
    }
    do
    {
      if (v25 > 0x39 || v32 >> 53) {
        break;
      }
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      --v35;
      if (v32) {
        ++v28;
      }
      unsigned int v25 = **((unsigned __int8 **)a2 + 4);
    }
    while (**((char **)a2 + 4) > 47);
    double v27 = (double)v32;
    if (v25 - 48 <= 9)
    {
LABEL_237:
      do
      {
        double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
        if (v28 <= 16)
        {
          double v27 = (double)(int)(v25 - 48) + v27 * 10.0;
          --v35;
          if (v27 > 0.0) {
            ++v28;
          }
        }
        unsigned int v25 = **((unsigned __int8 **)a2 + 4);
      }
      while (v25 - 48 < 0xA);
    }
    int v33 = 1;
  }
  else
  {
    int v35 = 0;
  }
  int v36 = &v6[v20 - v73];
  if (v25 == 101 || v25 == 69)
  {
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    int v37 = 0;
    unint64_t v38 = v24;
    if (v75) {
      unint64_t v38 = v32;
    }
    if (!v33) {
      double v27 = (double)v38;
    }
    unint64_t v39 = (unsigned __int8 *)*((void *)a2 + 4);
    int v40 = *v39;
    if (v40 != 43)
    {
      if (v40 != 45) {
        goto LABEL_113;
      }
      int v37 = 1;
    }
    double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
    unint64_t v39 = (unsigned __int8 *)*((void *)a2 + 4);
    int v40 = *v39;
LABEL_113:
    int v41 = v40 - 48;
    if ((v40 - 48) <= 9)
    {
      double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
      if (v37)
      {
        int v42 = **((unsigned __int8 **)a2 + 4);
        if ((v42 - 48) <= 9)
        {
          while (1)
          {
            double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            int v41 = v42 + 10 * v41 - 48;
            int v42 = **((unsigned __int8 **)a2 + 4);
            unsigned int v43 = v42 - 48;
            if (v41 > (v35 + 2147483639) / 10) {
              break;
            }
            if (v43 >= 0xA) {
              goto LABEL_124;
            }
          }
          if (v43 <= 9)
          {
            do
              double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
            while (**((unsigned __int8 **)a2 + 4) - 48 < 0xA);
          }
        }
      }
      else
      {
        while (1)
        {
          int v44 = **((unsigned __int8 **)a2 + 4);
          if ((v44 - 48) > 9) {
            break;
          }
          double result = (char *)rapidjson::FileReadStream::Read((size_t)a2);
          int v41 = v44 + 10 * v41 - 48;
          if (v41 > 308 - v35)
          {
            int v45 = 13;
            goto LABEL_122;
          }
        }
      }
LABEL_124:
      if (v37) {
        int v46 = -v41;
      }
      else {
        int v46 = v41;
      }
LABEL_127:
      int v47 = v46 + v35;
      uint64_t v5 = v74;
      if (v47 > -309)
      {
        if (v47 < 0) {
          double v48 = v27 / rapidjson::internal::Pow10(int)::e[-v47];
        }
        else {
          double v48 = v27 * rapidjson::internal::Pow10(int)::e[v47];
        }
      }
      else
      {
        double v48 = 0.0;
        if (v47 < 0xFFFFFD98) {
          goto LABEL_136;
        }
        double v48 = v27 / 1.0e308 / rapidjson::internal::Pow10(int)::e[-308 - v47];
      }
      if (v48 > 1.79769313e308)
      {
        int v45 = 13;
        goto LABEL_135;
      }
LABEL_136:
      if (v72 == 45) {
        double v49 = -v48;
      }
      else {
        double v49 = v48;
      }
      uint64_t v9 = *((void *)a3 + 8);
      if (*((void *)a3 + 9) - v9 <= 23)
      {
        double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
        uint64_t v9 = *((void *)a3 + 8);
      }
      *((void *)a3 + 8) = v9 + 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(double *)uint64_t v9 = v49;
      __int16 v10 = 534;
      goto LABEL_142;
    }
    int v36 = &v39[*((void *)a2 + 6) - *((void *)a2 + 1)];
    int v45 = 15;
LABEL_122:
    uint64_t v5 = v74;
LABEL_135:
    *(_DWORD *)(v5 + 48) = v45;
    *(void *)(v5 + 56) = v36;
    return result;
  }
  if (v33)
  {
    int v46 = 0;
    goto LABEL_127;
  }
  if (v75)
  {
    if (v72 == 45)
    {
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v32);
    }
    else
    {
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v32);
    }
  }
  else if (v72 == 45)
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v24);
  }
  else
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v24);
  }
}

void *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, rapidjson::FileReadStream *this, void *a3)
{
  double result = (void *)rapidjson::FileReadStream::Read((size_t)this);
  *(void *)unsigned int v24 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      int v7 = (unsigned char *)*((void *)this + 4);
      unsigned int v8 = *v7;
      if (v8 != 92) {
        break;
      }
      uint64_t v11 = *((void *)this + 6);
      uint64_t v12 = *((void *)this + 1);
      double result = (void *)rapidjson::FileReadStream::Read((size_t)this);
      uint64_t v13 = **((unsigned __int8 **)this + 4);
      LOBYTE(v8) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::FileReadStream,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::FileReadStream &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v13];
      if ((_BYTE)v8) {
        goto LABEL_5;
      }
      uint64_t v14 = (uint64_t)&v7[v11 - v12];
      if (v13 != 117)
      {
        int v23 = 10;
LABEL_29:
        *(_DWORD *)(a1 + 48) = v23;
        *(void *)(a1 + 56) = v14;
        return result;
      }
      rapidjson::FileReadStream::Read((size_t)this);
      double result = (void *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(a1, this, v14);
      if (*(_DWORD *)(a1 + 48)) {
        return result;
      }
      unsigned int v15 = result;
      if (result >> 11 == 27)
      {
        if (result >> 10 > 0x36) {
          goto LABEL_30;
        }
        if (**((unsigned char **)this + 4) != 92) {
          goto LABEL_30;
        }
        int v16 = (int)result;
        double result = (void *)rapidjson::FileReadStream::Read((size_t)this);
        if (**((unsigned char **)this + 4) != 117) {
          goto LABEL_30;
        }
        rapidjson::FileReadStream::Read((size_t)this);
        double result = (void *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(a1, this, v14);
        if (*(_DWORD *)(a1 + 48)) {
          return result;
        }
        if ((result - 57344) <= 0xFFFFFBFF)
        {
LABEL_30:
          int v23 = 9;
          goto LABEL_29;
        }
        unsigned int v15 = ((result - 56320) | ((v16 << 10) - 56623104)) + 0x10000;
      }
      double result = rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v24, v15);
    }
    if (v8 == 34) {
      break;
    }
    if (v8 <= 0x1F)
    {
      uint64_t v21 = &v7[*((void *)this + 6) - *((void *)this + 1)];
      if (*v7) {
        int v22 = 12;
      }
      else {
        int v22 = 11;
      }
      *(_DWORD *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v21;
      return result;
    }
LABEL_5:
    double result = (void *)rapidjson::FileReadStream::Read((size_t)this);
    uint64_t v9 = *(void *)v24;
    __int16 v10 = *(unsigned char **)(*(void *)v24 + 24);
    if ((uint64_t)(*(void *)(*(void *)v24 + 32) - (void)v10) <= 0)
    {
      double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v24);
      __int16 v10 = *(unsigned char **)(v9 + 24);
    }
    *(void *)(v9 + 24) = v10 + 1;
    *__int16 v10 = v8;
  }
  double result = (void *)rapidjson::FileReadStream::Read((size_t)this);
  uint64_t v17 = *(void *)v24;
  unint64_t v18 = *(unsigned char **)(*(void *)v24 + 24);
  if ((uint64_t)(*(void *)(*(void *)v24 + 32) - (void)v18) <= 0)
  {
    double result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v24);
    unint64_t v18 = *(unsigned char **)(v17 + 24);
  }
  *(void *)(v17 + 24) = v18 + 1;
  *unint64_t v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    size_t v19 = __n;
    uint64_t v20 = (const void *)(*(void *)(v17 + 24) - (__n + 1));
    *(void *)(v17 + 24) = v20;
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v20, v19);
  }
  return result;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(uint64_t a1, rapidjson::FileReadStream *this, uint64_t a3)
{
  LODWORD(v6) = 0;
  int v7 = 4;
  while (1)
  {
    int v8 = **((char **)this + 4);
    if ((v8 - 48) >= 0xA) {
      break;
    }
    int v9 = -48;
LABEL_8:
    uint64_t v6 = (v8 + 16 * v6 + v9);
    rapidjson::FileReadStream::Read((size_t)this);
    if (!--v7) {
      return v6;
    }
  }
  if (**((unsigned __int8 **)this + 4) - 65 < 6)
  {
    int v9 = -55;
    goto LABEL_8;
  }
  if (**((unsigned __int8 **)this + 4) - 97 < 6)
  {
    int v9 = -87;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 48) = 8;
  *(void *)(a1 + 56) = a3;
  return v6;
}

void uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(long long **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_35:
    char v22 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_38;
  }
  do
  {
    if (*((char *)v4 + 23) < 0) {
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v4, *((void *)v4 + 1));
    }
    else {
      std::basic_string<char16_t> __p = *(std::basic_string<char16_t> *)v4;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char16_t>::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::basic_string<char16_t>::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *((void *)a2 + 1);
    }
    if (size != v9)
    {
      BOOL v20 = 0;
      goto LABEL_25;
    }
    if (size)
    {
      if (v10 >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *(unsigned __int16 **)a2;
      }
      p_p = (std::basic_string<char16_t> *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      std::basic_string<char16_t>::size_type v13 = size - 1;
      do
      {
        int v15 = (unsigned __int16)p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::basic_string<char16_t> *)((char *)p_p + 2);
        int v14 = v15;
        int v17 = *v11++;
        int v16 = v17;
        BOOL v19 = v13-- != 0;
        BOOL v20 = v16 == v14;
      }
      while (v16 == v14 && v19);
LABEL_25:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
LABEL_26:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
    BOOL v20 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_26;
    }
LABEL_27:
    if (v20) {
      goto LABEL_32;
    }
    unint64_t v4 = (long long *)((char *)v4 + 184);
  }
  while (v4 != v5);
  unint64_t v4 = v5;
LABEL_32:
  if (v4 == a1[1]) {
    goto LABEL_35;
  }
  if (*((char *)v4 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3, *(const std::basic_string<char16_t>::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v21 = *v4;
    *(void *)(a3 + 16) = *((void *)v4 + 2);
    *(_OWORD *)a3 = v21;
  }
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>(a3 + 24, *((long long **)v4 + 3), *((long long **)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 5);
  std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a3 + 48), (uint64_t)(v4 + 3));
  char v22 = 1;
LABEL_38:
  *(unsigned char *)(a3 + 184) = v22;
}

void sub_1C8E77E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::UaapGrammar::getAllLeftLabels(long long **this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *this;
  unint64_t v4 = this[1];
  while (v3 != v4)
  {
    if (*((char *)v3 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(a2, (unsigned __int16 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = (long long *)((char *)v3 + 184);
  }
}

void sub_1C8E77ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getRightLabelsForLabel@<X0>(long long **a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X8>)
{
  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v6);
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>((uint64_t)a3, v7, v8, ((char *)v8 - (char *)v7) >> 5);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v6);
}

void sub_1C8E77F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    uint64_t v3 = (void **)(a1 + 24);
    std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(long long **a1, long long **a2, uint64_t *a3)
{
  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, (unsigned __int16 *)a2[1] - 12, (uint64_t)v15);
  if (!v15[184])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uaap_orchestration::grammar::Rule::getRightLabelNames((uaap_orchestration::grammar::Rule *)v15, (uint64_t *)&v13);
  uint64_t v6 = v13;
  int v7 = v14;
  if (v13 == v14)
  {
    int v8 = (void *)a3[1];
    if ((unint64_t)v8 >= a3[2])
    {
      uint64_t v9 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>(a3, a2);
    }
    else
    {
      void *v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      uint64_t v9 = (uint64_t)(v8 + 3);
      a3[1] = (uint64_t)(v8 + 3);
    }
    a3[1] = v9;
  }
  else
  {
    do
    {
      uaap_orchestration::grammar::Path::extendWithComponent(a2, v6, (uint64_t *)v12);
      uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(a1, v12, a3);
      int v16 = v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v12[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v15);
}

void sub_1C8E78170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy((va_list)v3, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>(uint64_t *a1, long long **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v21 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(v7 + 24 * v2);
  unint64_t v18 = v7;
  v19.i64[0] = (uint64_t)v9;
  v19.i64[1] = (uint64_t)v9;
  unint64_t v20 = v7 + 24 * v8;
  void *v9 = 0;
  v9[1] = 0;
  void v9[2] = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v10 = v19.i64[0];
  uint64_t v11 = v19.i64[1] + 24;
  v19.i64[1] += 24;
  std::basic_string<char16_t>::size_type v13 = (void *)*a1;
  uint64_t v12 = (void *)a1[1];
  if (v12 == (void *)*a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      v10 -= 24;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = v12[2];
      *uint64_t v12 = 0;
      v12[1] = 0;
      _OWORD v12[2] = 0;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = v19.i64[1];
  }
  *a1 = v10;
  a1[1] = v11;
  int64x2_t v19 = v15;
  unint64_t v16 = a1[2];
  a1[2] = v20;
  unint64_t v20 = v16;
  unint64_t v18 = v15.i64[0];
  std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer((uint64_t)&v18);
  return v11;
}

void sub_1C8E78334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel@<X0>(long long **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v12);
  if (!v12[184])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uaap_orchestration::grammar::Rule::getRightLabelNames((uaap_orchestration::grammar::Rule *)v12, (uint64_t *)&v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = v10;
  for (i = v11; v5 != i; uint64_t v5 = (long long *)((char *)v5 + 24))
  {
    uaap_orchestration::grammar::Path::singletonPath(v5, (uint64_t *)v9);
    uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(a1, v9, a3);
    std::basic_string<char16_t>::size_type v13 = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  }
  v9[0] = (long long *)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
}

void sub_1C8E784A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  size_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getAllSpanValuesForLabel@<X0>(long long **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v24);
  if (v25[136])
  {
    memset(v22, 0, sizeof(v22));
    int v23 = 1065353216;
    std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v18, (uint64_t)v25);
    if (v21[48])
    {
      int64x2_t v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v15, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
      unint64_t v4 = v15;
      uint64_t v5 = v16;
      while (v4 != v5)
      {
        std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>((uint64_t)v22, v4, (uint64_t)v4);
        v4 += 12;
      }
      std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](v13, (uint64_t)v21);
      if (v14)
      {
        uaap_orchestration::grammar::ResolutionTable::getSemanticValues((uaap_orchestration::grammar::ResolutionTable *)v13, (uint64_t)v11);
        for (uint64_t i = v12; i; uint64_t i = *(unsigned __int16 **)i)
        {
          uaap_orchestration::grammar::ResolutionTable::getSynonyms(v13, i + 8, v10);
          unint64_t v7 = (unsigned __int16 *)v10[0];
          uint64_t v8 = (unsigned __int16 *)v10[1];
          while (v7 != v8)
          {
            std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>((uint64_t)v22, v7, (uint64_t)v7);
            v7 += 12;
          }
          unsigned int v26 = (void **)v10;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
        }
        std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v11);
        if (v14) {
          std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v13);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a3, (uint64_t *)v22);
      v13[0] = (void **)&v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
    }
    else
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 32) = 1065353216;
    }
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
    std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v22);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1C8E78740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a22) {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a17);
  }
  a17 = (void **)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a44);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100](v44 - 248);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  int64x2_t v15 = operator new(0x28uLL);
  *int64x2_t v15 = 0;
  v15[1] = v8;
  unint64_t v16 = (std::basic_string<char16_t> *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v16, *(const std::basic_string<char16_t>::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unsigned int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *int64x2_t v15 = *v24;
LABEL_41:
    *unsigned int v24 = v15;
    goto LABEL_42;
  }
  *int64x2_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unsigned int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_1C8E789FC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getEnumChoicesForLabel@<X0>(long long **a1@<X0>, unsigned __int16 *a2@<X1>, void *a3@<X8>)
{
  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v9);
  if (v10[136])
  {
    std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v5, (uint64_t)v10);
    if (v8)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a3, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
}

void sub_1C8E78AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void snlp::common::text_uso_graph::ExactMatchComparator::showDifference(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1])
  {
    unint64_t v7 = "UserAccepted";
  }
  else if (a1[2])
  {
    unint64_t v7 = "UserAcknowledged";
  }
  else if (a1[4])
  {
    unint64_t v7 = "UserCancelled";
  }
  else if (a1[6])
  {
    unint64_t v7 = "UserRejected";
  }
  else if (a1[7])
  {
    unint64_t v7 = "UserStatedTask";
  }
  else if (a1[8])
  {
    unint64_t v7 = "UserWantedToPause";
  }
  else if (a1[9])
  {
    unint64_t v7 = "UserWantedToProceed";
  }
  else if (a1[10])
  {
    unint64_t v7 = "UserWantedToRepeat";
  }
  else
  {
    unint64_t v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, v7);
  if (a2[1])
  {
    char v8 = "UserAccepted";
  }
  else if (a2[2])
  {
    char v8 = "UserAcknowledged";
  }
  else if (a2[4])
  {
    char v8 = "UserCancelled";
  }
  else if (a2[6])
  {
    char v8 = "UserRejected";
  }
  else if (a2[7])
  {
    char v8 = "UserStatedTask";
  }
  else if (a2[8])
  {
    char v8 = "UserWantedToPause";
  }
  else if (a2[9])
  {
    char v8 = "UserWantedToProceed";
  }
  else if (a2[10])
  {
    char v8 = "UserWantedToRepeat";
  }
  else
  {
    char v8 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  uint64_t v9 = v28;
  if ((v28 & 0x80u) == 0) {
    size_t v10 = v28;
  }
  else {
    size_t v10 = v27;
  }
  std::string::size_type v11 = v25;
  if ((v25 & 0x80u) != 0) {
    std::string::size_type v11 = v24;
  }
  if (v10 != v11) {
    goto LABEL_51;
  }
  if ((v25 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(v26, p_p, v27)) {
      goto LABEL_51;
    }
LABEL_61:
    uint64_t v20 = *(void *)(a3 + 8);
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    snlp::common::text_uso_graph::extractGraph();
  }
  if (!v28) {
    goto LABEL_61;
  }
  std::basic_string<char16_t>::size_type v13 = &v26;
  while (*(unsigned __int8 *)v13 == *p_p)
  {
    std::basic_string<char16_t>::size_type v13 = (void **)((char *)v13 + 1);
    ++p_p;
    if (!--v9) {
      goto LABEL_61;
    }
  }
LABEL_51:
  std::operator+<char>();
  unint64_t v14 = std::string::append(&v21, " but got a ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v25 & 0x80u) == 0) {
    unint64_t v16 = (const std::string::value_type *)&__p;
  }
  else {
    unint64_t v16 = (const std::string::value_type *)__p;
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v17 = v25;
  }
  else {
    std::string::size_type v17 = v24;
  }
  float v18 = std::string::append(&v22, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)(a4 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a4 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  if ((char)v28 < 0) {
    operator delete(v26);
  }
}

void sub_1C8E78EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)&a14);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)&a20);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::extractGraph()
{
  uint64_t v0 = 1;
  int v1 = 0;
  operator new();
}

void sub_1C8E790DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::ExactMatchComparator::isMatch(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2[1])
  {
    uint64_t v6 = "UserAccepted";
  }
  else if (a2[2])
  {
    uint64_t v6 = "UserAcknowledged";
  }
  else if (a2[4])
  {
    uint64_t v6 = "UserCancelled";
  }
  else if (a2[6])
  {
    uint64_t v6 = "UserRejected";
  }
  else if (a2[7])
  {
    uint64_t v6 = "UserStatedTask";
  }
  else if (a2[8])
  {
    uint64_t v6 = "UserWantedToPause";
  }
  else if (a2[9])
  {
    uint64_t v6 = "UserWantedToProceed";
  }
  else if (a2[10])
  {
    uint64_t v6 = "UserWantedToRepeat";
  }
  else
  {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__s1, v6);
  if (a3[1])
  {
    unint64_t v7 = "UserAccepted";
  }
  else if (a3[2])
  {
    unint64_t v7 = "UserAcknowledged";
  }
  else if (a3[4])
  {
    unint64_t v7 = "UserCancelled";
  }
  else if (a3[6])
  {
    unint64_t v7 = "UserRejected";
  }
  else if (a3[7])
  {
    unint64_t v7 = "UserStatedTask";
  }
  else if (a3[8])
  {
    unint64_t v7 = "UserWantedToPause";
  }
  else if (a3[9])
  {
    unint64_t v7 = "UserWantedToProceed";
  }
  else if (a3[10])
  {
    unint64_t v7 = "UserWantedToRepeat";
  }
  else
  {
    unint64_t v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  int v8 = v33;
  if ((v33 & 0x80u) == 0) {
    size_t v9 = v33;
  }
  else {
    size_t v9 = __n;
  }
  unint64_t v10 = v30;
  int v11 = (char)v30;
  if ((v30 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v9 != v10)
  {
    BOOL v18 = 1;
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_61;
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v33 & 0x80) != 0)
  {
    BOOL v18 = memcmp(__s1, v12, __n) != 0;
    goto LABEL_56;
  }
  if (v33)
  {
    uint64_t v13 = v33 - 1;
    p_s1 = &__s1;
    do
    {
      int v16 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v15 = v16;
      int v17 = *(unsigned __int8 *)v12;
      uint64_t v12 = (void **)((char *)v12 + 1);
      BOOL v18 = v15 != v17;
    }
    while (v15 == v17 && v13-- != 0);
LABEL_56:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_61;
  }
  BOOL v18 = 0;
  if (((char)v30 & 0x80000000) == 0)
  {
LABEL_57:
    if (v18) {
      goto LABEL_58;
    }
LABEL_62:
    if ((v8 & 0x80) != 0)
    {
      if (__n != 22) {
        goto LABEL_74;
      }
      std::string v21 = (uint64_t *)__s1;
    }
    else
    {
      if (v8 != 22) {
        goto LABEL_74;
      }
      std::string v21 = (uint64_t *)&__s1;
    }
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = *(uint64_t *)((char *)v21 + 14);
    if (v22 == 0x65746167656C6544 && v23 == 0x6169447265735564 && v24 == 0x746341676F6C6169)
    {
      uint64_t v20 = 1;
      if ((v8 & 0x80) == 0) {
        return v20;
      }
      goto LABEL_77;
    }
LABEL_74:
    uint64_t v27 = *(void *)(a4 + 8);
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    snlp::common::text_uso_graph::extractGraph();
  }
LABEL_61:
  operator delete(__p[0]);
  int v8 = v33;
  if (!v18) {
    goto LABEL_62;
  }
LABEL_58:
  uint64_t v20 = 0;
  if ((v8 & 0x80) != 0) {
LABEL_77:
  }
    operator delete(__s1);
  return v20;
}

void sub_1C8E79500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a12);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a15);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::ExactMatchComparator::showDifference(snlp::common::text_uso_graph::ExactMatchComparator *this, const siri::ontology::UsoGraph *a2, const siri::ontology::UsoGraph *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  std::basic_string<char16_t> v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Expected:", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
  siri::ontology::UsoGraph::prettyPrint((uint64_t *)&__p, a2);
  if ((v17 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = v17;
  }
  else {
    uint64_t v7 = v16;
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\n", 2);
  if ((char)v17 < 0) {
    operator delete(__p);
  }
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Actual:", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  siri::ontology::UsoGraph::prettyPrint((uint64_t *)&__p, a3);
  if ((v17 & 0x80u) == 0) {
    unint64_t v10 = &__p;
  }
  else {
    unint64_t v10 = __p;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v11 = v17;
  }
  else {
    uint64_t v11 = v16;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  if ((char)v17 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[0] = v13;
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v21);
}

void sub_1C8E797B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

BOOL snlp::common::text_uso_graph::ExactMatchComparator::isMatch(snlp::common::text_uso_graph::ExactMatchComparator *this, siri::ontology::UsoGraph ***a2, siri::ontology::UsoGraph ***a3)
{
  unint64_t v4 = snlp::common::text_uso_graph::bottomUpTreeHash(a2[11], (const UsoGraphNode *)a2);
  return v4 == snlp::common::text_uso_graph::bottomUpTreeHash(a3[11], v5);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getUtteranceEmbeddingsSize(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 64);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumSpansTokens(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 88);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumContextTokens(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 136);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumUtteranceEmbeddings(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 40);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getBatchSize(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 160);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v10, 0, sizeof(v10));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v10, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  memset(v11, 0, sizeof(v11));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  memset(v12, 0, sizeof(v12));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v12, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  memset(v13, 0, sizeof(v13));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v13, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  memset(v14, 0, sizeof(v14));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  memset(v15, 0, sizeof(v15));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 2);
  memset(v16, 0, sizeof(v16));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, *(const void **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
  memset(v17, 0, sizeof(v17));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  itfm_inference_orchestrator::inference_engine::ITFME5MLModule::forward(*(void *)(a1 + 8), v10, &v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v6, (uint64_t)v7, (v7 - (unsigned char *)v6) >> 3);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v9, (v9 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    size_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v10);
}

void sub_1C8E79A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  int v36 = *(void **)v34;
  if (*(void *)v34)
  {
    *(void *)(v34 + 8) = v36;
    operator delete(v36);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&a15);
  _Unwind_Resume(a1);
}

void sub_1C8E79ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8E79AD4);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::~EspressoITFME5MLModel(void **this)
{
  itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::~EspressoITFME5MLModel(this);
  JUMPOUT(0x1CB775C40);
}

{
  void **v2;

  *this = &unk_1F235ECE8;
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  unint64_t v2 = (void **)this[1];
  this[1] = 0;
  if (v2) {
    std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](v2);
  }
}

void std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](void **this)
{
  if (*((char *)this + 479) < 0) {
    operator delete(this[57]);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)this);
  JUMPOUT(0x1CB775C40);
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    int v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*((void *)a1 + 3) != *((void *)v6 + 3)) {
    return 0;
  }
  if (*((void *)a1 + 4) != *((void *)v6 + 4)) {
    return 0;
  }
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v11 = (unsigned __int8 *)*((void *)v6 + 5);
  if (v9 - v10 != *((void *)v6 + 6) - (void)v11) {
    return 0;
  }
  while (v10 != v9)
  {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    uint64_t v14 = v11[23];
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *((void *)v11 + 1);
    }
    if (v13 != v14) {
      return 0;
    }
    if (v15 >= 0) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = *(unsigned __int8 **)v11;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v10, v16, *(void *)(v10 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v10 + 23))
    {
      uint64_t v17 = 0;
      while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
      {
        if (v12 == ++v17) {
          goto LABEL_36;
        }
      }
      return 0;
    }
LABEL_36:
    uint64_t v18 = *(unsigned __int8 *)(v10 + 47);
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = *(unsigned __int8 *)(v10 + 47);
    }
    else {
      uint64_t v19 = *(void *)(v10 + 32);
    }
    uint64_t v20 = v11[47];
    int v21 = (char)v20;
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *((void *)v11 + 4);
    }
    if (v19 != v20) {
      return 0;
    }
    if (v21 >= 0) {
      uint64_t v22 = v11 + 24;
    }
    else {
      uint64_t v22 = (unsigned __int8 *)*((void *)v11 + 3);
    }
    if ((v18 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v10 + 24), v22, *(void *)(v10 + 32))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v10 + 47))
    {
      uint64_t v23 = 0;
      while (*(unsigned __int8 *)(v10 + v23 + 24) == v22[v23])
      {
        if (v18 == ++v23) {
          goto LABEL_52;
        }
      }
      return 0;
    }
LABEL_52:
    BOOL v24 = (*(unsigned char *)(v10 + 72) != 0) == (v11[72] != 0);
    if (!*(unsigned char *)(v10 + 72) || !v11[72]) {
      goto LABEL_71;
    }
    uint64_t v25 = *(unsigned __int8 *)(v10 + 71);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = *(unsigned __int8 *)(v10 + 71);
    }
    else {
      uint64_t v26 = *(void *)(v10 + 56);
    }
    uint64_t v27 = v11[71];
    int v28 = (char)v27;
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *((void *)v11 + 7);
    }
    if (v26 != v27) {
      return 0;
    }
    if (v28 >= 0) {
      unsigned int v29 = v11 + 48;
    }
    else {
      unsigned int v29 = (unsigned __int8 *)*((void *)v11 + 6);
    }
    if ((v25 & 0x80) == 0)
    {
      if (!*(unsigned char *)(v10 + 71)) {
        goto LABEL_72;
      }
      uint64_t v30 = 0;
      uint64_t v31 = v25 - 1;
      do
      {
        BOOL v24 = *(unsigned __int8 *)(v10 + v30 + 48) == v29[v30];
        BOOL v32 = *(unsigned __int8 *)(v10 + v30 + 48) != v29[v30] || v31 == v30;
        ++v30;
      }
      while (!v32);
LABEL_71:
      if (!v24) {
        return 0;
      }
      goto LABEL_72;
    }
    if (memcmp(*(const void **)(v10 + 48), v29, *(void *)(v10 + 56))) {
      return 0;
    }
LABEL_72:
    int v33 = v11[88];
    if (*(unsigned char *)(v10 + 88)) {
      BOOL v34 = v33 == 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (v34)
    {
      if ((*(unsigned char *)(v10 + 88) != 0) != (v33 != 0)) {
        return 0;
      }
    }
    else if (*(double *)(v10 + 80) != *((double *)v11 + 10))
    {
      return 0;
    }
    if (*(unsigned char *)(v10 + 100) && v11[100])
    {
      if (*(_DWORD *)(v10 + 96) != *((_DWORD *)v11 + 24)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(v10 + 100) != 0) != (v11[100] != 0))
    {
      return 0;
    }
    if (*(unsigned char *)(v10 + 108) && v11[108])
    {
      if (*(_DWORD *)(v10 + 104) != *((_DWORD *)v11 + 26)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(v10 + 108) != 0) != (v11[108] != 0))
    {
      return 0;
    }
    if (*(unsigned char *)(v10 + 116) && v11[116])
    {
      if (*(_DWORD *)(v10 + 112) != *((_DWORD *)v11 + 28)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(v10 + 116) != 0) != (v11[116] != 0))
    {
      return 0;
    }
    v10 += 120;
    v11 += 120;
  }
  uint64_t v35 = a1[87];
  if ((v35 & 0x80u) == 0) {
    uint64_t v36 = a1[87];
  }
  else {
    uint64_t v36 = *((void *)a1 + 9);
  }
  uint64_t v37 = v6[87];
  int v38 = (char)v37;
  if ((v37 & 0x80u) != 0) {
    uint64_t v37 = *((void *)v6 + 9);
  }
  if (v36 != v37) {
    return 1;
  }
  unint64_t v39 = (const void **)(a1 + 64);
  int v42 = (unsigned __int8 *)*((void *)v6 + 8);
  int v41 = v6 + 64;
  int v40 = v42;
  if (v38 >= 0) {
    unsigned int v43 = v41;
  }
  else {
    unsigned int v43 = v40;
  }
  if ((v35 & 0x80) != 0) {
    return memcmp(*v39, v43, *((void *)a1 + 9)) != 0;
  }
  if (!a1[87]) {
    return 0;
  }
  uint64_t v44 = v35 - 1;
  do
  {
    int v46 = *(unsigned __int8 *)v39;
    unint64_t v39 = (const void **)((char *)v39 + 1);
    int v45 = v46;
    int v47 = *v43++;
    uint64_t result = v45 != v47;
  }
  while (v45 == v47 && v44-- != 0);
  return result;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator==(a1, a2) ^ 1;
}

void snlp::ssu::proto::SSUValidatedRequest::validateRequest(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    int v15 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    LOWORD(v29) = 0;
    uint64_t v16 = "Request validation failed: received nullptr request";
    goto LABEL_26;
  }
  if (!*(void *)(*a2 + 48))
  {
    uint64_t v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "Request validation: missing nluRequestId field. This is non-fatal.", (uint8_t *)&v29, 2u);
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*a2 + 48);
  if (v8 && !*(void *)(v8 + 16))
  {
    uint64_t v20 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_40;
    }
    LOWORD(v29) = 0;
    uint64_t v16 = "Request validation failed: missing nluRequestId.id field";
    uint64_t v17 = v20;
    os_log_type_t v18 = OS_LOG_TYPE_DEBUG;
LABEL_28:
    uint32_t v19 = 2;
LABEL_39:
    _os_log_impl(&dword_1C8DA9000, v17, v18, v16, (uint8_t *)&v29, v19);
    goto LABEL_40;
  }
  uint64_t v9 = *(unsigned __int8 **)(v7 + 16);
  if (!v9)
  {
    int v15 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    LOWORD(v29) = 0;
    uint64_t v16 = "Request validation failed: received request with no locale";
LABEL_26:
    uint64_t v17 = v15;
LABEL_27:
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    goto LABEL_28;
  }
  uint64_t v10 = v9[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v9[23];
  }
  else {
    uint64_t v11 = *((void *)v9 + 1);
  }
  uint64_t v12 = a1[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a1 + 1);
  }
  if (v11 != v12) {
    goto LABEL_32;
  }
  if (v13 >= 0) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)a1;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, v14, *((void *)v9 + 1))) {
      goto LABEL_32;
    }
  }
  else if (v9[23])
  {
    while (*v9 == *v14)
    {
      ++v9;
      ++v14;
      if (!--v10) {
        goto LABEL_42;
      }
    }
LABEL_32:
    int v21 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(uint64_t **)(*a2 + 16);
      if (*((char *)v22 + 23) < 0) {
        uint64_t v22 = (uint64_t *)*v22;
      }
      if ((a1[23] & 0x80u) == 0) {
        uint64_t v23 = a1;
      }
      else {
        uint64_t v23 = *(unsigned __int8 **)a1;
      }
      int v29 = 136315394;
      uint64_t v30 = v22;
      __int16 v31 = 2080;
      BOOL v32 = v23;
      uint64_t v16 = "Request validation failed: received request with a locale (%s) not matching the expected locale (%s)";
      uint64_t v17 = v21;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 22;
      goto LABEL_39;
    }
LABEL_40:
    char v24 = 0;
    *a3 = 0;
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v25 = *(void *)(v7 + 80);
  uint64_t v26 = SNLPOSLoggerForCategory(8);
  uint64_t v27 = v26;
  if (!v25)
  {
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    LOWORD(v29) = 0;
    uint64_t v16 = "Request validation failed: received request with no utterance";
    uint64_t v17 = v27;
    goto LABEL_27;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v29) = 0;
    _os_log_impl(&dword_1C8DA9000, v27, OS_LOG_TYPE_DEBUG, "Successfully validated SSU request", (uint8_t *)&v29, 2u);
  }
  uint64_t v28 = *a2;
  *a2 = 0;
  *(void *)a3 = v28;
  char v24 = 1;
LABEL_41:
  a3[8] = v24;
}

void *snlp::ssu::proto::SSUValidatedRequest::SSUValidatedRequest(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

void snlp::ssu::proto::SSUValidatedRequest::getRequestId(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 48);
  if (v2)
  {
    uint64_t v3 = *(long long **)(v2 + 16);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "not provided");
  }
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::getUtterance(snlp::ssu::proto::SSUValidatedRequest *this)
{
  return *(void *)(*(void *)this + 80);
}

void snlp::ssu::proto::SSUValidatedRequest::getAppNameMatchingSpanBundleIds(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v4 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(void *)this + 24);
  for (uint64_t i = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(void *)this + 32); v4 != i; ++v4)
  {
    uint64_t v7 = *v4;
    uint64_t v8 = (_DWORD *)*((void *)*v4 + 1);
    uint64_t v9 = (_DWORD *)*((void *)*v4 + 2);
    if (v8 != v9)
    {
      while (*v8 != 2)
      {
        if (++v8 == v9)
        {
          uint64_t v8 = (_DWORD *)*((void *)*v4 + 2);
          break;
        }
      }
    }
    if (v9 != v8 && snlp::ssu::proto::SSUValidatedRequest::hasLabelAppName(*v4, a2))
    {
      uint64_t v10 = *((void *)v7 + 8);
      if (!v10
        || (uint64_t v11 = *(void *)(v10 + 104), v11 == *(void *)(v10 + 112))
        || (uint64_t v12 = *(void *)(*(void *)v11 + 48)) == 0
        || (*(unsigned char *)(v12 + 96) & 1) != 0)
      {
        snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromUsoGraph(this, (const sirinluexternal::UsoGraph **)v7, &__p);
        if (v17)
        {
          unint64_t v13 = a3[1];
          if (v13 >= a3[2])
          {
            uint64_t v15 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(a3, (long long *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v13 = v14;
            }
            uint64_t v15 = v13 + 24;
            a3[1] = v13 + 24;
          }
          a3[1] = v15;
          if (v17)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
}

void sub_1C8E7A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  v15[1] = v16;
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  std::string __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::proto::SSUValidatedRequest::hasLabelAppName(snlp::ssu::proto::SSUValidatedRequest *this, const sirinluinternal::MatchingSpan *a2)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 6);
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "appName");
    uint64_t v3 = v2[23];
    if ((v3 & 0x80u) == 0) {
      long long v4 = (void *)v2[23];
    }
    else {
      long long v4 = (void *)*((void *)v2 + 1);
    }
    unint64_t v5 = v19;
    int v6 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      unint64_t v5 = (unint64_t)__p[1];
    }
    if (v4 == (void *)v5)
    {
      if ((v19 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if ((v3 & 0x80) != 0)
      {
        BOOL v15 = memcmp(*(const void **)v2, v7, *((void *)v2 + 1)) == 0;
      }
      else
      {
        if (!v2[23])
        {
          BOOL v15 = 1;
          if (((char)v19 & 0x80000000) == 0) {
            return v15;
          }
          goto LABEL_27;
        }
        uint64_t v8 = v3 - 1;
        do
        {
          int v10 = *v2++;
          int v9 = v10;
          int v12 = *(unsigned __int8 *)v7;
          uint64_t v7 = (void **)((char *)v7 + 1);
          int v11 = v12;
          BOOL v14 = v8-- != 0;
          BOOL v15 = v9 == v11;
        }
        while (v9 == v11 && v14);
      }
      if (v6 < 0) {
LABEL_27:
      }
        operator delete(__p[0]);
    }
    else
    {
      BOOL v15 = 0;
      if ((char)v19 < 0) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v16 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_ERROR, "Matching span has no label. Skipping.", (uint8_t *)__p, 2u);
    }
    return 0;
  }
  return v15;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromUsoGraph@<X0>(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, std::string *a3@<X8>)
{
  snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(this, a2, (uint64_t)v10);
  if (v13)
  {
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    while (v4 != v5)
    {
      snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromAppNameIdentifier(v4, a3);
      if (a3[1].__r_.__value_.__s.__data_[0]) {
        return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
      }
      v4 += 120;
    }
    int v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v9 = 0;
      uint64_t v7 = "Unexpected USO graph: app entity node does not contain a valid app bundle ID in its identifiers. Skipping.";
LABEL_10:
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    }
  }
  else
  {
    int v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v9 = 0;
      uint64_t v7 = "Failed to lookup string node data from matching span USO graph";
      goto LABEL_10;
    }
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
}

void sub_1C8E7A7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C8E7A8EC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[8])
  {
    SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(this);
    uint64_t v8 = *SharedUsoVocabManager;
    uint64_t v7 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      int v45 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    else
    {
      int v45 = 0;
    }
    uint64_t v44 = v8;
    int v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphProtoReader::fromProtobuf(&v43, (siri::ontology::UsoGraphProtoReader *)&v44, a2[8]);
    if (!v43)
    {
      int v21 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_ERROR, "Failed to convert proto USO graph to SiriOntology format. Skipping.", (uint8_t *)&buf, 2u);
      }
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 72) = 0;
      goto LABEL_46;
    }
    siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
    Successors = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::getSuccessors();
    if (v42 - v41 != 8)
    {
      uint64_t v22 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_ERROR, "Failed to lookup node Root->entity. Skipping.", (uint8_t *)&buf, 2u);
      }
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 72) = 0;
      goto LABEL_44;
    }
    siri::ontology::oname::graph::ontology_init::Argument_name(Successors);
    siri::ontology::UsoGraph::getSuccessors();
    if (v40 - v39 == 8)
    {
      long long v12 = *(const void **)v39;
      if ((*(unsigned int (**)(void))(**(void **)v39 + 16))(*(void *)v39) == 3)
      {
        if (!v13) {
          __cxa_bad_cast();
        }
        BOOL v14 = (siri::ontology::UsoEntityNode *)v13;
        BOOL v15 = (long long *)(v13 + 104);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&buf, (long long *)(v13 + 104));
        if ((_BYTE)v31)
        {
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          siri::ontology::UsoEntityNode::getIdentifiers((uint64_t *)&v37, v14);
          uint64_t v16 = v37;
          char v17 = v38;
          uint64_t v36 = 0;
          long long v35 = 0uLL;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
          buf.__r_.__value_.__s.__data_[8] = 0;
          if (v38 != v37)
          {
            std::vector<siri::ontology::UsoIdentifier>::__vallocate[abi:ne180100](&v35, v38 - v37);
            uint64_t v18 = 0;
            uint64_t v19 = *((void *)&v35 + 1);
            do
            {
              siri::ontology::UsoIdentifier::UsoIdentifier((std::string *)(v19 + v18), *v16++);
              v18 += 120;
            }
            while (v16 != v17);
            *((void *)&v35 + 1) = v19 + v18;
          }
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v15);
          if (!v29) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          std::string buf = __p;
          memset(&__p, 0, sizeof(__p));
          long long v31 = v35;
          uint64_t v32 = v36;
          long long v35 = 0uLL;
          uint64_t v36 = 0;
          uint64_t v20 = *(uint64_t **)(*(void *)this + 80);
          int v27 = 6;
          snlp::common::utilities::getAlignmentUtf8StartEndIndexes(v14, v20, &v27, (uint64_t)&v33);
          *(std::string *)a3 = buf;
          memset(&buf, 0, sizeof(buf));
          *(_OWORD *)(a3 + 24) = v31;
          *(void *)(a3 + 40) = v32;
          uint64_t v32 = 0;
          long long v31 = 0uLL;
          *(void *)(a3 + 64) = v34;
          *(_OWORD *)(a3 + 48) = v33;
          *(unsigned char *)(a3 + 72) = 1;
          int v46 = (void **)&v31;
          std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v46);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
          std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (v37)
          {
            int v38 = v37;
            operator delete(v37);
          }
          goto LABEL_42;
        }
        uint64_t v23 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          char v24 = "Unexpected USO graph: node Entity->name has no string value. Skipping.";
          goto LABEL_40;
        }
LABEL_41:
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 72) = 0;
LABEL_42:
        if (v39)
        {
          int v40 = v39;
          operator delete(v39);
        }
LABEL_44:
        if (v41)
        {
          int v42 = v41;
          operator delete(v41);
        }
LABEL_46:
        uint64_t v25 = v43;
        uint64_t v43 = 0;
        if (v25)
        {
          uint64_t v26 = MEMORY[0x1CB774F40]();
          MEMORY[0x1CB775C40](v26, 0x10A0C403D23BABBLL);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        return;
      }
      uint64_t v23 = SNLPOSLoggerForCategory(8);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_41;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      char v24 = "Unexpected USO graph: node Entity->name is not of type StringNode. Skipping.";
    }
    else
    {
      uint64_t v23 = SNLPOSLoggerForCategory(8);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_41;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      char v24 = "Unexpected USO graph: failed to lookup node Entity->name. Skipping.";
    }
LABEL_40:
    _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, 2u);
    goto LABEL_41;
  }
  unint64_t v9 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_ERROR, "Matching span has no USO graph. Skipping.", (uint8_t *)&buf, 2u);
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 72) = 0;
}

void sub_1C8E7AE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v35 = (void *)v32[3];
  if (v35)
  {
    v32[4] = v35;
    operator delete(v35);
  }
  uint64_t v36 = (void *)v32[6];
  if (v36)
  {
    v32[7] = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)v32[9];
  if (v37)
  {
    v32[10] = v37;
    operator delete(v37);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v33 - 128));
  int v38 = (std::__shared_weak_count *)v32[14];
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromAppNameIdentifier(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  BOOL v3 = (*(void *)(a1 + 96) & 0xFF00000000) != 0 && *(void *)(a1 + 96) == 1;
  if (!v3
    || (unint64_t v5 = (long long *)(a1 + 48),
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)(a1 + 48)),
        !v31))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v28, "item_id");
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v5);
  if (!v31) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v28[1];
  }
  if (size == v7)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v8 = v28;
    }
    else {
      uint64_t v8 = (void **)v28[0];
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v13 = (void *)__p.__r_.__value_.__r.__words[0];
      int v14 = memcmp(__p.__r_.__value_.__l.__data_, v8, __p.__r_.__value_.__l.__size_);
      operator delete(v13);
      if (!v14) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        goto LABEL_37;
      }
      uint64_t v9 = 0;
      do
      {
        int v10 = __p.__r_.__value_.__s.__data_[v9];
        int v11 = *((unsigned __int8 *)v8 + v9);
      }
      while (v10 == v11 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v9++);
      if (v10 == v11)
      {
LABEL_37:
        std::string::basic_string[abi:ne180100]<0>(&__p, "Applications");
        if (*(char *)(a1 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
        }
        else {
          std::string v27 = *(std::string *)(a1 + 24);
        }
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v27.__r_.__value_.__l.__size_;
        }
        std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
        }
        if (v15 == v16)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
            int v23 = memcmp(v27.__r_.__value_.__l.__data_, p_p, v27.__r_.__value_.__l.__size_);
            operator delete(v22);
            if (!v23) {
              goto LABEL_65;
            }
          }
          else
          {
            if (!*((unsigned char *)&v27.__r_.__value_.__s + 23)) {
              goto LABEL_65;
            }
            uint64_t v18 = 0;
            do
            {
              int v19 = v27.__r_.__value_.__s.__data_[v18];
              int v20 = p_p->__r_.__value_.__s.__data_[v18];
            }
            while (v19 == v20 && HIBYTE(v27.__r_.__value_.__r.__words[2]) - 1 != v18++);
            if (v19 == v20)
            {
LABEL_65:
              if (*(char *)(a1 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
              }
              else {
                std::string v27 = *(std::string *)a1;
              }
              if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v27.__r_.__value_.__l.__size_)
                {
                  std::string::__init_copy_ctor_external(a2, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
                  goto LABEL_73;
                }
              }
              else if (*((unsigned char *)&v27.__r_.__value_.__s + 23))
              {
                *a2 = v27;
LABEL_73:
                char v24 = 1;
LABEL_77:
                a2[1].__r_.__value_.__s.__data_[0] = v24;
                if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v27.__r_.__value_.__l.__data_);
                }
                goto LABEL_63;
              }
              uint64_t v25 = SNLPOSLoggerForCategory(8);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)uint64_t v26 = 0;
                _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_ERROR, "Unexpected USO graph: identifier value is empty. Skipping.", v26, 2u);
              }
              char v24 = 0;
              a2->__r_.__value_.__s.__data_[0] = 0;
              goto LABEL_77;
            }
          }
        }
        else if ((*((unsigned char *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_63:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_34;
      }
    }
  }
  else if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_34:
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
}

void sub_1C8E7B230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    BOOL v3 = (void **)(a1 + 24);
    std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

BOOL snlp::ssu::proto::SSUValidatedRequest::isFromSiriVocabulary(uint64_t a1)
{
  int v1 = *(_DWORD **)(a1 + 8);
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  if (v1 != v2)
  {
    while (*v1 != 2)
    {
      if (++v1 == v2)
      {
        int v1 = *(_DWORD **)(a1 + 16);
        return v2 != v1;
      }
    }
  }
  return v2 != v1;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::isExactMatch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 104), v2 != *(void *)(v1 + 112)) && (v3 = *(void *)(*(void *)v2 + 48)) != 0) {
    return *(unsigned char *)(v3 + 96) & 1;
  }
  else {
    return 1;
  }
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::getAppEntityMatchingSpanInfos@<X0>(uint64_t result@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v4 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(void *)result + 24);
  unint64_t v5 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(void *)result + 32);
  if (v4 != v5)
  {
    unint64_t v7 = (snlp::ssu::proto::SSUValidatedRequest *)result;
    do
    {
      uint64_t v8 = (const sirinluexternal::UsoGraph **)*v4;
      uint64_t v9 = (_DWORD *)*((void *)*v4 + 1);
      int v10 = (_DWORD *)*((void *)*v4 + 2);
      if (v9 != v10)
      {
        while (*v9 != 2)
        {
          if (++v9 == v10)
          {
            uint64_t v9 = (_DWORD *)*((void *)*v4 + 2);
            break;
          }
        }
      }
      if (v10 != v9)
      {
        uint64_t result = snlp::ssu::proto::SSUValidatedRequest::hasLabelAppEntity(*v4, a2);
        if (result)
        {
          snlp::ssu::proto::SSUValidatedRequest::buildAppEntitySpanInfoFromUsoGraph(v7, v8, (unsigned __int8 *)a2, (uint64_t)v20);
          if (v21)
          {
            unint64_t v12 = *(void *)(a3 + 8);
            unint64_t v11 = *(void *)(a3 + 16);
            if (v12 >= v11)
            {
              uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(void *)a3) >> 3);
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) > 0x2E8BA2E8BA2E8BALL) {
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *(void *)a3) >> 3);
              if (2 * v17 > v16) {
                unint64_t v16 = 2 * v17;
              }
              if (v17 >= 0x1745D1745D1745DLL) {
                unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
              }
              else {
                unint64_t v18 = v16;
              }
              uint64_t v26 = a3 + 16;
              if (v18) {
                unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v18);
              }
              else {
                uint64_t v19 = 0;
              }
              *(void *)std::string buf = v18;
              int v23 = (std::string *)(v18 + 88 * v15);
              char v24 = v23;
              unint64_t v25 = v18 + 88 * v19;
              std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(v23, v20);
              char v24 = (std::string *)((char *)v24 + 88);
              std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__swap_out_circular_buffer((uint64_t *)a3, buf);
              unint64_t v13 = *(void *)(a3 + 8);
              std::__split_buffer<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(*(std::string **)(a3 + 8), v20);
              unint64_t v13 = v12 + 88;
              *(void *)(a3 + 8) = v13;
            }
            *(void *)(a3 + 8) = v13;
          }
          else
          {
            int v14 = SNLPOSLoggerForCategory(8);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_ERROR, "Failed to build app entity from matching span. Skipping.", buf, 2u);
            }
          }
          uint64_t result = std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1C8E7B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL snlp::ssu::proto::SSUValidatedRequest::hasLabelAppEntity(snlp::ssu::proto::SSUValidatedRequest *this, const sirinluinternal::MatchingSpan *a2)
{
  if (*((void *)this + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s1, "appEntity");
    uint64_t v3 = (unsigned __int8 **)*((void *)this + 6);
    if ((v22 & 0x80u) == 0) {
      size_t v4 = v22;
    }
    else {
      size_t v4 = __n;
    }
    unint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
    int v6 = (char)v5;
    if ((char)v5 < 0) {
      unint64_t v5 = v3[1];
    }
    if ((unsigned __int8 *)v4 == v5)
    {
      if (v6 >= 0) {
        unint64_t v7 = (unsigned __int8 *)*((void *)this + 6);
      }
      else {
        unint64_t v7 = *v3;
      }
      if ((v22 & 0x80) != 0)
      {
        unint64_t v18 = __s1;
        BOOL v16 = memcmp(__s1, v7, __n) == 0;
        goto LABEL_27;
      }
      if (!v22) {
        return 1;
      }
      uint64_t v8 = v22 - 1;
      p_s1 = &__s1;
      do
      {
        int v11 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v10 = v11;
        int v13 = *v7++;
        int v12 = v13;
        BOOL v15 = v8-- != 0;
        BOOL v16 = v10 == v12;
      }
      while (v10 == v12 && v15);
    }
    else
    {
      BOOL v16 = 0;
    }
    if ((v22 & 0x80) != 0)
    {
      unint64_t v18 = __s1;
LABEL_27:
      operator delete(v18);
    }
  }
  else
  {
    unint64_t v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__s1) = 0;
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_ERROR, "Matching span has no label. Skipping.", (uint8_t *)&__s1, 2u);
    }
    return 0;
  }
  return v16;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::buildAppEntitySpanInfoFromUsoGraph@<X0>(snlp::ssu::proto::SSUValidatedRequest *a1@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(a1, a2, (uint64_t)&v47);
  if (!v52)
  {
    unsigned __int8 v22 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v23 = "Failed to lookup string node data from matching span USO graph";
LABEL_37:
      _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&__p, 2u);
    }
LABEL_38:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 88) = 0;
    return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
  }
  if (!v51)
  {
    unsigned __int8 v22 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v23 = "Failed to extract UTF-8 indexes from the app entity span graph string node alignment";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&__s1, "app_entity_type");
  uint64_t v6 = v48;
  uint64_t v7 = v49;
  if (v48 == v49)
  {
LABEL_42:
    char v24 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_ERROR, "Failed to extract app_entity_type identifier from the app entity span graph", (uint8_t *)&__p, 2u);
    }
LABEL_68:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 88) = 0;
    goto LABEL_69;
  }
  do
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)(v6 + 48));
    int v8 = v40;
    if (!(_BYTE)v40) {
      goto LABEL_30;
    }
    char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((v46 & 0x80u) == 0) {
      size_t v10 = v46;
    }
    else {
      size_t v10 = __n;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v10 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v46 & 0x80) != 0)
      {
        BOOL v21 = memcmp(__s1, p_p, __n) == 0;
        goto LABEL_26;
      }
      if (v46)
      {
        uint64_t v13 = v46 - 1;
        p_s1 = &__s1;
        do
        {
          int v16 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v15 = v16;
          int v18 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v17 = v18;
          BOOL v20 = v13-- != 0;
          BOOL v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
LABEL_26:
        if (!v8) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      BOOL v21 = 1;
    }
    else
    {
      BOOL v21 = 0;
    }
LABEL_27:
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_29:
    if (v21) {
      goto LABEL_39;
    }
LABEL_30:
    v6 += 120;
  }
  while (v6 != v7);
  uint64_t v6 = v7;
LABEL_39:
  if (v6 == v49) {
    goto LABEL_42;
  }
  if (*(char *)(v6 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
  }
  else {
    std::string __p = *(std::string *)(v6 + 24);
  }
  uint64_t v25 = a3[23];
  if ((v25 & 0x80u) == 0) {
    uint64_t v26 = a3[23];
  }
  else {
    uint64_t v26 = *((void *)a3 + 1);
  }
  std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  if (v26 != v27)
  {
    BOOL v34 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_73;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int8 v29 = &__p;
  }
  else {
    unsigned __int8 v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v25 & 0x80) != 0)
  {
    BOOL v34 = memcmp(*(const void **)a3, v29, *((void *)a3 + 1)) != 0;
    goto LABEL_66;
  }
  if (!a3[23])
  {
    BOOL v34 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_73:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v34) {
      goto LABEL_74;
    }
    goto LABEL_68;
  }
  uint64_t v30 = v25 - 1;
  do
  {
    int v32 = *a3++;
    int v31 = v32;
    int v33 = v29->__r_.__value_.__s.__data_[0];
    unsigned __int8 v29 = (std::string *)((char *)v29 + 1);
    BOOL v34 = v31 != v33;
  }
  while (v31 == v33 && v30-- != 0);
LABEL_66:
  if (v28 < 0) {
    goto LABEL_73;
  }
LABEL_67:
  if (v34) {
    goto LABEL_68;
  }
LABEL_74:
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v37 = *(_OWORD *)v6;
    v43.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v37;
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v47;
  }
  long long v40 = v50;
  memset(&v41, 0, sizeof(v41));
  std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>(&v41, v48, v49, 0xEEEEEEEEEEEEEEEFLL * ((v49 - v48) >> 3));
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v42, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = v43;
  }
  *(std::string *)a4 = __p;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(a4 + 24) = v40;
  *(std::string *)(a4 + 40) = v41;
  memset(&v41, 0, sizeof(v41));
  long long v38 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
  *(void *)(a4 + 80) = *((void *)&v42.__r_.__value_.__l + 2);
  *(_OWORD *)(a4 + 64) = v38;
  memset(&v42, 0, sizeof(v42));
  *(unsigned char *)(a4 + 88) = 1;
  int v53 = &v41;
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
LABEL_69:
  if ((char)v46 < 0) {
    operator delete(__s1);
  }
  return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
}

void sub_1C8E7BB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  *(void *)(v38 - 88) = v37;
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 88));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>((std::string *)((char *)this + 40), *((void *)a2 + 5), *((void *)a2 + 6), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  uint64_t v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = a2[4];
    this[3].__r_.__value_.__l.__size_ = *((void *)a2 + 10);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C8E7BC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 88;
      long long v6 = *(_OWORD *)(v3 - 88);
      *(void *)(v4 - 72) = *(void *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v6;
      *(void *)(v3 - 80) = 0;
      *(void *)(v3 - 72) = 0;
      *(void *)(v3 - 88) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(void *)(v4 - 40) = 0;
      *(void *)(v4 - 32) = 0;
      *(void *)(v4 - 48) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 88;
      v3 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::proto::SSUValidatedRequest::getOnScreenSalientEntityAppBundleIds(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(uint64_t **)(*(void *)this + 56);
  uint64_t v4 = *(uint64_t **)(*(void *)this + 64);
  while (v3 != v4)
  {
    snlp::ssu::proto::SSUValidatedRequest::getOnScreenAppBundleId(*v3, &__p);
    if (v9)
    {
      unint64_t v5 = a2[1];
      if (v5 >= a2[2])
      {
        uint64_t v7 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, (long long *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v5 = v6;
        }
        uint64_t v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      if (v9)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    ++v3;
  }
}

void sub_1C8E7BF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v17 = v16;
  v15[1] = v17;
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  std::string __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::proto::SSUValidatedRequest::getOnScreenAppBundleId(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v3 + 44) & 1) == 0 || *(_DWORD *)(v3 + 40) != 2) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    uint64_t v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = 0;
      uint64_t v8 = "Warning: ON_SCREEN salient entity is missing appBundleId field. Skipping.";
      char v9 = (uint8_t *)&v11;
LABEL_12:
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
LABEL_13:
    LOBYTE(v3) = 0;
LABEL_14:
    a2->__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_15;
  }
  unint64_t v5 = *(long long **)(v4 + 8);
  if (!v5)
  {
    uint64_t v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      uint64_t v8 = "Warning: ON_SCREEN salient entity appBundleId field is missing string value. Skipping.";
      char v9 = (uint8_t *)&v10;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  LOBYTE(v3) = 1;
LABEL_15:
  a2[1].__r_.__value_.__s.__data_[0] = v3;
}

void *snlp::ssu::proto::operator<<(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUValidatedRequest::AppEntitySpanInfo[\n", 40);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    utteranceFragment='", 23);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    startIndexUtf8=", 19);
  char v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    endIndexUtf8=", 17);
  __int16 v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",\n", 2);
  __int16 v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    parameterId='", 17);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v13 = a2 + 64;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"'\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  ]", 3);
  return a1;
}

void *snlp::ssu::encoder::SSUEncoder::SSUEncoder(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *uint64_t result = v3;
  uint64_t v4 = *a2;
  *a2 = 0;
  result[1] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a3;
  *a3 = 0;
  *uint64_t result = v3;
  uint64_t v4 = *a2;
  *a2 = 0;
  result[1] = v4;
  return result;
}

void snlp::ssu::encoder::SSUEncoder::buildFromAssetsDirectory(char *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  uint64_t v4 = SNLPOSLoggerForCategory(7);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v5 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "SSUEncoder Build from assets directory", "", buf, 2u);
    }
  }
  uint64_t v6 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUEncoder Build from assets directory\"", buf, 2u);
  }
  uint64_t v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (a1[23] >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "Building SSUEncoder from assets directory: %s", buf, 0xCu);
  }
  snlp::ssu::espresso::SSUNessieModel::buildFromAssetsDirectory((snlp::ssu::espresso::SSUNessieModel *)a1);
}

void sub_1C8E7C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](&a9);
  std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::encoder::SSUEncoder::getMaxBatchSize(snlp::ssu::encoder::SSUEncoder *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

void snlp::ssu::encoder::SSUEncoder::computeEncoding(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v10 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  int v5 = 0;
  uint64_t v6 = 0;
  v7[0] = 0;
  v7[1] = &v5;
  char v8 = 0;
  int v5 = (std::string *)operator new(0x18uLL);
  uint64_t v6 = v5;
  v7[0] = v5 + 1;
  uint64_t v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v7, (long long *)&v9, &v10, v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  snlp::ssu::encoder::SSUEncoder::computeEncodings(a1, (uint64_t *)&v5, a3);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1C8E7C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void snlp::ssu::encoder::SSUEncoder::computeEncodings(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  char v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SSUEncoder Encoding computation", "", (uint8_t *)&buf, 2u);
    }
  }
  long long v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUEncoder Encoding computation\"", (uint8_t *)&buf, 2u);
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  uint64_t v12 = *(void *)(a1 + 8);
  if (v11 < *(void *)(v12 + 16))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v62, v11);
    uint64_t v26 = std::string::insert(&v62, 0, "Batch size implied by utterancesBatch (");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = std::string::append(&v63, ") is lower than the minimum allowed by the model (");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *(void *)(*(void *)(a1 + 8) + 16));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v61;
    }
    else {
      uint64_t v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    int v32 = std::string::append(&v64, (const std::string::value_type *)v30, size);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57[0].__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    BOOL v34 = std::string::append(v57, ")");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (v11 > *(void *)(v12 + 24))
  {
    uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v62, v11);
    uint64_t v37 = std::string::insert(&v62, 0, "Batch size implied by utterancesBatch (");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    unint64_t v39 = std::string::append(&v63, ") is higher than the maximum allowed by this model instance (");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *(void *)(*(void *)(a1 + 8) + 24));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v41 = &v61;
    }
    else {
      std::string v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v61.__r_.__value_.__l.__size_;
    }
    std::string v43 = std::string::append(&v64, (const std::string::value_type *)v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v57[0].__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    int v45 = std::string::append(v57, ")");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v36, &buf);
    v36->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "Computing encodings for batch of size %lu", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v14 = SNLPOSLoggerForCategory(8);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v15) {
    snlp::ssu::encoder::SSUEncoder::logUtterancesBatch(v15, a2);
  }
  uint64_t v16 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_DEBUG, "Step 1: Preprocessing utterances (using Sentencepiece model)", (uint8_t *)&buf, 2u);
  }
  snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(*(uint64_t **)a1, a2, (uint64_t)&buf);
  uint64_t v48 = v67;
  long long v49 = v66;
  *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v66;
  *(_OWORD *)&v57[0].__r_.__value_.__r.__words[2] = v67;
  uint64_t v47 = *((void *)&v68 + 1);
  *(_OWORD *)&v57[1].__r_.__value_.__r.__words[1] = v68;
  long long v50 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  std::string::size_type v17 = buf.__r_.__value_.__r.__words[2];
  int v18 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "Step 2: Running Nessie model inference on sentence pieces", (uint8_t *)&buf, 2u);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  *(_OWORD *)char v51 = v49;
  uint64_t v52 = v48;
  memset(v57, 0, sizeof(v57));
  *(_OWORD *)int v53 = *(_OWORD *)&v57[1].__r_.__value_.__l.__data_;
  uint64_t v54 = v47;
  *(_OWORD *)std::string __p = v50;
  std::string::size_type v56 = v17;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  snlp::ssu::espresso::SSUNessieModel::forward(v19, (long long *)v51, &buf);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v53[0]) {
    operator delete(v53[0]);
  }
  if (v51[0]) {
    operator delete(v51[0]);
  }
  BOOL v20 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v64.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEBUG, "Finished computing Nessie encodings", (uint8_t *)&v64, 2u);
  }
  *(_OWORD *)a3 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  uint64_t v21 = v67;
  *(void *)(a3 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 24) = v66;
  *(void *)(a3 + 40) = v21;
  unsigned __int8 v22 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v23 = v22;
    if (os_signpost_enabled(v22))
    {
      LOWORD(v64.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v23, OS_SIGNPOST_INTERVAL_END, v7, "SSUEncoder Encoding computation", "", (uint8_t *)&v64, 2u);
    }
  }
  char v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v64.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v24, OS_LOG_TYPE_DEFAULT, "END \"SSUEncoder Encoding computation\"", (uint8_t *)&v64, 2u);
  }
}

void sub_1C8E7CC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v53 - 153) < 0) {
    operator delete(*(void **)(v53 - 176));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v53 - 185) < 0) {
    operator delete(*(void **)(v53 - 208));
  }
  if (*(char *)(v53 - 217) < 0) {
    operator delete(*(void **)(v53 - 240));
  }
  if (a51 < 0)
  {
    operator delete(a46);
    if ((v52 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v52)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v51);
  goto LABEL_16;
}

uint64_t snlp::ssu::encoder::SSUEncoder::logUtterancesBatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v3 = a2 + 1;
  uint64_t v16 = a2[1];
  uint64_t v4 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  uint64_t v5 = *a2;
  for (uint64_t i = *v3; v5 != i; v5 += 24)
  {
    os_signpost_id_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" - '", 4);
    char v8 = (const char *)v5;
    if (*(char *)(v5 + 23) < 0) {
      char v8 = *(const char **)v5;
    }
    size_t v9 = strlen(v8);
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (UTF-8 code units: ", 20);
    snlp::ssu::encoder::SSUEncoder::stringHexRepresentation(v19, (uint64_t *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")\n", 2);
  }
  uint64_t v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v13 = v18 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 134218243;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 3);
    __int16 v25 = 2085;
    uint64_t v26 = v13;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "Computing Nessie encodings for %lu utterances:\n%{sensitive}s", buf, 0x16u);
    if (v18 < 0) {
      operator delete(__p);
    }
  }
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v20[0] = v14;
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v22);
}

void sub_1C8E7D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *snlp::ssu::encoder::SSUEncoder::stringHexRepresentation(void *result, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 >= 0) {
    os_signpost_id_t v3 = a2;
  }
  else {
    os_signpost_id_t v3 = (uint64_t *)*a2;
  }
  if (v2 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    uint64_t v5 = result + 2;
    do
    {
      char v10 = 91;
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
      uint64_t v7 = *v6;
      *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) |= 0x200u;
      *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 24) = 2;
      char v9 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, &v9);
      os_signpost_id_t v3 = (uint64_t *)((char *)v3 + 1);
      char v8 = (void *)std::ostream::operator<<();
      char v11 = 93;
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1C8E7D24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E7D37C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8E7D708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, uint64_t *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  MEMORY[0x1CB775C40](v59, 0x10F3C4094FE2C12);
  if (a23 < 0) {
    operator delete(__p);
  }

  if (a29 < 0) {
    operator delete(a24);
  }

  if (a35 < 0) {
    operator delete(a30);
  }

  if (a41 < 0) {
    operator delete(a36);
  }

  MEMORY[0x1CB7740A0](&a42);
  if (a2 == 1)
  {
    long long v68 = __cxa_begin_catch(a1);
    uint64_t v69 = NSString;
    unsigned int v70 = [a17 loggingComponentString];
    unsigned int v77 = [a17 loggingComponentString];
    (*(void (**)(void *))(*(void *)v68 + 16))(v68);
    uint64_t v71 = [v69 stringWithFormat:@"%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"];

    if (a14)
    {
      int v72 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v73 = [a17 errorDomain];
      uint64_t v74 = *MEMORY[0x1E4F28588];
      *(void *)(v66 - 240) = *MEMORY[0x1E4F28568];
      *(void *)(v66 - 232) = v74;
      *(void *)(v66 - 224) = v71;
      *(void *)(v66 - 216) = v71;
      int v75 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v66 - 224 forKeys:v66 - 240 count:2];
      *a14 = [v72 errorWithDomain:v73 code:1 userInfo:v75];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8E7D6B0);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  uint64_t v76 = *a16;
  *a16 = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E7DC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E7E03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1C8E7E2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E7E3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::toTreeDebug(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void snlp::common::text_uso_graph::ActionListParser::textAlignment(snlp::common::text_uso_graph::ActionListParser *this, int __val, int a3)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  std::to_string(&v27, __val);
  uint64_t v5 = std::string::insert(&v27, 0, "textAlignment=");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v28, ":");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v11 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v31[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v14 = *((void *)this + 3);
  unint64_t v15 = *((void *)this + 2);
  if (v15 >= v14)
  {
    uint64_t v18 = *((void *)this + 1);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v18) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v18) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 24);
    if (v22) {
      int v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)this + 24, v22);
    }
    else {
      int v23 = 0;
    }
    unint64_t v24 = v23 + v19;
    __v.__first_ = v23;
    __v.__begin_ = v24;
    __v.__end_cap_.__value_ = &v23[v22];
    std::string::size_type v25 = v31[0];
    v24->__r_.__value_.__r.__words[0] = v12;
    v24->__r_.__value_.__l.__size_ = v25;
    *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
    *((unsigned char *)&v24->__r_.__value_.__s + 23) = v13;
    __v.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 8), &__v);
    unint64_t v17 = *((void *)this + 2);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    uint64_t v16 = v31[0];
    *(void *)unint64_t v15 = v12;
    *(void *)(v15 + 8) = v16;
    *(void *)(v15 + 15) = *(void *)((char *)v31 + 7);
    *(unsigned char *)(v15 + 23) = v13;
    unint64_t v17 = v15 + 24;
    *((void *)this + 2) = v15 + 24;
  }
  *((void *)this + 2) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E7E670(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, void *__pa, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__split_buffer<std::string> *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  if (SHIBYTE(a11) < 0) {
    operator delete(__pa);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (SHIBYTE(a20) < 0) {
    operator delete(a15);
  }
  if (SHIBYTE(a14) < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(__p);
}

void snlp::common::text_uso_graph::ActionListParser::alias(uint64_t a1)
{
  std::operator+<char>();
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= v2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v4) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - v4) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v8) {
      char v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a1 + 24, v8);
    }
    else {
      char v9 = 0;
    }
    char v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    v10->__r_.__value_.__r.__words[2] = v13;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &__v);
    uint64_t v11 = *(void *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    *(void *)(v3 + 16) = v13;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v3 + 24;
  }
}

void sub_1C8E7E848(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void snlp::common::text_uso_graph::ActionListParser::indentation(snlp::common::text_uso_graph::ActionListParser *this, unsigned int __val)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  std::to_string(&v18, __val);
  unint64_t v3 = std::string::insert(&v18, 0, "indentation=");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
  v20[0] = v3->__r_.__value_.__l.__size_;
  *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = *((void *)this + 3);
  unint64_t v7 = *((void *)this + 2);
  if (v7 >= v6)
  {
    uint64_t v10 = *((void *)this + 1);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 24);
    if (v14) {
      unint64_t v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)this + 24, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    std::string::size_type v17 = v20[0];
    v16->__r_.__value_.__r.__words[0] = v4;
    v16->__r_.__value_.__l.__size_ = v17;
    *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v20 + 7);
    *((unsigned char *)&v16->__r_.__value_.__s + 23) = v5;
    __v.__end_ = v16 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 8), &__v);
    unint64_t v9 = *((void *)this + 2);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    uint64_t v8 = v20[0];
    *(void *)unint64_t v7 = v4;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 15) = *(void *)((char *)v20 + 7);
    *(unsigned char *)(v7 + 23) = v5;
    unint64_t v9 = v7 + 24;
    *((void *)this + 2) = v7 + 24;
  }
  *((void *)this + 2) = v9;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E7EA1C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::integerValue(snlp::common::text_uso_graph::ActionListParser *this, int __val)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  std::to_string(&v18, __val);
  unint64_t v3 = std::string::insert(&v18, 0, "integerValue=");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
  v20[0] = v3->__r_.__value_.__l.__size_;
  *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = *((void *)this + 3);
  unint64_t v7 = *((void *)this + 2);
  if (v7 >= v6)
  {
    uint64_t v10 = *((void *)this + 1);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 24);
    if (v14) {
      unint64_t v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)this + 24, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    std::string::size_type v17 = v20[0];
    v16->__r_.__value_.__r.__words[0] = v4;
    v16->__r_.__value_.__l.__size_ = v17;
    *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v20 + 7);
    *((unsigned char *)&v16->__r_.__value_.__s + 23) = v5;
    __v.__end_ = v16 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 8), &__v);
    unint64_t v9 = *((void *)this + 2);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    uint64_t v8 = v20[0];
    *(void *)unint64_t v7 = v4;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 15) = *(void *)((char *)v20 + 7);
    *(unsigned char *)(v7 + 23) = v5;
    unint64_t v9 = v7 + 24;
    *((void *)this + 2) = v7 + 24;
  }
  *((void *)this + 2) = v9;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E7EC0C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::stringValue(uint64_t a1)
{
  std::operator+<char>();
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= v2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v4) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - v4) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v8) {
      unint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a1 + 24, v8);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    v10->__r_.__value_.__r.__words[2] = v13;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &__v);
    uint64_t v11 = *(void *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    *(void *)(v3 + 16) = v13;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v3 + 24;
  }
}

void sub_1C8E7ED9C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void snlp::common::text_uso_graph::ActionListParser::edge(uint64_t a1)
{
  std::operator+<char>();
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= v2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v4) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - v4) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v8) {
      unint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a1 + 24, v8);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    v10->__r_.__value_.__r.__words[2] = v13;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &__v);
    uint64_t v11 = *(void *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    *(void *)(v3 + 16) = v13;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v3 + 24;
  }
}

void sub_1C8E7EF10(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void snlp::common::text_uso_graph::ActionListParser::node(uint64_t a1)
{
  std::operator+<char>();
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= v2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v4) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - v4) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v8) {
      unint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a1 + 24, v8);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    v10->__r_.__value_.__r.__words[2] = v13;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &__v);
    uint64_t v11 = *(void *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    *(void *)(v3 + 16) = v13;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v3 + 24;
  }
}

void sub_1C8E7F084(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

std::string *snlp::common::text_uso_graph::ActionListParser::getActions@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[1], this[2], 0xAAAAAAAAAAAAAAABLL * (((char *)this[2] - (char *)this[1]) >> 3));
}

void sub_1C8E7FEAC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8E7FF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E80204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E80830(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, void *a14, uint64_t a15, uint64_t a16, uint64_t *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  MEMORY[0x1CB775C40](v70, 0x10F3C40344F1FFELL);
  if (a27 < 0) {
    operator delete(__p);
  }

  if (a33 < 0) {
    operator delete(a28);
  }

  if (a39 < 0) {
    operator delete(a34);
  }

  if (a45 < 0) {
    operator delete(a40);
  }

  MEMORY[0x1CB7740A0](&a46);
  if (a2 == 1)
  {
    int v72 = __cxa_begin_catch(a1);
    uint64_t v73 = NSString;
    uint64_t v74 = [a18 loggingComponentString];
    uint64_t v81 = [a18 loggingComponentString];
    (*(void (**)(void *))(*(void *)v72 + 16))(v72);
    int v75 = [v73 stringWithFormat:@"%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"];

    if (a14)
    {
      uint64_t v76 = (void *)MEMORY[0x1E4F28C58];
      unsigned int v77 = [a18 errorDomain];
      uint64_t v78 = *MEMORY[0x1E4F28588];
      *(void *)(v71 - 240) = *MEMORY[0x1E4F28568];
      *(void *)(v71 - 232) = v78;
      *(void *)(v71 - 224) = v75;
      *(void *)(v71 - 216) = v75;
      unsigned int v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 - 224 forKeys:v71 - 240 count:2];
      *a14 = [v76 errorWithDomain:v77 code:1 userInfo:v79];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8E807D8);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  uint64_t v80 = *a17;
  *a17 = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
  }

  _Unwind_Resume(a1);
}

void sub_1C8E81334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::PlyTreeCreator::constructTree(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  *(void *)&long long v58 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)unint64_t v19 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v18;
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  unint64_t v9 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v19;
  *(void **)(a2 + 40) = __p[0];
  HIBYTE(__p[0]) = 0;
  LOBYTE(v19[0]) = 0;
  uint64_t v10 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)&__p[1];
  *(void **)(a2 + 64) = __p[3];
  HIBYTE(__p[3]) = 0;
  LOBYTE(__p[1]) = 0;
  *(_OWORD *)(a2 + 72) = v21;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a2 + 88);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)v22;
  *(void *)(a2 + 104) = *(void *)&v22[16];
  memset(v22, 0, 24);
  long long v11 = *(_OWORD *)&v22[40];
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v22[24];
  *(_OWORD *)(a2 + 128) = v11;
  *(void *)&long long v46 = v22;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "ROOT");
  std::string::basic_string[abi:ne180100]<0>(v19, ".");
  std::string::basic_string[abi:ne180100]<0>(&__p[1], "value=");
  std::string::basic_string[abi:ne180100]<0>(&v21, "intent=");
  std::string::basic_string[abi:ne180100]<0>(&v22[8], "[next]");
  std::string::basic_string[abi:ne180100]<0>(&v22[32], "[startPayload]");
  std::string::basic_string[abi:ne180100]<0>(v23, "[leaf]");
  std::string::basic_string[abi:ne180100]<0>(v24, "[endPayload]");
  std::string::basic_string[abi:ne180100]<0>(v25, "[newGroup]");
  std::string::basic_string[abi:ne180100]<0>(&v26, "UserStatedTask");
  std::string::basic_string[abi:ne180100]<0>(v27, "task");
  std::string::basic_string[abi:ne180100]<0>(&v46, "UserStarted");
  std::string::basic_string[abi:ne180100]<0>(v47, "UserContinued");
  std::string::basic_string[abi:ne180100]<0>(v48, "UserAccepted");
  std::string::basic_string[abi:ne180100]<0>(v49, "UserRejected");
  std::string::basic_string[abi:ne180100]<0>(v50, "UserDisambiguated");
  std::string::basic_string[abi:ne180100]<0>(v51, "UserCancelled");
  std::string::basic_string[abi:ne180100]<0>(v52, "UserWantedToRepeat");
  std::string::basic_string[abi:ne180100]<0>(v53, "UserAcknowledged");
  std::string::basic_string[abi:ne180100]<0>(v54, "UserWantedToProceed");
  std::string::basic_string[abi:ne180100]<0>(v55, "UserWantedToPause");
  std::string::basic_string[abi:ne180100]<0>(v56, "UserResponded");
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v26;
  }
  std::string v28 = 0;
  std::string v29 = 0;
  uint64_t v30 = 0;
  long long v44 = &v28;
  char v45 = 0;
  std::string v28 = (std::string *)operator new(0x120uLL);
  std::string v29 = v28;
  uint64_t v30 = v28 + 12;
  uint64_t v12 = a1 + 24;
  std::string v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, &v46, &v58, v28);
  uint64_t v13 = 36;
  do
  {
    if (*((char *)&v47[v13 - 1] - 1) < 0) {
      operator delete(*(void **)&v43[v13 * 8]);
    }
    v13 -= 3;
  }
  while (v13 * 8);
  std::string::basic_string[abi:ne180100]<0>(v31, "edge=");
  int v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a2;
  uint64_t v35 = v12;
  unsigned int v36 = 0;
  char v37 = 0;
  char v38 = 0;
  __int16 v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  if (v15 != v14)
  {
    do
    {
      nlv4_inference_orchestrator::trees::PlyStateHandler::readTag((nlv4_inference_orchestrator::trees::PlyStateHandler *)&v18, v15);
      v15 += 24;
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(v32[1] - *v32) >> 4) > v36 && v15 != v14);
  }
  nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree((uint64_t)&v18);
  nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler((nlv4_inference_orchestrator::trees::PlyStateHandler *)&v18);
}

void sub_1C8E81A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler((nlv4_inference_orchestrator::trees::PlyStateHandler *)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  unint64_t v2 = (void **)*((void *)this + 46);
  unint64_t v3 = (void **)*((void *)this + 47);
  if (v3 == v2)
  {
    unint64_t v8 = (void *)((char *)this + 400);
    unint64_t v3 = (void **)*((void *)this + 46);
  }
  else
  {
    unint64_t v4 = *((void *)this + 49);
    unint64_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5;
    unint64_t v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v8 = (void *)((char *)this + 400);
    unint64_t v9 = (unint64_t)v2[(*((void *)this + 50) + v4) / 0xAA] + 24 * ((*((void *)this + 50) + v4) % 0xAA);
    if (v7 != v9)
    {
      do
      {
        if (*(char *)(v7 + 23) < 0)
        {
          operator delete(*(void **)v7);
          unint64_t v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          unint64_t v10 = (unint64_t)v5[1];
          ++v5;
          unint64_t v6 = v10;
          unint64_t v7 = v10;
        }
      }
      while (v7 != v9);
      unint64_t v2 = (void **)*((void *)this + 46);
      unint64_t v3 = (void **)*((void *)this + 47);
    }
  }
  void *v8 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)*((void *)this + 47);
      unint64_t v2 = (void **)(*((void *)this + 46) + 8);
      *((void *)this + 46) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_16:
    *((void *)this + 49) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *((void *)this + 46);
    uint64_t v15 = *((void *)this + 47);
    if (v15 != v16) {
      *((void *)this + 47) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  std::string::size_type v17 = (void *)*((void *)this + 45);
  if (v17) {
    operator delete(v17);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  std::string v18 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t snlp::ssu::utilities::SSUErrorStatus::isError(snlp::ssu::utilities::SSUErrorStatus *this)
{
  return *((unsigned __int8 *)this + 24);
}

void snlp::ssu::utilities::SSUErrorStatus::noError(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

__n128 snlp::ssu::utilities::SSUErrorStatus::withError@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[1].n128_u8[8] = 1;
  return result;
}

BOOL snlp::ssu::utilities::validateLocaleMatch(char *cStr, const char *a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = cStr;
  values[3] = *(void **)MEMORY[0x1E4F143B8];
  int v4 = cStr[23];
  size_t v5 = *((void *)cStr + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = cStr[23];
  }
  else {
    uint64_t v6 = *((void *)cStr + 1);
  }
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v6 == v7)
  {
    if (v8 < 0) {
      a2 = *(const char **)a2;
    }
    if ((v4 & 0x80) != 0)
    {
      unint64_t v3 = *(char **)cStr;
      if (memcmp(*(const void **)cStr, a2, v5)) {
        goto LABEL_20;
      }
    }
    else if (cStr[23])
    {
      unint64_t v9 = cStr;
      uint64_t v10 = cStr[23];
      while (*v9 == *a2)
      {
        ++v9;
        ++a2;
        if (!--v10) {
          return 1;
        }
      }
      goto LABEL_15;
    }
    return 1;
  }
LABEL_15:
  if ((v4 & 0x80) == 0)
  {
    if (v4 != 3) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  unint64_t v3 = *(char **)cStr;
LABEL_20:
  if (v5 != 3)
  {
LABEL_25:
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 0x8000100u);
    if (v2[23] >= 0) {
      uint64_t v14 = v2;
    }
    else {
      uint64_t v14 = *(const char **)v2;
    }
    CFTypeRef cf = CFStringCreateWithCString(v12, v14, 0x8000100u);
    values[0] = @"zxx";
    values[1] = (void *)v13;
    CFArrayRef v15 = CFArrayCreate(v12, (const void **)values, 2, MEMORY[0x1E4F1D510]);
    CFArrayRef v16 = CFArrayCreate(v12, &cf, 1, MEMORY[0x1E4F1D510]);
    CFArrayRef v17 = CFBundleCopyLocalizationsForPreferences(v15, v16);
    if (CFArrayGetCount(v17) < 1)
    {
      BOOL v19 = 0;
    }
    else
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, 0);
      BOOL v19 = CFEqual(ValueAtIndex, v13);
    }
    CFRelease(v17);
    CFRelease(v16);
    CFRelease(v15);
    CFRelease(cf);
    CFRelease(v13);
    return v19;
  }
LABEL_21:
  if (*(_WORD *)v3 != 30842 || v3[2] != 120) {
    goto LABEL_25;
  }
  long long v21 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(values[0]) = 0;
    _os_log_impl(&dword_1C8DA9000, v21, OS_LOG_TYPE_ERROR, "The lproj locale indicates no linguistic content (zxx); forcing no match.",
      (uint8_t *)values,
      2u);
  }
  return 0;
}

void snlp::ssu::utilities::validateTensorRank(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v4 == a1)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v22, " because: actualRank (");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v21, v4);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = &v21;
    }
    else {
      int v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = std::string::append(&v23, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    CFAllocatorRef v12 = std::string::append(&v24, ") != expectedRank (");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v20, a1);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v20;
    }
    else {
      uint64_t v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v20.__r_.__value_.__l.__size_;
    }
    CFArrayRef v16 = std::string::append(&v25, (const std::string::value_type *)v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string v18 = std::string::append(&v26, ")");
    std::string::size_type v19 = v18->__r_.__value_.__l.__size_;
    *(void *)a3 = v18->__r_.__value_.__r.__words[0];
    *(void *)(a3 + 8) = v19;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v19) = *((unsigned char *)&v18->__r_.__value_.__s + 23);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *(unsigned char *)(a3 + 23) = v19;
    *(unsigned char *)(a3 + 24) = 1;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8E82594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::utilities::validateTensor(char **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v8 = (v6 - *a1) >> 3;
  snlp::ssu::utilities::validateTensorRank(v8, a2, a3);
  if (!*(unsigned char *)(a3 + 24))
  {
    unint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v6 == v7)
    {
LABEL_12:
      unsigned int v15 = 1;
      while (v9 != v10)
      {
        int v16 = *(_DWORD *)v9;
        v9 += 8;
        v15 *= v16;
      }
      unint64_t v17 = (uint64_t)(a2[4] - a2[3]) >> 2;
      if (v17 == v15)
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
      }
      else
      {
        std::operator+<char>();
        std::string v18 = std::string::append(&v66, " because: actualDataSize (");
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v65, v17);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v20 = &v65;
        }
        else {
          std::string v20 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v65.__r_.__value_.__l.__size_;
        }
        std::string v22 = std::string::append(&v67, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::string v24 = std::string::append(&v68, ") != expectedDataSize (");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v64, v15);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v26 = &v64;
        }
        else {
          std::string v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v64.__r_.__value_.__l.__size_;
        }
LABEL_41:
        unsigned int v36 = std::string::append(&v69, (const std::string::value_type *)v26, v27);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        char v38 = std::string::append(&v70, ")");
        std::string::size_type v39 = v38->__r_.__value_.__l.__size_;
        *(void *)a3 = v38->__r_.__value_.__r.__words[0];
        *(void *)(a3 + 8) = v39;
        *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
        LOBYTE(v39) = *((unsigned char *)&v38->__r_.__value_.__s + 23);
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        *(unsigned char *)(a3 + 23) = v39;
        *(unsigned char *)(a3 + 24) = 1;
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v40 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_93:
          operator delete(v40);
        }
      }
    }
    else
    {
      unint64_t v11 = 0;
      if (v8 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v8;
      }
      while (1)
      {
        if ((uint64_t)(a2[1] - *a2) >> 3 == v11 || (v10 - v9) >> 3 == v11) {
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v13 = *(void *)(*a2 + 8 * v11);
        unint64_t v14 = *(void *)&v9[8 * v11];
        if (!v13)
        {
          std::operator+<char>();
          std::string v28 = std::string::append(&v66, " because: dimension at index ");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v67.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v65, v11);
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = &v65;
          }
          else {
            uint64_t v30 = (std::string *)v65.__r_.__value_.__r.__words[0];
          }
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v31 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v31 = v65.__r_.__value_.__l.__size_;
          }
          int v32 = std::string::append(&v67, (const std::string::value_type *)v30, v31);
          long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v68.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          uint64_t v34 = std::string::append(&v68, " is zero (expected=");
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v69.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v64, v14);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v26 = &v64;
          }
          else {
            std::string v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v64.__r_.__value_.__l.__size_;
          }
          goto LABEL_41;
        }
        if (v13 != v14) {
          break;
        }
        if (v12 == ++v11) {
          goto LABEL_12;
        }
      }
      std::operator+<char>();
      long long v41 = std::string::append(&v64, " because: dimension at index ");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v63, v11);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v43 = &v63;
      }
      else {
        std::string v43 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v63.__r_.__value_.__l.__size_;
      }
      char v45 = std::string::append(&v65, (const std::string::value_type *)v43, v44);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      uint64_t v47 = std::string::append(&v66, " (");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v62, v13);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v49 = &v62;
      }
      else {
        long long v49 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v62.__r_.__value_.__l.__size_;
      }
      char v51 = std::string::append(&v67, (const std::string::value_type *)v49, v50);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      uint64_t v53 = std::string::append(&v68, ") != expectedDimension (");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = __p.__r_.__value_.__l.__size_;
      }
      std::string v57 = std::string::append(&v69, (const std::string::value_type *)p_p, v56);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      uint64_t v59 = std::string::append(&v70, ")");
      std::string::size_type v60 = v59->__r_.__value_.__l.__size_;
      *(void *)a3 = v59->__r_.__value_.__r.__words[0];
      *(void *)(a3 + 8) = v60;
      *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
      LOBYTE(v60) = *((unsigned char *)&v59->__r_.__value_.__s + 23);
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      *(unsigned char *)(a3 + 23) = v60;
      *(unsigned char *)(a3 + 24) = 1;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v40 = (void *)v64.__r_.__value_.__r.__words[0];
        goto LABEL_93;
      }
    }
  }
}

void sub_1C8E82C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 73) < 0) {
    operator delete(*(void **)(v52 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 105) < 0) {
    operator delete(*(void **)(v52 - 128));
  }
  if (*(char *)(v52 - 137) < 0) {
    operator delete(*(void **)(v52 - 160));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::ReplaceFromPersonRecipientHack(uint64_t a1, _OWORD **a2, const sirinluinternal::MatchingSpan **a3, long long *a4)
{
  unint64_t v8 = std::string::basic_string[abi:ne180100]<0>((void *)a1, "TreeManipulation_ReplaceFromPersonRecipient");
  void v8[3] = 0;
  void v8[4] = 0;
  long long v8[5] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v8 + 3, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 104) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 88) = v9;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 112), "common_Message");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "common_Person");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "common_PersonRelationship");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 184), "fromPerson");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 208), "identifyingRelationship");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 232), "name");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 256), "personFullName");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 280), "recipients");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 304), "relationshipType");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 328), "ROOT");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 352), "target");
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::mapPersonFullNameMatchingSpans(a1, a3);
  return a1;
}

void sub_1C8E83744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table(v9);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  _Unwind_Resume(a1);
}

void sub_1C8E8388C()
{
}

void sub_1C8E83894()
{
}

void sub_1C8E8389C()
{
}

void sub_1C8E838A4()
{
}

void sub_1C8E838AC()
{
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::mapPersonFullNameMatchingSpans(uint64_t a1, const sirinluinternal::MatchingSpan **a2)
{
  memset(v16, 0, sizeof(v16));
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    size_t v5 = (const void **)(a1 + 256);
    while (1)
    {
      uint64_t v6 = *((void *)v2 + 6);
      if (!v6) {
        goto LABEL_22;
      }
      uint64_t v7 = *(unsigned __int8 *)(a1 + 279);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = *(unsigned __int8 *)(a1 + 279);
      }
      else {
        uint64_t v8 = *(void *)(a1 + 264);
      }
      uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(v6 + 8);
      }
      if (v8 != v9) {
        goto LABEL_22;
      }
      unint64_t v11 = v10 >= 0 ? (unsigned __int8 *)*((void *)v2 + 6) : *(unsigned __int8 **)v6;
      if ((v7 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v5, v11, *(void *)(a1 + 264))) {
        goto LABEL_20;
      }
LABEL_22:
      unint64_t v2 = (const sirinluinternal::MatchingSpan *)((char *)v2 + 88);
      if (v2 == v3) {
        goto LABEL_23;
      }
    }
    if (*(unsigned char *)(a1 + 279))
    {
      uint64_t v12 = v5;
      while (*(unsigned __int8 *)v12 == *v11)
      {
        uint64_t v12 = (const void **)((char *)v12 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_20;
        }
      }
      goto LABEL_22;
    }
LABEL_20:
    Utf16IndicesFromMatchingSpauint64_t n = nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getUtf16IndicesFromMatchingSpan(a1, (uint64_t)v2);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getFullNameFromMatchingSpan((uint64_t *)__p, (nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *)a1, v2);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::addPersonFullNameSpanToMap(a1, (uint64_t)__p, Utf16IndicesFromMatchingSpan);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_22;
  }
LABEL_23:
  __p[0] = v16;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C8E839E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getUtf16IndicesFromMatchingSpan(uint64_t a1, uint64_t a2)
{
  if ((~*(unsigned __int8 *)(a2 + 80) & 3) != 0
    || (v3 = *(unsigned int *)(a2 + 72), unsigned int v2 = *(_DWORD *)(a2 + 76), v2 > v3)
    || (uint64_t v4 = *(void *)(a1 + 24), 0x8E38E38E38E38E39 * ((*(void *)(a1 + 32) - v4) >> 4) < v3))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(v4 + 144 * v2 + 112);
    uint64_t v6 = *(void *)(v4 + 144 * (v3 - 1) + 120) << 32;
  }
  return v6 | v5;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getFullNameFromMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, const sirinluinternal::MatchingSpan *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  unsigned int v4 = *((_DWORD *)a2 + 18);
  unint64_t v5 = *((unsigned int *)a2 + 19);
  if (v5 < v4)
  {
    uint64_t v6 = 144 * v5 + 64;
    do
    {
      uint64_t v7 = *((void *)this + 3);
      if (0x8E38E38E38E38E39 * ((*((void *)this + 4) - v7) >> 4) <= v5) {
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v8 = *(void *)(v7 + v6);
      if (v8)
      {
        int v9 = *(char *)(v8 + 23);
        uint64_t v10 = v9 >= 0 ? v8 : *(void *)v8;
        uint64_t v11 = v9 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v10, v11);
        unsigned int v4 = *((_DWORD *)a2 + 18);
        if (v5 < v4 - 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
          unsigned int v4 = *((_DWORD *)a2 + 18);
        }
      }
      ++v5;
      v6 += 144;
    }
    while (v5 < v4);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v17);
}

void sub_1C8E83D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::addPersonFullNameSpanToMap(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = HIDWORD(a3);
  int v39 = HIDWORD(a3);
  unint64_t v6 = (unint64_t)&v40;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    LODWORD(v5) = v39;
  }
  else
  {
    std::string v40 = *(std::string *)a2;
  }
  unsigned int v43 = v5;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v40;
  }
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>((uint64_t)v37, v43, (uint64_t)&v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v43 = v3;
  std::unordered_map<unsigned int,std::string>::unordered_map((uint64_t)&__p, (uint64_t)v37);
  unint64_t v7 = v43;
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v6 = v43;
      if (v8 <= v43) {
        unint64_t v6 = v43 % v8;
      }
    }
    else
    {
      unint64_t v6 = (v8 - 1) & v43;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)(a1 + 48) + 8 * v6);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v43)
        {
          if (*((_DWORD *)i + 4) == v43) {
            goto LABEL_82;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v6) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = operator new(0x40uLL);
  unint64_t v14 = (void *)(a1 + 64);
  v41[0] = v13;
  v41[1] = a1 + 64;
  char v42 = 0;
  void *v13 = 0;
  v13[1] = v7;
  *((_DWORD *)v13 + 4) = v7;
  std::unordered_map<unsigned int,std::string>::unordered_map((uint64_t)(v13 + 3), (uint64_t)&__p);
  char v42 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v16 = *(float *)(a1 + 80);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *(void *)(a1 + 56);
    if (*(void *)&prime > v8) {
      goto LABEL_38;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v21 = operator new(8 * *(void *)&prime);
          std::string v22 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(void *)(*(void *)(a1 + 48) + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          std::string v24 = (void *)*v14;
          if (*v14)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 48) + 8 * v25) = v14;
            uint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  uint64_t v32 = *(void *)(a1 + 48);
                  if (!*(void *)(v32 + 8 * v31))
                  {
                    *(void *)(v32 + 8 * v31) = v24;
                    goto LABEL_63;
                  }
                  *std::string v24 = *v30;
                  *uint64_t v30 = **(void **)(*(void *)(a1 + 48) + 8 * v31);
                  **(void **)(*(void *)(a1 + 48) + 8 * v31) = v30;
                  uint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_63:
                std::string v24 = v30;
                uint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_67;
        }
        unsigned int v36 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
LABEL_67:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v6 = v7 % v8;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    else
    {
      unint64_t v6 = (v8 - 1) & v7;
    }
  }
  long long v33 = *(void **)(*(void *)(a1 + 48) + 8 * v6);
  uint64_t v34 = v41[0];
  if (v33)
  {
    *(void *)v41[0] = *v33;
LABEL_80:
    *long long v33 = v34;
    goto LABEL_81;
  }
  *(void *)v41[0] = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v34;
  *(void *)(*(void *)(a1 + 48) + 8 * v6) = v14;
  if (*(void *)v34)
  {
    unint64_t v35 = *(void *)(*(void *)v34 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    long long v33 = (void *)(*(void *)(a1 + 48) + 8 * v35);
    goto LABEL_80;
  }
LABEL_81:
  v41[0] = 0;
  ++*(void *)(a1 + 72);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
LABEL_82:
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)v37);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E84238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E84290(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C8E84278);
}

uint64_t std::unordered_map<unsigned int,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(a1, *((_DWORD *)i + 4), (uint64_t)(i + 2));
  return a1;
}

void sub_1C8E84310(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (std::string *)operator new(0x30uLL);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = v6;
  LODWORD(v12->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  unint64_t v13 = v12 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v12[1].__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
  }
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string v21 = *(std::string ***)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)*v21;
LABEL_41:
    *std::string v21 = v12;
    goto LABEL_42;
  }
  v12->__r_.__value_.__r.__words[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (v12->__r_.__value_.__r.__words[0])
  {
    unint64_t v22 = *(void *)(v12->__r_.__value_.__r.__words[0] + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    std::string v21 = (std::string **)(*(void *)a1 + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_1C8E845A8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInTree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 351);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 351);
  }
  else {
    uint64_t v3 = *((void *)this + 42);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = a2;
  uint8x8_t v8 = (const void **)((char *)this + 328);
  if (v5 < 0) {
    a2 = *(nlv4_inference_orchestrator::trees::TreeNode **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, a2, *((void *)this + 42))) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 351))
  {
    while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)a2)
    {
      uint8x8_t v8 = (const void **)((char *)v8 + 1);
      a2 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)a2 + 1);
      if (!--v2) {
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  uint64_t v9 = *((void *)v6 + 11);
  uint64_t v10 = *((void *)v6 + 12);
  if (v9 == v10) {
    return 0;
  }
  while (2)
  {
    unint64_t v11 = *(nlv4_inference_orchestrator::trees::TreeNode **)(v9 + 88);
    unint64_t v12 = *(nlv4_inference_orchestrator::trees::TreeNode **)(v9 + 96);
    while (v11 != v12)
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInVerbSubtree(this, v11))return 1; {
      unint64_t v11 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v11 + 144);
      }
    }
    uint64_t result = 0;
    v9 += 144;
    if (v9 != v10) {
      continue;
    }
    break;
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInVerbSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)a2 + 11);
  uint64_t v3 = (unsigned __int8 *)*((void *)a2 + 12);
  if (v2 != v3)
  {
    int v5 = (const void **)((char *)this + 352);
    unint64_t v6 = (const void **)((char *)this + 112);
    unint64_t v7 = (const void **)((char *)this + 280);
    uint8x8_t v8 = (const void **)((char *)this + 136);
    while (1)
    {
      uint64_t v9 = *((unsigned __int8 *)this + 375);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = *((unsigned __int8 *)this + 375);
      }
      else {
        uint64_t v10 = *((void *)this + 45);
      }
      uint64_t v11 = v2[71];
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *((void *)v2 + 7);
      }
      if (v10 != v11) {
        goto LABEL_35;
      }
      unint64_t v13 = v12 >= 0 ? v2 + 48 : (unsigned __int8 *)*((void *)v2 + 6);
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*v5, v13, *((void *)this + 45))) {
          goto LABEL_35;
        }
      }
      else if (*((unsigned char *)this + 375))
      {
        float v14 = v5;
        while (*(unsigned __int8 *)v14 == *v13)
        {
          float v14 = (const void **)((char *)v14 + 1);
          ++v13;
          if (!--v9) {
            goto LABEL_19;
          }
        }
        goto LABEL_35;
      }
LABEL_19:
      uint64_t v15 = *((unsigned __int8 *)this + 135);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = *((unsigned __int8 *)this + 135);
      }
      else {
        uint64_t v16 = *((void *)this + 15);
      }
      uint64_t v17 = v2[23];
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *((void *)v2 + 1);
      }
      if (v16 == v17)
      {
        if (v18 >= 0) {
          size_t v19 = v2;
        }
        else {
          size_t v19 = *(unsigned __int8 **)v2;
        }
        if ((v15 & 0x80) == 0)
        {
          if (!*((unsigned char *)this + 135)) {
            break;
          }
          uint64_t v20 = v6;
          while (*(unsigned __int8 *)v20 == *v19)
          {
            uint64_t v20 = (const void **)((char *)v20 + 1);
            ++v19;
            if (!--v15) {
              goto LABEL_37;
            }
          }
          goto LABEL_35;
        }
        if (!memcmp(*v6, v19, *((void *)this + 15))) {
          break;
        }
      }
LABEL_35:
      v2 += 144;
      if (v2 == v3) {
        return 0;
      }
    }
LABEL_37:
    std::string v21 = (unsigned __int8 *)*((void *)v2 + 11);
    unint64_t v22 = (unsigned __int8 *)*((void *)v2 + 12);
    while (1)
    {
      if (v21 == v22) {
        goto LABEL_35;
      }
      uint64_t v23 = *((unsigned __int8 *)this + 303);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = *((unsigned __int8 *)this + 303);
      }
      else {
        uint64_t v24 = *((void *)this + 36);
      }
      uint64_t v25 = v21[71];
      int v26 = (char)v25;
      if ((v25 & 0x80u) != 0) {
        uint64_t v25 = *((void *)v21 + 7);
      }
      if (v24 == v25)
      {
        if (v26 >= 0) {
          unint64_t v27 = v21 + 48;
        }
        else {
          unint64_t v27 = (unsigned __int8 *)*((void *)v21 + 6);
        }
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v7, v27, *((void *)this + 36))) {
            goto LABEL_72;
          }
        }
        else if (*((unsigned char *)this + 303))
        {
          uint8x8_t v28 = v7;
          while (*(unsigned __int8 *)v28 == *v27)
          {
            uint8x8_t v28 = (const void **)((char *)v28 + 1);
            ++v27;
            if (!--v23) {
              goto LABEL_55;
            }
          }
          goto LABEL_72;
        }
LABEL_55:
        uint64_t v29 = *((unsigned __int8 *)this + 159);
        if ((v29 & 0x80u) == 0) {
          uint64_t v30 = *((unsigned __int8 *)this + 159);
        }
        else {
          uint64_t v30 = *((void *)this + 18);
        }
        uint64_t v31 = v21[23];
        int v32 = (char)v31;
        if ((v31 & 0x80u) != 0) {
          uint64_t v31 = *((void *)v21 + 1);
        }
        if (v30 != v31) {
          goto LABEL_72;
        }
        if (v32 >= 0) {
          long long v33 = v21;
        }
        else {
          long long v33 = *(unsigned __int8 **)v21;
        }
        if ((v29 & 0x80) != 0)
        {
          if (memcmp(*v8, v33, *((void *)this + 18))) {
            goto LABEL_72;
          }
        }
        else if (*((unsigned char *)this + 159))
        {
          uint64_t v34 = v8;
          while (*(unsigned __int8 *)v34 == *v33)
          {
            uint64_t v34 = (const void **)((char *)v34 + 1);
            ++v33;
            if (!--v29) {
              goto LABEL_71;
            }
          }
          goto LABEL_72;
        }
LABEL_71:
        if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInRecipientSubtree(this, (nlv4_inference_orchestrator::trees::TreeNode *)v21))return 1; {
      }
        }
LABEL_72:
      v21 += 144;
    }
  }
  return 0;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInRecipientSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 303);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 303);
  }
  else {
    uint64_t v3 = *((void *)this + 36);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 71);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 7);
  }
  if (v3 != v4) {
    return 0;
  }
  uint8x8_t v8 = (const void **)((char *)this + 280);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)a2 + 48;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 6);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((void *)this + 36))) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 303))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint8x8_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *((void *)a2 + 11);
  uint64_t v11 = *((void *)a2 + 12);
  if (v10 == v11) {
    return 0;
  }
  while (1)
  {
    uint64_t v12 = *((unsigned __int8 *)this + 231);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *((unsigned __int8 *)this + 231);
    }
    else {
      uint64_t v13 = *((void *)this + 27);
    }
    uint64_t v14 = *(unsigned __int8 *)(v10 + 71);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v10 + 56);
    }
    if (v13 == v14)
    {
      uint64_t v16 = v15 >= 0 ? (unsigned __int8 *)(v10 + 48) : *(unsigned __int8 **)(v10 + 48);
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*((const void **)this + 26), v16, *((void *)this + 27))) {
          goto LABEL_109;
        }
      }
      else if (*((unsigned char *)this + 231))
      {
        uint64_t v17 = (unsigned __int8 *)this + 208;
        do
        {
          if (*v17 != *v16) {
            goto LABEL_109;
          }
          ++v17;
          ++v16;
          --v12;
        }
        while (v12);
      }
      uint64_t v18 = *((unsigned __int8 *)this + 183);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = *((unsigned __int8 *)this + 183);
      }
      else {
        uint64_t v19 = *((void *)this + 21);
      }
      uint64_t v20 = *(unsigned __int8 *)(v10 + 23);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(v10 + 8);
      }
      if (v19 == v20)
      {
        unint64_t v22 = v21 >= 0 ? (unsigned __int8 *)v10 : *(unsigned __int8 **)v10;
        if ((v18 & 0x80) != 0)
        {
          if (memcmp(*((const void **)this + 20), v22, *((void *)this + 21))) {
            goto LABEL_109;
          }
        }
        else if (*((unsigned char *)this + 183))
        {
          uint64_t v23 = (unsigned __int8 *)this + 160;
          do
          {
            if (*v23 != *v22) {
              goto LABEL_109;
            }
            ++v23;
            ++v22;
            --v18;
          }
          while (v18);
        }
        uint64_t v24 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 88);
        if (*(void *)(v10 + 96) - (void)v24 == 144) {
          break;
        }
      }
    }
LABEL_109:
    v10 += 144;
    if (v10 == v11) {
      return 0;
    }
  }
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v54, v24);
  uint64_t v25 = *((unsigned __int8 *)this + 207);
  if ((v25 & 0x80u) == 0) {
    int v26 = (void *)*((unsigned __int8 *)this + 207);
  }
  else {
    int v26 = (void *)*((void *)this + 24);
  }
  unint64_t v27 = v58;
  if ((v58 & 0x80u) != 0) {
    unint64_t v27 = (unint64_t)__p[1];
  }
  if (v26 != (void *)v27)
  {
LABEL_101:
    int v48 = 1;
    goto LABEL_102;
  }
  if ((v58 & 0x80u) == 0) {
    uint8x8_t v28 = __p;
  }
  else {
    uint8x8_t v28 = (void **)__p[0];
  }
  if ((v25 & 0x80) != 0)
  {
    if (memcmp(*((const void **)this + 23), v28, *((void *)this + 24))) {
      goto LABEL_101;
    }
  }
  else if (*((unsigned char *)this + 207))
  {
    uint64_t v29 = (unsigned __int8 *)this + 184;
    while (*v29 == *(unsigned __int8 *)v28)
    {
      ++v29;
      uint8x8_t v28 = (void **)((char *)v28 + 1);
      if (!--v25) {
        goto LABEL_66;
      }
    }
    goto LABEL_101;
  }
LABEL_66:
  uint64_t v30 = *((unsigned __int8 *)this + 159);
  if ((v30 & 0x80u) == 0) {
    uint64_t v31 = *((unsigned __int8 *)this + 159);
  }
  else {
    uint64_t v31 = *((void *)this + 18);
  }
  std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (v31 != size) {
    goto LABEL_101;
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v33 = &v54;
  }
  else {
    long long v33 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(*((const void **)this + 17), v33, *((void *)this + 18))) {
      goto LABEL_101;
    }
  }
  else if (*((unsigned char *)this + 159))
  {
    uint64_t v34 = (unsigned __int8 *)this + 136;
    while (*v34 == v33->__r_.__value_.__s.__data_[0])
    {
      ++v34;
      long long v33 = (std::string *)((char *)v33 + 1);
      if (!--v30) {
        goto LABEL_82;
      }
    }
    goto LABEL_101;
  }
LABEL_82:
  uint64_t v35 = *(void *)(v10 + 88);
  long long v37 = *(int64x2_t **)(v35 + 88);
  unsigned int v36 = *(int64x2_t **)(v35 + 96);
  if (v37 == v36) {
    goto LABEL_101;
  }
  uint64_t v38 = *((unsigned __int8 *)this + 255);
  size_t v39 = *((void *)this + 30);
  if ((v38 & 0x80u) == 0) {
    uint64_t v40 = *((unsigned __int8 *)this + 255);
  }
  else {
    uint64_t v40 = *((void *)this + 30);
  }
  while (1)
  {
    uint64_t v41 = v37[4].u8[7];
    int v42 = (char)v41;
    if ((v41 & 0x80u) != 0) {
      uint64_t v41 = v37[3].i64[1];
    }
    if (v40 != v41) {
      goto LABEL_99;
    }
    unsigned int v43 = v42 >= 0 ? &v37[3] : (int64x2_t *)v37[3].i64[0];
    if ((v38 & 0x80) != 0) {
      break;
    }
    if (!v38) {
      goto LABEL_111;
    }
    std::string::size_type v44 = (unsigned __int8 *)this + 232;
    uint64_t v45 = v38;
    while (*v44 == v43->u8[0])
    {
      ++v44;
      unsigned int v43 = (int64x2_t *)((char *)v43 + 1);
      if (!--v45) {
        goto LABEL_111;
      }
    }
LABEL_99:
    v37 += 9;
    int v48 = 1;
    if (v37 == v36) {
      goto LABEL_102;
    }
  }
  size_t v46 = v39;
  std::string::size_type v50 = v36;
  int v47 = memcmp(*((const void **)this + 29), v43, v39);
  unsigned int v36 = v50;
  size_t v39 = v46;
  if (v47) {
    goto LABEL_99;
  }
LABEL_111:
  uint64_t v53 = (uint64_t)vmovn_s64(v37[7]);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::findMatchingFullPersonNameMatchingSpan((uint64_t)this, v53, &v51);
  if (v52) {
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName((uint64_t)this, (uint64_t)a2, (uint64_t)&v51, (unint64_t *)&v53);
  }
  else {
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithRelationshipType((uint64_t)this, (uint64_t)a2, (uint64_t)&v37[1].i64[1], (unint64_t *)&v53);
  }
  if (v52 && SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  int v48 = 0;
LABEL_102:
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if ((char)v58 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v48) {
    goto LABEL_109;
  }
  return 1;
}

void sub_1C8E84E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a23);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::findMatchingFullPersonNameMatchingSpan(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned int v3 = HIDWORD(a2);
  int v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>((void *)(a1 + 48), a2);
  if (v5
    && (unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>(v5 + 3, v3)) != 0)
  {
    if (*((char *)v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v6[3], v6[4]);
    }
    else
    {
      long long v7 = *(_OWORD *)(v6 + 3);
      a3->__r_.__value_.__r.__words[2] = v6[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v8;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 303);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 303);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 288);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 71);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 56);
  }
  if (v6 != v7) {
    return;
  }
  uint64_t v12 = (const void **)(a1 + 280);
  if (v8 >= 0) {
    uint64_t v13 = (unsigned __int8 *)(a2 + 48);
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)(a2 + 48);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(void *)(a1 + 288))) {
      return;
    }
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a1 + 303))
  {
LABEL_16:
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createNameNode(a1, a3, *a4, &v33);
    uint64_t v15 = *(void *)(a2 + 88);
    uint64_t v16 = *(void *)(a2 + 96);
    uint64_t v14 = (void *)(a2 + 88);
    if (v15 != v16)
    {
      while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(a1, v15))
      {
        v15 += 144;
        if (v15 == v16)
        {
          uint64_t v15 = v16;
          goto LABEL_32;
        }
      }
      if (v15 != v16)
      {
        for (uint64_t i = v15 + 144; i != v16; i += 144)
        {
          if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(a1, i))
          {
            if (*(char *)(v15 + 23) < 0) {
              operator delete(*(void **)v15);
            }
            long long v18 = *(_OWORD *)i;
            *(void *)(v15 + 16) = *(void *)(i + 16);
            *(_OWORD *)uint64_t v15 = v18;
            *(unsigned char *)(i + 23) = 0;
            *(unsigned char *)uint64_t i = 0;
            uint64_t v19 = (void **)(v15 + 24);
            if (*(char *)(v15 + 47) < 0) {
              operator delete(*v19);
            }
            long long v20 = *(_OWORD *)(i + 24);
            *(void *)(v15 + 40) = *(void *)(i + 40);
            *(_OWORD *)uint64_t v19 = v20;
            *(unsigned char *)(i + 47) = 0;
            *(unsigned char *)(i + 24) = 0;
            int v21 = (void **)(v15 + 48);
            if (*(char *)(v15 + 71) < 0) {
              operator delete(*v21);
            }
            long long v22 = *(_OWORD *)(i + 48);
            *(void *)(v15 + 64) = *(void *)(i + 64);
            *(_OWORD *)int v21 = v22;
            *(unsigned char *)(i + 71) = 0;
            *(unsigned char *)(i + 48) = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(i + 72);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v15 + 88);
            *(_OWORD *)(v15 + 88) = *(_OWORD *)(i + 88);
            *(void *)(v15 + 104) = *(void *)(i + 104);
            *(void *)(i + 88) = 0;
            *(void *)(i + 96) = 0;
            *(void *)(i + 104) = 0;
            long long v23 = *(_OWORD *)(i + 128);
            *(_OWORD *)(v15 + 112) = *(_OWORD *)(i + 112);
            *(_OWORD *)(v15 + 128) = v23;
            v15 += 144;
          }
        }
      }
    }
LABEL_32:
    uint64_t v24 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((long long *)(v15 + 144), *(long long **)(a2 + 96), v15);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a2 + 88, v24);
    unint64_t v25 = *(void *)(a2 + 96);
    unint64_t v26 = *(void *)(a2 + 104);
    if (v25 >= v26)
    {
      unint64_t v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - *v14) >> 4);
      if (v28 + 1 > 0x1C71C71C71C71C7) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - *v14) >> 4);
      uint64_t v30 = 2 * v29;
      if (2 * v29 <= v28 + 1) {
        uint64_t v30 = v28 + 1;
      }
      if (v29 >= 0xE38E38E38E38E3) {
        unint64_t v31 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v31 = v30;
      }
      uint64_t v43 = a2 + 104;
      if (v31) {
        unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v31);
      }
      else {
        uint64_t v32 = 0;
      }
      size_t v39 = (void **)v31;
      uint64_t v40 = (std::string *)(v31 + 144 * v28);
      uint64_t v41 = v40;
      unint64_t v42 = v31 + 144 * v32;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v40, (const nlv4_inference_orchestrator::trees::TreeNode *)&v33);
      v41 += 6;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(a2 + 88), &v39);
      unint64_t v27 = *(void *)(a2 + 96);
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)(a2 + 96), (const nlv4_inference_orchestrator::trees::TreeNode *)&v33);
      unint64_t v27 = v25 + 144;
      *(void *)(a2 + 96) = v25 + 144;
    }
    *(void *)(a2 + 96) = v27;
    size_t v39 = (void **)&v38;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v39);
    if (v37 < 0) {
      operator delete(__p);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    return;
  }
  while (*(unsigned __int8 *)v12 == *v13)
  {
    uint64_t v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v5) {
      goto LABEL_16;
    }
  }
}

void sub_1C8E85278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v2 - 104);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithRelationshipType(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 303);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 303);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 288);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 71);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 56);
  }
  if (v6 != v7) {
    return;
  }
  uint64_t v12 = (const void **)(a1 + 280);
  if (v8 >= 0) {
    uint64_t v13 = (unsigned __int8 *)(a2 + 48);
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)(a2 + 48);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(void *)(a1 + 288))) {
      return;
    }
LABEL_16:
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createRelationshipTypeNode(a1, a3, *a4, &v60);
    uint64_t v15 = *(void *)(a2 + 88);
    uint64_t v14 = *(void *)(a2 + 96);
    if (v15 == v14)
    {
LABEL_98:
      std::string v66 = (void **)&v65;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v64 < 0) {
        operator delete(__p);
      }
      if (v62 < 0) {
        operator delete(v61);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v16 = *(unsigned __int8 *)(a1 + 231);
    size_t v17 = *(void *)(a1 + 216);
    if ((v16 & 0x80u) == 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 231);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 216);
    }
    while (1)
    {
      uint64_t v19 = *(unsigned __int8 *)(v15 + 71);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(v15 + 56);
      }
      if (v18 == v19)
      {
        if (v20 >= 0) {
          int v21 = (unsigned __int8 *)(v15 + 48);
        }
        else {
          int v21 = *(unsigned __int8 **)(v15 + 48);
        }
        if ((v16 & 0x80) == 0)
        {
          if (!v16) {
            break;
          }
          long long v22 = (unsigned __int8 *)(a1 + 208);
          uint64_t v23 = v16;
          while (*v22 == *v21)
          {
            ++v22;
            ++v21;
            if (!--v23) {
              goto LABEL_35;
            }
          }
          goto LABEL_33;
        }
        if (!memcmp(*(const void **)(a1 + 208), v21, v17)) {
          break;
        }
      }
LABEL_33:
      v15 += 144;
      if (v15 == v14) {
        goto LABEL_98;
      }
    }
LABEL_35:
    uint64_t v26 = *(void *)(v15 + 88);
    unint64_t v25 = *(long long **)(v15 + 96);
    uint64_t v24 = (void *)(v15 + 88);
    if ((long long *)v26 == v25)
    {
      unint64_t v25 = *(long long **)(v15 + 88);
    }
    else
    {
      unint64_t v27 = (const void **)(a1 + 184);
      uint64_t v28 = *(unsigned __int8 *)(a1 + 207);
      size_t v29 = *(void *)(a1 + 192);
      if ((v28 & 0x80u) == 0) {
        uint64_t v30 = *(unsigned __int8 *)(a1 + 207);
      }
      else {
        uint64_t v30 = *(void *)(a1 + 192);
      }
      while (1)
      {
        uint64_t v31 = *(unsigned __int8 *)(v26 + 71);
        int v32 = (char)v31;
        if ((v31 & 0x80u) != 0) {
          uint64_t v31 = *(void *)(v26 + 56);
        }
        if (v30 == v31)
        {
          if (v32 >= 0) {
            std::string v33 = (unsigned __int8 *)(v26 + 48);
          }
          else {
            std::string v33 = *(unsigned __int8 **)(v26 + 48);
          }
          if ((v28 & 0x80) == 0)
          {
            if (!v28) {
              break;
            }
            uint64_t v34 = (unsigned __int8 *)(a1 + 184);
            uint64_t v35 = v28;
            while (*v34 == *v33)
            {
              ++v34;
              ++v33;
              if (!--v35) {
                goto LABEL_54;
              }
            }
            goto LABEL_52;
          }
          if (!memcmp(*v27, v33, v29)) {
            break;
          }
        }
LABEL_52:
        v26 += 144;
        if ((long long *)v26 == v25) {
          goto LABEL_84;
        }
      }
LABEL_54:
      if ((long long *)v26 == v25)
      {
LABEL_84:
        uint64_t v37 = (uint64_t)v25;
        goto LABEL_85;
      }
      uint64_t v36 = v26 + 144;
      if ((long long *)(v26 + 144) != v25)
      {
        uint64_t v37 = v26;
        while (1)
        {
          uint64_t v38 = v26;
          uint64_t v26 = v36;
          uint64_t v39 = *(unsigned __int8 *)(a1 + 207);
          if ((v39 & 0x80u) == 0) {
            uint64_t v40 = *(unsigned __int8 *)(a1 + 207);
          }
          else {
            uint64_t v40 = *(void *)(a1 + 192);
          }
          uint64_t v41 = *(unsigned __int8 *)(v38 + 215);
          int v42 = (char)v41;
          if ((v41 & 0x80u) != 0) {
            uint64_t v41 = *(void *)(v38 + 200);
          }
          if (v40 != v41) {
            goto LABEL_73;
          }
          if (v42 >= 0) {
            uint64_t v43 = (unsigned __int8 *)(v38 + 192);
          }
          else {
            uint64_t v43 = *(unsigned __int8 **)(v38 + 192);
          }
          if ((v39 & 0x80) != 0)
          {
            if (memcmp(*v27, v43, *(void *)(a1 + 192))) {
              goto LABEL_73;
            }
          }
          else if (*(unsigned char *)(a1 + 207))
          {
            std::string::size_type v44 = (unsigned __int8 *)(a1 + 184);
            while (*v44 == *v43)
            {
              ++v44;
              ++v43;
              if (!--v39) {
                goto LABEL_80;
              }
            }
LABEL_73:
            if (*(char *)(v37 + 23) < 0) {
              operator delete(*(void **)v37);
            }
            long long v45 = *(_OWORD *)v26;
            *(void *)(v37 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)uint64_t v37 = v45;
            *(unsigned char *)(v38 + 167) = 0;
            *(unsigned char *)uint64_t v26 = 0;
            size_t v46 = (void **)(v37 + 24);
            if (*(char *)(v37 + 47) < 0) {
              operator delete(*v46);
            }
            long long v47 = *(_OWORD *)(v38 + 168);
            *(void *)(v37 + 40) = *(void *)(v38 + 184);
            *(_OWORD *)size_t v46 = v47;
            *(unsigned char *)(v38 + 191) = 0;
            *(unsigned char *)(v38 + 168) = 0;
            int v48 = (void **)(v37 + 48);
            if (*(char *)(v37 + 71) < 0) {
              operator delete(*v48);
            }
            long long v49 = *(_OWORD *)(v38 + 192);
            *(void *)(v37 + 64) = *(void *)(v38 + 208);
            *(_OWORD *)int v48 = v49;
            *(unsigned char *)(v38 + 215) = 0;
            *(unsigned char *)(v38 + 192) = 0;
            *(_OWORD *)(v37 + 72) = *(_OWORD *)(v38 + 216);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v37 + 88);
            *(_OWORD *)(v37 + 88) = *(_OWORD *)(v38 + 232);
            *(void *)(v37 + 104) = *(void *)(v38 + 248);
            *(void *)(v38 + 232) = 0;
            *(void *)(v38 + 240) = 0;
            *(void *)(v38 + 248) = 0;
            long long v50 = *(_OWORD *)(v38 + 272);
            *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 256);
            *(_OWORD *)(v37 + 128) = v50;
            v37 += 144;
          }
LABEL_80:
          uint64_t v36 = v26 + 144;
          if ((long long *)(v26 + 144) == v25)
          {
            unint64_t v25 = *(long long **)(v15 + 96);
            goto LABEL_85;
          }
        }
      }
    }
    uint64_t v37 = v26;
LABEL_85:
    std::string v51 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((long long *)(v37 + 144), v25, v37);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v15 + 88, v51);
    unint64_t v52 = *(void *)(v15 + 104);
    unint64_t v53 = *(void *)(v15 + 96);
    if (v53 >= v52)
    {
      unint64_t v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v53 - *v24) >> 4);
      if (v55 + 1 > 0x1C71C71C71C71C7) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v56 = 0x8E38E38E38E38E39 * ((uint64_t)(v52 - *v24) >> 4);
      uint64_t v57 = 2 * v56;
      if (2 * v56 <= v55 + 1) {
        uint64_t v57 = v55 + 1;
      }
      if (v56 >= 0xE38E38E38E38E3) {
        unint64_t v58 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v58 = v57;
      }
      uint64_t v70 = v15 + 104;
      if (v58) {
        unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v58);
      }
      else {
        uint64_t v59 = 0;
      }
      std::string v66 = (void **)v58;
      std::string v67 = (std::string *)(v58 + 144 * v55);
      std::string v68 = v67;
      unint64_t v69 = v58 + 144 * v59;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v67, (const nlv4_inference_orchestrator::trees::TreeNode *)&v60);
      v68 += 6;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v15 + 88), &v66);
      unint64_t v54 = *(void *)(v15 + 96);
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v66);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)(v15 + 96), (const nlv4_inference_orchestrator::trees::TreeNode *)&v60);
      unint64_t v54 = v53 + 144;
      *(void *)(v15 + 96) = v53 + 144;
    }
    *(void *)(v15 + 96) = v54;
    goto LABEL_98;
  }
  if (!*(unsigned char *)(a1 + 303)) {
    goto LABEL_16;
  }
  while (*(unsigned __int8 *)v12 == *v13)
  {
    uint64_t v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v5) {
      goto LABEL_16;
    }
  }
}

void sub_1C8E857B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v9 - 128);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createRelationshipTypeNode(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7 = HIDWORD(a3);
  int v8 = (uint64_t *)(a1 + 88);
  std::string::size_type v9 = a3;
  uint64_t UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets((uint64_t *)(a1 + 88), a3);
  std::string::size_type v12 = v11;
  uint64_t v13 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v8, v7);
  std::string::size_type v15 = v14;
  std::string::basic_string[abi:ne180100]<0>(a4, "");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4 + 1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4[1].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v16 = a4 + 2;
  if (*(char *)(a1 + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a1 + 304), *(void *)(a1 + 312));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 304);
    a4[2].__r_.__value_.__r.__words[2] = *(void *)(a1 + 320);
  }
  a4[3].__r_.__value_.__r.__words[0] = v12;
  a4[3].__r_.__value_.__l.__size_ = v15;
  a4[3].__r_.__value_.__r.__words[2] = 0;
  a4[4].__r_.__value_.__r.__words[0] = 0;
  a4[4].__r_.__value_.__l.__size_ = 0;
  a4[4].__r_.__value_.__r.__words[2] = v9;
  a4[5].__r_.__value_.__r.__words[0] = v7;
  a4[5].__r_.__value_.__l.__size_ = UnicodeScalarAndUtf8Offsets;
  a4[5].__r_.__value_.__r.__words[2] = v13;
}

void sub_1C8E858DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createNameNode(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7 = HIDWORD(a3);
  int v8 = (uint64_t *)(a1 + 88);
  std::string::size_type v9 = a3;
  uint64_t UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets((uint64_t *)(a1 + 88), a3);
  std::string::size_type v12 = v11;
  uint64_t v13 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v8, v7);
  std::string::size_type v15 = v14;
  std::string::basic_string[abi:ne180100]<0>(a4, "");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4 + 1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4[1].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v16 = a4 + 2;
  if (*(char *)(a1 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a1 + 232), *(void *)(a1 + 240));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 232);
    a4[2].__r_.__value_.__r.__words[2] = *(void *)(a1 + 248);
  }
  a4[3].__r_.__value_.__r.__words[0] = v12;
  a4[3].__r_.__value_.__l.__size_ = v15;
  a4[3].__r_.__value_.__r.__words[2] = 0;
  a4[4].__r_.__value_.__r.__words[0] = 0;
  a4[4].__r_.__value_.__l.__size_ = 0;
  a4[4].__r_.__value_.__r.__words[2] = v9;
  a4[5].__r_.__value_.__r.__words[0] = v7;
  a4[5].__r_.__value_.__l.__size_ = UnicodeScalarAndUtf8Offsets;
  a4[5].__r_.__value_.__r.__words[2] = v13;
}

void sub_1C8E85A08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 231);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 231);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 216);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 71);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 56);
  }
  if (v3 != v4) {
    return 0;
  }
  int v8 = (const void **)(a1 + 208);
  if (v5 >= 0) {
    std::string::size_type v9 = (unsigned __int8 *)(a2 + 48);
  }
  else {
    std::string::size_type v9 = *(unsigned __int8 **)(a2 + 48);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 216))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 231))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(a2 + 88);
  std::string::size_type v11 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(a2 + 96);
  if (v10 == v11) {
    return 0;
  }
  do
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v27, v10);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 207);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (void *)*(unsigned __int8 *)(a1 + 207);
    }
    else {
      uint64_t v13 = *(void **)(a1 + 192);
    }
    unint64_t v14 = v31;
    if ((v31 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == (void *)v14)
    {
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v15 = __p;
      }
      else {
        std::string::size_type v15 = (void **)__p[0];
      }
      if ((v12 & 0x80) != 0)
      {
        BOOL v24 = memcmp(*(const void **)(a1 + 184), v15, *(void *)(a1 + 192)) == 0;
      }
      else if (*(unsigned char *)(a1 + 207))
      {
        uint64_t v16 = v12 - 1;
        size_t v17 = (unsigned __int8 *)(a1 + 184);
        do
        {
          int v19 = *v17++;
          int v18 = v19;
          int v21 = *(unsigned __int8 *)v15;
          std::string::size_type v15 = (void **)((char *)v15 + 1);
          int v20 = v21;
          BOOL v23 = v16-- != 0;
          BOOL v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
      }
      else
      {
        BOOL v24 = 1;
      }
    }
    else
    {
      BOOL v24 = 0;
    }
    std::string v33 = (void **)&v32;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v33);
    if ((char)v31 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v10 + 144);
    int v25 = v10 == v11 || v24;
  }
  while (v25 != 1);
  return v24;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *snlp::ssu::encoder::SSUPreprocessor::SSUPreprocessor(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *uint64_t result = a3;
  result[1] = v3;
  return result;
}

{
  uint64_t v3;

  uint64_t v3 = *a2;
  *a2 = 0;
  *uint64_t result = a3;
  result[1] = v3;
  return result;
}

void snlp::ssu::encoder::SSUPreprocessor::buildFromAssetsDirectory(snlp::ssu::encoder::SSUPreprocessor *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)this + 23) >= 0) {
      unint64_t v4 = this;
    }
    else {
      unint64_t v4 = *(snlp::ssu::encoder::SSUPreprocessor **)this;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_DEBUG, "Building SSUPreprocessor from assets directory: %s", (uint8_t *)&buf, 0xCu);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&buf, "spiece.model");
  std::__fs::filesystem::operator/[abi:ne180100](&v8, (uint64_t)this, (std::__fs::filesystem::path *)&buf);
  int v5 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v8;
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string::size_type v9 = 136315138;
    *(void *)&v9[4] = p_p;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "Building preprocessor dependency: SentencePiece model using path: %s", v9, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v8;
  }
  operator new();
}

void sub_1C8E85FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8E86070(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double snlp::ssu::encoder::SSUPreprocessor::preprocess@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(a1, a2, (uint64_t)&v7);
  long long v4 = v10;
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v4;
  double result = v11[0];
  long long v6 = v7;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 48) = v6;
  *(void *)(a3 + 64) = v8;
  return result;
}

void snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  uint64_t v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SSUPreprocessor SentencePiece tokenization", "", buf, 2u);
    }
  }
  long long v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUPreprocessor SentencePiece tokenization\"", buf, 2u);
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  uint64_t v12 = *a1;
  uint64_t v13 = operator new(0x10uLL);
  void *v13 = v11;
  v13[1] = v12;
  std::vector<float>::vector(buf, v11 * v12, &snlp::ssu::encoder::SSUPreprocessor::kPaddingValue);
  v30[1] = 0;
  uint64_t v31 = 0;
  uint64_t v29 = *(void *)buf;
  v30[0] = 0;
  std::vector<unsigned long>::reserve(v30, v11);
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  while (v15 != v14)
  {
    snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePiecesUtterance((uint64_t)a1, v15, buf);
    v15 += 24;
  }
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v22, v13, (uint64_t)(v13 + 2), 2uLL);
  uint64_t v16 = v28;
  long long v17 = *(_OWORD *)buf;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)a3 = *(_OWORD *)v30;
  *(void *)(a3 + 16) = v31;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v22;
  *(void *)(a3 + 40) = v23;
  v22[0] = 0;
  v22[1] = 0;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  uint64_t v23 = 0;
  std::string __p = 0;
  int v25 = 0;
  int v18 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)int v21 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v19, OS_SIGNPOST_INTERVAL_END, v7, "SSUPreprocessor SentencePiece tokenization", "", v21, 2u);
    }
  }
  int v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v21 = 0;
    _os_log_impl(&dword_1C8DA9000, v20, OS_LOG_TYPE_DEFAULT, "END \"SSUPreprocessor SentencePiece tokenization\"", v21, 2u);
  }
  if (__p)
  {
    int v25 = __p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  operator delete(v13);
}

void sub_1C8E8638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  snlp::ssu::encoder::SSUPreprocessor::PreprocessingState::~PreprocessingState((snlp::ssu::encoder::SSUPreprocessor::PreprocessingState *)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePiecesUtterance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nl_sentencepiece::SentencepieceModel::encodeUtterance(v28, **(void **)(a1 + 8), (uint64_t *)a2);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[1] - v28[0]) >> 3);
  unint64_t v8 = *(void *)a1;
  if (v7 >= *(void *)a1)
  {
    if (v8 < v7)
    {
      long long v9 = SNLPOSLoggerForCategory(8);
      uint64_t v6 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v10 = a2;
        }
        else {
          uint64_t v10 = *(void *)a2;
        }
        *(_DWORD *)std::string buf = 136642819;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEFAULT, "Warning: truncating SentencePiece tokens for utterance: %{sensitive}s", buf, 0xCu);
      }
    }
    unint64_t v7 = v8;
  }
  if (v7)
  {
    unint64_t v11 = (uint64_t *)v28[0];
    uint64_t v12 = (float *)a3[3];
    uint64_t v13 = 24 * v7;
    do
    {
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = (uint64_t *)*v11;
      }
      if (v14 >= 0) {
        uint64_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        uint64_t v16 = v11[1];
      }
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(***(void ***)(a1 + 8) + 504))(**(void **)(a1 + 8), v15, v16);
      *v12++ = (float)(int)v6;
      v11 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  unint64_t v17 = a3[6];
  int v18 = (unint64_t *)a3[5];
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v6 = a3[4];
    uint64_t v20 = ((uint64_t)v18 - v6) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = v17 - v6;
    unint64_t v22 = (uint64_t)(v17 - v6) >> 2;
    if (v22 <= v20 + 1) {
      unint64_t v22 = v20 + 1;
    }
    if (v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      BOOL v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 6), v23);
      uint64_t v6 = a3[4];
      int v18 = (unint64_t *)a3[5];
    }
    else
    {
      BOOL v24 = 0;
    }
    int v25 = (unint64_t *)&v24[8 * v20];
    uint64_t v26 = &v24[8 * v23];
    *int v25 = v7;
    int v19 = v25 + 1;
    while (v18 != (unint64_t *)v6)
    {
      unint64_t v27 = *--v18;
      *--int v25 = v27;
    }
    a3[4] = v25;
    a3[5] = v19;
    a3[6] = v26;
    if (v6) {
      operator delete((void *)v6);
    }
  }
  else
  {
    *int v18 = v7;
    int v19 = v18 + 1;
  }
  a3[5] = v19;
  snlp::ssu::encoder::SSUPreprocessor::logSentencePiecesTokens(v6, (uint64_t)a3, v28, v7);
  a3[3] += 4 * *(void *)a1;
  *(void *)std::string buf = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C8E86624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void snlp::ssu::encoder::SSUPreprocessor::PreprocessingState::~PreprocessingState(snlp::ssu::encoder::SSUPreprocessor::PreprocessingState *this)
{
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t snlp::ssu::encoder::SSUPreprocessor::logSentencePiecesTokens(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = SNLPOSLoggerForCategory(8);
  uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
    if (a4)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"[", 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v9) {
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v11 = *a3 + v8;
        int v12 = *(char *)(v11 + 23);
        if (v12 >= 0) {
          uint64_t v13 = *a3 + v8;
        }
        else {
          uint64_t v13 = *(void *)v11;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"::", 2);
        uint64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]", 1);
        ++v9;
        v8 += 24;
      }
      while (a4 != v9);
    }
    unint64_t v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      int v18 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 136642819;
      unint64_t v27 = v18;
      _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_DEBUG, "Encoded utterance as sentence pieces: %{sensitive}s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p);
      }
    }
    v22[0] = *MEMORY[0x1E4FBA408];
    uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v23[0] = v19;
    v23[1] = MEMORY[0x1E4FBA470] + 16;
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1CB775B50](&v25);
  }
  return result;
}

void sub_1C8E86970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C8E87B8C(_Unwind_Exception *a1)
{
  v1[14] = v2;

  _Unwind_Resume(a1);
}

void *uaap::TimeSpanWithReferenceHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)DDResultHasType();
  if (result)
  {
    uaap::mapTimeSpanWithReferenceToItemizedUsos(a3);
    uaap::mapTimeSpansToItemizedUsos(a3);
    return uaap::mapTimeSpanSpansToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapTimeSpanWithReferenceToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"TimeSpanWithReference");
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t result = *(void **)(v5 + 8 * v6);
        if (result)
        {
          if (result) {
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
  }
  return result;
}

void sub_1C8E87D88(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::UsoGraph *uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReference(uint64_t a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v4 = EntityNode;
    uint64_t v11 = *(CFTypeRef **)(a1 + 56);
    if (v11)
    {
      uint64_t v12 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue(EntityNode);
      BOOL v13 = uaap::TimeHandler::resolveOffsetDurationValue(v11, a2, (uint64_t)v4, v12) != 0;
    }
    else
    {
      BOOL v13 = 0;
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      uint64_t v15 = *(const void **)(v14 + 24);
      if (v15)
      {
        uint64_t v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(v14 + 24), @"after");
        if (v16)
        {
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v16);
          goto LABEL_16;
        }
        unint64_t v17 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v15, @"before");
        if (v17)
        {
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v17);
LABEL_16:
          int v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v18);
          uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_direction(v19);
          uint64_t v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
          siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
          siri::ontology::UsoGraphNode::setSuccessor();
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v18, *(siri::ontology::UsoEntityNode **)(a1 + 48), v21);
          unint64_t v23 = *(CFTypeRef ***)(a1 + 64);
          if (v23) {
            uaap::TimeHandler::resolveOffsetReference(v23, a2, v4, v22);
          }
          goto LABEL_25;
        }
      }
    }
    char v24 = *(CFTypeRef ***)(a1 + 64);
    if (v24)
    {
      if (uaap::TimeHandler::resolveOffsetReference(v24, a2, v4, v10)) {
        char v25 = 1;
      }
      else {
        char v25 = v13;
      }
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
    else if (!v13)
    {
      return 0;
    }
LABEL_25:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, (siri::ontology::UsoEntityNode *)a1, v9);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return v4;
}

void uaap::TimeSpanWithReferenceHandler::~TimeSpanWithReferenceHandler(uaap::TimeSpanWithReferenceHandler *this)
{
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReferenceGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpanWithReference *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReference(v4, a2, v5, v6);
  }
  return this;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::toTreeDebug(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 12) - 8) + 48))();
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::textAlignment(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  uint64_t v1 = *(const void **)(*((void *)this + 12) - 8);
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(exception, "Last node on the parser stack is null, but it shouldn't");
    goto LABEL_8;
  }
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(exception, "Test alignment parsed but last node on parser stack is not a UsoEntityNode");
LABEL_8:
  }
  return siri::ontology::UsoEntityNode::addUtteranceAlignment();
}

void sub_1C8E88114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *_ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F235F4E8;
  return result;
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParser::alias(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 96) - 8);
  uint64_t v6 = (uint64_t *)(a1 + 112);
  uint64_t v7 = (void *)(a1 + 136);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 136, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 120);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v8 >= v10) {
        unint64_t v2 = v8 % v10;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v8;
    }
    BOOL v13 = *(void ***)(*v6 + 8 * v2);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 144, (unsigned __int8 *)v14 + 16, (unsigned __int8 *)a2))goto LABEL_43; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v2) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v16 = (std::string *)(v14 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v14 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v14 + 5) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 136) + 1);
  float v18 = *(float *)(a1 + 144);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v6, v22);
    unint64_t v10 = *(void *)(a1 + 120);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *v6;
  char v24 = *(void **)(*v6 + 8 * v2);
  if (v24)
  {
    *(void *)uint64_t v14 = *v24;
LABEL_41:
    *char v24 = v14;
    goto LABEL_42;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v14;
  *(void *)(v23 + 8 * v2) = a1 + 128;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    char v24 = (void *)(*v6 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*v7;
LABEL_43:
  *((void *)v14 + 5) = v5;
}

void sub_1C8E883C8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::indentation(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 80) = a2;
  uint64_t v3 = *(unsigned int **)(this + 88);
  unint64_t v2 = *(unsigned int **)(this + 96);
  if (v3 != v2)
  {
    while (*v3 < a2)
    {
      v3 += 4;
      if (v3 == v2) {
        return this;
      }
    }
    if (v3 != v2)
    {
      uint64_t v4 = v3 + 4;
      if (v3 + 4 != v2)
      {
        do
        {
          if (*v4 < a2)
          {
            *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
            v3 += 4;
          }
          v4 += 4;
        }
        while (v4 != v2);
        unint64_t v2 = *(unsigned int **)(this + 96);
      }
    }
    if (v3 != v2) {
      *(void *)(this + 96) = v3;
    }
  }
  return this;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::integerValue(std::string *this)
{
  IntNode = (char *)siri::ontology::UsoGraph::createIntNode();
  uint64_t v3 = IntNode;
  std::string::pointer data = this[4].__r_.__value_.__l.__data_;
  std::string::size_type size = this[4].__r_.__value_.__l.__size_;
  if ((unint64_t)data >= size)
  {
    std::string::size_type v7 = this[3].__r_.__value_.__r.__words[2];
    uint64_t v8 = (uint64_t)&data[-v7] >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = size - v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v11);
    BOOL v13 = &v12[16 * v8];
    unint64_t v15 = &v12[16 * v14];
    *(_DWORD *)BOOL v13 = this[3].__r_.__value_.__r.__words[1];
    *((void *)v13 + 1) = v3;
    std::string::size_type v6 = (std::string::size_type)(v13 + 16);
    uint64_t v16 = (char *)this[3].__r_.__value_.__r.__words[2];
    IntNode = this[4].__r_.__value_.__l.__data_;
    if (IntNode != v16)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)IntNode - 1);
        v13 -= 16;
        IntNode -= 16;
      }
      while (IntNode != v16);
      IntNode = (char *)this[3].__r_.__value_.__r.__words[2];
    }
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
    this[4].__r_.__value_.__r.__words[0] = v6;
    this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v15;
    if (IntNode) {
      operator delete(IntNode);
    }
  }
  else
  {
    *(_DWORD *)std::string::pointer data = this[3].__r_.__value_.__r.__words[1];
    *((void *)data + 1) = IntNode;
    std::string::size_type v6 = (std::string::size_type)(data + 16);
  }
  this[4].__r_.__value_.__r.__words[0] = v6;
  if (!this[3].__r_.__value_.__s.__data_[0])
  {
    uint64_t v17 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)IntNode);
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(this + 2, (const std::string *)(v17 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)this);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 12) - 8);
  if (!*((unsigned char *)this + 72))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v1 + 48))(&v11, v1);
    std::string::size_type v6 = std::string::insert(&v11, 0, "Empty edge found while attaching: ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F4E8;
  }
  siri::ontology::UsoVocabManager::getEdgeName();
  if (!v3)
  {
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v9 = this;
    uint64_t v10 = v8;
    if (!*((unsigned char *)v9 + 72)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::operator+<char>();
    std::runtime_error::runtime_error(v10, &v12);
    v10->__vftable = (std::runtime_error_vtbl *)&unk_1F235F4E8;
  }
  return siri::ontology::UsoGraphNode::setSuccessor();
}

void sub_1C8E8878C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v3 - 73) < 0) {
    operator delete(*(void **)(v3 - 96));
  }
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8E889C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v40 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if (!v40)
  {
LABEL_18:
    __cxa_end_catch();
    JUMPOUT(0x1C8E88AACLL);
  }
  __cxa_free_exception(v41);
  goto LABEL_18;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::stringValue(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v21 = 1;
  StringNode = (char *)siri::ontology::UsoGraph::createStringNode();
  uint64_t v4 = StringNode;
  unint64_t v6 = *(void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 104);
  if (v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v9 = (uint64_t)(v6 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v12);
    uint64_t v14 = &v13[16 * v9];
    uint64_t v16 = &v13[16 * v15];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)(a1 + 80);
    *((void *)v14 + 1) = v4;
    long long v7 = v14 + 16;
    uint64_t v17 = *(char **)(a1 + 88);
    StringNode = *(char **)(a1 + 96);
    if (StringNode != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)StringNode - 1);
        v14 -= 16;
        StringNode -= 16;
      }
      while (StringNode != v17);
      StringNode = *(char **)(a1 + 88);
    }
    *(void *)(a1 + 88) = v14;
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = v16;
    if (StringNode) {
      operator delete(StringNode);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v6 = *(_DWORD *)(a1 + 80);
    *(void *)(v6 + 8) = StringNode;
    long long v7 = (char *)(v6 + 16);
  }
  *(void *)(a1 + 96) = v7;
  if (v21 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v18 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)StringNode);
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(a1 + 48), (const std::string *)(v18 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)a1);
}

void sub_1C8E88C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *snlp::common::text_uso_graph::UsoGraphTextTreeParser::edge(std::string *a1, const std::string *a2)
{
  return std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a1 + 2, a2);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::node(uint64_t result, std::string *__str)
{
  uint64_t v2 = result;
  int v3 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = __str;
    if (v3 != 4) {
      goto LABEL_7;
    }
LABEL_6:
    if (LODWORD(v4->__r_.__value_.__l.__data_) == 1953460050) {
      return result;
    }
    goto LABEL_7;
  }
  if (__str->__r_.__value_.__l.__size_ == 4)
  {
    uint64_t v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = *(std::__shared_weak_count **)(result + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t NodeByName = snlp::common::text_uso_graph::createNodeByName(__str);
  uint64_t v7 = NodeByName;
  unint64_t v9 = *(void *)(v2 + 96);
  unint64_t v8 = *(void *)(v2 + 104);
  if (v9 >= v8)
  {
    uint64_t v11 = *(void *)(v2 + 88);
    uint64_t v12 = (uint64_t)(v9 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v8 - v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v15);
    uint64_t v17 = &v16[16 * v12];
    BOOL v19 = &v16[16 * v18];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)(v2 + 80);
    *((void *)v17 + 1) = v7;
    unint64_t v10 = v17 + 16;
    char v21 = *(char **)(v2 + 88);
    unint64_t v20 = *(char **)(v2 + 96);
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v20 - 1);
        v17 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      unint64_t v20 = *(char **)(v2 + 88);
    }
    *(void *)(v2 + 88) = v17;
    *(void *)(v2 + 96) = v10;
    *(void *)(v2 + 104) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v9 = *(_DWORD *)(v2 + 80);
    *(void *)(v9 + 8) = NodeByName;
    unint64_t v10 = (char *)(v9 + 16);
  }
  *(void *)(v2 + 96) = v10;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!*(unsigned char *)(v2 + 72))
  {
    size_t v22 = (siri::ontology::oname::graph::ontology_init *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 96) - 8)
                                                                                           + 16))(*(void *)(*(void *)(v2 + 96) - 8));
    if (v22 == 2) {
      uint64_t v23 = siri::ontology::oname::graph::ontology_init::Argument_entity(v22);
    }
    else {
      uint64_t v23 = siri::ontology::oname::graph::ontology_init::Argument_task(v22);
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(v2 + 48), (const std::string *)(v23 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)v2);
}

void sub_1C8E88E38(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::text_uso_graph::createNodeByName(std::string *__str)
{
  *((void *)&v80 + 1) = *MEMORY[0x1E4F143B8];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"::";
  __p.__r_.__value_.__l.__size_ = 2;
  nlv4_inference_orchestrator::trees::split(&v41, __str, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((char)v44 < 0) {
    uint64_t v1 = v43;
  }
  else {
    uint64_t v1 = v44;
  }
  if (v1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 24;
  }
  if (v1) {
    int v3 = &v41;
  }
  else {
    int v3 = (std::string *)&v42;
  }
  uint64_t NodeName = siri::ontology::UsoVocabManager::getNodeName();
  LOBYTE(v6) = v5;
  if (v5)
  {
    uint64_t v7 = NodeName;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = siri::ontology::UsoVocabManager::getNodeName();
    uint64_t v6 = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!v6)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v35 = std::string::append(&v40, " not found in ontology.");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F4E8;
    }
  }
  if (!(_BYTE)v6) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (v1) {
    uint64_t v9 = 23;
  }
  else {
    uint64_t v9 = 47;
  }
  p_std::string::size_type size = &v41.__r_.__value_.__l.__size_;
  if (!v1) {
    p_std::string::size_type size = (std::string::size_type *)&v43;
  }
  std::string::size_type v11 = *p_size;
  if (v41.__r_.__value_.__s.__data_[v9] >= 0) {
    std::string::size_type v11 = v41.__r_.__value_.__s.__data_[v9];
  }
  if (!v11)
  {
    if (*(_DWORD *)(v7 + 32) == 5) {
      uint64_t OperatorNode = siri::ontology::UsoGraph::createOperatorNode();
    }
    else {
      uint64_t OperatorNode = siri::ontology::UsoGraph::createEntityNode();
    }
    goto LABEL_61;
  }
  siri::ontology::UsoVocabManager::getVerbName();
  if (v12)
  {
    uint64_t OperatorNode = siri::ontology::UsoGraph::createTaskNode();
LABEL_61:
    uint64_t TaskNode = OperatorNode;
    goto LABEL_62;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Check");
  std::string::basic_string[abi:ne180100]<0>(v46, "Control");
  std::string::basic_string[abi:ne180100]<0>(v47, "Convert");
  std::string::basic_string[abi:ne180100]<0>(v48, "Create");
  std::string::basic_string[abi:ne180100]<0>(v49, "Delete");
  std::string::basic_string[abi:ne180100]<0>(v50, "Entity");
  std::string::basic_string[abi:ne180100]<0>(v51, "NoVerb");
  std::string::basic_string[abi:ne180100]<0>(v52, "PlaceholderVerb");
  std::string::basic_string[abi:ne180100]<0>(v53, "RecipientsEventTrigger");
  std::string::basic_string[abi:ne180100]<0>(v54, "RecipientsHiddenPeople");
  std::string::basic_string[abi:ne180100]<0>(v55, "Reference");
  std::string::basic_string[abi:ne180100]<0>(v56, "ReferenceControl");
  std::string::basic_string[abi:ne180100]<0>(v57, "ReferenceDateTimeRangeTrigger");
  std::string::basic_string[abi:ne180100]<0>(v58, "ReferenceDurationTrigger");
  std::string::basic_string[abi:ne180100]<0>(v59, "ReferenceMeasurementTrigger");
  std::string::basic_string[abi:ne180100]<0>(v60, "ReferenceNumberTrigger");
  std::string::basic_string[abi:ne180100]<0>(v61, "ReferencePaymentSortKey");
  std::string::basic_string[abi:ne180100]<0>(v62, "ReferencePhotoCollection");
  std::string::basic_string[abi:ne180100]<0>(v63, "ReferencePhotoCollectionFilter");
  std::string::basic_string[abi:ne180100]<0>(v64, "ReferencePhotoFilter");
  std::string::basic_string[abi:ne180100]<0>(v65, "ReferencePhotoMemoryFilter");
  std::string::basic_string[abi:ne180100]<0>(v66, "ReferencePhotoTag");
  std::string::basic_string[abi:ne180100]<0>(v67, "ReferenceProfile");
  std::string::basic_string[abi:ne180100]<0>(v68, "ReferenceSelect");
  std::string::basic_string[abi:ne180100]<0>(v69, "ReferenceSlideshowFilter");
  std::string::basic_string[abi:ne180100]<0>(v70, "ReferenceStringTrigger");
  std::string::basic_string[abi:ne180100]<0>(v71, "ReferenceTarget");
  std::string::basic_string[abi:ne180100]<0>(v72, "ReferenceTargetSelect");
  std::string::basic_string[abi:ne180100]<0>(v73, "ReferenceTrigger");
  std::string::basic_string[abi:ne180100]<0>(v74, "ReferenceVideoFilter");
  std::string::basic_string[abi:ne180100]<0>(v75, "Request");
  std::string::basic_string[abi:ne180100]<0>(v76, "StockSummarise");
  std::string::basic_string[abi:ne180100]<0>(v77, "Summarise");
  std::string::basic_string[abi:ne180100]<0>(v78, "Target");
  std::string::basic_string[abi:ne180100]<0>(v79, "Update");
  memset(&v40, 0, sizeof(v40));
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  v39.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v37 = v2;
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x348uLL);
  v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
  v40.__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[0] + 840;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40.__r_.__value_.__r.__words[2], (long long *)&__p, &v80, (std::string *)v40.__r_.__value_.__l.__data_);
  uint64_t v14 = 840;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v14 - 1] < 0) {
      operator delete(*(void **)((char *)&v43 + v14));
    }
    v14 -= 24;
  }
  while (v14);
  uint64_t v38 = v3;
  std::string::size_type size = v40.__r_.__value_.__l.__size_;
  std::string::size_type v16 = v40.__r_.__value_.__r.__words[0];
  if (v40.__r_.__value_.__r.__words[0] == v40.__r_.__value_.__l.__size_)
  {
LABEL_59:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v30 = std::string::append(&v40, " not found in ontology.");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &__p);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1F235F4E8;
  }
  while (1)
  {
    if (*(char *)(v16 + 23) >= 0) {
      size_t v17 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      size_t v17 = *(void *)(v16 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v39, v17 + 1);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v39;
    }
    else {
      uint64_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if (*(char *)(v16 + 23) >= 0) {
        BOOL v19 = (const void *)v16;
      }
      else {
        BOOL v19 = *(const void **)v16;
      }
      memmove(v18, v19, v17);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
    int v20 = v41.__r_.__value_.__s.__data_[v9];
    char v21 = (std::string::size_type *)&v43;
    if (v1) {
      char v21 = &v41.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = *v21;
    if (v20 >= 0) {
      uint64_t v23 = (const std::string::value_type *)v38;
    }
    else {
      uint64_t v23 = *(std::string::pointer *)((char *)&v41.__r_.__value_.__l.__data_ + v37);
    }
    if (v20 >= 0) {
      std::string::size_type v24 = v41.__r_.__value_.__s.__data_[v9];
    }
    else {
      std::string::size_type v24 = v22;
    }
    unint64_t v25 = std::string::append(&v39, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::UsoVocabManager::getVerbName();
    char v28 = v27;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v28) {
      break;
    }
    v16 += 24;
    if (v16 == size) {
      goto LABEL_59;
    }
  }
  uint64_t TaskNode = siri::ontology::UsoGraph::createTaskNode();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_62:
  if ((char)v44 < 0) {
    operator delete(v42);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  return TaskNode;
}

void sub_1C8E89658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::string v39 = (void **)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v39);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&v38);
  _Unwind_Resume(a1);
}

void sub_1C8E89778()
{
}

void sub_1C8E89780(_Unwind_Exception *a1)
{
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((snlp::ssu::matcher::SSUAppInfo *)&v2);
  _Unwind_Resume(a1);
}

void sub_1C8E89788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  while (1)
  {
    if (*((char *)v25 - 1) < 0) {
      operator delete(*(v25 - 3));
    }
    v25 -= 3;
    if (v25 == (void **)&a25) {
      JUMPOUT(0x1C8E897ACLL);
    }
  }
}

void nlv4_inference_orchestrator::trees::split(std::string *a1, std::string *__str, const void **a3)
{
  int v3 = a3;
  char v5 = a1;
  int64_t v6 = (int64_t)a3[1];
  char v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  unsigned __int8 v8 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
  if (v7 >= 0) {
    uint64_t v9 = __str;
  }
  else {
    uint64_t v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    __s = v9;
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (v7 >= 0) {
      int64_t v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v11 = __str->__r_.__value_.__l.__size_;
    }
    if (v11 >= v6)
    {
      BOOL v19 = v9;
      int v20 = *a3;
      char v21 = (char *)v9 + v11;
      int v22 = *(char *)*a3;
      int64_t v23 = v11;
      do
      {
        int64_t v24 = v23 - v6;
        if (v24 == -1) {
          break;
        }
        unint64_t v25 = (char *)memchr(v19, v22, v24 + 1);
        if (!v25) {
          break;
        }
        long long v26 = v25;
        if (!memcmp(v25, v20, v6))
        {
          if (v26 == v21 || v26 - (char *)__s == -1) {
            break;
          }
          std::string v33 = __s;
          do
          {
            if (v11 - v6 == -1) {
              break;
            }
            uint64_t v34 = (char *)memchr(v33, v22, v11 - v6 + 1);
            if (!v34) {
              break;
            }
            uint64_t v35 = v34;
            if (!memcmp(v34, v20, v6)) {
              goto LABEL_60;
            }
            std::string v33 = (std::string *)(v35 + 1);
            int64_t v11 = v21 - (v35 + 1);
          }
          while (v11 >= v6);
          uint64_t v35 = v21;
LABEL_60:
          if (v35 == v21) {
            std::string::size_type v12 = -1;
          }
          else {
            std::string::size_type v12 = v35 - (char *)__s;
          }
          char v5 = a1;
          int v3 = a3;
          goto LABEL_12;
        }
        BOOL v19 = (std::string *)(v26 + 1);
        int64_t v23 = v21 - (v26 + 1);
      }
      while (v23 >= v6);
    }
    if (v7 < 0) {
      std::string::__init_copy_ctor_external(&v39, v8, size);
    }
    else {
      std::string v39 = *__str;
    }
    *a1 = v39;
    memset(&v39, 0, sizeof(v39));
    std::string v40 = "";
    std::string::basic_string[abi:ne180100]<0>(a1[1].__r_.__value_.__r.__words, "");
  }
  else
  {
    std::string::size_type v12 = 0;
LABEL_12:
    std::string::basic_string(&v42, __str, 0, v12, (std::allocator<char> *)&v41);
    nlv4_inference_orchestrator::trees::trimWhitespace(&v39, &v42);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    int64_t v13 = (int64_t)v3[1];
    int64_t v14 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80u) == 0) {
      unint64_t v15 = __str;
    }
    else {
      unint64_t v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if ((v14 & 0x80u) != 0) {
        int64_t v14 = __str->__r_.__value_.__l.__size_;
      }
      std::string::size_type v16 = (char *)v15 + v14;
      if (v14 >= v13)
      {
        char v28 = (char *)*v3;
        int v29 = *v28;
        uint64_t v30 = v15;
        do
        {
          int64_t v31 = v14 - v13;
          if (v31 == -1) {
            break;
          }
          uint64_t v32 = (char *)memchr(v30, v29, v31 + 1);
          if (!v32) {
            break;
          }
          size_t v17 = v32;
          if (!memcmp(v32, v28, v13)) {
            goto LABEL_22;
          }
          uint64_t v30 = (std::string *)(v17 + 1);
          int64_t v14 = v16 - (v17 + 1);
        }
        while (v14 >= v13);
      }
      size_t v17 = v16;
LABEL_22:
      uint64_t v18 = v17 - (char *)v15;
      if (v17 == v16) {
        uint64_t v18 = -1;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    std::string::basic_string(&v41, __str, v13 + v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    nlv4_inference_orchestrator::trees::trimWhitespace(&v42, &v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v5, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    }
    else {
      std::string *v5 = v39;
    }
    char v27 = v5 + 1;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v27, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v5[1].__r_.__value_.__r.__words[2] = v42.__r_.__value_.__r.__words[2];
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E89AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = &unk_1F235F498;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  operator new();
}

{
  snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser(a1, a2, a3, a4);
}

void sub_1C8E89C50(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1 + 112);
  uint64_t v4 = *(void **)(v1 + 88);
  if (v4)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(v1 + 72) && *(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::releaseGraph@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *(void *)(this + 40) = 0;
  *a2 = v2;
  return this;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::getAliasMap(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  return (uint64_t)this + 112;
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(unsigned int *)(a3 + 72);
  uint64_t v3 = *(unsigned int *)(a3 + 76);
  if (v3 > v4
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) < v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v27 = v3;
    char v28 = exception;
    std::to_string(&v43, v27);
    int v29 = std::string::insert(&v43, 0, "Token indices out of range: [");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int64_t v31 = std::string::append(&v44, ", ");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v42, v4);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v33 = &v42;
    }
    else {
      std::string v33 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    uint64_t v35 = std::string::append(&v45, (const std::string::value_type *)v33, size);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&__p, ")");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v28, &v46);
    v28->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 40), (unsigned __int8 *)a2))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v41 = a3;
    uint64_t v9 = v8 + 24 * v3;
    unint64_t v12 = *(void *)(v9 + 8);
    int64_t v11 = (uint64_t *)(v9 + 8);
    unint64_t v10 = v12;
    unint64_t v13 = v11[1];
    if (v12 >= v13)
    {
      unint64_t v15 = (uint64_t *)(v8 + 24 * v3);
      uint64_t v16 = (uint64_t)(v10 - *v15) >> 5;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v13 - *v15;
      if (v18 >> 4 > v17) {
        unint64_t v17 = v18 >> 4;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      int v48 = v11 + 1;
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v19);
      std::string::size_type v21 = (std::string::size_type)&v20[32 * v16];
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v46.__r_.__value_.__l.__size_ = v21;
      long long v47 = &v20[32 * v22];
      long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v21 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v21 = v23;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v21 + 24) = v41;
      v46.__r_.__value_.__r.__words[2] = v21 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v15, &v46);
      uint64_t v24 = *v11;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v46);
      int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      uint64_t *v11 = v24;
      if (v25 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v10 = v14;
      *(void *)(v10 + 24) = v41;
      uint64_t *v11 = v10 + 32;
    }
  }
  else if (v3 != v4)
  {
    if (*(_DWORD *)a1 == 1)
    {
      nlv4_inference_orchestrator::span_matching::TagBucketList::addBILOUTags(a1, a2, v3, v4, a3);
    }
    else
    {
      if (*(_DWORD *)a1)
      {
        std::string v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v46, "Unknown LabelScheme observed");
        std::runtime_error::runtime_error(v39, &v46);
        v39->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
      }
      nlv4_inference_orchestrator::span_matching::TagBucketList::addBIOTags(a1, a2, v3, v4, a3);
    }
  }
}

void sub_1C8E8A0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v41 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v40);
  goto LABEL_16;
}

uint64_t std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        unint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addBIOTags(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v56 = (const void **)(a1 + 200);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v58, (const void **)(a1 + 80), (const void **)(a1 + 200));
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    int64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    int64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::string::append(&v58, v11, v12);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
  v64[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = v9 + 24 * a3;
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v17 = (unint64_t *)(v16 + 16);
  unint64_t v18 = v19;
  std::string::size_type v21 = (uint64_t *)(v17 - 1);
  unint64_t v20 = *(v17 - 1);
  if (v20 >= v19)
  {
    uint64_t v24 = (uint64_t *)(v9 + 24 * a3);
    uint64_t v25 = (uint64_t)(v20 - *v24) >> 5;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v18 - *v24;
    if (v27 >> 4 > v26) {
      unint64_t v26 = v27 >> 4;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    std::string v63 = v17;
    int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v28);
    long long v30 = &v29[32 * v25];
    uint64_t v59 = v29;
    std::string v60 = v30;
    char v62 = &v29[32 * v31];
    uint64_t v32 = v64[0];
    *(void *)long long v30 = v14;
    *((void *)v30 + 1) = v32;
    *(void *)(v30 + 15) = *(void *)((char *)v64 + 7);
    v30[23] = v15;
    *((void *)v30 + 3) = a5;
    std::string v61 = v30 + 32;
    std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v24, &v59);
    unint64_t v23 = *v21;
    std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v59);
  }
  else
  {
    uint64_t v22 = v64[0];
    *(void *)unint64_t v20 = v14;
    *(void *)(v20 + 8) = v22;
    *(void *)(v20 + 15) = *(void *)((char *)v64 + 7);
    *(unsigned char *)(v20 + 23) = v15;
    *(void *)(v20 + 24) = a5;
    unint64_t v23 = v20 + 32;
    *std::string::size_type v21 = v20 + 32;
  }
  *std::string::size_type v21 = v23;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (a3 + 1 < a4)
  {
    unint64_t v33 = ~a3 + a4;
    uint64_t v34 = 24 * a3;
    do
    {
      uint64_t v35 = *(void *)(a1 + 16);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v58, (const void **)(a1 + 104), v56);
      int v36 = *(char *)(a2 + 23);
      if (v36 >= 0) {
        uint64_t v37 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v37 = *(const std::string::value_type **)a2;
      }
      if (v36 >= 0) {
        std::string::size_type v38 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v38 = *(void *)(a2 + 8);
      }
      std::string v39 = std::string::append(&v58, v37, v38);
      std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
      v64[0] = v39->__r_.__value_.__l.__size_;
      *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
      char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      uint64_t v42 = v35 + v34;
      unint64_t v43 = *(void *)(v35 + v34 + 32);
      std::string v44 = (unint64_t *)(v35 + v34 + 40);
      if (v43 >= *v44)
      {
        long long v47 = (uint64_t *)(v35 + v34 + 24);
        uint64_t v48 = (uint64_t)(v43 - *v47) >> 5;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = *v44 - *v47;
        if (v50 >> 4 > v49) {
          unint64_t v49 = v50 >> 4;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        std::string v63 = v44;
        unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v51);
        unint64_t v53 = &v52[32 * v48];
        uint64_t v59 = v52;
        std::string v60 = v53;
        char v62 = &v52[32 * v54];
        uint64_t v55 = v64[0];
        *(void *)unint64_t v53 = v40;
        *((void *)v53 + 1) = v55;
        *(void *)(v53 + 15) = *(void *)((char *)v64 + 7);
        v53[23] = v41;
        *((void *)v53 + 3) = a5;
        std::string v61 = v53 + 32;
        std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v47, &v59);
        unint64_t v46 = *(void *)(v42 + 32);
        std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v59);
      }
      else
      {
        uint64_t v45 = v64[0];
        *(void *)unint64_t v43 = v40;
        *(void *)(v43 + 8) = v45;
        *(void *)(v43 + 15) = *(void *)((char *)v64 + 7);
        *(unsigned char *)(v43 + 23) = v41;
        *(void *)(v43 + 24) = a5;
        unint64_t v46 = v43 + 32;
        *(void *)(v42 + 32) = v43 + 32;
      }
      *(void *)(v42 + 32) = v46;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      v34 += 24;
      --v33;
    }
    while (v33);
  }
}

void sub_1C8E8A5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addBILOUTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v115[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a4 - a3;
  uint64_t v9 = *(void *)(a1 + 16);
  int v10 = (uint64_t *)(v9 + 24 * a3);
  int64_t v11 = (const void **)(a1 + 200);
  if (a4 - a3 == 1)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(a1 + 176), v11);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      unint64_t v13 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v13 = *(const std::string::value_type **)a2;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a2 + 8);
    }
    char v15 = std::string::append(&v109, v13, v14);
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
    v115[0] = v15->__r_.__value_.__l.__size_;
    *(void *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = v9 + 24 * a3;
    unint64_t v21 = *(void *)(v18 + 16);
    unint64_t v19 = (unint64_t *)(v18 + 16);
    unint64_t v20 = v21;
    unint64_t v23 = (uint64_t *)(v19 - 1);
    unint64_t v22 = *(v19 - 1);
    if (v22 >= v21)
    {
      uint64_t v42 = (uint64_t)(v22 - *v10) >> 5;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 59) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v44 = v20 - *v10;
      if (v44 >> 4 > v43) {
        unint64_t v43 = v44 >> 4;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      long long v114 = v19;
      unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v45);
      long long v47 = &v46[32 * v42];
      uint64_t v110 = v46;
      long long v111 = v47;
      uint64_t v113 = &v46[32 * v48];
      uint64_t v49 = v115[0];
      *(void *)long long v47 = v16;
      *((void *)v47 + 1) = v49;
      *(void *)(v47 + 15) = *(void *)((char *)v115 + 7);
      v47[23] = v17;
      *((void *)v47 + 3) = a5;
      long long v112 = v47 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v10, &v110);
      unint64_t v25 = *v23;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      uint64_t v24 = v115[0];
      *(void *)unint64_t v22 = v16;
      *(void *)(v22 + 8) = v24;
      *(void *)(v22 + 15) = *(void *)((char *)v115 + 7);
      *(unsigned char *)(v22 + 23) = v17;
      *(void *)(v22 + 24) = a5;
      unint64_t v25 = v22 + 32;
      *unint64_t v23 = v22 + 32;
    }
    *unint64_t v23 = v25;
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(a1 + 80), v11);
    uint64_t v107 = v10;
    int v27 = *(char *)(a2 + 23);
    if (v27 >= 0) {
      unint64_t v28 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v28 = *(const std::string::value_type **)a2;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a2 + 8);
    }
    long long v30 = std::string::append(&v109, v28, v29);
    std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
    v115[0] = v30->__r_.__value_.__l.__size_;
    *(void *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
    char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v33 = v9 + 24 * a3;
    unint64_t v36 = *(void *)(v33 + 16);
    uint64_t v34 = (unint64_t *)(v33 + 16);
    unint64_t v35 = v36;
    std::string::size_type v38 = (uint64_t *)(v34 - 1);
    unint64_t v37 = *(v34 - 1);
    uint64_t v106 = a1;
    if (v37 >= v36)
    {
      uint64_t v50 = (uint64_t)(v37 - *v107) >> 5;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 59) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      std::string v39 = v11;
      uint64_t v52 = v35 - *v107;
      if (v52 >> 4 > v51) {
        unint64_t v51 = v52 >> 4;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      long long v114 = v34;
      uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v53);
      uint64_t v55 = &v54[32 * v50];
      uint64_t v110 = v54;
      long long v111 = v55;
      uint64_t v113 = &v54[32 * v56];
      uint64_t v57 = v115[0];
      *(void *)uint64_t v55 = v31;
      *((void *)v55 + 1) = v57;
      *(void *)(v55 + 15) = *(void *)((char *)v115 + 7);
      v55[23] = v32;
      *((void *)v55 + 3) = a5;
      long long v112 = v55 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v107, &v110);
      unint64_t v41 = *v38;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      std::string v39 = v11;
      uint64_t v40 = v115[0];
      *(void *)unint64_t v37 = v31;
      *(void *)(v37 + 8) = v40;
      *(void *)(v37 + 15) = *(void *)((char *)v115 + 7);
      *(unsigned char *)(v37 + 23) = v32;
      *(void *)(v37 + 24) = a5;
      unint64_t v41 = v37 + 32;
      *std::string::size_type v38 = v37 + 32;
    }
    *std::string::size_type v38 = v41;
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    uint64_t v105 = a4 - 1;
    if (a3 + 1 < (unint64_t)(a4 - 1))
    {
      uint64_t v58 = v8 - 2;
      uint64_t v59 = 24 * a3;
      do
      {
        uint64_t v60 = *(void *)(v106 + 16);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(v106 + 104), v39);
        int v61 = *(char *)(a2 + 23);
        if (v61 >= 0) {
          char v62 = (const std::string::value_type *)a2;
        }
        else {
          char v62 = *(const std::string::value_type **)a2;
        }
        if (v61 >= 0) {
          std::string::size_type v63 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v63 = *(void *)(a2 + 8);
        }
        char v64 = std::string::append(&v109, v62, v63);
        std::string::size_type v65 = v64->__r_.__value_.__r.__words[0];
        v115[0] = v64->__r_.__value_.__l.__size_;
        *(void *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
        char v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        uint64_t v67 = v60 + v59;
        unint64_t v68 = *(void *)(v60 + v59 + 32);
        unint64_t v69 = (unint64_t *)(v60 + v59 + 40);
        if (v68 >= *v69)
        {
          int v72 = (uint64_t *)(v60 + v59 + 24);
          uint64_t v73 = (uint64_t)(v68 - *v72) >> 5;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 59) {
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v75 = *v69 - *v72;
          if (v75 >> 4 > v74) {
            unint64_t v74 = v75 >> 4;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v76 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v74;
          }
          long long v114 = v69;
          unsigned int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v76);
          uint64_t v78 = &v77[32 * v73];
          uint64_t v110 = v77;
          long long v111 = v78;
          uint64_t v113 = &v77[32 * v79];
          uint64_t v80 = v115[0];
          *(void *)uint64_t v78 = v65;
          *((void *)v78 + 1) = v80;
          *(void *)(v78 + 15) = *(void *)((char *)v115 + 7);
          v78[23] = v66;
          *((void *)v78 + 3) = a5;
          long long v112 = v78 + 32;
          std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v72, &v110);
          unint64_t v71 = *(void *)(v67 + 32);
          std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
        }
        else
        {
          uint64_t v70 = v115[0];
          *(void *)unint64_t v68 = v65;
          *(void *)(v68 + 8) = v70;
          *(void *)(v68 + 15) = *(void *)((char *)v115 + 7);
          *(unsigned char *)(v68 + 23) = v66;
          *(void *)(v68 + 24) = a5;
          unint64_t v71 = v68 + 32;
          *(void *)(v67 + 32) = v68 + 32;
        }
        *(void *)(v67 + 32) = v71;
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
        v59 += 24;
        --v58;
      }
      while (v58);
    }
    uint64_t v81 = *(void *)(v106 + 16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(v106 + 128), v39);
    int v82 = *(char *)(a2 + 23);
    if (v82 >= 0) {
      uint64_t v83 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v83 = *(const std::string::value_type **)a2;
    }
    if (v82 >= 0) {
      std::string::size_type v84 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v84 = *(void *)(a2 + 8);
    }
    uint64_t v85 = std::string::append(&v109, v83, v84);
    std::string::size_type v86 = v85->__r_.__value_.__r.__words[0];
    v115[0] = v85->__r_.__value_.__l.__size_;
    *(void *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
    char v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    uint64_t v88 = v81 + 24 * v105;
    unint64_t v91 = *(void *)(v88 + 16);
    int v89 = (unint64_t *)(v88 + 16);
    unint64_t v90 = v91;
    std::string::size_type v93 = (uint64_t *)(v89 - 1);
    unint64_t v92 = *(v89 - 1);
    if (v92 >= v91)
    {
      unint64_t v96 = (uint64_t *)(v81 + 24 * v105);
      uint64_t v97 = (uint64_t)(v92 - *v96) >> 5;
      unint64_t v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 59) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v99 = v90 - *v96;
      if (v99 >> 4 > v98) {
        unint64_t v98 = v99 >> 4;
      }
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v100 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v100 = v98;
      }
      long long v114 = v89;
      unint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v100);
      char v102 = &v101[32 * v97];
      uint64_t v110 = v101;
      long long v111 = v102;
      uint64_t v113 = &v101[32 * v103];
      uint64_t v104 = v115[0];
      *(void *)char v102 = v86;
      *((void *)v102 + 1) = v104;
      *(void *)(v102 + 15) = *(void *)((char *)v115 + 7);
      v102[23] = v87;
      *((void *)v102 + 3) = a5;
      long long v112 = v102 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v96, &v110);
      unint64_t v95 = *v93;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      uint64_t v94 = v115[0];
      *(void *)unint64_t v92 = v86;
      *(void *)(v92 + 8) = v94;
      *(void *)(v92 + 15) = *(void *)((char *)v115 + 7);
      *(unsigned char *)(v92 + 23) = v87;
      *(void *)(v92 + 24) = a5;
      unint64_t v95 = v92 + 32;
      *std::string::size_type v93 = v92 + 32;
    }
    *std::string::size_type v93 = v95;
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E8ABF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v20 < 0) {
    operator delete(v19);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 32)
  {
    long long v8 = *(_OWORD *)(a3 - 32);
    *(void *)(result - 16) = *(void *)(a3 - 16);
    *(_OWORD *)(result - 32) = v8;
    *(void *)(a3 - 24) = 0;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 32) = 0;
    *(void *)(result - 8) = *(void *)(a3 - 8);
    result -= 32;
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(long long ***)(this + 16);
  unint64_t v4 = *(long long ***)(this + 24);
  if (v4 != v3)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](a2, 0xAAAAAAAAAAAAAAABLL * (v4 - v3));
    long long v8 = (std::string *)a2[1];
    uint64_t v9 = v8;
    v6[0] = a2 + 2;
    v6[1] = &v8;
    v6[2] = &v9;
    char v7 = 0;
    uint64_t v5 = v8;
    do
    {
      v5->__r_.__value_.__r.__words[0] = 0;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(v5, *v3, v3[1], ((char *)v3[1] - (char *)*v3) >> 5);
      uint64_t v5 = ++v9;
      v3 += 3;
    }
    while (v3 != v4);
    char v7 = 1;
    this = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
    a2[1] = v5;
  }
  return this;
}

void sub_1C8E8AD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  uint64_t result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    words = result->__r_.__value_.__r.__words;
    char v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(a4);
    void *words = v7;
    words[1] = v7;
    words[2] = (char *)v7 + 32 * v8;
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((uint64_t)(words + 2), a2, a3, v7);
    words[1] = result;
  }
  return result;
}

void sub_1C8E8AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 16);
    unint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      uint64_t v5 = v3;
      std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  int v12 = this;
  unint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      unint64_t v4 = (std::string *)((char *)v8 + 32);
      unint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1C8E8B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = (void **)(result + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    uint64_t v2 = v1;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1CB775C40](v1, 0x20C40A759441BLL);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::string>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x1CB775C40](v1, 0x20C40960023A9);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, std::vector<std::string> *a3)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    int v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)this + 5);
  }
  std::vector<std::string>::reserve(a3, 0);
  std::vector<std::string>::resize(a3, 0);
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)MEMORY[0x1CB775770]();
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v1, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v1);
  }
  return result;
}

void sub_1C8E8B3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360650;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360650;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<std::string>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360210;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360210;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FE20;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    int v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)this + 5);
  }
  std::vector<std::vector<unsigned long>>::reserve(a3, 0);
  std::vector<std::vector<unsigned long>>::resize(a3, 0);
}

void *std::vector<std::vector<unsigned long>>::reserve(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<std::vector<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        uint64_t v16 = a1[1];
        do
        {
          uint64_t v18 = *(void **)(v16 - 24);
          v16 -= 24;
          char v17 = v18;
          if (v18)
          {
            *(void *)(v4 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      v20[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      char v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v10);
      int v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      void v20[3] = &v11[24 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

void **boost::serialization::access::destroy<std::vector<unsigned long>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, void **a3)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v6);
  unint64_t v5 = (void *)((char *)this + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v6 >= 4u)
  {
    int v7 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v5);
  }
  std::vector<unsigned long>::reserve(a3, 0);
  std::vector<unsigned long>::resize((uint64_t)a3, 0);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F23602E8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23602E8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FEF8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23606A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23606A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360258;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360258;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FE68;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360560;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360560;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360138;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360138;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FD48;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360470;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360470;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360060;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360060;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FC70;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v2);
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360AB0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360AB0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v2);
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::load_object_data(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t)(a3[1] - *a3) >> 3;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

void sub_1C8E8C684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360BA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360BA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360B00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360B00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23609C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23609C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23608D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23608D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    __int16 v2 = *(void **)(result + 48);
    if (v2)
    {
      *(void *)(v1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 48, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

void **boost::serialization::access::destroy<std::vector<float>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    __int16 v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::class_info()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, void **a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v6);
  unint64_t v5 = (void *)((char *)this + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v6 >= 4u)
  {
    int v7 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v5);
  }
  std::vector<float>::reserve(a3, 0);
  std::vector<float>::resize(a3, 0);
}

void sub_1C8E8CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void std::vector<float>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v20 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 2)
  {
    bzero(v4, 4 * v6);
    int v20 = &v4[4 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 62) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 1;
  if (v9 >> 1 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v11);
  uint64_t v13 = (char *)*a1;
  size_t v14 = (char *)a1[1];
  uint64_t v15 = &v12[4 * v5];
  char v17 = &v12[4 * v16];
  bzero(v15, 4 * v6);
  uint64_t v18 = &v15[4 * v6];
  while (v14 != v13)
  {
    int v19 = *((_DWORD *)v14 - 1);
    v14 -= 4;
    *((_DWORD *)v15 - 1) = v19;
    v15 -= 4;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
  {
    operator delete(v13);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23606F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23606F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<float>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F23602A0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23602A0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FEB0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360510;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360510;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F23600F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23600F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FD00;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 48, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::class_info()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::load_object_data(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t)(a3[1] - *a3) >> 2;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

void sub_1C8E8D2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360B50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360B50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360970;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360970;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    __int16 v2 = *(void **)(result + 24);
    if (v2)
    {
      *(void *)(v1 + 32) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23604C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23604C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F23600A8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23600A8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FCB8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360920;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360920;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void **boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    int v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)this + 5);
  }
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(a3, 0);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::resize(a3, 0);
}

void std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unint64_t v15 = v3 + 48 * a2;
      while (v4 != v15)
      {
        v4 -= 48;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](v4);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
    {
      size_t v16 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero((void *)a1[1], v16);
      a1[1] = v4 + v16;
    }
    else
    {
      if (a2 > 0x555555555555555) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      v17[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v10 = 0x555555555555555;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v10);
      int v12 = &v11[48 * v5];
      v17[0] = v11;
      v17[1] = v12;
      void v17[3] = &v11[48 * v13];
      size_t v14 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)v17);
    }
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    __int16 v2 = (void **)(result + 24);
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::load_object_data()
{
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

void **boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    int v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)this + 5);
  }
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::reserve(a3, 0);
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::resize(a3, 0);
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    __int16 v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unint64_t v15 = v3 + 48 * a2;
      while (v4 != v15)
      {
        v4 -= 48;
        std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v4);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
    {
      size_t v16 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero((void *)a1[1], v16);
      a1[1] = v4 + v16;
    }
    else
    {
      if (a2 > 0x555555555555555) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      v17[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v10 = 0x555555555555555;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v10);
      int v12 = &v11[48 * v5];
      v17[0] = v11;
      v17[1] = v12;
      void v17[3] = &v11[48 * v13];
      size_t v14 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)v17);
    }
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::load_object_data()
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23603D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23603D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FFD0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F235FFD0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FBE0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360600;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360600;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F23601C8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23601C8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FDD8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360380;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360380;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FF88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F235FF88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FB98;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23605B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23605B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360180;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360180;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FD90;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360420;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360420;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void **boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F2360018;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360018;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FC28;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v2);
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::load_object_data()
{
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this)
{
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v2);
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override();
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::load_object_data()
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360830;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360830;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360A60;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360A60;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F23607E0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F23607E0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360A10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360A10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360880;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360880;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x1CB775C40);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

void *boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::load_object_data(uint64_t a1, uint64_t a2)
{
  __int16 v2 = (void *)(a2 + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((void *)(a2 + 40));
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v2);
  return boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360330;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360330;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x1CB775C40);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::construct()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FF40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F235FF40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_1F235FB50;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1CB775C40);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x1CB775C40);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::load_object_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a2 + 40);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>((void *)(a2 + 40), a3);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(v4, a3 + 8);
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(v4, a3 + 16);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_1F2360790;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)a1 = &unk_1F2360790;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

void snlp::ssu::cache::SSUCacheFileReadStream::SSUCacheFileReadStream(snlp::ssu::cache::SSUCacheFileReadStream *this, const std::__fs::filesystem::path *a2, int a3)
{
}

void sub_1C8E8F634(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, uint64_t a11, std::string *a12, void *__pa, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, long long a20,std::string::size_type a21)
{
  int v25 = (int)a2;
  if (a18 < 0) {
    operator delete(__pa);
  }
  if (SHIBYTE(a12) < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor(v22);
      std::ifstream::~ifstream(v21);
      if (v25 == 2)
      {
        int v27 = __cxa_begin_catch(a1);
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__pa, "I/O stream exception: ");
        std::string::size_type v29 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        long long v30 = std::string::append((std::string *)&__pa, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        a21 = v30->__r_.__value_.__r.__words[2];
        a20 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&a20);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
      }
      if (v25 == 1)
      {
        char v32 = __cxa_begin_catch(a1);
        uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__pa, "Boost serialization exception: ");
        uint64_t v34 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
        unint64_t v35 = std::string::append((std::string *)&__pa, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        a21 = v35->__r_.__value_.__r.__words[2];
        a20 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v33, (const std::string *)&a20);
        v33->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_1C8E8F894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1C8E8F928(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v18);
  __cxa_end_catch();
  JUMPOUT(0x1C8E8F950);
}

void snlp::ssu::cache::SSUCacheFileReadStream::buildArchive(uint64_t a1, int a2)
{
  if (a2) {
    boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl();
  }
  boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::binary_iarchive_impl();
}

void sub_1C8E8F9F8()
{
  boost::archive::detail::basic_iarchive::~basic_iarchive(v0);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

void snlp::ssu::cache::CacheFileException::~CacheFileException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1CB775C40);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectIntentList snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectIntentList>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectIntentList snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectIntentList>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectHeader snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectHeader>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectHeader snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectHeader>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

void boost::archive::binary_iarchive::~binary_iarchive(boost::archive::binary_iarchive *this)
{
}

{
  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive();
}

void boost::archive::text_iarchive::~text_iarchive(boost::archive::text_iarchive *this)
{
}

{
  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

BOOL snlp::ssu::cache::SSUCacheFileReadStream::isAtEnd(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  if (*((void *)this + 94) != *((void *)this + 92)) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 95);
  uint64_t v2 = *((void *)this + 93);
  uint64_t v3 = *((void *)this + 91);
  if (v3) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v1 == v2;
  }
  uint64_t v5 = v4;
  if (v3) {
    BOOL v6 = v1 == v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    return *((unsigned char *)this + 768) != 0;
  }
  return v5;
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getNumNegativeBatches(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return *((void *)this + 92);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getNumPositiveBatches(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return *((void *)this + 93);
}

double snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchNegative@<D0>(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 94) == *((void *)this + 92))
  {
    uint64_t v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_ERROR, "Client tried to read the next negative cached encodings batch when there are none remaining", (uint8_t *)&v10, 2u);
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
  else
  {
    long long v11 = 0u;
    *(_OWORD *)int v12 = 0u;
    long long v10 = 0u;
    uint64_t v13 = &v10;
    uint64_t v6 = *((unsigned int *)this + 174);
    if (v6 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    size_t v14 = &v13;
    ((void (*)(long long ***, char *))off_1F2362700[v6])(&v14, (char *)this + 576);
    uint64_t v7 = *((void *)this + 94) + 1;
    *((void *)this + 94) = v7;
    if (v7 == *((void *)this + 92)
      && snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>((uint64_t)this) != 4660)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Corrupted SSU cache file: invalid terminator after last negative batch");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
    }
    long long v8 = v11;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v8;
    double result = v12[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v12;
    *(unsigned char *)(a2 + 48) = 1;
  }
  return result;
}

void sub_1C8E8FEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::string *a16)
{
  __cxa_free_exception(v16);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  if (a2 == 2)
  {
    int v20 = __cxa_begin_catch(a1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a16, "I/O stream exception: ");
    unint64_t v22 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
    unint64_t v23 = std::string::append((std::string *)&a16, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(v17 - 48) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)(v17 - 64) = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)(v17 - 64));
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
  }
  if (a2 == 1)
  {
    int v25 = __cxa_begin_catch(a1);
    int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a16, "Boost serialization exception: ");
    int v27 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
    unint64_t v28 = std::string::append((std::string *)&a16, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(void *)(v17 - 48) = *((void *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)(v17 - 64) = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, (const std::string *)(v17 - 64));
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
  }
  _Unwind_Resume(a1);
}

void sub_1C8E90088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8E9011C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v21);
  __cxa_end_catch();
  JUMPOUT(0x1C8E90144);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(uint64_t a1)
{
  uint64_t v3 = &v4;
  uint64_t v4 = 0;
  uint64_t v1 = *(unsigned int *)(a1 + 696);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = &v3;
  ((void (*)(uint64_t ***, uint64_t))off_1F2362710[v1])(&v5, a1 + 576);
  return v4;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(void)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(uint64_t a1, uint64_t a2)
{
  return boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((void *)(a2 + 40));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(void)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(uint64_t **a1, uint64_t a2)
{
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>((void *)(a2 + 40), **a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

double snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchPositive@<D0>(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 94) < *((void *)this + 92))
  {
    unint64_t v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      uint64_t v5 = "Client tried to read a positive cached encodings batch when there are still negative batches to be read";
LABEL_7:
      _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v12, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (*((void *)this + 95) == *((void *)this + 93))
  {
    unint64_t v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      uint64_t v5 = "Client tried to read the next positive cached encodings batch when there are none remaining";
      goto LABEL_7;
    }
LABEL_8:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 72) = 0;
    return result;
  }
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  uint64_t v7 = *((unsigned int *)this + 174);
  if (v7 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v18 = &v17;
  ((void (*)(std::string **, char *))off_1F2362720[v7])(&v18, (char *)this + 576);
  uint64_t v8 = *((void *)this + 95) + 1;
  *((void *)this + 95) = v8;
  if (v8 == *((void *)this + 93)
    && snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>((uint64_t)this) != 22136)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Corrupted SSU cache file: invalid terminator after last positive batch");
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  long long v9 = v13;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v9;
  double result = *(double *)&v14;
  long long v10 = v15;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v10;
  *(void *)(a2 + 64) = v16;
  *(unsigned char *)(a2 + 72) = 1;
  return result;
}

void sub_1C8E90440(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::string *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (*(char *)(v20 - 41) < 0)
  {
    operator delete(*(void **)(v20 - 64));
    if ((v19 & 1) == 0)
    {
LABEL_6:
      snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::~SSUCacheObjectEncodingsBatchPositive((snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *)&a9);
      if (a2 == 2)
      {
        uint64_t v23 = __cxa_begin_catch(a1);
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&a18, "I/O stream exception: ");
        int v25 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        int v26 = std::string::append((std::string *)&a18, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(void *)(v20 - 48) = *((void *)&v26->__r_.__value_.__l + 2);
        *(_OWORD *)(v20 - 64) = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)(v20 - 64));
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
      }
      if (a2 == 1)
      {
        unint64_t v28 = __cxa_begin_catch(a1);
        long long v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&a18, "Boost serialization exception: ");
        long long v30 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        long long v31 = std::string::append((std::string *)&a18, v30);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        *(void *)(v20 - 48) = *((void *)&v31->__r_.__value_.__l + 2);
        *(_OWORD *)(v20 - 64) = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v29, (const std::string *)(v20 - 64));
        v29->__vftable = (std::runtime_error_vtbl *)&unk_1F235F210;
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1C8E90630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v25 - 41) < 0) {
    operator delete(*(void **)(v25 - 64));
  }
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_1C8E906C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v23);
  __cxa_end_catch();
  JUMPOUT(0x1C8E906ECLL);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

void snlp::ssu::cache::SSUCacheFileReadStream::readDebugInformation(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 91))
  {
    *((unsigned char *)this + 768) = 1;
    long long v4 = 0u;
    memset(v5, 0, 32);
    v6[0] = (void **)&v4;
    uint64_t v3 = *((unsigned int *)this + 174);
    if (v3 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v7 = v6;
    ((void (*)(void ****, char *))off_1F2362730[v3])(&v7, (char *)this + 576);
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = *(void *)&v5[0];
    long long v4 = 0uLL;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)v5 + 8);
    *(void *)(a2 + 40) = *((void *)&v5[1] + 1);
    memset(v5, 0, 32);
    *(unsigned char *)(a2 + 48) = 1;
    v6[0] = (void **)v5 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
    v6[0] = (void **)&v4;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v6);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
}

void sub_1C8E90874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string *a8)
{
}

void sub_1C8E90A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C8E90A88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v22)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C8E90AE4);
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectDebugInformation snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectDebugInformation snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getIntentList(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return (uint64_t)this + 704;
}

uint64_t snlp::ssu::trigger::SSUTriggerAlways::isTriggered(snlp::ssu::trigger::SSUTriggerAlways *this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  return 0x100000003;
}

void snlp::ssu::trigger::SSUTriggerAlways::~SSUTriggerAlways(snlp::ssu::trigger::SSUTriggerAlways *this)
{
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getUtteranceEmbeddingsSize(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 72);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumSpansTokens(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 96);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumContextTokens(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 144);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumUtteranceEmbeddings(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 48);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getBatchSize(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((void *)this + 1), (unsigned __int8 *)this + 168);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFMModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 48));
  unint64_t v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 72));
  unsigned int v8 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 144));
  unsigned int v9 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 96));
  nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2, v46);
  nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor((uint64_t)v46, NetworkConfig, v7, (uint64_t *)(a1 + 16), &v42, *(float *)(a1 + 40));
  if (v42 == v43)
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 48, v39);
    nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor((uint64_t)v39, NetworkConfig, v9, (uint64_t *)(a1 + 16), &v36, *(float *)(a1 + 40));
    if ((void)v36 == *((void *)&v36 + 1))
    {
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
    }
    else
    {
      nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 96, v33);
      nlv4_inference_orchestrator::inference_engine::utils::padContextTensor((uint64_t)v33, v8, (uint64_t *)(a1 + 16), &v29, *(float *)(a1 + 40));
      if (v29 == v30)
      {
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 144, v26);
        nlv4_inference_orchestrator::inference_engine::utils::padITFMMaskTensor((uint64_t)v26, NetworkConfig, (uint64_t *)(a1 + 16), &v22, *(float *)(a1 + 40));
        if (v22 == v23)
        {
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
        }
        else
        {
          memset(v14, 0, sizeof(v14));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, v42, (uint64_t)v43, (v43 - v42) >> 3);
          memset(v15, 0, sizeof(v15));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, v44, (uint64_t)v45, (v45 - (unsigned char *)v44) >> 2);
          memset(v16, 0, sizeof(v16));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, (const void *)v36, *((uint64_t *)&v36 + 1), (uint64_t)(*((void *)&v36 + 1) - v36) >> 3);
          memset(v17, 0, sizeof(v17));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, v37, (uint64_t)v38, (v38 - (unsigned char *)v37) >> 2);
          memset(v18, 0, sizeof(v18));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 3);
          memset(v19, 0, sizeof(v19));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
          memset(v20, 0, sizeof(v20));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 3);
          memset(v21, 0, sizeof(v21));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21, v24, (uint64_t)v25, (v25 - (unsigned char *)v24) >> 2);
          itfm_inference_orchestrator::inference_engine::ITFMModule::forward(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 8), (uint64_t)v14, (uint64_t)&v10);
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          if (&v10 != (void **)a3)
          {
            std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)a3, (char *)v10, (uint64_t)v11, (v11 - (unsigned char *)v10) >> 3);
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a3 + 24), (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
          }
          if (__p)
          {
            long long v13 = __p;
            operator delete(__p);
          }
          if (v10)
          {
            long long v11 = v10;
            operator delete(v10);
          }
          nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v14);
        }
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        if (v22)
        {
          uint64_t v23 = v22;
          operator delete(v22);
        }
        if (v27)
        {
          unint64_t v28 = v27;
          operator delete(v27);
        }
        if (v26[0])
        {
          v26[1] = v26[0];
          operator delete(v26[0]);
        }
      }
      if (v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      if (v29)
      {
        long long v30 = v29;
        operator delete(v29);
      }
      if (v34)
      {
        unint64_t v35 = v34;
        operator delete(v34);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
    }
    if (v37)
    {
      std::string::size_type v38 = v37;
      operator delete(v37);
    }
    if ((void)v36)
    {
      *((void *)&v36 + 1) = v36;
      operator delete((void *)v36);
    }
    if (v40)
    {
      unint64_t v41 = v40;
      operator delete(v40);
    }
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  if (v44)
  {
    unint64_t v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_1C8E91010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&a15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a39);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a45);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a51);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a57);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a63);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 224));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 176));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 128));
  _Unwind_Resume(a1);
}

void sub_1C8E91114()
{
}

void sub_1C8E9111C()
{
}

void sub_1C8E91124()
{
}

void sub_1C8E9112C()
{
}

void sub_1C8E91134()
{
}

void sub_1C8E9113C()
{
}

void sub_1C8E91144()
{
}

void itfm_inference_orchestrator::inference_engine::EspressoITFMModel::~EspressoITFMModel(void **this)
{
  itfm_inference_orchestrator::inference_engine::EspressoITFMModel::~EspressoITFMModel(this);
  JUMPOUT(0x1CB775C40);
}

{
  void *v2;

  *this = &unk_1F235EC98;
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v2 = this[1];
  this[1] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

void itfm_inference_orchestrator::inference_engine::EspressoITFMModel::EspressoITFMModel(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = &unk_1F235EC98;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v5 && *((_DWORD *)v5 + 16) == 4)
  {
    if ((char)v5[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *((const std::string::value_type **)v5 + 5), *((void *)v5 + 6));
    }
    else
    {
      long long v6 = *(_OWORD *)(v5 + 40);
      *(void *)(a1 + 32) = *((void *)v5 + 7);
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "UNDEFINED_COMPONENT");
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "max_num_utterance_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 72), "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 96), "max_num_spans_tokens");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 120), "spans_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 144), "max_num_context_tokens");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 168), "batch_size");
  operator new();
}

void sub_1C8E914BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *(void *)(v19 + 8);
  *(void *)(v19 + 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1C8E91628()
{
}

void sub_1C8E91630()
{
}

void sub_1C8E91638()
{
}

void sub_1C8E91640()
{
}

void sub_1C8E91648()
{
}

void sub_1C8E91650()
{
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::~ITFMModule(void **this)
{
  *this = &unk_1F235EC78;
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t vars8;

  *this = &unk_1F235EC78;
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)this);
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::TransformerDecoderE5MLModule(uint64_t a1, char *a2, uint64_t a3, long long *a4)
{
  int v8 = 0;
  uint64_t v5 = (void *)(snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, a3, &v8, (unsigned __int8 *)a1, a4)+ 352);
  std::string::basic_string[abi:ne180100]<0>(v5, "old_prediction");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 376), "hidden");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 400), "memory");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 424), "encodings");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 448), "num_of_utterance_tokens");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 472), "attention_index");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 496), "out_predictions");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 520), "out_new_hidden");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 544), "out_new_memory");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 568), "out_new_attention_index");
  long long v6 = *(std::__shared_weak_count **)(a1 + 184);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _os_feature_enabled_impl();
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C8E9191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11)
{
  if (v11[591] < 0) {
    operator delete(*v12);
  }
  if (v11[567] < 0) {
    operator delete(*v16);
  }
  if (v11[543] < 0) {
    operator delete(*v19);
  }
  if (v11[519] < 0) {
    operator delete(*v18);
  }
  if (v11[495] < 0) {
    operator delete(*v17);
  }
  if (v11[471] < 0) {
    operator delete(*v15);
  }
  if (v11[447] < 0) {
    operator delete(*v14);
  }
  if (v11[423] < 0) {
    operator delete(*v13);
  }
  if (v11[399] < 0) {
    operator delete(*a10);
  }
  if (v11[375] < 0) {
    operator delete(*a11);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v11);
  _Unwind_Resume(a1);
}

void sub_1C8E91A24()
{
}

void sub_1C8E91A2C()
{
}

void sub_1C8E91A34()
{
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(E5RT::ExecutionStreamOperation **this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *a2@<X1>, void *a3@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::setInputs((nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *)this, a2);
  long long v6 = (std::__shared_weak_count *)this[23];
  unint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[3]);
  E5RT::ExecutionStream::ResetStream(this[3]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::getOutputs((nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *)this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this);
}

void sub_1C8E91ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType(v10);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::setInputs(nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 400, (uint64_t)a2 + 96);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 424, (uint64_t)a2 + 144);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 448, (uint64_t)a2 + 240);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 472, (uint64_t)a2 + 192);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::getOutputs(nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *this@<X0>, void *a2@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 496, &v13);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 520, &v10);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 544, &v7);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 568, &v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_, (uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_, (uint64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) >> 3);
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 9, v11, (uint64_t)v12, (v12 - (unsigned char *)v11) >> 2);
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 12, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_, (uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3);
  a2[15] = 0;
  a2[16] = 0;
  a2[17] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 15, v8, (uint64_t)v9, (v9 - (unsigned char *)v8) >> 2);
  a2[18] = 0;
  a2[19] = 0;
  a2[20] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 18, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_, (uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3);
  a2[21] = 0;
  a2[22] = 0;
  a2[23] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 21, __p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    long long v6 = __p;
    operator delete(__p);
  }
  if (v4.__r_.__value_.__r.__words[0])
  {
    v4.__r_.__value_.__l.__size_ = v4.__r_.__value_.__r.__words[0];
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    unsigned int v9 = v8;
    operator delete(v8);
  }
  if (v7.__r_.__value_.__r.__words[0])
  {
    v7.__r_.__value_.__l.__size_ = v7.__r_.__value_.__r.__words[0];
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
  if (v10.__r_.__value_.__r.__words[0])
  {
    v10.__r_.__value_.__l.__size_ = v10.__r_.__value_.__r.__words[0];
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
  if (v13.__r_.__value_.__r.__words[0])
  {
    v13.__r_.__value_.__l.__size_ = v13.__r_.__value_.__r.__words[0];
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E91D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  int v26 = v23;
  unint64_t v28 = *v26;
  if (*v26)
  {
    *((void *)v21 + 19) = v28;
    operator delete(v28);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v24);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v22);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v25 - 80));
  _Unwind_Resume(a1);
}

void sub_1C8E91E0C()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C8E91DE4);
}

void sub_1C8E91E24()
{
}

void sub_1C8E91E2C()
{
}

void sub_1C8E91E34()
{
}

void sub_1C8E91E3C()
{
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1CB775C40);
}

{
  *(void *)this = &unk_1F235F510;
  espresso_plan_destroy();
  espresso_context_destroy();
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 40);
}

void *snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F235F510;
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map((uint64_t)(a1 + 5), a3);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::deserialiseModule(a1);
  return a1;
}

void sub_1C8E91F44(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::deserialiseModule(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t context = espresso_create_context();
  a1[1] = context;
  if (!context)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not deserialise espresso context.");
    goto LABEL_33;
  }
  uint64_t plan = espresso_create_plan();
  a1[2] = plan;
  if (!plan)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create espresso plan.");
LABEL_33:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v4 = espresso_plan_add_network();
  if (v4)
  {
    int v13 = v4;
    long long v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, v13);
    long long v15 = std::string::insert(&v19, 0, "Could not set up espresso network. Got error status: ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &buf);
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "bolt_task_id");
  std::string::basic_string[abi:ne180100]<0>(&v18, "not_found");
  uint64_t v5 = a1 + 5;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19))
  {
    long long v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v6 + 16) == 4)
    {
      std::string v7 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19);
      if (!v7) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (*((_DWORD *)v7 + 16) != 4) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string::operator=(&v18, (const std::string *)(v7 + 40));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)&buf);
  if (v8 && *((_DWORD *)v8 + 16) == 4)
  {
    if ((char)v8[63] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 5), *((void *)v8 + 6));
    }
    else {
      std::string __p = *(std::string *)(v8 + 40);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  unsigned int v9 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v11 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    _os_log_impl(&dword_1C8DA9000, v9, OS_LOG_TYPE_DEBUG, "[%s] [model_task_id=%s]", (uint8_t *)&buf, 0x16u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E922A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result = espresso_plan_build();
  if (result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E923C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to execute espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E9243C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result = espresso_plan_build_clean();
  if (result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E924B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)(a1 + 40);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 40), a2))
  {
    int v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
    if (!v4) {
      goto LABEL_31;
    }
    if (*((_DWORD *)v4 + 16) == 1)
    {
      uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
      if (v5)
      {
        if (*((_DWORD *)v5 + 16) != 1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        return *((unsigned int *)v5 + 10);
      }
LABEL_31:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  std::string v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, (unsigned __int8 *)__p);
  if (v7 && *((_DWORD *)v7 + 16) == 4)
  {
    if ((char)v7[63] < 0) {
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)v7 + 5), *((void *)v7 + 6));
    }
    else {
      std::string v16 = *(std::string *)(v7 + 40);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>();
  int v8 = std::string::append(&v15, ".\n");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string v10 = std::string::append(&v19, "Note that only parameters of unsigned integer type are currently expected by SiriNaturalLanguageParsing.  This issue will likely cause SiriNaturalLanguageParsing to fail.");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v18 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  long long v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v13 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    long long v14 = __p;
    if (v18 < 0) {
      long long v14 = (void **)__p[0];
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v19, 0x16u);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C8E9271C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  espresso_buffer_pack_tensor_shape();
  int v7 = 65568;
  uint64_t result = espresso_network_bind_buffer();
  if (result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C8E92868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(uint64_t a1@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v14 = 65568;
  if (espresso_network_bind_buffer())
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v12 = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  long long v11 = 0uLL;
  std::string __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, &v15, (uint64_t)&v15 + 8 * v12, v12);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  unint64_t v3 = (char *)__p;
  *(void *)a1 = __p;
  int v4 = (char *)v11;
  *(_OWORD *)(a1 + 8) = v11;
  if (v4 == v3)
  {
    unint64_t v8 = 1;
  }
  else
  {
    if ((unint64_t)((v4 - v3) >> 3) <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = (v4 - v3) >> 3;
    }
    int v6 = 1;
    do
    {
      int v7 = *(_DWORD *)v3;
      v3 += 8;
      v6 *= v7;
      --v5;
    }
    while (v5);
    unint64_t v8 = v6;
  }
  std::string __p = 0;
  long long v11 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v13, (uint64_t)v13 + 4 * v8, v8);
  if ((void **)(a1 + 24) != &__p) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), (char *)__p, v11, (uint64_t)(v11 - (void)__p) >> 2);
  }
  free(v13);
  if (__p)
  {
    *(void *)&long long v11 = __p;
    operator delete(__p);
  }
}

void sub_1C8E92A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (*(char *)(v12 - 97) < 0)
  {
    operator delete(*(void **)(v12 - 120));
    if ((v11 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v11)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v10);
  goto LABEL_6;
}

void snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf()
{
}

void sub_1C8E92BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertNLv4SpanResponseToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2AA8]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E92C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertNLv4ContextResponseToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A98]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E92D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertNLv4AssetVersionToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A90]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E92E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertNLv4ExecutedHandcraftedRulesToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2AA0]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E92F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertITFMSpanResponseToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A88]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E92FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertITFMContextResponseToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A78]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E930E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertITFMAssetVersionToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A70]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E931DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertITFMExecutedHandcraftedRulesToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2A80]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E932D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void snlp::common::logging::feature_store_utilities::insertSSUEncodingResultToFeatureStore()
{
  id v0 = objc_alloc(MEMORY[0x1E4FA2AB0]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf();
}

void sub_1C8E933A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8E9348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8E937C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getNLv4SupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"NLv4SupportedGenerationList"];
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getSSUSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"SSUSupportedGenerationList"];
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getPSCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"PSCSupportedGenerationList"];
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getSNLCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"SNLCSupportedGenerationList"];
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getLVCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"LVCSupportedGenerationList"];
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getITFMSupportedGenerationNumbers@<X0>(unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *result@<X0>, uint64_t a2@<X8>)
{
  switch((unint64_t)result)
  {
    case 1uLL:
      uint64_t v2 = @"SNLCSupportedGenerationList";
      goto LABEL_4;
    case 2uLL:
      uint64_t v2 = @"PSCSupportedGenerationList";
      goto LABEL_4;
    case 3uLL:
      uint64_t v2 = @"LVCSupportedGenerationList";
LABEL_4:
      uint64_t result = +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:v2];
      break;
    default:
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 32) = 1065353216;
      break;
  }
  return result;
}

uint64_t SNLPAssetVersionChecks::getNLv4SupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[2] = xmmword_1C8F3BA60;
  void v3[3] = unk_1C8F3BA70;
  v3[4] = xmmword_1C8F3BA80;
  v3[5] = unk_1C8F3BA90;
  v3[0] = xmmword_1C8F3BA40;
  v3[1] = unk_1C8F3BA50;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)v3, 24);
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1C8E93A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SNLPAssetVersionChecks::getSSUSupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v3 = xmmword_1C8F38640;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)&v3, 4);
}

uint64_t SNLPAssetVersionChecks::getITFMSupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[2] = xmmword_1C8F3BAC0;
  void v3[3] = unk_1C8F3BAD0;
  v4[0] = xmmword_1C8F3BAE0;
  *(_OWORD *)((char *)v4 + 12) = *(long long *)((char *)&xmmword_1C8F3BAE0 + 12);
  v3[0] = xmmword_1C8F3BAA0;
  v3[1] = unk_1C8F3BAB0;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)v3, 23);
}

uint64_t SNLPAssetVersionChecks::isAssetVersionValid(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned char *)(a2 + 4)
    && std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(*(void *)a4, *(void *)(a4 + 8), *(_DWORD *)a2)|| std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(*(void *)a5, *(void *)(a5 + 8), *(_DWORD *)(a3 + 16)))
  {
    return 1;
  }
  if (v10) {
    std::to_string(&v55, *(_DWORD *)a2);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v55, "unknown");
  }
  uint64_t v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v13 = a1;
    if (*((char *)a1 + 23) < 0) {
      int v13 = (uint64_t *)*a1;
    }
    std::operator+<char>();
    int v14 = std::string::append(&v44, " asset (generation: ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v55;
    }
    else {
      uint64_t v16 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    int64_t v18 = std::string::append(&v45, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v46, ", NCV: ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, *(_DWORD *)(a3 + 16));
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v43;
    }
    else {
      int v22 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v47, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v48, ") is incompatible with the inference runtime (compatible generations: [");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a4, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v28 = &v42;
    }
    else {
      unint64_t v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v42.__r_.__value_.__l.__size_;
    }
    long long v30 = std::string::append(&v49, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    long long v32 = std::string::append(&v50, "], compatible NCV numbers: [");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
    }
    long long v36 = std::string::append(&v51, (const std::string::value_type *)p_p, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v38 = std::string::append(&v52, "])");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    int64_t v54 = v38->__r_.__value_.__r.__words[2];
    long long v53 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    uint64_t v40 = &v53;
    if (v54 < 0) {
      uint64_t v40 = (long long *)v53;
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v57 = v13;
    __int16 v58 = 2080;
    uint64_t v59 = v40;
    _os_log_impl(&dword_1C8DA9000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", buf, 0x16u);
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
  }

  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C8E93F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (*(char *)(v67 - 153) < 0) {
    operator delete(*(void **)(v67 - 176));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v67 - 185) < 0) {
    operator delete(*(void **)(v67 - 208));
  }
  if (*(char *)(v67 - 217) < 0) {
    operator delete(*(void **)(v67 - 240));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }

  if (*(char *)(v67 - 97) < 0) {
    operator delete(*(void **)(v67 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void SNLPAssetVersionChecks::assertAssetVersionValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v51 = *(std::string *)a1;
  }
  char isAssetVersionValid = SNLPAssetVersionChecks::isAssetVersionValid((uint64_t *)&v51, a2, a3, a4, a5);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if ((isAssetVersionValid & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 4)) {
      std::to_string(&v50, *(_DWORD *)a2);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v50, "unknown");
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v11 = std::string::append(&v40, " asset (generation: ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v50;
    }
    else {
      int v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    long long v15 = std::string::append(&v41, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::string v17 = std::string::append(&v42, ", NCV: ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, *(_DWORD *)(a3 + 16));
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &v39;
    }
    else {
      long long v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v39.__r_.__value_.__l.__size_;
    }
    long long v21 = std::string::append(&v43, (const std::string::value_type *)v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v23 = std::string::append(&v44, ") is incompatible with the inference runtime (compatible generations: [");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a4, &v38);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v25 = &v38;
    }
    else {
      long long v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v38.__r_.__value_.__l.__size_;
    }
    long long v27 = std::string::append(&v45, (const std::string::value_type *)v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v29 = std::string::append(&v46, "], compatible NCV numbers: [");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a5, &v37);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v31 = &v37;
    }
    else {
      long long v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v37.__r_.__value_.__l.__size_;
    }
    long long v33 = std::string::append(&v47, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v35 = std::string::append(&v48, "])");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v49);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
}

void sub_1C8E94464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (*(char *)(v68 - 121) < 0) {
    operator delete(*(void **)(v68 - 144));
  }
  if (*(char *)(v68 - 153) < 0) {
    operator delete(*(void **)(v68 - 176));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v68 - 185) < 0) {
    operator delete(*(void **)(v68 - 208));
  }
  if (*(char *)(v68 - 217) < 0) {
    operator delete(*(void **)(v68 - 240));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v66 & 1) == 0)
    {
LABEL_30:
      if (*(char *)(v68 - 97) < 0) {
        operator delete(*(void **)(v68 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_30;
  }
  __cxa_free_exception(v67);
  goto LABEL_30;
}

void nlv4_inference_orchestrator::trees::TagExpander::expandTags(unint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  nlv4_inference_orchestrator::trees::TagExpander::expandMultiTagTags(a1, a2, v5);
  nlv4_inference_orchestrator::trees::TagExpander::expandNextTags(a1, v5, a3);
  int v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1C8E94678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::trees::TagExpander::expandMultiTagTags@<X0>(uint64_t result@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a2;
  std::string::size_type v20 = a2[1];
  if (*a2 != v20)
  {
    uint64_t v5 = (char *)result;
    int v6 = a3 + 2;
    do
    {
      unint64_t v7 = v6;
      if (v4[23] < 0)
      {
        long long v9 = *(char **)v4;
        uint64_t v8 = *((void *)v4 + 1);
      }
      else
      {
        uint64_t v8 = v4[23];
        long long v9 = v4;
      }
      int v10 = v5[23];
      if (v10 >= 0) {
        int v11 = v5;
      }
      else {
        int v11 = *(char **)v5;
      }
      if (v10 >= 0) {
        int64_t v12 = v5[23];
      }
      else {
        int64_t v12 = *((void *)v5 + 1);
      }
      if (!v12) {
        goto LABEL_26;
      }
      if (v8 >= v12)
      {
        int v14 = &v9[v8];
        int v15 = *v11;
        long long v16 = v9;
        while (1)
        {
          uint64_t v17 = v8 - v12;
          if (v17 == -1) {
            goto LABEL_14;
          }
          long long v18 = (char *)memchr(v16, v15, v17 + 1);
          if (!v18) {
            goto LABEL_14;
          }
          long long v19 = v18;
          if (!memcmp(v18, v11, v12)) {
            break;
          }
          long long v16 = v19 + 1;
          uint64_t v8 = v14 - (v19 + 1);
          if (v8 < v12) {
            goto LABEL_14;
          }
        }
        if (v19 != v14 && v19 - v9 != -1) {
LABEL_26:
        }
          nlv4_inference_orchestrator::trees::TagExpander::splitTagBySeparator((uint64_t *)v5, (int)v4);
      }
LABEL_14:
      unint64_t v13 = a3[1];
      if (v13 >= a3[2])
      {
        uint64_t result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, (long long *)v4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (long long *)v4);
        uint64_t result = v13 + 24;
      }
      int v6 = v7;
      a3[1] = result;
      v4 += 24;
    }
    while (v4 != v20);
  }
  return result;
}

void sub_1C8E94AC0(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, std::__split_buffer<std::string> *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  *(void *)(v19 + 8) = v20;
  a19 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

unint64_t nlv4_inference_orchestrator::trees::TagExpander::expandNextTags@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = result;
    unint64_t v7 = result + 24;
    unint64_t v8 = result + 72;
    long long v9 = (long long *)(result + 48);
    do
    {
      int v10 = *(char *)(v3 + 23);
      BOOL v11 = v10 < 0;
      int64_t v12 = *(unsigned __int8 **)v3;
      if (v10 >= 0) {
        int64_t v12 = (unsigned __int8 *)v3;
      }
      uint64_t v13 = *(unsigned __int8 *)(v3 + 23);
      if (v11) {
        uint64_t v13 = *(void *)(v3 + 8);
      }
      int v14 = *(char *)(v5 + 47);
      BOOL v15 = v14 < 0;
      long long v16 = *(unsigned __int8 **)(v5 + 24);
      if (v14 >= 0) {
        long long v16 = (unsigned __int8 *)v7;
      }
      uint64_t v17 = *(unsigned __int8 *)(v5 + 47);
      if (v15) {
        uint64_t v17 = *(void *)(v5 + 32);
      }
      if (v13) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        long long v28 = v16;
LABEL_17:
        if (v28 == &v16[v17])
        {
          int v19 = *(char *)(v5 + 95);
          BOOL v20 = v19 < 0;
          unint64_t v21 = *(void *)(v5 + 72);
          if (v19 >= 0) {
            unint64_t v21 = v8;
          }
          uint64_t v22 = *(unsigned __int8 *)(v5 + 95);
          if (v20) {
            uint64_t v22 = *(void *)(v5 + 80);
          }
          std::string::size_type v23 = v12 - 1;
          while (v13 && v22)
          {
            int v24 = v23[v13];
            int v25 = *(unsigned __int8 *)(v21 + v22 - 1);
            --v13;
            --v22;
            if (v24 != v25) {
              goto LABEL_32;
            }
          }
          if (v21 + v22 == v21)
          {
            uint64_t result = nlv4_inference_orchestrator::trees::TagExpander::extractNumberOfNextTags(v5, v3);
            if (v32)
            {
              unint64_t v33 = result;
              for (uint64_t i = a3; v33; --v33)
                uint64_t result = (unint64_t)std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, v9);
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        uint64_t v26 = v17 - 1;
        uint64_t v27 = v13 - 1;
        long long v28 = v16;
        std::string::size_type v29 = v12;
        while (*v29 == *v28)
        {
          ++v28;
          if (v27)
          {
            ++v29;
            uint64_t v30 = v26--;
            --v27;
            if (v30) {
              continue;
            }
          }
          goto LABEL_17;
        }
      }
LABEL_32:
      unint64_t v31 = a3[1];
      if (v31 >= a3[2])
      {
        uint64_t result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, (long long *)v3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (long long *)v3);
        uint64_t result = v31 + 24;
      }
      a3[1] = result;
LABEL_36:
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1C8E94CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t nlv4_inference_orchestrator::trees::TagExpander::extractNumberOfNextTags(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 47) < 0) {
    std::string::size_type v2 = *(void *)(a1 + 32);
  }
  else {
    std::string::size_type v2 = *(unsigned __int8 *)(a1 + 47);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v4 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 95);
  }
  std::string::basic_string(&__p, (const std::string *)a2, v2, v3 + ~v4, (std::allocator<char> *)&v10);
  int v5 = std::stoi(&__p, 0, 10);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  uint64_t v7 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6 | v7;
}

void nlv4_inference_orchestrator::trees::TagExpander::splitTagBySeparator(uint64_t *a1, int a2)
{
  __dst[3] = *MEMORY[0x1E4F143B8];
  LODWORD(v3) = *((char *)a1 + 23);
  BOOL v4 = (int)v3 < 0;
  int v5 = (uint64_t *)*a1;
  uint64_t v6 = a1[1];
  if ((int)v3 >= 0) {
    int v5 = a1;
  }
  memset(v7, 0, sizeof(v7));
  v8[0] = v5;
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v6;
  }
  v8[1] = (char *)v5 + v3;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(__dst, (uint64_t)v8);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((int)v7, a2, __dst, 0);
}

void sub_1C8E94F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(void *__dst, uint64_t a2)
{
  *long long __dst = 0;
  BOOL v4 = *(unsigned char **)a2;
  int v5 = *(unsigned char **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11) {
    operator new[]();
  }
  if (v5 != v4) {
    memmove(__dst, v4, v5 - v4);
  }
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

void boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(int a1, int a2, void *__src, int a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  size_t v5 = __src[2];
  __uint64_t n = v5;
  __srca[0] = 0;
  if (v5 < 0x11)
  {
    memcpy(__srca, __src, v5);
    size_t v30 = __n;
    v29[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v29, __srca, __n);
      size_t v9 = v30;
      __dst[0] = 0;
      if (v30 <= 0x10)
      {
        memcpy(__dst, v29, v30);
        int v10 = a4;
        size_t v24 = v9;
        v23[0] = 0;
        if (v9 < 0x11)
        {
          memcpy(v23, __dst, v9);
          int v25 = a4;
          size_t v18 = v24;
          v17[0] = 0;
          if (v24 < 0x11)
          {
            memcpy(v17, v23, v24);
            int v19 = a4;
            size_t v12 = v18;
            v11[0] = 0;
            if (v18 < 0x11)
            {
              memcpy(v11, v17, v18);
              int v13 = a4;
              size_t v15 = v12;
              v14[0] = 0;
              if (v12 < 0x11)
              {
                memcpy(v14, v11, v12);
                int v16 = a4;
                size_t v21 = v15;
                v20[0] = 0;
                if (v15 < 0x11)
                {
                  memcpy(v20, v14, v15);
                  int v22 = a4;
                  size_t v27 = v21;
                  v26[0] = 0;
                  if (v21 < 0x11)
                  {
                    memcpy(v26, v20, v21);
                    int v28 = a4;
                    size_t v30 = v27;
                    v29[0] = 0;
                    if (v27 < 0x11)
                    {
                      memcpy(v29, v26, v27);
                      int v31 = a4;
                      operator new();
                    }
                    operator new[]();
                  }
                  operator new[]();
                }
                operator new[]();
              }
              operator new[]();
            }
            operator new[]();
          }
          operator new[]();
        }
        operator new[]();
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_1C8E9584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x1CB775C40](v63, 0x1012C405C87E9CELL);
  uint64_t v72 = *(void *)(v70 - 184);
  if (v72) {
    MEMORY[0x1CB775C10](v72, 0x1000C8077774924);
  }
  if (v69 >= 0x11 && STACK[0x2B8]) {
    MEMORY[0x1CB775C10](STACK[0x2B8], 0x1000C8077774924);
  }
  if (v68 >= 0x11 && STACK[0x248]) {
    MEMORY[0x1CB775C10](STACK[0x248], 0x1000C8077774924);
  }
  if (v67 >= 0x11 && a63) {
    MEMORY[0x1CB775C10](a63, 0x1000C8077774924);
  }
  if (v66 >= 0x11 && a53) {
    MEMORY[0x1CB775C10](a53, 0x1000C8077774924);
  }
  if (v65 >= 0x11 && STACK[0x200]) {
    MEMORY[0x1CB775C10](STACK[0x200], 0x1000C8077774924);
  }
  if (v64 >= 0x11 && STACK[0x298]) {
    MEMORY[0x1CB775C10](STACK[0x298], 0x1000C8077774924);
  }
  if (a11 >= 0x11 && a49) {
    MEMORY[0x1CB775C10](a49, 0x1000C8077774924);
  }
  if (a12 >= 0x11)
  {
    if (a46) {
      MEMORY[0x1CB775C10](a46, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *(void *)a1 = v4;
    if (v4)
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      *(void *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, void))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  return a1;
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))((*(void *)a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 8, *(void *)(a1 + 48), v2);
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t result = v4;
  }
  BOOL v5 = result == v2 && v4 == v2;
  if (v5 && *(void *)(a1 + 40) == v2) {
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 48) = v4;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(uint64_t a1, char *a2, char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  BOOL v5 = *(_DWORD **)a1;
  size_t v6 = *(void *)(*(void *)a1 + 16);
  unint64_t v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v9, v5, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v9, *a2)) {
      goto LABEL_8;
    }
    ++a2;
  }
  a2 = a3;
LABEL_8:
  if (v10 >= 0x11 && v9[0]) {
    MEMORY[0x1CB775C10](v9[0], 0x1000C8077774924);
  }
  if (a2 == a3) {
    return a3;
  }
  if (!v5[6])
  {
    uint64_t v7 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v7)) {
        break;
      }
      ++v7;
    }
    while (v7 != a3);
  }
  return a2;
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(void *a1, int a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (void *)*a1;
    uint64_t v3 = (void *)((char *)a1 + v2);
  }
  else
  {
    uint64_t v3 = (void *)((char *)a1 + v2);
    if (!v2) {
      return a1 != v3 && *(char *)a1 <= a2;
    }
  }
  do
  {
    uint64_t v4 = (char *)a1 + (v2 >> 1);
    int v6 = *v4;
    BOOL v5 = v4 + 1;
    unint64_t v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2) {
      a1 = v5;
    }
    else {
      unint64_t v2 = v7;
    }
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      BOOL v5 = *(void **)a2;
      if (*(void *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5) {
            MEMORY[0x1CB775C10](*v5, 0x1000C8077774924);
          }
        }
        uint64_t result = MEMORY[0x1CB775C40](v5, 0x1012C405C87E9CELL);
      }
      goto LABEL_12;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001C8F3C18CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001C8F3C18CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_12:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1C8E95F80(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void *snlp::ssu::candidate::operator<<(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUAlternativeCandidateInfo[\n", 29);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    generatedUtterance='", 24);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    relevantIntents={\n", 22);
  size_t v9 = *(uint64_t **)(a2 + 40);
  uint64_t v26 = 0;
  v27[0] = 0;
  unint64_t v25 = 0;
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v9;
    do
    {
      ++v10;
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
    v27[1] = &v25;
    char v28 = 0;
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](&v25, v10);
    int v31 = v26;
    uint64_t v32 = v26;
    v29[0] = (void **)v27;
    v29[1] = (void **)&v31;
    void v29[2] = (void **)&v32;
    char v30 = 0;
    size_t v12 = v26;
    do
    {
      if (*((char *)v9 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v9[2], v9[3]);
        size_t v12 = v32;
      }
      else
      {
        long long v13 = *((_OWORD *)v9 + 1);
        v12->__r_.__value_.__r.__words[2] = v9[4];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      size_t v9 = (uint64_t *)*v9;
      uint64_t v32 = ++v12;
    }
    while (v9);
    char v30 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v29);
    uint64_t v26 = v12;
    unint64_t v14 = v25;
  }
  else
  {
    size_t v12 = 0;
    unint64_t v14 = 0;
  }
  unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v12 - v14) >> 3));
  if (v12 == (std::string *)v14) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v14, (__n128 *)v12, v16, 1);
  uint64_t v17 = v25;
  size_t v18 = v26;
  if ((std::string *)v25 != v26)
  {
    do
    {
      int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"      ", 6);
      int v20 = *(char *)(v17 + 23);
      if (v20 >= 0) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = *(void *)v17;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v17 + 8);
      }
      std::string::size_type v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\n", 2);
      v17 += 24;
    }
    while ((std::string *)v17 != v18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  }]", 4);
  v29[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  return a1;
}

{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUCandidate[\n", 14);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  originalUtterance='", 21);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  if (*(unsigned char *)(a2 + 88))
  {
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  alternativeCandidateInfo=", 27);
    if (!*(unsigned char *)(a2 + 88)) {
      goto LABEL_16;
    }
    unint64_t v10 = snlp::ssu::candidate::operator<<(v9, a2 + 24);
    uint64_t v11 = ",\n";
    size_t v12 = 2;
  }
  else
  {
    uint64_t v11 = "  alternativeCandidateInfo=<not alternative candidate>,\n";
    unint64_t v10 = a1;
    size_t v12 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if (!*(unsigned char *)(a2 + 184))
  {
    unint64_t v15 = "  relatedEntity=<no related entity>\n";
    unint64_t v14 = a1;
    uint64_t v16 = 36;
    goto LABEL_15;
  }
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  relatedEntity=", 16);
  if (!*(unsigned char *)(a2 + 184)) {
LABEL_16:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  unint64_t v14 = snlp::ssu::proto::operator<<(v13, a2 + 96);
  unint64_t v15 = "\n";
  uint64_t v16 = 1;
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_1C8E961D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::candidate::SSUCandidate::toString(snlp::ssu::candidate::SSUCandidate *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  snlp::ssu::candidate::operator<<(v5, (uint64_t)this);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v7);
}

void sub_1C8E964B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::SSUNessieModel(uint64_t a1, char *a2, void *a3, uint64_t a4, char a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "output_encoding_dim");
  uint64_t NetworkConfig = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = NetworkConfig;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_seq_len");
  uint64_t v11 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "min_batch_size");
  uint64_t v12 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = snlp::ssu::espresso::SSUNessieModel::getMaxBatchSizeOrDefault(a3, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8);
  char v17 = 14;
  strcpy((char *)__p, "max_batch_size");
  unsigned int v14 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  snlp::ssu::espresso::SSUNessieModel::buildModuleWithValidation((void *)a1, a2, v13, v14, *(void *)(a1 + 24), a1 + 32);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 528) = 850045863;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  return a1;
}

void sub_1C8E96648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (*((_DWORD *)v2 + 16) != 1)
  {
    int v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v5, &v9);
    v5->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  return *((unsigned int *)v2 + 10);
}

void sub_1C8E967C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getMaxBatchSizeOrDefault(void *a1, uint64_t a2, char a3)
{
  char v8 = 14;
  strcpy((char *)__p, "max_batch_size");
  unsigned int NetworkConfig = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a1, (unsigned __int8 *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (a3) {
    return a2;
  }
  else {
    return NetworkConfig;
  }
}

void sub_1C8E968B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::buildModuleWithValidation@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (!*a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config output encoding dimension must be non-zero");
    std::runtime_error::runtime_error(exception, &v54);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (!a1[1])
  {
    unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config max sequence length must be non-zero");
    std::runtime_error::runtime_error(v10, &v54);
    v10->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t v6 = a1[2];
  if (!v6)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config min batch size must be non-zero");
    std::runtime_error::runtime_error(v11, &v54);
    v11->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (v6 > a4)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a1[2]);
    unsigned int v14 = std::string::insert(&v50, 0, "SSUNessieModel config min batch size (");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v51, ") exceeds the max batch size (");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a4);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v18 = &v49;
    }
    else {
      size_t v18 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v49.__r_.__value_.__l.__size_;
    }
    int v20 = std::string::append(&v52, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    char v22 = std::string::append(&v53, ")");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v13, &v54);
    v13->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (v6 > a5)
  {
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a5);
    size_t v27 = std::string::insert(&v50, 0, "SSUNessieModel instance max batch size (");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v29 = std::string::append(&v51, ") is less than the config min batch size (");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a1[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v31 = &v49;
    }
    else {
      int v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v33 = std::string::append(&v52, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v35 = std::string::append(&v53, ")");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v54);
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (a5 > a4)
  {
    std::string v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a5);
    std::string v39 = std::string::insert(&v50, 0, "SSUNessieModel instance max batch size (");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::string v41 = std::string::append(&v51, ") exceeds the config max batch size (");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a4);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v43 = &v49;
    }
    else {
      std::string v43 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v49.__r_.__value_.__l.__size_;
    }
    std::string v45 = std::string::append(&v52, (const std::string::value_type *)v43, v44);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::string v47 = std::string::append(&v53, ")");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v38, &v54);
    v38->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  return snlp::ssu::espresso::SSUNessieModule::SSUNessieModule(a6, a2, a3, a5);
}

void sub_1C8E96E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v34) {
    __cxa_free_exception(v33);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::espresso::SSUNessieModel::buildFromAssetsDirectory(snlp::ssu::espresso::SSUNessieModel *a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  snlp::ssu::espresso::SSUNessieModel::getEspressoE5Model(a1, (std::string::size_type)&v33);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v32.__pn_, "config.json");
  std::__fs::filesystem::operator/[abi:ne180100](&v31, (uint64_t)a1, &v32);
  uint64_t v2 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = v33;
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v3 = &v46;
    }
    else {
      uint64_t v3 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v38, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    }
    else {
      std::string v38 = v31;
    }
    uint64_t v4 = &v38;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v4 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_DEBUG, "Building SSU Nessie model using E5 path %s and config JSON path %s", buf, 0x16u);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v30, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v31;
  }
  std::ifstream::basic_ifstream((uint64_t *)&v46);
  std::string::basic_string[abi:ne180100]<0>(v36, "SSU");
  if ((*((unsigned char *)&v46 + *(void *)(v46.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
  {
    std::operator+<char>();
    int v5 = std::string::append(&v49, ".");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    long long v7 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = v36;
      if (v37 < 0) {
        char v8 = (void **)v36[0];
      }
      std::string v9 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v9 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      LODWORD(v49.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      WORD2(v49.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v49.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
      _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v49, 0x16u);
    }
    memset(buf, 0, sizeof(buf));
    int v45 = 1065353216;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    goto LABEL_101;
  }
  v34[0] = 0;
  uint64_t v35 = 0;
  nlohmann::operator>>(&v46, v34);
  memset(buf, 0, sizeof(buf));
  int v45 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "SSU");
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
  unint64_t v50 = 0x8000000000000000;
  unsigned __int8 v10 = v34[0];
  if (v34[0])
  {
    if (v34[0] == 2)
    {
      v49.__r_.__value_.__r.__words[2] = *v35;
    }
    else if (v34[0] == 1)
    {
      v49.__r_.__value_.__l.__size_ = *v35;
    }
    else
    {
      unint64_t v50 = 0;
    }
  }
  else
  {
    unint64_t v50 = 1;
  }
  while (1)
  {
    *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = 0uLL;
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    v39[0] = 0x8000000000000000;
    if (v10 == 2)
    {
      v38.__r_.__value_.__r.__words[2] = v35[1];
    }
    else if (v10 == 1)
    {
      v38.__r_.__value_.__l.__size_ = (std::string::size_type)(v35 + 1);
    }
    else
    {
      v39[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v49, (unsigned __int8 **)&v38))
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "component_name");
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>((uint64_t)buf, (unsigned __int8 *)&v38, (long long **)&v49, &v41);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35, v34[0]);
LABEL_101:
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      v46.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
      *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words
                                + *(void *)(v46.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8]
                                                                                                  + 24);
      MEMORY[0x1CB7756B0](&v46.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x1CB775B50](&v47);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v46, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = v33;
      }
      operator new();
    }
    uint64_t v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      v41.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49) == 5) {
      break;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49) == 6)
    {
      long long v15 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49);
      LODWORD(v38.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v15, (unsigned int *)&v38);
      int data = (int)v38.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v38, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string v38 = v41;
      }
      LODWORD(v39[0]) = data;
      int v40 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v38, (uint64_t)&v38);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49) == 7)
    {
      long long v17 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49);
      LODWORD(v38.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v17, (float *)&v38);
      int v18 = (int)v38.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v38, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string v38 = v41;
      }
      LODWORD(v39[0]) = v18;
      int v40 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v38, (uint64_t)&v38);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49) == 4)
    {
      int v19 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49);
      v38.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v19, &v38);
      std::string::value_type v20 = v38.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v38, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string v38 = v41;
      }
      LOBYTE(v39[0]) = v20;
      int v40 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v38, (uint64_t)&v38);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49))
      {
        std::operator+<char>();
        long long v23 = std::string::append(&v48, ".");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        unint64_t v25 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = __p;
          if (v43 < 0) {
            uint64_t v26 = (void **)__p[0];
          }
          size_t v27 = &v38;
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            size_t v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
          goto LABEL_95;
        }
      }
      else
      {
        std::operator+<char>();
        long long v28 = std::string::append(&v48, " is null.  This is currently expected behaviour.");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        unint64_t v25 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = __p;
          if (v43 < 0) {
            uint64_t v26 = (void **)__p[0];
          }
          size_t v27 = &v38;
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            size_t v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
LABEL_95:
          LODWORD(v48.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          WORD2(v48.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
          _os_log_impl(&dword_1C8DA9000, v25, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v48, 0x16u);
        }
      }
LABEL_82:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_85;
      }
      char v22 = (void *)v38.__r_.__value_.__r.__words[0];
      goto LABEL_84;
    }
    long long v21 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v48, v21);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v38, (long long *)&v41, (long long *)&v48);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v38, (uint64_t)&v38);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      char v22 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_84:
      operator delete(v22);
    }
LABEL_85:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v49);
    unsigned __int8 v10 = v34[0];
  }
  uint64_t v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v49);
  LODWORD(v38.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v13, (int *)&v38);
  int v14 = (int)v38.__r_.__value_.__l.__data_;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = v41;
  }
  LODWORD(v39[0]) = v14;
  int v40 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v38, (uint64_t)&v38);
LABEL_81:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v39);
  goto LABEL_82;
}

void sub_1C8E9799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,unsigned __int8 a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (*(char *)(v72 - 169) < 0) {
    operator delete(*(void **)(v72 - 192));
  }
  if (a59 < 0) {
    operator delete(__p);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a12, a38);
  if (a45 < 0) {
    operator delete(a40);
  }
  std::ifstream::~ifstream(&a72);
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModel::getEspressoE5Model(snlp::ssu::espresso::SSUNessieModel *this@<X0>, std::string::size_type a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(&v13, 0, sizeof(v13));
  std::string::append[abi:ne180100]<char const*,0>(&v13.__pn_, "nessie_e5.bundle/universal.bundle/universal.e5", "");
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, "nessie.mlmodelc/model.bundle/universal.bundle/universal.e5", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v11.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  std::__fs::filesystem::__status(&v11, 0);
  if (v14 && v14 != 255)
  {
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      char v5 = 0;
      *(std::__fs::filesystem::path *)a2 = v11;
      goto LABEL_17;
    }
    std::string::__init_copy_ctor_external((std::string *)a2, v11.__pn_.__r_.__value_.__l.__data_, v11.__pn_.__r_.__value_.__l.__size_);
    goto LABEL_16;
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)a2, (uint64_t)this, &v13);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, 0);
  if (v14 && v14 != 255)
  {
    long long v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v7 = a2;
      }
      else {
        std::string::size_type v7 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, "Falling back on deprecated Espresso model file: %s", (uint8_t *)&buf, 0xCu);
    }
LABEL_16:
    char v5 = 0;
    goto LABEL_17;
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  char v5 = 1;
LABEL_17:
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
  }
  if (v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*((char *)this + 23) < 0) {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)this, *((void *)this + 1));
    }
    else {
      std::string buf = *(std::string *)this;
    }
    std::string v9 = std::string::insert(&buf, 0, "Could not find Espresso model in ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v11.__pn_.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__pn_.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11.__pn_);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1C8E97F30(long long a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, std::string *a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void sub_1C8E9811C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v28 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v28)
  {
LABEL_12:
    __cxa_end_catch();
    JUMPOUT(0x1C8E981B0);
  }
  __cxa_free_exception(v29);
  goto LABEL_12;
}

void sub_1C8E981D8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C8E981D0);
}

void snlp::ssu::espresso::SSUNessieModel::forward(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  long long v6 = (std::mutex *)(a1 + 528);
  std::mutex::lock((std::mutex *)(a1 + 528));
  std::string::size_type v7 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v8 = os_signpost_id_generate(v7);
  std::string v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "SSUNessieModel Inference", "", buf, 2u);
    }
  }
  std::__fs::filesystem::path v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUNessieModel Inference\"", buf, 2u);
  }
  long long v29 = *a2;
  long long v23 = v29;
  uint64_t v30 = *((void *)a2 + 2);
  uint64_t v12 = v30;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v31 = *(long long *)((char *)a2 + 24);
  long long v22 = v31;
  uint64_t v32 = *((void *)a2 + 5);
  uint64_t v13 = v32;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v33 = a2[3];
  std::string::value_type v20 = (void *)v33;
  uint64_t v34 = *((void *)a2 + 8);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  unint64_t v14 = snlp::ssu::espresso::SSUNessieModel::validateModelInputs((unint64_t *)a1, (uint64_t)&v29);
  snlp::ssu::espresso::SSUNessieModel::buildPaddingMask(a1, (uint64_t)&v33, v14, (uint64_t)v42);
  long long v15 = v20;
  int v19 = (void *)*((void *)&v42[1] + 1);
  long long v21 = *(void **)&v42[0];
  *(_OWORD *)std::string buf = v42[0];
  long long v36 = v42[1];
  long long v37 = v42[2];
  long long v38 = v23;
  uint64_t v30 = 0;
  long long v29 = 0uLL;
  long long v40 = v22;
  uint64_t v39 = v12;
  uint64_t v41 = v13;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  if (v15)
  {
    *((void *)&v33 + 1) = v15;
    operator delete(v15);
  }
  snlp::ssu::espresso::SSUNessieModule::forward((snlp::ssu::espresso::SSUNessieModule *)(a1 + 32), (uint64_t **)buf, v42);
  *(_OWORD *)unint64_t v25 = v42[0];
  uint64_t v26 = *(void *)&v42[1];
  memset(v42, 0, sizeof(v42));
  *(_OWORD *)std::string __p = *(_OWORD *)((char *)&v42[1] + 8);
  uint64_t v28 = *((void *)&v42[2] + 1);
  snlp::ssu::espresso::SSUNessieModel::buildModelOutputs((unint64_t *)a1, (uint64_t)v25, a3);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v25[0]) {
    operator delete(v25[0]);
  }
  uint64_t v16 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)long long v24 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v17, OS_SIGNPOST_INTERVAL_END, v8, "SSUNessieModel Inference", "", v24, 2u);
    }
  }
  int v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v24 = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "END \"SSUNessieModel Inference\"", v24, 2u);
  }
  if (*((void *)&v42[1] + 1))
  {
    *(void *)&v42[2] = *((void *)&v42[1] + 1);
    operator delete(*((void **)&v42[1] + 1));
  }
  if (*(void *)&v42[0])
  {
    *((void *)&v42[0] + 1) = *(void *)&v42[0];
    operator delete(*(void **)&v42[0]);
  }
  if ((void)v22) {
    operator delete((void *)v22);
  }
  if ((void)v23) {
    operator delete((void *)v23);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v21) {
    operator delete(v21);
  }
  std::mutex::unlock(v6);
}

void sub_1C8E9851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a19);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v36 - 128));
  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs((snlp::ssu::espresso::SSUNessieModuleInputs *)&a35);
  std::mutex::unlock(v35);
  _Unwind_Resume(a1);
}

__n128 snlp::ssu::espresso::SSUNessieModel::buildModuleInputs@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = snlp::ssu::espresso::SSUNessieModel::validateModelInputs(a1, a2);
  snlp::ssu::espresso::SSUNessieModel::buildPaddingMask((uint64_t)a1, a2 + 48, v6, (uint64_t)v10);
  long long v7 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v10[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(void *)(a3 + 64) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a3 + 72) = result;
  *(void *)(a3 + 88) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

unint64_t *snlp::ssu::espresso::SSUNessieModel::buildModelOutputs@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = v3 - *(void *)a2;
  if (v5 != 16)
  {
    unint64_t v13 = v5 >> 3;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v44, v13);
    long long v15 = std::string::insert(&v44, 0, "SSUNessieModel moduleOutputs.encodings is of unexpected rank: expected=2, actual=");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v45);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t v6 = result;
  unint64_t v7 = v4[1];
  if (v7 != *result)
  {
    long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, v7);
    int v18 = std::string::insert(&v41, 0, "SSUNessieModel moduleOutputs.encodings dimension (");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::value_type v20 = std::string::append(&v42, ") does not match the expected dimension from config (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, *v6);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v22 = &v40;
    }
    else {
      long long v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    long long v24 = std::string::append(&v43, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v44, ")");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v17, &v45);
    v17->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = *v4 * v7;
  if ((v8 - v9) >> 2 != v10)
  {
    unint64_t v28 = (v8 - v9) >> 2;
    long long v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, v28);
    uint64_t v30 = std::string::insert(&v41, 0, "SSUNessieModel moduleOutputs.encodings data size (");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v42, ") does not match the expected size implied by the shape (");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, v10);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v40;
    }
    else {
      uint64_t v34 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = std::string::append(&v43, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    long long v38 = std::string::append(&v44, ")");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v45);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  *a3 = v4;
  a3[1] = v3;
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a3[2] = v11;
  a3[3] = v9;
  uint64_t v12 = *(void *)(a2 + 40);
  a3[4] = v8;
  a3[5] = v12;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C8E9897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v34) {
    __cxa_free_exception(v33);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(snlp::ssu::espresso::SSUNessieModuleInputs *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

unint64_t snlp::ssu::espresso::SSUNessieModel::validateModelInputs(unint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3 != 16)
  {
    unint64_t v40 = v3 >> 3;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v87, v40);
    std::string v42 = std::string::insert(&v87, 0, "SSUNessieModel modelInputs.tokenIds is of unexpected rank: expected=2, actual=");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v88);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t result = *v2;
  unint64_t v7 = *(unint64_t **)(a2 + 48);
  unint64_t v6 = *(unint64_t **)(a2 + 56);
  uint64_t v8 = (char *)v6 - (char *)v7;
  if (*v2 != v6 - v7)
  {
    unint64_t v44 = *v2;
    std::string v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v44);
    std::string v46 = std::string::insert(&v84, 0, "SSUNessieModel batch size implied by modelInputs.tokenIds (");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::string v48 = std::string::append(&v85, ") does not match batch size implied by modelInputs.utteranceLengths (");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v8 >> 3);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v50 = &v83;
    }
    else {
      unint64_t v50 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v83.__r_.__value_.__l.__size_;
    }
    std::string v52 = std::string::append(&v86, (const std::string::value_type *)v50, size);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string v54 = std::string::append(&v87, ")");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v45, &v88);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (result < a1[2] || result > a1[3])
  {
    unint64_t v22 = *v2;
    long long v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v82, v22);
    long long v24 = std::string::insert(&v82, 0, "SSUNessieModel batch size (");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v83, ") not in valid range [");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v81, a1[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v28 = &v81;
    }
    else {
      unint64_t v28 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v81.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = std::string::append(&v84, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v85, ", ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v80, a1[3]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v34 = &v80;
    }
    else {
      char v34 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v80.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = std::string::append(&v86, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    long long v38 = std::string::append(&v87, "]");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v23, &v88);
    v23->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  unint64_t v9 = v2[1];
  if (v9 != a1[1])
  {
    uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v9);
    uint64_t v57 = std::string::insert(&v84, 0, "SSUNessieModel sequence length implied by modelInputs.tokenIds (");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    uint64_t v59 = std::string::append(&v85, ") must be equal to the max sequence length from model config (");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, a1[1]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v61 = &v83;
    }
    else {
      int v61 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v62 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v62 = v83.__r_.__value_.__l.__size_;
    }
    uint64_t v63 = std::string::append(&v86, (const std::string::value_type *)v61, v62);
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    unint64_t v65 = std::string::append(&v87, ")");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v56, &v88);
    v56->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2 != v9 * result)
  {
    unint64_t v67 = v9 * result;
    unint64_t v68 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2;
    unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v68);
    uint64_t v70 = std::string::insert(&v84, 0, "SSUNessieModel modelInputs.tokenIds data size (");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    uint64_t v72 = std::string::append(&v85, ") does not match the expected size implied by the shape (");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v67);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v74 = &v83;
    }
    else {
      unint64_t v74 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v75 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v75 = v83.__r_.__value_.__l.__size_;
    }
    unint64_t v76 = std::string::append(&v86, (const std::string::value_type *)v74, v75);
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    uint64_t v78 = std::string::append(&v87, ")");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v69, &v88);
    v69->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  while (v7 != v6)
  {
    if (*v7 - 1 >= v9)
    {
      unint64_t v10 = *v7;
      uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v84, v10);
      uint64_t v12 = std::string::insert(&v84, 0, "SSUNessieModel modelInputs.utteranceLengths contains a value (");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      unint64_t v14 = std::string::append(&v85, ") outside the valid range [1, ");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v83, a1[1]);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v16 = &v83;
      }
      else {
        long long v16 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v17 = v83.__r_.__value_.__l.__size_;
      }
      int v18 = std::string::append(&v86, (const std::string::value_type *)v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::string::value_type v20 = std::string::append(&v87, "]");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v11, &v88);
      v11->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
    ++v7;
  }
  return result;
}

void sub_1C8E9930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v49 - 57) < 0) {
    operator delete(*(void **)(v49 - 80));
  }
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v49 - 121) < 0) {
    operator delete(*(void **)(v49 - 144));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v47) {
    __cxa_free_exception(v48);
  }
  _Unwind_Resume(exception_object);
}

double snlp::ssu::espresso::SSUNessieModel::buildPaddingMask@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = operator new(0x10uLL);
  void *v9 = a3;
  v9[1] = v8;
  unint64_t v10 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int v18 = 134218240;
    *(void *)&v18[4] = a3;
    *(_WORD *)&v18[12] = 2048;
    *(void *)&v18[14] = v8;
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "Building padding mask with shape: {%lu, %lu}", v18, 0x16u);
  }
  std::vector<float>::vector(v18, *(void *)(a1 + 8) * a3, &snlp::ssu::espresso::SSUNessieModel::kPaddingMaskMissingValue);
  uint64_t v11 = *(void *)v18;
  long long v13 = *(void **)a2;
  uint64_t v12 = *(void **)(a2 + 8);
  if (v13 != v12)
  {
    uint64_t v14 = 4 * *(void *)(a1 + 8);
    long long v15 = *(char **)v18;
    do
    {
      if (*v13) {
        bzero(v15, 4 * *v13);
      }
      ++v13;
      v15 += v14;
    }
    while (v13 != v12);
  }
  *(void *)&long long v16 = v9;
  *((void *)&v16 + 1) = v9 + 2;
  *(_OWORD *)a4 = v16;
  *(void *)(a4 + 16) = v9 + 2;
  *(void *)(a4 + 24) = v11;
  double result = *(double *)&v18[8];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v18[8];
  return result;
}

void sub_1C8E99748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getMaxBatchSize(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((void *)this + 3);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getConfigMaxSeqLength(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((void *)this + 1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getConfigMinBatchSize(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((void *)this + 2);
}

void uaap::DDUsoMapper::DDUsoMapper(uaap::DDUsoMapper *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  operator new();
}

void sub_1C8E99F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  uint64_t v7 = v6;
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  std::vector<std::unique_ptr<uaap::AbstractDateTimeHandler>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<uaap::AbstractDateTimeHandler>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<uaap::AbstractDateTimeHandler>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *uaap::DDUsoMapper::mapDateTimeByHandlers(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *result;
  if (result[1] != *result)
  {
    unint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11)
                                                                                                + 16))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *v10;
    }
    while (v11 < (v10[1] - *v10) >> 3);
  }
  return result;
}

void uaap::DDUsoMapper::flattenToDDSpans()
{
  Type = (const void *)DDResultGetType();
  if (CFEqual(Type, @"DateTime")) {
    operator new();
  }
  if (CFEqual(Type, @"TimeDuration")) {
    operator new();
  }
  if (CFEqual(Type, @"TimeSpanWithReference")) {
    operator new();
  }
  if (CFEqual(Type, @"DateSpanWithReference")) {
    operator new();
  }
  if (CFEqual(Type, @"Time") || CFEqual(Type, @"TimeSpan")) {
    std::make_unique[abi:ne180100]<uaap::UPDDTimeSpan,__DDResult *&>();
  }
  if (!CFEqual(Type, @"Date") && !CFEqual(Type, @"DateSpan")) {
    std::make_unique[abi:ne180100]<uaap::UPDDSpan,__DDResult *&>();
  }
  std::make_unique[abi:ne180100]<uaap::UPDDDateSpan,__DDResult *&>();
}

void sub_1C8E9A988(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10E1C401BE6E4D3);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<uaap::UPDDTimeSpan,__DDResult *&>()
{
}

void sub_1C8E9AA74(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10E1C406A116140);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<uaap::UPDDDateSpan,__DDResult *&>()
{
}

void sub_1C8E9AAEC(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10E1C402100513ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<uaap::UPDDSpan,__DDResult *&>()
{
}

void sub_1C8E9AB78(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10E1C40AC054123);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    uint64_t v3 = __p + 3;
    std::vector<std::unique_ptr<uaap::UPDDSpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void std::vector<std::unique_ptr<uaap::UPDDSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uaap::UPDDSpan *uaap::UPDDSpan::UPDDSpan(uaap::UPDDSpan *this, __DDResult *a2, const __CFString *a3)
{
  int Range = DDResultGetRange();
  int v7 = v6;
  CFStringRef Type = (const __CFString *)DDResultGetType();
  return uaap::UPDDSpan::UPDDSpan(this, Type, a3, Range, v7 + Range);
}

uaap::UPDDSpan *uaap::UPDDSpan::UPDDSpan(uaap::UPDDSpan *this, const __CFString *a2, const __CFString *a3, int a4, int a5)
{
  *(void *)this = &unk_1F235F828;
  CFStringRef Copy = CFStringCreateCopy(0, a2);
  uint64_t v10 = MEMORY[0x1E4F1C278];
  *((void *)this + 1) = Copy;
  *((void *)this + 2) = v10;
  CFStringRef v11 = CFStringCreateCopy(0, a3);
  uint64_t v12 = MEMORY[0x1E4F1C278];
  *((void *)this + 3) = v11;
  *((void *)this + 4) = v12;
  *((_DWORD *)this + 10) = a4;
  *((_DWORD *)this + 11) = a5;
  return this;
}

void sub_1C8E9ADAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 16))();
  }
  _Unwind_Resume(exception_object);
}

void uaap::UPDDSpan::~UPDDSpan(uaap::UPDDSpan *this)
{
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F235F828;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*((void (**)(void))this + 4))();
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*((void (**)(void))this + 2))();
  }
}

BOOL uaap::DDUsoMapper::toItemizedUsos(int a1, CFArrayRef theArray, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFArrayGetValueAtIndex(theArray, 0);
    operator new();
  }
  return a3[1] - *a3 > (unint64_t)(v5 - v6);
}

void sub_1C8E9AF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v6 = (void **)(v2 + 24);
      std::vector<std::unique_ptr<uaap::UPDDSpan>>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(result);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void uaap::DDUsoMapper::toItemizedUsos()
{
}

void sub_1C8E9B12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void uaap::DDUsoMapper::toUso(uaap::DDUsoMapper *this, __DDResult *a2, siri::ontology::UsoGraph *a3)
{
}

void sub_1C8E9B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
}

void ***std::unique_ptr<std::vector<std::unique_ptr<siri::ontology::UsoGraph>>>::reset[abi:ne180100](void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<std::unique_ptr<siri::ontology::UsoGraph>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoGraph>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void uaap::DDUsoMapper::getSpanRangeFromUtteranceAlignments(uaap::DDUsoMapper *this@<X0>, uint64_t a2@<X8>)
{
  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  uint64_t v4 = (const void **)__p;
  uint64_t v5 = v15;
  if (__p == v15)
  {
LABEL_9:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_10;
  }
  uint64_t v6 = (const struct __class_type_info *)MEMORY[0x1E4FA3AC8];
  while (1)
  {
    if (v7)
    {
      if (*((void *)v7 + 7) != *((void *)v7 + 8)) {
        break;
      }
    }
LABEL_8:
    if (++v4 == v5) {
      goto LABEL_9;
    }
  }
  UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v7);
  siri::ontology::UsoUtteranceAlignment::getSpans((uint64_t *)&v12, UtteranceAlignment);
  unint64_t v9 = v12;
  if (v13 == v12)
  {
    if (v13) {
      operator delete(v13);
    }
    goto LABEL_8;
  }
  uint64_t v10 = **v12;
  uint64_t v11 = (*v12)[1] - v10;
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = 1;
  long long v13 = v9;
  operator delete(v9);
LABEL_10:
  if (__p)
  {
    long long v15 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1C8E9B494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unsigned __int8 *a5, long long *a6)
{
  uint64_t v12 = (E5RT::ExecutionStream *)std::string::basic_string[abi:ne180100]<0>((void *)a1, "main");
  E5RT::ExecutionStream::CreateExecutionStream(v12);
  *(_DWORD *)(a1 + 32) = *a4;
  *(_DWORD *)(a1 + 40) = *a4;
  std::__optional_copy_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 48), a6);
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = *a4;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(a1, (std::__fs::filesystem::path *)&__p, a5);
  uint64_t v13 = v19;
  *(void *)(a1 + 176) = v19;
  if (v13) {
    operator new();
  }
  uint64_t v14 = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v19 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 184);
  }
  uint64_t v16 = *(void *)(a1 + 176);
  std::string::size_type v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  snlp::common::espresso_inference::e5ml::WeightsHandler::WeightsHandler(a1 + 192, (uint64_t)&v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(a1 + 272, a3);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  return a1;
}

void sub_1C8E9BB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::~MILCompiler(v19);
  uint64_t v21 = *v18;
  *int v18 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 80))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    if (*((char *)a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    }
    else
    {
      long long v5 = *(long long *)((char *)a2 + 24);
      this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
    }
    uint64_t v6 = this + 2;
    if (*((char *)a2 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else
    {
      long long v7 = a2[3];
      this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
    this[3].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1C8E9BD40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(uint64_t a1, std::__fs::filesystem::path *this, unsigned __int8 *a3)
{
  if (snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsMilFormat(this, this))
  {
    snlp::common::espresso_inference::e5ml::MILCompiler::compileToE5ML((int *)(a1 + 40), (uint64_t)this, a3);
  }
  else
  {
    if (!snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsE5Format(this, v6))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::__fs::filesystem::path::filename[abi:ne180100](this, (uint64_t)&v12);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v12;
      }
      uint64_t v8 = std::string::insert(&v13, 0, "The model file (");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      pn.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&pn, ") is not a recognised E5-ML model format.");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v15);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "Inference Call");
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      puint64_t n = this->__pn_;
    }
    E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C8E9BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void snlp::common::espresso_inference::e5ml::MILCompiler::~MILCompiler(void **this)
{
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 1));
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

BOOL snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsMilFormat(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ".mil");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    BOOL v4 = 0;
    goto LABEL_25;
  }
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&v18, this);
  int v3 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v18;
  }
  if ((v22 & 0x80u) == 0) {
    size_t v5 = v22;
  }
  else {
    size_t v5 = __n;
  }
  std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  if (v5 != size)
  {
    BOOL v4 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v19;
  }
  else {
    uint64_t v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v22 & 0x80) != 0)
  {
    BOOL v4 = memcmp(__p, v8, __n) == 0;
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  if (!v22)
  {
    BOOL v4 = 1;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_29:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  uint64_t v9 = v22 - 1;
  p_p = &__p;
  do
  {
    int v12 = *(unsigned __int8 *)p_p;
    p_p = (void **)((char *)p_p + 1);
    int v11 = v12;
    int v14 = v8->__r_.__value_.__s.__data_[0];
    uint64_t v8 = (std::string *)((char *)v8 + 1);
    int v13 = v14;
    BOOL v16 = v9-- != 0;
    BOOL v4 = v11 == v13;
  }
  while (v11 == v13 && v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
LABEL_24:
  if ((v3 & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_30:
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_25:
  if ((char)v22 < 0) {
    operator delete(__p);
  }
  return v4;
}

void sub_1C8E9C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  unsigned __int8 v22 = v21;
  operator delete(v22);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsE5Format(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ".e5");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    BOOL v4 = 0;
    goto LABEL_25;
  }
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&v18, this);
  int v3 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v18;
  }
  if ((v22 & 0x80u) == 0) {
    size_t v5 = v22;
  }
  else {
    size_t v5 = __n;
  }
  std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  if (v5 != size)
  {
    BOOL v4 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v19;
  }
  else {
    uint64_t v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v22 & 0x80) != 0)
  {
    BOOL v4 = memcmp(__p, v8, __n) == 0;
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  if (!v22)
  {
    BOOL v4 = 1;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_29:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  uint64_t v9 = v22 - 1;
  p_p = &__p;
  do
  {
    int v12 = *(unsigned __int8 *)p_p;
    p_p = (void **)((char *)p_p + 1);
    int v11 = v12;
    int v14 = v8->__r_.__value_.__s.__data_[0];
    uint64_t v8 = (std::string *)((char *)v8 + 1);
    int v13 = v14;
    BOOL v16 = v9-- != 0;
    BOOL v4 = v11 == v13;
  }
  while (v11 == v13 && v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
LABEL_24:
  if ((v3 & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_30:
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_25:
  if ((char)v22 < 0) {
    operator delete(__p);
  }
  return v4;
}

void sub_1C8E9C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  unsigned __int8 v22 = v21;
  operator delete(v22);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(unsigned __int8 *a1, char *a2, uint64_t a3, _DWORD *a4, long long *a5)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)a1, a2, a3, a4, a1, a5);
}

{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)a1, a2, a3, a4, a1, a5);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(snlp::common::espresso_inference::e5ml::EspressoE5MLModule *this, std::__fs::filesystem::path *a2)
{
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::wireMemory()
{
  return _os_feature_enabled_impl();
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (void *)(a1 + 272);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)(a1 + 272), a2))
  {
    size_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a2);
    if (!v5) {
      goto LABEL_27;
    }
    if (*((_DWORD *)v5 + 16) == 1)
    {
      uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a2);
      if (v6)
      {
        if (*((_DWORD *)v6 + 16) != 1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        return *((unsigned int *)v6 + 10);
      }
LABEL_27:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  uint64_t v8 = *(int *)(a1 + 32);
  if (v8 >= 8)
  {
    uint64_t v10 = SNLPOSLoggerForCategory(4);
    uint64_t v9 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "<UNDEFINED_COMPONENT>";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v8;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v9 = off_1E65808C8[v8];
  }
  std::string::basic_string[abi:ne180100]<0>(v19, v9);
  std::operator+<char>();
  int v11 = std::string::append(&__p, ".\n");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = std::string::append(&v21, "Note that only parameters of unsigned integer type are currently expected by SiriNaturalLanguageParsing.  This issue will likely cause SiriNaturalLanguageParsing to fail.");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)std::string buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v15 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    BOOL v16 = v19;
    if (v20 < 0) {
      BOOL v16 = (void **)v19[0];
    }
    uint64_t v17 = buf;
    if (buf[23] < 0) {
      uint64_t v17 = *(unsigned char **)buf;
    }
    LODWORD(v21.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v21.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v21.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
    _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v21, 0x16u);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  return 0;
}

void sub_1C8E9C6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 176));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v47 = std::string::append(&v76, ")");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    uint64_t v49 = std::string::append(&v77, " does not exist.");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v78);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  int v7 = (void *)(a1 + 192);
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort((void *)(a1 + 192), a2) == 2)
  {
    uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v78, "The setInput method is not yet implemented for UINT_8.");
    std::runtime_error::runtime_error(v51, &v78);
    v51->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, a2);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v10 = (E5RT::IOPort *)*((void *)v8 + 5);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  E5RT::IOPort::GetMemoryObject((uint64_t *)&v78, v10);
  uint64_t v13 = E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v78.__r_.__value_.__l.__data_);
  if (v78.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__r_.__value_.__l.__size_);
  }
  if (!v13)
  {
    std::string v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v53 = std::string::append(&v77, ").");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v52, &v78);
    v52->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v77, v10);
  long long v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v77.__r_.__value_.__l.__data_);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v14);
  memset(&v78, 0, sizeof(v78));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v78, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  if (v77.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
  }
  unint64_t v16 = (v11 - v12) >> 2;
  uint64_t v17 = (int *)v78.__r_.__value_.__r.__words[0];
  int v18 = 1;
  while (v17 != (int *)v78.__r_.__value_.__l.__size_)
  {
    int v19 = *v17;
    v17 += 2;
    v18 *= v19;
  }
  if (v16 != v18)
  {
    long long v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v56 = std::string::append(&v72, " buffer due to the input tensor being mismatched in size.  Buffer size is ");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, v18);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v58 = &v71;
    }
    else {
      long long v58 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    long long v60 = std::string::append(&v73, (const std::string::value_type *)v58, size);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v62 = std::string::append(&v74, "; input tensor contains ");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, v16);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v64 = &v70;
    }
    else {
      long long v64 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v70.__r_.__value_.__l.__size_;
    }
    long long v66 = std::string::append(&v75, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    unint64_t v68 = std::string::append(&v76, " elements.");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v55, &v77);
    v55->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2))
  {
    if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) == 1)
    {
      E5RT::IOPort::GetMemoryObject((uint64_t *)&v77, v10);
      char v20 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v77.__r_.__value_.__l.__data_);
      DataSpauint64_t n = E5RT::BufferObject::GetDataSpan(v20);
      unint64_t v23 = v22 >> 2;
      if (v22 >= 4) {
        long long v24 = (void *)DataSpan;
      }
      else {
        long long v24 = 0;
      }
      if (v77.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
      }
      if ((uint64_t)(4 * v23) >= 1) {
        bzero(v24, 4 * (((4 * v23) >> 2) - (4 * v23 > 3)) + 4);
      }
      if (v11 != v12) {
        memmove(v24, *(const void **)(a3 + 24), v11 - v12);
      }
    }
    else if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) == 2)
    {
      E5RT::IOPort::GetMemoryObject((uint64_t *)&v77, v10);
      long long v38 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v77.__r_.__value_.__l.__data_);
      uint64_t v39 = E5RT::BufferObject::GetDataSpan(v38);
      int64_t v41 = v40;
      if (v40) {
        std::string v42 = (unsigned char *)v39;
      }
      else {
        std::string v42 = 0;
      }
      if (v77.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
      }
      if (v41 >= 1) {
        bzero(v42, v41);
      }
      if (v11 != v12)
      {
        long long v43 = *(float **)(a3 + 24);
        uint64_t v44 = 4 * v16;
        do
        {
          float v45 = *v43++;
          *v42++ = (int)v45;
          v44 -= 4;
        }
        while (v44);
      }
    }
  }
  else
  {
    E5RT::IOPort::GetMemoryObject((uint64_t *)&v77, v10);
    long long v25 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v77.__r_.__value_.__l.__data_);
    uint64_t v26 = E5RT::BufferObject::GetDataSpan(v25);
    unint64_t v28 = v27 >> 1;
    if (v27 >= 2) {
      int v29 = (_WORD *)v26;
    }
    else {
      int v29 = 0;
    }
    if (v77.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
    }
    if ((uint64_t)(2 * v28) >= 1) {
      bzero(v29, 2 * (((2 * v28) >> 1) - (2 * v28 != 1)) + 2);
    }
    if (v11 != v12)
    {
      uint64_t v30 = *(int **)(a3 + 24);
      uint64_t v31 = 4 * v16;
      do
      {
        int v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v29++ = _S0;
        v31 -= 4;
      }
      while (v31);
    }
  }
  if (v78.__r_.__value_.__r.__words[0])
  {
    v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C8E9CDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v56 & 1) == 0)
    {
LABEL_20:
      uint64_t v59 = *(void **)(v57 - 128);
      if (v59)
      {
        *(void *)(v57 - 120) = v59;
        operator delete(v59);
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v55);
  goto LABEL_20;
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 176));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v50 = std::string::append(&v55, ")");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string v52 = std::string::append(&v56, " does not exist.");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v57);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  int v7 = (void *)(a1 + 192);
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort((void *)(a1 + 192), a2) == 2)
  {
    long long v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, "The getOutput method is not yet implemented for UINT_8.");
    std::runtime_error::runtime_error(v54, &v57);
    v54->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, a2);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v57, *((E5RT::IOPort **)v8 + 5));
  uint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v57.__r_.__value_.__l.__data_);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v9);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  a3[1].__r_.__value_.__r.__words[0] = 0;
  a3[1].__r_.__value_.__l.__size_ = 0;
  uint64_t v11 = a3 + 1;
  a3[1].__r_.__value_.__r.__words[2] = 0;
  if (v57.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57.__r_.__value_.__l.__size_);
  }
  uint64_t v12 = (void *)(a1 + 312);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, a2))goto LABEL_44; {
  uint64_t v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, a2);
  }
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v13 + 5)))
  {
LABEL_44:
    uint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    float v45 = std::string::append(&v55, ")");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    char v47 = std::string::append(&v56, " does not exist.");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v44, &v57);
    v44->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  if (!snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2))
  {
    char v20 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, a2);
    if (!v20) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::string v21 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v20 + 5));
    DataSpauint64_t n = E5RT::BufferObject::GetDataSpan(v21);
    unint64_t v24 = v23;
    long long v25 = 0;
    std::string::size_type size = 0;
    unint64_t v27 = v24 >> 1;
    if (v24 >= 2) {
      unint64_t v28 = (__int16 *)DataSpan;
    }
    else {
      unint64_t v28 = 0;
    }
    uint64_t v29 = 2 * v27;
    memset(&v57, 0, sizeof(v57));
    if (2 * v27)
    {
      std::vector<int>::__vallocate[abi:ne180100](&v57, (uint64_t)(2 * v27) >> 1);
      std::string::size_type size = (char *)v57.__r_.__value_.__l.__size_;
      if (v24 >= 2)
      {
        do
        {
          __int16 v30 = *v28++;
          _H0 = v30;
          __asm { FCVT            S0, H0 }
          *(_DWORD *)std::string::size_type size = _S0;
          size += 4;
          v29 -= 2;
        }
        while (v29);
      }
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      long long v25 = (char *)v57.__r_.__value_.__r.__words[0];
    }
    if (v11 == &v57) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) != 1)
  {
    if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) != 2) {
      return;
    }
    long long v37 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, a2);
    if (!v37) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v38 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v37 + 5));
    uint64_t v39 = E5RT::BufferObject::GetDataSpan(v38);
    unint64_t v41 = v40;
    long long v25 = 0;
    std::string::size_type size = 0;
    if (v41) {
      std::string v42 = (unsigned __int8 *)v39;
    }
    else {
      std::string v42 = 0;
    }
    memset(&v57, 0, sizeof(v57));
    if (v41)
    {
      std::vector<int>::__vallocate[abi:ne180100](&v57, v41);
      std::string::size_type size = (char *)v57.__r_.__value_.__l.__size_;
      do
      {
        unsigned int v43 = *v42++;
        *(float *)std::string::size_type size = (float)v43;
        size += 4;
        --v41;
      }
      while (v41);
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      long long v25 = (char *)v57.__r_.__value_.__r.__words[0];
    }
    if (v11 == &v57) {
      goto LABEL_40;
    }
LABEL_39:
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&a3[1], v25, (uint64_t)size, (size - v25) >> 2);
    long long v25 = (char *)v57.__r_.__value_.__r.__words[0];
LABEL_40:
    if (!v25) {
      return;
    }
    v57.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    int v19 = v25;
    goto LABEL_42;
  }
  long long v14 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, a2);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::string v15 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v14 + 5));
  uint64_t v16 = E5RT::BufferObject::GetDataSpan(v15);
  if ((unint64_t)v17 >= 4) {
    int v18 = (const void *)v16;
  }
  else {
    int v18 = 0;
  }
  memset(&v57, 0, sizeof(v57));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v57, v18, (uint64_t)v18 + (v17 & 0xFFFFFFFFFFFFFFFCLL), v17 >> 2);
  if (v11 != &v57) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&a3[1], v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_, (uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 2);
  }
  int v19 = (char *)v57.__r_.__value_.__r.__words[0];
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
LABEL_42:
    operator delete(v19);
  }
}

void sub_1C8E9D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v28);
  _Unwind_Resume(a1);
}

void sub_1C8E9D698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x1C8E9D690);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  for (uint64_t i = *(unsigned __int8 **)(InputPorts + 16); i; uint64_t i = *(unsigned __int8 **)i)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory((uint64_t)this, *((E5RT::IOPort **)i + 5), i + 16);
  for (uint64_t j = *(unsigned __int8 **)(OutputPorts + 16); j; uint64_t j = *(unsigned __int8 **)j)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory((uint64_t)this, *((E5RT::IOPort **)j + 5), j + 16);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory(uint64_t a1, E5RT::IOPort *this, unsigned __int8 *a3)
{
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v12, this);
  if (!v12)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Found a null pointer to a port descriptor.");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(v12))
  {
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "All ports should be buffers.");
    std::runtime_error::runtime_error(v9, &v11);
    v9->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  size_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v12);
  E5RT::TensorDescriptor::GetSize(v5);
  E5RT::BufferObject::AllocMemory();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 312, a3, (long long **)&v11);
  if (v10) {
    operator new();
  }
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  *(_OWORD *)(v6 + 40) = 0u;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C8E9D938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v17 = operator new(0x38uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  char v43 = 0;
  *uint64_t v17 = 0;
  v17[1] = v9;
  int v18 = (std::string *)(v17 + 2);
  int v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v17[4] = *((void *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  void v17[5] = 0;
  v17[6] = 0;
  char v43 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v27 = operator new(8 * *(void *)&prime);
          unint64_t v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          __int16 v30 = (void *)*v16;
          if (*v16)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v16;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *__int16 v30 = *v36;
                  *uint64_t v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                __int16 v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    *long long v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    long long v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C8E9DE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB775C40);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(*(uint64_t **)(InputPorts + 16), (uint64_t)this);
  BOOL v4 = *(uint64_t **)(OutputPorts + 16);
  return std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(v4, (uint64_t)this);
}

uint64_t std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v3 = a1;
    do
    {
      uint64_t v4 = v3[5];
      v8[0] = (long long *)(v3 + 2);
      size_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 312, (unsigned __int8 *)v3 + 16, v8);
      uint64_t v6 = *((void *)v5 + 6);
      v8[0] = *((long long **)v5 + 5);
      v8[1] = (long long *)v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindMemory((uint64_t)v5, v4, (uint64_t)v8);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
      }
      unint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return a2;
}

void sub_1C8E9E03C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::BindMemoryObject();
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C8E9E0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  uint64_t OutputPorts = (snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  uint64_t v4 = OutputPorts;
  for (uint64_t i = *(uint64_t ***)(InputPorts + 16); i; uint64_t i = (uint64_t **)*i)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(OutputPorts, (E5RT::IOPort *)i[5]);
  for (uint64_t j = (uint64_t **)*((void *)v4 + 2); j; uint64_t j = (uint64_t **)*j)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(OutputPorts, (E5RT::IOPort *)j[5]);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(snlp::common::espresso_inference::e5ml::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
}

void sub_1C8E9E168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::WeightsHandler(uint64_t a1, uint64_t a2)
{
  void v51[3] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v46[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(v47, "FP32");
  int v48 = 0;
  std::string::basic_string[abi:ne180100]<0>(v49, "FP16");
  int v50 = 2;
  std::string::basic_string[abi:ne180100]<0>(v51, "UINT8");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  uint64_t v43 = a2;
  uint64_t v44 = (std::string **)(a1 + 56);
  do
  {
    unint64_t v8 = &v46[8 * v6];
    int v9 = *v8;
    unint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v2 = v9;
        if (v10 <= v9) {
          unint64_t v2 = v9 % v10;
        }
      }
      else
      {
        unint64_t v2 = (v10 - 1) & v9;
      }
      unint64_t v12 = (uint64_t **)*((void *)*v7 + v2);
      if (v12)
      {
        for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v14 = i[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)i + 4) == v9) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v2) {
              break;
            }
          }
        }
      }
    }
    unint64_t v15 = (std::string *)operator new(0x30uLL);
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = v9;
    LODWORD(v15->__r_.__value_.__r.__words[2]) = v9;
    uint64_t v16 = v15 + 1;
    uint64_t v17 = &v46[8 * v6];
    int v18 = (const std::string::value_type **)(v17 + 2);
    if (*((char *)v8 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *v18, *((void *)v17 + 2));
      uint64_t v5 = *(void *)(a1 + 64);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v18;
      v15[1].__r_.__value_.__r.__words[2] = *((void *)v17 + 3);
    }
    float v19 = (float)(unint64_t)(v5 + 1);
    float v20 = *(float *)(a1 + 72);
    if (!v10 || (float)(v20 * (float)v10) < v19)
    {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3) {
        BOOL v21 = 1;
      }
      unint64_t v22 = v21 | (2 * v10);
      unint64_t v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23) {
        int8x8_t prime = (int8x8_t)v23;
      }
      else {
        int8x8_t prime = (int8x8_t)v22;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v10 = *(void *)(a1 + 48);
      if (*(void *)&prime > v10) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v10)
      {
        unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
        if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          unint64_t v31 = std::__next_prime(v31);
        }
        else
        {
          uint64_t v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2) {
            unint64_t v31 = v33;
          }
        }
        if (*(void *)&prime <= v31) {
          int8x8_t prime = (int8x8_t)v31;
        }
        if (*(void *)&prime >= v10)
        {
          unint64_t v10 = *(void *)(a1 + 48);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v25 = operator new(8 * *(void *)&prime);
            uint64_t v26 = *v7;
            *int v7 = v25;
            if (v26) {
              operator delete(v26);
            }
            uint64_t v27 = 0;
            *(int8x8_t *)(a1 + 48) = prime;
            do
              *((void *)*v7 + v27++) = 0;
            while (*(void *)&prime != v27);
            unint64_t v28 = *v44;
            if (*v44)
            {
              unint64_t size = v28->__r_.__value_.__l.__size_;
              uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
              v30.i16[0] = vaddlv_u8(v30);
              if (v30.u32[0] > 1uLL)
              {
                if (size >= *(void *)&prime) {
                  size %= *(void *)&prime;
                }
              }
              else
              {
                size &= *(void *)&prime - 1;
              }
              *((void *)*v7 + size) = v44;
              uint8x8_t v34 = (std::string *)v28->__r_.__value_.__r.__words[0];
              if (v28->__r_.__value_.__r.__words[0])
              {
                do
                {
                  unint64_t v35 = v34->__r_.__value_.__l.__size_;
                  if (v30.u32[0] > 1uLL)
                  {
                    if (v35 >= *(void *)&prime) {
                      v35 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v35 &= *(void *)&prime - 1;
                  }
                  if (v35 != size)
                  {
                    if (!*((void *)*v7 + v35))
                    {
                      *((void *)*v7 + v35) = v28;
                      goto LABEL_58;
                    }
                    v28->__r_.__value_.__r.__words[0] = v34->__r_.__value_.__r.__words[0];
                    v34->__r_.__value_.__r.__words[0] = **((void **)*v7 + v35);
                    **((void **)*v7 + v35) = v34;
                    uint8x8_t v34 = v28;
                  }
                  unint64_t v35 = size;
LABEL_58:
                  unint64_t v28 = v34;
                  uint8x8_t v34 = (std::string *)v34->__r_.__value_.__r.__words[0];
                  unint64_t size = v35;
                }
                while (v34);
              }
            }
            unint64_t v10 = (unint64_t)prime;
            goto LABEL_62;
          }
          unint64_t v39 = *v7;
          *int v7 = 0;
          if (v39) {
            operator delete(v39);
          }
          unint64_t v10 = 0;
          *(void *)(a1 + 48) = 0;
        }
      }
LABEL_62:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9) {
          unint64_t v2 = v9 % v10;
        }
        else {
          unint64_t v2 = v9;
        }
      }
      else
      {
        unint64_t v2 = (v10 - 1) & v9;
      }
    }
    uint64_t v36 = *v7;
    unint64_t v37 = (std::string **)*((void *)*v7 + v2);
    if (v37)
    {
      v15->__r_.__value_.__r.__words[0] = (std::string::size_type)*v37;
LABEL_75:
      *unint64_t v37 = v15;
      goto LABEL_76;
    }
    v15->__r_.__value_.__r.__words[0] = (std::string::size_type)*v44;
    std::runtime_error *v44 = v15;
    v36[v2] = v44;
    if (v15->__r_.__value_.__r.__words[0])
    {
      unint64_t v38 = *(void *)(v15->__r_.__value_.__r.__words[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v38 >= v10) {
          v38 %= v10;
        }
      }
      else
      {
        v38 &= v10 - 1;
      }
      unint64_t v37 = (std::string **)((char *)*v7 + 8 * v38);
      goto LABEL_75;
    }
LABEL_76:
    uint64_t v5 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v5;
LABEL_77:
    ++v6;
  }
  while (v6 != 3);
  for (uint64_t j = 0; j != -12; j -= 4)
  {
    if (SHIBYTE(v51[j + 2]) < 0) {
      operator delete((void *)v51[j]);
    }
  }
  unint64_t v41 = *(atomic_ullong **)(v43 + 8);
  v45[0] = *(E5RT::ExecutionStreamOperation **)v43;
  v45[1] = (E5RT::ExecutionStreamOperation *)v41;
  if (v41) {
    atomic_fetch_add_explicit(v41 + 1, 1uLL, memory_order_relaxed);
  }
  snlp::common::espresso_inference::e5ml::WeightsHandler::recordPortDataTypes((uint64_t *)a1, v45);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41);
  }
  return a1;
}

void sub_1C8E9E6D0(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::WeightsHandler::recordPortDataTypes(uint64_t *a1, E5RT::ExecutionStreamOperation **a2)
{
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "The espresso assets need to be deserialised before the data type of the weights can be determined.");
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v15 >= 0) {
      uint8x8_t v11 = (char *)&v13;
    }
    else {
      uint8x8_t v11 = (char *)v13;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, v11);
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*a2);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*a2);
  for (uint64_t i = *(unsigned __int8 **)(InputPorts + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    int v7 = (std::__shared_weak_count *)*((void *)i + 6);
    uint64_t v13 = (E5RT::IOPort *)*((void *)i + 5);
    unint64_t v14 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(a1, i + 16, &v13);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  for (uint64_t j = *(unsigned __int8 **)(OutputPorts + 16); j; uint64_t j = *(unsigned __int8 **)j)
  {
    int v9 = (std::__shared_weak_count *)*((void *)j + 6);
    uint64_t v13 = (E5RT::IOPort *)*((void *)j + 5);
    unint64_t v14 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(a1, j + 16, &v13);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C8E9E8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0) {
        operator delete(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(uint64_t *a1, unsigned __int8 *a2, E5RT::IOPort **a3)
{
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v41, *a3);
  uint64_t v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor((E5RT::OperandDescriptor *)v41.__r_.__value_.__l.__data_);
  E5RT::TensorDescriptor::GetTensorDataType((uint64_t *)&v42, v6);
  ComponentDataCFStringRef Type = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v42);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v42);
  if (v41.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41.__r_.__value_.__l.__size_);
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v41, *a3);
  unint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor((E5RT::OperandDescriptor *)v41.__r_.__value_.__l.__data_);
  E5RT::TensorDescriptor::GetTensorDataType((uint64_t *)&v42, v8);
  int ComponentPack = E5RT::TensorDataType::GetComponentPack((E5RT::TensorDataType *)&v42);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v42);
  if (v41.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41.__r_.__value_.__l.__size_);
  }
  if (ComponentDataType == 1)
  {
    if (!ComponentPack)
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
      {
        uint64_t v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
        if (!v13) {
          goto LABEL_59;
        }
        int v14 = *((_DWORD *)v13 + 10);
        uint64_t result = 2;
        if (v14 != 2) {
          goto LABEL_17;
        }
        return result;
      }
      *(void *)&long long v42 = a2;
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (long long **)&v42);
      uint64_t result = 2;
LABEL_25:
      *((_DWORD *)v16 + 10) = result;
      return result;
    }
LABEL_27:
    std::operator+<char>();
    int v18 = std::string::append(&v37, ". The component data type was ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, ComponentDataType);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v20 = &v36;
    }
    else {
      float v20 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    unint64_t v22 = std::string::append(&v38, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    unint64_t v24 = std::string::append(&v39, " and the component pack was ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v35, ComponentPack);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v35;
    }
    else {
      uint64_t v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v35.__r_.__value_.__l.__size_;
    }
    unint64_t v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint8x8_t v30 = std::string::append(&v41, ".");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v43 = v30->__r_.__value_.__r.__words[2];
    long long v42 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v43 >= 0) {
      uint64_t v33 = (char *)&v42;
    }
    else {
      uint64_t v33 = (char *)v42;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, v33);
    std::runtime_error::runtime_error(exception, &v41);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  if (ComponentDataType != 4) {
    goto LABEL_27;
  }
  if (ComponentPack == 3)
  {
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
    {
      char v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
      if (!v15) {
        goto LABEL_59;
      }
      if (*((_DWORD *)v15 + 10))
      {
        LODWORD(v42) = 0;
LABEL_58:
        uint8x8_t v34 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
        if (v34) {
          snlp::common::espresso_inference::e5ml::WeightsHandler::throwInconsistentPortDataTypeError((uint64_t)a1, (const void **)a2, (int *)&v42, (int *)v34 + 10);
        }
LABEL_59:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      return 0;
    }
    else
    {
      *(void *)&long long v42 = a2;
      uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (long long **)&v42);
      uint64_t result = 0;
      *((_DWORD *)v17 + 10) = 0;
    }
    return result;
  }
  if (ComponentPack != 6) {
    goto LABEL_27;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
  {
    *(void *)&long long v42 = a2;
    uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (long long **)&v42);
    uint64_t result = 1;
    goto LABEL_25;
  }
  unint64_t v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (!v10) {
    goto LABEL_59;
  }
  int v11 = *((_DWORD *)v10 + 10);
  uint64_t result = 1;
  if (v11 != 1)
  {
LABEL_17:
    LODWORD(v42) = result;
    goto LABEL_58;
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  int v7 = a1 + 3;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      int v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v14 + 16, a2))return v14; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          int v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  int v14 = (char *)operator new(0x30uLL);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v16 = (std::string *)(v14 + 16);
  uint64_t v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v14 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  long long v19 = a1 + 2;
  *((_DWORD *)v14 + 10) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          std::string::size_type v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          long long v29 = (void *)*v19;
          if (*v19)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = v19;
            std::string v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  *std::string v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  std::string v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                long long v29 = v35;
                std::string v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        std::string v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v37 = *a1;
  std::string v38 = *(void **)(*a1 + 8 * v3);
  if (v38)
  {
    *(void *)int v14 = *v38;
LABEL_75:
    *std::string v38 = v14;
    goto LABEL_76;
  }
  *(void *)int v14 = *v19;
  *long long v19 = v14;
  *(void *)(v37 + 8 * v3) = v19;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    std::string v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_1C8E9F2BC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::WeightsHandler::throwInconsistentPortDataTypeError(uint64_t a1, const void **a2, int *a3, int *a4)
{
  int v7 = (void *)(a1 + 40);
  if (!std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>((void *)(a1 + 40), *a3)|| !std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(v7, *a4))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v41);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "Inconsistent data type for port ");
  std::string::basic_string[abi:ne180100]<0>(v39, ". Found weight type ");
  std::string::basic_string[abi:ne180100]<0>(v37, ", but the already-recorded weights type for this port was ");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v31, (const void **)&v41.__r_.__value_.__l.__data_, a2);
  if ((v40 & 0x80u) == 0) {
    unint64_t v9 = (const std::string::value_type *)v39;
  }
  else {
    unint64_t v9 = (const std::string::value_type *)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v10 = v40;
  }
  else {
    std::string::size_type v10 = v39[1];
  }
  uint8x8_t v11 = std::string::append(&v31, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(v7, *a4);
  int v14 = *((char *)v13 + 23);
  if (v14 >= 0) {
    unint64_t v15 = (const std::string::value_type *)v13;
  }
  else {
    unint64_t v15 = (const std::string::value_type *)*v13;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *((unsigned __int8 *)v13 + 23);
  }
  else {
    std::string::size_type v16 = v13[1];
  }
  uint64_t v17 = std::string::append(&v32, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v38 & 0x80u) == 0) {
    long long v19 = (const std::string::value_type *)v37;
  }
  else {
    long long v19 = (const std::string::value_type *)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v20 = v38;
  }
  else {
    std::string::size_type v20 = v37[1];
  }
  float v21 = std::string::append(&v33, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  unint64_t v23 = std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(v7, *a3);
  int v24 = *((char *)v23 + 23);
  if (v24 >= 0) {
    long long v25 = (const std::string::value_type *)v23;
  }
  else {
    long long v25 = (const std::string::value_type *)*v23;
  }
  if (v24 >= 0) {
    std::string::size_type v26 = *((unsigned __int8 *)v23 + 23);
  }
  else {
    std::string::size_type v26 = v23[1];
  }
  std::string::size_type v27 = std::string::append(&v34, v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  int64_t v36 = v27->__r_.__value_.__r.__words[2];
  long long v35 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  long long v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  if (v36 >= 0) {
    unint64_t v30 = (char *)&v35;
  }
  else {
    unint64_t v30 = (char *)v35;
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, v30);
  std::runtime_error::runtime_error(v29, &v34);
  v29->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
}

void sub_1C8E9F598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      if (a42 < 0) {
        operator delete(a37);
      }
      if (*(char *)(v44 - 97) < 0) {
        operator delete(*(void **)(v44 - 120));
      }
      if (*(char *)(v44 - 73) < 0) {
        operator delete(*(void **)(v44 - 96));
      }
      if (*(char *)(v44 - 49) < 0) {
        operator delete(*(void **)(v44 - 72));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t *std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(void *a1, int a2)
{
  unint64_t v2 = std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(void *a1, unsigned __int8 *a2)
{
  if (!a1[3])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "The weights handler must be set up before querying port weights.");
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2))
  {
    unint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v8 = std::string::append(&v12, ")");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v10 = std::string::append(&v13, " does not have a valid data type.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v7, &v14);
    v7->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((unsigned int *)v4 + 10);
}

void sub_1C8E9F934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v29) {
    __cxa_free_exception(v28);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::parse::SSUGraphBuilder::graphBuilderForAppCategory(uint64_t a1)
{
  int v2 = *(char *)(a1 + 32);
  if (v2 != 2)
  {
    if (v2 == 1) {
      operator new();
    }
    if (*(unsigned char *)(a1 + 32))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v6, *(char *)(a1 + 32));
      unint64_t v4 = std::string::insert(&v6, 0, "Could not build a graph builder for unhandled category: %u");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v7);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
  }
  operator new();
}

void sub_1C8E9FB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void snlp::ssu::parse::SSUGraphBuilder::buildGraph(siri::ontology *a1)
{
}

void snlp::ssu::parse::SSUGraphBuilder::addUtteranceSubgraph(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  siri::ontology::oname::graph::ontology_init::common_VoiceCommand(a1);
  uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_reference(EntityNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v18 = *(std::string *)a5;
  }
  char v19 = 1;
  StringNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createStringNode();
  if (v19 && SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  siri::ontology::oname::graph::ontology_init::Argument_name(StringNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  (*(void (**)(uint64_t *__return_ptr, siri::ontology::oname::graph::ontology_init *, uint64_t))(*(void *)a1 + 24))(&v17, a1, a4);
  siri::ontology::UsoEntityNode::addIdentifier();
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v12);
  }
  if (*(unsigned char *)(a6 + 24)) {
    snlp::ssu::parse::SSUGraphBuilder::buildClosestPositiveIdentifier((uint64_t)a1);
  }
  std::string v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v18.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEBUG, "No closest positive plaintext example available -- skipping attaching USO identifier", (uint8_t *)&v18, 2u);
  }
  Utf16CFIndex Length = snlp::common::utilities::getUtf16Length((uint64_t *)a5);
  UnicodeScalarCFIndex Length = snlp::common::utilities::getUnicodeScalarLength((uint64_t *)a5);
  if (HIDWORD(Utf16Length) && HIDWORD(UnicodeScalarLength))
  {
    siri::ontology::UsoEntityNode::addUtteranceAlignment();
  }
  else
  {
    std::string::size_type v16 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_ERROR, "Could not compute utterance alignment boundary due to Unicode issue. Not adding alignment.", (uint8_t *)&v18, 2u);
    }
  }
}

void sub_1C8EA0064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a9) {
    std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::parse::SSUGraphBuilder::addPayloadSubgraph(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(a1);
  uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_payload(EntityNode);
  std::string v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::common_AppEntity(v6);
  std::string v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_appEntity(v7);
  siri::ontology::UsoGraphNode::setSuccessor();
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v10 = *(std::string *)a4;
  }
  char v11 = 1;
  StringNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createStringNode();
  if (v11 && SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  siri::ontology::oname::graph::ontology_init::Argument_name(StringNode);
  uint64_t result = siri::ontology::UsoGraphNode::setSuccessor();
  if (*(void *)(a4 + 40) != *(void *)(a4 + 48)) {
    operator new();
  }
  return result;
}

void sub_1C8EA020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB775C40);
}

void snlp::ssu::parse::SSUGraphBuilder::buildClosestPositiveIdentifier(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(v1);
  operator new();
}

void sub_1C8EA0420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x1CB775C40](v28, 0x1012C40071C2685);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::getITFMExecutedHandcraftedRules@<X0>(long long **a1@<X0>, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2@<X8>)
{
  sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(a2);
  uint64_t result = sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::makeRules(a2);
  long long v5 = *a1;
  std::string v6 = a1[1];
  while (v5 != v6)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 2);
    unint64_t v8 = v7 + 1;
    unint64_t v9 = v7[2];
    if (v9 >= v7[3])
    {
      uint64_t result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v8, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, v5);
      uint64_t result = v9 + 24;
    }
    void v7[2] = result;
    long long v5 = (long long *)((char *)v5 + 24);
  }
  return result;
}

void sub_1C8EA052C(_Unwind_Exception *a1)
{
  MEMORY[0x1CB7741A0](v1);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::insertToFeatureStore(long long **a1)
{
  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::getITFMExecutedHandcraftedRules(a1, (sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)v1);
  snlp::common::logging::feature_store_utilities::insertITFMExecutedHandcraftedRulesToFeatureStore();
}

uint64_t itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(long long **a1, uint64_t a2, int *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!_os_feature_enabled_impl())
  {
    std::string v6 = SNLPOSLoggerForCategory(2);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    uint64_t v7 = *a3;
    if (v7 >= 8)
    {
      char v11 = SNLPOSLoggerForCategory(4);
      unint64_t v8 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        std::string::size_type v20 = "<UNDEFINED_COMPONENT>";
        __int16 v21 = 2048;
        uint64_t v22 = v7;
        _os_log_impl(&dword_1C8DA9000, v11, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      unint64_t v8 = off_1E65808C8[v7];
    }
    int v19 = 136315138;
    std::string::size_type v20 = v8;
    uint64_t v12 = "[%s] Skipping insertion of SNLC executed handcrafted rules into FeatureStore because SNLPFeatureStoreEnabled f"
          "eature flag is disabled";
    goto LABEL_16;
  }
  if (*(unsigned char *)(a2 + 24)) {
    itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::insertToFeatureStore(a1);
  }
  std::string v6 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *a3;
    if (v9 >= 8)
    {
      std::string v13 = SNLPOSLoggerForCategory(4);
      std::string v10 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        std::string::size_type v20 = "<UNDEFINED_COMPONENT>";
        __int16 v21 = 2048;
        uint64_t v22 = v9;
        _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      std::string v10 = off_1E65808C8[v9];
    }
    int v19 = 136315138;
    std::string::size_type v20 = v10;
    uint64_t v12 = "[%s] nlu_request_id not found so skipping insertion of SNLC executed handcrafted rules into FeatureStore";
LABEL_16:
    _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v19, 0xCu);
  }
LABEL_17:
  std::string v14 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *a3;
    if (v15 >= 8)
    {
      uint64_t v17 = SNLPOSLoggerForCategory(4);
      std::string::size_type v16 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        std::string::size_type v20 = "<UNDEFINED_COMPONENT>";
        __int16 v21 = 2048;
        uint64_t v22 = v15;
        _os_log_impl(&dword_1C8DA9000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      std::string::size_type v16 = off_1E65808C8[v15];
    }
    int v19 = 136315138;
    std::string::size_type v20 = v16;
    _os_log_impl(&dword_1C8DA9000, v14, OS_LOG_TYPE_DEBUG, "[%s] Unable to insert executed handcrafted rules into FeatureStore", (uint8_t *)&v19, 0xCu);
  }
  return 0;
}

void uaap::toUTF8String(const __CFString *this, const __CFString *a2)
{
  CFIndex Length = CFStringGetLength(this);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_1C8EA097C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x1CB775C10](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uaap *uaap::searchDDTreeWithType(uaap *this, __DDResult *a2, const __CFString *a3)
{
  uint8x8_t v3 = this;
  if (this)
  {
    CFStringRef Type = (const void *)DDResultGetType();
    if (!CFEqual(Type, a2))
    {
      CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
      if (SubResults && (CFArrayRef v7 = SubResults, (Count = CFArrayGetCount(SubResults)) != 0))
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (uaap *)CFArrayGetValueAtIndex(v7, v10);
          uint64_t v13 = uaap::searchDDTreeWithType(ValueAtIndex, a2, v12);
          if (v13) {
            break;
          }
          if (v9 == ++v10) {
            return 0;
          }
        }
        return (uaap *)v13;
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

void snlp::ssu::selflogging::convertRequestId(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
}

void sub_1C8EA0B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::convertCacheTriggerReason(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 >= 4)
  {
    int v2 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUCacheTriggerReason case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

uint64_t snlp::ssu::selflogging::convertCategoryType(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 4) {
    return a1 + 1;
  }
  uint8x8_t v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_ERROR, "Unhandled SSUCategoryType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
  }

  return 0;
}

uint64_t snlp::ssu::selflogging::convertUtteranceCandidateType(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 >= 3)
  {
    int v2 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUUtteranceCandidateType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

id snlp::ssu::selflogging::convertUserRequestMatchInfo(unsigned int *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4FA0CE0]);
  [v2 setMatchingUtteranceCandidateType:snlp::ssu::selflogging::convertUtteranceCandidateType(*a1)];
  [v2 setNumEntities:a1[1]];
  return v2;
}

void sub_1C8EA0E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id snlp::ssu::selflogging::convertUserRequestCacheEntryInfo(unsigned int *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4FA0CC0]);
  [v2 setTriggerReason:snlp::ssu::selflogging::convertCacheTriggerReason(*a1)];
  [v2 setCategoryType:snlp::ssu::selflogging::convertCategoryType(*((char *)a1 + 4))];
  [v2 setNumEncodingSimilarityScoreComparisons:a1[2]];
  if (*((unsigned char *)a1 + 24)) {
    [v2 setClosestNegativeExampleScore:*((double *)a1 + 2)];
  }
  if (*((unsigned char *)a1 + 40)) {
    [v2 setClosestPositiveExampleScore:*((double *)a1 + 4)];
  }
  if (*((unsigned char *)a1 + 56))
  {
    uint8x8_t v3 = snlp::ssu::selflogging::convertUserRequestMatchInfo(a1 + 12);
    [v2 setMatchInfo:v3];
  }
  return v2;
}

void sub_1C8EA0EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::convertBackgroundUpdateType(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 >= 5)
  {
    id v2 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUBackgroundUpdateType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

uint64_t snlp::ssu::selflogging::convertCacheAction(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 >= 4)
  {
    id v2 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C8DA9000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUCacheAction case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

id snlp::ssu::selflogging::convertBackgroundUpdateAppCategoryInfo(char *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4FA0C90]);
  if (a1[1]) {
    [v2 setCategoryType:snlp::ssu::selflogging::convertCategoryType(*a1)];
  }
  [v2 setNumAppExamplesPositive:*((unsigned int *)a1 + 1)];
  [v2 setNumAppExamplesNegative:*((unsigned int *)a1 + 2)];
  [v2 setCacheAction:snlp::ssu::selflogging::convertCacheAction(*((unsigned int *)a1 + 3))];
  return v2;
}

void sub_1C8EA1114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id snlp::ssu::selflogging::convertBackgroundUpdateAppInfo(char **this, const snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo *a2)
{
  id v3 = objc_alloc_init(MEMORY[0x1E4FA0C98]);
  if (*((char *)this + 23) >= 0) {
    unint64_t v4 = (snlp::ssu::selflogging *)this;
  }
  else {
    unint64_t v4 = (snlp::ssu::selflogging *)*this;
  }
  uint64_t v5 = [NSString stringWithUTF8String:v4];
  [v3 setAppBundleIdSaltedHash:v5];

  [v3 setNumCacheFilesRemoved:*((unsigned int *)this + 6)];
  std::string v6 = [MEMORY[0x1E4F1CA48] array];
  CFArrayRef v7 = this[4];
  unint64_t v8 = this[5];
  while (v7 != v8)
  {
    CFIndex v9 = snlp::ssu::selflogging::convertBackgroundUpdateAppCategoryInfo(v7);
    [v6 addObject:v9];

    v7 += 16;
  }
  [v3 setCategoryInfos:v6];

  return v3;
}

void sub_1C8EA1210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 240));
    unint64_t v4 = (void **)(v2 + 216);
    std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(v2 + 215) < 0) {
      operator delete(*(void **)(v2 + 192));
    }
    uint64_t v3 = *(void *)(v2 + 184);
    *(void *)(v2 + 184) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v2 + 144);
    if (*(char *)(v2 + 143) < 0) {
      operator delete(*(void **)(v2 + 120));
    }
    if (*(char *)(v2 + 119) < 0) {
      operator delete(*(void **)(v2 + 96));
    }
    if (*(char *)(v2 + 95) < 0) {
      operator delete(*(void **)(v2 + 72));
    }
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    JUMPOUT(0x1CB775C40);
  }
  return result;
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    unint64_t v4 = (std::locale *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](std::locale *this)
{
  if (SHIBYTE(this[10].__locale_) < 0) {
    operator delete(this[8].__locale_);
  }
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

void sub_1C8EA2174(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }

  nlv4_inference_orchestrator::orchestration::EmbedderResponse::~EmbedderResponse(&a71);
  if (a2 == 1)
  {
    long long v79 = __cxa_begin_catch(a1);
    if (a12)
    {
      std::string v80 = NSString;
      (*(void (**)(void *))(*(void *)v79 + 16))(v79);
      std::string v81 = [v80 stringWithFormat:@"Hit SNLP exception while calling SNLPEmbedder::getEmbeddings : %s "];
      std::string v82 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v83 = *MEMORY[0x1E4F28588];
      a67 = *MEMORY[0x1E4F28568];
      a68 = v83;
      a69 = (uint64_t)v81;
      a70 = (uint64_t)v81;
      std::string v84 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a69 forKeys:&a67 count:2];
      *a12 = [v82 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:2 userInfo:v84];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EA20A4);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(&a33);
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  a71 = &a64;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<nlv4_inference_orchestrator::orchestration::Token>::reserve(uint64_t *result, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    _OWORD v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    uint64_t v5[3] = v5[0] + 112 * v4;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void *std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string v6 = result;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C8EA268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::Token::~Token(void **this)
{
  uint64_t v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void nlv4_inference_orchestrator::orchestration::EmbedderResponse::~EmbedderResponse(void **this)
{
  MEMORY[0x1CB773EA0](this + 38);
  uint64_t v3 = this + 35;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 19));
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

char *std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      uint64_t v11 = a4 + v7;
      long long v12 = *(_OWORD *)(a2 + v7 + 24);
      long long v13 = *(_OWORD *)(a2 + v7 + 35);
      *(void *)(a4 + v7 + 56) = 0;
      std::string v14 = (std::string *)(a4 + v7 + 56);
      *(_OWORD *)((char *)v14[-1].__r_.__value_.__r.__words + 3) = v13;
      *(_OWORD *)&v14[-2].__r_.__value_.__r.__words[2] = v12;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v14, *(long long **)(a2 + v7 + 56), *(long long **)(a2 + v7 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v7 + 64) - *(void *)(a2 + v7 + 56)) >> 3));
      long long v15 = *(_OWORD *)(a2 + v7 + 96);
      *(_OWORD *)(v11 + 80) = *(_OWORD *)(a2 + v7 + 80);
      *(_OWORD *)(v11 + 96) = v15;
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C8EA2A74(_Unwind_Exception *exception_object)
{
  while (v2 != v1)
  {
    v2 -= 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a1);
}

uint64_t std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 112)
  {
    long long v8 = *(_OWORD *)(a3 - 112);
    *(void *)(result - 96) = *(void *)(a3 - 96);
    *(_OWORD *)(result - 112) = v8;
    *(void *)(a3 - 104) = 0;
    *(void *)(a3 - 96) = 0;
    *(void *)(a3 - 112) = 0;
    long long v9 = *(_OWORD *)(a3 - 88);
    *(_OWORD *)(result - 77) = *(_OWORD *)(a3 - 77);
    *(_OWORD *)(result - 88) = v9;
    *(void *)(result - 48) = 0;
    *(void *)(result - 40) = 0;
    *(void *)(result - 56) = 0;
    *(_OWORD *)(result - 56) = *(_OWORD *)(a3 - 56);
    *(void *)(result - 40) = *(void *)(a3 - 40);
    *(void *)(a3 - 56) = 0;
    *(void *)(a3 - 48) = 0;
    *(void *)(a3 - 40) = 0;
    long long v10 = *(_OWORD *)(a3 - 16);
    *(_OWORD *)(result - 32) = *(_OWORD *)(a3 - 32);
    *(_OWORD *)(result - 16) = v10;
    result -= 112;
  }
  return result;
}

void sub_1C8EA33A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  a14 = &STACK[0x240];
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void sub_1C8EA3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&STACK[0x2A0]);
  nlv4_inference_orchestrator::orchestration::Token::~Token(&a65);
  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_1C8EA3C84()
{
}

void sub_1C8EA3C8C()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
      uint64_t v6 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v6);
      }
      __n128 result = *(__n128 *)(a2 + 48);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(__n128 *)uint64_t v6 = result;
      *(unsigned char *)(a2 + 71) = 0;
      *(unsigned char *)(a2 + 48) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v8;
    __n128 result = *(__n128 *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(__n128 *)(a1 + 48) = result;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
}

__n128 std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  long long v6 = *(long long *)((char *)a2 + 35);
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 3) = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  __n128 result = (__n128)a2[5];
  long long v8 = a2[6];
  *(__n128 *)&this[3].__r_.__value_.__r.__words[1] = result;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  return result;
}

void sub_1C8EA3F90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8EA4390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  MEMORY[0x1CB775C40](v41, 0x10B2C401347FB16);
  if (a2 == 1)
  {
    char v47 = __cxa_begin_catch(a1);
    int v48 = NSString;
    (*(void (**)(void *))(*(void *)v47 + 16))(v47);
    std::string v52 = [v48 stringWithFormat:@"NLv4 Asset Error when creating the OWL orchestrator: %s"];
    if (a13)
    {
      uint64_t v49 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v50 = *MEMORY[0x1E4F28588];
      *(void *)(v44 - 128) = *MEMORY[0x1E4F28568];
      *(void *)(v44 - 120) = v50;
      *(void *)(v44 - 112) = v52;
      *(void *)(v44 - 104) = v52;
      long long v51 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 - 112 forKeys:v44 - 128 count:2];
      *a13 = [v49 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:3 userInfo:v51];
    }
    __cxa_end_catch();
    JUMPOUT(0x1C8EA42FCLL);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }

  _Unwind_Resume(a1);
}

void sub_1C8EA4898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  MEMORY[0x1CB775C40](v29, 0x10B2C401347FB16);
  if (a2 == 2)
  {
    std::string v33 = __cxa_begin_catch(a1);
    std::string v34 = NSString;
    (*(void (**)(void *))(*(void *)v33 + 16))(v33);
    uint64_t v35 = [v34 stringWithFormat:@"Hit SNLP exception while constructing OWL orchestrator with asset directory %@: %s"];
    int64_t v36 = (void *)v35;
    if (v28)
    {
      uint64_t v37 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v38 = *MEMORY[0x1E4F28588];
      a21 = *MEMORY[0x1E4F28568];
      a22 = v38;
      a23 = v35;
      a24 = v35;
      unint64_t v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a23 forKeys:&a21 count:2];
      *uint64_t v28 = [v37 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:2 userInfo:v39];
    }
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {
      if (a18 < 0) {
        operator delete(__p);
      }

      _Unwind_Resume(a1);
    }
    unsigned __int8 v40 = __cxa_begin_catch(a1);
    uint64_t v41 = NSString;
    (*(void (**)(void *))(*(void *)v40 + 16))(v40);
    uint64_t v42 = [v41 stringWithFormat:@"NLv4 Asset Error when creating the OWL orchestrator: %s"];
    int v43 = (void *)v42;
    if (v28)
    {
      uint64_t v44 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v45 = *MEMORY[0x1E4F28588];
      a25 = *MEMORY[0x1E4F28568];
      a26 = v45;
      *(void *)(v30 - 88) = v42;
      *(void *)(v30 - 80) = v42;
      long long v46 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 - 88 forKeys:&a25 count:2];
      *uint64_t v28 = [v44 errorWithDomain:@"SNLPNaturalLanguageParserErrorDomain" code:3 userInfo:v46];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x1C8EA4844);
}

void sub_1C8EA4D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8EA4EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::matchingSpansContainsGenericConfirmationYes(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v31, "genericConfirmation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    uint64_t v24 = 0;
    if ((v30 & 0x80) != 0) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  uint64_t v5 = v33;
  size_t v6 = v32;
  if ((v33 & 0x80u) == 0) {
    size_t v7 = v33;
  }
  else {
    size_t v7 = v32;
  }
  uint64_t v8 = v30;
  int v9 = (char)v30;
  size_t v10 = v29;
  std::string::size_type v26 = __p;
  std::string __s1 = v31;
  if ((v30 & 0x80u) == 0) {
    size_t v11 = v30;
  }
  else {
    size_t v11 = v29;
  }
  do
  {
    long long v12 = *(unsigned __int8 ***)(v3 + 48);
    if (!v12) {
      goto LABEL_36;
    }
    long long v13 = *(unsigned __int8 **)(v3 + 56);
    if (!v13) {
      goto LABEL_36;
    }
    std::string v14 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v15 = (char)v14;
    if ((char)v14 < 0) {
      std::string v14 = v12[1];
    }
    if ((unsigned __int8 *)v7 != v14) {
      goto LABEL_36;
    }
    if (v15 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 **)(v3 + 48);
    }
    else {
      std::string::size_type v16 = *v12;
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(__s1, v16, v6)) {
        goto LABEL_36;
      }
    }
    else if (v5)
    {
      uint64_t v17 = &v31;
      uint64_t v18 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        uint64_t v17 = (void **)((char *)v17 + 1);
        ++v16;
        if (!--v18) {
          goto LABEL_23;
        }
      }
      goto LABEL_36;
    }
LABEL_23:
    uint64_t v19 = v13[23];
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *((void *)v13 + 1);
    }
    if (v11 == v19)
    {
      if (v20 >= 0) {
        __int16 v21 = v13;
      }
      else {
        __int16 v21 = *(unsigned __int8 **)v13;
      }
      if (v9 < 0)
      {
        if (!memcmp(v26, v21, v10))
        {
          uint64_t v24 = 1;
          goto LABEL_42;
        }
      }
      else
      {
        if (!v9)
        {
          uint64_t v24 = 1;
          goto LABEL_43;
        }
        p_p = &__p;
        uint64_t v23 = v8;
        while (*(unsigned __int8 *)p_p == *v21)
        {
          p_p = (void **)((char *)p_p + 1);
          ++v21;
          if (!--v23)
          {
            uint64_t v24 = 1;
            if ((v9 & 0x80) == 0) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
        }
      }
    }
LABEL_36:
    v3 += 88;
  }
  while (v3 != v4);
  uint64_t v24 = 0;
  if ((v9 & 0x80) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p);
LABEL_43:
  if ((char)v33 < 0) {
    operator delete(v31);
  }
  return v24;
}

void sub_1C8EA5114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::removeUserAcceptedOnlyHackApplies(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned __int8 *a4)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  std::string::basic_string[abi:ne180100]<0>(v24, "en_GB");
  std::string::basic_string[abi:ne180100]<0>(v25, "en_CA");
  std::string::basic_string[abi:ne180100]<0>(v26, "en_AU");
  std::string::basic_string[abi:ne180100]<0>(v27, "en_IN");
  std::string::basic_string[abi:ne180100]<0>(v28, "zh_CN");
  std::string::basic_string[abi:ne180100]<0>(v29, "yue_CN");
  std::unordered_set<std::string>::unordered_set((uint64_t)v21, (unsigned __int8 *)__p, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v29[i + 2]) < 0) {
      operator delete((void *)v29[i]);
    }
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v21, a4))
  {
    BOOL v14 = 0;
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t)std::string::basic_string[abi:ne180100]<0>(__p, "ROOT");
  uint64_t v9 = a2[23];
  if ((v9 & 0x80u) == 0) {
    size_t v10 = (void *)a2[23];
  }
  else {
    size_t v10 = (void *)*((void *)a2 + 1);
  }
  unint64_t v11 = v23;
  if ((v23 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)__p[1];
  }
  if (v10 != (void *)v11) {
    goto LABEL_29;
  }
  if ((v23 & 0x80u) == 0) {
    long long v12 = __p;
  }
  else {
    long long v12 = (void **)__p[0];
  }
  if ((v9 & 0x80) != 0)
  {
    uint64_t v8 = memcmp(*(const void **)a2, v12, *((void *)a2 + 1));
    if (v8)
    {
LABEL_29:
      BOOL v14 = 0;
      goto LABEL_30;
    }
  }
  else if (a2[23])
  {
    long long v13 = a2;
    while (*v13 == *(unsigned __int8 *)v12)
    {
      ++v13;
      long long v12 = (void **)((char *)v12 + 1);
      if (!--v9) {
        goto LABEL_23;
      }
    }
    goto LABEL_29;
  }
LABEL_23:
  uint64_t v15 = a2[71];
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)a2 + 7);
  }
  if (v15) {
    goto LABEL_29;
  }
  uint64_t v16 = a2[47];
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a2 + 4);
  }
  if (v16) {
    goto LABEL_29;
  }
  BOOL v14 = 0;
  if (*((void *)a2 + 12) - *((void *)a2 + 11) == 144)
  {
    if ((nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::matchingSpansContainsGenericConfirmationYes(v8, a3) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "UserAccepted");
      BOOL v14 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)v19, *((unsigned __int8 **)a2 + 11));
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_30:
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
LABEL_32:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v21[2]);
  uint64_t v17 = v21[0];
  v21[0] = 0;
  if (v17) {
    operator delete(v17);
  }
  return v14;
}

void sub_1C8EA53C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t snlp::ssu::trigger::SSUTriggerOnScreen::isTriggered(unsigned __int8 **this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  snlp::ssu::proto::SSUValidatedRequest::getOnScreenSalientEntityAppBundleIds(a2, &v6);
  uint64_t v3 = v7;
  uint64_t v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v6, v7, this + 1);
  int v8 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v3 == v4) {
    return 0;
  }
  else {
    return 0x100000002;
  }
}

void snlp::ssu::trigger::SSUTriggerOnScreen::~SSUTriggerOnScreen(void **this)
{
  *this = &unk_1F235F338;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1CB775C40);
}

{
  *this = &unk_1F235F338;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

__n128 snlp::ssu::trigger::SSUTriggerOnScreen::SSUTriggerOnScreen(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = &unk_1F235F338;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(void *)a1 = &unk_1F235F338;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

void snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity(float **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "batch");
  snlp::ssu::utilities::validateTensorRank(2uLL, (void *)a2, (uint64_t)a4);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  if (!a4[24])
  {
    int v8 = *(unint64_t **)a2;
    if (*(void *)(a2 + 8) - *(void *)a2 <= 8uLL) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v10 = *v8;
    unint64_t v9 = v8[1];
    unint64_t v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    uint64_t v17 = v11 + 2;
    void *v11 = v10;
    v11[1] = v9;
    std::string __p = v11;
    std::string::basic_string[abi:ne180100]<0>(v13, "batch");
    snlp::ssu::utilities::validateTensor((char **)&__p, (void *)a2, (uint64_t)a4);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    operator delete(v11);
    if (!a4[24])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "candidate");
      snlp::ssu::utilities::validateTensorRank(1uLL, (void *)a3, (uint64_t)a4);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p);
      }
      if (!a4[24])
      {
        BOOL v12 = operator new(8uLL);
        *BOOL v12 = v9;
        uint64_t v16 = v12 + 1;
        uint64_t v17 = v12 + 1;
        std::string __p = v12;
        std::string::basic_string[abi:ne180100]<0>(v13, "candidate");
        snlp::ssu::utilities::validateTensor((char **)&__p, (void *)a3, (uint64_t)a4);
        if (v14 < 0) {
          operator delete(v13[0]);
        }
        operator delete(v12);
        if (!a4[24])
        {
          std::vector<float>::resize(a1, v10);
          cblas_sgemv(CblasRowMajor, CblasNoTrans, v10, v9, 1.0, *(const float **)(a2 + 24), v9, *(const float **)(a3 + 24), 1, 0.0, *a1, 1);
          *a4 = 0;
          a4[24] = 0;
        }
      }
    }
  }
}

void sub_1C8EA63F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v22);
  _Unwind_Resume(a1);
}

void snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(int *a1@<X0>, sirinluinternalitfm::ITFMParserResponse *a2@<X8>)
{
  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v8);
  int v4 = *a1;
  v11 |= 3u;
  int v9 = v4;
  int v10 = 1065353216;
  BOOL v5 = v4 != 1;
  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v6);
  v7 |= 3u;
  void v6[4] = v5;
  void v6[5] = 0;
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse(a2);
  PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>();
}

void PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>()
{
}

void sub_1C8EA662C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaMessagePayloadPromptOverride@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[56] = 0;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t result = snlp::common::text_uso_graph::isMessageContentPrompt(result);
    if (result)
    {
      int v3 = 1;
      snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v3, (sirinluinternalitfm::ITFMParserResponse *)buf);
    }
  }
  return result;
}

void sub_1C8EA6790(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  if (*(unsigned char *)(v1 + 56)) {
    MEMORY[0x1CB773FB0](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[35]>(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_1C8EA68B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaIntercomPayloadPromptOverride@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[56] = 0;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t result = snlp::common::text_uso_graph::isIntercomPayloadPrompt(result);
    if (result)
    {
      int v3 = 1;
      snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v3, (sirinluinternalitfm::ITFMParserResponse *)buf);
    }
  }
  return result;
}

void sub_1C8EA6AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  if (*(unsigned char *)(v11 + 56)) {
    MEMORY[0x1CB773FB0](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::legacyNLContextOverride@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  LODWORD(v2) = 0;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[56] = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 72);
  int v4 = (*(unsigned char *)(result + 68) != 0) & (v3 >> 1);
  if ((v3 & 8) == 0) {
    goto LABEL_16;
  }
  if (!*(unsigned char *)(result + 70)) {
    goto LABEL_16;
  }
  uint64_t v2 = *(uint64_t **)(result + 8);
  if (!v2) {
    goto LABEL_16;
  }
  int v5 = *((char *)v2 + 23);
  if (v5 < 0)
  {
    if (v2[1] != 11)
    {
LABEL_15:
      LODWORD(v2) = 0;
      goto LABEL_16;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }
  else if (v5 != 11)
  {
    goto LABEL_15;
  }
  uint64_t v6 = (uint64_t *)*v2;
  uint64_t v7 = *(uint64_t *)((char *)v2 + 3);
  LODWORD(v2) = v6 == (uint64_t *)0x74616C736E617274 && v7 == 0x6E6F6974616C736ELL;
LABEL_16:
  if ((v4 | v2) == 1)
  {
    int v9 = 0;
    snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v9, (sirinluinternalitfm::ITFMParserResponse *)buf);
  }
  return result;
}

void sub_1C8EA6D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  if (*(unsigned char *)(v11 + 56)) {
    MEMORY[0x1CB773FB0](v11);
  }
  _Unwind_Resume(exception_object);
}

void snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::generateOverrideResponse(const sirinluinternalitfm::ITFMParserRequest *a1@<X1>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[56] = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v5 = *((void *)a1 + 9);
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(v5 + 136);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0)
  {
LABEL_8:
    uint64_t v8 = *(void *)(v5 + 136);
    if (v8)
    {
      int v9 = *(void **)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = v9[10];
        uint64_t v11 = *(void *)(v5 + 128);
        if (v11) {
          BOOL v12 = *(void *)(v11 + 32) != 0;
        }
        else {
          BOOL v12 = 0;
        }
        uint64_t v16 = v9[11];
        uint64_t v15 = v9[12];
        sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v19);
        if (!v10 && !v12)
        {
          if (v15 - v16 == 8)
          {
            sirinluexternal::SystemDialogActGroup::makeSystemDialogAct((sirinluexternal::SystemDialogActGroup *)v19);
            operator new();
          }
          goto LABEL_20;
        }
LABEL_19:
        sirinluexternal::SystemDialogActGroup::operator=();
        goto LABEL_20;
      }
    }
    uint64_t v13 = *(void *)(v5 + 128);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 32);
      sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v19);
      if (!v14) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_15:
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v19);
LABEL_20:
    snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaMessagePayloadPromptOverride((uint64_t)v19, &__p);
    std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
    if (v22) {
      MEMORY[0x1CB773FB0](&__p);
    }
    if (!a2[56])
    {
      snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaIntercomPayloadPromptOverride((uint64_t)v19, &__p);
      std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
      if (v22) {
        MEMORY[0x1CB773FB0](&__p);
      }
    }
    MEMORY[0x1CB773CE0](v19);
    goto LABEL_26;
  }
  snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::legacyNLContextOverride(v7, &__p);
  std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
  if (v22) {
    MEMORY[0x1CB773FB0](&__p);
  }
  if (!a2[56])
  {
    uint64_t v5 = *((void *)a1 + 9);
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
LABEL_26:
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v21 = 0;
  uint64_t v17 = *((void *)a1 + 5);
  if (v17)
  {
    uint64_t v18 = *(const std::string **)(v17 + 16);
    if (v18) {
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__p, v18);
    }
  }
  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(v23, (uint64_t)&__p, &snlc_inference_orchestrator::orchestration::kComponent);
  if (v21 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C8EA7004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  MEMORY[0x1CB773CE0](&a9);
  std::string __p = (void *)(v21 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(unsigned char *)(v20 + 56)) {
    MEMORY[0x1CB773FB0](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(unsigned char *)(result + 56))
    {
      return sirinluinternalitfm::ITFMParserResponse::operator=();
    }
  }
  else if (*(unsigned char *)(result + 56))
  {
    uint64_t result = MEMORY[0x1CB773FB0]();
    *(unsigned char *)(result + 56) = 0;
  }
  else
  {
    uint64_t result = MEMORY[0x1CB773F80]();
    *(unsigned char *)(result + 56) = 1;
  }
  return result;
}

void *uaap::TimeDurationHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::mapDurationToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapDurationToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"TimeDuration");
  unsigned int v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  int v4 = (const void **)v3[3];
  if ((const void **)v3[4] != v4 {
    && *v4
  }
  {
    operator new();
  }
  uaap::mapTimeSpansToItemizedUsos(a1);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1);
}

void sub_1C8EA72CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeDurationHandler::resolveDurationGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeDurationSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    int v4 = this;
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(this);
    uint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v4, v6);
    siri::ontology::oname::graph::ontology_init::Argument_entity(v7);
    uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    int v9 = (siri::ontology::oname::graph::ontology_init *)*((void *)v4 + 6);
    uint64_t v10 = siri::ontology::oname::graph::ontology_init::Argument_start(v8);
    uint64_t v11 = uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v9, a2, (uint64_t)EntityNode, v10);
    BOOL v12 = (siri::ontology::oname::graph::ontology_init *)*((void *)v4 + 7);
    uint64_t v13 = siri::ontology::oname::graph::ontology_init::Argument_end(v11);
    return uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v12, a2, (uint64_t)EntityNode, v13);
  }
  return this;
}

uaap::AbstractDateTimeHandler *uaap::TimeDurationHandler::resolveOffsetReferenceWithDirection(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  int v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if ((*((void *)a1 + 6) != 0) != (*((void *)a1 + 7) == 0)) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7)
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
      uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      int v4 = EntityNode;
      int v9 = (siri::ontology::oname::graph::ontology_init *)*((void *)a1 + 6);
      if (!v9) {
        int v9 = (siri::ontology::oname::graph::ontology_init *)*((void *)a1 + 7);
      }
      uint64_t v10 = siri::ontology::oname::graph::ontology_init::Argument_offsetReference(EntityNode);
      uint64_t v11 = uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v9, a2, (uint64_t)v4, v10);
      siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v11);
      BOOL v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      if (*((void *)a1 + 6)) {
        siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v12);
      }
      else {
        siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v12);
      }
      uint64_t v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_direction(v13);
      uint64_t v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v14);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v13, a1, v15);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v16);
    }
  }
  return v4;
}

void uaap::TimeDurationHandler::~TimeDurationHandler(uaap::TimeDurationHandler *this)
{
}

siri::ontology::oname::graph::ontology_init *uaap::resolveOffsetReferenceGraphWithDirection(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeDurationSpan *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    int v4 = this;
    uint64_t v5 = *((void *)a2 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeDurationHandler::resolveOffsetReferenceWithDirection(v4, a2, v5, v6);
  }
  return this;
}

void nlv4_inference_orchestrator::context::Embedder::setEmptyContext(nlv4_inference_orchestrator::context::Embedder *this@<X0>, void *a2@<X8>)
{
  float v3 = (float)(unint64_t)nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)this, (uint64_t)this + 208);
  int v4 = (float *)operator new(4uLL);
  float *v4 = v3;
  uint64_t v5 = (int64x2_t *)operator new(0x10uLL);
  int64x2_t *v5 = vdupq_n_s64(1uLL);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v5, (uint64_t)v5[1].i64, 2uLL);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, (uint64_t)(v4 + 1), 1uLL);
  operator delete(v5);
  operator delete(v4);
}

void sub_1C8EA7670(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }
  operator delete(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::Embedder::embed(nlv4_inference_orchestrator::context::Embedder *this@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  char v22 = 0;
  unsigned __int8 v23 = 0;
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (!v5) {
    goto LABEL_28;
  }
  do
  {
    uint64_t v6 = v5 + 2;
    float v7 = (float)(unint64_t)nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)this, (uint64_t)(v5 + 2));
    if (*((unsigned char *)this + 104) && v7 == (float)*((unint64_t *)this + 12))
    {
      uint64_t v8 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)v5 + 39) < 0) {
          uint64_t v6 = (void *)*v6;
        }
        *(_DWORD *)std::string buf = 136315650;
        long long v25 = "NLv4";
        __int16 v26 = 2080;
        std::string::size_type v27 = "[insights-snlp-nlv4]: ";
        __int16 v28 = 2080;
        size_t v29 = v6;
        _os_log_impl(&dword_1C8DA9000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sRejecting '%s'.\n", buf, 0x20u);
      }
    }
    else
    {
      int v9 = v22;
      if (v22 >= v23)
      {
        uint64_t v11 = __p;
        uint64_t v12 = v22 - __p;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = (char *)v23 - (char *)__p;
        if (((char *)v23 - (char *)__p) >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v23, v15);
          uint64_t v11 = __p;
          int v9 = v22;
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (float *)&v16[4 * v12];
        *uint64_t v17 = v7;
        uint64_t v10 = v17 + 1;
        while (v9 != v11)
        {
          int v18 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        std::string __p = v17;
        unsigned __int8 v23 = (float *)&v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *char v22 = v7;
        uint64_t v10 = v22 + 1;
      }
      char v22 = v10;
    }
    uint64_t v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (__p == v22)
  {
LABEL_28:
    nlv4_inference_orchestrator::context::Embedder::setEmptyContext(this, a3);
  }
  else
  {
    uint64_t v19 = operator new(0x10uLL);
    *uint64_t v19 = 1;
    v19[1] = v22 - __p;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v19, (uint64_t)(v19 + 2), 2uLL);
    a3[3] = 0;
    a3[4] = 0;
    a3[5] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v22, v22 - __p);
    nlv4_inference_orchestrator::context::Embedder::logFeatureTensor(this, a3);
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_1C8EA7954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v16);
  operator delete(v15);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::Embedder::logFeatureTensor(nlv4_inference_orchestrator::vocabulary::Vocabulary *a1, unint64_t **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((char *)a2[1] - (char *)*a2 != 16)
  {
    int v18 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v19 = "Warning: Context shape not 2-dim";
LABEL_23:
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, v19, buf, 2u);
    return;
  }
  unint64_t v4 = (*a2)[1] * **a2;
  uint64_t v5 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v7 = **a2;
    unint64_t v6 = (*a2)[1];
    *(_DWORD *)std::string buf = 134218496;
    unint64_t v22 = v7;
    __int16 v23 = 2048;
    unint64_t v24 = v6;
    __int16 v25 = 2048;
    unint64_t v26 = v4;
    _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEBUG, "[NLv4IO Context Tensor] shape=%lu,%lu num_elems=%lu", buf, 0x20u);
  }
  if (v4 != ((char *)a2[4] - (char *)a2[3]) >> 2)
  {
    int v18 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v19 = "Warning: Context shape not consistent with data";
    goto LABEL_23;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = **a2;
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      unint64_t v11 = v8[1];
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          unint64_t v13 = j + i * v11;
          uint64_t v14 = a2[3];
          if (v13 < ((char *)a2[4] - (char *)v14) >> 2)
          {
            float v15 = *((float *)v14 + v13);
            uint64_t v16 = SNLPOSLoggerForCategory(1);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(a1, (unint64_t)v15, &__p);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 134218754;
              unint64_t v22 = i;
              __int16 v23 = 2048;
              unint64_t v24 = j;
              __int16 v25 = 2048;
              unint64_t v26 = (unint64_t)v15;
              __int16 v27 = 2080;
              __int16 v28 = p_p;
              _os_log_impl(&dword_1C8DA9000, v16, OS_LOG_TYPE_DEBUG, "[NLv4IO Context Token] i=%lu j=%lu id=%lu token=%s", buf, 0x2Au);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          uint64_t v8 = *a2;
          unint64_t v11 = (*a2)[1];
        }
        unint64_t v9 = *v8;
      }
    }
  }
}

double nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  float v30 = a6;
  uint64_t v8 = *(uint64_t **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 == 24)
  {
    __int16 v27 = a5;
    uint64_t v9 = *v8;
    unint64_t v10 = v8[2];
    uint64_t v11 = a3 * a2;
    uint64_t v29 = v8[1];
    std::vector<float>::vector(__dst, a3 * a2 * v29, &v30);
    if (v9)
    {
      uint64_t v12 = 0;
      unint64_t v13 = *(char **)__dst;
      if (v10 >= a3) {
        unint64_t v14 = a3;
      }
      else {
        unint64_t v14 = v10;
      }
      float v15 = *(char **)(a1 + 24);
      uint64_t v16 = 4 * v11;
      uint64_t v17 = 4 * v10;
      do
      {
        int v18 = v13;
        for (uint64_t i = v29; i; --i)
        {
          if (v14) {
            memmove(v18, v15, 4 * v14);
          }
          v18 += v16;
          v15 += v17;
        }
        ++v12;
        v13 += 4 * a3;
      }
      while (v12 != v9);
    }
    *__int16 v27 = 0;
    v27[1] = 0;
    void v27[2] = 0;
    uint64_t v20 = operator new(0x18uLL);
    v27[1] = v20 + 3;
    void v27[2] = v20 + 3;
    *uint64_t v20 = v29;
    v20[1] = a2;
    v20[2] = a3;
    *__int16 v27 = v20;
    v27[4] = 0;
    v27[5] = 0;
    void v27[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v27 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2);
    if (*(void *)__dst)
    {
      *(void *)&__dst[8] = *(void *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    __int16 v23 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v24 = a4;
      }
      else {
        unint64_t v24 = (uint64_t *)*a4;
      }
      uint64_t v25 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
      *(_DWORD *)long long __dst = 136315394;
      *(void *)&void __dst[4] = v24;
      *(_WORD *)&__dst[12] = 2048;
      *(void *)&__dst[14] = v25;
      _os_log_impl(&dword_1C8DA9000, v23, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input span tensor with %lu dimensions", __dst, 0x16u);
    }
    double result = 0.0;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

void sub_1C8EA7E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  int v18 = *v16;
  if (*v16)
  {
    *(void *)(a10 + 8) = v18;
    operator delete(v18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::utils::padContextTensor(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(uint64_t **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 == 16)
  {
    uint64_t v9 = *v7;
    unint64_t v10 = v7[1];
    std::vector<float>::vector(__dst, *v7 * a2);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(char **)__dst;
      unint64_t v13 = *(char **)(a1 + 24);
      if (v10 >= a2) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = v10;
      }
      do
      {
        if (v14) {
          memmove(v12, v13, 4 * v14);
        }
        if ((uint64_t)(4 * (a2 - v10)) >= 1)
        {
          uint64_t v15 = 4 * v10;
          unint64_t v16 = ((a2 - v10) & 0x3FFFFFFFFFFFFFFFLL) + 1;
          do
          {
            *(float *)&v12[v15] = a5;
            --v16;
            v15 += 4;
          }
          while (v16 > 1);
        }
        v12 += 4 * a2;
        ++v11;
        v13 += 4 * v10;
      }
      while (v11 != v9);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v17 = operator new(0x10uLL);
    a4[1] = v17 + 2;
    a4[2] = v17 + 2;
    *uint64_t v17 = v9;
    v17[1] = a2;
    *a4 = v17;
    a4[4] = 0;
    a4[5] = 0;
    a4[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a4 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2);
    if (*(void *)__dst)
    {
      *(void *)&__dst[8] = *(void *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    uint64_t v19 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = (uint64_t *)*a3;
      }
      uint64_t v21 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
      *(_DWORD *)long long __dst = 136315394;
      *(void *)&void __dst[4] = v20;
      *(_WORD *)&__dst[12] = 2048;
      *(void *)&__dst[14] = v21;
      _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input context tensor with %lu dimensions", __dst, 0x16u);
    }
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
  }
}

void sub_1C8EA80AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(a10 + 8) = v16;
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  float v58 = a6;
  uint64_t v9 = *(unint64_t **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 == 24)
  {
    unint64_t v11 = v9[1];
    if (v11 > a2)
    {
      std::to_string(&v54, v11);
      uint64_t v41 = std::string::insert(&v54, 0, "Token overflow; received ");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      int v43 = std::string::append(&v55, " tokens, expected ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v53, a2);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = &v53;
      }
      else {
        uint64_t v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
      char v47 = std::string::append(&v56, (const std::string::value_type *)v45, size);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      uint64_t v49 = std::string::append(&__p, " or fewer tokens.");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)std::string buf = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (buf[23] >= 0) {
        std::string v52 = buf;
      }
      else {
        std::string v52 = *(char **)buf;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v52);
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
    unint64_t v13 = *v9;
    unint64_t v14 = v9[2];
    uint64_t v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v16 = a4;
      }
      else {
        unint64_t v16 = (uint64_t *)*a4;
      }
      uint64_t v17 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2;
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2048;
      unint64_t v60 = v13;
      __int16 v61 = 2048;
      unint64_t v62 = v11;
      __int16 v63 = 2048;
      unint64_t v64 = v14;
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings input tensor std::string::size_type size = %lu (%lu, %lu, %lu)", buf, 0x34u);
    }
    int v18 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (uint64_t *)*a4;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings maxNumTokens (defined by network config) = %lu", buf, 0x16u);
    }
    if (v14 == a3 && v13 * a3 * v11 == (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2)
    {
      std::vector<float>::vector(&__p, v13 * a2 * a3, &v58);
      unint64_t v20 = v11 * a3;
      unint64_t v21 = a3 * a2;
      unint64_t v22 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a4 + 23) >= 0) {
          __int16 v23 = a4;
        }
        else {
          __int16 v23 = (uint64_t *)*a4;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v60 = v21 - v20;
        _os_log_impl(&dword_1C8DA9000, v22, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings For each batch, copying %lu embedding values and adding %lu padding values", buf, 0x20u);
      }
      if (v13)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *(int **)(a1 + 24);
        std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
        do
        {
          __int16 v27 = v25;
          __int16 v28 = (_DWORD *)v26;
          for (unint64_t i = v20; i; --i)
          {
            int v30 = *v27++;
            *v28++ = v30;
          }
          ++v24;
          v26 += 4 * v21;
          v25 += v20;
        }
        while (v24 != v13);
      }
      std::string v31 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v32 = a4;
        }
        else {
          uint64_t v32 = (uint64_t *)*a4;
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v60 = a2;
        __int16 v61 = 2048;
        unint64_t v62 = a3;
        _os_log_impl(&dword_1C8DA9000, v31, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings Padded embedding tensor shape: (%lu, %lu, %lu)", buf, 0x2Au);
      }
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      unsigned __int8 v33 = operator new(0x18uLL);
      a5[1] = v33 + 3;
      a5[2] = v33 + 3;
      *unsigned __int8 v33 = v13;
      v33[1] = a2;
      _DWORD v33[2] = a3;
      *a5 = v33;
      a5[4] = 0;
      a5[5] = 0;
      a5[3] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a5 + 3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v37 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v38 = a4;
        }
        else {
          uint64_t v38 = (uint64_t *)*a4;
        }
        uint64_t v39 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2;
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = v38;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v60 = v11;
        __int16 v61 = 2048;
        unint64_t v62 = v14;
        __int16 v63 = 2048;
        unint64_t v64 = a3;
        __int16 v65 = 2048;
        uint64_t v66 = v39;
        _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "[%s] Illegal shape for embeddings: (%lu, %lu, %lu). Must be (?, ?, %lu) and hold %lu values", buf, 0x3Eu);
      }
      a5[1] = 0;
      *a5 = 0;
      a5[2] = 0;
      unsigned __int8 v40 = operator new(0x18uLL);
      *a5 = v40;
      a5[2] = v40 + 3;
      void *v40 = v13;
      v40[1] = a2;
      v40[2] = a3;
      a5[1] = v40 + 3;
      std::vector<float>::vector(a5 + 3, a3 * a2 * v13, &v58);
    }
  }
  else
  {
    std::string v34 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v35 = a4;
      }
      else {
        uint64_t v35 = (uint64_t *)*a4;
      }
      uint64_t v36 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v36;
      _os_log_impl(&dword_1C8DA9000, v34, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input embeddings tensor with %lu dimensions", buf, 0x16u);
    }
    *((_OWORD *)a5 + 1) = 0u;
    *((_OWORD *)a5 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
  }
}

void sub_1C8EA8750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((v48 & 1) == 0)
    {
LABEL_6:
      if (a47 < 0) {
        operator delete(a42);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v47);
  goto LABEL_6;
}

double nlv4_inference_orchestrator::inference_engine::utils::padITFMMaskTensor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  float v18 = a5;
  unint64_t v7 = *(uint64_t **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 == 16)
  {
    uint64_t v9 = *v7;
    std::vector<float>::vector(__dst, *v7 * a2, &v18);
    unint64_t v10 = *(unsigned char **)(a1 + 24);
    unint64_t v11 = *(unsigned char **)(a1 + 32);
    if (v11 != v10) {
      memmove(*(void **)__dst, v10, v11 - v10);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v12 = operator new(0x10uLL);
    a4[1] = v12 + 2;
    a4[2] = v12 + 2;
    *uint64_t v12 = v9;
    v12[1] = a2;
    *a4 = v12;
    a4[4] = 0;
    a4[5] = 0;
    a4[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a4 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2);
    if (*(void *)__dst)
    {
      *(void *)&__dst[8] = *(void *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    uint64_t v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a3 + 23) >= 0) {
        unint64_t v16 = a3;
      }
      else {
        unint64_t v16 = (uint64_t *)*a3;
      }
      uint64_t v17 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
      *(_DWORD *)long long __dst = 136315394;
      *(void *)&void __dst[4] = v16;
      *(_WORD *)&__dst[12] = 2048;
      *(void *)&__dst[14] = v17;
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the mask tensor with %lu dimensions", __dst, 0x16u);
    }
    double result = 0.0;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

void sub_1C8EA89C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  unint64_t v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
}

void sub_1C8EA8A60(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8EA8CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8EA9184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8EA9340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8EA942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  float v3 = this;
  LODWORD(v4) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0)
  {
    std::basic_string<char16_t>::size_type v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    unint64_t v6 = __n - v5;
    if (__n > v5)
    {
      unint64_t v7 = 10;
      goto LABEL_6;
    }
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_25:
    float v18 = (std::basic_string<char16_t> *)((char *)v3 + 2 * __n);
    goto LABEL_34;
  }
  std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
  unint64_t v6 = __n - size;
  if (__n <= size)
  {
    this->__r_.__value_.__l.__size_ = __n;
    float v3 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  std::basic_string<char16_t>::size_type v5 = this->__r_.__value_.__l.__size_;
  unint64_t v9 = this->__r_.__value_.__r.__words[2];
  unint64_t v7 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  unint64_t v4 = HIBYTE(v9);
LABEL_6:
  if (v7 - v5 >= v6)
  {
    uint64_t v19 = this;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < v6 - v7 + v5) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v3;
    if ((v4 & 0x80) != 0) {
      unint64_t v11 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
    }
    if (v7 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = v6 + v5;
      if (v6 + v5 <= 2 * v7) {
        unint64_t v12 = 2 * v7;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v12 | 3) != 0xB) {
        uint64_t v13 = v12 | 3;
      }
      if (v12 >= 0xB) {
        uint64_t v10 = v13 + 1;
      }
      else {
        uint64_t v10 = 11;
      }
    }
    unint64_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v10);
    std::basic_string<char16_t>::size_type v15 = (std::basic_string<char16_t>::size_type)v14;
    uint64_t v17 = v16;
    if (v5) {
      memmove(v14, v11, 2 * v5);
    }
    if (v7 != 10) {
      operator delete(v11);
    }
    v3->__r_.__value_.__l.__size_ = v5;
    v3->__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = v15;
  }
  uint64_t v19 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_28:
  uint64_t v20 = (std::basic_string<char16_t> *)((char *)v19 + 2 * v5);
  unint64_t v21 = v6;
  do
  {
    v20->__r_.__value_.__s.__data_[0] = 0;
    uint64_t v20 = (std::basic_string<char16_t> *)((char *)v20 + 2);
    --v21;
  }
  while (v21);
  std::basic_string<char16_t>::size_type v22 = v5 + v6;
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0) {
    v3->__r_.__value_.__l.__size_ = v22;
  }
  else {
    *((unsigned char *)&v3->__r_.__value_.__s + 23) = v22 & 0x7F;
  }
  float v18 = (std::basic_string<char16_t> *)((char *)v19 + 2 * v22);
LABEL_34:
  v18->__r_.__value_.__s.__data_[0] = 0;
}

void sub_1C8EA97E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *uaap::DateTimeHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::mapDateTimeToItemizedUsos(a3);
  }
  return result;
}

void *uaap::mapDateTimeToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"DateTime");
  float v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (v3)
  {
    unint64_t v4 = (const void **)v3[3];
    if ((const void **)v3[4] == v4) {
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    }
    if (*v4
    {
      operator new();
    }
  }
  uaap::DateHandler::mapDateToItemizedUsos(a1);
  uaap::mapTimeSpansToItemizedUsos(a1);
  uaap::mapTimeSpanSpansToItemizedUsos(a1);
  CFHashCode v5 = CFHash(@"DateSpan");
  double result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v5);
  if (result)
  {
    uint64_t v8 = result[3];
    uint64_t v7 = result[4];
    if (v7 != v8)
    {
      unint64_t v9 = 0;
      do
      {
        double result = *(void **)(v8 + 8 * v9);
        if (result)
        {
          if (result) {
            operator new();
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C8EA9C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB775C40](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveRecurringDateTime(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    uint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v8 = siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(EntityNode);
    uint64_t v9 = uaap::DateTimeHandler::resolveRecurrenceDuration((BOOL *)a1, a2, (uint64_t)EntityNode, v8);
    uint64_t v10 = siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes((siri::ontology::oname::graph::ontology_init *)v9);
    if (!(v9 | (unint64_t)uaap::DateTimeHandler::resolveDateTime(a1, a2, (uint64_t)EntityNode, v10, 1)))
    {
      return 0;
    }
    else
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::DateTimeHandler::resolveDateTime(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDDateOffsetSpan *a2, uint64_t a3, uint64_t a4, int a5)
{
  CFHashCode v5 = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    return v5;
  }
  siri::ontology::oname::graph::ontology_init::Root(a1);
  uint64_t isRecurringTime = siri::ontology::operator!=();
  if (isRecurringTime)
  {
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
    uint64_t isRecurringTime = siri::ontology::operator!=();
    if (isRecurringTime) {
      return 0;
    }
  }
  int v91 = a5;
  if (a5)
  {
    uint64_t v11 = *((void *)a1 + 10);
    if (v11 && (uint64_t v12 = *(void *)(v11 + 128)) != 0 && (*(void *)(v12 + 48) || *(void *)(v12 + 64))) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (uaap::DateHandler *)*((void *)a1 + 8);
    }
    uint64_t isRecurringTime = uaap::TimeSpanHandler::isRecurringTime(*((void *)a1 + 9), v10);
    if (isRecurringTime)
    {
      unint64_t v14 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v13 = (uaap::DateHandler *)*((void *)a1 + 8);
  }
  unint64_t v14 = (uaap::TimeHandler *)*((void *)a1 + 7);
LABEL_18:
  std::basic_string<char16_t>::size_type v15 = (uaap::TimeHandler *)*((void *)a1 + 9);
  if (!v15)
  {
    uint64_t v16 = *((void *)a1 + 7);
    if (v16) {
      std::basic_string<char16_t>::size_type v15 = *(uaap::TimeHandler **)(v16 + 120);
    }
    else {
      std::basic_string<char16_t>::size_type v15 = 0;
    }
  }
  unint64_t v92 = (uaap::DateHandler *)*((void *)a1 + 10);
  if (!v13 && !v14 && !v15 && !v92) {
    return 0;
  }
  std::string __p = 0;
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
  unint64_t EntityNode = siri::ontology::UsoGraph::createEntityNode();
  CFHashCode v5 = (siri::ontology::UsoGraph *)EntityNode;
  if (v13)
  {
    uint64_t v20 = siri::ontology::oname::graph::ontology_init::Argument_date((siri::ontology::oname::graph::ontology_init *)EntityNode);
    unint64_t EntityNode = (unint64_t)uaap::DateHandler::resolveDate(v13, a2, v5, v20, v21);
    unint64_t v90 = (siri::ontology::UsoGraph *)EntityNode;
    if (EntityNode)
    {
      uint64_t v27 = (v94 - (unsigned char *)__p) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        goto LABEL_161;
      }
      uint64_t v29 = v95 - (void)__p;
      if ((uint64_t)(v95 - (void)__p) >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t EntityNode = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t EntityNode = v28;
      }
      if (EntityNode) {
        unint64_t EntityNode = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(EntityNode);
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v37 = (uaap::DateHandler **)(EntityNode + 8 * v27);
      *uint64_t v37 = v13;
      std::string __p = v37;
      unint64_t v95 = EntityNode + 8 * v30;
      uint64_t v94 = (char *)(v37 + 1);
      int v22 = 1;
      if (v14) {
        goto LABEL_30;
      }
LABEL_51:
      uint64_t v24 = 0;
      goto LABEL_59;
    }
  }
  int v22 = 0;
  unint64_t v90 = 0;
  if (!v14) {
    goto LABEL_51;
  }
LABEL_30:
  uint64_t v23 = siri::ontology::oname::graph::ontology_init::Argument_time((siri::ontology::oname::graph::ontology_init *)EntityNode);
  uint64_t v24 = uaap::TimeHandler::resolveTime(v14, a2, (uint64_t)v5, v23);
  if (v24)
  {
    uint64_t v25 = v94;
    if ((unint64_t)v94 < v95)
    {
      *(void *)uint64_t v94 = v14;
      std::string::size_type v26 = v25 + 8;
LABEL_58:
      uint64_t v94 = v26;
      int v22 = 1;
      goto LABEL_59;
    }
    std::string v31 = (char *)__p;
    uint64_t v32 = (v94 - (unsigned char *)__p) >> 3;
    unint64_t v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      uint64_t v34 = v95 - (void)__p;
      if ((uint64_t)(v95 - (void)__p) >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v38 = (uaap::TimeHandler **)(v35 + 8 * v32);
      *uint64_t v38 = v14;
      std::string::size_type v26 = (char *)(v38 + 1);
      if (v25 != v31)
      {
        do
        {
          uint64_t v39 = (uaap::TimeHandler *)*((void *)v25 - 1);
          v25 -= 8;
          *--uint64_t v38 = v39;
        }
        while (v25 != v31);
        uint64_t v25 = (char *)__p;
      }
      std::string __p = v38;
      unint64_t v95 = v35 + 8 * v36;
      if (v25) {
        operator delete(v25);
      }
      goto LABEL_58;
    }
LABEL_161:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
LABEL_59:
  if (v92 && v15)
  {
    uint64_t SpecialDateUnitDefinedValue = uaap::DateHandler::getSpecialDateUnitDefinedValue((uint64_t)v92);
    SpecialTimeDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::getSpecialTimeDefinedValue((uint64_t)v15);
    if (SpecialDateUnitDefinedValue && SpecialTimeDefinedValue)
    {
      if (!v90)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(SpecialTimeDefinedValue);
        SpecialTimeDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        unint64_t v90 = SpecialTimeDefinedValue;
      }
      if (!v24)
      {
        siri::ontology::oname::graph::ontology_init::common_Time(SpecialTimeDefinedValue);
        uint64_t v24 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
      }
      long long v42 = uaap::DateHandler::resolveDateTimeRangeValue(v92, a2, v90, v19);
      siri::ontology::oname::graph::ontology_init::Argument_date(v42);
      siri::ontology::UsoGraphNode::setSuccessor();
      uint64_t v44 = *((void *)v92 + 6);
      if (v44 && *(void *)(v44 + 24)) {
        uaap::TimeHandler::resolveDateTimeQualifierListValue(v92, a2, v24, v43);
      }
      uaap::TimeHandler::resolveDateTimeRangeValue(v15, a2, v24, v43);
      uint64_t v46 = *((void *)v15 + 6);
      if (v46 && *(void *)(v46 + 24)) {
        uaap::TimeHandler::resolveDateTimeQualifierListValue(v15, a2, v24, v45);
      }
      int v48 = v94;
      unint64_t v47 = v95;
      if ((unint64_t)v94 >= v95)
      {
        unint64_t v60 = (char *)__p;
        uint64_t v61 = (v94 - (unsigned char *)__p) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_163;
        }
        if ((uint64_t)(v95 - (void)__p) >> 2 > v62) {
          unint64_t v62 = (uint64_t)(v95 - (void)__p) >> 2;
        }
        if (v95 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v63 = v62;
        }
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        long long v79 = (uaap::DateHandler **)(v63 + 8 * v61);
        unint64_t v47 = v63 + 8 * v64;
        *long long v79 = v92;
        uint64_t v49 = (char *)(v79 + 1);
        if (v48 != v60)
        {
          do
          {
            std::string v80 = (uaap::DateHandler *)*((void *)v48 - 1);
            v48 -= 8;
            *--long long v79 = v80;
          }
          while (v48 != v60);
          int v48 = (char *)__p;
        }
        std::string __p = v79;
        unint64_t v95 = v63 + 8 * v64;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(void *)uint64_t v94 = v92;
        uint64_t v49 = v48 + 8;
      }
      uint64_t v94 = v49;
      if ((unint64_t)v49 < v47)
      {
        *(void *)uint64_t v49 = v15;
        std::string v81 = v49 + 8;
        goto LABEL_155;
      }
      std::string v82 = (char *)__p;
      uint64_t v83 = (v49 - (unsigned char *)__p) >> 3;
      unint64_t v84 = v83 + 1;
      if (!((unint64_t)(v83 + 1) >> 61))
      {
        if ((uint64_t)(v47 - (void)__p) >> 2 > v84) {
          unint64_t v84 = (uint64_t)(v47 - (void)__p) >> 2;
        }
        if (v47 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v84;
        }
        if (v85) {
          unint64_t v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
        }
        else {
          uint64_t v86 = 0;
        }
        std::string v87 = (uaap::TimeHandler **)(v85 + 8 * v83);
        *std::string v87 = v15;
        std::string v81 = (char *)(v87 + 1);
        if (v49 == v82)
        {
          std::string __p = (void *)(v85 + 8 * v83);
          unint64_t v95 = v85 + 8 * v86;
        }
        else
        {
          do
          {
            std::string v88 = (uaap::TimeHandler *)*((void *)v49 - 1);
            v49 -= 8;
            *--std::string v87 = v88;
          }
          while (v49 != v82);
          uint64_t v49 = (char *)__p;
          std::string __p = v87;
          unint64_t v95 = v85 + 8 * v86;
          if (!v49)
          {
LABEL_155:
            uint64_t v94 = v81;
            if (!v91) {
              goto LABEL_156;
            }
            goto LABEL_131;
          }
        }
        operator delete(v49);
        goto LABEL_155;
      }
LABEL_163:
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
  }
  else if (!v15)
  {
    int v50 = v91;
    goto LABEL_106;
  }
  int v50 = v91;
  if (uaap::TimeHandler::resolveDateTimeRangeValue(v15, a2, v5, v19))
  {
    uint64_t v51 = *((void *)v15 + 6);
    if (v51 && *(void *)(v51 + 24)) {
      uaap::TimeHandler::resolveDateTimeQualifierListValue(v15, a2, v5, v19);
    }
    std::string v52 = v94;
    if ((unint64_t)v94 >= v95)
    {
      std::string v54 = (char *)__p;
      uint64_t v55 = (v94 - (unsigned char *)__p) >> 3;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61) {
        goto LABEL_162;
      }
      uint64_t v57 = v95 - (void)__p;
      if ((uint64_t)(v95 - (void)__p) >> 2 > v56) {
        unint64_t v56 = v57 >> 2;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58) {
        unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v58);
      }
      else {
        uint64_t v59 = 0;
      }
      __int16 v65 = (uaap::TimeHandler **)(v58 + 8 * v55);
      *__int16 v65 = v15;
      std::string v53 = (char *)(v65 + 1);
      if (v52 != v54)
      {
        do
        {
          uint64_t v66 = (uaap::TimeHandler *)*((void *)v52 - 1);
          v52 -= 8;
          *--__int16 v65 = v66;
        }
        while (v52 != v54);
        std::string v52 = (char *)__p;
      }
      std::string __p = v65;
      unint64_t v95 = v58 + 8 * v59;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *(void *)uint64_t v94 = v15;
      std::string v53 = v52 + 8;
    }
    uint64_t v94 = v53;
    int v22 = 1;
  }
LABEL_106:
  if (v92 && uaap::DateHandler::resolveDateTimeRangeValue(v92, a2, v5, v19))
  {
    uint64_t v68 = *((void *)v92 + 6);
    if (v68 && *(void *)(v68 + 24)) {
      uaap::TimeHandler::resolveDateTimeQualifierListValue(v92, a2, v5, v67);
    }
    long long v69 = v94;
    if ((unint64_t)v94 < v95)
    {
      *(void *)uint64_t v94 = v92;
      std::string v70 = v69 + 8;
LABEL_129:
      uint64_t v94 = v70;
      goto LABEL_130;
    }
    std::string v71 = (char *)__p;
    uint64_t v72 = (v94 - (unsigned char *)__p) >> 3;
    unint64_t v73 = v72 + 1;
    if (!((unint64_t)(v72 + 1) >> 61))
    {
      uint64_t v74 = v95 - (void)__p;
      if ((uint64_t)(v95 - (void)__p) >> 2 > v73) {
        unint64_t v73 = v74 >> 2;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75) {
        unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      }
      else {
        uint64_t v76 = 0;
      }
      std::string v77 = (uaap::DateHandler **)(v75 + 8 * v72);
      char *v77 = v92;
      std::string v70 = (char *)(v77 + 1);
      if (v69 != v71)
      {
        do
        {
          std::string v78 = (uaap::DateHandler *)*((void *)v69 - 1);
          v69 -= 8;
          *--std::string v77 = v78;
        }
        while (v69 != v71);
        long long v69 = (char *)__p;
      }
      std::string __p = v77;
      unint64_t v95 = v75 + 8 * v76;
      if (v69) {
        operator delete(v69);
      }
      goto LABEL_129;
    }
LABEL_162:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  if (!v22)
  {
    CFHashCode v5 = 0;
    goto LABEL_158;
  }
LABEL_130:
  if (!v50)
  {
LABEL_156:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v5, a1, v18);
    goto LABEL_157;
  }
LABEL_131:
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uint64_t)v5, (char **)&__p);
LABEL_157:
  siri::ontology::UsoGraphNode::setSuccessor();
LABEL_158:
  if (__p) {
    operator delete(__p);
  }
  return v5;
}

void sub_1C8EAA578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t uaap::DateTimeHandler::resolveRecurrenceDuration(BOOL *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  unint64_t EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    return (uint64_t)EntityNode;
  }
  siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1);
  uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
  if (v9)
  {
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(v9);
    if (siri::ontology::operator!=()) {
      return 0;
    }
  }
  BOOL isRecurringTime = uaap::TimeSpanHandler::isRecurringTime(a1[9], v10);
  if (isRecurringTime)
  {
    uint64_t v12 = (siri::ontology::UsoEntityNode *)a1[9];
    if (*((void *)v12 + 7) || *((void *)v12 + 8) || *((void *)v12 + 10))
    {
      siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
      unint64_t EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v12, v13);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::TimeSpanHandler::resolveTimeSpanWithUnit(v12, a2, EntityNode, v14);
      return (uint64_t)EntityNode;
    }
  }
  uint64_t v15 = a1[10];
  if (!v15 || !uaap::DateSpanHandler::isRecurringDate(v15)) {
    return 0;
  }
  uint64_t v16 = (siri::ontology::oname::graph::ontology_init *)a1[10];
  return uaap::DateHandler::resolveDurationValueAndUnit(v16, a2, a3, a4);
}

void uaap::DateTimeHandler::~DateTimeHandler(uaap::DateTimeHandler *this)
{
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveDateTimeGraph(siri::ontology::oname::graph::ontology_init *result, uint64_t a2, uaap::UPDDDateOffsetSpan *a3)
{
  if (result)
  {
    unint64_t v4 = result;
    uint64_t v5 = *((void *)a3 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(result);
    return uaap::DateTimeHandler::resolveDateTime(v4, a3, v5, v6, 0);
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveRecurringDateTimeGraph(siri::ontology::oname::graph::ontology_init *result, uint64_t a2, uaap::UPDDTimeSpan *a3)
{
  if (result)
  {
    unint64_t v4 = result;
    uint64_t v5 = *((void *)a3 + 11);
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(result);
    return uaap::DateTimeHandler::resolveRecurringDateTime(v4, a3, v5, v6);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::TransformerEncoderE5MLModule(uint64_t a1, char *a2, uint64_t a3, long long *a4)
{
  int v8 = 0;
  uint64_t v5 = snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, a3, &v8, (unsigned __int8 *)a1, a4);
  std::string::basic_string[abi:ne180100]<0>((void *)(v5 + 352), "utterance_tokens_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 376), "padding_mask");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 400), "span_tokens");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 424), "context");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 448), "position_ids");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 472), "out_init_decoder_hidden");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 496), "out_encodings");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 520), "max_num_context_tokens");
  *(_DWORD *)(a1 + 544) = nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::determineWeightType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)a1);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 184);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _os_feature_enabled_impl();
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C8EAA8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v9[543] < 0) {
    operator delete(*v18);
  }
  if (v9[519] < 0) {
    operator delete(*v17);
  }
  if (v9[495] < 0) {
    operator delete(*v16);
  }
  if (v9[471] < 0) {
    operator delete(*v14);
  }
  if (v9[447] < 0) {
    operator delete(*v13);
  }
  if (v9[423] < 0) {
    operator delete(*v12);
  }
  if (v9[399] < 0) {
    operator delete(*v11);
  }
  if (v9[375] < 0) {
    operator delete(*v10);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::determineWeightType(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this)
{
  uint64_t v2 = (E5RT::ExecutionStreamOperation *)*((void *)this + 22);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "The inference operation must be set up before querying its ports.");
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v19;
    }
    else {
      uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v15);
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(v2);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 22));
  if (!*(void *)(InputPorts + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "No input ports found for the NLv4 encoder.");
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v19;
    }
    else {
      uint64_t v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v17);
    std::runtime_error::runtime_error(v16, &v18);
    v16->__vftable = (std::runtime_error_vtbl *)&unk_1F235F558;
  }
  uint64_t v5 = OutputPorts;
  uint64_t v6 = (void *)((char *)this + 192);
  uint64_t DataTypeForPort = snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, (unsigned __int8 *)(*(void *)(InputPorts + 16) + 16));
  int v8 = *(unsigned __int8 **)(InputPorts + 16);
  if (v8)
  {
    while (1)
    {
      int v9 = snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, v8 + 16);
      BOOL v10 = v9 != DataTypeForPort;
      if (v9 != DataTypeForPort) {
        break;
      }
      int v8 = *(unsigned __int8 **)v8;
      if (!v8) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    BOOL v10 = 0;
  }
  uint64_t v11 = *(unsigned __int8 **)(v5 + 16);
  if (v11)
  {
    while (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, v11 + 16) == DataTypeForPort)
    {
      uint64_t v11 = *(unsigned __int8 **)v11;
      if (!v11) {
        goto LABEL_10;
      }
    }
LABEL_12:
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "The input and output ports do not all expose the same data type. Mixed-type NLv4 encoders are not yet supported.");
    std::runtime_error::runtime_error(v13, &v19);
    v13->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
LABEL_10:
  if (v10) {
    goto LABEL_12;
  }
  return DataTypeForPort;
}

void sub_1C8EAAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0) {
        operator delete(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::forward@<X0>(E5RT::ExecutionStream **this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((void *)a2 + 1) - *(void *)a2;
  if (v4 <= 0xF)
  {
    std::to_string(&v34, v4 >> 3);
    uint64_t v13 = std::string::insert(&v34, 0, "Encodings input needs at least two dimensions.  Only found ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = std::string::append(&v35, " dimensions.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    int64_t v33 = v15->__r_.__value_.__r.__words[2];
    long long v32 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v33 >= 0) {
      std::string v18 = (char *)&v32;
    }
    else {
      std::string v18 = (char *)v32;
    }
    std::string::basic_string[abi:ne180100]<0>(&v35, v18);
    std::runtime_error::runtime_error(exception, &v35);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v6 = *((void *)a2 + 12);
  unint64_t v7 = *((void *)a2 + 13) - v6;
  if (v7 <= 0xF)
  {
    std::to_string(&v34, v7 >> 3);
    std::string v19 = std::string::insert(&v34, 0, "Context input needs at least two dimensions.  Only found ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    int v21 = std::string::append(&v35, " dimensions.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v33 = v21->__r_.__value_.__r.__words[2];
    long long v32 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v33 >= 0) {
      uint64_t v24 = (char *)&v32;
    }
    else {
      uint64_t v24 = (char *)v32;
    }
    std::string::basic_string[abi:ne180100]<0>(&v35, v24);
    std::runtime_error::runtime_error(v23, &v35);
    v23->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  uint64_t v8 = *((void *)a2 + 6);
  unint64_t v9 = *((void *)a2 + 7) - v8;
  if (v9 <= 0x17)
  {
    std::to_string(&v34, v9 >> 3);
    uint64_t v25 = std::string::insert(&v34, 0, "Tensorised span token input needs at least three dimensions.  Only found ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = std::string::append(&v35, " dimensions.");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    int64_t v33 = v27->__r_.__value_.__r.__words[2];
    long long v32 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v33 >= 0) {
      uint64_t v30 = (char *)&v32;
    }
    else {
      uint64_t v30 = (char *)v32;
    }
    std::string::basic_string[abi:ne180100]<0>(&v35, v30);
    std::runtime_error::runtime_error(v29, &v35);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeStream((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, *(_DWORD *)(*(void *)a2 + 8), *(_DWORD *)(v6 + 8), *(_DWORD *)(v8 + 16), (uint64_t)&v32);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::setInputs((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, a2);
  uint64_t v11 = (std::__shared_weak_count *)this[23];
  std::string v31 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[3]);
  E5RT::ExecutionStream::ResetStream(this[3]);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::getOutputs((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this);
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v32);
}

void sub_1C8EAB0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v26 - 41) < 0)
  {
    operator delete(*(void **)(v26 - 64));
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a16 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_1C8EAB138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(v11);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a11);
  JUMPOUT(0x1C8EAB2D0);
}

void sub_1C8EAB14C(uint64_t a1, std::__shared_weak_count *a2, ...)
{
  va_start(va, a2);
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x1C8EAB2D0);
}

void sub_1C8EAB25C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v23 - 41) < 0) {
        operator delete(*(void **)(v23 - 64));
      }
      __cxa_end_catch();
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a11);
      JUMPOUT(0x1C8EAB2D0);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeStream(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "NLv4";
    __int16 v27 = 2080;
    long long v28 = "[insights-snlp-nlv4]: ";
    _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "[%s] %sReshaping encoder input stream.", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>(&__p, "NLv4");
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)this + 34, buf))
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)this + 34, buf);
    if (!v11) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v11 + 16) == 1)
    {
      int v12 = 0;
      unsigned int v13 = *((_DWORD *)v11 + 10) & 0xFFFFFF00;
      int v14 = *((_DWORD *)v11 + 10);
      goto LABEL_17;
    }
    uint64_t v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v25 = 136315138;
      *(void *)&_DWORD v25[4] = p_p;
      uint64_t v17 = "[%s] Could not reshape because the relevant dimensions could not be read from the config.";
LABEL_15:
      _os_log_impl(&dword_1C8DA9000, v15, OS_LOG_TYPE_ERROR, v17, v25, 0xCu);
    }
  }
  else
  {
    uint64_t v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      long long v16 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v25 = 136315138;
      *(void *)&_DWORD v25[4] = v16;
      uint64_t v17 = "[%s] Could not reshape because the relevant dimensions could not be found in the config.";
      goto LABEL_15;
    }
  }
  int v14 = 0;
  unsigned int v13 = 0;
  int v12 = 1;
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v29 < 0)
  {
    operator delete(*(void **)buf);
    if (v12) {
      goto LABEL_21;
    }
  }
  else if (v12)
  {
LABEL_21:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return;
  }
  int v19 = *((_DWORD *)this + 136);
  if (v19)
  {
    if (v19 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "Failed to reshape input in NLv4 encoder. Data type not supported.");
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (v29 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(char **)buf;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v21);
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
    }
    int v23 = 6;
    *(void *)std::string buf = a2;
    __p.__r_.__value_.__r.__words[0] = a3;
    *(void *)int v25 = a4;
    uint64_t v22 = v13 | v14;
    nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType((long long *)this, (uint64_t *)buf, (uint64_t *)&__p, (uint64_t *)v25, &v22, a5);
  }
  else
  {
    int v23 = 3;
    *(void *)std::string buf = a2;
    __p.__r_.__value_.__r.__words[0] = a3;
    *(void *)int v25 = a4;
    uint64_t v22 = v13 | v14;
    nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType((long long *)this, (uint64_t *)buf, (uint64_t *)&__p, (uint64_t *)v25, &v22, a5);
  }
}

void sub_1C8EAB654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a25 < 0) {
        operator delete(a20);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::setInputs(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 144);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 400, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 424, (uint64_t)a2 + 96);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 448, (uint64_t)a2 + 192);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::getOutputs(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this@<X0>, void *a2@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 496, &v7);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 472, &v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_, (uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v8, (uint64_t)v9, (v9 - (unsigned char *)v8) >> 2);
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 6, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_, (uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3);
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 9, __p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v4.__r_.__value_.__r.__words[0])
  {
    v4.__r_.__value_.__l.__size_ = v4.__r_.__value_.__r.__words[0];
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  if (v7.__r_.__value_.__r.__words[0])
  {
    v7.__r_.__value_.__l.__size_ = v7.__r_.__value_.__r.__words[0];
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EAB83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = v16;
  int v19 = *v17;
  if (*v17)
  {
    *((void *)v15 + 7) = v19;
    operator delete(v19);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType(long long *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_DWORD *)(a6 + 32) = 1065353216;
  uint64_t v11 = *a2;
  uint64_t v12 = *a4;
  unsigned int v13 = operator new(0x18uLL);
  uint64_t v46 = v13 + 3;
  unint64_t v47 = v13 + 3;
  void *v13 = 1;
  v13[1] = v11;
  v13[2] = v12;
  std::string __p = v13;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  uint64_t v49 = a1 + 25;
  int v14 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 400, &v49);
  uint64_t v15 = v48;
  uint64_t v48 = 0;
  uint64_t v16 = *((void *)v14 + 5);
  *((void *)v14 + 5) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = v48;
    uint64_t v48 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  uint64_t v18 = *a3;
  int v19 = operator new(0x10uLL);
  uint64_t v46 = v19 + 2;
  unint64_t v47 = v19 + 2;
  *int v19 = 1;
  v19[1] = v18;
  std::string __p = v19;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  uint64_t v49 = (long long *)((char *)a1 + 424);
  long long v20 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 424, &v49);
  uint64_t v21 = v48;
  uint64_t v48 = 0;
  uint64_t v22 = *((void *)v20 + 5);
  *((void *)v20 + 5) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    uint64_t v23 = v48;
    uint64_t v48 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  uint64_t v24 = *a2;
  uint64_t v25 = *a5;
  int v26 = operator new(0x18uLL);
  uint64_t v46 = v26 + 3;
  unint64_t v47 = v26 + 3;
  void *v26 = 1;
  v26[1] = v24;
  void v26[2] = v25;
  std::string __p = v26;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  uint64_t v49 = a1 + 22;
  __int16 v27 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 352, &v49);
  uint64_t v28 = v48;
  uint64_t v48 = 0;
  uint64_t v29 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    uint64_t v30 = v48;
    uint64_t v48 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  uint64_t v31 = *a2;
  long long v32 = operator new(0x10uLL);
  uint64_t v46 = v32 + 2;
  unint64_t v47 = v32 + 2;
  *long long v32 = 1;
  v32[1] = v31;
  std::string __p = v32;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  uint64_t v49 = a1 + 28;
  int64_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 448, &v49);
  uint64_t v34 = v48;
  uint64_t v48 = 0;
  uint64_t v35 = *((void *)v33 + 5);
  *((void *)v33 + 5) = v34;
  if (v35)
  {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    uint64_t v36 = v48;
    uint64_t v48 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  uint64_t v37 = *a2;
  uint64_t v38 = *a3;
  uint64_t v39 = operator new(0x10uLL);
  uint64_t v46 = v39 + 2;
  unint64_t v47 = v39 + 2;
  *uint64_t v39 = 1;
  v39[1] = v38 + v37;
  std::string __p = v39;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  uint64_t v49 = (long long *)((char *)a1 + 376);
  unsigned __int8 v40 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 376, &v49);
  uint64_t v41 = v48;
  uint64_t v48 = 0;
  uint64_t v42 = *((void *)v40 + 5);
  *((void *)v40 + 5) = v41;
  if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    uint64_t v43 = v48;
    uint64_t v48 = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
}

void sub_1C8EABD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = a15;
  a15 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void *uaap::DateSpanWithReferenceHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = (void *)DDResultHasType();
  if (result)
  {
    return uaap::DateSpanWithReferenceHandler::mapDateSpanWithReferenceToItemizedUsos(a3);
  }
  return result;
}

void *uaap::DateSpanWithReferenceHandler::mapDateSpanWithReferenceToItemizedUsos(uint64_t a1)
{
  CFHashCode v2 = CFHash(@"DateSpanWithReference");
  double result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(void *)a1, *(void *)(a1 + 8), v2);
  if (result)
  {
    uint64_t v5 = result[3];
    uint64_t v4 = result[4];
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        std::string v7 = *(const void **)(v5 + 8 * v6);
        if (v7)
        {
          {
            operator new();
          }
        }
        ++v6;
      }
      while (v6 < (v4 - v5) >> 3);
    }
    return uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a1);
  }
  return result;
}

void sub_1C8EAC02C(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReference(siri::ontology::oname::graph::ontology_init *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  unint64_t EntityNode = 0;
  if (a2 && a1 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    uint64_t v7 = siri::ontology::operator!=();
    if (v7) {
      return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    unint64_t EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)*((void *)a1 + 7);
    uint64_t v9 = siri::ontology::oname::graph::ontology_init::Argument_date(EntityNode);
    if (!uaap::DateSpanHandler::resolveDateSpan(v8, a2, (uint64_t)EntityNode, v9)) {
      return 0;
    }
    else {
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return EntityNode;
}

void uaap::DateSpanWithReferenceHandler::~DateSpanWithReferenceHandler(uaap::DateSpanWithReferenceHandler *this)
{
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReferenceGraph(siri::ontology::oname::graph::ontology_init *this, __CFString *a2, siri::ontology::UsoGraph *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    uint64_t length = a2[2].length;
    uint64_t v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReference(v4, a2, length, v6);
  }
  return this;
}

uint64_t snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(uint64_t *a1, unint64_t a2)
{
  int v2 = *((char *)a1 + 23);
  BOOL v3 = v2 < 0;
  if (v2 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (uint64_t *)*a1;
  }
  if (v3) {
    unint64_t v5 = a1[1];
  }
  else {
    unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
    unint64_t v8 = 0;
    while (1)
    {
      if (v6 > a2)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, a2);
        uint64_t v23 = std::string::insert(&v29, 0, "Given UTF-16 offset is not a Unicode scalar (code point) boundary: ");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v30);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v6 == a2) {
        break;
      }
      unint64_t v9 = v8 + 1;
      int v10 = *((char *)v4 + v8);
      unsigned int v11 = *((unsigned __int8 *)v4 + v8);
      if (v10 < 0)
      {
        if (v9 == v5) {
          goto LABEL_36;
        }
        if (v11 < 0xE0)
        {
          if (v11 < 0xC2) {
            goto LABEL_36;
          }
          int v14 = v11 & 0x1F;
        }
        else
        {
          if (v11 > 0xEF)
          {
            if (v11 > 0xF4
              || (unsigned int v15 = v11 - 240,
                  unint64_t v12 = *((unsigned __int8 *)v4 + v9),
                  ((byte_1C8F4063D[v12 >> 4] >> v15) & 1) == 0)
              || (unint64_t v9 = v8 + 2, v8 + 2 == v5)
              || (unsigned int v13 = *((unsigned __int8 *)v4 + v9) ^ 0x80, v13 > 0x3F))
            {
LABEL_36:
              uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v29, v8);
              int v19 = std::string::insert(&v29, 0, "Input string is not a valid UTF-8 sequence! UTF-8 offset: ");
              long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
              v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
              v19->__r_.__value_.__l.__size_ = 0;
              v19->__r_.__value_.__r.__words[2] = 0;
              v19->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v18, &v30);
              __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v12) = v12 & 0x3F | (v15 << 6);
          }
          else
          {
            unint64_t v12 = v10 & 0xF;
            if (((a00000000000000[v12] >> (*((unsigned char *)v4 + v9) >> 5)) & 1) == 0) {
              goto LABEL_36;
            }
            unsigned int v13 = *((unsigned char *)v4 + v9) & 0x3F;
          }
          if (++v9 == v5) {
            goto LABEL_36;
          }
          int v14 = v13 | (v12 << 6);
        }
        unsigned int v16 = *((unsigned __int8 *)v4 + v9) ^ 0x80;
        if (v16 > 0x3F) {
          goto LABEL_36;
        }
        unsigned int v11 = v16 | (v14 << 6);
        ++v9;
      }
      if (v11 < 0x10000) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = 2;
      }
      v6 += v17;
      ++result;
      unint64_t v8 = v9;
      if (v9 >= v5) {
        goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = 0;
LABEL_34:
    if (v6 != a2)
    {
      int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v29, a2);
      __int16 v27 = std::string::insert(&v29, 0, "Given UTF-16 offset exceeds the input string: ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v26, &v30);
      __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return result;
}

void sub_1C8EAC480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::utilities::getUtf16Length(uint64_t *a1)
{
  int v1 = *((char *)a1 + 23);
  unint64_t v2 = a1[1];
  if (v1 >= 0) {
    unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    if (v1 >= 0) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = (uint64_t *)*a1;
    }
    while (1)
    {
      unint64_t v6 = v3 + 1;
      int v7 = *((char *)v5 + v3);
      unsigned int v8 = *((unsigned __int8 *)v5 + v3);
      if (v7 < 0)
      {
        if (v6 == v2) {
          goto LABEL_31;
        }
        if (v8 < 0xE0)
        {
          if (v8 < 0xC2) {
            goto LABEL_31;
          }
          int v11 = v8 & 0x1F;
        }
        else
        {
          if (v8 > 0xEF)
          {
            if (v8 > 0xF4
              || (unsigned int v12 = v8 - 240,
                  unint64_t v9 = *((unsigned __int8 *)v5 + v6),
                  ((byte_1C8F4063D[v9 >> 4] >> v12) & 1) == 0)
              || (unint64_t v6 = v3 + 2, v3 + 2 == v2)
              || (unsigned int v10 = *((unsigned __int8 *)v5 + v6) ^ 0x80, v10 > 0x3F))
            {
LABEL_31:
              uint64_t v15 = 0;
              unsigned int v4 = 0;
              return v15 | v4;
            }
            LODWORD(v9) = v9 & 0x3F | (v12 << 6);
          }
          else
          {
            unint64_t v9 = v7 & 0xF;
            if (((a00000000000000[v9] >> (*((unsigned char *)v5 + v6) >> 5)) & 1) == 0) {
              goto LABEL_31;
            }
            unsigned int v10 = *((unsigned char *)v5 + v6) & 0x3F;
          }
          if (++v6 == v2) {
            goto LABEL_31;
          }
          int v11 = v10 | (v9 << 6);
        }
        unsigned int v13 = *((unsigned __int8 *)v5 + v6) ^ 0x80;
        if (v13 > 0x3F) {
          goto LABEL_31;
        }
        unsigned int v8 = v13 | (v11 << 6);
        ++v6;
      }
      if (v8 < 0x10000) {
        int v14 = 1;
      }
      else {
        int v14 = 2;
      }
      v4 += v14;
      unint64_t v3 = v6;
      if (v6 >= v2) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v4 = 0;
LABEL_30:
  uint64_t v15 = 0x100000000;
  return v15 | v4;
}

uint64_t snlp::common::utilities::getUnicodeScalarLength(uint64_t *a1)
{
  int v1 = *((char *)a1 + 23);
  unint64_t v2 = a1[1];
  if (v1 >= 0) {
    unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    if (v1 >= 0) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = (uint64_t *)*a1;
    }
    while (1)
    {
      unint64_t v6 = v3 + 1;
      int v7 = *((char *)v5 + v3);
      if (v7 < 0)
      {
        if (v6 == v2) {
          goto LABEL_26;
        }
        unsigned int v8 = *((unsigned __int8 *)v5 + v3);
        if (v8 < 0xE0)
        {
          if (v8 < 0xC2) {
            goto LABEL_26;
          }
        }
        else
        {
          if (v8 > 0xEF)
          {
            if (v8 > 0xF4
              || ((byte_1C8F4063D[(unint64_t)*((unsigned __int8 *)v5 + v6) >> 4] >> (v7 + 16)) & 1) == 0
              || (unint64_t v6 = v3 + 2, v3 + 2 == v2)
              || *((char *)v5 + v6) > -65)
            {
LABEL_26:
              uint64_t v9 = 0;
              unsigned int v4 = 0;
              return v9 | v4;
            }
          }
          else if (((a00000000000000[v7 & 0xF] >> (*((unsigned char *)v5 + v6) >> 5)) & 1) == 0)
          {
            goto LABEL_26;
          }
          if (++v6 == v2) {
            goto LABEL_26;
          }
        }
        if (*((char *)v5 + v6) > -65) {
          goto LABEL_26;
        }
        ++v6;
      }
      ++v4;
      unint64_t v3 = v6;
      if (v6 >= v2) {
        goto LABEL_25;
      }
    }
  }
  unsigned int v4 = 0;
LABEL_25:
  uint64_t v9 = 0x100000000;
  return v9 | v4;
}

uint64_t itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForSNLCOutputClass@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  void v56[3] = *MEMORY[0x1E4F143B8];
  LODWORD(v54.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54.__r_.__value_.__l.__size_, "Server");
  int v55 = 1;
  std::string::basic_string[abi:ne180100]<0>(v56, "Device");
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v52 = 0u;
  float v53 = 1.0;
  do
  {
    unint64_t v6 = (char *)&v54 + 32 * v5;
    int v7 = *(_DWORD *)v6;
    unint64_t v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = v7;
        if (__p[1] <= (void *)v7) {
          unint64_t v2 = v7 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v2 = ((unint64_t)__p[1] - 1) & v7;
      }
      unsigned int v10 = (uint64_t **)*((void *)__p[0] + v2);
      if (v10)
      {
        for (unint64_t i = *v10; i; unint64_t i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)i + 4) == v7) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1]) {
                v12 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
        }
      }
    }
    unsigned int v13 = (std::string *)operator new(0x30uLL);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = v7;
    LODWORD(v13->__r_.__value_.__r.__words[2]) = v7;
    int v14 = v13 + 1;
    uint64_t v15 = (char *)&v54 + 32 * v5;
    unsigned int v16 = (const std::string::value_type **)(v15 + 8);
    if (v6[31] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v16, *((void *)v15 + 2));
      uint64_t v4 = *((void *)&v52 + 1);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v13[1].__r_.__value_.__r.__words[2] = *((void *)v15 + 3);
    }
    float v17 = (float)(unint64_t)(v4 + 1);
    if (!v8 || (float)(v53 * (float)v8) < v17)
    {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v18 = 1;
      }
      unint64_t v19 = v18 | (2 * v8);
      unint64_t v20 = vcvtps_u32_f32(v17 / v53);
      if (v19 <= v20) {
        int8x8_t prime = (int8x8_t)v20;
      }
      else {
        int8x8_t prime = (int8x8_t)v19;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v8 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_33;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)&v52 + 1) / v53);
        if (__p[1] < (void *)3
          || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          unint64_t v28 = std::__next_prime(v28);
        }
        else
        {
          uint64_t v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2) {
            unint64_t v28 = v30;
          }
        }
        if (*(void *)&prime <= v28) {
          int8x8_t prime = (int8x8_t)v28;
        }
        if ((void *)*(void *)&prime >= __p[1])
        {
          unint64_t v8 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v22 = operator new(8 * *(void *)&prime);
            uint64_t v23 = __p[0];
            __p[0] = v22;
            if (v23) {
              operator delete(v23);
            }
            uint64_t v24 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v24++) = 0;
            while (*(void *)&prime != v24);
            uint64_t v25 = (void **)v52;
            if ((void)v52)
            {
              unint64_t v26 = *(void *)(v52 + 8);
              uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(void *)&prime) {
                  v26 %= *(void *)&prime;
                }
              }
              else
              {
                v26 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v26) = &v52;
              for (j = *v25; j; unint64_t v26 = v32)
              {
                unint64_t v32 = j[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*((void *)__p[0] + v32))
                  {
                    *((void *)__p[0] + v32) = v25;
                    goto LABEL_58;
                  }
                  *uint64_t v25 = (void *)*j;
                  *unint64_t j = **((void **)__p[0] + v32);
                  **((void **)__p[0] + v32) = j;
                  unint64_t j = v25;
                }
                unint64_t v32 = v26;
LABEL_58:
                uint64_t v25 = (void **)j;
                unint64_t j = (void *)*j;
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          uint64_t v36 = __p[0];
          __p[0] = 0;
          if (v36) {
            operator delete(v36);
          }
          unint64_t v8 = 0;
          __p[1] = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7) {
          unint64_t v2 = v7 % v8;
        }
        else {
          unint64_t v2 = v7;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
    }
    int64_t v33 = __p[0];
    uint64_t v34 = (std::string **)*((void *)__p[0] + v2);
    if (v34)
    {
      v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v34;
LABEL_75:
      *uint64_t v34 = v13;
      goto LABEL_76;
    }
    v13->__r_.__value_.__r.__words[0] = v52;
    *(void *)&long long v52 = v13;
    v33[v2] = &v52;
    if (v13->__r_.__value_.__r.__words[0])
    {
      unint64_t v35 = *(void *)(v13->__r_.__value_.__r.__words[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8) {
          v35 %= v8;
        }
      }
      else
      {
        v35 &= v8 - 1;
      }
      uint64_t v34 = (std::string **)((char *)__p[0] + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    uint64_t v4 = ++*((void *)&v52 + 1);
LABEL_77:
    ++v5;
  }
  while (v5 != 2);
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v56[k + 2]) < 0) {
      operator delete((void *)v56[k]);
    }
  }
  if (!__p[1]) {
    goto LABEL_107;
  }
  unint64_t v38 = *a1;
  uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    unint64_t v40 = *a1;
    if (__p[1] <= (void *)v38) {
      unint64_t v40 = v38 % (unint64_t)__p[1];
    }
  }
  else
  {
    unint64_t v40 = ((unint64_t)__p[1] - 1) & v38;
  }
  uint64_t v41 = (uint64_t **)*((void *)__p[0] + v40);
  if (!v41 || (uint64_t v42 = *v41) == 0)
  {
LABEL_107:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, *a1);
    uint64_t v45 = std::string::insert(&v50, 0, "Failed to find the string representation of the SNLC output class: ");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  while (2)
  {
    unint64_t v43 = v42[1];
    if (v43 != v38)
    {
      if (v39.u32[0] > 1uLL)
      {
        if ((void *)v43 >= __p[1]) {
          v43 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v43 &= (unint64_t)__p[1] - 1;
      }
      if (v43 != v40) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    if (*((_DWORD *)v42 + 4) != v38)
    {
LABEL_106:
      uint64_t v42 = (uint64_t *)*v42;
      if (!v42) {
        goto LABEL_107;
      }
      continue;
    }
    break;
  }
  if (*((char *)v42 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v42[3], v42[4]);
  }
  else
  {
    long long v47 = *(_OWORD *)(v42 + 3);
    a2->__r_.__value_.__r.__words[2] = v42[5];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  }
  return std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)__p);
}

void sub_1C8EACD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
}

uint64_t itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForPSCOutputClass@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  void v56[3] = *MEMORY[0x1E4F143B8];
  LODWORD(v54.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54.__r_.__value_.__l.__size_, "Not_Pommes");
  int v55 = 1;
  std::string::basic_string[abi:ne180100]<0>(v56, "Pommes");
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v52 = 0u;
  float v53 = 1.0;
  do
  {
    unint64_t v6 = (char *)&v54 + 32 * v5;
    int v7 = *(_DWORD *)v6;
    unint64_t v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = v7;
        if (__p[1] <= (void *)v7) {
          unint64_t v2 = v7 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v2 = ((unint64_t)__p[1] - 1) & v7;
      }
      unsigned int v10 = (uint64_t **)*((void *)__p[0] + v2);
      if (v10)
      {
        for (unint64_t i = *v10; i; unint64_t i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)i + 4) == v7) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1]) {
                v12 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
        }
      }
    }
    unsigned int v13 = (std::string *)operator new(0x30uLL);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = v7;
    LODWORD(v13->__r_.__value_.__r.__words[2]) = v7;
    int v14 = v13 + 1;
    uint64_t v15 = (char *)&v54 + 32 * v5;
    unsigned int v16 = (const std::string::value_type **)(v15 + 8);
    if (v6[31] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v16, *((void *)v15 + 2));
      uint64_t v4 = *((void *)&v52 + 1);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v13[1].__r_.__value_.__r.__words[2] = *((void *)v15 + 3);
    }
    float v17 = (float)(unint64_t)(v4 + 1);
    if (!v8 || (float)(v53 * (float)v8) < v17)
    {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v18 = 1;
      }
      unint64_t v19 = v18 | (2 * v8);
      unint64_t v20 = vcvtps_u32_f32(v17 / v53);
      if (v19 <= v20) {
        int8x8_t prime = (int8x8_t)v20;
      }
      else {
        int8x8_t prime = (int8x8_t)v19;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v8 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_33;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)&v52 + 1) / v53);
        if (__p[1] < (void *)3
          || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          unint64_t v28 = std::__next_prime(v28);
        }
        else
        {
          uint64_t v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2) {
            unint64_t v28 = v30;
          }
        }
        if (*(void *)&prime <= v28) {
          int8x8_t prime = (int8x8_t)v28;
        }
        if ((void *)*(void *)&prime >= __p[1])
        {
          unint64_t v8 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v22 = operator new(8 * *(void *)&prime);
            uint64_t v23 = __p[0];
            __p[0] = v22;
            if (v23) {
              operator delete(v23);
            }
            uint64_t v24 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v24++) = 0;
            while (*(void *)&prime != v24);
            uint64_t v25 = (void **)v52;
            if ((void)v52)
            {
              unint64_t v26 = *(void *)(v52 + 8);
              uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(void *)&prime) {
                  v26 %= *(void *)&prime;
                }
              }
              else
              {
                v26 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v26) = &v52;
              for (j = *v25; j; unint64_t v26 = v32)
              {
                unint64_t v32 = j[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*((void *)__p[0] + v32))
                  {
                    *((void *)__p[0] + v32) = v25;
                    goto LABEL_58;
                  }
                  *uint64_t v25 = (void *)*j;
                  *unint64_t j = **((void **)__p[0] + v32);
                  **((void **)__p[0] + v32) = j;
                  unint64_t j = v25;
                }
                unint64_t v32 = v26;
LABEL_58:
                uint64_t v25 = (void **)j;
                unint64_t j = (void *)*j;
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          uint64_t v36 = __p[0];
          __p[0] = 0;
          if (v36) {
            operator delete(v36);
          }
          unint64_t v8 = 0;
          __p[1] = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7) {
          unint64_t v2 = v7 % v8;
        }
        else {
          unint64_t v2 = v7;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
    }
    int64_t v33 = __p[0];
    uint64_t v34 = (std::string **)*((void *)__p[0] + v2);
    if (v34)
    {
      v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v34;
LABEL_75:
      *uint64_t v34 = v13;
      goto LABEL_76;
    }
    v13->__r_.__value_.__r.__words[0] = v52;
    *(void *)&long long v52 = v13;
    v33[v2] = &v52;
    if (v13->__r_.__value_.__r.__words[0])
    {
      unint64_t v35 = *(void *)(v13->__r_.__value_.__r.__words[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8) {
          v35 %= v8;
        }
      }
      else
      {
        v35 &= v8 - 1;
      }
      uint64_t v34 = (std::string **)((char *)__p[0] + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    uint64_t v4 = ++*((void *)&v52 + 1);
LABEL_77:
    ++v5;
  }
  while (v5 != 2);
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v56[k + 2]) < 0) {
      operator delete((void *)v56[k]);
    }
  }
  if (!__p[1]) {
    goto LABEL_107;
  }
  unint64_t v38 = *a1;
  uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    unint64_t v40 = *a1;
    if (__p[1] <= (void *)v38) {
      unint64_t v40 = v38 % (unint64_t)__p[1];
    }
  }
  else
  {
    unint64_t v40 = ((unint64_t)__p[1] - 1) & v38;
  }
  uint64_t v41 = (uint64_t **)*((void *)__p[0] + v40);
  if (!v41 || (uint64_t v42 = *v41) == 0)
  {
LABEL_107:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, *a1);
    uint64_t v45 = std::string::insert(&v50, 0, "Failed to find the string representation of the PSC output class: ");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  while (2)
  {
    unint64_t v43 = v42[1];
    if (v43 != v38)
    {
      if (v39.u32[0] > 1uLL)
      {
        if ((void *)v43 >= __p[1]) {
          v43 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v43 &= (unint64_t)__p[1] - 1;
      }
      if (v43 != v40) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    if (*((_DWORD *)v42 + 4) != v38)
    {
LABEL_106:
      uint64_t v42 = (uint64_t *)*v42;
      if (!v42) {
        goto LABEL_107;
      }
      continue;
    }
    break;
  }
  if (*((char *)v42 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v42[3], v42[4]);
  }
  else
  {
    long long v47 = *(_OWORD *)(v42 + 3);
    a2->__r_.__value_.__r.__words[2] = v42[5];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  }
  return std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)__p);
}

void sub_1C8EAD49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
}

void itfm_inference_orchestrator::orchestration::itfm_response_types::convertSNLCLabelToStringLabel(itfm_inference_orchestrator::orchestration::itfm_response_types *this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[24] = 0;
  if ((unint64_t)this <= 1)
  {
    int v3 = (int)this;
    itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForSNLCOutputClass(&v3, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a2, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void itfm_inference_orchestrator::orchestration::itfm_response_types::convertPSCLabelToStringLabel(itfm_inference_orchestrator::orchestration::itfm_response_types *this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[24] = 0;
  if ((unint64_t)this <= 1)
  {
    int v3 = (int)this;
    itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForPSCOutputClass(&v3, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a2, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::SetNumberVerbReplacer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>((void *)a1, "TreeManipulation_SetNumber_VerbReplacement");
  void v4[3] = "relative_set_number_verb";
  std::string::basic_string[abi:ne180100]<0>(v4 + 4, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), ".");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), "setNumber");
  *(unsigned char *)(a1 + 104) = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::hasSetNumberVocSpans(a1, a2);
  return a1;
}

void sub_1C8EAD6E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::hasSetNumberVocSpans(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)a2;
  int v3 = *(void **)(a2 + 8);
  if (*(void **)a2 == v3) {
    return 0;
  }
  while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::isSetNumberVocSpan(a1, v2))
  {
    v2 += 11;
    if (v2 == v3) {
      return 0;
    }
  }
  uint64_t v5 = 1;
  int v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = 136315138;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found setNumber voc span(s)", (uint8_t *)&v9, 0xCu);
  }
  return v5;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::isSetNumberVocSpan(uint64_t a1, void *a2)
{
  unint64_t v2 = (unsigned __int8 **)a2[6];
  if (!v2) {
    return 0;
  }
  int v3 = (_DWORD *)a2[1];
  uint64_t v4 = (_DWORD *)a2[2];
  if (v3 != v4)
  {
    while (1)
    {
      BOOL v5 = *v3 == 3 || *v3 == 8;
      if (v5) {
        break;
      }
      if (++v3 == v4)
      {
        int v3 = (_DWORD *)a2[2];
        break;
      }
    }
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 103);
  if ((v6 & 0x80u) == 0) {
    int v7 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103);
  }
  else {
    int v7 = *(unsigned __int8 **)(a1 + 88);
  }
  uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = v2[1];
  }
  if (v7 == v8)
  {
    uint64_t v10 = (const void **)(a1 + 80);
    if (v9 >= 0) {
      uint64_t v11 = (unsigned __int8 *)a2[6];
    }
    else {
      uint64_t v11 = *v2;
    }
    if ((v6 & 0x80) != 0)
    {
      BOOL v19 = memcmp(*v10, v11, *(void *)(a1 + 88)) == 0;
    }
    else if (*(unsigned char *)(a1 + 103))
    {
      uint64_t v12 = v6 - 1;
      do
      {
        int v14 = *(unsigned __int8 *)v10;
        uint64_t v10 = (const void **)((char *)v10 + 1);
        int v13 = v14;
        int v16 = *v11++;
        int v15 = v16;
        BOOL v18 = v12-- != 0;
        BOOL v5 = v13 == v15;
        BOOL v19 = v13 == v15;
      }
      while (v5 && v18);
    }
    else
    {
      BOOL v19 = 1;
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  return v4 != v3 && v19;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::apply(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  if (!*((unsigned char *)this + 104)) {
    return 0;
  }
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  uint64_t v3 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      uint64_t v5 = v3 - 1;
      uint64_t v6 = *(std::string **)(*(void *)(*((void *)&v12[0] + 1)
                                       + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v13 + v5) & 0x1FF));
      *((void *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      BOOL v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::replaceTreeNodeVerb(this, v6, &v10);
      v4 |= v10;
      uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)v6[3].__r_.__value_.__r.__words[2];
      std::string::pointer data = v6[4].__r_.__value_.__l.__data_;
      while (v8 != (nlv4_inference_orchestrator::trees::TreeNode *)data)
      {
        uint64_t v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        uint64_t v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      uint64_t v3 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    BOOL v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C8EADA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::replaceTreeNodeVerb(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this, std::string *__str, BOOL *a3)
{
  v63[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const void **)((char *)this + 56);
  if (*((char *)this + 79) < 0)
  {
    int v7 = (char *)*((void *)this + 7);
    std::string::size_type v6 = *((void *)this + 8);
  }
  else
  {
    std::string::size_type v6 = *((unsigned __int8 *)this + 79);
    int v7 = (char *)this + 56;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  __p.__r_.__value_.__l.__size_ = v6;
  nlv4_inference_orchestrator::trees::split(&v59, __str, (const void **)&__p.__r_.__value_.__l.__data_);
  p_s1 = &__s1;
  *a3 = 0;
  int v10 = v62;
  if ((v62 & 0x80) == 0)
  {
    if (!v62) {
      goto LABEL_79;
    }
    uint64_t v11 = (unsigned __int16 *)&__s1;
    if (v62 != 10) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (__n)
  {
    if (__n != 10) {
      goto LABEL_15;
    }
    uint64_t v11 = (unsigned __int16 *)__s1;
LABEL_11:
    uint64_t v12 = *(void *)v11;
    int v13 = v11[4];
    if (v12 == 0x6573616572636E69 && v13 == 31042)
    {
      BOOL v30 = 1;
      if ((v62 & 0x80) == 0)
      {
LABEL_35:
        uint64_t v31 = (unsigned __int16 *)&__s1;
        if (v10 != 10) {
          goto LABEL_49;
        }
LABEL_42:
        uint64_t v32 = *(void *)v31;
        int v33 = v31[4];
        if (v32 == 0x6573616572636564 && v33 == 31042) {
          goto LABEL_66;
        }
        goto LABEL_49;
      }
      goto LABEL_38;
    }
LABEL_15:
    uint64_t v8 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_increaseBy((siri::ontology::oname::graph::ontology_init *)v8);
    int v10 = v62;
    size_t v15 = __n;
    if ((v62 & 0x80u) == 0) {
      size_t v16 = v62;
    }
    else {
      size_t v16 = __n;
    }
    uint64_t v17 = *(unsigned __int8 *)(v8 + 63);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(v8 + 48);
    }
    if (v16 == v17)
    {
      unint64_t v20 = *(unsigned __int8 **)(v8 + 40);
      v8 += 40;
      BOOL v19 = v20;
      if (v18 >= 0) {
        uint64_t v21 = (unsigned __int8 *)v8;
      }
      else {
        uint64_t v21 = v19;
      }
      if ((v62 & 0x80) != 0)
      {
        uint64_t v8 = memcmp(__s1, v21, __n);
        BOOL v30 = v8 == 0;
LABEL_40:
        if (v15 == 10)
        {
          uint64_t v31 = (unsigned __int16 *)__s1;
          goto LABEL_42;
        }
LABEL_49:
        uint64_t v35 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_decreaseBy((siri::ontology::oname::graph::ontology_init *)v8);
        uint64_t v36 = v62;
        unsigned __int8 v37 = v62;
        if ((v62 & 0x80u) == 0) {
          size_t v38 = v62;
        }
        else {
          size_t v38 = __n;
        }
        uint64_t v39 = *(unsigned __int8 *)(v35 + 63);
        int v40 = (char)v39;
        if ((v39 & 0x80u) != 0) {
          uint64_t v39 = *(void *)(v35 + 48);
        }
        if (v38 != v39)
        {
LABEL_63:
          BOOL v45 = 0;
          goto LABEL_65;
        }
        unint64_t v43 = *(unsigned __int8 **)(v35 + 40);
        uint64_t v41 = (unsigned __int8 *)(v35 + 40);
        uint64_t v42 = v43;
        if (v40 >= 0) {
          uint64_t v44 = v41;
        }
        else {
          uint64_t v44 = v42;
        }
        if ((char)v62 < 0)
        {
          BOOL v45 = memcmp(__s1, v44, __n) == 0;
LABEL_65:
          if (!v30 && !v45) {
            goto LABEL_77;
          }
          goto LABEL_66;
        }
        if (v62)
        {
          while (*(unsigned __int8 *)p_s1 == *v44)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v44;
            if (!--v36) {
              goto LABEL_66;
            }
          }
          goto LABEL_63;
        }
LABEL_66:
        long long v46 = (siri::ontology::oname::graph::ontology_init *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&__p, (const void **)&v59.__r_.__value_.__l.__data_, v5);
        uint64_t v47 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_setNumber(v46);
        std::string v50 = *(const std::string::value_type **)(v47 + 40);
        uint64_t v48 = v47 + 40;
        uint64_t v49 = v50;
        int v51 = *(char *)(v48 + 23);
        if (v51 >= 0) {
          long long v52 = (const std::string::value_type *)v48;
        }
        else {
          long long v52 = v49;
        }
        if (v51 >= 0) {
          std::string::size_type v53 = *(unsigned __int8 *)(v48 + 23);
        }
        else {
          std::string::size_type v53 = *(void *)(v48 + 8);
        }
        std::string v54 = std::string::append(&__p, v52, v53);
        std::string::size_type v55 = v54->__r_.__value_.__r.__words[0];
        v63[0] = v54->__r_.__value_.__l.__size_;
        *(void *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
        char v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str->__r_.__value_.__l.__data_);
        }
        std::string::size_type v57 = v63[0];
        __str->__r_.__value_.__r.__words[0] = v55;
        __str->__r_.__value_.__l.__size_ = v57;
        *(std::string::size_type *)((char *)&__str->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v63 + 7);
        *((unsigned char *)&__str->__r_.__value_.__s + 23) = v56;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *a3 = 1;
        unsigned __int8 v37 = v62;
LABEL_77:
        if ((v37 & 0x80) == 0) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      if (!v62)
      {
        BOOL v30 = 1;
        goto LABEL_49;
      }
      uint64_t v22 = v62 - 1;
      uint64_t v23 = &__s1;
      do
      {
        int v25 = *(unsigned __int8 *)v23;
        uint64_t v23 = (void **)((char *)v23 + 1);
        int v24 = v25;
        int v27 = *v21++;
        int v26 = v27;
        BOOL v29 = v22-- != 0;
        BOOL v30 = v24 == v26;
      }
      while (v24 == v26 && v29);
    }
    else
    {
      BOOL v30 = 0;
    }
    if ((v62 & 0x80) == 0) {
      goto LABEL_35;
    }
LABEL_38:
    size_t v15 = __n;
    goto LABEL_40;
  }
LABEL_78:
  operator delete(__s1);
LABEL_79:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EADD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
}

uaap::UPDDDateTimeBaseSpan *uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(uaap::UPDDDateTimeBaseSpan *this, __DDResult *a2)
{
  CFStringRef Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(void *)this = &unk_1F235F738;
  *((void *)this + 6) = 0;
  if (DDResultGetSubresultWithType()) {
    operator new();
  }
  return this;
}

void sub_1C8EADE94(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 6);
  *((void *)v1 + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(uaap::UPDDDateTimeBaseSpan *this)
{
  *(void *)this = &unk_1F235F738;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F235F738;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F235F738;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpan *uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v8 = uaap::UPDDSpan::UPDDSpan(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_1F235F738;
  *((void *)v8 + 6) = 0;
  uint64_t v9 = *a6;
  *a6 = 0;
  uint64_t v10 = *((void *)v8 + 6);
  *((void *)a1 + 6) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t uaap::UPDDSpan::extractIntValueFromCFStringRef(const __CFString *this, const __CFString *a2)
{
  unsigned int v19 = 0;
  if (DDFastIntegerExtraction()) {
    return v19;
  }
  BOOL v4 = __p;
  std::string::basic_string[abi:ne180100]<0>(__p, "unknown/");
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__str, this);
  int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_CFStringRef str = &__str;
  }
  else {
    p_CFStringRef str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) == 0)
  {
    int64_t v7 = v18;
  }
  else
  {
    BOOL v4 = (void **)__p[0];
    int64_t v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if (size >= v7)
    {
      uint64_t v8 = (char *)p_str + size;
      int v9 = *(char *)v4;
      uint64_t v10 = p_str;
      do
      {
        int64_t v11 = size - v7;
        if (v11 == -1) {
          break;
        }
        uint64_t v12 = (char *)memchr(v10, v9, v11 + 1);
        if (!v12) {
          break;
        }
        int v13 = v12;
        if (!memcmp(v12, v4, v7))
        {
          if (v13 != v8)
          {
            std::string::size_type v14 = v13 - (char *)p_str;
            if (v13 - (char *)p_str != -1) {
              goto LABEL_20;
            }
          }
          break;
        }
        uint64_t v10 = (std::string *)(v13 + 1);
        int64_t size = v8 - (v13 + 1);
      }
      while (size >= v7);
    }
  }
  else
  {
    std::string::size_type v14 = 0;
LABEL_20:
    std::string::erase(&__str, v14, v7);
  }
  uint64_t v3 = std::stoi(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1C8EAE204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t uaap::UPDDSpan::extractIntValueFromDDResult(uaap::UPDDSpan *this, __DDResult *a2)
{
  CFStringRef Value = (const __CFString *)DDResultGetValue();
  return uaap::UPDDSpan::extractIntValueFromCFStringRef(Value, v3);
}

uaap::UPDDTimeSpan *uaap::UPDDTimeSpan::UPDDTimeSpan(uaap::UPDDTimeSpan *this, __DDResult *a2)
{
  BOOL v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)BOOL v4 = &unk_1F235F5F0;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  *(_OWORD *)((char *)v4 + 72) = 0u;
  *(_OWORD *)((char *)v4 + 88) = 0u;
  *(_OWORD *)((char *)v4 + 104) = 0u;
  *((void *)v4 + 15) = 0;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  uint64_t v6 = DDResultGetSubresultWithType();
  uint64_t v7 = DDResultGetSubresultWithType();
  uint64_t v8 = DDResultGetSubresultWithType();
  uint64_t v9 = DDResultGetSubresultWithType();
  int64_t v11 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"SpecialTimePeriod", v10);
  uint64_t v12 = DDResultGetSubresultWithType();
  uint64_t v13 = DDResultGetSubresultWithType();
  size_t v16 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v6) {
    operator new();
  }
  if (v7) {
    operator new();
  }
  if (v8) {
    operator new();
  }
  if (v9) {
    operator new();
  }
  if (v11) {
    operator new();
  }
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v12) {
    operator new();
  }
  if (v13) {
    operator new();
  }
  if (v16) {
    operator new();
  }
  return this;
}

void sub_1C8EAE768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  MEMORY[0x1CB775C40](v10, 0x10E1C406A116140);
  uint64_t v12 = *((void *)v9 + 15);
  *((void *)v9 + 15) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)v9 + 14);
  *((void *)v9 + 14) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)v9 + 13);
  *((void *)v9 + 13) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)v9 + 12);
  *((void *)v9 + 12) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)v9 + 11);
  *((void *)v9 + 11) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)v9 + 10);
  *((void *)v9 + 10) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)v9 + 9);
  *((void *)v9 + 9) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)v9 + 8);
  *((void *)v9 + 8) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *a9;
  *a9 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v9);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeSpan::~UPDDTimeSpan(uaap::UPDDTimeSpan *this)
{
  uaap::UPDDTimeSpan::~UPDDTimeSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)this = &unk_1F235F5F0;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CFStringRef v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)this = &unk_1F235F738;
  int64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDTimeDurationSpan *uaap::UPDDTimeDurationSpan::UPDDTimeDurationSpan(uaap::UPDDTimeDurationSpan *this, __DDResult *a2)
{
  CFStringRef Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(void *)this = &unk_1F235F758;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  DDResultGetSubresultWithType();
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  uint64_t v6 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v6) {
    operator new();
  }
  return this;
}

void sub_1C8EAEE40(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10E1C406A116140);
  uint64_t v5 = *((void *)v1 + 7);
  *((void *)v1 + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *CFStringRef v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeDurationSpan::~UPDDTimeDurationSpan(uaap::UPDDTimeDurationSpan *this)
{
  *(void *)this = &unk_1F235F758;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F235F758;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDTimeSpanWithReference *uaap::UPDDTimeSpanWithReference::UPDDTimeSpanWithReference(uaap::UPDDTimeSpanWithReference *this, __DDResult *a2)
{
  uint64_t v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)uint64_t v3 = &unk_1F235F7B8;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  uint64_t v5 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v5) {
    operator new();
  }
  return this;
}

void sub_1C8EAF1B4(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10E1C406A116140);
  uint64_t v5 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeSpanWithReference::~UPDDTimeSpanWithReference(uaap::UPDDTimeSpanWithReference *this)
{
  *(void *)this = &unk_1F235F7B8;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F235F7B8;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpecialDatePeriodSpan *uaap::UPDDSpecialDatePeriodSpan::UPDDSpecialDatePeriodSpan(uaap::UPDDSpecialDatePeriodSpan *this, __DDResult *a2)
{
  CFStringRef Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(void *)this = &unk_1F235F798;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  uint64_t v6 = DDResultGetSubresultWithType();
  uint64_t v7 = DDResultGetSubresultWithType();
  uint64_t v9 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"OccurrenceCount", v8);
  uint64_t v10 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v6) {
    operator new();
  }
  if (v7) {
    uint64_t v11 = DDResultGetValue();
  }
  else {
    uint64_t v11 = 0;
  }
  *((void *)this + 12) = v11;
  if (v9) {
    operator new();
  }
  if (v10) {
    operator new();
  }
  return this;
}

void sub_1C8EAF80C(_Unwind_Exception *a1)
{
  uint64_t v4 = *((void *)v1 + 11);
  *((void *)v1 + 11) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)v1 + 10);
  *((void *)v1 + 10) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)v1 + 9);
  *((void *)v1 + 9) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)v1 + 7);
  *((void *)v1 + 7) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v2;
  *uint64_t v2 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDSpecialDatePeriodSpan::~UPDDSpecialDatePeriodSpan(uaap::UPDDSpecialDatePeriodSpan *this)
{
  uaap::UPDDSpecialDatePeriodSpan::~UPDDSpecialDatePeriodSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1F235F798;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpan *uaap::UPDDSpecialDatePeriodSpan::UPDDSpecialDatePeriodSpan(uaap::UPDDSpan *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13 = uaap::UPDDSpan::UPDDSpan(a1, *(const __CFString **)a2, *(const __CFString **)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  *(void *)uint64_t v13 = &unk_1F235F798;
  *((_OWORD *)v13 + 3) = 0u;
  uint64_t v14 = (uint64_t *)((char *)v13 + 48);
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  uint64_t v15 = *a3;
  if (*a3)
  {
    *a3 = 0;
    uint64_t v16 = *v14;
    *uint64_t v14 = v15;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  uint64_t v17 = *a4;
  if (*a4)
  {
    *a4 = 0;
    uint64_t v18 = *((void *)a1 + 7);
    *((void *)a1 + 7) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = *a5;
  if (*a5)
  {
    *a5 = 0;
    uint64_t v20 = *((void *)a1 + 8);
    *((void *)a1 + 8) = v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  uint64_t v21 = *a6;
  if (*a6)
  {
    *a6 = 0;
    uint64_t v22 = *((void *)a1 + 11);
    *((void *)a1 + 11) = v21;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  *((void *)a1 + 12) = a7;
  return a1;
}

uaap::UPDDAbsoluteDateSpan *uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(uaap::UPDDAbsoluteDateSpan *this, __DDResult *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)uint64_t v4 = &unk_1F235F718;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  *(_OWORD *)((char *)v4 + 72) = 0u;
  *((void *)v4 + 11) = 0;
  uint64_t v6 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"SpecialDay", v5);
  uint64_t v8 = uaap::searchDDTreeWithType(v6, (__DDResult *)@"Identifier", v7);
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  uint64_t v10 = DDResultGetSubresultWithType();
  uint64_t v11 = DDResultGetSubresultWithType();
  uint64_t v12 = DDResultGetSubresultWithType();
  uint64_t v13 = DDResultGetSubresultWithType();
  uint64_t v15 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"DayOfWeek", v14);
  if (v8) {
    operator new();
  }
  if (SubresultWithType) {
    operator new();
  }
  if (v10) {
    operator new();
  }
  if (v11) {
    operator new();
  }
  if (v13) {
    operator new();
  }
  if (v12)
  {
    int v17 = MEMORY[0x1CB773A10](a2);
    if ((v17 & 0x80000000) == 0)
    {
      std::to_string(&v22, v17);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = &v22;
      }
      else {
        uint64_t v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      CFStringCreateWithCString(0, (const char *)v18, 0x8000100u);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      operator new();
    }
    uint64_t v19 = SNLPOSLoggerForCategory(3);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      CFStringRef Value = (const __CFString *)DDResultGetValue();
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v22, Value);
      uint64_t v21 = (v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v22
          : (std::string *)v22.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315138;
      int v24 = v21;
      _os_log_impl(&dword_1C8DA9000, v19, OS_LOG_TYPE_ERROR, "Warning: failed to extract JapaneseYear: %s", buf, 0xCu);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v15) {
    operator new();
  }
  return this;
}

void sub_1C8EB01C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *((void *)v15 + 11);
  *((void *)v15 + 11) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)v15 + 10);
  *((void *)v15 + 10) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)v15 + 9);
  *((void *)v15 + 9) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)v15 + 8);
  *((void *)v15 + 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *a9;
  *a9 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v15);
  _Unwind_Resume(a1);
}

void uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(uaap::UPDDAbsoluteDateSpan *this)
{
  uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1F235F718;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  CFStringRef v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)this = &unk_1F235F738;
  CFStringRef v7 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpan *uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v13 = *a6;
  *a6 = 0;
  uint64_t v19 = v13;
  uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(a1, a2, a3, a4, a5, &v19);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  *(void *)a1 = &unk_1F235F718;
  uint64_t v14 = *a7;
  *a7 = 0;
  *((void *)a1 + 7) = v14;
  uint64_t v15 = *a8;
  *a8 = 0;
  *((void *)a1 + 8) = v15;
  uint64_t v16 = *a9;
  *a9 = 0;
  *((void *)a1 + 9) = v16;
  uint64_t v17 = *a10;
  *a10 = 0;
  *((void *)a1 + 10) = v17;
  *((void *)a1 + 11) = 0;
  return a1;
}

{
  return uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1C8EB0658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uaap::UPDDDateOffsetSpan *uaap::UPDDDateOffsetSpan::UPDDDateOffsetSpan(uaap::UPDDDateOffsetSpan *this, __DDResult *a2)
{
  uint64_t v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)uint64_t v4 = &unk_1F235F6A8;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  *(_OWORD *)((char *)v4 + 72) = 0u;
  uint64_t v6 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"OccurrenceCount", v5);
  uint64_t v8 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"SpecialDatePeriodUnit", v7);
  if (v6) {
    operator new();
  }
  if (v8) {
    operator new();
  }
  return this;
}

void sub_1C8EB08F4(_Unwind_Exception *a1)
{
  uint64_t v4 = *((void *)v1 + 10);
  *((void *)v1 + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)v1 + 9);
  *((void *)v1 + 9) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateOffsetSpan::~UPDDDateOffsetSpan(uaap::UPDDDateOffsetSpan *this)
{
  *(void *)this = &unk_1F235F6A8;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1F235F6A8;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDDateSpan *uaap::UPDDDateSpan::UPDDDateSpan(uaap::UPDDDateSpan *this, __DDResult *a2)
{
  uint64_t v4 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(this, a2);
  *(void *)uint64_t v4 = &unk_1F235F5D0;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((void *)v4 + 16) = 0;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  uint64_t v6 = DDResultGetSubresultWithType();
  uint64_t v7 = DDResultGetSubresultWithType();
  uint64_t v8 = DDResultGetSubresultWithType();
  uint64_t v9 = DDResultGetSubresultWithType();
  uint64_t v11 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v9 | v11)
  {
    uint64_t v12 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"DayOfWeek", v10);
    uint64_t v14 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"DayOfNextWeek", v13);
    uint64_t v16 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)@"DayOfThisWeek", v15);
    if (v12) {
      operator new();
    }
    if (v14) {
      operator new();
    }
    if (v16) {
      operator new();
    }
  }
  if (v6) {
    operator new();
  }
  if (v7) {
    operator new();
  }
  if (v8) {
    operator new();
  }
  if (v11) {
    operator new();
  }
  return this;
}

void sub_1C8EB11E0(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10E1C40AC054123);
  uint64_t v5 = *((void *)v1 + 16);
  *((void *)v1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)v1 + 15);
  *((void *)v1 + 15) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)v1 + 13);
  *((void *)v1 + 13) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v3;
  *uint64_t v3 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateSpan::~UPDDDateSpan(uaap::UPDDDateSpan *this)
{
  *(void *)this = &unk_1F235F5D0;
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1F235F5D0;
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(this);
}

double uaap::UPDDDateSpan::UPDDDateSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *(void *)uint64_t v11 = &unk_1F235F5D0;
  double result = 0.0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  uint64_t v13 = *a11;
  *a11 = 0;
  *((void *)v11 + 16) = v13;
  return result;
}

{
  uaap::UPDDSpan *v11;
  double result;
  uint64_t v13;

  uint64_t v11 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *(void *)uint64_t v11 = &unk_1F235F5D0;
  double result = 0.0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  uint64_t v13 = *a11;
  *a11 = 0;
  *((void *)v11 + 16) = v13;
  return result;
}

uaap::UPDDDateSpanWithReference *uaap::UPDDDateSpanWithReference::UPDDDateSpanWithReference(uaap::UPDDDateSpanWithReference *this, __DDResult *a2)
{
  uint64_t v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)uint64_t v3 = &unk_1F235F778;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  uint64_t v5 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v5) {
    operator new();
  }
  return this;
}

void sub_1C8EB1870(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10E1C402100513ELL);
  uint64_t v5 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateSpanWithReference::~UPDDDateSpanWithReference(uaap::UPDDDateSpanWithReference *this)
{
  *(void *)this = &unk_1F235F778;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F235F778;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDDateTimeSpan *uaap::UPDDDateTimeSpan::UPDDDateTimeSpan(uaap::UPDDDateTimeSpan *this, __DDResult *a2)
{
  uint64_t v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(void *)uint64_t v3 = &unk_1F235F688;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 72) = 0u;
  SubresultWithCFStringRef Type = DDResultGetSubresultWithType();
  uint64_t v5 = DDResultGetSubresultWithType();
  uint64_t v6 = DDResultGetSubresultWithType();
  uint64_t v7 = DDResultGetSubresultWithType();
  if (SubresultWithType) {
    operator new();
  }
  if (v6) {
    operator new();
  }
  if (v5) {
    operator new();
  }
  if (v7) {
    operator new();
  }
  return this;
}

void sub_1C8EB1D50(_Unwind_Exception *a1)
{
  MEMORY[0x1CB775C40](v2, 0x10E1C402100513ELL);
  uint64_t v5 = *((void *)v1 + 10);
  *((void *)v1 + 10) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)v1 + 9);
  *((void *)v1 + 9) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v3;
  *uint64_t v3 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateTimeSpan::~UPDDDateTimeSpan(uaap::UPDDDateTimeSpan *this)
{
  *(void *)this = &unk_1F235F688;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1CB775C40);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1F235F688;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1F235F738;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uaap::UPDDSpan::~UPDDSpan(this);
}

uint64_t snlp::common::asset_logger::SNLPAssetLogger::SNLPAssetLogger(uint64_t a1, int a2, char *a3, void *a4, uint64_t a5)
{
  int v7 = a2;
  bundleInfoForAssetsDirectory(&v7, a3, a4, a5, a1);
  return a1;
}

{
  int v7;

  int v7 = a2;
  bundleInfoForAssetsDirectory(&v7, a3, a4, a5, a1);
  return a1;
}

uint64_t snlp::common::asset_logger::SNLPAssetLogger::toString(snlp::common::asset_logger::SNLPAssetLogger *this)
{
  snlp::common::asset_logger::SNLPAssetLogger::toStringStream(this, (uint64_t)v3);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA408];
  uint64_t v1 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v3[2] = v1;
  void v3[3] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v5);
}

void sub_1C8EB2344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::common::asset_logger::SNLPAssetLogger::toStringStream(snlp::common::asset_logger::SNLPAssetLogger *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::string::size_type v4 = *(int *)this;
  if (v4 >= 8)
  {
    uint64_t v6 = SNLPOSLoggerForCategory(4);
    uint64_t v5 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v4;
      _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    uint64_t v5 = off_1E65808C8[v4];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"Component: ", 11);
  if ((v34 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v34 & 0x80u) == 0) {
    uint64_t v9 = v34;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  CFStringRef v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"Version: SNLPVersionInfo[train=", 31);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", majorVersion=", 15);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", minorVersion=", 15);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]\n", 2);
  if (*((unsigned char *)this + 64))
  {
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"Bolt task ID: ", 14);
    if (!*((unsigned char *)this + 64)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v15 = *((char *)this + 63);
    if (v15 >= 0) {
      uint64_t v16 = (char *)this + 40;
    }
    else {
      uint64_t v16 = (char *)*((void *)this + 5);
    }
    if (v15 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)this + 63);
    }
    else {
      uint64_t v17 = *((void *)this + 6);
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    uint64_t v19 = "\n";
    uint64_t v20 = 1;
  }
  else
  {
    uint64_t v19 = "Bolt task ID: <missing>";
    uint64_t v20 = 23;
    uint64_t v18 = (void *)(a2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if (*((void *)this + 11))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"Combined Hash: ", 15);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
    std::string v22 = (snlp::common::asset_logger::SNLPAssetLogger *)*((void *)this + 9);
    if (v22 != (snlp::common::asset_logger::SNLPAssetLogger *)((char *)this + 80))
    {
      do
      {
        if (*((char *)v22 + 55) < 0) {
          std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v22 + 4), *((void *)v22 + 5));
        }
        else {
          std::string buf = *(std::string *)((char *)v22 + 32);
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
        }
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)p_buf, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"=", 1);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        char v26 = *((unsigned char *)v22 + 79);
        if (v26 < 0)
        {
          uint64_t v27 = *((void *)v22 + 8);
          if (v27) {
            goto LABEL_38;
          }
        }
        else if (*((unsigned char *)v22 + 79))
        {
          uint64_t v27 = *((void *)v22 + 8);
LABEL_38:
          if (v26 >= 0) {
            uint64_t v28 = (uint64_t)v22 + 56;
          }
          else {
            uint64_t v28 = *((void *)v22 + 7);
          }
          if (v26 >= 0) {
            uint64_t v29 = *((unsigned __int8 *)v22 + 79);
          }
          else {
            uint64_t v29 = v27;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), v28, v29);
          goto LABEL_46;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"asset could not be read", 23);
LABEL_46:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"\n", 1);
        BOOL v30 = (snlp::common::asset_logger::SNLPAssetLogger *)*((void *)v22 + 1);
        if (v30)
        {
          do
          {
            uint64_t v31 = v30;
            BOOL v30 = *(snlp::common::asset_logger::SNLPAssetLogger **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v31 = (snlp::common::asset_logger::SNLPAssetLogger *)*((void *)v22 + 2);
            BOOL v32 = *(void *)v31 == (void)v22;
            std::string v22 = v31;
          }
          while (!v32);
        }
        std::string v22 = v31;
      }
      while (v31 != (snlp::common::asset_logger::SNLPAssetLogger *)((char *)this + 80));
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"No assets provided", 18);
  }
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8EB26F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v21);
  _Unwind_Resume(a1);
}

BOOL snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId(snlp::common::espresso_inference::e5ml::MILSELFLogger *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v1 = *((unsigned __int8 *)this + 112);
  if (!*((unsigned char *)this + 112))
  {
    uint64_t v3 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *((int *)this + 30);
      if (v4 >= 8)
      {
        uint64_t v6 = SNLPOSLoggerForCategory(4);
        uint64_t v5 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315394;
          uint64_t v9 = "<UNDEFINED_COMPONENT>";
          __int16 v10 = 2048;
          uint64_t v11 = v4;
          _os_log_impl(&dword_1C8DA9000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v8, 0x16u);
        }
      }
      else
      {
        uint64_t v5 = off_1E65808C8[v4];
      }
      int v8 = 136315138;
      uint64_t v9 = v5;
      _os_log_impl(&dword_1C8DA9000, v3, OS_LOG_TYPE_ERROR, "[%s] No context ID was provided for MIL compilation SELF logs.  This will prevent any MIL-related SELF logs from being emitted from SiriNaturalLanguageParsing.", (uint8_t *)&v8, 0xCu);
    }
  }
  return v1 != 0;
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(snlp::common::espresso_inference::e5ml::MILSELFLogger *this, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2)
{
  uint64_t v2 = (char *)this + 88;
  if (*((unsigned char *)this + 80)) {
    snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(this, a2, __p);
  }
  else {
    snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(__p);
  }
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)v2, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess(uint64_t a1, int *a2)
{
  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1)) {
    return;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a2);
      goto LABEL_7;
    }
LABEL_12:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_12;
  }
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded((uint64_t *)(a1 + 88));
LABEL_7:
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFFailure(uint64_t a1, uint64_t a2, int *a3)
{
  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1)) {
    return;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      unsigned int v10 = 0;
      int v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((uint64_t *)(a1 + 88), a3, &v10, (uint64_t *)__p);
      goto LABEL_7;
    }
LABEL_14:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_14;
  }
  unsigned int v10 = 0;
  uint64_t v6 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a3, &v10, (uint64_t *)__p);
LABEL_7:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

void sub_1C8EB2A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFE5RTError(uint64_t a1, E5RT::E5RTError *a2, int *a3)
{
  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1)) {
    return;
  }
  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(a2);
  int ErrorCode = E5RT::Status::GetErrorCode(Status);
  if (ErrorCode > 10)
  {
    if (ErrorCode != 11)
    {
      if (ErrorCode == 13)
      {
        unsigned int v8 = 1;
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unsigned int v8 = 2;
  }
  else
  {
    if (ErrorCode != 1)
    {
      if (ErrorCode == 2)
      {
        unsigned int v8 = 4;
        goto LABEL_12;
      }
LABEL_9:
      unsigned int v8 = 5;
      goto LABEL_12;
    }
    unsigned int v8 = 3;
  }
LABEL_12:
  unsigned int v9 = v8;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::selfLogE5RTError(a1, (uint64_t)a2, &v9, a3);
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::selfLogE5RTError(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4)
{
  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1)) {
    return;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      unsigned int v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((uint64_t *)(a1 + 88), a4, a3, (uint64_t *)__p);
      goto LABEL_7;
    }
LABEL_14:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_14;
  }
  unsigned int v8 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a4, a3, (uint64_t *)__p);
LABEL_7:
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

void sub_1C8EB2CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::device::deviceRequiresWiredMemory(snlp::common::device *this)
{
  return 0;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::apply(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  unsigned long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  char v11 = a2;
  std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(v12, &v11);
  if (*((void *)&v13 + 1))
  {
    char v3 = 0;
    unint64_t v4 = v13;
    do
    {
      uint64_t v5 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(void *)(*((void *)&v12[0] + 1)
                                                                        + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * (v4 & 0x1FF));
      char v6 = nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::replaceDefaultSettingValue(this, v5);
      unsigned int v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v5 + 11);
      int v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((void *)v5 + 12);
      while (v8 != v7)
      {
        char v11 = v8;
        std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(v12, &v11);
        unsigned int v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      uint64_t v9 = *((void *)&v13 + 1) - 1;
      unint64_t v4 = v13 + 1;
      unsigned long long v13 = __PAIR128__(*((unint64_t *)&v13 + 1), (uint64_t)v13 + 1) + __PAIR128__(-1, 0);
      if (v4 >= 0x400)
      {
        operator delete(**((void ***)&v12[0] + 1));
        unint64_t v4 = v13 - 512;
        *((void *)&v12[0] + 1) += 8;
        *(void *)&unsigned long long v13 = v13 - 512;
        uint64_t v9 = *((void *)&v13 + 1);
      }
      v3 |= v6;
    }
    while (v9);
  }
  else
  {
    char v3 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v3 & 1;
}

void sub_1C8EB34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      char v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
          BOOL v45 = &v43[8 * (v42 >> 2)];
          long long v46 = (uint64_t *)a1[1];
          unint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            unint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            uint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)uint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          int v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            unint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            uint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            uint64_t v23 = (char *)a1[1];
          }
          unint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)unint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v8 = a1[5];
      uint64_t v5 = (char *)a1[1];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    char v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          std::string v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          char v56 = (uint64_t *)a1[1];
          std::string::size_type v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            std::string::size_type v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            unint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)unint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          unsigned __int8 v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        unint64_t v63 = (char *)a1[1];
        uint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v97);
            unint64_t v100 = &v98[8 * (v97 >> 2)];
            unint64_t v101 = (uint64_t *)a1[1];
            uint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              uint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              uint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)uint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            uint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              uint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            uint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              unint64_t v63 = (char *)a1[1];
            }
            uint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)uint64_t v64 = v65;
      }
      else
      {
        *(void *)unint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    uint64_t v33 = v32;
    unsigned __int8 v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    uint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      unsigned __int8 v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)unsigned __int8 v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      long long v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        std::string v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          std::string v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v86);
          std::string v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            int v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            unint64_t v92 = v80;
            std::string::size_type v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)unint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          std::string v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            std::string v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        std::string v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    unint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C8EB3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::replaceDefaultSettingValue(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 71);
  size_t v3 = *((void *)a2 + 7);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = *((unsigned __int8 *)a2 + 71);
  }
  else {
    uint64_t v4 = *((void *)a2 + 7);
  }
  uint64_t v5 = *((unsigned __int8 *)this + 343);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)this + 41);
  }
  if (v4 != v5) {
    return 0;
  }
  unint64_t v9 = (const void **)((char *)a2 + 48);
  if (v6 >= 0) {
    unint64_t v10 = (unsigned __int8 *)this + 320;
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)this + 40);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, v3)) {
      return 0;
    }
LABEL_16:
    uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v12 = *((void *)a2 + 1);
    }
    uint64_t v13 = *((unsigned __int8 *)this + 199);
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *((void *)this + 23);
    }
    if (v12 != v13) {
      return 0;
    }
    if (v14 >= 0) {
      uint64_t v15 = (unsigned __int8 *)this + 176;
    }
    else {
      uint64_t v15 = (unsigned __int8 *)*((void *)this + 22);
    }
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v15, *((void *)a2 + 1))) {
        return 0;
      }
    }
    else if (*((unsigned char *)a2 + 23))
    {
      BOOL v16 = a2;
      while (*(unsigned __int8 *)v16 == *v15)
      {
        BOOL v16 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v16 + 1);
        ++v15;
        if (!--v11) {
          goto LABEL_32;
        }
      }
      return 0;
    }
LABEL_32:
    uint64_t v17 = *((void *)a2 + 11);
    uint64_t v18 = *((void *)a2 + 12);
    if (v17 == v18) {
      return 0;
    }
    uint64_t v19 = (void *)((char *)this + 344);
    uint64_t v20 = (const void **)((char *)this + 296);
    while (1)
    {
      uint64_t v21 = *(unsigned __int8 *)(v17 + 71);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v17 + 71);
      }
      else {
        uint64_t v22 = *(void *)(v17 + 56);
      }
      uint64_t v23 = *((unsigned __int8 *)this + 367);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)this + 44);
      }
      if (v22 != v23) {
        goto LABEL_66;
      }
      uint64_t v25 = v24 >= 0 ? (unsigned __int8 *)v19 : (unsigned __int8 *)*v19;
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v17 + 48), v25, *(void *)(v17 + 56))) {
          goto LABEL_66;
        }
      }
      else if (*(unsigned char *)(v17 + 71))
      {
        uint64_t v26 = 0;
        while (*(unsigned __int8 *)(v17 + v26 + 48) == v25[v26])
        {
          if (v21 == ++v26) {
            goto LABEL_50;
          }
        }
        goto LABEL_66;
      }
LABEL_50:
      uint64_t v27 = *(unsigned __int8 *)(v17 + 23);
      if ((v27 & 0x80u) == 0) {
        uint64_t v28 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v17 + 8);
      }
      uint64_t v29 = *((unsigned __int8 *)this + 223);
      int v30 = (char)v29;
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = *((void *)this + 26);
      }
      if (v28 == v29)
      {
        if (v30 >= 0) {
          uint64_t v31 = (char *)this + 200;
        }
        else {
          uint64_t v31 = (char *)*((void *)this + 25);
        }
        if ((v27 & 0x80) == 0)
        {
          if (!*(unsigned char *)(v17 + 23)) {
            break;
          }
          uint64_t v32 = 0;
          while (*(unsigned __int8 *)(v17 + v32) == v31[v32])
          {
            if (v27 == ++v32) {
              goto LABEL_68;
            }
          }
          goto LABEL_66;
        }
        if (!memcmp(*(const void **)v17, v31, *(void *)(v17 + 8))) {
          break;
        }
      }
LABEL_66:
      v17 += 144;
      if (v17 == v18) {
        return 0;
      }
    }
LABEL_68:
    uint64_t v34 = *(void *)(v17 + 88);
    uint64_t v33 = *(void *)(v17 + 96);
    while (1)
    {
      if (v34 == v33) {
        goto LABEL_66;
      }
      uint64_t v35 = *(unsigned __int8 *)(v34 + 71);
      if ((v35 & 0x80u) == 0) {
        uint64_t v36 = *(unsigned __int8 *)(v34 + 71);
      }
      else {
        uint64_t v36 = *(void *)(v34 + 56);
      }
      uint64_t v37 = *((unsigned __int8 *)this + 319);
      int v38 = (char)v37;
      if ((v37 & 0x80u) != 0) {
        uint64_t v37 = *((void *)this + 38);
      }
      if (v36 == v37)
      {
        if (v38 >= 0) {
          long long v39 = (unsigned __int8 *)v20;
        }
        else {
          long long v39 = (unsigned __int8 *)*v20;
        }
        if ((v35 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v34 + 48), v39, *(void *)(v34 + 56))) {
            goto LABEL_102;
          }
        }
        else if (*(unsigned char *)(v34 + 71))
        {
          uint64_t v40 = 0;
          while (*(unsigned __int8 *)(v34 + v40 + 48) == v39[v40])
          {
            if (v35 == ++v40) {
              goto LABEL_86;
            }
          }
          goto LABEL_102;
        }
LABEL_86:
        uint64_t v41 = *(unsigned __int8 *)(v34 + 23);
        if ((v41 & 0x80u) == 0) {
          uint64_t v42 = *(unsigned __int8 *)(v34 + 23);
        }
        else {
          uint64_t v42 = *(void *)(v34 + 8);
        }
        uint64_t v43 = *((unsigned __int8 *)this + 175);
        int v44 = (char)v43;
        if ((v43 & 0x80u) != 0) {
          uint64_t v43 = *((void *)this + 20);
        }
        if (v42 == v43)
        {
          if (v44 >= 0) {
            BOOL v45 = (char *)this + 152;
          }
          else {
            BOOL v45 = (char *)*((void *)this + 19);
          }
          if ((v41 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v34, v45, *(void *)(v34 + 8))) {
              goto LABEL_102;
            }
LABEL_103:
            uint64_t v48 = *(void *)(v34 + 88);
            uint64_t v47 = *(void *)(v34 + 96);
            while (2)
            {
              if (v48 == v47) {
                goto LABEL_102;
              }
              uint64_t v49 = *(unsigned __int8 *)(v48 + 71);
              if ((v49 & 0x80u) == 0) {
                uint64_t v50 = *(unsigned __int8 *)(v48 + 71);
              }
              else {
                uint64_t v50 = *(void *)(v48 + 56);
              }
              uint64_t v51 = *((unsigned __int8 *)this + 271);
              int v52 = (char)v51;
              if ((v51 & 0x80u) != 0) {
                uint64_t v51 = *((void *)this + 32);
              }
              if (v50 == v51)
              {
                if (v52 >= 0) {
                  uint64_t v53 = (char *)this + 248;
                }
                else {
                  uint64_t v53 = (char *)*((void *)this + 31);
                }
                if ((v49 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v48 + 48), v53, *(void *)(v48 + 56))) {
                    goto LABEL_121;
                  }
                }
                else
                {
                  if (*(unsigned char *)(v48 + 71))
                  {
                    uint64_t v54 = 0;
                    while (*(unsigned __int8 *)(v48 + v54 + 48) == v53[v54])
                    {
                      if (v49 == ++v54) {
                        goto LABEL_121;
                      }
                    }
                    goto LABEL_143;
                  }
LABEL_121:
                  uint64_t v55 = *(unsigned __int8 *)(v48 + 23);
                  if ((v55 & 0x80u) == 0) {
                    uint64_t v56 = *(unsigned __int8 *)(v48 + 23);
                  }
                  else {
                    uint64_t v56 = *(void *)(v48 + 8);
                  }
                  uint64_t v57 = *((unsigned __int8 *)this + 127);
                  int v58 = (char)v57;
                  if ((v57 & 0x80u) != 0) {
                    uint64_t v57 = *((void *)this + 14);
                  }
                  if (v56 == v57)
                  {
                    if (v58 >= 0) {
                      uint64_t v59 = (char *)this + 104;
                    }
                    else {
                      uint64_t v59 = (char *)*((void *)this + 13);
                    }
                    if ((v55 & 0x80) == 0)
                    {
                      if (*(unsigned char *)(v48 + 23))
                      {
                        uint64_t v60 = 0;
                        while (*(unsigned __int8 *)(v48 + v60) == v59[v60])
                        {
                          if (v55 == ++v60) {
                            goto LABEL_137;
                          }
                        }
                        goto LABEL_143;
                      }
LABEL_137:
                      uint64_t v61 = v18;
                      nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSubTreeFromSpans((const sirinluinternal::MatchingSpan **)this, (const nlv4_inference_orchestrator::trees::TreeNode *)v34, &__str);
                      unsigned __int8 v62 = SNLPOSLoggerForCategory(1);
                      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)std::string buf = 0;
                        _os_log_impl(&dword_1C8DA9000, v62, OS_LOG_TYPE_DEBUG, "Trying to find a media playback subtree to replace default value playback speed.", buf, 2u);
                      }
                      int v63 = v77;
                      uint64_t v64 = SNLPOSLoggerForCategory(1);
                      BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG);
                      if (v63)
                      {
                        if (v65)
                        {
                          *(_WORD *)std::string buf = 0;
                          _os_log_impl(&dword_1C8DA9000, v64, OS_LOG_TYPE_DEBUG, "Found a media playback subtree to replace default value playback speed.", buf, 2u);
                        }
                        if (!v77) {
                          std::__throw_bad_optional_access[abi:ne180100]();
                        }
                        std::string::operator=((std::string *)v34, &__str);
                        std::string::operator=((std::string *)(v34 + 24), &v70);
                        std::string::operator=((std::string *)(v34 + 48), &v71);
                        *(_OWORD *)(v34 + 72) = v72;
                        if ((std::string *)v34 != &__str) {
                          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v34 + 88, v73, v74, 0x8E38E38E38E38E39 * (((char *)v74 - (char *)v73) >> 4));
                        }
                        long long v67 = v76;
                        *(_OWORD *)(v34 + 112) = v75;
                        *(_OWORD *)(v34 + 128) = v67;
                        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__str);
                        return 1;
                      }
                      uint64_t v18 = v61;
                      if (v65)
                      {
                        *(_WORD *)std::string buf = 0;
                        _os_log_impl(&dword_1C8DA9000, v64, OS_LOG_TYPE_DEBUG, "Failed to find a media playback span with speed value.", buf, 2u);
                      }
                      std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__str);
                      uint64_t v20 = (const void **)((char *)this + 296);
                      uint64_t v19 = (void *)((char *)this + 344);
                      goto LABEL_143;
                    }
                    if (!memcmp(*(const void **)v48, v59, *(void *)(v48 + 8))) {
                      goto LABEL_137;
                    }
                  }
                }
              }
LABEL_143:
              v48 += 144;
              continue;
            }
          }
          if (!*(unsigned char *)(v34 + 23)) {
            goto LABEL_103;
          }
          uint64_t v46 = 0;
          while (*(unsigned __int8 *)(v34 + v46) == v45[v46])
          {
            if (v41 == ++v46) {
              goto LABEL_103;
            }
          }
        }
      }
LABEL_102:
      v34 += 144;
    }
  }
  if (!v2) {
    goto LABEL_16;
  }
  while (*(unsigned __int8 *)v9 == *v10)
  {
    unint64_t v9 = (const void **)((char *)v9 + 1);
    ++v10;
    if (!--v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_1C8EB40A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const sirinluinternal::MatchingSpan **nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSubTreeFromSpans@<X0>(const sirinluinternal::MatchingSpan **this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = this[3];
  uint64_t v5 = this[4];
  if (v4 == v5)
  {
LABEL_5:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    uint64_t v7 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *)this;
    while (1)
    {
      nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSpeedSubTreeFromSpan(v7, v4, a2, (uint64_t)v8);
      if (v8[144]) {
        break;
      }
      this = (const sirinluinternal::MatchingSpan **)std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
      uint64_t v4 = (const sirinluinternal::MatchingSpan *)((char *)v4 + 88);
      if (v4 == v5) {
        goto LABEL_5;
      }
    }
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a3, (const nlv4_inference_orchestrator::trees::TreeNode *)v8);
    a3[6].__r_.__value_.__s.__data_[0] = 1;
    return (const sirinluinternal::MatchingSpan **)std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  }
  return this;
}

void sub_1C8EB4164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSpeedSubTreeFromSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, const nlv4_inference_orchestrator::trees::TreeNode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (_DWORD *)*((void *)a2 + 1);
  unint64_t v9 = (_DWORD *)*((void *)a2 + 2);
  if (v8 != v9)
  {
    while (*v8 != *((_DWORD *)this + 12))
    {
      if (++v8 == v9)
      {
        uint64_t v8 = (_DWORD *)*((void *)a2 + 2);
        break;
      }
    }
  }
  if (v8 == v9) {
    goto LABEL_43;
  }
  unint64_t v10 = (unsigned __int8 *)*((void *)a2 + 6);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  uint64_t v13 = *((unsigned __int8 *)this + 79);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)this + 8);
  }
  if (v12 != v13) {
    goto LABEL_43;
  }
  if (v14 >= 0) {
    uint64_t v15 = (unsigned __int8 *)this + 56;
  }
  else {
    uint64_t v15 = (unsigned __int8 *)*((void *)this + 7);
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, v15, *((void *)v10 + 1))) {
      goto LABEL_43;
    }
  }
  else if (v10[23])
  {
    while (*v10 == *v15)
    {
      ++v10;
      ++v15;
      if (!--v11) {
        goto LABEL_21;
      }
    }
    goto LABEL_43;
  }
LABEL_21:
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)this + 61, *((unsigned __int8 **)a2 + 7)))
  {
    if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((void *)this + 66, *((unsigned __int8 **)a2 + 7)))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v26, a3);
      MEMORY[0x1CB7755B0](&v26, "");
      std::string::operator=(&v28, (const std::string *)((char *)this + 224));
      std::string::operator=(&v27, *((const std::string **)a2 + 7));
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v29, 0, 0, 0);
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v17, a3);
      std::string::operator=(&v17, (const std::string *)((char *)this + 80));
      std::string::operator=(&__p, (const std::string *)((char *)this + 296));
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v31, (const nlv4_inference_orchestrator::trees::TreeNode *)&v26);
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v22, (nlv4_inference_orchestrator::trees::TreeNode *)&v31, (nlv4_inference_orchestrator::trees::TreeNode *)&v37, 1uLL);
      goto LABEL_25;
    }
LABEL_43:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 144) = 0;
    return;
  }
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v26, a3);
  MEMORY[0x1CB7755B0](&v26, "");
  std::string::operator=(&v28, (const std::string *)((char *)this + 272));
  std::string::operator=(&v27, *((const std::string **)a2 + 7));
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v29, 0, 0, 0);
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v17, a3);
  std::string::operator=(&v17, (const std::string *)((char *)this + 128));
  std::string::operator=(&__p, (const std::string *)((char *)this + 296));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v31, (const nlv4_inference_orchestrator::trees::TreeNode *)&v26);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v22, (nlv4_inference_orchestrator::trees::TreeNode *)&v31, (nlv4_inference_orchestrator::trees::TreeNode *)&v37, 1uLL);
LABEL_25:
  int v30 = (void **)&v36;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  *(std::string *)a4 = v17;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v18;
  *(void *)(a4 + 40) = v19;
  v17.__r_.__value_.__r.__words[2] = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  *(std::string *)(a4 + 48) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(a4 + 72) = v21;
  *(_OWORD *)(a4 + 88) = v22;
  *(void *)(a4 + 104) = v23;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  long long v16 = v25;
  *(_OWORD *)(a4 + 112) = v24;
  *(_OWORD *)(a4 + 128) = v16;
  *(unsigned char *)(a4 + 144) = 1;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1C8EB4550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v27 - 200));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a9);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a27);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::isVOCSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  size_t v3 = *(_DWORD **)(a2 + 16);
  if (v2 != v3)
  {
    while (*v2 != *(_DWORD *)(a1 + 48))
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(_DWORD **)(a2 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::NLv4InferenceOrchestrator(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 2;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "max_num_spans_tokens");
  +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:@"NLv4SupportedGenerationList"];
  long long v6 = xmmword_1C8F3BA60;
  long long v7 = unk_1C8F3BA70;
  long long v8 = xmmword_1C8F3BA80;
  long long v9 = unk_1C8F3BA90;
  long long __p = xmmword_1C8F3BA40;
  long long v5 = unk_1C8F3BA50;
  std::unordered_set<unsigned int>::unordered_set(a1 + 72, (unsigned int *)&__p, 24);
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)(a1 + 128), "config.json");
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 152), "context_vocab.txt", "");
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 176), "multicardinal_vocab.txt", "");
  std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>((std::string *)(a1 + 200), "spans_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 224), "trg_vocab.txt");
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 248), "span_label_mapping.txt", "");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 272), "version.yaml");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 296), "SystemPrompted_Send_MessageContent");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 320), "SystemPrompted_Send_MessageContent_With_NLv4_Model_Hypotheses");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 344), "SDA_Placeholder_Verb_Replacement");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 368), "SystemPrompted_AnnouncementContent");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 392), "SystemPrompted_Create_NoteContent");
  std::__fs::filesystem::operator/[abi:ne180100](&buf, a2, (std::__fs::filesystem::path *)(a1 + 272));
  getAssetDirectoryNCV((const std::__fs::filesystem::path *)&buf);
}

void sub_1C8EB58B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, std::__shared_weak_count **a11, snlp::common::asset_logger::SNLPAssetLogger *a12, void **a13, nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer *a14, std::mutex *a15, uint64_t a16, uint64_t a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,void **a30,void **a31,uint64_t a32,void **a33,void **a34,void **a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder(a35);
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder(a10);
  if (*a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a11);
  }
  uint64_t v74 = *(void *)(v72 + 2232);
  *(void *)(v72 + 2232) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  snlp::common::asset_logger::SNLPAssetLogger::~SNLPAssetLogger(a12);
  uint64_t v75 = *(void *)(v72 + 2120);
  *(void *)(v72 + 2120) = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(a13);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(a14);
  std::mutex::~mutex(a15);
  if (*(unsigned char *)(v72 + 712))
  {
    uint64_t v76 = *(void *)(v72 + 704);
    *(void *)(v72 + 704) = 0;
    if (v76) {
      std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v76);
    }
  }
  nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(a18);
  unsigned __int8 v77 = *(std::__shared_weak_count **)(v72 + 488);
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a37);
  MEMORY[0x1CB774070](a28);
  if (*(char *)(v72 + 415) < 0) {
    operator delete(*a19);
  }
  if (*(char *)(v72 + 391) < 0) {
    operator delete(*a20);
  }
  if (*(char *)(v72 + 367) < 0) {
    operator delete(*a21);
  }
  if (*(char *)(v72 + 343) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(v72 + 319) < 0) {
    operator delete(*a23);
  }
  if (*(char *)(v72 + 295) < 0) {
    operator delete(*a36);
  }
  if (*(char *)(v72 + 271) < 0) {
    operator delete(*a34);
  }
  if (*(char *)(v72 + 247) < 0) {
    operator delete(*a29);
  }
  if (*(char *)(v72 + 223) < 0) {
    operator delete(*a30);
  }
  if (*(char *)(v72 + 199) < 0) {
    operator delete(*a33);
  }
  if (*(char *)(v72 + 175) < 0) {
    operator delete(*a31);
  }
  if (*(char *)(v72 + 151) < 0) {
    operator delete(*a24);
  }
  if (*(char *)(v72 + 31) < 0) {
    operator delete(*a25);
  }
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  size_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB604C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  size_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB60A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getNLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *a1@<X8>)
{
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::assertAssetVersionValid(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "NLv4");
  SNLPAssetVersionChecks::assertAssetVersionValid((uint64_t)__p, (uint64_t)this + 432, *((void *)this + 53), (uint64_t)this + 32, (uint64_t)this + 72);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C8EB61D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logAssetInfo(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  void v14[3] = *(std::locale *)MEMORY[0x1E4F143B8];
  snlp::common::asset_logger::SNLPAssetLogger::toStringStream((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)this + 2128), (uint64_t)v11);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  uint64_t v1 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24)));
    uint64_t v2 = std::locale::use_facet(v14, v1);
    unsigned __int8 v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(v14);
    uint64_t v4 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)__p, v3);
    if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
      break;
    }
    long long v5 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (v10 >= 0) {
        long long v6 = __p;
      }
      else {
        long long v6 = (void **)__p[0];
      }
      LODWORD(v14[0].__locale_) = 136315138;
      *(std::locale::__imp **)((char *)&v14[0].__locale_ + 4) = (std::locale::__imp *)v6;
      _os_log_impl(&dword_1C8DA9000, v5, OS_LOG_TYPE_DEFAULT, "[SNLPAssetLogger] %s", (uint8_t *)v14, 0xCu);
    }
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[2] = v7;
  double v11[3] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB775B50](&v13);
}

void sub_1C8EB64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](uint64_t a1)
{
  unsigned __int8 v3 = (void **)(a1 + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 144);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return MEMORY[0x1CB775C40](a1, 0x10B2C40E7B24F67);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder(void **this)
{
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void snlp::common::asset_logger::SNLPAssetLogger::~SNLPAssetLogger(snlp::common::asset_logger::SNLPAssetLogger *this)
{
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  MEMORY[0x1CB7740A0]((char *)this + 8);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(void **this)
{
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)(this + 38));
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }
  uint64_t v2 = this + 32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 27));
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(void **this)
{
  uint64_t v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 18));
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [36],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB681C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [27],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB6878(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [60],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB68D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [86],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C8EB6930(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::context::Embedder::~Embedder(void **this)
{
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  uint64_t v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 18));
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getAssetVersionMajor(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  return *(unsigned int *)(*((void *)this + 53) + 16);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::pbhandle(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v265 = v2;
  v267 = (nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)v1;
  v464[1] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);
  long long v5 = SNLPOSLoggerForCategory(7);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v6 = v5;
    if (os_signpost_enabled(v5))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "NLv4 Request Validation", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v7 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v7, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Request Validation\"", (uint8_t *)&buf, 2u);
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::assertAssetVersionValid(v267);
  if (!*v265)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "NLv4 request is null");
    std::runtime_error::runtime_error(exception, (const std::string *)&buf);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F235F530;
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::validateRequest((void *)*v265);
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logAssetInfo(v267);
  v324.__r_.__value_.__s.__data_[0] = 0;
  char v325 = 0;
  uint64_t v8 = *(void *)(*v265 + 48);
  if (v8
    && (long long v9 = *(const std::string **)(v8 + 16)) != 0
    && (std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&v324, v9), v325))
  {
    if (_os_feature_enabled_impl())
    {
      if (v325) {
        snlp::common::logging::feature_store_utilities::insertNLv4AssetVersionToFeatureStore();
      }
      std::__throw_bad_optional_access[abi:ne180100]();
    }
  }
  else
  {
    uint64_t v10 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v10, OS_LOG_TYPE_DEBUG, "nlu_request_id not found so skipping insertion of asset version into FeatureStore", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v11 = SNLPOSLoggerForCategory(7);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v12 = v11;
    if (os_signpost_enabled(v11))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v12, OS_SIGNPOST_INTERVAL_END, v4, "NLv4 Request Validation", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v13 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v13, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Request Validation\"", (uint8_t *)&buf, 2u);
  }
  int v14 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v15 = os_signpost_id_generate(v14);
  long long v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v17 = v16;
    if (os_signpost_enabled(v16))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "NLv4 Reindexation", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Reindexation\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v19 = *(void *)(*v265 + 64);
  unint64_t v323 = 0;
  v321 = 0;
  v322 = 0;
  uint64_t v270 = v19;
  uint64_t v20 = *(void *)(v19 + 24);
  if (v20)
  {
    long long v21 = *(uint64_t **)(v20 + 24);
    long long v22 = *(uint64_t **)(v20 + 32);
    if (v21 != v22)
    {
      while (1)
      {
        uint64_t v23 = *v21;
        if ((~*(unsigned __int8 *)(*v21 + 92) & 3) != 0) {
          break;
        }
        uint64_t v24 = *(unsigned int *)(v23 + 72);
        unint64_t v25 = *(unsigned int *)(v23 + 76);
        if ((int)v24 > (int)v25 || ((v25 | v24) & 0x80000000) != 0) {
          break;
        }
        std::string v26 = *(uint64_t **)(v270 + 16);
        uint64_t UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v26, *(unsigned int *)(v23 + 72));
        uint64_t v29 = v28;
        uint64_t v30 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v26, v25);
        uint64_t v32 = v31;
        MEMORY[0x1CB773EE0](v419, v23);
        *(void *)&long long v421 = v29;
        *((void *)&v421 + 1) = v32;
        *(void *)&long long v422 = v24;
        *((void *)&v422 + 1) = v25;
        *(void *)&long long v423 = UnicodeScalarAndUtf8Offsets;
        *((void *)&v423 + 1) = v30;
        MEMORY[0x1CB773EE0](&buf, v419);
        long long v398 = v421;
        *(_OWORD *)v399 = v422;
        *(_OWORD *)&v399[16] = v423;
        v399[32] = 1;
        MEMORY[0x1CB773EF0](v419);
        if (!v399[32]) {
          goto LABEL_34;
        }
        if ((unint64_t)v322 >= v323)
        {
          uint64_t v36 = (char *)std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>((void **)&v321, &buf);
        }
        else
        {
          char v33 = (_OWORD *)MEMORY[0x1CB773EE0]();
          long long v34 = v398;
          long long v35 = *(_OWORD *)&v399[16];
          v33[7] = *(_OWORD *)v399;
          v33[8] = v35;
          v33[6] = v34;
          uint64_t v36 = (char *)(v33 + 9);
        }
        v322 = v36;
LABEL_40:
        if (v399[32]) {
          MEMORY[0x1CB773EF0](&buf);
        }
        if (++v21 == v22) {
          goto LABEL_43;
        }
      }
      LOBYTE(buf.__loc_.__locale_) = 0;
      v399[32] = 0;
LABEL_34:
      uint64_t v37 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        int v38 = *(uint64_t ***)(v23 + 64);
        if (*((char *)v38 + 23) < 0) {
          int v38 = (uint64_t **)*v38;
        }
        *(_DWORD *)v419 = 136642819;
        *(void *)&v419[4] = v38;
        _os_log_impl(&dword_1C8DA9000, v37, OS_LOG_TYPE_ERROR, "A token could not be reindexed; %{sensitive}s",
          v419,
          0xCu);
      }
      goto LABEL_40;
    }
  }
LABEL_43:
  long long v39 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v40 = v39;
    if (os_signpost_enabled(v39))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v40, OS_SIGNPOST_INTERVAL_END, v15, "NLv4 Reindexation", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v41 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v41, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Reindexation\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v42 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v43 = os_signpost_id_generate(v42);
  int v44 = SNLPOSLoggerForCategory(7);
  if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v45 = v44;
    if (os_signpost_enabled(v44))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v45, OS_SIGNPOST_INTERVAL_BEGIN, v43, "NLv4 Matched Span Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v46, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Matched Span Featurization\"", (uint8_t *)&buf, 2u);
  }
  memset(v320, 0, sizeof(v320));
  uint64_t v47 = *(uint64_t **)(*v265 + 16);
  uint64_t v48 = *(uint64_t **)(*v265 + 24);
  while (v47 != v48)
    std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v320, *v47++);
  (*(void (**)(const sirinluinternal::MatchingSpan **__return_ptr))(**((void **)v267 + 279) + 16))(v319);
  memset(v314, 0, sizeof(v314));
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v314, v321, v322, 0x8E38E38E38E38E39 * ((v322 - v321) >> 4));
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::featurizeSpans((uint64_t)v267, v319, v314, (uint64_t)&v324, (uint64_t)&v315);
  buf.__loc_.__locale_ = (std::locale::__imp *)v314;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  uint64_t v49 = SNLPOSLoggerForCategory(7);
  if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v50 = v49;
    if (os_signpost_enabled(v49))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v50, OS_SIGNPOST_INTERVAL_END, v43, "NLv4 Matched Span Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v51 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v51, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Matched Span Featurization\"", (uint8_t *)&buf, 2u);
  }
  int v52 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v53 = os_signpost_id_generate(v52);
  uint64_t v54 = SNLPOSLoggerForCategory(7);
  if (v53 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v55 = v54;
    if (os_signpost_enabled(v54))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v55, OS_SIGNPOST_INTERVAL_BEGIN, v53, "NLv4 Context Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v56 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v56, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Context Featurization\"", (uint8_t *)&buf, 2u);
  }
  nlv4_inference_orchestrator::context::ContextFeaturizer::featurize((unsigned __int8 *)v267 + 1368, *v265, (uint64_t)&v310);
  uint64_t v57 = SNLPOSLoggerForCategory(7);
  if (v53 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v58 = v57;
    if (os_signpost_enabled(v57))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v58, OS_SIGNPOST_INTERVAL_END, v53, "NLv4 Context Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v59 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v59, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Context Featurization\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v60 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v61 = os_signpost_id_generate(v60);
  unsigned __int8 v62 = SNLPOSLoggerForCategory(7);
  if (v61 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v63 = v62;
    if (os_signpost_enabled(v62))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v63, OS_SIGNPOST_INTERVAL_BEGIN, v61, "NLv4 Inference", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v64 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v64, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Inference\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v65 = *v265;
  uint64_t v66 = *(void *)(*v265 + 8);
  unint64_t v67 = *(void *)(v66 + 56);
  uint64_t v68 = *(void *)(v66 + 40);
  uint64_t v69 = operator new(0x18uLL);
  v306 = v69 + 3;
  *uint64_t v69 = 1;
  v69[1] = v67;
  v69[2] = v68;
  v304 = v69;
  v305 = (char *)(v69 + 3);
  uint64_t v70 = *(void *)(v65 + 8);
  uint64_t v309 = 0;
  v307 = 0;
  uint64_t v308 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v307, *(const void **)(v70 + 8), *(void *)(v70 + 16), (uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 2);
  std::string v71 = operator new(8uLL);
  *std::string v71 = 1;
  v303[6] = v71 + 1;
  v303[4] = v71;
  v303[5] = v71 + 1;
  uint64_t v72 = (float *)operator new(4uLL);
  *uint64_t v72 = (float)v67;
  v303[9] = v72 + 1;
  v303[7] = v72;
  v303[8] = v72 + 1;
  int64_t v73 = (void **)(*v265 + 40);
  if ((*(unsigned char *)(*v265 + 80) & 1) == 0) {
    int64_t v73 = (void **)((char *)v267 + 112);
  }
  v272 = *v73;
  memset(v292, 0, sizeof(v292));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v292, v304, (uint64_t)v305, (v305 - (unsigned char *)v304) >> 3);
  memset(v293, 0, sizeof(v293));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v293, v307, v308, (v308 - (uint64_t)v307) >> 2);
  memset(v294, 0, sizeof(v294));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v294, v315, v316, (v316 - (uint64_t)v315) >> 3);
  v296 = 0;
  v295 = 0;
  uint64_t v297 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v295, v317, v318, (v318 - (uint64_t)v317) >> 2);
  memset(v298, 0, sizeof(v298));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v298, v310, v311, (v311 - (uint64_t)v310) >> 3);
  v300 = 0;
  v299 = 0;
  uint64_t v301 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v299, v312, v313, (v313 - (uint64_t)v312) >> 2);
  memset(v302, 0, sizeof(v302));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v302, v71, (uint64_t)(v71 + 1), 1uLL);
  memset(v303, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v303, v72, (uint64_t)(v72 + 1), 1uLL);
  v303[3] = v272;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v419);
  uint64_t v74 = v295;
  for (uint64_t i = v296; v74 != i; ++v74)
  {
    uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v420, (uint64_t)"[insights-snlp-nlv4]: ", 22);
    unsigned __int8 v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
    std::to_string((std::string *)&buf, *v74);
    if (SHIBYTE(buf.__col_) >= 0) {
      p_std::regex_traits<char> buf = (std::locale::__imp *)&buf;
    }
    else {
      p_std::regex_traits<char> buf = buf.__loc_.__locale_;
    }
    if (SHIBYTE(buf.__col_) >= 0) {
      uint64_t col_high = HIBYTE(buf.__col_);
    }
    else {
      uint64_t col_high = (uint64_t)buf.__ct_;
    }
    std::string v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)p_buf, col_high);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\n", 1);
    if (SHIBYTE(buf.__col_) < 0) {
      operator delete(buf.__loc_.__locale_);
    }
  }
  std::string v81 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v82 = v291 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf.__loc_.__locale_) = 136315650;
    *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + 4) = (std::locale::__imp *)"NLv4";
    WORD2(buf.__ct_) = 2080;
    *(const std::ctype<char> **)((char *)&buf.__ct_ + 6) = (const std::ctype<char> *)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__col_) = 2080;
    *(void *)v394 = v82;
    _os_log_impl(&dword_1C8DA9000, v81, OS_LOG_TYPE_DEBUG, "[%s] %sNumericalized span input for NLv4 parser model:\n%s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(v291) < 0) {
      operator delete(__p[0]);
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v83 = v299;
  for (unint64_t j = v300; v83 != j; ++v83)
  {
    uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v291, (uint64_t)"[insights-snlp-nlv4]: ", 22);
    unint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" ", 1);
    std::to_string((std::string *)&buf, *v83);
    if (SHIBYTE(buf.__col_) >= 0) {
      locale = (std::locale::__imp *)&buf;
    }
    else {
      locale = buf.__loc_.__locale_;
    }
    if (SHIBYTE(buf.__col_) >= 0) {
      uint64_t ct = HIBYTE(buf.__col_);
    }
    else {
      uint64_t ct = (uint64_t)buf.__ct_;
    }
    int v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)locale, ct);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"\n", 1);
    if (SHIBYTE(buf.__col_) < 0) {
      operator delete(buf.__loc_.__locale_);
    }
  }
  uint64_t v90 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v91 = v435 >= 0 ? &v433 : (void **)v433;
    LODWORD(buf.__loc_.__locale_) = 136315650;
    *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + 4) = (std::locale::__imp *)"NLv4";
    WORD2(buf.__ct_) = 2080;
    *(const std::ctype<char> **)((char *)&buf.__ct_ + 6) = (const std::ctype<char> *)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__col_) = 2080;
    *(void *)v394 = v91;
    _os_log_impl(&dword_1C8DA9000, v90, OS_LOG_TYPE_DEBUG, "[%s] %sNumericalized context input for NLv4 parser model:\n%s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(v435) < 0) {
      operator delete(v433);
    }
  }
  memset(&v289, 0, sizeof(v289));
  std::mutex::lock((std::mutex *)((char *)v267 + 720));
  uint64_t v92 = *((void *)v267 + 265);
  std::string::size_type v93 = SNLPOSLoggerForCategory(1);
  uint64_t v94 = v93;
  if (v92)
  {
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v94, OS_LOG_TYPE_DEBUG, "Attempt E5-ML inference.", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(std::regex_traits<char> *__return_ptr))(**((void **)v267 + 265) + 16))(&buf);
    std::regex_traits<char> v289 = buf;
    memset(&buf, 0, sizeof(buf));
    v433 = &buf;
    std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
  }
  else if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v94, OS_LOG_TYPE_ERROR, "Espresso model assets could not be found.  No NLv4 model was initialised.", (uint8_t *)&buf, 2u);
  }
  std::mutex::unlock((std::mutex *)((char *)v267 + 720));
  v287 = 0;
  v286 = 0;
  v288 = 0;
  unint64_t v96 = v289.__ct_;
  uint64_t v95 = v289.__loc_.__locale_;
  v433 = &v286;
  LOBYTE(v434) = 0;
  int64_t v97 = (char *)v289.__ct_ - (char *)v289.__loc_.__locale_;
  if (v289.__ct_ != (const std::ctype<char> *)v289.__loc_.__locale_)
  {
    if (v97 < 0) {
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v97 >> 5);
    v287 = v286;
    v288 = &v286[32 * v98];
    v424[0] = v286;
    v458.__r_.__value_.__r.__words[0] = (std::string::size_type)v286;
    buf.__loc_.__locale_ = (std::locale::__imp *)&v288;
    buf.__ct_ = (const std::ctype<char> *)&v458;
    buf.__col_ = (const std::collate<char> *)v424;
    uint64_t v99 = v286;
    v394[0] = 0;
    do
    {
      *(_DWORD *)uint64_t v99 = *(_DWORD *)v95;
      *((void *)v99 + 2) = 0;
      *((void *)v99 + 3) = 0;
      *((void *)v99 + 1) = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)v99 + 1, *((const void **)v95 + 1), *((void *)v95 + 2), (uint64_t)(*((void *)v95 + 2) - *((void *)v95 + 1)) >> 3);
      uint64_t v99 = (char *)v424[0] + 32;
      v424[0] = (char *)v424[0] + 32;
      uint64_t v95 = (std::locale::__imp *)((char *)v95 + 32);
    }
    while (v95 != (std::locale::__imp *)v96);
    v394[0] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
    v287 = v99;
  }
  unint64_t v100 = SNLPOSLoggerForCategory(7);
  if (v61 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v101 = v100;
    if (os_signpost_enabled(v100))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v101, OS_SIGNPOST_INTERVAL_END, v61, "NLv4 Inference", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v102 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v102, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Inference\"", (uint8_t *)&buf, 2u);
  }
  uint64_t v103 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v104 = os_signpost_id_generate(v103);
  uint64_t v105 = SNLPOSLoggerForCategory(7);
  unint64_t v271 = v104 - 1;
  if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v106 = v105;
    if (os_signpost_enabled(v105))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v106, OS_SIGNPOST_INTERVAL_BEGIN, v104, "NLv4 Denumericalization", "", (uint8_t *)&buf, 2u);
    }
  }
  os_signpost_id_t v269 = v104;
  long long v107 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v107, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Denumericalization\"", (uint8_t *)&buf, 2u);
  }
  v284 = 0;
  v283 = 0;
  v285 = 0;
  long long v108 = v286;
  uint64_t v109 = v287;
  if (v286 != v287)
  {
    do
    {
      uint64_t v435 = 0;
      v434 = 0;
      v433 = 0;
      long long v110 = (unint64_t *)*((void *)v108 + 1);
      uint64_t v111 = (unint64_t *)*((void *)v108 + 2);
      v458.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
      if (v110 == v111)
      {
        uint64_t v113 = 0;
        long long v112 = 0;
      }
      else
      {
        do
        {
          nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)v267 + 496), *v110, (std::string *)&buf);
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v458, (long long *)&buf);
          if (SHIBYTE(buf.__col_) < 0) {
            operator delete(buf.__loc_.__locale_);
          }
          ++v110;
        }
        while (v110 != v111);
        long long v112 = (long long *)v433;
        uint64_t v113 = v434;
      }
      LODWORD(buf.__loc_.__locale_) = *(_DWORD *)v108;
      buf.__col_ = 0;
      *(void *)v394 = 0;
      buf.__ct_ = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&buf.__ct_, v112, v113, 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 3));
      long long v114 = v284;
      if (v284 >= (_DWORD *)v285)
      {
        long long v116 = v283;
        uint64_t v117 = ((char *)v284 - (unsigned char *)v283) >> 5;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 59) {
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v119 = v285 - (unsigned char *)v283;
        if ((v285 - (unsigned char *)v283) >> 4 > v118) {
          unint64_t v118 = v119 >> 4;
        }
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v120 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v118;
        }
        if (v120 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v121 = (char *)operator new(32 * v120);
        int v122 = &v121[32 * v117];
        *(_DWORD *)int v122 = buf.__loc_.__locale_;
        *(_OWORD *)(v122 + 8) = *(_OWORD *)&buf.__ct_;
        *((void *)v122 + 3) = *(void *)v394;
        buf.__col_ = 0;
        *(void *)v394 = 0;
        buf.__ct_ = 0;
        uint64_t v115 = v122 + 32;
        if (v114 == v116)
        {
          v283 = v122;
          v284 = v122 + 32;
          v285 = &v121[32 * v120];
          if (!v114) {
            goto LABEL_154;
          }
        }
        else
        {
          uint64_t v123 = 0;
          do
          {
            int v124 = &v122[v123 * 8];
            long long v125 = &v114[v123];
            *((_DWORD *)v124 - 8) = v114[v123 - 4];
            *((void *)v124 - 2) = 0;
            *((void *)v124 - 1) = 0;
            *((void *)v124 - 3) = 0;
            *(_OWORD *)(v124 - 24) = *(_OWORD *)&v114[v123 - 3];
            *((void *)v124 - 1) = v114[v123 - 1];
            *(v125 - 3) = 0;
            *(v125 - 2) = 0;
            *(v125 - 1) = 0;
            v123 -= 4;
          }
          while (&v114[v123] != v116);
          unsigned int v126 = &v122[v123 * 8];
          long long v114 = v283;
          int v127 = v284;
          v283 = v126;
          v284 = v115;
          v285 = &v121[32 * v120];
          if (v127 != v114)
          {
            do
            {
              unint64_t v128 = v127 - 4;
              v424[0] = v127 - 3;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v424);
              int v127 = v128;
            }
            while (v128 != v114);
          }
          if (!v114) {
            goto LABEL_154;
          }
        }
        operator delete(v114);
      }
      else
      {
        _DWORD *v284 = buf.__loc_.__locale_;
        v114[2] = 0;
        v114[3] = 0;
        v114[1] = 0;
        *(_OWORD *)(v114 + 1) = *(_OWORD *)&buf.__ct_;
        v114[3] = *(void *)v394;
        buf.__ct_ = 0;
        buf.__col_ = 0;
        *(void *)v394 = 0;
        uint64_t v115 = v114 + 4;
      }
LABEL_154:
      v284 = v115;
      v424[0] = &buf.__ct_;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v424);
      buf.__loc_.__locale_ = (std::locale::__imp *)&v433;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v108 += 32;
    }
    while (v272 != (void *)(((char *)v115 - (unsigned char *)v283) >> 5) && v108 != v109);
  }
  char v130 = SNLPOSLoggerForCategory(7);
  if (v271 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v131 = v130;
    if (os_signpost_enabled(v130))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v131, OS_SIGNPOST_INTERVAL_END, v269, "NLv4 Denumericalization", "", (uint8_t *)&buf, 2u);
    }
  }
  char v132 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v132, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Denumericalization\"", (uint8_t *)&buf, 2u);
  }
  memset(v282, 0, sizeof(v282));
  std::string v133 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v134 = os_signpost_id_generate(v133);
  char v135 = SNLPOSLoggerForCategory(7);
  if (v134 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v136 = v135;
    if (os_signpost_enabled(v135))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v136, OS_SIGNPOST_INTERVAL_BEGIN, v134, "NLv4 Placeholder Fixes", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v137 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v137, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Placeholder Fixes\"", (uint8_t *)&buf, 2u);
  }
  if (*v265)
  {
    uint64_t v138 = *(void *)(*v265 + 72);
    if (v138)
    {
      uint64_t v139 = *(void *)(v138 + 136);
      if (v139)
      {
        long long v140 = *(const sirinluexternal::NLContext **)(v139 + 16);
        if (v140)
        {
          nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromNLContext((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)v267 + 2240), v140, &v433);
          if (LOBYTE(v436[0]))
          {
            std::string::basic_string[abi:ne180100]<0>(v424, "PlaceholderVerb_placeholderVerb");
            long long v141 = v283;
            if (v283 != v284)
            {
              do
              {
                unint64_t v142 = (long long *)v141[1];
                if (v142 != (long long *)v141[2])
                {
                  if (*((char *)v142 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v458, *(const std::string::value_type **)v142, *((void *)v142 + 1));
                  }
                  else
                  {
                    long long v143 = *v142;
                    v458.__r_.__value_.__r.__words[2] = *((void *)v142 + 2);
                    *(_OWORD *)&v458.__r_.__value_.__l.__data_ = v143;
                  }
                  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&buf);
                }
                v141 += 4;
              }
              while (v141 != (void *)v284);
            }
            if (v425 < 0) {
              operator delete(v424[0]);
            }
            if (LOBYTE(v436[0]) && SHIBYTE(v435) < 0) {
              operator delete(v433);
            }
          }
        }
      }
    }
  }
  float v144 = SNLPOSLoggerForCategory(7);
  if (v134 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v145 = v144;
    if (os_signpost_enabled(v144))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v145, OS_SIGNPOST_INTERVAL_END, v134, "NLv4 Placeholder Fixes", "", (uint8_t *)&buf, 2u);
    }
  }
  long long v146 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v146, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Placeholder Fixes\"", (uint8_t *)&buf, 2u);
  }
  long long v147 = SNLPOSLoggerForCategory(7);
  os_signpost_id_t v148 = os_signpost_id_generate(v147);
  uint64_t v149 = SNLPOSLoggerForCategory(7);
  if (v148 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v150 = v149;
    if (os_signpost_enabled(v149))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v150, OS_SIGNPOST_INTERVAL_BEGIN, v148, "NLv4 Tree Building", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v151 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C8DA9000, v151, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Tree Building\"", (uint8_t *)&buf, 2u);
  }
  v280 = 0;
  v279 = 0;
  unint64_t v281 = 0;
  uint64_t v152 = (char *)v283;
  if (v284 == v283)
  {
LABEL_415:
    v236 = SNLPOSLoggerForCategory(7);
    if (v148 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v237 = v236;
      if (os_signpost_enabled(v236))
      {
        LOWORD(buf.__loc_.__locale_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v237, OS_SIGNPOST_INTERVAL_END, v148, "NLv4 Tree Building", "", (uint8_t *)&buf, 2u);
      }
    }
    v238 = SNLPOSLoggerForCategory(0);
    if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v238, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Tree Building\"", (uint8_t *)&buf, 2u);
    }
    v239 = SNLPOSLoggerForCategory(7);
    os_signpost_id_t v240 = os_signpost_id_generate(v239);
    v241 = SNLPOSLoggerForCategory(7);
    if (v240 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v242 = v241;
      if (os_signpost_enabled(v241))
      {
        LOWORD(buf.__loc_.__locale_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v242, OS_SIGNPOST_INTERVAL_BEGIN, v240, "NLv4 Post-Inference Tree Manipulation", "", (uint8_t *)&buf, 2u);
      }
    }
    v243 = SNLPOSLoggerForCategory(0);
    if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v243, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Post-Inference Tree Manipulation\"", (uint8_t *)&buf, 2u);
    }
    uint64_t v244 = *(void *)(*v265 + 64);
    uint64_t v245 = *(void *)(*v265 + 72);
    v246 = *(long long **)(*(void *)(v244 + 24) + 8);
    if (v245 && (uint64_t v247 = *(void *)(v245 + 136)) != 0 && *(void *)(v247 + 16) && *(void *)(v244 + 16))
    {
      MEMORY[0x1CB773D50](&v433);
      char v440 = 1;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations((std::string *)&buf, v246, (_OWORD **)&v321, (uint64_t)v319, (uint64_t)&v433, *(long long **)(*(void *)(*v265 + 64) + 16));
      if (v440) {
        MEMORY[0x1CB773D60](&v433);
      }
      v248 = v279;
      v249 = (char *)v280;
      if (v279 != v280)
      {
        do
        {
          nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps((uint64_t)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)(v248 + 8), v282);
          v250 = SNLPOSLoggerForCategory(1);
          if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
          {
            nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)&v433, (const nlv4_inference_orchestrator::trees::TreeNode *)(v248 + 8));
            v251 = v435 >= 0 ? &v433 : (void **)v433;
            LODWORD(v424[0]) = 136642819;
            *(void **)((char *)v424 + 4) = v251;
            _os_log_impl(&dword_1C8DA9000, v250, OS_LOG_TYPE_DEBUG, "Tree after all manipulations:\n%{sensitive}s", (uint8_t *)v424, 0xCu);
            if (SHIBYTE(v435) < 0) {
              operator delete(v433);
            }
          }
          v248 += 152;
        }
        while (v248 != v249);
      }
    }
    else
    {
      LOBYTE(v433) = 0;
      char v440 = 0;
      std::string::basic_string[abi:ne180100]<0>(v424, "");
      nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations((std::string *)&buf, v246, (_OWORD **)&v321, (uint64_t)v319, (uint64_t)&v433, (long long *)v424);
      if (v425 < 0) {
        operator delete(v424[0]);
      }
      if (v440) {
        MEMORY[0x1CB773D60](&v433);
      }
      v252 = v279;
      v253 = (char *)v280;
      if (v279 != v280)
      {
        do
        {
          nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps((uint64_t)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)(v252 + 8), v282);
          v254 = SNLPOSLoggerForCategory(1);
          if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
          {
            nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)&v433, (const nlv4_inference_orchestrator::trees::TreeNode *)(v252 + 8));
            v255 = v435 >= 0 ? &v433 : (void **)v433;
            LODWORD(v424[0]) = 136642819;
            *(void **)((char *)v424 + 4) = v255;
            _os_log_impl(&dword_1C8DA9000, v254, OS_LOG_TYPE_DEBUG, "Tree after all manipulations:\n%{sensitive}s", (uint8_t *)v424, 0xCu);
            if (SHIBYTE(v435) < 0) {
              operator delete(v433);
            }
          }
          v252 += 152;
        }
        while (v252 != v253);
      }
    }
    nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::~TreeManipulations((void **)&buf.__loc_.__locale_);
    v256 = SNLPOSLoggerForCategory(7);
    if (v240 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v257 = v256;
      if (os_signpost_enabled(v256))
      {
        LOWORD(buf.__loc_.__locale_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v257, OS_SIGNPOST_INTERVAL_END, v240, "NLv4 Post-Inference Tree Manipulation", "", (uint8_t *)&buf, 2u);
      }
    }
    v258 = SNLPOSLoggerForCategory(0);
    if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v258, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Post-Inference Tree Manipulation\"", (uint8_t *)&buf, 2u);
    }
    v259 = SNLPOSLoggerForCategory(7);
    os_signpost_id_t v260 = os_signpost_id_generate(v259);
    v261 = SNLPOSLoggerForCategory(7);
    if (v260 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v262 = v261;
      if (os_signpost_enabled(v261))
      {
        LOWORD(buf.__loc_.__locale_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C8DA9000, v262, OS_SIGNPOST_INTERVAL_BEGIN, v260, "NLv4 Protobuf Response Building", "", (uint8_t *)&buf, 2u);
      }
    }
    v263 = SNLPOSLoggerForCategory(0);
    if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C8DA9000, v263, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Protobuf Response Building\"", (uint8_t *)&buf, 2u);
    }
    operator new();
  }
  uint64_t v153 = 0;
  while (1)
  {
    uint64_t spid = v153;
    v266 = (char **)&v152[32 * v153 + 8];
    memset(v278, 0, 24);
    uint64_t v277 = 0;
    long long v275 = 0u;
    *(_OWORD *)v276 = 0u;
    *(_OWORD *)v273 = 0u;
    *(_OWORD *)v274 = 0u;
    uint64_t v154 = *(void *)(*(void *)(*v265 + 64) + 16);
    std::string::basic_string[abi:ne180100]<0>(v333, " ");
    std::string::basic_string[abi:ne180100]<0>(&v335, "[next-");
    std::string::basic_string[abi:ne180100]<0>(&v337, "[next]");
    std::string::basic_string[abi:ne180100]<0>(&v339, "]");
    nlv4_inference_orchestrator::trees::TagExpander::expandTags((unint64_t)v333, v266, v332);
    std::string::basic_string[abi:ne180100]<0>(v329, "ROOT");
    std::string::basic_string[abi:ne180100]<0>(&buf, "common_UserEntity.associatedUserEntities");
    std::string::basic_string[abi:ne180100]<0>(v394, "common_Setting.name");
    std::string::basic_string[abi:ne180100]<0>(v395, "common_Timer.attributes");
    std::string::basic_string[abi:ne180100]<0>(&v396, "common_UserEntity.names");
    std::string::basic_string[abi:ne180100]<0>(&v398, "common_DateTime.time");
    std::string::basic_string[abi:ne180100]<0>(&v399[8], "common_Message.recipients");
    std::string::basic_string[abi:ne180100]<0>(&v399[32], "userEntities");
    std::string::basic_string[abi:ne180100]<0>(&v400, "common_PhoneCall.recipients");
    std::string::basic_string[abi:ne180100]<0>(&v402, "common_Message.attachments");
    std::string::basic_string[abi:ne180100]<0>(v404, "common_PhoneCall.attributes");
    std::string::basic_string[abi:ne180100]<0>(&v405, "common_Message.attributes");
    std::string::basic_string[abi:ne180100]<0>(&v407, "common_Person.name");
    std::string::basic_string[abi:ne180100]<0>(v409, "common_Measurement.components");
    std::string::basic_string[abi:ne180100]<0>(&v410, "common_RecurringDateTime.recurrenceDateTimes");
    std::string::basic_string[abi:ne180100]<0>(&v412, "common_Announcement.recipients");
    std::string::basic_string[abi:ne180100]<0>(v414, "common_Alarm.attributes");
    std::string::basic_string[abi:ne180100]<0>(&v415, "common_Message.participants");
    std::unordered_set<std::string>::unordered_set((uint64_t)v331, (unsigned __int8 *)&buf, 17);
    uint64_t v155 = 408;
    do
    {
      if (*((char *)&buf + v155 - 1) < 0) {
        operator delete(*(long long **)((char *)&v390 + v155));
      }
      v155 -= 24;
    }
    while (v155);
    if (*((unsigned char *)v267 + 712))
    {
      uint64_t v156 = *((void *)v267 + 88);
      if (v156)
      {
        memset(&buf, 0, sizeof(buf));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&buf, *(long long **)(v156 + 184), *(long long **)(v156 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v156 + 192) - *(void *)(v156 + 184)) >> 3));
        v157 = (unsigned __int8 *)buf.__loc_.__locale_;
        v158 = buf.__ct_;
        while (v157 != (unsigned __int8 *)v158)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v331, v157, (uint64_t)v157);
          v157 += 24;
        }
        v433 = &buf;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
      }
    }
    nlv4_inference_orchestrator::trees::PlyTreeCreator::constructTree((uint64_t)v329, (uint64_t)v273, v332, &v321, v154);
    std::string::basic_string[abi:ne180100]<0>(&v458, "target");
    std::string::basic_string[abi:ne180100]<0>(v459, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(v460, "sourceString");
    std::string::basic_string[abi:ne180100]<0>(v461, "common_LocalisedString");
    std::string::basic_string[abi:ne180100]<0>(v462, "locale");
    std::string::basic_string[abi:ne180100]<0>(v463, "common_Locale");
    long long v383 = 0uLL;
    uint64_t v384 = 0;
    v433 = &v383;
    LOBYTE(v434) = 0;
    *(void *)&long long v383 = operator new(0x90uLL);
    *((void *)&v383 + 1) = v383;
    uint64_t v384 = v383 + 144;
    *((void *)&v383 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v384, (uint64_t)&v458, (uint64_t)v464, v383);
    std::string::basic_string[abi:ne180100]<0>(&v381, "name");
    long long v385 = v383;
    uint64_t v386 = v384;
    uint64_t v384 = 0;
    long long v383 = 0uLL;
    long long v387 = v381;
    uint64_t v388 = v382;
    long long v381 = 0uLL;
    uint64_t v382 = 0;
    std::string::basic_string[abi:ne180100]<0>(&buf, "modified_TranslationSourceLocale");
    *(_OWORD *)v394 = v385;
    *(void *)&v394[16] = v386;
    uint64_t v386 = 0;
    long long v385 = 0uLL;
    *(_OWORD *)v395 = v387;
    *(void *)&v395[16] = v388;
    long long v387 = 0uLL;
    uint64_t v388 = 0;
    std::string::basic_string[abi:ne180100]<0>(v454, "target");
    std::string::basic_string[abi:ne180100]<0>(v455, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(&v456, "sourceString");
    std::string::basic_string[abi:ne180100]<0>(v457, "common_LocalisedString");
    long long v375 = 0uLL;
    uint64_t v376 = 0;
    v433 = &v375;
    LOBYTE(v434) = 0;
    *(void *)&long long v375 = operator new(0x60uLL);
    *((void *)&v375 + 1) = v375;
    uint64_t v376 = v375 + 96;
    *((void *)&v375 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v376, (uint64_t)v454, (uint64_t)&v458, v375);
    std::string::basic_string[abi:ne180100]<0>(&v373, "stringValue");
    long long v377 = v375;
    uint64_t v378 = v376;
    uint64_t v376 = 0;
    long long v375 = 0uLL;
    long long v379 = v373;
    uint64_t v380 = v374;
    long long v373 = 0uLL;
    uint64_t v374 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v396, "modified_TranslationPayload");
    long long v398 = v377;
    *(void *)v399 = v378;
    uint64_t v378 = 0;
    long long v377 = 0uLL;
    *(_OWORD *)&v399[8] = v379;
    *(void *)&v399[24] = v380;
    long long v379 = 0uLL;
    uint64_t v380 = 0;
    std::string::basic_string[abi:ne180100]<0>(v450, "target");
    std::string::basic_string[abi:ne180100]<0>(v451, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(&v452, "sourceString");
    std::string::basic_string[abi:ne180100]<0>(v453, "common_LocalisedString");
    long long v367 = 0uLL;
    uint64_t v368 = 0;
    v433 = &v367;
    LOBYTE(v434) = 0;
    *(void *)&long long v367 = operator new(0x60uLL);
    *((void *)&v367 + 1) = v367;
    uint64_t v368 = v367 + 96;
    *((void *)&v367 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v368, (uint64_t)v450, (uint64_t)v454, v367);
    std::string::basic_string[abi:ne180100]<0>(&v365, "usoReferenceType");
    long long v369 = v367;
    uint64_t v370 = v368;
    uint64_t v368 = 0;
    long long v367 = 0uLL;
    long long v371 = v365;
    uint64_t v372 = v366;
    long long v365 = 0uLL;
    uint64_t v366 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v399[32], "modified_TranslationReferenceType");
    long long v400 = v369;
    uint64_t v401 = v370;
    uint64_t v370 = 0;
    long long v369 = 0uLL;
    long long v402 = v371;
    uint64_t v403 = v372;
    long long v371 = 0uLL;
    uint64_t v372 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v444, "target");
    std::string::basic_string[abi:ne180100]<0>(v445, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(&v446, "targetString");
    std::string::basic_string[abi:ne180100]<0>(v447, "common_LocalisedString");
    std::string::basic_string[abi:ne180100]<0>(&v448, "locale");
    std::string::basic_string[abi:ne180100]<0>(v449, "common_Locale");
    long long v359 = 0uLL;
    uint64_t v360 = 0;
    v433 = &v359;
    LOBYTE(v434) = 0;
    *(void *)&long long v359 = operator new(0x90uLL);
    *((void *)&v359 + 1) = v359;
    uint64_t v360 = v359 + 144;
    *((void *)&v359 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v360, (uint64_t)&v444, (uint64_t)v450, v359);
    std::string::basic_string[abi:ne180100]<0>(&v357, "name");
    long long v361 = v359;
    uint64_t v362 = v360;
    uint64_t v360 = 0;
    long long v359 = 0uLL;
    long long v363 = v357;
    uint64_t v364 = v358;
    long long v357 = 0uLL;
    uint64_t v358 = 0;
    std::string::basic_string[abi:ne180100]<0>(v404, "modified_TranslationTargetLocale");
    long long v405 = v361;
    uint64_t v406 = v362;
    uint64_t v362 = 0;
    long long v361 = 0uLL;
    long long v407 = v363;
    uint64_t v408 = v364;
    long long v363 = 0uLL;
    uint64_t v364 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v433, "target");
    std::string::basic_string[abi:ne180100]<0>(v436, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(&v437, "targetString");
    std::string::basic_string[abi:ne180100]<0>(v438, "common_LocalisedString");
    std::string::basic_string[abi:ne180100]<0>(&v439, "locale");
    std::string::basic_string[abi:ne180100]<0>(v441, "common_Locale");
    std::string::basic_string[abi:ne180100]<0>(&v442, "geographicArea");
    std::string::basic_string[abi:ne180100]<0>(v443, "common_GeographicArea");
    long long v351 = 0uLL;
    uint64_t v352 = 0;
    v424[0] = &v351;
    LOBYTE(v424[1]) = 0;
    *(void *)&long long v351 = operator new(0xC0uLL);
    *((void *)&v351 + 1) = v351;
    uint64_t v352 = v351 + 192;
    *((void *)&v351 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v352, (uint64_t)&v433, (uint64_t)&v444, v351);
    std::string::basic_string[abi:ne180100]<0>(&v349, "name");
    long long v353 = v351;
    uint64_t v354 = v352;
    uint64_t v352 = 0;
    long long v351 = 0uLL;
    long long v355 = v349;
    uint64_t v356 = v350;
    long long v349 = 0uLL;
    uint64_t v350 = 0;
    std::string::basic_string[abi:ne180100]<0>(v409, "modified_GeographicAreaName");
    long long v410 = v353;
    uint64_t v411 = v354;
    uint64_t v354 = 0;
    long long v353 = 0uLL;
    long long v412 = v355;
    uint64_t v413 = v356;
    long long v355 = 0uLL;
    uint64_t v356 = 0;
    std::string::basic_string[abi:ne180100]<0>(v424, "target");
    std::string::basic_string[abi:ne180100]<0>(v426, "common_Translation");
    std::string::basic_string[abi:ne180100]<0>(&v427, "targetString");
    std::string::basic_string[abi:ne180100]<0>(v428, "common_LocalisedString");
    std::string::basic_string[abi:ne180100]<0>(&v429, "locale");
    std::string::basic_string[abi:ne180100]<0>(v430, "common_Locale");
    std::string::basic_string[abi:ne180100]<0>(&v431, "geographicArea");
    std::string::basic_string[abi:ne180100]<0>(v432, "common_GeographicArea");
    long long v343 = 0uLL;
    uint64_t v344 = 0;
    *(void *)&long long v341 = &v343;
    BYTE8(v341) = 0;
    *(void *)&long long v343 = operator new(0xC0uLL);
    *((void *)&v343 + 1) = v343;
    uint64_t v344 = v343 + 192;
    *((void *)&v343 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v344, (uint64_t)v424, (uint64_t)&v433, v343);
    std::string::basic_string[abi:ne180100]<0>(&v341, "areaType");
    long long v345 = v343;
    uint64_t v346 = v344;
    uint64_t v344 = 0;
    long long v343 = 0uLL;
    long long v347 = v341;
    uint64_t v348 = v342;
    long long v341 = 0uLL;
    uint64_t v342 = 0;
    v159 = &v289;
    std::string::basic_string[abi:ne180100]<0>(v414, "modified_GeographicAreaType");
    uint64_t v160 = 0;
    uint64_t v416 = v346;
    uint64_t v418 = v348;
    long long v415 = v345;
    uint64_t v346 = 0;
    long long v345 = 0uLL;
    long long v417 = v347;
    long long v347 = 0uLL;
    uint64_t v348 = 0;
    long long v326 = 0u;
    long long v327 = 0u;
    v328[0] = 1.0;
    do
    {
      v161 = &buf + 3 * v160;
      unint64_t v162 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v327 + 8, (uint64_t)v161);
      unint64_t v163 = v162;
      unint64_t v164 = *((void *)&v326 + 1);
      if (*((void *)&v326 + 1))
      {
        uint8x8_t v165 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v326 + 8));
        v165.i16[0] = vaddlv_u8(v165);
        unint64_t v166 = v165.u32[0];
        if (v165.u32[0] > 1uLL)
        {
          v159 = (std::regex_traits<char> *)v162;
          if (v162 >= *((void *)&v326 + 1)) {
            v159 = (std::regex_traits<char> *)(v162 % *((void *)&v326 + 1));
          }
        }
        else
        {
          v159 = (std::regex_traits<char> *)((*((void *)&v326 + 1) - 1) & v162);
        }
        uint64_t v167 = *(unsigned __int8 ***)(v326 + 8 * (void)v159);
        if (v167)
        {
          for (uint64_t k = *v167; k; uint64_t k = *(unsigned __int8 **)k)
          {
            unint64_t v169 = *((void *)k + 1);
            if (v169 == v163)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v328, k + 16, (unsigned __int8 *)&buf + 72 * v160))goto LABEL_290; {
            }
              }
            else
            {
              if (v166 > 1)
              {
                if (v169 >= v164) {
                  v169 %= v164;
                }
              }
              else
              {
                v169 &= v164 - 1;
              }
              if ((std::regex_traits<char> *)v169 != v159) {
                break;
              }
            }
          }
        }
      }
      v170 = (char *)operator new(0x58uLL);
      v171 = v170;
      v389 = v170;
      v390 = &v327;
      char v391 = 0;
      *(void *)v170 = 0;
      *((void *)v170 + 1) = v163;
      if (SHIBYTE(v161->__col_) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v170 + 16), (const std::string::value_type *)v161->__loc_.__locale_, (std::string::size_type)v161->__ct_);
      }
      else
      {
        *((_OWORD *)v170 + 1) = *(_OWORD *)&v161->__loc_.__locale_;
        *((void *)v170 + 4) = v161->__col_;
      }
      v171[5] = 0;
      v171[6] = 0;
      v171[7] = 0;
      std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(v171 + 5, *((void *)&buf + 9 * v160 + 3), *(void *)&v394[72 * v160 + 8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v394[72 * v160 + 8] - *((void *)&buf + 9 * v160 + 3)) >> 4));
      v172 = (std::string *)(v171 + 8);
      v173 = (const std::string::value_type **)&v395[72 * v160];
      if (SHIBYTE(v161[2].__col_) < 0)
      {
        std::string::__init_copy_ctor_external(v172, *v173, *(void *)&v395[72 * v160 + 8]);
      }
      else
      {
        *(_OWORD *)&v172->__r_.__value_.__l.__data_ = *(_OWORD *)v173;
        v171[10] = *(void *)&v395[72 * v160 + 16];
      }
      char v391 = 1;
      float v174 = (float)(unint64_t)(*((void *)&v327 + 1) + 1);
      if (!v164 || (float)(v328[0] * (float)v164) < v174)
      {
        BOOL v175 = (v164 & (v164 - 1)) != 0;
        if (v164 < 3) {
          BOOL v175 = 1;
        }
        unint64_t v176 = v175 | (2 * v164);
        unint64_t v177 = vcvtps_u32_f32(v174 / v328[0]);
        if (v176 <= v177) {
          int8x8_t prime = (int8x8_t)v177;
        }
        else {
          int8x8_t prime = (int8x8_t)v176;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v164 = *((void *)&v326 + 1);
        if (*(void *)&prime <= *((void *)&v326 + 1))
        {
          if (*(void *)&prime < *((void *)&v326 + 1))
          {
            unint64_t v185 = vcvtps_u32_f32((float)*((unint64_t *)&v327 + 1) / v328[0]);
            if (*((void *)&v326 + 1) < 3uLL
              || (uint8x8_t v186 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v326 + 8)),
                  v186.i16[0] = vaddlv_u8(v186),
                  v186.u32[0] > 1uLL))
            {
              unint64_t v185 = std::__next_prime(v185);
            }
            else
            {
              uint64_t v187 = 1 << -(char)__clz(v185 - 1);
              if (v185 >= 2) {
                unint64_t v185 = v187;
              }
            }
            if (*(void *)&prime <= v185) {
              int8x8_t prime = (int8x8_t)v185;
            }
            if (*(void *)&prime >= v164)
            {
              unint64_t v164 = *((void *)&v326 + 1);
            }
            else
            {
              if (prime) {
                goto LABEL_246;
              }
              v193 = (void *)v326;
              *(void *)&long long v326 = 0;
              if (v193) {
                operator delete(v193);
              }
              unint64_t v164 = 0;
              *((void *)&v326 + 1) = 0;
            }
          }
        }
        else
        {
LABEL_246:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v179 = operator new(8 * *(void *)&prime);
          v180 = (void *)v326;
          *(void *)&long long v326 = v179;
          if (v180) {
            operator delete(v180);
          }
          uint64_t v181 = 0;
          *((int8x8_t *)&v326 + 1) = prime;
          do
            *(void *)(v326 + 8 * v181++) = 0;
          while (*(void *)&prime != v181);
          unint64_t v182 = (void **)v327;
          if ((void)v327)
          {
            unint64_t v183 = *(void *)(v327 + 8);
            uint8x8_t v184 = (uint8x8_t)vcnt_s8(prime);
            v184.i16[0] = vaddlv_u8(v184);
            if (v184.u32[0] > 1uLL)
            {
              if (v183 >= *(void *)&prime) {
                v183 %= *(void *)&prime;
              }
            }
            else
            {
              v183 &= *(void *)&prime - 1;
            }
            *(void *)(v326 + 8 * v183) = &v327;
            for (m = *v182; m; unint64_t v183 = v189)
            {
              unint64_t v189 = m[1];
              if (v184.u32[0] > 1uLL)
              {
                if (v189 >= *(void *)&prime) {
                  v189 %= *(void *)&prime;
                }
              }
              else
              {
                v189 &= *(void *)&prime - 1;
              }
              if (v189 != v183)
              {
                if (!*(void *)(v326 + 8 * v189))
                {
                  *(void *)(v326 + 8 * v189) = v182;
                  goto LABEL_271;
                }
                *unint64_t v182 = (void *)*m;
                void *m = **(void **)(v326 + 8 * v189);
                **(void **)(v326 + 8 * v189) = m;
                m = v182;
              }
              unint64_t v189 = v183;
LABEL_271:
              unint64_t v182 = (void **)m;
              m = (void *)*m;
            }
          }
          unint64_t v164 = (unint64_t)prime;
        }
        if ((v164 & (v164 - 1)) != 0)
        {
          if (v163 >= v164) {
            v159 = (std::regex_traits<char> *)(v163 % v164);
          }
          else {
            v159 = (std::regex_traits<char> *)v163;
          }
        }
        else
        {
          v159 = (std::regex_traits<char> *)((v164 - 1) & v163);
        }
      }
      v190 = *(void **)(v326 + 8 * (void)v159);
      v191 = v389;
      if (v190)
      {
        void *v389 = *v190;
LABEL_288:
        void *v190 = v191;
        goto LABEL_289;
      }
      void *v389 = v327;
      *(void *)&long long v327 = v191;
      *(void *)(v326 + 8 * (void)v159) = &v327;
      if (*v191)
      {
        unint64_t v192 = *(void *)(*v191 + 8);
        if ((v164 & (v164 - 1)) != 0)
        {
          if (v192 >= v164) {
            v192 %= v164;
          }
        }
        else
        {
          v192 &= v164 - 1;
        }
        v190 = (void *)(v326 + 8 * v192);
        goto LABEL_288;
      }
LABEL_289:
      v389 = 0;
      ++*((void *)&v327 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v389);
LABEL_290:
      ++v160;
    }
    while (v160 != 6);
    uint64_t v194 = 432;
    do
    {
      v195 = (void **)((char *)&buf.__loc_.__locale_ + v194);
      if (*((char *)&buf + v194 - 1) < 0) {
        operator delete(*(v195 - 3));
      }
      v392 = v195 - 6;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v392);
      if (*((char *)v195 - 49) < 0) {
        operator delete(*(v195 - 9));
      }
      v194 -= 72;
    }
    while (v194);
    if (SHIBYTE(v348) < 0) {
      operator delete((void *)v347);
    }
    v392 = (void **)&v345;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v392);
    if (SHIBYTE(v342) < 0) {
      operator delete((void *)v341);
    }
    *(void *)&long long v341 = &v343;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
    for (uint64_t n = 0; n != -24; n -= 6)
    {
      v197 = &v424[n];
      if (SHIBYTE(v432[n + 2]) < 0) {
        operator delete(v197[21]);
      }
      if (*((char *)v197 + 167) < 0) {
        operator delete(v197[18]);
      }
    }
    if (SHIBYTE(v356) < 0) {
      operator delete((void *)v355);
    }
    v424[0] = &v353;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v424);
    if (SHIBYTE(v350) < 0) {
      operator delete((void *)v349);
    }
    v424[0] = &v351;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v424);
    for (iuint64_t i = 0; ii != -24; ii -= 6)
    {
      v199 = (void **)((char *)&v433 + ii * 8);
      if (SHIBYTE(v443[ii + 2]) < 0) {
        operator delete(v199[21]);
      }
      if (*((char *)v199 + 167) < 0) {
        operator delete(v199[18]);
      }
    }
    if (SHIBYTE(v364) < 0) {
      operator delete((void *)v363);
    }
    v433 = &v361;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    if (SHIBYTE(v358) < 0) {
      operator delete((void *)v357);
    }
    v433 = &v359;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    for (junint64_t j = 0; jj != -18; jj -= 6)
    {
      v201 = (void **)((char *)v445 + jj * 8 + 8);
      if (SHIBYTE(v449[jj + 2]) < 0) {
        operator delete(v201[15]);
      }
      if (*((char *)v201 + 119) < 0) {
        operator delete(v201[12]);
      }
    }
    if (SHIBYTE(v372) < 0) {
      operator delete((void *)v371);
    }
    v433 = &v369;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    if (SHIBYTE(v366) < 0) {
      operator delete((void *)v365);
    }
    v433 = &v367;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    for (kuint64_t k = 0; kk != -12; kk -= 6)
    {
      v203 = &v450[kk];
      if (SHIBYTE(v453[kk + 2]) < 0) {
        operator delete(v203[9]);
      }
      if (*((char *)v203 + 71) < 0) {
        operator delete(v203[6]);
      }
    }
    if (SHIBYTE(v380) < 0) {
      operator delete((void *)v379);
    }
    v433 = &v377;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    if (SHIBYTE(v374) < 0) {
      operator delete((void *)v373);
    }
    v433 = &v375;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    for (uint64_t mm = 0; mm != -12; mm -= 6)
    {
      v205 = &v454[mm];
      if (SHIBYTE(v457[mm + 2]) < 0) {
        operator delete(v205[9]);
      }
      if (*((char *)v205 + 71) < 0) {
        operator delete(v205[6]);
      }
    }
    if (SHIBYTE(v388) < 0) {
      operator delete((void *)v387);
    }
    v433 = &v385;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    if (SHIBYTE(v382) < 0) {
      operator delete((void *)v381);
    }
    v433 = &v383;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    for (nuint64_t n = 0; nn != -18; nn -= 6)
    {
      v207 = (void **)((char *)&v458.__r_.__value_.__l.__data_ + nn * 8);
      if (SHIBYTE(v463[nn + 2]) < 0) {
        operator delete(v207[15]);
      }
      if (*((char *)v207 + 119) < 0) {
        operator delete(v207[12]);
      }
    }
    nlv4_inference_orchestrator::trees::TreeDecompressor::decompress((nlv4_inference_orchestrator::trees::TreeDecompressor *)&v326, (nlv4_inference_orchestrator::trees::TreeNode *)v273);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>>>::~__hash_table((uint64_t)&v326);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v331[2]);
    v208 = v331[0];
    v331[0] = 0;
    if (v208) {
      operator delete(v208);
    }
    if (v330 < 0) {
      operator delete(v329[0]);
    }
    buf.__loc_.__locale_ = (std::locale::__imp *)v332;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (v340 < 0) {
      operator delete(v339);
    }
    if (v338 < 0) {
      operator delete(v337);
    }
    if (v336 < 0) {
      operator delete(v335);
    }
    if (v334 < 0) {
      operator delete(v333[0]);
    }
    LODWORD(buf.__loc_.__locale_) = *((_DWORD *)v283 + 8 * spid);
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)&buf.__ct_, (const nlv4_inference_orchestrator::trees::TreeNode *)v273);
    v209 = (char *)v280;
    if ((unint64_t)v280 >= v281)
    {
      v215 = v279;
      unint64_t v216 = 0x86BCA1AF286BCA1BLL * (((unsigned char *)v280 - v279) >> 3);
      unint64_t v217 = v216 + 1;
      if (v216 + 1 > 0x1AF286BCA1AF286) {
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      }
      if (0xD79435E50D79436 * ((uint64_t)(v281 - (void)v279) >> 3) > v217) {
        unint64_t v217 = 0xD79435E50D79436 * ((uint64_t)(v281 - (void)v279) >> 3);
      }
      if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v281 - (void)v279) >> 3) >= 0xD79435E50D7943) {
        unint64_t v218 = 0x1AF286BCA1AF286;
      }
      else {
        unint64_t v218 = v217;
      }
      if (v218)
      {
        if (v218 > 0x1AF286BCA1AF286) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v219 = (char *)operator new(152 * v218);
      }
      else
      {
        v219 = 0;
      }
      v220 = &v219[152 * v216];
      *(_DWORD *)v220 = buf.__loc_.__locale_;
      *(_OWORD *)(v220 + 8) = *(_OWORD *)&buf.__ct_;
      *((void *)v220 + 3) = *(void *)v394;
      buf.__ct_ = 0;
      buf.__col_ = 0;
      *(void *)v394 = 0;
      *((_OWORD *)v220 + 2) = *(_OWORD *)&v394[8];
      *((void *)v220 + 6) = *(void *)v395;
      *(void *)&v394[8] = 0;
      *(void *)&v394[16] = 0;
      *(void *)v395 = 0;
      long long v221 = *(_OWORD *)&v395[8];
      *((void *)v220 + 9) = v396;
      *(_OWORD *)(v220 + 56) = v221;
      *(void *)&v395[8] = 0;
      *(void *)&v395[16] = 0;
      uint64_t v396 = 0;
      long long v222 = v397;
      *((void *)v220 + 14) = 0;
      long long v223 = v398;
      *((_OWORD *)v220 + 5) = v222;
      *((_OWORD *)v220 + 6) = v223;
      *((void *)v220 + 14) = *(void *)v399;
      long long v398 = 0uLL;
      *(void *)v399 = 0;
      long long v224 = *(_OWORD *)&v399[8];
      *(_OWORD *)(v220 + 136) = *(_OWORD *)&v399[24];
      v214 = v220 + 152;
      *(_OWORD *)(v220 + 120) = v224;
      if (v209 == v215)
      {
        v279 = v220;
        v280 = v220 + 152;
        unint64_t v281 = (unint64_t)&v219[152 * v218];
        if (!v209) {
          goto LABEL_398;
        }
      }
      else
      {
        uint64_t v225 = 0;
        do
        {
          v226 = &v209[v225];
          v227 = &v220[v225];
          *((_DWORD *)v227 - 38) = *(_DWORD *)&v209[v225 - 152];
          long long v228 = *(_OWORD *)&v209[v225 - 144];
          *((void *)v227 - 16) = *(void *)&v209[v225 - 128];
          *((_OWORD *)v227 - 9) = v228;
          *((void *)v226 - 17) = 0;
          *((void *)v226 - 16) = 0;
          *((void *)v226 - 18) = 0;
          long long v229 = *(_OWORD *)&v209[v225 - 120];
          *((void *)v227 - 13) = *(void *)&v209[v225 - 104];
          *(_OWORD *)(v227 - 120) = v229;
          *((void *)v226 - 14) = 0;
          *((void *)v226 - 13) = 0;
          long long v230 = *(_OWORD *)&v209[v225 - 96];
          uint64_t v231 = *(void *)&v209[v225 - 80];
          *((void *)v226 - 15) = 0;
          *((void *)v227 - 10) = v231;
          *((_OWORD *)v227 - 6) = v230;
          *((void *)v226 - 11) = 0;
          *((void *)v226 - 10) = 0;
          long long v232 = *(_OWORD *)&v209[v225 - 72];
          *((void *)v226 - 12) = 0;
          *(_OWORD *)(v227 - 72) = v232;
          *((void *)v227 - 6) = 0;
          *((void *)v227 - 5) = 0;
          *((void *)v227 - 7) = 0;
          *(_OWORD *)(v227 - 56) = *(_OWORD *)&v209[v225 - 56];
          *((void *)v227 - 5) = *(void *)&v209[v225 - 40];
          *((void *)v226 - 7) = 0;
          *((void *)v226 - 6) = 0;
          *((void *)v226 - 5) = 0;
          long long v233 = *(_OWORD *)&v209[v225 - 16];
          *((_OWORD *)v227 - 2) = *(_OWORD *)&v209[v225 - 32];
          *((_OWORD *)v227 - 1) = v233;
          v225 -= 152;
        }
        while (&v209[v225] != v215);
        v234 = v279;
        v209 = (char *)v280;
        v279 = &v220[v225];
        v280 = v220 + 152;
        unint64_t v281 = (unint64_t)&v219[152 * v218];
        if (v209 != v234)
        {
          do
          {
            v209 -= 152;
            std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100]((uint64_t)v209);
          }
          while (v209 != v234);
          v209 = v234;
        }
        if (!v209) {
          goto LABEL_398;
        }
      }
      operator delete(v209);
    }
    else
    {
      *(_DWORD *)v280 = buf.__loc_.__locale_;
      long long v210 = *(_OWORD *)&buf.__ct_;
      *((void *)v209 + 3) = *(void *)v394;
      *(_OWORD *)(v209 + 8) = v210;
      buf.__col_ = 0;
      *(void *)v394 = 0;
      buf.__ct_ = 0;
      uint64_t v211 = *(void *)v395;
      *((_OWORD *)v209 + 2) = *(_OWORD *)&v394[8];
      *((void *)v209 + 6) = v211;
      *(void *)&v394[16] = 0;
      *(void *)v395 = 0;
      *(void *)&v394[8] = 0;
      long long v212 = *(_OWORD *)&v395[8];
      *((void *)v209 + 9) = v396;
      *(_OWORD *)(v209 + 56) = v212;
      *(void *)&v395[16] = 0;
      uint64_t v396 = 0;
      *(void *)&v395[8] = 0;
      *((_OWORD *)v209 + 5) = v397;
      *((void *)v209 + 12) = 0;
      *((void *)v209 + 13) = 0;
      *((void *)v209 + 14) = 0;
      *((_OWORD *)v209 + 6) = v398;
      *((void *)v209 + 14) = *(void *)v399;
      long long v398 = 0uLL;
      *(void *)v399 = 0;
      long long v213 = *(_OWORD *)&v399[8];
      *(_OWORD *)(v209 + 136) = *(_OWORD *)&v399[24];
      *(_OWORD *)(v209 + 120) = v213;
      v214 = v209 + 152;
    }
LABEL_398:
    v280 = v214;
    v433 = &v398;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    if (SHIBYTE(v396) < 0) {
      operator delete(*(void **)&v395[8]);
    }
    if ((v395[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v394[8]);
    }
    if ((v394[7] & 0x80000000) != 0) {
      operator delete((void *)buf.__ct_);
    }
    nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logModelOutput(v235, (const nlv4_inference_orchestrator::trees::TreeNode *)v273, (uint64_t *)v266, spid);
    buf.__loc_.__locale_ = (std::locale::__imp *)v278;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v277) < 0) {
      operator delete(v276[0]);
    }
    if (SHIBYTE(v275) < 0) {
      operator delete(v274[1]);
    }
    if (SHIBYTE(v274[0]) < 0) {
      operator delete(v273[0]);
    }
    uint64_t v153 = spid + 1;
    uint64_t v152 = (char *)v283;
    if (spid + 1 >= (unint64_t)(((char *)v284 - (unsigned char *)v283) >> 5)) {
      goto LABEL_415;
    }
  }
}