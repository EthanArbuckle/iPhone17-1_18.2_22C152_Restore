void *mlx::core::arange(void *a1, int ***a2, double a3, double a4)
{
  mlx::core::scheduler *v7;
  void *result;
  int **v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  int *v16;
  int v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  unsigned int v23;
  unsigned int *v24;
  int *v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  void *exception;
  void v31[5];

  v31[4] = *MEMORY[0x263EF8340];
  if (a1[1] != *a1) {
    mlx::core::arange();
  }
  v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (void)(*a2)[6]));
  v31[0] = &unk_27062AEC8;
  v31[1] = mlx::core::allocator::free;
  v31[3] = v31;
  mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)v31);
  result = std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v31);
  v9 = *a2;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x25A2B1470](exception, "Bool type unsupported for arange.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 1:
      v10 = v9[6];
      if (v10)
      {
        v11 = (int)a3;
        v12 = v9[19];
        do
        {
          *(unsigned char *)v12 = v11;
          v12 = (int *)((char *)v12 + 1);
          v11 += (int)(a3 + a4) - (int)a3;
          v10 = (int *)((char *)v10 - 1);
        }
        while (v10);
      }
      break;
    case 2:
      v22 = v9[6];
      if (v22)
      {
        v23 = a3;
        v24 = (unsigned int *)v9[19];
        do
        {
          *v24++ = v23;
          v23 += (a3 + a4) - a3;
          v22 = (int *)((char *)v22 - 1);
        }
        while (v22);
      }
      break;
    case 3:
      v19 = v9[6];
      if (v19)
      {
        v20 = (int)a3;
        v21 = v9[19];
        do
        {
          *(unsigned char *)v21 = v20;
          v21 = (int *)((char *)v21 + 1);
          v20 += (int)(a3 + a4) - (int)a3;
          v19 = (int *)((char *)v19 - 1);
        }
        while (v19);
      }
      break;
    case 4:
      v16 = v9[6];
      if (v16)
      {
        v17 = (int)a3;
        v18 = v9[19];
        do
        {
          *v18++ = v17;
          v17 += (int)(a3 + a4) - (int)a3;
          v16 = (int *)((char *)v16 - 1);
        }
        while (v16);
      }
      break;
    case 5:
      v13 = v9[6];
      if (v13)
      {
        v14 = (uint64_t)a3;
        v15 = (uint64_t *)v9[19];
        do
        {
          *v15++ = v14;
          v14 += (uint64_t)(a3 + a4) - (uint64_t)a3;
          v13 = (int *)((char *)v13 - 1);
        }
        while (v13);
      }
      break;
    case 6:
      v25 = v9[6];
      if (v25)
      {
        v26 = a3;
        v27 = a3 + a4;
        v28 = (float *)v9[19];
        v29 = v27 - v26;
        do
        {
          *v28++ = v26;
          v26 = v29 + v26;
          v25 = (int *)((char *)v25 - 1);
        }
        while (v25);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256D67258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void mlx::core::Abs::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  v3 = *(const mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Abs::eval();
  }
  v125 = *(void **)(*(void *)v3 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v125, &mlx::core::unsignedinteger))
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
  }
  else
  {
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)(*(void *)a3 + 56);
    switch((int)v7)
    {
      case 0:
        v8 = *(char **)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          uint64_t v113 = *(void *)(*(void *)v3 + 160);
          if (v113)
          {
            v114 = *(unsigned char **)(*(void *)a3 + 152);
            do
            {
              char v115 = *v8++;
              *v114++ = v115;
              --v113;
            }
            while (v113);
          }
        }
        else
        {
          v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          uint64_t v10 = *(void *)a3;
          uint64_t v11 = *(void *)(*(void *)a3 + 48);
          if (v11)
          {
            uint64_t v12 = 0;
            uint64_t v13 = *(void *)(v10 + 152);
            v14 = *(uint64_t **)v3;
            uint64_t v15 = *v14;
            uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
            do
            {
              uint64_t v17 = 0;
              if ((v16 & 0x80000000) == 0)
              {
                uint64_t v18 = v14[3];
                uint64_t v19 = v16;
                int quot = v12;
                do
                {
                  ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
                  int quot = v21.quot;
                  v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
                }
                while (v19 != -1);
              }
              *(unsigned char *)(v13 + v12++) = v8[(int)v17];
            }
            while (v12 != v11);
          }
        }
        break;
      case 1:
        uint64_t v63 = *(void *)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v116 = 0;
            uint64_t v117 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v117 + v116) = *(unsigned char *)(v63 + v116);
              ++v116;
            }
            while (v116 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          v64 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v64, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v65 = 0;
            uint64_t v66 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v67 = **(void **)v3;
              unint64_t v68 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v67) >> 2;
              uint64_t v69 = 0;
              uint64_t v70 = (v68 - 1);
              if ((int)v68 - 1 >= 0)
              {
                uint64_t v71 = *(void *)(*(void *)v3 + 24);
                int v72 = v65;
                do
                {
                  ldiv_t v73 = ldiv(v72, *(int *)(v67 + 4 * v70));
                  int v72 = v73.quot;
                  v69 += *(void *)(v71 + 8 * v70--) * v73.rem;
                }
                while (v70 != -1);
              }
              *(unsigned char *)(v66 + v65++) = *(unsigned char *)(v63 + (int)v69);
            }
            while (v65 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 2:
        v37 = *(int **)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          uint64_t v107 = *(void *)(*(void *)v3 + 160);
          if (v107)
          {
            v108 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v109 = *v37++;
              *v108++ = v109;
              --v107;
            }
            while (v107);
          }
        }
        else
        {
          v38 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v38, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          uint64_t v39 = *(void *)a3;
          uint64_t v40 = *(void *)(*(void *)a3 + 48);
          if (v40)
          {
            uint64_t v41 = 0;
            uint64_t v42 = *(void *)(v39 + 152);
            v43 = *(uint64_t **)v3;
            uint64_t v44 = *v43;
            uint64_t v45 = ((unint64_t)(v43[1] - *v43) >> 2) - 1;
            do
            {
              uint64_t v46 = 0;
              if ((v45 & 0x80000000) == 0)
              {
                uint64_t v47 = v43[3];
                uint64_t v48 = v45;
                int v49 = v41;
                do
                {
                  ldiv_t v50 = ldiv(v49, *(int *)(v44 + 4 * v48));
                  int v49 = v50.quot;
                  v46 += *(void *)(v47 + 8 * v48--) * v50.rem;
                }
                while (v48 != -1);
              }
              *(_DWORD *)(v42 + 4 * v41++) = v37[(int)v46];
            }
            while (v41 != v40);
          }
        }
        break;
      case 3:
        uint64_t v51 = *(void *)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v110 = 0;
            uint64_t v111 = *(void *)(*(void *)a3 + 152);
            do
            {
              int v112 = *(char *)(v51 + v110);
              if (v112 < 0) {
                int v112 = -v112;
              }
              *(unsigned char *)(v111 + v110++) = v112;
            }
            while (v110 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          v52 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v52, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v53 = 0;
            uint64_t v54 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v55 = **(void **)v3;
              unint64_t v56 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v55) >> 2;
              uint64_t v57 = 0;
              uint64_t v58 = (v56 - 1);
              if ((int)v56 - 1 >= 0)
              {
                uint64_t v59 = *(void *)(*(void *)v3 + 24);
                int v60 = v53;
                do
                {
                  ldiv_t v61 = ldiv(v60, *(int *)(v55 + 4 * v58));
                  int v60 = v61.quot;
                  v57 += *(void *)(v59 + 8 * v58--) * v61.rem;
                }
                while (v58 != -1);
              }
              int v62 = *(char *)(v51 + (int)v57);
              if (v62 < 0) {
                int v62 = -v62;
              }
              *(unsigned char *)(v54 + v53++) = v62;
            }
            while (v53 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 4:
        v22 = *(int **)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          uint64_t v103 = *(void *)(*(void *)v3 + 160);
          if (v103)
          {
            v104 = *(int **)(*(void *)a3 + 152);
            do
            {
              int v106 = *v22++;
              int v105 = v106;
              if (v106 < 0) {
                int v105 = -v105;
              }
              *v104++ = v105;
              --v103;
            }
            while (v103);
          }
        }
        else
        {
          v23 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v23, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          uint64_t v24 = *(void *)a3;
          uint64_t v25 = *(void *)(*(void *)a3 + 48);
          if (v25)
          {
            uint64_t v26 = 0;
            uint64_t v27 = *(void *)(v24 + 152);
            v28 = *(uint64_t **)v3;
            uint64_t v29 = *v28;
            uint64_t v30 = ((unint64_t)(v28[1] - *v28) >> 2) - 1;
            do
            {
              uint64_t v31 = 0;
              if ((v30 & 0x80000000) == 0)
              {
                uint64_t v32 = v28[3];
                uint64_t v33 = v30;
                int v34 = v26;
                do
                {
                  ldiv_t v35 = ldiv(v34, *(int *)(v29 + 4 * v33));
                  int v34 = v35.quot;
                  v31 += *(void *)(v32 + 8 * v33--) * v35.rem;
                }
                while (v33 != -1);
              }
              int v36 = v22[(int)v31];
              if (v36 < 0) {
                int v36 = -v36;
              }
              *(_DWORD *)(v27 + 4 * v26++) = v36;
            }
            while (v26 != v25);
          }
        }
        break;
      case 5:
        v74 = *(uint64_t **)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          uint64_t v118 = *(void *)(*(void *)v3 + 160);
          if (v118)
          {
            v119 = *(uint64_t **)(*(void *)a3 + 152);
            do
            {
              uint64_t v121 = *v74++;
              uint64_t v120 = v121;
              if (v121 < 0) {
                uint64_t v120 = -v120;
              }
              *v119++ = v120;
              --v118;
            }
            while (v118);
          }
        }
        else
        {
          v75 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v75, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          uint64_t v76 = *(void *)a3;
          uint64_t v77 = *(void *)(*(void *)a3 + 48);
          if (v77)
          {
            uint64_t v78 = 0;
            uint64_t v79 = *(void *)(v76 + 152);
            v80 = *(uint64_t **)v3;
            uint64_t v81 = *v80;
            uint64_t v82 = ((unint64_t)(v80[1] - *v80) >> 2) - 1;
            do
            {
              uint64_t v83 = 0;
              if ((v82 & 0x80000000) == 0)
              {
                uint64_t v84 = v80[3];
                uint64_t v85 = v82;
                int v86 = v78;
                do
                {
                  ldiv_t v87 = ldiv(v86, *(int *)(v81 + 4 * v85));
                  int v86 = v87.quot;
                  v83 += *(void *)(v84 + 8 * v85--) * v87.rem;
                }
                while (v85 != -1);
              }
              uint64_t v88 = v74[(int)v83];
              if (v88 < 0) {
                uint64_t v88 = -v88;
              }
              *(void *)(v79 + 8 * v78++) = v88;
            }
            while (v78 != v77);
          }
        }
        break;
      case 6:
        v89 = *(float **)(*(void *)v3 + 152);
        if (*(unsigned char *)(*(void *)v3 + 168))
        {
          uint64_t v122 = *(void *)(*(void *)v3 + 160);
          if (v122)
          {
            v123 = *(float **)(*(void *)a3 + 152);
            do
            {
              float v124 = *v89++;
              *v123++ = fabsf(v124);
              --v122;
            }
            while (v122);
          }
        }
        else
        {
          v90 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          v125 = &unk_27062AEC8;
          v126 = mlx::core::allocator::free;
          v127 = &v125;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v90, (uint64_t)&v125);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v125);
          uint64_t v91 = *(void *)a3;
          uint64_t v92 = *(void *)(*(void *)a3 + 48);
          if (v92)
          {
            uint64_t v93 = 0;
            uint64_t v94 = *(void *)(v91 + 152);
            v95 = *(uint64_t **)v3;
            uint64_t v96 = *v95;
            uint64_t v97 = ((unint64_t)(v95[1] - *v95) >> 2) - 1;
            do
            {
              uint64_t v98 = 0;
              if ((v97 & 0x80000000) == 0)
              {
                uint64_t v99 = v95[3];
                uint64_t v100 = v97;
                int v101 = v93;
                do
                {
                  ldiv_t v102 = ldiv(v101, *(int *)(v96 + 4 * v100));
                  int v101 = v102.quot;
                  v98 += *(void *)(v99 + 8 * v100--) * v102.rem;
                }
                while (v100 != -1);
              }
              *(float *)(v94 + 4 * v93++) = fabsf(v89[(int)v98]);
            }
            while (v93 != v92);
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_256D67B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *mlx::core::Arange::eval(uint64_t a1, void *a2, int ***a3)
{
  return mlx::core::arange(a2, a3, *(double *)(a1 + 24), *(double *)(a1 + 40));
}

void mlx::core::ArcCos::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCos::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arccos] Cannot compute inverse cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = acosf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = acosf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D67E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

void mlx::core::ArcCosh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCosh::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arccosh] Cannot compute inverse hyperbolic cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = acoshf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = acoshf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D681CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::ArcSin::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSin::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arcsin] Cannot compute inverse sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = asinf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = asinf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D684DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::ArcSinh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSinh::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arcsinh] Cannot compute inverse hyperbolic sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = asinhf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = asinhf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D687EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::ArcTan::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTan::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arctan] Cannot compute inverse tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = atanf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = atanf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D68AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::ArcTanh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTanh::eval();
  }
  v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arctanh] Cannot compute inverse hyperbolic tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = atanhf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = atanhf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D68E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t mlx::core::AsType::eval(int a1, uint64_t a2, int ***this, float a4)
{
  v4 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::AsType::eval();
  }
  if (*(unsigned char *)(*(void *)v4 + 168)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  return mlx::core::copy(v4, this, v5, a4);
}

float mlx::core::Ceil::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Ceil::eval();
  }
  v28 = *(void **)(*(void *)v3 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    uint64_t v6 = *(void *)(*(void *)a3 + 56);
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
      v27[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v25, v27);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
      MEMORY[0x25A2B1480](exception, v27);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v22 = *(void *)(*(void *)v3 + 160);
      if (v22)
      {
        float v23 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v24 = *v7++;
          float result = ceilf(v24);
          *v23++ = result;
          --v22;
        }
        while (v22);
      }
    }
    else
    {
      v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
      v28 = &unk_27062AEC8;
      v29[0] = mlx::core::allocator::free;
      v29[2] = &v28;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
      uint64_t v10 = *(void *)a3;
      uint64_t v11 = *(void *)(*(void *)a3 + 48);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(v10 + 152);
        uint64_t v14 = *(uint64_t **)v3;
        uint64_t v15 = *v14;
        uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
        do
        {
          uint64_t v17 = 0;
          if ((v16 & 0x80000000) == 0)
          {
            uint64_t v18 = v14[3];
            uint64_t v19 = v16;
            int quot = v12;
            do
            {
              ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
              int quot = v21.quot;
              v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
            }
            while (v19 != -1);
          }
          float result = ceilf(v7[(int)v17]);
          *(float *)(v13 + 4 * v12++) = result;
        }
        while (v12 != v11);
      }
    }
  }
  else
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
  }
  return result;
}

void sub_256D69144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Concatenate::eval(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  v45[4] = *MEMORY[0x263EF8340];
  v43 = 0;
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v43, 1uLL);
  *(_DWORD *)uint64_t v6 = 0;
  v8 = v6 + 4;
  __p = v6;
  v43 = &v6[4 * v7];
  uint64_t v42 = v6 + 4;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      int v11 = mlx::core::array::shape(v9, *(_DWORD *)(a1 + 20));
      int v12 = v11;
      uint64_t v13 = v42;
      if (v42 >= v43)
      {
        uint64_t v14 = (char *)__p;
        uint64_t v15 = (v42 - (unsigned char *)__p) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v43 - (unsigned char *)__p;
        if ((v43 - (unsigned char *)__p) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v43, v18);
          uint64_t v14 = (char *)__p;
          uint64_t v13 = v42;
        }
        else
        {
          uint64_t v19 = 0;
        }
        ldiv_t v20 = &v19[4 * v15];
        *(_DWORD *)ldiv_t v20 = v12;
        v8 = v20 + 4;
        while (v13 != v14)
        {
          int v21 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        __p = v20;
        uint64_t v42 = v8;
        v43 = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v42 = v11;
        v8 = v13 + 4;
      }
      uint64_t v42 = v8;
      uint64_t v9 = (mlx::core::array *)((char *)v9 + 16);
    }
    while (v9 != v10);
  }
  uint64_t v22 = (char *)__p + 4;
  if (__p != v8 && v22 != v8)
  {
    int v24 = *(_DWORD *)__p;
    do
    {
      v24 += *(_DWORD *)v22;
      *(_DWORD *)uint64_t v22 = v24;
      v22 += 4;
    }
    while (v22 != v8);
  }
  uint64_t v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]));
  v45[0] = &unk_27062AEC8;
  v45[1] = mlx::core::allocator::free;
  v45[3] = v45;
  mlx::core::array::set_data(a3, (uint64_t)v25, (uint64_t)v45);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v45);
  uint64_t v26 = *a3;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  v38 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v38, v26[3], (uint64_t)v26[4], ((char *)v26[4] - (char *)v26[3]) >> 3);
  uint64_t v27 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    char v30 = (_BYTE)(*a3)[21] & 0xF8;
    do
    {
      uint64_t v31 = *(void *)((char *)v27 + v28);
      memset(v36, 0, sizeof(v36));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v36, *(const void **)v31, *(void *)(v31 + 8), (uint64_t)(*(void *)(v31 + 8) - *(void *)v31) >> 2);
      uint64_t v32 = (uint64_t)(*a3)[7];
      long long v35 = 0uLL;
      uint64_t v34 = 0;
      long long v33 = 0uLL;
      mlx::core::array::array(v37, (long long *)v36, v32, &v35, &v33);
      uint64_t v44 = (void **)&v33;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
      if (*((void *)&v35 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
      }
      if (v36[0])
      {
        v36[1] = v36[0];
        operator delete(v36[0]);
      }
      mlx::core::array::copy_shared_buffer(v37, (uint64_t)a3, (uint64_t)&v38, v30, *(void *)(v37[0] + 48), *((void *)v38 + *(int *)(a1 + 20)) * *((int *)__p + v29));
      mlx::core::copy_inplace((char *)*a2 + v28, v37, 3);
      mlx::core::array::~array((mlx::core::array *)v37);
      ++v29;
      uint64_t v27 = *a2;
      v28 += 16;
    }
    while (v29 < (a2[1] - *a2) >> 4);
  }
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (__p)
  {
    uint64_t v42 = (char *)__p;
    operator delete(__p);
  }
}

void sub_256D6951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::array::shape(mlx::core::array *this, int a2)
{
  v2 = *(void **)this;
  unint64_t v3 = (uint64_t)(v2[1] - *v2) >> 2;
  unint64_t v4 = a2;
  if (a2 < 0) {
    unint64_t v4 = v3 + a2;
  }
  if (v3 <= v4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned int *)(*v2 + 4 * v4);
}

void mlx::core::Cos::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cos::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[cos] Cannot compute cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      uint64_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = cosf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = cosf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D69894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Cosh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cosh::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[cosh] Cannot compute hyperbolic cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      uint64_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = coshf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = coshf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D69BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Erf::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Erf::eval();
  }
  uint64_t v5 = *(void *)(*(void *)a3 + 56);
  if (v5 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[erf] Error function only defined for arrays with real floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    if (*(void *)(*(void *)v3 + 160))
    {
      unint64_t v19 = 0;
      uint64_t v20 = *(void *)(*(void *)a3 + 152);
      do
      {
        v18.i32[0] = *(_DWORD *)(v6 + 4 * v19);
        *(float *)(v20 + 4 * v19++) = mlx::core::detail::Erf::operator()<float>(v18);
      }
      while (v19 < *(void *)(*(void *)v3 + 160));
    }
  }
  else
  {
    uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v5)));
    v22[0] = &unk_27062AEC8;
    v22[1] = mlx::core::allocator::free;
    v22[3] = v22;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v7, (uint64_t)v22);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v22);
    if (*(void *)(*(void *)a3 + 48))
    {
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(*(void *)a3 + 152);
      do
      {
        uint64_t v11 = **(void **)v3;
        unint64_t v12 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v11) >> 2;
        uint64_t v13 = 0;
        uint64_t v14 = (v12 - 1);
        if ((int)v12 - 1 >= 0)
        {
          uint64_t v15 = *(void *)(*(void *)v3 + 24);
          int quot = v9;
          do
          {
            ldiv_t v17 = ldiv(quot, *(int *)(v11 + 4 * v14));
            int quot = v17.quot;
            v13 += *(void *)(v15 + 8 * v14--) * v17.rem;
          }
          while (v14 != -1);
        }
        v8.i32[0] = *(_DWORD *)(v6 + 4 * (int)v13);
        *(float *)(v10 + 4 * v9++) = mlx::core::detail::Erf::operator()<float>(v8);
      }
      while (v9 < *(void *)(*(void *)a3 + 48));
    }
  }
}

void sub_256D69E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  v20[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ErfInv::eval();
  }
  uint64_t v5 = *(void *)(*(void *)a3 + 56);
  if (v5 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[erf_inv] Inverse error function only defined for arrays with real floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    if (*(void *)(*(void *)v3 + 160))
    {
      unint64_t v17 = 0;
      uint64_t v18 = *(void *)(*(void *)a3 + 152);
      do
      {
        *(float *)(v18 + 4 * v17) = mlx::core::detail::ErfInv::operator()<float>(*(float *)(v6 + 4 * v17));
        ++v17;
      }
      while (v17 < *(void *)(*(void *)v3 + 160));
    }
  }
  else
  {
    uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v5)));
    v20[0] = &unk_27062AEC8;
    v20[1] = mlx::core::allocator::free;
    v20[3] = v20;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v7, (uint64_t)v20);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v20);
    if (*(void *)(*(void *)a3 + 48))
    {
      unint64_t v8 = 0;
      uint64_t v9 = *(void *)(*(void *)a3 + 152);
      do
      {
        uint64_t v10 = **(void **)v3;
        unint64_t v11 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v10) >> 2;
        uint64_t v12 = 0;
        uint64_t v13 = (v11 - 1);
        if ((int)v11 - 1 >= 0)
        {
          uint64_t v14 = *(void *)(*(void *)v3 + 24);
          int quot = v8;
          do
          {
            ldiv_t v16 = ldiv(quot, *(int *)(v10 + 4 * v13));
            int quot = v16.quot;
            v12 += *(void *)(v14 + 8 * v13--) * v16.rem;
          }
          while (v13 != -1);
        }
        *(float *)(v9 + 4 * v8++) = mlx::core::detail::ErfInv::operator()<float>(*(float *)(v6 + 4 * (int)v12));
      }
      while (v8 < *(void *)(*(void *)a3 + 48));
    }
  }
}

void sub_256D6A05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v25[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Exp::eval();
  }
  int v24 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v24, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[exp] Cannot exponentiate elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"[unary_fp] Does not support ", 28);
    v23[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v21, v23);
    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, v23);
    MEMORY[0x25A2B1480](v22, v23);
    __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(void *)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    if (*(void *)(*(void *)v3 + 160))
    {
      unint64_t v18 = 0;
      uint64_t v19 = *(void *)(*(void *)a3 + 152);
      do
      {
        *(float *)(v19 + 4 * v18) = mlx::core::detail::Exp::operator()<float>(*(float *)(v7 + 4 * v18));
        ++v18;
      }
      while (v18 < *(void *)(*(void *)v3 + 160));
    }
  }
  else
  {
    unint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    int v24 = &unk_27062AEC8;
    v25[0] = mlx::core::allocator::free;
    v25[2] = &v24;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v24);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v24);
    if (*(void *)(*(void *)a3 + 48))
    {
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(*(void *)a3 + 152);
      do
      {
        uint64_t v11 = **(void **)v3;
        unint64_t v12 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v11) >> 2;
        uint64_t v13 = 0;
        uint64_t v14 = (v12 - 1);
        if ((int)v12 - 1 >= 0)
        {
          uint64_t v15 = *(void *)(*(void *)v3 + 24);
          int quot = v9;
          do
          {
            ldiv_t v17 = ldiv(quot, *(int *)(v11 + 4 * v14));
            int quot = v17.quot;
            v13 += *(void *)(v15 + 8 * v14--) * v17.rem;
          }
          while (v14 != -1);
        }
        *(float *)(v10 + 4 * v9++) = mlx::core::detail::Exp::operator()<float>(*(float *)(v7 + 4 * (int)v13));
      }
      while (v9 < *(void *)(*(void *)a3 + 48));
    }
  }
}

void sub_256D6A340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::Expm1::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Expm1::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[expm1] Cannot exponentiate elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      uint64_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = expm1f(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    unint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = expm1f(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D6A650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

float mlx::core::Floor::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Floor::eval();
  }
  uint64_t v28 = *(void **)(*(void *)v3 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    uint64_t v6 = *(void *)(*(void *)a3 + 56);
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
      v27[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v25, v27);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
      MEMORY[0x25A2B1480](exception, v27);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v22 = *(void *)(*(void *)v3 + 160);
      if (v22)
      {
        float v23 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v24 = *v7++;
          float result = floorf(v24);
          *v23++ = result;
          --v22;
        }
        while (v22);
      }
    }
    else
    {
      unint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
      uint64_t v28 = &unk_27062AEC8;
      v29[0] = mlx::core::allocator::free;
      v29[2] = &v28;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
      uint64_t v10 = *(void *)a3;
      uint64_t v11 = *(void *)(*(void *)a3 + 48);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(v10 + 152);
        uint64_t v14 = *(uint64_t **)v3;
        uint64_t v15 = *v14;
        uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
        do
        {
          uint64_t v17 = 0;
          if ((v16 & 0x80000000) == 0)
          {
            uint64_t v18 = v14[3];
            uint64_t v19 = v16;
            int quot = v12;
            do
            {
              ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
              int quot = v21.quot;
              v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
            }
            while (v19 != -1);
          }
          float result = floorf(v7[(int)v17]);
          *(float *)(v13 + 4 * v12++) = result;
        }
        while (v12 != v11);
      }
    }
  }
  else
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
  }
  return result;
}

void sub_256D6A934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t mlx::core::Full::eval(int a1, uint64_t a2, int ***this, float a4)
{
  unint64_t v4 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Full::eval();
  }
  uint64_t v5 = *(void *)v4;
  if (*(_DWORD *)(*(void *)v4 + 56) != *((_DWORD *)*this + 14)) {
    mlx::core::Full::eval();
  }
  if (*(void *)(v5 + 160) == 1)
  {
    int v6 = 0;
  }
  else if (*(unsigned char *)(v5 + 168))
  {
    int v6 = 1;
  }
  else
  {
    int v6 = 2;
  }
  return mlx::core::copy(v4, this, v6, a4);
}

void mlx::core::Log::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log::eval();
  }
  uint64_t v70 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v70, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log] Cannot compute log of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v7 = *(_DWORD *)(a1 + 20);
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v23 = *(void *)(*(void *)a3 + 56);
      if (v23 != 6)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
        unint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"[unary_fp] Does not support ", 28);
        v69[0] = *(void *)(*(void *)a3 + 56);
        mlx::core::operator<<(v65, v69);
        uint64_t v66 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v71, v69);
        MEMORY[0x25A2B1480](v66, v69);
        __cxa_throw(v66, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v24 = *(float **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v53 = *(void *)(*(void *)v3 + 160);
        if (v53)
        {
          uint64_t v54 = *(float **)(*(void *)a3 + 152);
          do
          {
            float v55 = *v24++;
            *v54++ = log10f(v55);
            --v53;
          }
          while (v53);
        }
      }
      else
      {
        uint64_t v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48)
                                                                          * BYTE4(v23)));
        uint64_t v70 = &unk_27062AEC8;
        v71[0] = mlx::core::allocator::free;
        int v72 = &v70;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v25, (uint64_t)&v70);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v70);
        uint64_t v26 = *(void *)a3;
        uint64_t v27 = *(void *)(*(void *)a3 + 48);
        if (v27)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *(void *)(v26 + 152);
          char v30 = *(uint64_t **)v3;
          uint64_t v31 = *v30;
          uint64_t v32 = ((unint64_t)(v30[1] - *v30) >> 2) - 1;
          do
          {
            uint64_t v33 = 0;
            if ((v32 & 0x80000000) == 0)
            {
              uint64_t v34 = v30[3];
              uint64_t v35 = v32;
              int quot = v28;
              do
              {
                ldiv_t v37 = ldiv(quot, *(int *)(v31 + 4 * v35));
                int quot = v37.quot;
                v33 += *(void *)(v34 + 8 * v35--) * v37.rem;
              }
              while (v35 != -1);
            }
            *(float *)(v29 + 4 * v28++) = log10f(v24[(int)v33]);
          }
          while (v28 != v27);
        }
      }
    }
    else if (v7 == 2)
    {
      uint64_t v8 = *(void *)(*(void *)a3 + 56);
      if (v8 != 6)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
        uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"[unary_fp] Does not support ", 28);
        v69[0] = *(void *)(*(void *)a3 + 56);
        mlx::core::operator<<(v63, v69);
        v64 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v71, v69);
        MEMORY[0x25A2B1480](v64, v69);
        __cxa_throw(v64, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v9 = *(float **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v59 = *(void *)(*(void *)v3 + 160);
        if (v59)
        {
          int v60 = *(float **)(*(void *)a3 + 152);
          do
          {
            float v61 = *v9++;
            *v60++ = logf(v61);
            --v59;
          }
          while (v59);
        }
      }
      else
      {
        uint64_t v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v8)));
        uint64_t v70 = &unk_27062AEC8;
        v71[0] = mlx::core::allocator::free;
        int v72 = &v70;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v10, (uint64_t)&v70);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v70);
        uint64_t v11 = *(void *)a3;
        uint64_t v12 = *(void *)(*(void *)a3 + 48);
        if (v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(v11 + 152);
          uint64_t v15 = *(uint64_t **)v3;
          uint64_t v16 = *v15;
          uint64_t v17 = ((unint64_t)(v15[1] - *v15) >> 2) - 1;
          do
          {
            uint64_t v18 = 0;
            if ((v17 & 0x80000000) == 0)
            {
              uint64_t v19 = v15[3];
              uint64_t v20 = v17;
              int v21 = v13;
              do
              {
                ldiv_t v22 = ldiv(v21, *(int *)(v16 + 4 * v20));
                int v21 = v22.quot;
                v18 += *(void *)(v19 + 8 * v20--) * v22.rem;
              }
              while (v20 != -1);
            }
            *(float *)(v14 + 4 * v13++) = logf(v9[(int)v18]);
          }
          while (v13 != v12);
        }
      }
    }
  }
  else
  {
    uint64_t v38 = *(void *)(*(void *)a3 + 56);
    if (v38 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"[unary_fp] Does not support ", 28);
      v69[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v67, v69);
      unint64_t v68 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v71, v69);
      MEMORY[0x25A2B1480](v68, v69);
      __cxa_throw(v68, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v39 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v56 = *(void *)(*(void *)v3 + 160);
      if (v56)
      {
        uint64_t v57 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v58 = *v39++;
          *v57++ = log2f(v58);
          --v56;
        }
        while (v56);
      }
    }
    else
    {
      uint64_t v40 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v38)));
      uint64_t v70 = &unk_27062AEC8;
      v71[0] = mlx::core::allocator::free;
      int v72 = &v70;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v40, (uint64_t)&v70);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v70);
      uint64_t v41 = *(void *)a3;
      uint64_t v42 = *(void *)(*(void *)a3 + 48);
      if (v42)
      {
        uint64_t v43 = 0;
        uint64_t v44 = *(void *)(v41 + 152);
        uint64_t v45 = *(uint64_t **)v3;
        uint64_t v46 = *v45;
        uint64_t v47 = ((unint64_t)(v45[1] - *v45) >> 2) - 1;
        do
        {
          uint64_t v48 = 0;
          if ((v47 & 0x80000000) == 0)
          {
            uint64_t v49 = v45[3];
            uint64_t v50 = v47;
            int v51 = v43;
            do
            {
              ldiv_t v52 = ldiv(v51, *(int *)(v46 + 4 * v50));
              int v51 = v52.quot;
              v48 += *(void *)(v49 + 8 * v50--) * v52.rem;
            }
            while (v50 != -1);
          }
          *(float *)(v44 + 4 * v43++) = log2f(v39[(int)v48]);
        }
        while (v43 != v42);
      }
    }
  }
}

void sub_256D6B040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Log1p::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log1p::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log1p] Cannot compute log of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      ldiv_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = log1pf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = log1pf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D6B378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::LogicalNot::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::LogicalNot::eval();
  }
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  switch((int)v6)
  {
    case 0:
      int v7 = *(char **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v108 = *(void *)(*(void *)v3 + 160);
        if (v108)
        {
          int v109 = *(unsigned char **)(*(void *)a3 + 152);
          do
          {
            char v110 = *v7++;
            *v109++ = v110 ^ 1;
            --v108;
          }
          while (v108);
        }
      }
      else
      {
        uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        uint64_t v9 = *(void *)a3;
        uint64_t v10 = *(void *)(*(void *)a3 + 48);
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = *(void *)(v9 + 152);
          uint64_t v13 = *(uint64_t **)v3;
          uint64_t v14 = *v13;
          uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
          do
          {
            uint64_t v16 = 0;
            if ((v15 & 0x80000000) == 0)
            {
              uint64_t v17 = v13[3];
              uint64_t v18 = v15;
              int quot = v11;
              do
              {
                ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
                int quot = v20.quot;
                v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
              }
              while (v18 != -1);
            }
            *(unsigned char *)(v12 + v11++) = v7[(int)v16] ^ 1;
          }
          while (v11 != v10);
        }
      }
      break;
    case 1:
      uint64_t v60 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v111 = 0;
          uint64_t v112 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v112 + v111) = *(unsigned char *)(v60 + v111) == 0;
            ++v111;
          }
          while (v111 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        float v61 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v61, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v62 = 0;
          uint64_t v63 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v64 = **(void **)v3;
            unint64_t v65 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v64) >> 2;
            uint64_t v66 = 0;
            uint64_t v67 = (v65 - 1);
            if ((int)v65 - 1 >= 0)
            {
              uint64_t v68 = *(void *)(*(void *)v3 + 24);
              int v69 = v62;
              do
              {
                ldiv_t v70 = ldiv(v69, *(int *)(v64 + 4 * v67));
                int v69 = v70.quot;
                v66 += *(void *)(v68 + 8 * v67--) * v70.rem;
              }
              while (v67 != -1);
            }
            *(unsigned char *)(v63 + v62++) = *(unsigned char *)(v60 + (int)v66) == 0;
          }
          while (v62 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 2:
      uint64_t v35 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v103 = *(void *)(*(void *)v3 + 160);
        if (v103)
        {
          v104 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v105 = *v35++;
            *v104++ = v105 == 0;
            --v103;
          }
          while (v103);
        }
      }
      else
      {
        int v36 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v36, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        uint64_t v37 = *(void *)a3;
        uint64_t v38 = *(void *)(*(void *)a3 + 48);
        if (v38)
        {
          uint64_t v39 = 0;
          uint64_t v40 = *(void *)(v37 + 152);
          uint64_t v41 = *(uint64_t **)v3;
          uint64_t v42 = *v41;
          uint64_t v43 = ((unint64_t)(v41[1] - *v41) >> 2) - 1;
          do
          {
            uint64_t v44 = 0;
            if ((v43 & 0x80000000) == 0)
            {
              uint64_t v45 = v41[3];
              uint64_t v46 = v43;
              int v47 = v39;
              do
              {
                ldiv_t v48 = ldiv(v47, *(int *)(v42 + 4 * v46));
                int v47 = v48.quot;
                v44 += *(void *)(v45 + 8 * v46--) * v48.rem;
              }
              while (v46 != -1);
            }
            *(_DWORD *)(v40 + 4 * v39++) = v35[(int)v44] == 0;
          }
          while (v39 != v38);
        }
      }
      break;
    case 3:
      uint64_t v49 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v106 = 0;
          uint64_t v107 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v107 + v106) = *(unsigned char *)(v49 + v106) == 0;
            ++v106;
          }
          while (v106 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        uint64_t v50 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v50, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v51 = 0;
          uint64_t v52 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v53 = **(void **)v3;
            unint64_t v54 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v53) >> 2;
            uint64_t v55 = 0;
            uint64_t v56 = (v54 - 1);
            if ((int)v54 - 1 >= 0)
            {
              uint64_t v57 = *(void *)(*(void *)v3 + 24);
              int v58 = v51;
              do
              {
                ldiv_t v59 = ldiv(v58, *(int *)(v53 + 4 * v56));
                int v58 = v59.quot;
                v55 += *(void *)(v57 + 8 * v56--) * v59.rem;
              }
              while (v56 != -1);
            }
            *(unsigned char *)(v52 + v51++) = *(unsigned char *)(v49 + (int)v55) == 0;
          }
          while (v51 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 4:
      uint64_t v21 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v100 = *(void *)(*(void *)v3 + 160);
        if (v100)
        {
          int v101 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v102 = *v21++;
            *v101++ = v102 == 0;
            --v100;
          }
          while (v100);
        }
      }
      else
      {
        ldiv_t v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v22, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        uint64_t v23 = *(void *)a3;
        uint64_t v24 = *(void *)(*(void *)a3 + 48);
        if (v24)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *(void *)(v23 + 152);
          uint64_t v27 = *(uint64_t **)v3;
          uint64_t v28 = *v27;
          uint64_t v29 = ((unint64_t)(v27[1] - *v27) >> 2) - 1;
          do
          {
            uint64_t v30 = 0;
            if ((v29 & 0x80000000) == 0)
            {
              uint64_t v31 = v27[3];
              uint64_t v32 = v29;
              int v33 = v25;
              do
              {
                ldiv_t v34 = ldiv(v33, *(int *)(v28 + 4 * v32));
                int v33 = v34.quot;
                v30 += *(void *)(v31 + 8 * v32--) * v34.rem;
              }
              while (v32 != -1);
            }
            *(_DWORD *)(v26 + 4 * v25++) = v21[(int)v30] == 0;
          }
          while (v25 != v24);
        }
      }
      break;
    case 5:
      uint64_t v71 = *(uint64_t **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v113 = *(void *)(*(void *)v3 + 160);
        if (v113)
        {
          v114 = *(void **)(*(void *)a3 + 152);
          do
          {
            uint64_t v115 = *v71++;
            *v114++ = v115 == 0;
            --v113;
          }
          while (v113);
        }
      }
      else
      {
        int v72 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v72, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        uint64_t v73 = *(void *)a3;
        uint64_t v74 = *(void *)(*(void *)a3 + 48);
        if (v74)
        {
          uint64_t v75 = 0;
          uint64_t v76 = *(void *)(v73 + 152);
          uint64_t v77 = *(uint64_t **)v3;
          uint64_t v78 = *v77;
          uint64_t v79 = ((unint64_t)(v77[1] - *v77) >> 2) - 1;
          do
          {
            uint64_t v80 = 0;
            if ((v79 & 0x80000000) == 0)
            {
              uint64_t v81 = v77[3];
              uint64_t v82 = v79;
              int v83 = v75;
              do
              {
                ldiv_t v84 = ldiv(v83, *(int *)(v78 + 4 * v82));
                int v83 = v84.quot;
                v80 += *(void *)(v81 + 8 * v82--) * v84.rem;
              }
              while (v82 != -1);
            }
            *(void *)(v76 + 8 * v75++) = v71[(int)v80] == 0;
          }
          while (v75 != v74);
        }
      }
      break;
    case 6:
      uint64_t v85 = *(float **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v116 = *(void *)(*(void *)v3 + 160);
        if (v116)
        {
          uint64_t v117 = *(float **)(*(void *)a3 + 152);
          do
          {
            float v118 = *v85++;
            if (v118 == 0.0) {
              float v119 = 1.0;
            }
            else {
              float v119 = 0.0;
            }
            *v117++ = v119;
            --v116;
          }
          while (v116);
        }
      }
      else
      {
        int v86 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        uint64_t v120 = &unk_27062AEC8;
        uint64_t v121 = mlx::core::allocator::free;
        uint64_t v122 = &v120;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v86, (uint64_t)&v120);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v120);
        uint64_t v87 = *(void *)a3;
        uint64_t v88 = *(void *)(*(void *)a3 + 48);
        if (v88)
        {
          uint64_t v89 = 0;
          uint64_t v90 = *(void *)(v87 + 152);
          uint64_t v91 = *(uint64_t **)v3;
          uint64_t v92 = *v91;
          uint64_t v93 = ((unint64_t)(v91[1] - *v91) >> 2) - 1;
          do
          {
            uint64_t v94 = 0;
            if ((v93 & 0x80000000) == 0)
            {
              uint64_t v95 = v91[3];
              uint64_t v96 = v93;
              int v97 = v89;
              do
              {
                ldiv_t v98 = ldiv(v97, *(int *)(v92 + 4 * v96));
                int v97 = v98.quot;
                v94 += *(void *)(v95 + 8 * v96--) * v98.rem;
              }
              while (v96 != -1);
            }
            if (v85[(int)v94] == 0.0) {
              float v99 = 1.0;
            }
            else {
              float v99 = 0.0;
            }
            *(float *)(v90 + 4 * v89++) = v99;
          }
          while (v89 != v88);
        }
      }
      break;
    default:
      return;
  }
}

void sub_256D6BCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  unint64_t v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LogicalAnd::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::LogicalAnd>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          goto LABEL_32;
        case 1:
          int v47 = *(_DWORD *)(*a2 + 160);
          if (v47 >= 1)
          {
            int v48 = **(unsigned __int8 **)(*a1 + 152);
            uint64_t v49 = *(char **)(*(void *)a3 + 152);
            uint64_t v50 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v53 = *v50++;
              int v52 = v53;
              if (v48) {
                BOOL v54 = v52 == 0;
              }
              else {
                BOOL v54 = 1;
              }
              char v55 = !v54;
              *v49++ = v55;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        case 2:
          int v56 = *(_DWORD *)(*a1 + 160);
          if (v56 >= 1)
          {
            int v57 = **(unsigned __int8 **)(*a2 + 152);
            int v58 = *(char **)(*(void *)a3 + 152);
            ldiv_t v59 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v60 = v56 + 1;
            do
            {
              int v62 = *v59++;
              int v61 = v62;
              if (v57) {
                BOOL v63 = v61 == 0;
              }
              else {
                BOOL v63 = 1;
              }
              char v64 = !v63;
              *v58++ = v64;
              --v60;
            }
            while (v60 > 1);
          }
          return;
        case 3:
          int v65 = *(_DWORD *)(*(void *)a3 + 48);
          if (v65 >= 1)
          {
            uint64_t v66 = *(char **)(*(void *)a3 + 152);
            uint64_t v67 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v68 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v69 = v65 + 1;
            do
            {
              int v70 = *v68++;
              BOOL v7 = v70 == 0;
              int v72 = *v67++;
              int v71 = v72;
              char v74 = !v7 && v71 != 0;
              *v66++ = v74;
              --v69;
            }
            while (v69 > 1);
          }
          return;
        default:
          uint64_t v38 = *(void **)a3;
          uint64_t v39 = (void *)*a1;
          uint64_t v40 = *(int **)*a1;
          uint64_t v41 = (v39[1] - (void)v40) >> 2;
          uint64_t v42 = (v41 - 1);
          if ((int)v42 >= -1) {
            int v43 = -1;
          }
          else {
            int v43 = v41 - 1;
          }
          int v44 = v43 + 1;
          int v45 = v41 + 1;
          break;
      }
      while (1)
      {
        unsigned int v46 = v45 - 2;
        if (v45 - 2 < 0) {
          break;
        }
        --v45;
        if (*(void *)(v39[3] + 8 * v46) != *(void *)(v38[3] + 8 * v46)) {
          goto LABEL_282;
        }
      }
      int v45 = v44;
LABEL_282:
      v277 = (void *)*a2;
      v278 = *(int **)*a2;
      uint64_t v279 = (v277[1] - (void)v278) >> 2;
      uint64_t v280 = (v279 - 1);
      if ((int)v280 >= -1) {
        int v281 = -1;
      }
      else {
        int v281 = v279 - 1;
      }
      int v282 = v281 + 1;
      int v283 = v279 + 1;
      while (1)
      {
        unsigned int v284 = v283 - 2;
        if (v283 - 2 < 0) {
          break;
        }
        --v283;
        if (*(void *)(v277[3] + 8 * v284) != *(void *)(v38[3] + 8 * v284)) {
          goto LABEL_336;
        }
      }
      int v283 = v282;
LABEL_336:
      int v331 = v41 + 1;
      while (1)
      {
        unsigned int v332 = v331 - 2;
        if (v331 - 2 < 0) {
          break;
        }
        --v331;
        if (*(void *)(v39[3] + 8 * v332)) {
          goto LABEL_371;
        }
      }
      int v331 = v44;
LABEL_371:
      int v345 = v279 + 1;
      while (1)
      {
        unsigned int v346 = v345 - 2;
        if (v345 - 2 < 0) {
          break;
        }
        --v345;
        if (*(void *)(v277[3] + 8 * v346)) {
          goto LABEL_406;
        }
      }
      int v345 = v282;
LABEL_406:
      unint64_t v359 = (uint64_t)(v38[1] - *v38) >> 2;
      if (v45 <= v283) {
        int v360 = v283;
      }
      else {
        int v360 = v45;
      }
      if (v45 <= v345) {
        int v45 = v345;
      }
      if (v331 > v283) {
        int v283 = v331;
      }
      if (v359 > v283)
      {
        int v361 = 1;
      }
      else
      {
        int v283 = (uint64_t)(v38[1] - *v38) >> 2;
        int v361 = 4;
      }
      if (v359 > v45)
      {
        int v362 = 2;
      }
      else
      {
        int v45 = v283;
        int v362 = v361;
      }
      if (v359 > v360)
      {
        int v45 = v360;
        int v362 = 3;
      }
      uint64_t v2187 = v280;
      uint64_t v2203 = v42;
      if (!v45) {
        goto LABEL_441;
      }
      unint64_t v363 = *(void *)(v38[3] + 8 * (v45 - 1));
      if (v363 < 0x10) {
        goto LABEL_441;
      }
      switch(v362)
      {
        case 1:
          if (v45 == 2)
          {
            uint64_t v1544 = *v40;
            if (v1544)
            {
              uint64_t v1545 = 0;
              uint64_t v1546 = 0;
              uint64_t v1547 = 0;
              uint64_t v1548 = v39[19];
              uint64_t v1549 = v277[19];
              uint64_t v1550 = v38[19];
              unint64_t v1551 = v40[1];
              v1552 = (uint64_t *)v39[3];
              uint64_t v1553 = *v1552;
              uint64_t v1554 = v1552[1];
              v1555 = (uint64_t *)v277[3];
              uint64_t v1557 = *v1555;
              uint64_t v1556 = v1555[1];
              if (v1551 <= 1) {
                uint64_t v1558 = 1;
              }
              else {
                uint64_t v1558 = v40[1];
              }
              uint64_t v1559 = v1553 - v1554 * v1551;
              uint64_t v1560 = v1557 - v1556 * v278[1];
              do
              {
                if (v1551)
                {
                  uint64_t v1561 = 0;
                  uint64_t v1562 = v1549 + v1546;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1563 = 0;
                      int v1564 = *(unsigned __int8 *)(v1548 + v1547);
                      unsigned int v1565 = v363 + 1;
                      do
                      {
                        if (v1564) {
                          BOOL v1566 = *(unsigned char *)(v1562 + v1563) == 0;
                        }
                        else {
                          BOOL v1566 = 1;
                        }
                        char v1567 = !v1566;
                        *(unsigned char *)(v1550 + v1563) = v1567;
                        --v1565;
                        ++v1563;
                      }
                      while (v1565 > 1);
                    }
                    v1547 += v1554;
                    v1546 += v1556;
                    v1550 += (int)v363;
                    ++v1561;
                    v1562 += v1556;
                  }
                  while (v1561 != v1558);
                }
                v1547 += v1559;
                v1546 += v1560;
                ++v1545;
              }
              while (v1545 != v1544);
            }
          }
          else if (v45 == 1)
          {
            uint64_t v1110 = *v40;
            if (v1110)
            {
              uint64_t v1111 = 0;
              uint64_t v1112 = 0;
              uint64_t v1113 = v39[19];
              uint64_t v1114 = v277[19];
              uint64_t v1115 = v38[19];
              uint64_t v1116 = *(void *)v39[3];
              uint64_t v1117 = *(void *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1118 = 0;
                  int v1119 = *(unsigned __int8 *)(v1113 + v1112);
                  unsigned int v1120 = v363 + 1;
                  do
                  {
                    if (v1119) {
                      BOOL v1121 = *(unsigned char *)(v1114 + v1118) == 0;
                    }
                    else {
                      BOOL v1121 = 1;
                    }
                    char v1122 = !v1121;
                    *(unsigned char *)(v1115 + v1118) = v1122;
                    --v1120;
                    ++v1118;
                  }
                  while (v1120 > 1);
                }
                v1112 += v1116;
                v1115 += (int)v363;
                ++v1111;
                v1114 += v1117;
              }
              while (v1111 != v1110);
            }
          }
          else
          {
            unint64_t v2144 = v38[6];
            if (v2144)
            {
              unint64_t v2173 = 0;
              uint64_t v2095 = v277[19];
              uint64_t v2109 = v39[19];
              uint64_t v1568 = v38[19];
              do
              {
                uint64_t v1569 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  uint64_t v1570 = v39[3];
                  int quot = v2173;
                  do
                  {
                    ldiv_t v1572 = ldiv(quot, v40[v42]);
                    int quot = v1572.quot;
                    v1569 += *(void *)(v1570 + 8 * v42--) * v1572.rem;
                  }
                  while (v42 != -1);
                }
                uint64_t v1573 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1574) = 0;
                }
                else
                {
                  uint64_t v1574 = 0;
                  uint64_t v1575 = v277[3];
                  int v1576 = v2173;
                  do
                  {
                    ldiv_t v1577 = ldiv(v1576, v278[v1573]);
                    int v1576 = v1577.quot;
                    v1574 += *(void *)(v1575 + 8 * v1573--) * v1577.rem;
                  }
                  while (v1573 != -1);
                }
                uint64_t v42 = v2203;
                if ((int)v363 >= 1)
                {
                  uint64_t v1578 = 0;
                  int v1579 = *(unsigned __int8 *)(v2109 + (int)v1569);
                  unsigned int v1580 = v363 + 1;
                  do
                  {
                    if (v1579) {
                      BOOL v1581 = *(unsigned char *)(v2095 + (int)v1574 + v1578) == 0;
                    }
                    else {
                      BOOL v1581 = 1;
                    }
                    char v1582 = !v1581;
                    *(unsigned char *)(v1568 + v1578) = v1582;
                    --v1580;
                    ++v1578;
                  }
                  while (v1580 > 1);
                }
                v1568 += (int)v363;
                v2173 += (int)v363;
              }
              while (v2173 < v2144);
            }
          }
          break;
        case 2:
          if (v45 == 2)
          {
            uint64_t v1583 = *v40;
            if (v1583)
            {
              uint64_t v1584 = 0;
              uint64_t v1585 = 0;
              uint64_t v1586 = 0;
              uint64_t v1587 = v39[19];
              uint64_t v1588 = v277[19];
              uint64_t v1589 = v38[19];
              unint64_t v1590 = v40[1];
              v1591 = (uint64_t *)v39[3];
              uint64_t v1592 = *v1591;
              uint64_t v1593 = v1591[1];
              v1594 = (uint64_t *)v277[3];
              uint64_t v1596 = *v1594;
              uint64_t v1595 = v1594[1];
              if (v1590 <= 1) {
                uint64_t v1597 = 1;
              }
              else {
                uint64_t v1597 = v40[1];
              }
              uint64_t v1598 = v1592 - v1593 * v1590;
              uint64_t v1599 = v1596 - v1595 * v278[1];
              do
              {
                if (v1590)
                {
                  uint64_t v1600 = 0;
                  uint64_t v1601 = v1587 + v1586;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1602 = 0;
                      int v1603 = *(unsigned __int8 *)(v1588 + v1585);
                      unsigned int v1604 = v363 + 1;
                      do
                      {
                        if (v1603) {
                          BOOL v1605 = *(unsigned char *)(v1601 + v1602) == 0;
                        }
                        else {
                          BOOL v1605 = 1;
                        }
                        char v1606 = !v1605;
                        *(unsigned char *)(v1589 + v1602) = v1606;
                        --v1604;
                        ++v1602;
                      }
                      while (v1604 > 1);
                    }
                    v1586 += v1593;
                    v1585 += v1595;
                    v1589 += (int)v363;
                    ++v1600;
                    v1601 += v1593;
                  }
                  while (v1600 != v1597);
                }
                v1586 += v1598;
                v1585 += v1599;
                ++v1584;
              }
              while (v1584 != v1583);
            }
          }
          else if (v45 == 1)
          {
            uint64_t v1123 = *v40;
            if (v1123)
            {
              uint64_t v1124 = 0;
              uint64_t v1125 = 0;
              uint64_t v1126 = v39[19];
              uint64_t v1127 = v277[19];
              uint64_t v1128 = v38[19];
              uint64_t v1129 = *(void *)v39[3];
              uint64_t v1130 = *(void *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1131 = 0;
                  int v1132 = *(unsigned __int8 *)(v1127 + v1125);
                  unsigned int v1133 = v363 + 1;
                  do
                  {
                    if (v1132) {
                      BOOL v1134 = *(unsigned char *)(v1126 + v1131) == 0;
                    }
                    else {
                      BOOL v1134 = 1;
                    }
                    char v1135 = !v1134;
                    *(unsigned char *)(v1128 + v1131) = v1135;
                    --v1133;
                    ++v1131;
                  }
                  while (v1133 > 1);
                }
                v1125 += v1130;
                v1128 += (int)v363;
                ++v1124;
                v1126 += v1129;
              }
              while (v1124 != v1123);
            }
          }
          else
          {
            unint64_t v2145 = v38[6];
            if (v2145)
            {
              unint64_t v2174 = 0;
              uint64_t v2096 = v277[19];
              uint64_t v2110 = v39[19];
              uint64_t v1607 = v38[19];
              do
              {
                uint64_t v1608 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  uint64_t v1609 = v39[3];
                  int v1610 = v2174;
                  do
                  {
                    ldiv_t v1611 = ldiv(v1610, v40[v42]);
                    int v1610 = v1611.quot;
                    v1608 += *(void *)(v1609 + 8 * v42--) * v1611.rem;
                  }
                  while (v42 != -1);
                }
                uint64_t v1612 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1613) = 0;
                }
                else
                {
                  uint64_t v1613 = 0;
                  uint64_t v1614 = v277[3];
                  int v1615 = v2174;
                  do
                  {
                    ldiv_t v1616 = ldiv(v1615, v278[v1612]);
                    int v1615 = v1616.quot;
                    v1613 += *(void *)(v1614 + 8 * v1612--) * v1616.rem;
                  }
                  while (v1612 != -1);
                }
                uint64_t v42 = v2203;
                if ((int)v363 >= 1)
                {
                  uint64_t v1617 = 0;
                  int v1618 = *(unsigned __int8 *)(v2096 + (int)v1613);
                  unsigned int v1619 = v363 + 1;
                  do
                  {
                    if (v1618) {
                      BOOL v1620 = *(unsigned char *)(v2110 + (int)v1608 + v1617) == 0;
                    }
                    else {
                      BOOL v1620 = 1;
                    }
                    char v1621 = !v1620;
                    *(unsigned char *)(v1607 + v1617) = v1621;
                    --v1619;
                    ++v1617;
                  }
                  while (v1619 > 1);
                }
                v1607 += (int)v363;
                v2174 += (int)v363;
              }
              while (v2174 < v2145);
            }
          }
          break;
        case 3:
          if (v45 == 2)
          {
            uint64_t v1286 = *v40;
            if (v1286)
            {
              uint64_t v1287 = 0;
              uint64_t v1288 = 0;
              uint64_t v1289 = 0;
              uint64_t v1290 = v39[19];
              uint64_t v1291 = v277[19];
              uint64_t v1292 = v38[19];
              unint64_t v1293 = v40[1];
              v1294 = (uint64_t *)v39[3];
              uint64_t v1295 = *v1294;
              uint64_t v1296 = v1294[1];
              v1297 = (uint64_t *)v277[3];
              uint64_t v1299 = *v1297;
              uint64_t v1298 = v1297[1];
              if (v1293 <= 1) {
                uint64_t v1300 = 1;
              }
              else {
                uint64_t v1300 = v40[1];
              }
              uint64_t v1301 = v1295 - v1296 * v1293;
              uint64_t v1302 = v1299 - v1298 * v278[1];
              do
              {
                if (v1293)
                {
                  uint64_t v1303 = 0;
                  uint64_t v1304 = v1291 + v1288;
                  uint64_t v1305 = v1290 + v1289;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1306 = 0;
                      unsigned int v1307 = v363 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1305 + v1306)) {
                          BOOL v1308 = *(unsigned char *)(v1304 + v1306) == 0;
                        }
                        else {
                          BOOL v1308 = 1;
                        }
                        char v1309 = !v1308;
                        *(unsigned char *)(v1292 + v1306) = v1309;
                        --v1307;
                        ++v1306;
                      }
                      while (v1307 > 1);
                    }
                    v1289 += v1296;
                    v1288 += v1298;
                    v1292 += (int)v363;
                    ++v1303;
                    v1304 += v1298;
                    v1305 += v1296;
                  }
                  while (v1303 != v1300);
                }
                v1289 += v1301;
                v1288 += v1302;
                ++v1287;
              }
              while (v1287 != v1286);
            }
          }
          else if (v45 == 1)
          {
            uint64_t v364 = *v40;
            if (v364)
            {
              uint64_t v365 = 0;
              uint64_t v366 = v39[19];
              uint64_t v367 = v277[19];
              uint64_t v368 = v38[19];
              uint64_t v369 = *(void *)v39[3];
              uint64_t v370 = *(void *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v371 = 0;
                  unsigned int v372 = v363 + 1;
                  do
                  {
                    if (*(unsigned char *)(v366 + v371)) {
                      BOOL v373 = *(unsigned char *)(v367 + v371) == 0;
                    }
                    else {
                      BOOL v373 = 1;
                    }
                    char v374 = !v373;
                    *(unsigned char *)(v368 + v371) = v374;
                    --v372;
                    ++v371;
                  }
                  while (v372 > 1);
                }
                v368 += (int)v363;
                ++v365;
                v367 += v370;
                v366 += v369;
              }
              while (v365 != v364);
            }
          }
          else
          {
            unint64_t v2137 = v38[6];
            if (v2137)
            {
              unint64_t v2166 = 0;
              uint64_t v2090 = v277[19];
              uint64_t v2106 = v39[19];
              uint64_t v1310 = v38[19];
              do
              {
                uint64_t v1311 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  uint64_t v1312 = v39[3];
                  int v1313 = v2166;
                  do
                  {
                    ldiv_t v1314 = ldiv(v1313, v40[v42]);
                    int v1313 = v1314.quot;
                    v1311 += *(void *)(v1312 + 8 * v42--) * v1314.rem;
                  }
                  while (v42 != -1);
                }
                uint64_t v1315 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1316) = 0;
                }
                else
                {
                  uint64_t v1316 = 0;
                  uint64_t v1317 = v277[3];
                  int v1318 = v2166;
                  do
                  {
                    ldiv_t v1319 = ldiv(v1318, v278[v1315]);
                    int v1318 = v1319.quot;
                    v1316 += *(void *)(v1317 + 8 * v1315--) * v1319.rem;
                  }
                  while (v1315 != -1);
                }
                uint64_t v42 = v2203;
                if ((int)v363 >= 1)
                {
                  uint64_t v1320 = 0;
                  unsigned int v1321 = v363 + 1;
                  do
                  {
                    if (*(unsigned char *)(v2106 + (int)v1311 + v1320)) {
                      BOOL v1322 = *(unsigned char *)(v2090 + (int)v1316 + v1320) == 0;
                    }
                    else {
                      BOOL v1322 = 1;
                    }
                    char v1323 = !v1322;
                    *(unsigned char *)(v1310 + v1320) = v1323;
                    --v1321;
                    ++v1320;
                  }
                  while (v1321 > 1);
                }
                v1310 += (int)v363;
                v2166 += (int)v363;
              }
              while (v2166 < v2137);
            }
          }
          break;
        default:
LABEL_441:
          switch(v359)
          {
            case 1uLL:
              uint64_t v375 = v38[6];
              if (v375)
              {
                v376 = (unsigned char *)v39[19];
                v377 = (unsigned char *)v277[19];
                v378 = (char *)v38[19];
                uint64_t v379 = *(void *)v39[3];
                uint64_t v380 = *(void *)v277[3];
                do
                {
                  if (*v376) {
                    BOOL v381 = *v377 == 0;
                  }
                  else {
                    BOOL v381 = 1;
                  }
                  char v382 = !v381;
                  *v378++ = v382;
                  v377 += v380;
                  v376 += v379;
                  --v375;
                }
                while (v375);
              }
              break;
            case 2uLL:
              uint64_t v538 = *v40;
              if (v538)
              {
                uint64_t v539 = 0;
                uint64_t v540 = 0;
                uint64_t v541 = 0;
                uint64_t v542 = 0;
                uint64_t v543 = v39[19];
                uint64_t v544 = v277[19];
                uint64_t v545 = v38[19];
                unint64_t v546 = v40[1];
                v547 = (uint64_t *)v39[3];
                uint64_t v548 = *v547;
                uint64_t v549 = v547[1];
                v550 = (uint64_t *)v277[3];
                uint64_t v551 = *v550;
                uint64_t v552 = v550[1];
                uint64_t v553 = v551 - v552 * v278[1];
                if (v546 <= 1) {
                  uint64_t v554 = 1;
                }
                else {
                  uint64_t v554 = v40[1];
                }
                uint64_t v555 = v548 - v549 * v546;
                do
                {
                  if (v546)
                  {
                    uint64_t v556 = v540 + v554;
                    v557 = (char *)(v545 + v540);
                    uint64_t v558 = v554;
                    do
                    {
                      if (*(unsigned char *)(v543 + v542)) {
                        BOOL v559 = *(unsigned char *)(v544 + v541) == 0;
                      }
                      else {
                        BOOL v559 = 1;
                      }
                      char v560 = !v559;
                      *v557++ = v560;
                      v542 += v549;
                      v541 += v552;
                      --v558;
                    }
                    while (v558);
                    uint64_t v540 = v556;
                  }
                  v542 += v555;
                  v541 += v553;
                  ++v539;
                }
                while (v539 != v538);
              }
              break;
            case 3uLL:
              uint64_t v561 = *v40;
              if (v561)
              {
                uint64_t v562 = 0;
                uint64_t v563 = 0;
                uint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = v39[19];
                uint64_t v567 = v277[19];
                uint64_t v568 = v38[19];
                unint64_t v569 = v40[1];
                v570 = (void *)v39[3];
                uint64_t v571 = v570[1];
                v572 = (void *)v277[3];
                uint64_t v573 = v572[1];
                uint64_t v574 = *v572 - v573 * v278[1];
                if (v569 <= 1) {
                  uint64_t v575 = 1;
                }
                else {
                  uint64_t v575 = v40[1];
                }
                unint64_t v576 = *v570 - v571 * v569;
                do
                {
                  if (v569)
                  {
                    uint64_t v577 = 0;
                    unint64_t v578 = v40[2];
                    uint64_t v579 = v570[2];
                    uint64_t v580 = v572[2];
                    if (v578 <= 1) {
                      uint64_t v581 = 1;
                    }
                    else {
                      uint64_t v581 = v40[2];
                    }
                    uint64_t v582 = v573 - v580 * v278[2];
                    do
                    {
                      uint64_t v583 = v581;
                      if (v578)
                      {
                        do
                        {
                          if (*(unsigned char *)(v566 + v565)) {
                            BOOL v584 = *(unsigned char *)(v567 + v564) == 0;
                          }
                          else {
                            BOOL v584 = 1;
                          }
                          char v585 = !v584;
                          *(unsigned char *)(v568 + v563++) = v585;
                          v565 += v579;
                          v564 += v580;
                          --v583;
                        }
                        while (v583);
                      }
                      v565 += v571 - v579 * v578;
                      v564 += v582;
                      ++v577;
                    }
                    while (v577 != v575);
                  }
                  v565 += v576;
                  v564 += v574;
                  ++v562;
                }
                while (v562 != v561);
              }
              break;
            case 4uLL:
              uint64_t v2210 = *v40;
              if (v2210)
              {
                uint64_t v586 = 0;
                uint64_t v587 = 0;
                uint64_t v588 = 0;
                uint64_t v589 = 0;
                uint64_t v590 = v39[19];
                uint64_t v591 = v277[19];
                uint64_t v592 = v38[19];
                unint64_t v593 = v40[1];
                v594 = (void *)v39[3];
                v595 = (void *)v277[3];
                uint64_t v2116 = v595[1];
                uint64_t v2130 = v594[1];
                if (v593 <= 1) {
                  uint64_t v596 = 1;
                }
                else {
                  uint64_t v596 = v40[1];
                }
                unint64_t v2159 = *v594 - v594[1] * v593;
                uint64_t v2192 = *v595 - v2116 * v278[1];
                do
                {
                  if (v593)
                  {
                    uint64_t v597 = 0;
                    unint64_t v598 = v40[2];
                    uint64_t v599 = v594[2];
                    uint64_t v600 = v595[2];
                    if (v598 <= 1) {
                      uint64_t v601 = 1;
                    }
                    else {
                      uint64_t v601 = v40[2];
                    }
                    uint64_t v602 = v2116 - v600 * v278[2];
                    do
                    {
                      if (v598)
                      {
                        uint64_t v603 = 0;
                        unint64_t v604 = v40[3];
                        uint64_t v605 = v594[3];
                        uint64_t v606 = v595[3];
                        if (v604 <= 1) {
                          uint64_t v607 = 1;
                        }
                        else {
                          uint64_t v607 = v40[3];
                        }
                        uint64_t v608 = v600 - v606 * v278[3];
                        do
                        {
                          uint64_t v609 = v607;
                          if (v604)
                          {
                            do
                            {
                              if (*(unsigned char *)(v590 + v589)) {
                                BOOL v610 = *(unsigned char *)(v591 + v588) == 0;
                              }
                              else {
                                BOOL v610 = 1;
                              }
                              char v611 = !v610;
                              *(unsigned char *)(v592 + v587++) = v611;
                              v589 += v605;
                              v588 += v606;
                              --v609;
                            }
                            while (v609);
                          }
                          v589 += v599 - v605 * v604;
                          v588 += v608;
                          ++v603;
                        }
                        while (v603 != v601);
                      }
                      v589 += v2130 - v599 * v598;
                      v588 += v602;
                      ++v597;
                    }
                    while (v597 != v596);
                  }
                  v589 += v2159;
                  v588 += v2192;
                  ++v586;
                }
                while (v586 != v2210);
              }
              break;
            default:
              uint64_t v525 = v38[6];
              if (v525)
              {
                uint64_t v526 = 0;
                uint64_t v2129 = v277[19];
                uint64_t v2158 = v39[19];
                uint64_t v2115 = v38[19];
                do
                {
                  uint64_t v527 = 0;
                  if ((v42 & 0x80000000) == 0)
                  {
                    uint64_t v528 = v39[3];
                    int v529 = v526;
                    do
                    {
                      ldiv_t v530 = ldiv(v529, v40[v42]);
                      int v529 = v530.quot;
                      v527 += *(void *)(v528 + 8 * v42--) * v530.rem;
                    }
                    while (v42 != -1);
                  }
                  uint64_t v531 = v2187;
                  if ((v2187 & 0x80000000) != 0)
                  {
                    LODWORD(v532) = 0;
                  }
                  else
                  {
                    uint64_t v532 = 0;
                    uint64_t v533 = v277[3];
                    int v534 = v526;
                    do
                    {
                      ldiv_t v535 = ldiv(v534, v278[v531]);
                      int v534 = v535.quot;
                      v532 += *(void *)(v533 + 8 * v531--) * v535.rem;
                    }
                    while (v531 != -1);
                  }
                  if (*(unsigned char *)(v2158 + (int)v527)) {
                    BOOL v536 = *(unsigned char *)(v2129 + (int)v532) == 0;
                  }
                  else {
                    BOOL v536 = 1;
                  }
                  char v537 = !v536;
                  *(unsigned char *)(v2115 + v526++) = v537;
                  uint64_t v42 = v2203;
                }
                while (v526 != v525);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_29;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            uint64_t v10 = *(char **)(*(void *)a3 + 152);
            uint64_t v11 = *(unsigned __int8 **)(*a2 + 152);
            int v12 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              int v15 = *v11++;
              int v14 = v15;
              if (v12) {
                BOOL v16 = v14 == 0;
              }
              else {
                BOOL v16 = 1;
              }
              char v17 = !v16;
              *v10++ = v17;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v83 = *(_DWORD *)(*a1 + 160);
          if (v83 >= 1)
          {
            ldiv_t v84 = *(char **)(*(void *)a3 + 152);
            uint64_t v85 = *(unsigned __int8 **)(*a1 + 152);
            int v86 = **(unsigned __int8 **)(*a2 + 152);
            unsigned int v87 = v83 + 1;
            do
            {
              int v89 = *v85++;
              int v88 = v89;
              if (v86) {
                BOOL v90 = v88 == 0;
              }
              else {
                BOOL v90 = 1;
              }
              char v91 = !v90;
              *v84++ = v91;
              --v87;
            }
            while (v87 > 1);
          }
          return;
        case 3:
          int v92 = *(_DWORD *)(*(void *)a3 + 48);
          if (v92 >= 1)
          {
            uint64_t v93 = *(char **)(*(void *)a3 + 152);
            uint64_t v94 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v95 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v96 = v92 + 1;
            do
            {
              int v98 = *v95++;
              int v97 = v98;
              int v100 = *v94++;
              int v99 = v100;
              if (v97) {
                BOOL v101 = v99 == 0;
              }
              else {
                BOOL v101 = 1;
              }
              char v102 = !v101;
              *v93++ = v102;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          uint64_t v75 = *(void **)a3;
          uint64_t v76 = *a1;
          uint64_t v77 = *(int **)*a1;
          uint64_t v78 = (*(void *)(*a1 + 8) - (void)v77) >> 2;
          int v79 = v78 - 1;
          if ((int)v78 - 1 >= -1) {
            int v79 = -1;
          }
          int v80 = v79 + 1;
          int v81 = v78 + 1;
          break;
      }
      while (1)
      {
        unsigned int v82 = v81 - 2;
        if (v81 - 2 < 0) {
          break;
        }
        --v81;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v82) != *(void *)(v75[3] + 8 * v82)) {
          goto LABEL_290;
        }
      }
      int v81 = v80;
LABEL_290:
      v285 = (int **)*a2;
      v286 = *(int **)*a2;
      uint64_t v287 = (*(void *)(*a2 + 8) - (void)v286) >> 2;
      int v288 = v287 - 1;
      if ((int)v287 - 1 >= -1) {
        int v288 = -1;
      }
      int v289 = v288 + 1;
      int v290 = v287 + 1;
      while (1)
      {
        unsigned int v291 = v290 - 2;
        if (v290 - 2 < 0) {
          break;
        }
        --v290;
        if (*(void *)&v285[3][2 * v291] != *(void *)(v75[3] + 8 * v291)) {
          goto LABEL_341;
        }
      }
      int v290 = v289;
LABEL_341:
      int v333 = v78 + 1;
      while (1)
      {
        unsigned int v334 = v333 - 2;
        if (v333 - 2 < 0) {
          break;
        }
        --v333;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v334)) {
          goto LABEL_376;
        }
      }
      int v333 = v80;
LABEL_376:
      int v347 = v287 + 1;
      while (1)
      {
        int v348 = v347 - 2;
        if (v347 - 2 < 0) {
          break;
        }
        --v347;
        if (*(void *)&v285[3][2 * v348]) {
          goto LABEL_453;
        }
      }
      int v347 = v289;
LABEL_453:
      unint64_t v383 = (uint64_t)(v75[1] - *v75) >> 2;
      if (v81 <= v290) {
        int v384 = v290;
      }
      else {
        int v384 = v81;
      }
      if (v81 <= v347) {
        int v81 = v347;
      }
      if (v333 > v290) {
        int v290 = v333;
      }
      if (v383 > v290)
      {
        int v385 = 1;
      }
      else
      {
        int v290 = (uint64_t)(v75[1] - *v75) >> 2;
        int v385 = 4;
      }
      if (v383 > v81)
      {
        int v386 = 2;
      }
      else
      {
        int v81 = v290;
        int v386 = v385;
      }
      if (v383 > v384)
      {
        int v81 = v384;
        int v386 = 3;
      }
      if (!v81) {
        goto LABEL_489;
      }
      unint64_t v387 = *(void *)(v75[3] + 8 * (v81 - 1));
      if (v387 < 0x10) {
        goto LABEL_489;
      }
      uint64_t v2204 = *(void *)(v75[3] + 8 * (v81 - 1));
      switch(v386)
      {
        case 1:
          if (v81 == 2)
          {
            int v1622 = *v77;
            if (*v77)
            {
              unint64_t v1623 = 0;
              uint64_t v1624 = 0;
              uint64_t v1625 = 0;
              uint64_t v1626 = *(void *)(v76 + 152);
              v1627 = v285[19];
              uint64_t v1628 = v75[19];
              do
              {
                if (v77[1])
                {
                  unint64_t v1629 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      uint64_t v1630 = 0;
                      int v1631 = *(unsigned __int8 *)(v1626 + v1625);
                      unsigned int v1632 = v387 + 1;
                      do
                      {
                        if (v1631) {
                          BOOL v1633 = *((unsigned char *)v1627 + v1624 + v1630) == 0;
                        }
                        else {
                          BOOL v1633 = 1;
                        }
                        char v1634 = !v1633;
                        *(unsigned char *)(v1628 + v1630) = v1634;
                        --v1632;
                        ++v1630;
                      }
                      while (v1632 > 1);
                      uint64_t v76 = *a1;
                      v285 = (int **)*a2;
                      uint64_t v77 = *(int **)*a1;
                    }
                    v1635 = *(void **)(v76 + 24);
                    uint64_t v1636 = v1635[1];
                    v1625 += v1636;
                    v1624 += *((void *)v285[3] + 1);
                    v1628 += (int)v387;
                    ++v1629;
                    unint64_t v1637 = v77[1];
                  }
                  while (v1629 < v1637);
                  int v1622 = *v77;
                  v286 = *v285;
                }
                else
                {
                  unint64_t v1637 = 0;
                  v1635 = *(void **)(v76 + 24);
                  uint64_t v1636 = v1635[1];
                }
                uint64_t v1625 = *v1635 + v1625 - v1637 * v1636;
                uint64_t v1624 = *(void *)v285[3] + v1624 - *((void *)v285[3] + 1) * v286[1];
                ++v1623;
              }
              while (v1623 < v1622);
            }
          }
          else if (v81 == 1)
          {
            int v1136 = *v77;
            if (*v77)
            {
              unint64_t v1137 = 0;
              uint64_t v1138 = 0;
              uint64_t v1139 = 0;
              uint64_t v1140 = *(void *)(v76 + 152);
              v1141 = v285[19];
              uint64_t v1142 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  uint64_t v1143 = 0;
                  int v1144 = *(unsigned __int8 *)(v1140 + v1139);
                  unsigned int v1145 = v387 + 1;
                  do
                  {
                    if (v1144) {
                      BOOL v1146 = *((unsigned char *)v1141 + v1138 + v1143) == 0;
                    }
                    else {
                      BOOL v1146 = 1;
                    }
                    char v1147 = !v1146;
                    *(unsigned char *)(v1142 + v1143) = v1147;
                    --v1145;
                    ++v1143;
                  }
                  while (v1145 > 1);
                  uint64_t v76 = *a1;
                  v285 = (int **)*a2;
                  int v1136 = **(_DWORD **)*a1;
                }
                v1139 += **(void **)(v76 + 24);
                v1138 += *(void *)v285[3];
                v1142 += (int)v387;
                ++v1137;
              }
              while (v1137 < v1136);
            }
          }
          else if (v75[6])
          {
            v2125 = v285[19];
            uint64_t v2146 = *(void *)(v76 + 152);
            uint64_t v2175 = (int)v387;
            unint64_t v2199 = 0;
            unsigned int v2111 = v387 + 1;
            uint64_t v1638 = v75[19];
            do
            {
              uint64_t v1639 = *(void *)*a1;
              unint64_t v1640 = (unint64_t)(*(void *)(*a1 + 8) - v1639) >> 2;
              uint64_t v1641 = 0;
              uint64_t v1642 = (v1640 - 1);
              if ((int)v1640 - 1 >= 0)
              {
                uint64_t v1643 = *(void *)(*a1 + 24);
                int v1644 = v2199;
                do
                {
                  ldiv_t v1645 = ldiv(v1644, *(int *)(v1639 + 4 * v1642));
                  int v1644 = v1645.quot;
                  v1641 += *(void *)(v1643 + 8 * v1642--) * v1645.rem;
                }
                while (v1642 != -1);
              }
              uint64_t v1646 = *(void *)*a2;
              unint64_t v1647 = (unint64_t)(*(void *)(*a2 + 8) - v1646) >> 2;
              uint64_t v1648 = 0;
              uint64_t v1649 = (v1647 - 1);
              if ((int)v1647 - 1 >= 0)
              {
                uint64_t v1650 = *(void *)(*a2 + 24);
                int v1651 = v2199;
                do
                {
                  ldiv_t v1652 = ldiv(v1651, *(int *)(v1646 + 4 * v1649));
                  int v1651 = v1652.quot;
                  v1648 += *(void *)(v1650 + 8 * v1649--) * v1652.rem;
                }
                while (v1649 != -1);
              }
              if ((int)v2204 >= 1)
              {
                uint64_t v1653 = 0;
                int v1654 = *(unsigned __int8 *)(v2146 + (int)v1641);
                unsigned int v1655 = v2111;
                do
                {
                  if (v1654) {
                    BOOL v1656 = *((unsigned char *)v2125 + (int)v1648 + v1653) == 0;
                  }
                  else {
                    BOOL v1656 = 1;
                  }
                  char v1657 = !v1656;
                  *(unsigned char *)(v1638 + v1653) = v1657;
                  --v1655;
                  ++v1653;
                }
                while (v1655 > 1);
                uint64_t v75 = *(void **)a3;
              }
              v1638 += v2175;
              v2199 += v2175;
            }
            while (v2199 < v75[6]);
          }
          break;
        case 2:
          if (v81 == 2)
          {
            int v1658 = *v77;
            if (*v77)
            {
              unint64_t v1659 = 0;
              uint64_t v1660 = 0;
              uint64_t v1661 = 0;
              uint64_t v1662 = *(void *)(v76 + 152);
              v1663 = v285[19];
              uint64_t v1664 = v75[19];
              do
              {
                if (v77[1])
                {
                  unint64_t v1665 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      uint64_t v1666 = 0;
                      int v1667 = *((unsigned __int8 *)v1663 + v1660);
                      unsigned int v1668 = v387 + 1;
                      do
                      {
                        if (v1667) {
                          BOOL v1669 = *(unsigned char *)(v1662 + v1661 + v1666) == 0;
                        }
                        else {
                          BOOL v1669 = 1;
                        }
                        char v1670 = !v1669;
                        *(unsigned char *)(v1664 + v1666) = v1670;
                        --v1668;
                        ++v1666;
                      }
                      while (v1668 > 1);
                      uint64_t v76 = *a1;
                      v285 = (int **)*a2;
                      uint64_t v77 = *(int **)*a1;
                    }
                    v1671 = *(void **)(v76 + 24);
                    uint64_t v1672 = v1671[1];
                    v1661 += v1672;
                    v1660 += *((void *)v285[3] + 1);
                    v1664 += (int)v387;
                    ++v1665;
                    unint64_t v1673 = v77[1];
                  }
                  while (v1665 < v1673);
                  int v1658 = *v77;
                  v286 = *v285;
                }
                else
                {
                  unint64_t v1673 = 0;
                  v1671 = *(void **)(v76 + 24);
                  uint64_t v1672 = v1671[1];
                }
                uint64_t v1661 = *v1671 + v1661 - v1673 * v1672;
                uint64_t v1660 = *(void *)v285[3] + v1660 - *((void *)v285[3] + 1) * v286[1];
                ++v1659;
              }
              while (v1659 < v1658);
            }
          }
          else if (v81 == 1)
          {
            int v1148 = *v77;
            if (*v77)
            {
              unint64_t v1149 = 0;
              uint64_t v1150 = 0;
              uint64_t v1151 = 0;
              uint64_t v1152 = *(void *)(v76 + 152);
              v1153 = v285[19];
              uint64_t v1154 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  uint64_t v1155 = 0;
                  int v1156 = *((unsigned __int8 *)v1153 + v1150);
                  unsigned int v1157 = v387 + 1;
                  do
                  {
                    if (v1156) {
                      BOOL v1158 = *(unsigned char *)(v1152 + v1151 + v1155) == 0;
                    }
                    else {
                      BOOL v1158 = 1;
                    }
                    char v1159 = !v1158;
                    *(unsigned char *)(v1154 + v1155) = v1159;
                    --v1157;
                    ++v1155;
                  }
                  while (v1157 > 1);
                  uint64_t v76 = *a1;
                  v285 = (int **)*a2;
                  int v1148 = **(_DWORD **)*a1;
                }
                v1151 += **(void **)(v76 + 24);
                v1150 += *(void *)v285[3];
                v1154 += (int)v387;
                ++v1149;
              }
              while (v1149 < v1148);
            }
          }
          else if (v75[6])
          {
            v2126 = v285[19];
            uint64_t v2147 = *(void *)(v76 + 152);
            uint64_t v2176 = (int)v387;
            unint64_t v2200 = 0;
            unsigned int v2112 = v387 + 1;
            uint64_t v1674 = v75[19];
            do
            {
              uint64_t v1675 = *(void *)*a1;
              unint64_t v1676 = (unint64_t)(*(void *)(*a1 + 8) - v1675) >> 2;
              uint64_t v1677 = 0;
              uint64_t v1678 = (v1676 - 1);
              if ((int)v1676 - 1 >= 0)
              {
                uint64_t v1679 = *(void *)(*a1 + 24);
                int v1680 = v2200;
                do
                {
                  ldiv_t v1681 = ldiv(v1680, *(int *)(v1675 + 4 * v1678));
                  int v1680 = v1681.quot;
                  v1677 += *(void *)(v1679 + 8 * v1678--) * v1681.rem;
                }
                while (v1678 != -1);
              }
              uint64_t v1682 = *(void *)*a2;
              unint64_t v1683 = (unint64_t)(*(void *)(*a2 + 8) - v1682) >> 2;
              uint64_t v1684 = 0;
              uint64_t v1685 = (v1683 - 1);
              if ((int)v1683 - 1 >= 0)
              {
                uint64_t v1686 = *(void *)(*a2 + 24);
                int v1687 = v2200;
                do
                {
                  ldiv_t v1688 = ldiv(v1687, *(int *)(v1682 + 4 * v1685));
                  int v1687 = v1688.quot;
                  v1684 += *(void *)(v1686 + 8 * v1685--) * v1688.rem;
                }
                while (v1685 != -1);
              }
              if ((int)v2204 >= 1)
              {
                uint64_t v1689 = 0;
                int v1690 = *((unsigned __int8 *)v2126 + (int)v1684);
                unsigned int v1691 = v2112;
                do
                {
                  if (v1690) {
                    BOOL v1692 = *(unsigned char *)(v2147 + (int)v1677 + v1689) == 0;
                  }
                  else {
                    BOOL v1692 = 1;
                  }
                  char v1693 = !v1692;
                  *(unsigned char *)(v1674 + v1689) = v1693;
                  --v1691;
                  ++v1689;
                }
                while (v1691 > 1);
                uint64_t v75 = *(void **)a3;
              }
              v1674 += v2176;
              v2200 += v2176;
            }
            while (v2200 < v75[6]);
          }
          break;
        case 3:
          if (v81 == 2)
          {
            int v1324 = *v77;
            if (*v77)
            {
              unint64_t v1325 = 0;
              uint64_t v1326 = 0;
              uint64_t v1327 = 0;
              uint64_t v1328 = *(void *)(v76 + 152);
              v1329 = v285[19];
              uint64_t v1330 = v75[19];
              do
              {
                if (v77[1])
                {
                  unint64_t v1331 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      uint64_t v1332 = 0;
                      unsigned int v1333 = v387 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1328 + v1327 + v1332)) {
                          BOOL v1334 = *((unsigned char *)v1329 + v1326 + v1332) == 0;
                        }
                        else {
                          BOOL v1334 = 1;
                        }
                        char v1335 = !v1334;
                        *(unsigned char *)(v1330 + v1332) = v1335;
                        --v1333;
                        ++v1332;
                      }
                      while (v1333 > 1);
                      uint64_t v76 = *a1;
                      v285 = (int **)*a2;
                      uint64_t v77 = *(int **)*a1;
                    }
                    v1336 = *(void **)(v76 + 24);
                    uint64_t v1337 = v1336[1];
                    v1327 += v1337;
                    v1326 += *((void *)v285[3] + 1);
                    v1330 += (int)v387;
                    ++v1331;
                    unint64_t v1338 = v77[1];
                  }
                  while (v1331 < v1338);
                  int v1324 = *v77;
                  v286 = *v285;
                }
                else
                {
                  unint64_t v1338 = 0;
                  v1336 = *(void **)(v76 + 24);
                  uint64_t v1337 = v1336[1];
                }
                uint64_t v1327 = *v1336 + v1327 - v1338 * v1337;
                uint64_t v1326 = *(void *)v285[3] + v1326 - *((void *)v285[3] + 1) * v286[1];
                ++v1325;
              }
              while (v1325 < v1324);
            }
          }
          else if (v81 == 1)
          {
            int v388 = *v77;
            if (*v77)
            {
              unint64_t v389 = 0;
              uint64_t v390 = 0;
              uint64_t v391 = 0;
              uint64_t v392 = *(void *)(v76 + 152);
              v393 = v285[19];
              uint64_t v394 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  uint64_t v395 = 0;
                  unsigned int v396 = v387 + 1;
                  do
                  {
                    if (*(unsigned char *)(v392 + v391 + v395)) {
                      BOOL v397 = *((unsigned char *)v393 + v390 + v395) == 0;
                    }
                    else {
                      BOOL v397 = 1;
                    }
                    char v398 = !v397;
                    *(unsigned char *)(v394 + v395) = v398;
                    --v396;
                    ++v395;
                  }
                  while (v396 > 1);
                  uint64_t v76 = *a1;
                  v285 = (int **)*a2;
                  int v388 = **(_DWORD **)*a1;
                }
                v391 += **(void **)(v76 + 24);
                v390 += *(void *)v285[3];
                v394 += (int)v387;
                ++v389;
              }
              while (v389 < v388);
            }
          }
          else if (v75[6])
          {
            v2123 = v285[19];
            uint64_t v2138 = *(void *)(v76 + 152);
            uint64_t v2167 = (int)v387;
            unint64_t v2197 = 0;
            unsigned int v2107 = v387 + 1;
            uint64_t v1339 = v75[19];
            do
            {
              uint64_t v1340 = *(void *)*a1;
              unint64_t v1341 = (unint64_t)(*(void *)(*a1 + 8) - v1340) >> 2;
              uint64_t v1342 = 0;
              uint64_t v1343 = (v1341 - 1);
              if ((int)v1341 - 1 >= 0)
              {
                uint64_t v1344 = *(void *)(*a1 + 24);
                int v1345 = v2197;
                do
                {
                  ldiv_t v1346 = ldiv(v1345, *(int *)(v1340 + 4 * v1343));
                  int v1345 = v1346.quot;
                  v1342 += *(void *)(v1344 + 8 * v1343--) * v1346.rem;
                }
                while (v1343 != -1);
              }
              uint64_t v1347 = *(void *)*a2;
              unint64_t v1348 = (unint64_t)(*(void *)(*a2 + 8) - v1347) >> 2;
              uint64_t v1349 = 0;
              uint64_t v1350 = (v1348 - 1);
              if ((int)v1348 - 1 >= 0)
              {
                uint64_t v1351 = *(void *)(*a2 + 24);
                int v1352 = v2197;
                do
                {
                  ldiv_t v1353 = ldiv(v1352, *(int *)(v1347 + 4 * v1350));
                  int v1352 = v1353.quot;
                  v1349 += *(void *)(v1351 + 8 * v1350--) * v1353.rem;
                }
                while (v1350 != -1);
              }
              if ((int)v2204 >= 1)
              {
                uint64_t v1354 = 0;
                unsigned int v1355 = v2107;
                do
                {
                  if (*(unsigned char *)(v2138 + (int)v1342 + v1354)) {
                    BOOL v1356 = *((unsigned char *)v2123 + (int)v1349 + v1354) == 0;
                  }
                  else {
                    BOOL v1356 = 1;
                  }
                  char v1357 = !v1356;
                  *(unsigned char *)(v1339 + v1354) = v1357;
                  --v1355;
                  ++v1354;
                }
                while (v1355 > 1);
                uint64_t v75 = *(void **)a3;
              }
              v1339 += v2167;
              v2197 += v2167;
            }
            while (v2197 < v75[6]);
          }
          break;
        default:
LABEL_489:
          switch(v383)
          {
            case 1uLL:
              if (v75[6])
              {
                unint64_t v399 = 0;
                uint64_t v400 = 0;
                uint64_t v401 = 0;
                uint64_t v402 = *(void *)(v76 + 152);
                v403 = v285[19];
                uint64_t v404 = v75[19];
                do
                {
                  if (*(unsigned char *)(v402 + v401)) {
                    BOOL v405 = *((unsigned char *)v403 + v400) == 0;
                  }
                  else {
                    BOOL v405 = 1;
                  }
                  char v406 = !v405;
                  *(unsigned char *)(v404 + v399) = v406;
                  v401 += **(void **)(*a1 + 24);
                  v400 += **(void **)(*a2 + 24);
                  ++v399;
                }
                while (v399 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v630 = *v77;
              if (*v77)
              {
                unint64_t v631 = 0;
                uint64_t v632 = 0;
                uint64_t v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = *(void *)(v76 + 152);
                v636 = v285[19];
                uint64_t v637 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    unint64_t v638 = 0;
                    do
                    {
                      if (*(unsigned char *)(v635 + v634)) {
                        BOOL v639 = *((unsigned char *)v636 + v633) == 0;
                      }
                      else {
                        BOOL v639 = 1;
                      }
                      char v640 = !v639;
                      *(unsigned char *)(v637 + v632 + v638) = v640;
                      uint64_t v76 = *a1;
                      v641 = *(void **)(*a1 + 24);
                      uint64_t v642 = v641[1];
                      v634 += v642;
                      v285 = (int **)*a2;
                      v643 = *(int **)(*a2 + 24);
                      uint64_t v644 = *((void *)v643 + 1);
                      v633 += v644;
                      ++v638;
                      uint64_t v77 = *(int **)*a1;
                      unint64_t v645 = v77[1];
                    }
                    while (v638 < v645);
                    int v630 = *v77;
                    v286 = *v285;
                    v632 += v638;
                  }
                  else
                  {
                    unint64_t v645 = 0;
                    v641 = *(void **)(v76 + 24);
                    uint64_t v642 = v641[1];
                    v643 = v285[3];
                    uint64_t v644 = *((void *)v643 + 1);
                  }
                  uint64_t v634 = *v641 + v634 - v645 * v642;
                  uint64_t v633 = *(void *)v643 + v633 - v644 * v286[1];
                  ++v631;
                }
                while (v631 < v630);
              }
              break;
            case 3uLL:
              int v646 = *v77;
              if (*v77)
              {
                unint64_t v647 = 0;
                uint64_t v648 = 0;
                uint64_t v649 = 0;
                uint64_t v650 = 0;
                uint64_t v651 = *(void *)(v76 + 152);
                v652 = v285[19];
                uint64_t v653 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    unint64_t v654 = 0;
                    do
                    {
                      if (v77[2])
                      {
                        unint64_t v655 = 0;
                        do
                        {
                          if (*(unsigned char *)(v651 + v650)) {
                            BOOL v656 = *((unsigned char *)v652 + v649) == 0;
                          }
                          else {
                            BOOL v656 = 1;
                          }
                          char v657 = !v656;
                          *(unsigned char *)(v653 + v648 + v655) = v657;
                          uint64_t v76 = *a1;
                          v658 = *(void **)(*a1 + 24);
                          uint64_t v659 = v658[2];
                          v650 += v659;
                          v285 = (int **)*a2;
                          v660 = *(int **)(*a2 + 24);
                          uint64_t v661 = *((void *)v660 + 2);
                          v649 += v661;
                          ++v655;
                          uint64_t v77 = *(int **)*a1;
                          unint64_t v662 = v77[2];
                        }
                        while (v655 < v662);
                        v286 = *v285;
                        v648 += v655;
                      }
                      else
                      {
                        unint64_t v662 = 0;
                        v658 = *(void **)(v76 + 24);
                        uint64_t v659 = v658[2];
                        v660 = v285[3];
                        uint64_t v661 = *((void *)v660 + 2);
                      }
                      uint64_t v663 = v658[1];
                      uint64_t v650 = v663 + v650 - v662 * v659;
                      uint64_t v649 = *((void *)v660 + 1) + v649 - v661 * v286[2];
                      ++v654;
                      unint64_t v664 = v77[1];
                    }
                    while (v654 < v664);
                    int v646 = *v77;
                  }
                  else
                  {
                    unint64_t v664 = 0;
                    v658 = *(void **)(v76 + 24);
                    uint64_t v663 = v658[1];
                  }
                  uint64_t v650 = *v658 + v650 - v664 * v663;
                  uint64_t v649 = *(void *)v285[3] + v649 - *((void *)v285[3] + 1) * v286[1];
                  ++v647;
                }
                while (v647 < v646);
              }
              break;
            case 4uLL:
              int v665 = *v77;
              if (*v77)
              {
                unint64_t v666 = 0;
                uint64_t v667 = 0;
                uint64_t v668 = 0;
                uint64_t v669 = 0;
                uint64_t v670 = *(void *)(v76 + 152);
                v671 = v285[19];
                uint64_t v672 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    unint64_t v673 = 0;
                    do
                    {
                      if (v77[2])
                      {
                        unint64_t v674 = 0;
                        do
                        {
                          if (v77[3])
                          {
                            unint64_t v675 = 0;
                            do
                            {
                              if (*(unsigned char *)(v670 + v669)) {
                                BOOL v676 = *((unsigned char *)v671 + v668) == 0;
                              }
                              else {
                                BOOL v676 = 1;
                              }
                              char v677 = !v676;
                              *(unsigned char *)(v672 + v667 + v675) = v677;
                              uint64_t v76 = *a1;
                              v678 = *(void **)(*a1 + 24);
                              uint64_t v679 = v678[3];
                              v669 += v679;
                              v285 = (int **)*a2;
                              v680 = *(int **)(*a2 + 24);
                              uint64_t v681 = *((void *)v680 + 3);
                              v668 += v681;
                              ++v675;
                              uint64_t v77 = *(int **)*a1;
                              unint64_t v682 = v77[3];
                            }
                            while (v675 < v682);
                            v286 = *v285;
                            v667 += v675;
                          }
                          else
                          {
                            unint64_t v682 = 0;
                            v678 = *(void **)(v76 + 24);
                            uint64_t v679 = v678[3];
                            v680 = v285[3];
                            uint64_t v681 = *((void *)v680 + 3);
                          }
                          uint64_t v683 = v678[2];
                          uint64_t v669 = v683 + v669 - v682 * v679;
                          uint64_t v668 = *((void *)v680 + 2) + v668 - v681 * v286[3];
                          ++v674;
                          unint64_t v684 = v77[2];
                        }
                        while (v674 < v684);
                      }
                      else
                      {
                        unint64_t v684 = 0;
                        v678 = *(void **)(v76 + 24);
                        uint64_t v683 = v678[2];
                      }
                      uint64_t v669 = v678[1] + v669 - v684 * v683;
                      uint64_t v668 = *((void *)v285[3] + 1) + v668 - *((void *)v285[3] + 2) * v286[2];
                      ++v673;
                      unint64_t v685 = v77[1];
                    }
                    while (v673 < v685);
                    int v665 = *v77;
                  }
                  else
                  {
                    unint64_t v685 = 0;
                  }
                  uint64_t v669 = **(void **)(v76 + 24) + v669 - *(void *)(*(void *)(v76 + 24) + 8) * v685;
                  uint64_t v668 = *(void *)v285[3] + v668 - *((void *)v285[3] + 1) * v286[1];
                  ++v666;
                }
                while (v666 < v665);
              }
              break;
            default:
              if (v75[6])
              {
                unint64_t v612 = 0;
                v2193 = v285[19];
                uint64_t v2211 = *(void *)(v76 + 152);
                uint64_t v613 = v75[19];
                do
                {
                  uint64_t v614 = *(void *)*a1;
                  unint64_t v615 = (unint64_t)(*(void *)(*a1 + 8) - v614) >> 2;
                  uint64_t v616 = 0;
                  uint64_t v617 = (v615 - 1);
                  if ((int)v615 - 1 >= 0)
                  {
                    uint64_t v618 = *(void *)(*a1 + 24);
                    int v619 = v612;
                    do
                    {
                      ldiv_t v620 = ldiv(v619, *(int *)(v614 + 4 * v617));
                      int v619 = v620.quot;
                      v616 += *(void *)(v618 + 8 * v617--) * v620.rem;
                    }
                    while (v617 != -1);
                  }
                  uint64_t v621 = *(void *)*a2;
                  unint64_t v622 = (unint64_t)(*(void *)(*a2 + 8) - v621) >> 2;
                  uint64_t v623 = 0;
                  uint64_t v624 = (v622 - 1);
                  if ((int)v622 - 1 >= 0)
                  {
                    uint64_t v625 = *(void *)(*a2 + 24);
                    int v626 = v612;
                    do
                    {
                      ldiv_t v627 = ldiv(v626, *(int *)(v621 + 4 * v624));
                      int v626 = v627.quot;
                      v623 += *(void *)(v625 + 8 * v624--) * v627.rem;
                    }
                    while (v624 != -1);
                  }
                  if (*(unsigned char *)(v2211 + (int)v616)) {
                    BOOL v628 = *((unsigned char *)v2193 + (int)v623) == 0;
                  }
                  else {
                    BOOL v628 = 1;
                  }
                  char v629 = !v628;
                  *(unsigned char *)(v613 + v612++) = v629;
                }
                while (v612 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v18)
      {
        case 0:
          goto LABEL_37;
        case 1:
          int v19 = *(_DWORD *)(*a2 + 160);
          if (v19 >= 1)
          {
            ldiv_t v20 = *(int **)(*(void *)a3 + 152);
            uint64_t v21 = *(int **)(*a2 + 152);
            int v22 = **(_DWORD **)(*a1 + 152);
            unsigned int v23 = v19 + 1;
            do
            {
              int v25 = *v21++;
              int v24 = v25;
              if (v22) {
                BOOL v26 = v24 == 0;
              }
              else {
                BOOL v26 = 1;
              }
              int v27 = !v26;
              *v20++ = v27;
              --v23;
            }
            while (v23 > 1);
          }
          return;
        case 2:
          int v112 = *(_DWORD *)(*a1 + 160);
          if (v112 >= 1)
          {
            uint64_t v113 = *(int **)(*(void *)a3 + 152);
            v114 = *(int **)(*a1 + 152);
            int v115 = **(_DWORD **)(*a2 + 152);
            unsigned int v116 = v112 + 1;
            do
            {
              int v118 = *v114++;
              int v117 = v118;
              if (v115) {
                BOOL v119 = v117 == 0;
              }
              else {
                BOOL v119 = 1;
              }
              int v120 = !v119;
              *v113++ = v120;
              --v116;
            }
            while (v116 > 1);
          }
          return;
        case 3:
          int v121 = *(_DWORD *)(*(void *)a3 + 48);
          if (v121 >= 1)
          {
            uint64_t v122 = *(int **)(*(void *)a3 + 152);
            uint64_t v123 = *(int **)(*a2 + 152);
            float v124 = *(int **)(*a1 + 152);
            unsigned int v125 = v121 + 1;
            do
            {
              int v127 = *v124++;
              int v126 = v127;
              int v129 = *v123++;
              int v128 = v129;
              if (v126) {
                BOOL v130 = v128 == 0;
              }
              else {
                BOOL v130 = 1;
              }
              int v131 = !v130;
              *v122++ = v131;
              --v125;
            }
            while (v125 > 1);
          }
          return;
        default:
          uint64_t v103 = *(void **)a3;
          v104 = (void *)*a1;
          int v105 = *(int **)*a1;
          uint64_t v106 = (v104[1] - (void)v105) >> 2;
          uint64_t v107 = (v106 - 1);
          if ((int)v107 >= -1) {
            int v108 = -1;
          }
          else {
            int v108 = v106 - 1;
          }
          int v109 = v108 + 1;
          int v110 = v106 + 1;
          break;
      }
      while (1)
      {
        unsigned int v111 = v110 - 2;
        if (v110 - 2 < 0) {
          break;
        }
        --v110;
        if (*(void *)(v104[3] + 8 * v111) != *(void *)(v103[3] + 8 * v111)) {
          goto LABEL_297;
        }
      }
      int v110 = v109;
LABEL_297:
      v292 = (void *)*a2;
      v293 = *(int **)*a2;
      uint64_t v294 = (v292[1] - (void)v293) >> 2;
      uint64_t v295 = (v294 - 1);
      if ((int)v295 >= -1) {
        int v296 = -1;
      }
      else {
        int v296 = v294 - 1;
      }
      int v297 = v296 + 1;
      int v298 = v294 + 1;
      while (1)
      {
        unsigned int v299 = v298 - 2;
        if (v298 - 2 < 0) {
          break;
        }
        --v298;
        if (*(void *)(v292[3] + 8 * v299) != *(void *)(v103[3] + 8 * v299)) {
          goto LABEL_346;
        }
      }
      int v298 = v297;
LABEL_346:
      int v335 = v106 + 1;
      while (1)
      {
        unsigned int v336 = v335 - 2;
        if (v335 - 2 < 0) {
          break;
        }
        --v335;
        if (*(void *)(v104[3] + 8 * v336)) {
          goto LABEL_381;
        }
      }
      int v335 = v109;
LABEL_381:
      int v349 = v294 + 1;
      while (1)
      {
        unsigned int v350 = v349 - 2;
        if (v349 - 2 < 0) {
          break;
        }
        --v349;
        if (*(void *)(v292[3] + 8 * v350)) {
          goto LABEL_501;
        }
      }
      int v349 = v297;
LABEL_501:
      unint64_t v407 = (uint64_t)(v103[1] - *v103) >> 2;
      if (v110 <= v298) {
        int v408 = v298;
      }
      else {
        int v408 = v110;
      }
      if (v110 <= v349) {
        int v110 = v349;
      }
      if (v335 > v298) {
        int v298 = v335;
      }
      if (v407 > v298)
      {
        int v409 = 1;
      }
      else
      {
        int v298 = (uint64_t)(v103[1] - *v103) >> 2;
        int v409 = 4;
      }
      if (v407 > v110)
      {
        int v410 = 2;
      }
      else
      {
        int v110 = v298;
        int v410 = v409;
      }
      if (v407 > v408)
      {
        int v110 = v408;
        int v410 = 3;
      }
      uint64_t v2188 = v295;
      uint64_t v2205 = v107;
      if (!v110) {
        goto LABEL_537;
      }
      unint64_t v411 = *(void *)(v103[3] + 8 * (v110 - 1));
      if (v411 < 0x10) {
        goto LABEL_537;
      }
      switch(v410)
      {
        case 1:
          if (v110 == 2)
          {
            int v1694 = *v105;
            if (*v105)
            {
              unint64_t v1695 = 0;
              uint64_t v1696 = 0;
              uint64_t v1697 = 0;
              uint64_t v1698 = v104[19];
              uint64_t v1699 = v292[19];
              uint64_t v1700 = v103[19];
              v1701 = (uint64_t *)v104[3];
              uint64_t v1702 = *v1701;
              uint64_t v1703 = v1701[1];
              v1704 = (uint64_t *)v292[3];
              uint64_t v1705 = *v1704;
              uint64_t v1706 = v1704[1];
              int v1707 = v105[1];
              int v1708 = v1707;
              do
              {
                if (v1708)
                {
                  unint64_t v1709 = 0;
                  uint64_t v1710 = v1699 + 4 * v1696;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      uint64_t v1711 = 0;
                      int v1712 = *(_DWORD *)(v1698 + 4 * v1697);
                      unsigned int v1713 = v411 + 1;
                      do
                      {
                        if (v1712) {
                          BOOL v1714 = *(_DWORD *)(v1710 + v1711) == 0;
                        }
                        else {
                          BOOL v1714 = 1;
                        }
                        int v1715 = !v1714;
                        *(_DWORD *)(v1700 + v1711) = v1715;
                        --v1713;
                        v1711 += 4;
                      }
                      while (v1713 > 1);
                      int v1707 = v105[1];
                    }
                    v1697 += v1703;
                    v1696 += v1706;
                    v1700 += 4 * (int)v411;
                    ++v1709;
                    v1710 += 4 * v1706;
                  }
                  while (v1709 < v1707);
                  uint64_t v1716 = v1707;
                  int v1694 = *v105;
                  int v1708 = v1707;
                }
                else
                {
                  uint64_t v1716 = 0;
                }
                uint64_t v1697 = v1697 + v1702 - v1716 * v1703;
                uint64_t v1696 = v1696 + v1705 - v1706 * v293[1];
                ++v1695;
              }
              while (v1695 < v1694);
            }
          }
          else if (v110 == 1)
          {
            int v1160 = *v105;
            if (*v105)
            {
              unint64_t v1161 = 0;
              uint64_t v1162 = 0;
              uint64_t v1163 = v104[19];
              uint64_t v1164 = v292[19];
              uint64_t v1165 = v103[19];
              uint64_t v1166 = *(void *)v104[3];
              uint64_t v1167 = 4 * *(void *)v292[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  uint64_t v1168 = 0;
                  int v1169 = *(_DWORD *)(v1163 + 4 * v1162);
                  unsigned int v1170 = v411 + 1;
                  do
                  {
                    if (v1169) {
                      BOOL v1171 = *(_DWORD *)(v1164 + v1168) == 0;
                    }
                    else {
                      BOOL v1171 = 1;
                    }
                    int v1172 = !v1171;
                    *(_DWORD *)(v1165 + v1168) = v1172;
                    --v1170;
                    v1168 += 4;
                  }
                  while (v1170 > 1);
                  int v1160 = *v105;
                }
                v1162 += v1166;
                ++v1161;
                v1165 += 4 * (int)v411;
                v1164 += v1167;
              }
              while (v1161 < v1160);
            }
          }
          else
          {
            unint64_t v2148 = v103[6];
            if (v2148)
            {
              unint64_t v2177 = 0;
              uint64_t v2082 = v292[19];
              uint64_t v2097 = v104[19];
              uint64_t v1717 = v103[19];
              do
              {
                uint64_t v1718 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  uint64_t v1719 = v104[3];
                  uint64_t v1720 = v107;
                  int v1721 = v2177;
                  do
                  {
                    ldiv_t v1722 = ldiv(v1721, v105[v1720]);
                    int v1721 = v1722.quot;
                    v1718 += *(void *)(v1719 + 8 * v1720--) * v1722.rem;
                  }
                  while (v1720 != -1);
                }
                uint64_t v1723 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1724) = 0;
                }
                else
                {
                  uint64_t v1724 = 0;
                  uint64_t v1725 = v292[3];
                  int v1726 = v2177;
                  do
                  {
                    ldiv_t v1727 = ldiv(v1726, v293[v1723]);
                    int v1726 = v1727.quot;
                    v1724 += *(void *)(v1725 + 8 * v1723--) * v1727.rem;
                  }
                  while (v1723 != -1);
                }
                uint64_t v107 = v2205;
                if ((int)v411 >= 1)
                {
                  uint64_t v1728 = 0;
                  int v1729 = *(_DWORD *)(v2097 + 4 * (int)v1718);
                  unsigned int v1730 = v411 + 1;
                  do
                  {
                    if (v1729) {
                      BOOL v1731 = *(_DWORD *)(v2082 + 4 * (int)v1724 + v1728) == 0;
                    }
                    else {
                      BOOL v1731 = 1;
                    }
                    int v1732 = !v1731;
                    *(_DWORD *)(v1717 + v1728) = v1732;
                    --v1730;
                    v1728 += 4;
                  }
                  while (v1730 > 1);
                }
                v1717 += 4 * (int)v411;
                v2177 += (int)v411;
              }
              while (v2177 < v2148);
            }
          }
          break;
        case 2:
          if (v110 == 2)
          {
            int v1733 = *v105;
            if (*v105)
            {
              unint64_t v1734 = 0;
              uint64_t v1735 = 0;
              uint64_t v1736 = 0;
              uint64_t v1737 = v104[19];
              uint64_t v1738 = v292[19];
              uint64_t v1739 = v103[19];
              v1740 = (uint64_t *)v104[3];
              uint64_t v1741 = *v1740;
              uint64_t v1742 = v1740[1];
              v1743 = (uint64_t *)v292[3];
              uint64_t v1744 = *v1743;
              uint64_t v1745 = v1743[1];
              int v1746 = v105[1];
              int v1747 = v1746;
              do
              {
                if (v1747)
                {
                  unint64_t v1748 = 0;
                  uint64_t v1749 = v1737 + 4 * v1736;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      uint64_t v1750 = 0;
                      int v1751 = *(_DWORD *)(v1738 + 4 * v1735);
                      unsigned int v1752 = v411 + 1;
                      do
                      {
                        if (v1751) {
                          BOOL v1753 = *(_DWORD *)(v1749 + v1750) == 0;
                        }
                        else {
                          BOOL v1753 = 1;
                        }
                        int v1754 = !v1753;
                        *(_DWORD *)(v1739 + v1750) = v1754;
                        --v1752;
                        v1750 += 4;
                      }
                      while (v1752 > 1);
                      int v1746 = v105[1];
                    }
                    v1736 += v1742;
                    v1735 += v1745;
                    v1739 += 4 * (int)v411;
                    ++v1748;
                    v1749 += 4 * v1742;
                  }
                  while (v1748 < v1746);
                  uint64_t v1755 = v1746;
                  int v1733 = *v105;
                  int v1747 = v1746;
                }
                else
                {
                  uint64_t v1755 = 0;
                }
                uint64_t v1736 = v1736 + v1741 - v1755 * v1742;
                uint64_t v1735 = v1735 + v1744 - v1745 * v293[1];
                ++v1734;
              }
              while (v1734 < v1733);
            }
          }
          else if (v110 == 1)
          {
            int v1173 = *v105;
            if (*v105)
            {
              unint64_t v1174 = 0;
              uint64_t v1175 = 0;
              uint64_t v1176 = v104[19];
              uint64_t v1177 = v292[19];
              uint64_t v1178 = v103[19];
              uint64_t v1179 = *(void *)v292[3];
              uint64_t v1180 = 4 * *(void *)v104[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  uint64_t v1181 = 0;
                  int v1182 = *(_DWORD *)(v1177 + 4 * v1175);
                  unsigned int v1183 = v411 + 1;
                  do
                  {
                    if (v1182) {
                      BOOL v1184 = *(_DWORD *)(v1176 + v1181) == 0;
                    }
                    else {
                      BOOL v1184 = 1;
                    }
                    int v1185 = !v1184;
                    *(_DWORD *)(v1178 + v1181) = v1185;
                    --v1183;
                    v1181 += 4;
                  }
                  while (v1183 > 1);
                  int v1173 = *v105;
                }
                v1175 += v1179;
                ++v1174;
                v1178 += 4 * (int)v411;
                v1176 += v1180;
              }
              while (v1174 < v1173);
            }
          }
          else
          {
            unint64_t v2149 = v103[6];
            if (v2149)
            {
              unint64_t v2178 = 0;
              uint64_t v2083 = v292[19];
              uint64_t v2098 = v104[19];
              uint64_t v1756 = v103[19];
              do
              {
                uint64_t v1757 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  uint64_t v1758 = v104[3];
                  uint64_t v1759 = v107;
                  int v1760 = v2178;
                  do
                  {
                    ldiv_t v1761 = ldiv(v1760, v105[v1759]);
                    int v1760 = v1761.quot;
                    v1757 += *(void *)(v1758 + 8 * v1759--) * v1761.rem;
                  }
                  while (v1759 != -1);
                }
                uint64_t v1762 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1763) = 0;
                }
                else
                {
                  uint64_t v1763 = 0;
                  uint64_t v1764 = v292[3];
                  int v1765 = v2178;
                  do
                  {
                    ldiv_t v1766 = ldiv(v1765, v293[v1762]);
                    int v1765 = v1766.quot;
                    v1763 += *(void *)(v1764 + 8 * v1762--) * v1766.rem;
                  }
                  while (v1762 != -1);
                }
                uint64_t v107 = v2205;
                if ((int)v411 >= 1)
                {
                  uint64_t v1767 = 0;
                  int v1768 = *(_DWORD *)(v2083 + 4 * (int)v1763);
                  unsigned int v1769 = v411 + 1;
                  do
                  {
                    if (v1768) {
                      BOOL v1770 = *(_DWORD *)(v2098 + 4 * (int)v1757 + v1767) == 0;
                    }
                    else {
                      BOOL v1770 = 1;
                    }
                    int v1771 = !v1770;
                    *(_DWORD *)(v1756 + v1767) = v1771;
                    --v1769;
                    v1767 += 4;
                  }
                  while (v1769 > 1);
                }
                v1756 += 4 * (int)v411;
                v2178 += (int)v411;
              }
              while (v2178 < v2149);
            }
          }
          break;
        case 3:
          if (v110 == 2)
          {
            int v1358 = *v105;
            if (*v105)
            {
              unint64_t v1359 = 0;
              uint64_t v1360 = 0;
              uint64_t v1361 = 0;
              uint64_t v1362 = v104[19];
              uint64_t v1363 = v292[19];
              uint64_t v1364 = v103[19];
              v1365 = (uint64_t *)v104[3];
              uint64_t v1366 = *v1365;
              uint64_t v1367 = v1365[1];
              v1368 = (uint64_t *)v292[3];
              uint64_t v1369 = *v1368;
              uint64_t v1370 = v1368[1];
              int v1371 = v105[1];
              int v1372 = v1371;
              do
              {
                if (v1372)
                {
                  unint64_t v1373 = 0;
                  uint64_t v1374 = v1363 + 4 * v1360;
                  uint64_t v1375 = v1362 + 4 * v1361;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      uint64_t v1376 = 0;
                      unsigned int v1377 = v411 + 1;
                      do
                      {
                        if (*(_DWORD *)(v1375 + v1376)) {
                          BOOL v1378 = *(_DWORD *)(v1374 + v1376) == 0;
                        }
                        else {
                          BOOL v1378 = 1;
                        }
                        int v1379 = !v1378;
                        *(_DWORD *)(v1364 + v1376) = v1379;
                        --v1377;
                        v1376 += 4;
                      }
                      while (v1377 > 1);
                      int v1371 = v105[1];
                    }
                    v1361 += v1367;
                    v1360 += v1370;
                    v1364 += 4 * (int)v411;
                    ++v1373;
                    v1374 += 4 * v1370;
                    v1375 += 4 * v1367;
                  }
                  while (v1373 < v1371);
                  uint64_t v1380 = v1371;
                  int v1358 = *v105;
                  int v1372 = v1371;
                }
                else
                {
                  uint64_t v1380 = 0;
                }
                uint64_t v1361 = v1361 + v1366 - v1380 * v1367;
                uint64_t v1360 = v1360 + v1369 - v1370 * v293[1];
                ++v1359;
              }
              while (v1359 < v1358);
            }
          }
          else if (v110 == 1)
          {
            int v412 = *v105;
            if (*v105)
            {
              unint64_t v413 = 0;
              uint64_t v414 = v104[19];
              uint64_t v415 = v292[19];
              uint64_t v416 = v103[19];
              uint64_t v417 = 4 * *(void *)v292[3];
              uint64_t v418 = 4 * *(void *)v104[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  uint64_t v419 = 0;
                  unsigned int v420 = v411 + 1;
                  do
                  {
                    if (*(_DWORD *)(v414 + v419)) {
                      BOOL v421 = *(_DWORD *)(v415 + v419) == 0;
                    }
                    else {
                      BOOL v421 = 1;
                    }
                    int v422 = !v421;
                    *(_DWORD *)(v416 + v419) = v422;
                    --v420;
                    v419 += 4;
                  }
                  while (v420 > 1);
                  int v412 = *v105;
                }
                ++v413;
                v416 += 4 * (int)v411;
                v415 += v417;
                v414 += v418;
              }
              while (v413 < v412);
            }
          }
          else
          {
            unint64_t v2139 = v103[6];
            if (v2139)
            {
              unint64_t v2168 = 0;
              uint64_t v2078 = v292[19];
              uint64_t v2091 = v104[19];
              uint64_t v1381 = v103[19];
              do
              {
                uint64_t v1382 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  uint64_t v1383 = v104[3];
                  uint64_t v1384 = v107;
                  int v1385 = v2168;
                  do
                  {
                    ldiv_t v1386 = ldiv(v1385, v105[v1384]);
                    int v1385 = v1386.quot;
                    v1382 += *(void *)(v1383 + 8 * v1384--) * v1386.rem;
                  }
                  while (v1384 != -1);
                }
                uint64_t v1387 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1388) = 0;
                }
                else
                {
                  uint64_t v1388 = 0;
                  uint64_t v1389 = v292[3];
                  int v1390 = v2168;
                  do
                  {
                    ldiv_t v1391 = ldiv(v1390, v293[v1387]);
                    int v1390 = v1391.quot;
                    v1388 += *(void *)(v1389 + 8 * v1387--) * v1391.rem;
                  }
                  while (v1387 != -1);
                }
                uint64_t v107 = v2205;
                if ((int)v411 >= 1)
                {
                  uint64_t v1392 = 0;
                  unsigned int v1393 = v411 + 1;
                  do
                  {
                    if (*(_DWORD *)(v2091 + 4 * (int)v1382 + v1392)) {
                      BOOL v1394 = *(_DWORD *)(v2078 + 4 * (int)v1388 + v1392) == 0;
                    }
                    else {
                      BOOL v1394 = 1;
                    }
                    int v1395 = !v1394;
                    *(_DWORD *)(v1381 + v1392) = v1395;
                    --v1393;
                    v1392 += 4;
                  }
                  while (v1393 > 1);
                }
                v1381 += 4 * (int)v411;
                v2168 += (int)v411;
              }
              while (v2168 < v2139);
            }
          }
          break;
        default:
LABEL_537:
          switch(v407)
          {
            case 1uLL:
              uint64_t v423 = v103[6];
              if (v423)
              {
                v424 = (_DWORD *)v104[19];
                v425 = (_DWORD *)v292[19];
                v426 = (int *)v103[19];
                uint64_t v427 = 4 * *(void *)v292[3];
                uint64_t v428 = 4 * *(void *)v104[3];
                do
                {
                  if (*v424) {
                    BOOL v429 = *v425 == 0;
                  }
                  else {
                    BOOL v429 = 1;
                  }
                  int v430 = !v429;
                  *v426++ = v430;
                  v425 = (_DWORD *)((char *)v425 + v427);
                  v424 = (_DWORD *)((char *)v424 + v428);
                  --v423;
                }
                while (v423);
              }
              break;
            case 2uLL:
              int v700 = *v105;
              if (*v105)
              {
                unint64_t v701 = 0;
                uint64_t v702 = 0;
                uint64_t v703 = 0;
                uint64_t v704 = 0;
                uint64_t v705 = v104[19];
                uint64_t v706 = v292[19];
                uint64_t v707 = v103[19];
                v708 = (uint64_t *)v104[3];
                uint64_t v709 = *v708;
                uint64_t v710 = v708[1];
                v711 = (uint64_t *)v292[3];
                uint64_t v713 = *v711;
                uint64_t v712 = v711[1];
                int v714 = v105[1];
                do
                {
                  if (v714)
                  {
                    for (unint64_t i = 0; i < v714; ++i)
                    {
                      if (*(_DWORD *)(v705 + 4 * v704)) {
                        BOOL v716 = *(_DWORD *)(v706 + 4 * v703) == 0;
                      }
                      else {
                        BOOL v716 = 1;
                      }
                      int v717 = !v716;
                      *(_DWORD *)(v707 + 4 * v702 + 4 * i) = v717;
                      v704 += v710;
                      v703 += v712;
                      int v714 = v105[1];
                    }
                    uint64_t v718 = v714;
                    int v700 = *v105;
                    v702 += i;
                  }
                  else
                  {
                    uint64_t v718 = 0;
                  }
                  uint64_t v704 = v704 + v709 - v718 * v710;
                  uint64_t v703 = v703 + v713 - v712 * v293[1];
                  ++v701;
                }
                while (v701 < v700);
              }
              break;
            case 3uLL:
              int v719 = *v105;
              if (*v105)
              {
                unint64_t v720 = 0;
                uint64_t v721 = 0;
                uint64_t v722 = 0;
                uint64_t v723 = 0;
                uint64_t v724 = v104[19];
                uint64_t v725 = v292[19];
                uint64_t v726 = v103[19];
                v727 = (uint64_t *)v104[3];
                uint64_t v728 = *v727;
                uint64_t v729 = v727[1];
                v730 = (uint64_t *)v292[3];
                uint64_t v731 = *v730;
                uint64_t v732 = v730[1];
                int v733 = v105[1];
                int v734 = v733;
                do
                {
                  if (v734)
                  {
                    unint64_t v735 = 0;
                    uint64_t v736 = v727[2];
                    uint64_t v737 = v730[2];
                    int v738 = v105[2];
                    do
                    {
                      if (v738)
                      {
                        for (unint64_t j = 0; j < v738; ++j)
                        {
                          if (*(_DWORD *)(v724 + 4 * v723)) {
                            BOOL v740 = *(_DWORD *)(v725 + 4 * v722) == 0;
                          }
                          else {
                            BOOL v740 = 1;
                          }
                          int v741 = !v740;
                          *(_DWORD *)(v726 + 4 * v721 + 4 * j) = v741;
                          v723 += v736;
                          v722 += v737;
                          int v738 = v105[2];
                        }
                        uint64_t v742 = v738;
                        int v733 = v105[1];
                        v721 += j;
                      }
                      else
                      {
                        uint64_t v742 = 0;
                      }
                      uint64_t v723 = v723 + v729 - v742 * v736;
                      uint64_t v722 = v722 + v732 - v737 * v293[2];
                      ++v735;
                    }
                    while (v735 < v733);
                    uint64_t v743 = v733;
                    int v719 = *v105;
                    int v734 = v733;
                  }
                  else
                  {
                    uint64_t v743 = 0;
                  }
                  uint64_t v723 = v723 + v728 - v743 * v729;
                  uint64_t v722 = v722 + v731 - v732 * v293[1];
                  ++v720;
                }
                while (v720 < v719);
              }
              break;
            case 4uLL:
              int v744 = *v105;
              if (*v105)
              {
                unint64_t v745 = 0;
                uint64_t v746 = 0;
                uint64_t v747 = 0;
                uint64_t v748 = 0;
                uint64_t v749 = v104[19];
                uint64_t v750 = v292[19];
                uint64_t v751 = v103[19];
                v752 = (uint64_t *)v104[3];
                uint64_t v753 = *v752;
                uint64_t v754 = v752[1];
                v755 = (uint64_t *)v292[3];
                uint64_t v756 = *v755;
                uint64_t v757 = v755[1];
                int v758 = v105[1];
                int v759 = v758;
                do
                {
                  if (v759)
                  {
                    unint64_t v760 = 0;
                    uint64_t v761 = v752[2];
                    uint64_t v762 = v755[2];
                    int v763 = v105[2];
                    int v764 = v763;
                    do
                    {
                      if (v764)
                      {
                        unint64_t v765 = 0;
                        uint64_t v766 = v752[3];
                        uint64_t v767 = v755[3];
                        int v768 = v105[3];
                        do
                        {
                          if (v768)
                          {
                            for (unint64_t k = 0; k < v768; ++k)
                            {
                              if (*(_DWORD *)(v749 + 4 * v748)) {
                                BOOL v770 = *(_DWORD *)(v750 + 4 * v747) == 0;
                              }
                              else {
                                BOOL v770 = 1;
                              }
                              int v771 = !v770;
                              *(_DWORD *)(v751 + 4 * v746 + 4 * k) = v771;
                              v748 += v766;
                              v747 += v767;
                              int v768 = v105[3];
                            }
                            uint64_t v772 = v768;
                            int v763 = v105[2];
                            v746 += k;
                          }
                          else
                          {
                            uint64_t v772 = 0;
                          }
                          uint64_t v748 = v748 + v761 - v772 * v766;
                          uint64_t v747 = v747 + v762 - v767 * v293[3];
                          ++v765;
                        }
                        while (v765 < v763);
                        uint64_t v773 = v763;
                        int v758 = v105[1];
                        int v764 = v763;
                      }
                      else
                      {
                        uint64_t v773 = 0;
                      }
                      uint64_t v748 = v748 + v754 - v773 * v761;
                      uint64_t v747 = v747 + v757 - v762 * v293[2];
                      ++v760;
                    }
                    while (v760 < v758);
                    uint64_t v774 = v758;
                    int v744 = *v105;
                    int v759 = v758;
                  }
                  else
                  {
                    uint64_t v774 = 0;
                  }
                  uint64_t v748 = v748 + v753 - v774 * v754;
                  uint64_t v747 = v747 + v756 - v757 * v293[1];
                  ++v745;
                }
                while (v745 < v744);
              }
              break;
            default:
              uint64_t v686 = v103[6];
              if (v686)
              {
                uint64_t v687 = 0;
                uint64_t v2131 = v292[19];
                uint64_t v2160 = v104[19];
                uint64_t v2117 = v103[19];
                do
                {
                  uint64_t v688 = 0;
                  if ((v107 & 0x80000000) == 0)
                  {
                    uint64_t v689 = v104[3];
                    uint64_t v690 = v107;
                    int v691 = v687;
                    do
                    {
                      ldiv_t v692 = ldiv(v691, v105[v690]);
                      int v691 = v692.quot;
                      v688 += *(void *)(v689 + 8 * v690--) * v692.rem;
                    }
                    while (v690 != -1);
                  }
                  uint64_t v693 = v2188;
                  if ((v2188 & 0x80000000) != 0)
                  {
                    LODWORD(v694) = 0;
                  }
                  else
                  {
                    uint64_t v694 = 0;
                    uint64_t v695 = v292[3];
                    int v696 = v687;
                    do
                    {
                      ldiv_t v697 = ldiv(v696, v293[v693]);
                      int v696 = v697.quot;
                      v694 += *(void *)(v695 + 8 * v693--) * v697.rem;
                    }
                    while (v693 != -1);
                  }
                  if (*(_DWORD *)(v2160 + 4 * (int)v688)) {
                    BOOL v698 = *(_DWORD *)(v2131 + 4 * (int)v694) == 0;
                  }
                  else {
                    BOOL v698 = 1;
                  }
                  int v699 = !v698;
                  *(_DWORD *)(v2117 + 4 * v687++) = v699;
                  uint64_t v107 = v2205;
                }
                while (v687 != v686);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v28)
      {
        case 0:
LABEL_29:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
LABEL_32:
          char v29 = !v7;
          **(unsigned char **)(*(void *)a3 + 152) = v29;
          return;
        case 1:
          int v140 = *(_DWORD *)(*a2 + 160);
          if (v140 >= 1)
          {
            v141 = *(char **)(*(void *)a3 + 152);
            v142 = *(unsigned __int8 **)(*a2 + 152);
            int v143 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v144 = v140 + 1;
            do
            {
              int v146 = *v142++;
              int v145 = v146;
              if (v143) {
                BOOL v147 = v145 == 0;
              }
              else {
                BOOL v147 = 1;
              }
              char v148 = !v147;
              *v141++ = v148;
              --v144;
            }
            while (v144 > 1);
          }
          return;
        case 2:
          int v149 = *(_DWORD *)(*a1 + 160);
          if (v149 >= 1)
          {
            v150 = *(char **)(*(void *)a3 + 152);
            v151 = *(unsigned __int8 **)(*a1 + 152);
            int v152 = **(unsigned __int8 **)(*a2 + 152);
            unsigned int v153 = v149 + 1;
            do
            {
              int v155 = *v151++;
              int v154 = v155;
              if (v152) {
                BOOL v156 = v154 == 0;
              }
              else {
                BOOL v156 = 1;
              }
              char v157 = !v156;
              *v150++ = v157;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        case 3:
          int v158 = *(_DWORD *)(*(void *)a3 + 48);
          if (v158 >= 1)
          {
            v159 = *(char **)(*(void *)a3 + 152);
            v160 = *(unsigned __int8 **)(*a2 + 152);
            v161 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v162 = v158 + 1;
            do
            {
              int v164 = *v161++;
              int v163 = v164;
              int v166 = *v160++;
              int v165 = v166;
              if (v163) {
                BOOL v167 = v165 == 0;
              }
              else {
                BOOL v167 = 1;
              }
              char v168 = !v167;
              *v159++ = v168;
              --v162;
            }
            while (v162 > 1);
          }
          return;
        default:
          v132 = *(void **)a3;
          uint64_t v133 = *a1;
          v134 = *(int **)*a1;
          uint64_t v135 = (*(void *)(*a1 + 8) - (void)v134) >> 2;
          int v136 = v135 - 1;
          if ((int)v135 - 1 >= -1) {
            int v136 = -1;
          }
          int v137 = v136 + 1;
          int v138 = v135 + 1;
          while (1)
          {
            unsigned int v139 = v138 - 2;
            if (v138 - 2 < 0) {
              break;
            }
            --v138;
            if (*(void *)(*(void *)(v133 + 24) + 8 * v139) != *(void *)(v132[3] + 8 * v139)) {
              goto LABEL_305;
            }
          }
          int v138 = v137;
LABEL_305:
          v300 = (int **)*a2;
          v301 = *(int **)*a2;
          uint64_t v302 = (*(void *)(*a2 + 8) - (void)v301) >> 2;
          int v303 = v302 - 1;
          if ((int)v302 - 1 >= -1) {
            int v303 = -1;
          }
          int v304 = v303 + 1;
          int v305 = v302 + 1;
          while (1)
          {
            unsigned int v306 = v305 - 2;
            if (v305 - 2 < 0) {
              break;
            }
            --v305;
            if (*(void *)&v300[3][2 * v306] != *(void *)(v132[3] + 8 * v306)) {
              goto LABEL_351;
            }
          }
          int v305 = v304;
LABEL_351:
          int v337 = v135 + 1;
          while (1)
          {
            unsigned int v338 = v337 - 2;
            if (v337 - 2 < 0) {
              break;
            }
            --v337;
            if (*(void *)(*(void *)(v133 + 24) + 8 * v338)) {
              goto LABEL_386;
            }
          }
          int v337 = v137;
LABEL_386:
          int v351 = v302 + 1;
          while (1)
          {
            int v352 = v351 - 2;
            if (v351 - 2 < 0) {
              break;
            }
            --v351;
            if (*(void *)&v300[3][2 * v352]) {
              goto LABEL_549;
            }
          }
          int v351 = v304;
LABEL_549:
          unint64_t v431 = (uint64_t)(v132[1] - *v132) >> 2;
          if (v138 <= v305) {
            int v432 = v305;
          }
          else {
            int v432 = v138;
          }
          if (v138 <= v351) {
            int v138 = v351;
          }
          if (v337 > v305) {
            int v305 = v337;
          }
          if (v431 > v305)
          {
            int v433 = 1;
          }
          else
          {
            int v305 = (uint64_t)(v132[1] - *v132) >> 2;
            int v433 = 4;
          }
          if (v431 > v138)
          {
            int v434 = 2;
          }
          else
          {
            int v138 = v305;
            int v434 = v433;
          }
          if (v431 > v432)
          {
            int v138 = v432;
            int v434 = 3;
          }
          if (!v138) {
            goto LABEL_585;
          }
          unint64_t v435 = *(void *)(v132[3] + 8 * (v138 - 1));
          if (v435 < 0x10) {
            goto LABEL_585;
          }
          uint64_t v2206 = *(void *)(v132[3] + 8 * (v138 - 1));
          switch(v434)
          {
            case 1:
              if (v138 == 2)
              {
                int v1772 = *v134;
                if (*v134)
                {
                  unint64_t v1773 = 0;
                  uint64_t v1774 = 0;
                  uint64_t v1775 = 0;
                  uint64_t v1776 = *(void *)(v133 + 152);
                  v1777 = v300[19];
                  uint64_t v1778 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      unint64_t v1779 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          uint64_t v1780 = 0;
                          int v1781 = *(unsigned __int8 *)(v1776 + v1775);
                          unsigned int v1782 = v435 + 1;
                          do
                          {
                            if (v1781) {
                              BOOL v1783 = *((unsigned char *)v1777 + v1774 + v1780) == 0;
                            }
                            else {
                              BOOL v1783 = 1;
                            }
                            char v1784 = !v1783;
                            *(unsigned char *)(v1778 + v1780) = v1784;
                            --v1782;
                            ++v1780;
                          }
                          while (v1782 > 1);
                          uint64_t v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1785 = *(void **)(v133 + 24);
                        uint64_t v1786 = v1785[1];
                        v1775 += v1786;
                        v1774 += *((void *)v300[3] + 1);
                        v1778 += (int)v435;
                        ++v1779;
                        unint64_t v1787 = v134[1];
                      }
                      while (v1779 < v1787);
                      int v1772 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      unint64_t v1787 = 0;
                      v1785 = *(void **)(v133 + 24);
                      uint64_t v1786 = v1785[1];
                    }
                    uint64_t v1775 = *v1785 + v1775 - v1787 * v1786;
                    uint64_t v1774 = *(void *)v300[3] + v1774 - *((void *)v300[3] + 1) * v301[1];
                    ++v1773;
                  }
                  while (v1773 < v1772);
                }
              }
              else if (v138 == 1)
              {
                int v1186 = *v134;
                if (*v134)
                {
                  unint64_t v1187 = 0;
                  uint64_t v1188 = 0;
                  uint64_t v1189 = 0;
                  uint64_t v1190 = *(void *)(v133 + 152);
                  v1191 = v300[19];
                  uint64_t v1192 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      uint64_t v1193 = 0;
                      int v1194 = *(unsigned __int8 *)(v1190 + v1189);
                      unsigned int v1195 = v435 + 1;
                      do
                      {
                        if (v1194) {
                          BOOL v1196 = *((unsigned char *)v1191 + v1188 + v1193) == 0;
                        }
                        else {
                          BOOL v1196 = 1;
                        }
                        char v1197 = !v1196;
                        *(unsigned char *)(v1192 + v1193) = v1197;
                        --v1195;
                        ++v1193;
                      }
                      while (v1195 > 1);
                      uint64_t v133 = *a1;
                      v300 = (int **)*a2;
                      int v1186 = **(_DWORD **)*a1;
                    }
                    v1189 += **(void **)(v133 + 24);
                    v1188 += *(void *)v300[3];
                    v1192 += (int)v435;
                    ++v1187;
                  }
                  while (v1187 < v1186);
                }
              }
              else if (v132[6])
              {
                v2127 = v300[19];
                uint64_t v2150 = *(void *)(v133 + 152);
                uint64_t v2179 = (int)v435;
                unint64_t v2201 = 0;
                unsigned int v2113 = v435 + 1;
                uint64_t v1788 = v132[19];
                do
                {
                  uint64_t v1789 = *(void *)*a1;
                  unint64_t v1790 = (unint64_t)(*(void *)(*a1 + 8) - v1789) >> 2;
                  uint64_t v1791 = 0;
                  uint64_t v1792 = (v1790 - 1);
                  if ((int)v1790 - 1 >= 0)
                  {
                    uint64_t v1793 = *(void *)(*a1 + 24);
                    int v1794 = v2201;
                    do
                    {
                      ldiv_t v1795 = ldiv(v1794, *(int *)(v1789 + 4 * v1792));
                      int v1794 = v1795.quot;
                      v1791 += *(void *)(v1793 + 8 * v1792--) * v1795.rem;
                    }
                    while (v1792 != -1);
                  }
                  uint64_t v1796 = *(void *)*a2;
                  unint64_t v1797 = (unint64_t)(*(void *)(*a2 + 8) - v1796) >> 2;
                  uint64_t v1798 = 0;
                  uint64_t v1799 = (v1797 - 1);
                  if ((int)v1797 - 1 >= 0)
                  {
                    uint64_t v1800 = *(void *)(*a2 + 24);
                    int v1801 = v2201;
                    do
                    {
                      ldiv_t v1802 = ldiv(v1801, *(int *)(v1796 + 4 * v1799));
                      int v1801 = v1802.quot;
                      v1798 += *(void *)(v1800 + 8 * v1799--) * v1802.rem;
                    }
                    while (v1799 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    uint64_t v1803 = 0;
                    int v1804 = *(unsigned __int8 *)(v2150 + (int)v1791);
                    unsigned int v1805 = v2113;
                    do
                    {
                      if (v1804) {
                        BOOL v1806 = *((unsigned char *)v2127 + (int)v1798 + v1803) == 0;
                      }
                      else {
                        BOOL v1806 = 1;
                      }
                      char v1807 = !v1806;
                      *(unsigned char *)(v1788 + v1803) = v1807;
                      --v1805;
                      ++v1803;
                    }
                    while (v1805 > 1);
                    v132 = *(void **)a3;
                  }
                  v1788 += v2179;
                  v2201 += v2179;
                }
                while (v2201 < v132[6]);
              }
              break;
            case 2:
              if (v138 == 2)
              {
                int v1808 = *v134;
                if (*v134)
                {
                  unint64_t v1809 = 0;
                  uint64_t v1810 = 0;
                  uint64_t v1811 = 0;
                  uint64_t v1812 = *(void *)(v133 + 152);
                  v1813 = v300[19];
                  uint64_t v1814 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      unint64_t v1815 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          uint64_t v1816 = 0;
                          int v1817 = *((unsigned __int8 *)v1813 + v1810);
                          unsigned int v1818 = v435 + 1;
                          do
                          {
                            if (v1817) {
                              BOOL v1819 = *(unsigned char *)(v1812 + v1811 + v1816) == 0;
                            }
                            else {
                              BOOL v1819 = 1;
                            }
                            char v1820 = !v1819;
                            *(unsigned char *)(v1814 + v1816) = v1820;
                            --v1818;
                            ++v1816;
                          }
                          while (v1818 > 1);
                          uint64_t v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1821 = *(void **)(v133 + 24);
                        uint64_t v1822 = v1821[1];
                        v1811 += v1822;
                        v1810 += *((void *)v300[3] + 1);
                        v1814 += (int)v435;
                        ++v1815;
                        unint64_t v1823 = v134[1];
                      }
                      while (v1815 < v1823);
                      int v1808 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      unint64_t v1823 = 0;
                      v1821 = *(void **)(v133 + 24);
                      uint64_t v1822 = v1821[1];
                    }
                    uint64_t v1811 = *v1821 + v1811 - v1823 * v1822;
                    uint64_t v1810 = *(void *)v300[3] + v1810 - *((void *)v300[3] + 1) * v301[1];
                    ++v1809;
                  }
                  while (v1809 < v1808);
                }
              }
              else if (v138 == 1)
              {
                int v1198 = *v134;
                if (*v134)
                {
                  unint64_t v1199 = 0;
                  uint64_t v1200 = 0;
                  uint64_t v1201 = 0;
                  uint64_t v1202 = *(void *)(v133 + 152);
                  v1203 = v300[19];
                  uint64_t v1204 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      uint64_t v1205 = 0;
                      int v1206 = *((unsigned __int8 *)v1203 + v1200);
                      unsigned int v1207 = v435 + 1;
                      do
                      {
                        if (v1206) {
                          BOOL v1208 = *(unsigned char *)(v1202 + v1201 + v1205) == 0;
                        }
                        else {
                          BOOL v1208 = 1;
                        }
                        char v1209 = !v1208;
                        *(unsigned char *)(v1204 + v1205) = v1209;
                        --v1207;
                        ++v1205;
                      }
                      while (v1207 > 1);
                      uint64_t v133 = *a1;
                      v300 = (int **)*a2;
                      int v1198 = **(_DWORD **)*a1;
                    }
                    v1201 += **(void **)(v133 + 24);
                    v1200 += *(void *)v300[3];
                    v1204 += (int)v435;
                    ++v1199;
                  }
                  while (v1199 < v1198);
                }
              }
              else if (v132[6])
              {
                v2128 = v300[19];
                uint64_t v2151 = *(void *)(v133 + 152);
                uint64_t v2180 = (int)v435;
                unint64_t v2202 = 0;
                unsigned int v2114 = v435 + 1;
                uint64_t v1824 = v132[19];
                do
                {
                  uint64_t v1825 = *(void *)*a1;
                  unint64_t v1826 = (unint64_t)(*(void *)(*a1 + 8) - v1825) >> 2;
                  uint64_t v1827 = 0;
                  uint64_t v1828 = (v1826 - 1);
                  if ((int)v1826 - 1 >= 0)
                  {
                    uint64_t v1829 = *(void *)(*a1 + 24);
                    int v1830 = v2202;
                    do
                    {
                      ldiv_t v1831 = ldiv(v1830, *(int *)(v1825 + 4 * v1828));
                      int v1830 = v1831.quot;
                      v1827 += *(void *)(v1829 + 8 * v1828--) * v1831.rem;
                    }
                    while (v1828 != -1);
                  }
                  uint64_t v1832 = *(void *)*a2;
                  unint64_t v1833 = (unint64_t)(*(void *)(*a2 + 8) - v1832) >> 2;
                  uint64_t v1834 = 0;
                  uint64_t v1835 = (v1833 - 1);
                  if ((int)v1833 - 1 >= 0)
                  {
                    uint64_t v1836 = *(void *)(*a2 + 24);
                    int v1837 = v2202;
                    do
                    {
                      ldiv_t v1838 = ldiv(v1837, *(int *)(v1832 + 4 * v1835));
                      int v1837 = v1838.quot;
                      v1834 += *(void *)(v1836 + 8 * v1835--) * v1838.rem;
                    }
                    while (v1835 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    uint64_t v1839 = 0;
                    int v1840 = *((unsigned __int8 *)v2128 + (int)v1834);
                    unsigned int v1841 = v2114;
                    do
                    {
                      if (v1840) {
                        BOOL v1842 = *(unsigned char *)(v2151 + (int)v1827 + v1839) == 0;
                      }
                      else {
                        BOOL v1842 = 1;
                      }
                      char v1843 = !v1842;
                      *(unsigned char *)(v1824 + v1839) = v1843;
                      --v1841;
                      ++v1839;
                    }
                    while (v1841 > 1);
                    v132 = *(void **)a3;
                  }
                  v1824 += v2180;
                  v2202 += v2180;
                }
                while (v2202 < v132[6]);
              }
              break;
            case 3:
              if (v138 == 2)
              {
                int v1396 = *v134;
                if (*v134)
                {
                  unint64_t v1397 = 0;
                  uint64_t v1398 = 0;
                  uint64_t v1399 = 0;
                  uint64_t v1400 = *(void *)(v133 + 152);
                  v1401 = v300[19];
                  uint64_t v1402 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      unint64_t v1403 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          uint64_t v1404 = 0;
                          unsigned int v1405 = v435 + 1;
                          do
                          {
                            if (*(unsigned char *)(v1400 + v1399 + v1404)) {
                              BOOL v1406 = *((unsigned char *)v1401 + v1398 + v1404) == 0;
                            }
                            else {
                              BOOL v1406 = 1;
                            }
                            char v1407 = !v1406;
                            *(unsigned char *)(v1402 + v1404) = v1407;
                            --v1405;
                            ++v1404;
                          }
                          while (v1405 > 1);
                          uint64_t v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1408 = *(void **)(v133 + 24);
                        uint64_t v1409 = v1408[1];
                        v1399 += v1409;
                        v1398 += *((void *)v300[3] + 1);
                        v1402 += (int)v435;
                        ++v1403;
                        unint64_t v1410 = v134[1];
                      }
                      while (v1403 < v1410);
                      int v1396 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      unint64_t v1410 = 0;
                      v1408 = *(void **)(v133 + 24);
                      uint64_t v1409 = v1408[1];
                    }
                    uint64_t v1399 = *v1408 + v1399 - v1410 * v1409;
                    uint64_t v1398 = *(void *)v300[3] + v1398 - *((void *)v300[3] + 1) * v301[1];
                    ++v1397;
                  }
                  while (v1397 < v1396);
                }
              }
              else if (v138 == 1)
              {
                int v436 = *v134;
                if (*v134)
                {
                  unint64_t v437 = 0;
                  uint64_t v438 = 0;
                  uint64_t v439 = 0;
                  uint64_t v440 = *(void *)(v133 + 152);
                  v441 = v300[19];
                  uint64_t v442 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      uint64_t v443 = 0;
                      unsigned int v444 = v435 + 1;
                      do
                      {
                        if (*(unsigned char *)(v440 + v439 + v443)) {
                          BOOL v445 = *((unsigned char *)v441 + v438 + v443) == 0;
                        }
                        else {
                          BOOL v445 = 1;
                        }
                        char v446 = !v445;
                        *(unsigned char *)(v442 + v443) = v446;
                        --v444;
                        ++v443;
                      }
                      while (v444 > 1);
                      uint64_t v133 = *a1;
                      v300 = (int **)*a2;
                      int v436 = **(_DWORD **)*a1;
                    }
                    v439 += **(void **)(v133 + 24);
                    v438 += *(void *)v300[3];
                    v442 += (int)v435;
                    ++v437;
                  }
                  while (v437 < v436);
                }
              }
              else if (v132[6])
              {
                v2124 = v300[19];
                uint64_t v2140 = *(void *)(v133 + 152);
                uint64_t v2169 = (int)v435;
                unint64_t v2198 = 0;
                unsigned int v2108 = v435 + 1;
                uint64_t v1411 = v132[19];
                do
                {
                  uint64_t v1412 = *(void *)*a1;
                  unint64_t v1413 = (unint64_t)(*(void *)(*a1 + 8) - v1412) >> 2;
                  uint64_t v1414 = 0;
                  uint64_t v1415 = (v1413 - 1);
                  if ((int)v1413 - 1 >= 0)
                  {
                    uint64_t v1416 = *(void *)(*a1 + 24);
                    int v1417 = v2198;
                    do
                    {
                      ldiv_t v1418 = ldiv(v1417, *(int *)(v1412 + 4 * v1415));
                      int v1417 = v1418.quot;
                      v1414 += *(void *)(v1416 + 8 * v1415--) * v1418.rem;
                    }
                    while (v1415 != -1);
                  }
                  uint64_t v1419 = *(void *)*a2;
                  unint64_t v1420 = (unint64_t)(*(void *)(*a2 + 8) - v1419) >> 2;
                  uint64_t v1421 = 0;
                  uint64_t v1422 = (v1420 - 1);
                  if ((int)v1420 - 1 >= 0)
                  {
                    uint64_t v1423 = *(void *)(*a2 + 24);
                    int v1424 = v2198;
                    do
                    {
                      ldiv_t v1425 = ldiv(v1424, *(int *)(v1419 + 4 * v1422));
                      int v1424 = v1425.quot;
                      v1421 += *(void *)(v1423 + 8 * v1422--) * v1425.rem;
                    }
                    while (v1422 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    uint64_t v1426 = 0;
                    unsigned int v1427 = v2108;
                    do
                    {
                      if (*(unsigned char *)(v2140 + (int)v1414 + v1426)) {
                        BOOL v1428 = *((unsigned char *)v2124 + (int)v1421 + v1426) == 0;
                      }
                      else {
                        BOOL v1428 = 1;
                      }
                      char v1429 = !v1428;
                      *(unsigned char *)(v1411 + v1426) = v1429;
                      --v1427;
                      ++v1426;
                    }
                    while (v1427 > 1);
                    v132 = *(void **)a3;
                  }
                  v1411 += v2169;
                  v2198 += v2169;
                }
                while (v2198 < v132[6]);
              }
              break;
            default:
LABEL_585:
              switch(v431)
              {
                case 1uLL:
                  if (v132[6])
                  {
                    unint64_t v447 = 0;
                    uint64_t v448 = 0;
                    uint64_t v449 = 0;
                    uint64_t v450 = *(void *)(v133 + 152);
                    v451 = v300[19];
                    uint64_t v452 = v132[19];
                    do
                    {
                      if (*(unsigned char *)(v450 + v449)) {
                        BOOL v453 = *((unsigned char *)v451 + v448) == 0;
                      }
                      else {
                        BOOL v453 = 1;
                      }
                      char v454 = !v453;
                      *(unsigned char *)(v452 + v447) = v454;
                      v449 += **(void **)(*a1 + 24);
                      v448 += **(void **)(*a2 + 24);
                      ++v447;
                    }
                    while (v447 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v793 = *v134;
                  if (*v134)
                  {
                    unint64_t v794 = 0;
                    uint64_t v795 = 0;
                    uint64_t v796 = 0;
                    uint64_t v797 = 0;
                    uint64_t v798 = *(void *)(v133 + 152);
                    v799 = v300[19];
                    uint64_t v800 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        unint64_t v801 = 0;
                        do
                        {
                          if (*(unsigned char *)(v798 + v797)) {
                            BOOL v802 = *((unsigned char *)v799 + v796) == 0;
                          }
                          else {
                            BOOL v802 = 1;
                          }
                          char v803 = !v802;
                          *(unsigned char *)(v800 + v795 + v801) = v803;
                          uint64_t v133 = *a1;
                          v804 = *(void **)(*a1 + 24);
                          uint64_t v805 = v804[1];
                          v797 += v805;
                          v300 = (int **)*a2;
                          v806 = *(int **)(*a2 + 24);
                          uint64_t v807 = *((void *)v806 + 1);
                          v796 += v807;
                          ++v801;
                          v134 = *(int **)*a1;
                          unint64_t v808 = v134[1];
                        }
                        while (v801 < v808);
                        int v793 = *v134;
                        v301 = *v300;
                        v795 += v801;
                      }
                      else
                      {
                        unint64_t v808 = 0;
                        v804 = *(void **)(v133 + 24);
                        uint64_t v805 = v804[1];
                        v806 = v300[3];
                        uint64_t v807 = *((void *)v806 + 1);
                      }
                      uint64_t v797 = *v804 + v797 - v808 * v805;
                      uint64_t v796 = *(void *)v806 + v796 - v807 * v301[1];
                      ++v794;
                    }
                    while (v794 < v793);
                  }
                  break;
                case 3uLL:
                  int v809 = *v134;
                  if (*v134)
                  {
                    unint64_t v810 = 0;
                    uint64_t v811 = 0;
                    uint64_t v812 = 0;
                    uint64_t v813 = 0;
                    uint64_t v814 = *(void *)(v133 + 152);
                    v815 = v300[19];
                    uint64_t v816 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        unint64_t v817 = 0;
                        do
                        {
                          if (v134[2])
                          {
                            unint64_t v818 = 0;
                            do
                            {
                              if (*(unsigned char *)(v814 + v813)) {
                                BOOL v819 = *((unsigned char *)v815 + v812) == 0;
                              }
                              else {
                                BOOL v819 = 1;
                              }
                              char v820 = !v819;
                              *(unsigned char *)(v816 + v811 + v818) = v820;
                              uint64_t v133 = *a1;
                              v821 = *(void **)(*a1 + 24);
                              uint64_t v822 = v821[2];
                              v813 += v822;
                              v300 = (int **)*a2;
                              v823 = *(int **)(*a2 + 24);
                              uint64_t v824 = *((void *)v823 + 2);
                              v812 += v824;
                              ++v818;
                              v134 = *(int **)*a1;
                              unint64_t v825 = v134[2];
                            }
                            while (v818 < v825);
                            v301 = *v300;
                            v811 += v818;
                          }
                          else
                          {
                            unint64_t v825 = 0;
                            v821 = *(void **)(v133 + 24);
                            uint64_t v822 = v821[2];
                            v823 = v300[3];
                            uint64_t v824 = *((void *)v823 + 2);
                          }
                          uint64_t v826 = v821[1];
                          uint64_t v813 = v826 + v813 - v825 * v822;
                          uint64_t v812 = *((void *)v823 + 1) + v812 - v824 * v301[2];
                          ++v817;
                          unint64_t v827 = v134[1];
                        }
                        while (v817 < v827);
                        int v809 = *v134;
                      }
                      else
                      {
                        unint64_t v827 = 0;
                        v821 = *(void **)(v133 + 24);
                        uint64_t v826 = v821[1];
                      }
                      uint64_t v813 = *v821 + v813 - v827 * v826;
                      uint64_t v812 = *(void *)v300[3] + v812 - *((void *)v300[3] + 1) * v301[1];
                      ++v810;
                    }
                    while (v810 < v809);
                  }
                  break;
                case 4uLL:
                  int v828 = *v134;
                  if (*v134)
                  {
                    unint64_t v829 = 0;
                    uint64_t v830 = 0;
                    uint64_t v831 = 0;
                    uint64_t v832 = 0;
                    uint64_t v833 = *(void *)(v133 + 152);
                    v834 = v300[19];
                    uint64_t v835 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        unint64_t v836 = 0;
                        do
                        {
                          if (v134[2])
                          {
                            unint64_t v837 = 0;
                            do
                            {
                              if (v134[3])
                              {
                                unint64_t v838 = 0;
                                do
                                {
                                  if (*(unsigned char *)(v833 + v832)) {
                                    BOOL v839 = *((unsigned char *)v834 + v831) == 0;
                                  }
                                  else {
                                    BOOL v839 = 1;
                                  }
                                  char v840 = !v839;
                                  *(unsigned char *)(v835 + v830 + v838) = v840;
                                  uint64_t v133 = *a1;
                                  v841 = *(void **)(*a1 + 24);
                                  uint64_t v842 = v841[3];
                                  v832 += v842;
                                  v300 = (int **)*a2;
                                  v843 = *(int **)(*a2 + 24);
                                  uint64_t v844 = *((void *)v843 + 3);
                                  v831 += v844;
                                  ++v838;
                                  v134 = *(int **)*a1;
                                  unint64_t v845 = v134[3];
                                }
                                while (v838 < v845);
                                v301 = *v300;
                                v830 += v838;
                              }
                              else
                              {
                                unint64_t v845 = 0;
                                v841 = *(void **)(v133 + 24);
                                uint64_t v842 = v841[3];
                                v843 = v300[3];
                                uint64_t v844 = *((void *)v843 + 3);
                              }
                              uint64_t v846 = v841[2];
                              uint64_t v832 = v846 + v832 - v845 * v842;
                              uint64_t v831 = *((void *)v843 + 2) + v831 - v844 * v301[3];
                              ++v837;
                              unint64_t v847 = v134[2];
                            }
                            while (v837 < v847);
                          }
                          else
                          {
                            unint64_t v847 = 0;
                            v841 = *(void **)(v133 + 24);
                            uint64_t v846 = v841[2];
                          }
                          uint64_t v832 = v841[1] + v832 - v847 * v846;
                          uint64_t v831 = *((void *)v300[3] + 1) + v831 - *((void *)v300[3] + 2) * v301[2];
                          ++v836;
                          unint64_t v848 = v134[1];
                        }
                        while (v836 < v848);
                        int v828 = *v134;
                      }
                      else
                      {
                        unint64_t v848 = 0;
                      }
                      uint64_t v832 = **(void **)(v133 + 24) + v832 - *(void *)(*(void *)(v133 + 24) + 8) * v848;
                      uint64_t v831 = *(void *)v300[3] + v831 - *((void *)v300[3] + 1) * v301[1];
                      ++v829;
                    }
                    while (v829 < v828);
                  }
                  break;
                default:
                  if (v132[6])
                  {
                    unint64_t v775 = 0;
                    v2194 = v300[19];
                    uint64_t v2212 = *(void *)(v133 + 152);
                    uint64_t v776 = v132[19];
                    do
                    {
                      uint64_t v777 = *(void *)*a1;
                      unint64_t v778 = (unint64_t)(*(void *)(*a1 + 8) - v777) >> 2;
                      uint64_t v779 = 0;
                      uint64_t v780 = (v778 - 1);
                      if ((int)v778 - 1 >= 0)
                      {
                        uint64_t v781 = *(void *)(*a1 + 24);
                        int v782 = v775;
                        do
                        {
                          ldiv_t v783 = ldiv(v782, *(int *)(v777 + 4 * v780));
                          int v782 = v783.quot;
                          v779 += *(void *)(v781 + 8 * v780--) * v783.rem;
                        }
                        while (v780 != -1);
                      }
                      uint64_t v784 = *(void *)*a2;
                      unint64_t v785 = (unint64_t)(*(void *)(*a2 + 8) - v784) >> 2;
                      uint64_t v786 = 0;
                      uint64_t v787 = (v785 - 1);
                      if ((int)v785 - 1 >= 0)
                      {
                        uint64_t v788 = *(void *)(*a2 + 24);
                        int v789 = v775;
                        do
                        {
                          ldiv_t v790 = ldiv(v789, *(int *)(v784 + 4 * v787));
                          int v789 = v790.quot;
                          v786 += *(void *)(v788 + 8 * v787--) * v790.rem;
                        }
                        while (v787 != -1);
                      }
                      if (*(unsigned char *)(v2212 + (int)v779)) {
                        BOOL v791 = *((unsigned char *)v2194 + (int)v786) == 0;
                      }
                      else {
                        BOOL v791 = 1;
                      }
                      char v792 = !v791;
                      *(unsigned char *)(v776 + v775++) = v792;
                    }
                    while (v775 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v30)
      {
        case 0:
LABEL_37:
          if (**(_DWORD **)(*a1 + 152)) {
            BOOL v31 = **(_DWORD **)(*a2 + 152) == 0;
          }
          else {
            BOOL v31 = 1;
          }
          int v32 = !v31;
          **(_DWORD **)(*(void *)a3 + 152) = v32;
          return;
        case 1:
          int v178 = *(_DWORD *)(*a2 + 160);
          if (v178 >= 1)
          {
            v179 = *(int **)(*(void *)a3 + 152);
            v180 = *(int **)(*a2 + 152);
            int v181 = **(_DWORD **)(*a1 + 152);
            unsigned int v182 = v178 + 1;
            do
            {
              int v184 = *v180++;
              int v183 = v184;
              if (v181) {
                BOOL v185 = v183 == 0;
              }
              else {
                BOOL v185 = 1;
              }
              int v186 = !v185;
              *v179++ = v186;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        case 2:
          int v187 = *(_DWORD *)(*a1 + 160);
          if (v187 >= 1)
          {
            v188 = *(int **)(*(void *)a3 + 152);
            v189 = *(int **)(*a1 + 152);
            int v190 = **(_DWORD **)(*a2 + 152);
            unsigned int v191 = v187 + 1;
            do
            {
              int v193 = *v189++;
              int v192 = v193;
              if (v190) {
                BOOL v194 = v192 == 0;
              }
              else {
                BOOL v194 = 1;
              }
              int v195 = !v194;
              *v188++ = v195;
              --v191;
            }
            while (v191 > 1);
          }
          return;
        case 3:
          int v196 = *(_DWORD *)(*(void *)a3 + 48);
          if (v196 >= 1)
          {
            v197 = *(int **)(*(void *)a3 + 152);
            v198 = *(int **)(*a2 + 152);
            v199 = *(int **)(*a1 + 152);
            unsigned int v200 = v196 + 1;
            do
            {
              int v202 = *v199++;
              int v201 = v202;
              int v204 = *v198++;
              int v203 = v204;
              if (v201) {
                BOOL v205 = v203 == 0;
              }
              else {
                BOOL v205 = 1;
              }
              int v206 = !v205;
              *v197++ = v206;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        default:
          v169 = *(void **)a3;
          v170 = (void *)*a1;
          v171 = *(int **)*a1;
          uint64_t v172 = (v170[1] - (void)v171) >> 2;
          uint64_t v173 = (v172 - 1);
          if ((int)v173 >= -1) {
            int v174 = -1;
          }
          else {
            int v174 = v172 - 1;
          }
          int v175 = v174 + 1;
          int v176 = v172 + 1;
          while (1)
          {
            unsigned int v177 = v176 - 2;
            if (v176 - 2 < 0) {
              break;
            }
            --v176;
            if (*(void *)(v170[3] + 8 * v177) != *(void *)(v169[3] + 8 * v177)) {
              goto LABEL_312;
            }
          }
          int v176 = v175;
LABEL_312:
          v307 = (void *)*a2;
          v308 = *(int **)*a2;
          uint64_t v309 = (v307[1] - (void)v308) >> 2;
          uint64_t v310 = (v309 - 1);
          if ((int)v310 >= -1) {
            int v311 = -1;
          }
          else {
            int v311 = v309 - 1;
          }
          int v312 = v311 + 1;
          int v313 = v309 + 1;
          while (1)
          {
            unsigned int v314 = v313 - 2;
            if (v313 - 2 < 0) {
              break;
            }
            --v313;
            if (*(void *)(v307[3] + 8 * v314) != *(void *)(v169[3] + 8 * v314)) {
              goto LABEL_356;
            }
          }
          int v313 = v312;
LABEL_356:
          int v339 = v172 + 1;
          while (1)
          {
            unsigned int v340 = v339 - 2;
            if (v339 - 2 < 0) {
              break;
            }
            --v339;
            if (*(void *)(v170[3] + 8 * v340)) {
              goto LABEL_391;
            }
          }
          int v339 = v175;
LABEL_391:
          int v353 = v309 + 1;
          while (1)
          {
            unsigned int v354 = v353 - 2;
            if (v353 - 2 < 0) {
              break;
            }
            --v353;
            if (*(void *)(v307[3] + 8 * v354)) {
              goto LABEL_597;
            }
          }
          int v353 = v312;
LABEL_597:
          unint64_t v455 = (uint64_t)(v169[1] - *v169) >> 2;
          if (v176 <= v313) {
            int v456 = v313;
          }
          else {
            int v456 = v176;
          }
          if (v176 <= v353) {
            int v176 = v353;
          }
          if (v339 > v313) {
            int v313 = v339;
          }
          if (v455 > v313)
          {
            int v457 = 1;
          }
          else
          {
            int v313 = (uint64_t)(v169[1] - *v169) >> 2;
            int v457 = 4;
          }
          if (v455 > v176)
          {
            int v458 = 2;
          }
          else
          {
            int v176 = v313;
            int v458 = v457;
          }
          if (v455 > v456)
          {
            int v176 = v456;
            int v458 = 3;
          }
          uint64_t v2189 = v310;
          uint64_t v2207 = v173;
          if (!v176) {
            goto LABEL_633;
          }
          unint64_t v459 = *(void *)(v169[3] + 8 * (v176 - 1));
          if (v459 < 0x10) {
            goto LABEL_633;
          }
          switch(v458)
          {
            case 1:
              if (v176 == 2)
              {
                int v1844 = *v171;
                if (*v171)
                {
                  unint64_t v1845 = 0;
                  uint64_t v1846 = 0;
                  uint64_t v1847 = 0;
                  uint64_t v1848 = v170[19];
                  uint64_t v1849 = v307[19];
                  uint64_t v1850 = v169[19];
                  v1851 = (uint64_t *)v170[3];
                  uint64_t v1852 = *v1851;
                  uint64_t v1853 = v1851[1];
                  v1854 = (uint64_t *)v307[3];
                  uint64_t v1855 = *v1854;
                  uint64_t v1856 = v1854[1];
                  int v1857 = v171[1];
                  int v1858 = v1857;
                  do
                  {
                    if (v1858)
                    {
                      unint64_t v1859 = 0;
                      uint64_t v1860 = v1849 + 4 * v1846;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          uint64_t v1861 = 0;
                          int v1862 = *(_DWORD *)(v1848 + 4 * v1847);
                          unsigned int v1863 = v459 + 1;
                          do
                          {
                            if (v1862) {
                              BOOL v1864 = *(_DWORD *)(v1860 + v1861) == 0;
                            }
                            else {
                              BOOL v1864 = 1;
                            }
                            int v1865 = !v1864;
                            *(_DWORD *)(v1850 + v1861) = v1865;
                            --v1863;
                            v1861 += 4;
                          }
                          while (v1863 > 1);
                          int v1857 = v171[1];
                        }
                        v1847 += v1853;
                        v1846 += v1856;
                        v1850 += 4 * (int)v459;
                        ++v1859;
                        v1860 += 4 * v1856;
                      }
                      while (v1859 < v1857);
                      uint64_t v1866 = v1857;
                      int v1844 = *v171;
                      int v1858 = v1857;
                    }
                    else
                    {
                      uint64_t v1866 = 0;
                    }
                    uint64_t v1847 = v1847 + v1852 - v1866 * v1853;
                    uint64_t v1846 = v1846 + v1855 - v1856 * v308[1];
                    ++v1845;
                  }
                  while (v1845 < v1844);
                }
              }
              else if (v176 == 1)
              {
                int v1210 = *v171;
                if (*v171)
                {
                  unint64_t v1211 = 0;
                  uint64_t v1212 = 0;
                  uint64_t v1213 = v170[19];
                  uint64_t v1214 = v307[19];
                  uint64_t v1215 = v169[19];
                  uint64_t v1216 = *(void *)v170[3];
                  uint64_t v1217 = 4 * *(void *)v307[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      uint64_t v1218 = 0;
                      int v1219 = *(_DWORD *)(v1213 + 4 * v1212);
                      unsigned int v1220 = v459 + 1;
                      do
                      {
                        if (v1219) {
                          BOOL v1221 = *(_DWORD *)(v1214 + v1218) == 0;
                        }
                        else {
                          BOOL v1221 = 1;
                        }
                        int v1222 = !v1221;
                        *(_DWORD *)(v1215 + v1218) = v1222;
                        --v1220;
                        v1218 += 4;
                      }
                      while (v1220 > 1);
                      int v1210 = *v171;
                    }
                    v1212 += v1216;
                    ++v1211;
                    v1215 += 4 * (int)v459;
                    v1214 += v1217;
                  }
                  while (v1211 < v1210);
                }
              }
              else
              {
                unint64_t v2152 = v169[6];
                if (v2152)
                {
                  unint64_t v2181 = 0;
                  uint64_t v2084 = v307[19];
                  uint64_t v2099 = v170[19];
                  uint64_t v1867 = v169[19];
                  do
                  {
                    uint64_t v1868 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      uint64_t v1869 = v170[3];
                      uint64_t v1870 = v173;
                      int v1871 = v2181;
                      do
                      {
                        ldiv_t v1872 = ldiv(v1871, v171[v1870]);
                        int v1871 = v1872.quot;
                        v1868 += *(void *)(v1869 + 8 * v1870--) * v1872.rem;
                      }
                      while (v1870 != -1);
                    }
                    uint64_t v1873 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1874) = 0;
                    }
                    else
                    {
                      uint64_t v1874 = 0;
                      uint64_t v1875 = v307[3];
                      int v1876 = v2181;
                      do
                      {
                        ldiv_t v1877 = ldiv(v1876, v308[v1873]);
                        int v1876 = v1877.quot;
                        v1874 += *(void *)(v1875 + 8 * v1873--) * v1877.rem;
                      }
                      while (v1873 != -1);
                    }
                    uint64_t v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      uint64_t v1878 = 0;
                      int v1879 = *(_DWORD *)(v2099 + 4 * (int)v1868);
                      unsigned int v1880 = v459 + 1;
                      do
                      {
                        if (v1879) {
                          BOOL v1881 = *(_DWORD *)(v2084 + 4 * (int)v1874 + v1878) == 0;
                        }
                        else {
                          BOOL v1881 = 1;
                        }
                        int v1882 = !v1881;
                        *(_DWORD *)(v1867 + v1878) = v1882;
                        --v1880;
                        v1878 += 4;
                      }
                      while (v1880 > 1);
                    }
                    v1867 += 4 * (int)v459;
                    v2181 += (int)v459;
                  }
                  while (v2181 < v2152);
                }
              }
              break;
            case 2:
              if (v176 == 2)
              {
                int v1883 = *v171;
                if (*v171)
                {
                  unint64_t v1884 = 0;
                  uint64_t v1885 = 0;
                  uint64_t v1886 = 0;
                  uint64_t v1887 = v170[19];
                  uint64_t v1888 = v307[19];
                  uint64_t v1889 = v169[19];
                  v1890 = (uint64_t *)v170[3];
                  uint64_t v1891 = *v1890;
                  uint64_t v1892 = v1890[1];
                  v1893 = (uint64_t *)v307[3];
                  uint64_t v1894 = *v1893;
                  uint64_t v1895 = v1893[1];
                  int v1896 = v171[1];
                  int v1897 = v1896;
                  do
                  {
                    if (v1897)
                    {
                      unint64_t v1898 = 0;
                      uint64_t v1899 = v1887 + 4 * v1886;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          uint64_t v1900 = 0;
                          int v1901 = *(_DWORD *)(v1888 + 4 * v1885);
                          unsigned int v1902 = v459 + 1;
                          do
                          {
                            if (v1901) {
                              BOOL v1903 = *(_DWORD *)(v1899 + v1900) == 0;
                            }
                            else {
                              BOOL v1903 = 1;
                            }
                            int v1904 = !v1903;
                            *(_DWORD *)(v1889 + v1900) = v1904;
                            --v1902;
                            v1900 += 4;
                          }
                          while (v1902 > 1);
                          int v1896 = v171[1];
                        }
                        v1886 += v1892;
                        v1885 += v1895;
                        v1889 += 4 * (int)v459;
                        ++v1898;
                        v1899 += 4 * v1892;
                      }
                      while (v1898 < v1896);
                      uint64_t v1905 = v1896;
                      int v1883 = *v171;
                      int v1897 = v1896;
                    }
                    else
                    {
                      uint64_t v1905 = 0;
                    }
                    uint64_t v1886 = v1886 + v1891 - v1905 * v1892;
                    uint64_t v1885 = v1885 + v1894 - v1895 * v308[1];
                    ++v1884;
                  }
                  while (v1884 < v1883);
                }
              }
              else if (v176 == 1)
              {
                int v1223 = *v171;
                if (*v171)
                {
                  unint64_t v1224 = 0;
                  uint64_t v1225 = 0;
                  uint64_t v1226 = v170[19];
                  uint64_t v1227 = v307[19];
                  uint64_t v1228 = v169[19];
                  uint64_t v1229 = *(void *)v307[3];
                  uint64_t v1230 = 4 * *(void *)v170[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      uint64_t v1231 = 0;
                      int v1232 = *(_DWORD *)(v1227 + 4 * v1225);
                      unsigned int v1233 = v459 + 1;
                      do
                      {
                        if (v1232) {
                          BOOL v1234 = *(_DWORD *)(v1226 + v1231) == 0;
                        }
                        else {
                          BOOL v1234 = 1;
                        }
                        int v1235 = !v1234;
                        *(_DWORD *)(v1228 + v1231) = v1235;
                        --v1233;
                        v1231 += 4;
                      }
                      while (v1233 > 1);
                      int v1223 = *v171;
                    }
                    v1225 += v1229;
                    ++v1224;
                    v1228 += 4 * (int)v459;
                    v1226 += v1230;
                  }
                  while (v1224 < v1223);
                }
              }
              else
              {
                unint64_t v2153 = v169[6];
                if (v2153)
                {
                  unint64_t v2182 = 0;
                  uint64_t v2085 = v307[19];
                  uint64_t v2100 = v170[19];
                  uint64_t v1906 = v169[19];
                  do
                  {
                    uint64_t v1907 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      uint64_t v1908 = v170[3];
                      uint64_t v1909 = v173;
                      int v1910 = v2182;
                      do
                      {
                        ldiv_t v1911 = ldiv(v1910, v171[v1909]);
                        int v1910 = v1911.quot;
                        v1907 += *(void *)(v1908 + 8 * v1909--) * v1911.rem;
                      }
                      while (v1909 != -1);
                    }
                    uint64_t v1912 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1913) = 0;
                    }
                    else
                    {
                      uint64_t v1913 = 0;
                      uint64_t v1914 = v307[3];
                      int v1915 = v2182;
                      do
                      {
                        ldiv_t v1916 = ldiv(v1915, v308[v1912]);
                        int v1915 = v1916.quot;
                        v1913 += *(void *)(v1914 + 8 * v1912--) * v1916.rem;
                      }
                      while (v1912 != -1);
                    }
                    uint64_t v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      uint64_t v1917 = 0;
                      int v1918 = *(_DWORD *)(v2085 + 4 * (int)v1913);
                      unsigned int v1919 = v459 + 1;
                      do
                      {
                        if (v1918) {
                          BOOL v1920 = *(_DWORD *)(v2100 + 4 * (int)v1907 + v1917) == 0;
                        }
                        else {
                          BOOL v1920 = 1;
                        }
                        int v1921 = !v1920;
                        *(_DWORD *)(v1906 + v1917) = v1921;
                        --v1919;
                        v1917 += 4;
                      }
                      while (v1919 > 1);
                    }
                    v1906 += 4 * (int)v459;
                    v2182 += (int)v459;
                  }
                  while (v2182 < v2153);
                }
              }
              break;
            case 3:
              if (v176 == 2)
              {
                int v1430 = *v171;
                if (*v171)
                {
                  unint64_t v1431 = 0;
                  uint64_t v1432 = 0;
                  uint64_t v1433 = 0;
                  uint64_t v1434 = v170[19];
                  uint64_t v1435 = v307[19];
                  uint64_t v1436 = v169[19];
                  v1437 = (uint64_t *)v170[3];
                  uint64_t v1438 = *v1437;
                  uint64_t v1439 = v1437[1];
                  v1440 = (uint64_t *)v307[3];
                  uint64_t v1441 = *v1440;
                  uint64_t v1442 = v1440[1];
                  int v1443 = v171[1];
                  int v1444 = v1443;
                  do
                  {
                    if (v1444)
                    {
                      unint64_t v1445 = 0;
                      uint64_t v1446 = v1435 + 4 * v1432;
                      uint64_t v1447 = v1434 + 4 * v1433;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          uint64_t v1448 = 0;
                          unsigned int v1449 = v459 + 1;
                          do
                          {
                            if (*(_DWORD *)(v1447 + v1448)) {
                              BOOL v1450 = *(_DWORD *)(v1446 + v1448) == 0;
                            }
                            else {
                              BOOL v1450 = 1;
                            }
                            int v1451 = !v1450;
                            *(_DWORD *)(v1436 + v1448) = v1451;
                            --v1449;
                            v1448 += 4;
                          }
                          while (v1449 > 1);
                          int v1443 = v171[1];
                        }
                        v1433 += v1439;
                        v1432 += v1442;
                        v1436 += 4 * (int)v459;
                        ++v1445;
                        v1446 += 4 * v1442;
                        v1447 += 4 * v1439;
                      }
                      while (v1445 < v1443);
                      uint64_t v1452 = v1443;
                      int v1430 = *v171;
                      int v1444 = v1443;
                    }
                    else
                    {
                      uint64_t v1452 = 0;
                    }
                    uint64_t v1433 = v1433 + v1438 - v1452 * v1439;
                    uint64_t v1432 = v1432 + v1441 - v1442 * v308[1];
                    ++v1431;
                  }
                  while (v1431 < v1430);
                }
              }
              else if (v176 == 1)
              {
                int v460 = *v171;
                if (*v171)
                {
                  unint64_t v461 = 0;
                  uint64_t v462 = v170[19];
                  uint64_t v463 = v307[19];
                  uint64_t v464 = v169[19];
                  uint64_t v465 = 4 * *(void *)v307[3];
                  uint64_t v466 = 4 * *(void *)v170[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      uint64_t v467 = 0;
                      unsigned int v468 = v459 + 1;
                      do
                      {
                        if (*(_DWORD *)(v462 + v467)) {
                          BOOL v469 = *(_DWORD *)(v463 + v467) == 0;
                        }
                        else {
                          BOOL v469 = 1;
                        }
                        int v470 = !v469;
                        *(_DWORD *)(v464 + v467) = v470;
                        --v468;
                        v467 += 4;
                      }
                      while (v468 > 1);
                      int v460 = *v171;
                    }
                    ++v461;
                    v464 += 4 * (int)v459;
                    v463 += v465;
                    v462 += v466;
                  }
                  while (v461 < v460);
                }
              }
              else
              {
                unint64_t v2141 = v169[6];
                if (v2141)
                {
                  unint64_t v2170 = 0;
                  uint64_t v2079 = v307[19];
                  uint64_t v2092 = v170[19];
                  uint64_t v1453 = v169[19];
                  do
                  {
                    uint64_t v1454 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      uint64_t v1455 = v170[3];
                      uint64_t v1456 = v173;
                      int v1457 = v2170;
                      do
                      {
                        ldiv_t v1458 = ldiv(v1457, v171[v1456]);
                        int v1457 = v1458.quot;
                        v1454 += *(void *)(v1455 + 8 * v1456--) * v1458.rem;
                      }
                      while (v1456 != -1);
                    }
                    uint64_t v1459 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1460) = 0;
                    }
                    else
                    {
                      uint64_t v1460 = 0;
                      uint64_t v1461 = v307[3];
                      int v1462 = v2170;
                      do
                      {
                        ldiv_t v1463 = ldiv(v1462, v308[v1459]);
                        int v1462 = v1463.quot;
                        v1460 += *(void *)(v1461 + 8 * v1459--) * v1463.rem;
                      }
                      while (v1459 != -1);
                    }
                    uint64_t v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      uint64_t v1464 = 0;
                      unsigned int v1465 = v459 + 1;
                      do
                      {
                        if (*(_DWORD *)(v2092 + 4 * (int)v1454 + v1464)) {
                          BOOL v1466 = *(_DWORD *)(v2079 + 4 * (int)v1460 + v1464) == 0;
                        }
                        else {
                          BOOL v1466 = 1;
                        }
                        int v1467 = !v1466;
                        *(_DWORD *)(v1453 + v1464) = v1467;
                        --v1465;
                        v1464 += 4;
                      }
                      while (v1465 > 1);
                    }
                    v1453 += 4 * (int)v459;
                    v2170 += (int)v459;
                  }
                  while (v2170 < v2141);
                }
              }
              break;
            default:
LABEL_633:
              switch(v455)
              {
                case 1uLL:
                  uint64_t v471 = v169[6];
                  if (v471)
                  {
                    v472 = (_DWORD *)v170[19];
                    v473 = (_DWORD *)v307[19];
                    v474 = (int *)v169[19];
                    uint64_t v475 = 4 * *(void *)v307[3];
                    uint64_t v476 = 4 * *(void *)v170[3];
                    do
                    {
                      if (*v472) {
                        BOOL v477 = *v473 == 0;
                      }
                      else {
                        BOOL v477 = 1;
                      }
                      int v478 = !v477;
                      *v474++ = v478;
                      v473 = (_DWORD *)((char *)v473 + v475);
                      v472 = (_DWORD *)((char *)v472 + v476);
                      --v471;
                    }
                    while (v471);
                  }
                  break;
                case 2uLL:
                  int v863 = *v171;
                  if (*v171)
                  {
                    unint64_t v864 = 0;
                    uint64_t v865 = 0;
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = v170[19];
                    uint64_t v869 = v307[19];
                    uint64_t v870 = v169[19];
                    v871 = (uint64_t *)v170[3];
                    uint64_t v872 = *v871;
                    uint64_t v873 = v871[1];
                    v874 = (uint64_t *)v307[3];
                    uint64_t v876 = *v874;
                    uint64_t v875 = v874[1];
                    int v877 = v171[1];
                    do
                    {
                      if (v877)
                      {
                        for (unint64_t m = 0; m < v877; ++m)
                        {
                          if (*(_DWORD *)(v868 + 4 * v867)) {
                            BOOL v879 = *(_DWORD *)(v869 + 4 * v866) == 0;
                          }
                          else {
                            BOOL v879 = 1;
                          }
                          int v880 = !v879;
                          *(_DWORD *)(v870 + 4 * v865 + 4 * m) = v880;
                          v867 += v873;
                          v866 += v875;
                          int v877 = v171[1];
                        }
                        uint64_t v881 = v877;
                        int v863 = *v171;
                        v865 += m;
                      }
                      else
                      {
                        uint64_t v881 = 0;
                      }
                      uint64_t v867 = v867 + v872 - v881 * v873;
                      uint64_t v866 = v866 + v876 - v875 * v308[1];
                      ++v864;
                    }
                    while (v864 < v863);
                  }
                  break;
                case 3uLL:
                  int v882 = *v171;
                  if (*v171)
                  {
                    unint64_t v883 = 0;
                    uint64_t v884 = 0;
                    uint64_t v885 = 0;
                    uint64_t v886 = 0;
                    uint64_t v887 = v170[19];
                    uint64_t v888 = v307[19];
                    uint64_t v889 = v169[19];
                    v890 = (uint64_t *)v170[3];
                    uint64_t v891 = *v890;
                    uint64_t v892 = v890[1];
                    v893 = (uint64_t *)v307[3];
                    uint64_t v894 = *v893;
                    uint64_t v895 = v893[1];
                    int v896 = v171[1];
                    int v897 = v896;
                    do
                    {
                      if (v897)
                      {
                        unint64_t v898 = 0;
                        uint64_t v899 = v890[2];
                        uint64_t v900 = v893[2];
                        int v901 = v171[2];
                        do
                        {
                          if (v901)
                          {
                            for (unint64_t n = 0; n < v901; ++n)
                            {
                              if (*(_DWORD *)(v887 + 4 * v886)) {
                                BOOL v903 = *(_DWORD *)(v888 + 4 * v885) == 0;
                              }
                              else {
                                BOOL v903 = 1;
                              }
                              int v904 = !v903;
                              *(_DWORD *)(v889 + 4 * v884 + 4 * n) = v904;
                              v886 += v899;
                              v885 += v900;
                              int v901 = v171[2];
                            }
                            uint64_t v905 = v901;
                            int v896 = v171[1];
                            v884 += n;
                          }
                          else
                          {
                            uint64_t v905 = 0;
                          }
                          uint64_t v886 = v886 + v892 - v905 * v899;
                          uint64_t v885 = v885 + v895 - v900 * v308[2];
                          ++v898;
                        }
                        while (v898 < v896);
                        uint64_t v906 = v896;
                        int v882 = *v171;
                        int v897 = v896;
                      }
                      else
                      {
                        uint64_t v906 = 0;
                      }
                      uint64_t v886 = v886 + v891 - v906 * v892;
                      uint64_t v885 = v885 + v894 - v895 * v308[1];
                      ++v883;
                    }
                    while (v883 < v882);
                  }
                  break;
                case 4uLL:
                  int v907 = *v171;
                  if (*v171)
                  {
                    unint64_t v908 = 0;
                    uint64_t v909 = 0;
                    uint64_t v910 = 0;
                    uint64_t v911 = 0;
                    uint64_t v912 = v170[19];
                    uint64_t v913 = v307[19];
                    uint64_t v914 = v169[19];
                    v915 = (uint64_t *)v170[3];
                    uint64_t v916 = *v915;
                    uint64_t v917 = v915[1];
                    v918 = (uint64_t *)v307[3];
                    uint64_t v919 = *v918;
                    uint64_t v920 = v918[1];
                    int v921 = v171[1];
                    int v922 = v921;
                    do
                    {
                      if (v922)
                      {
                        unint64_t v923 = 0;
                        uint64_t v924 = v915[2];
                        uint64_t v925 = v918[2];
                        int v926 = v171[2];
                        int v927 = v926;
                        do
                        {
                          if (v927)
                          {
                            unint64_t v928 = 0;
                            uint64_t v929 = v915[3];
                            uint64_t v930 = v918[3];
                            int v931 = v171[3];
                            do
                            {
                              if (v931)
                              {
                                for (iunint64_t i = 0; ii < v931; ++ii)
                                {
                                  if (*(_DWORD *)(v912 + 4 * v911)) {
                                    BOOL v933 = *(_DWORD *)(v913 + 4 * v910) == 0;
                                  }
                                  else {
                                    BOOL v933 = 1;
                                  }
                                  int v934 = !v933;
                                  *(_DWORD *)(v914 + 4 * v909 + 4 * ii) = v934;
                                  v911 += v929;
                                  v910 += v930;
                                  int v931 = v171[3];
                                }
                                uint64_t v935 = v931;
                                int v926 = v171[2];
                                v909 += ii;
                              }
                              else
                              {
                                uint64_t v935 = 0;
                              }
                              uint64_t v911 = v911 + v924 - v935 * v929;
                              uint64_t v910 = v910 + v925 - v930 * v308[3];
                              ++v928;
                            }
                            while (v928 < v926);
                            uint64_t v936 = v926;
                            int v921 = v171[1];
                            int v927 = v926;
                          }
                          else
                          {
                            uint64_t v936 = 0;
                          }
                          uint64_t v911 = v911 + v917 - v936 * v924;
                          uint64_t v910 = v910 + v920 - v925 * v308[2];
                          ++v923;
                        }
                        while (v923 < v921);
                        uint64_t v937 = v921;
                        int v907 = *v171;
                        int v922 = v921;
                      }
                      else
                      {
                        uint64_t v937 = 0;
                      }
                      uint64_t v911 = v911 + v916 - v937 * v917;
                      uint64_t v910 = v910 + v919 - v920 * v308[1];
                      ++v908;
                    }
                    while (v908 < v907);
                  }
                  break;
                default:
                  uint64_t v849 = v169[6];
                  if (v849)
                  {
                    uint64_t v850 = 0;
                    uint64_t v2132 = v307[19];
                    uint64_t v2161 = v170[19];
                    uint64_t v2118 = v169[19];
                    do
                    {
                      uint64_t v851 = 0;
                      if ((v173 & 0x80000000) == 0)
                      {
                        uint64_t v852 = v170[3];
                        uint64_t v853 = v173;
                        int v854 = v850;
                        do
                        {
                          ldiv_t v855 = ldiv(v854, v171[v853]);
                          int v854 = v855.quot;
                          v851 += *(void *)(v852 + 8 * v853--) * v855.rem;
                        }
                        while (v853 != -1);
                      }
                      uint64_t v856 = v2189;
                      if ((v2189 & 0x80000000) != 0)
                      {
                        LODWORD(v857) = 0;
                      }
                      else
                      {
                        uint64_t v857 = 0;
                        uint64_t v858 = v307[3];
                        int v859 = v850;
                        do
                        {
                          ldiv_t v860 = ldiv(v859, v308[v856]);
                          int v859 = v860.quot;
                          v857 += *(void *)(v858 + 8 * v856--) * v860.rem;
                        }
                        while (v856 != -1);
                      }
                      if (*(_DWORD *)(v2161 + 4 * (int)v851)) {
                        BOOL v861 = *(_DWORD *)(v2132 + 4 * (int)v857) == 0;
                      }
                      else {
                        BOOL v861 = 1;
                      }
                      int v862 = !v861;
                      *(_DWORD *)(v2118 + 4 * v850++) = v862;
                      uint64_t v173 = v2207;
                    }
                    while (v850 != v849);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v33)
      {
        case 0:
          if (**(void **)(*a1 + 152)) {
            BOOL v34 = **(void **)(*a2 + 152) == 0;
          }
          else {
            BOOL v34 = 1;
          }
          uint64_t v35 = !v34;
          **(void **)(*(void *)a3 + 152) = v35;
          return;
        case 1:
          int v216 = *(_DWORD *)(*a2 + 160);
          if (v216 >= 1)
          {
            v217 = *(uint64_t **)(*(void *)a3 + 152);
            v218 = *(uint64_t **)(*a2 + 152);
            uint64_t v219 = **(void **)(*a1 + 152);
            unsigned int v220 = v216 + 1;
            do
            {
              uint64_t v222 = *v218++;
              uint64_t v221 = v222;
              if (v219) {
                BOOL v223 = v221 == 0;
              }
              else {
                BOOL v223 = 1;
              }
              uint64_t v224 = !v223;
              *v217++ = v224;
              --v220;
            }
            while (v220 > 1);
          }
          return;
        case 2:
          int v225 = *(_DWORD *)(*a1 + 160);
          if (v225 >= 1)
          {
            v226 = *(uint64_t **)(*(void *)a3 + 152);
            v227 = *(uint64_t **)(*a1 + 152);
            uint64_t v228 = **(void **)(*a2 + 152);
            unsigned int v229 = v225 + 1;
            do
            {
              uint64_t v231 = *v227++;
              uint64_t v230 = v231;
              if (v228) {
                BOOL v232 = v230 == 0;
              }
              else {
                BOOL v232 = 1;
              }
              uint64_t v233 = !v232;
              *v226++ = v233;
              --v229;
            }
            while (v229 > 1);
          }
          return;
        case 3:
          int v234 = *(_DWORD *)(*(void *)a3 + 48);
          if (v234 >= 1)
          {
            v235 = *(uint64_t **)(*(void *)a3 + 152);
            v236 = *(uint64_t **)(*a2 + 152);
            v237 = *(uint64_t **)(*a1 + 152);
            unsigned int v238 = v234 + 1;
            do
            {
              uint64_t v240 = *v237++;
              uint64_t v239 = v240;
              uint64_t v242 = *v236++;
              uint64_t v241 = v242;
              if (v239) {
                BOOL v243 = v241 == 0;
              }
              else {
                BOOL v243 = 1;
              }
              uint64_t v244 = !v243;
              *v235++ = v244;
              --v238;
            }
            while (v238 > 1);
          }
          return;
        default:
          v207 = *(void **)a3;
          v208 = (void *)*a1;
          v209 = *(int **)*a1;
          uint64_t v210 = (v208[1] - (void)v209) >> 2;
          uint64_t v211 = (v210 - 1);
          if ((int)v211 >= -1) {
            int v212 = -1;
          }
          else {
            int v212 = v210 - 1;
          }
          int v213 = v212 + 1;
          int v214 = v210 + 1;
          while (1)
          {
            unsigned int v215 = v214 - 2;
            if (v214 - 2 < 0) {
              break;
            }
            --v214;
            if (*(void *)(v208[3] + 8 * v215) != *(void *)(v207[3] + 8 * v215)) {
              goto LABEL_320;
            }
          }
          int v214 = v213;
LABEL_320:
          v315 = (void *)*a2;
          v316 = *(int **)*a2;
          uint64_t v317 = (v315[1] - (void)v316) >> 2;
          uint64_t v318 = (v317 - 1);
          if ((int)v318 >= -1) {
            int v319 = -1;
          }
          else {
            int v319 = v317 - 1;
          }
          int v320 = v319 + 1;
          int v321 = v317 + 1;
          while (1)
          {
            unsigned int v322 = v321 - 2;
            if (v321 - 2 < 0) {
              break;
            }
            --v321;
            if (*(void *)(v315[3] + 8 * v322) != *(void *)(v207[3] + 8 * v322)) {
              goto LABEL_361;
            }
          }
          int v321 = v320;
LABEL_361:
          int v341 = v210 + 1;
          while (1)
          {
            unsigned int v342 = v341 - 2;
            if (v341 - 2 < 0) {
              break;
            }
            --v341;
            if (*(void *)(v208[3] + 8 * v342)) {
              goto LABEL_396;
            }
          }
          int v341 = v213;
LABEL_396:
          int v355 = v317 + 1;
          while (1)
          {
            unsigned int v356 = v355 - 2;
            if (v355 - 2 < 0) {
              break;
            }
            --v355;
            if (*(void *)(v315[3] + 8 * v356)) {
              goto LABEL_645;
            }
          }
          int v355 = v320;
LABEL_645:
          unint64_t v479 = (uint64_t)(v207[1] - *v207) >> 2;
          if (v214 <= v321) {
            int v480 = v321;
          }
          else {
            int v480 = v214;
          }
          if (v214 <= v355) {
            int v214 = v355;
          }
          if (v341 > v321) {
            int v321 = v341;
          }
          if (v479 > v321)
          {
            int v481 = 1;
          }
          else
          {
            int v321 = (uint64_t)(v207[1] - *v207) >> 2;
            int v481 = 4;
          }
          if (v479 > v214)
          {
            int v482 = 2;
          }
          else
          {
            int v214 = v321;
            int v482 = v481;
          }
          if (v479 > v480)
          {
            int v214 = v480;
            int v482 = 3;
          }
          uint64_t v2190 = v318;
          uint64_t v2208 = v211;
          if (!v214) {
            goto LABEL_680;
          }
          unint64_t v483 = *(void *)(v207[3] + 8 * (v214 - 1));
          if (v483 < 0x10) {
            goto LABEL_680;
          }
          switch(v482)
          {
            case 1:
              if (v214 == 2)
              {
                uint64_t v1922 = *v209;
                if (v1922)
                {
                  uint64_t v1923 = 0;
                  uint64_t v1924 = 0;
                  uint64_t v1925 = 0;
                  uint64_t v1926 = v208[19];
                  uint64_t v1927 = v315[19];
                  uint64_t v1928 = v207[19];
                  unint64_t v1929 = v209[1];
                  v1930 = (uint64_t *)v208[3];
                  uint64_t v1931 = *v1930;
                  uint64_t v1932 = v1930[1];
                  v1933 = (uint64_t *)v315[3];
                  uint64_t v1934 = *v1933;
                  uint64_t v1935 = v1933[1];
                  if (v1929 <= 1) {
                    uint64_t v1936 = 1;
                  }
                  else {
                    uint64_t v1936 = v209[1];
                  }
                  uint64_t v1937 = v1931 - v1932 * v1929;
                  uint64_t v1938 = v1934 - v1935 * v316[1];
                  do
                  {
                    if (v1929)
                    {
                      uint64_t v1939 = 0;
                      uint64_t v1940 = v1927 + 8 * v1924;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          uint64_t v1941 = 0;
                          uint64_t v1942 = *(void *)(v1926 + 8 * v1925);
                          unsigned int v1943 = v483 + 1;
                          do
                          {
                            if (v1942) {
                              BOOL v1944 = *(void *)(v1940 + v1941) == 0;
                            }
                            else {
                              BOOL v1944 = 1;
                            }
                            uint64_t v1945 = !v1944;
                            *(void *)(v1928 + v1941) = v1945;
                            --v1943;
                            v1941 += 8;
                          }
                          while (v1943 > 1);
                        }
                        v1925 += v1932;
                        v1924 += v1935;
                        v1928 += 8 * (int)v483;
                        ++v1939;
                        v1940 += 8 * v1935;
                      }
                      while (v1939 != v1936);
                    }
                    v1925 += v1937;
                    v1924 += v1938;
                    ++v1923;
                  }
                  while (v1923 != v1922);
                }
              }
              else if (v214 == 1)
              {
                uint64_t v1236 = *v209;
                if (v1236)
                {
                  uint64_t v1237 = 0;
                  uint64_t v1238 = 0;
                  uint64_t v1239 = v208[19];
                  uint64_t v1240 = v315[19];
                  uint64_t v1241 = v207[19];
                  uint64_t v1242 = *(void *)v208[3];
                  uint64_t v1243 = 8 * *(void *)v315[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      uint64_t v1244 = 0;
                      uint64_t v1245 = *(void *)(v1239 + 8 * v1238);
                      unsigned int v1246 = v483 + 1;
                      do
                      {
                        if (v1245) {
                          BOOL v1247 = *(void *)(v1240 + v1244) == 0;
                        }
                        else {
                          BOOL v1247 = 1;
                        }
                        uint64_t v1248 = !v1247;
                        *(void *)(v1241 + v1244) = v1248;
                        --v1246;
                        v1244 += 8;
                      }
                      while (v1246 > 1);
                    }
                    v1238 += v1242;
                    ++v1237;
                    v1241 += 8 * (int)v483;
                    v1240 += v1243;
                  }
                  while (v1237 != v1236);
                }
              }
              else
              {
                unint64_t v2154 = v207[6];
                if (v2154)
                {
                  unint64_t v2183 = 0;
                  uint64_t v2086 = v315[19];
                  uint64_t v2101 = v208[19];
                  uint64_t v1946 = v207[19];
                  do
                  {
                    uint64_t v1947 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      uint64_t v1948 = v208[3];
                      uint64_t v1949 = v211;
                      int v1950 = v2183;
                      do
                      {
                        ldiv_t v1951 = ldiv(v1950, v209[v1949]);
                        int v1950 = v1951.quot;
                        v1947 += *(void *)(v1948 + 8 * v1949--) * v1951.rem;
                      }
                      while (v1949 != -1);
                    }
                    uint64_t v1952 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1953) = 0;
                    }
                    else
                    {
                      uint64_t v1953 = 0;
                      uint64_t v1954 = v315[3];
                      int v1955 = v2183;
                      do
                      {
                        ldiv_t v1956 = ldiv(v1955, v316[v1952]);
                        int v1955 = v1956.quot;
                        v1953 += *(void *)(v1954 + 8 * v1952--) * v1956.rem;
                      }
                      while (v1952 != -1);
                    }
                    uint64_t v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      uint64_t v1957 = 0;
                      uint64_t v1958 = *(void *)(v2101 + 8 * (int)v1947);
                      unsigned int v1959 = v483 + 1;
                      do
                      {
                        if (v1958) {
                          BOOL v1960 = *(void *)(v2086 + 8 * (int)v1953 + v1957) == 0;
                        }
                        else {
                          BOOL v1960 = 1;
                        }
                        uint64_t v1961 = !v1960;
                        *(void *)(v1946 + v1957) = v1961;
                        --v1959;
                        v1957 += 8;
                      }
                      while (v1959 > 1);
                    }
                    v1946 += 8 * (int)v483;
                    v2183 += (int)v483;
                  }
                  while (v2183 < v2154);
                }
              }
              break;
            case 2:
              if (v214 == 2)
              {
                uint64_t v1962 = *v209;
                if (v1962)
                {
                  uint64_t v1963 = 0;
                  uint64_t v1964 = 0;
                  uint64_t v1965 = 0;
                  uint64_t v1966 = v208[19];
                  uint64_t v1967 = v315[19];
                  uint64_t v1968 = v207[19];
                  unint64_t v1969 = v209[1];
                  v1970 = (uint64_t *)v208[3];
                  uint64_t v1971 = *v1970;
                  uint64_t v1972 = v1970[1];
                  v1973 = (uint64_t *)v315[3];
                  uint64_t v1974 = *v1973;
                  uint64_t v1975 = v1973[1];
                  if (v1969 <= 1) {
                    uint64_t v1976 = 1;
                  }
                  else {
                    uint64_t v1976 = v209[1];
                  }
                  uint64_t v1977 = v1971 - v1972 * v1969;
                  uint64_t v1978 = v1974 - v1975 * v316[1];
                  do
                  {
                    if (v1969)
                    {
                      uint64_t v1979 = 0;
                      uint64_t v1980 = v1966 + 8 * v1965;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          uint64_t v1981 = 0;
                          uint64_t v1982 = *(void *)(v1967 + 8 * v1964);
                          unsigned int v1983 = v483 + 1;
                          do
                          {
                            if (v1982) {
                              BOOL v1984 = *(void *)(v1980 + v1981) == 0;
                            }
                            else {
                              BOOL v1984 = 1;
                            }
                            uint64_t v1985 = !v1984;
                            *(void *)(v1968 + v1981) = v1985;
                            --v1983;
                            v1981 += 8;
                          }
                          while (v1983 > 1);
                        }
                        v1965 += v1972;
                        v1964 += v1975;
                        v1968 += 8 * (int)v483;
                        ++v1979;
                        v1980 += 8 * v1972;
                      }
                      while (v1979 != v1976);
                    }
                    v1965 += v1977;
                    v1964 += v1978;
                    ++v1963;
                  }
                  while (v1963 != v1962);
                }
              }
              else if (v214 == 1)
              {
                uint64_t v1249 = *v209;
                if (v1249)
                {
                  uint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = v208[19];
                  uint64_t v1253 = v315[19];
                  uint64_t v1254 = v207[19];
                  uint64_t v1255 = *(void *)v315[3];
                  uint64_t v1256 = 8 * *(void *)v208[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      uint64_t v1257 = 0;
                      uint64_t v1258 = *(void *)(v1253 + 8 * v1251);
                      unsigned int v1259 = v483 + 1;
                      do
                      {
                        if (v1258) {
                          BOOL v1260 = *(void *)(v1252 + v1257) == 0;
                        }
                        else {
                          BOOL v1260 = 1;
                        }
                        uint64_t v1261 = !v1260;
                        *(void *)(v1254 + v1257) = v1261;
                        --v1259;
                        v1257 += 8;
                      }
                      while (v1259 > 1);
                    }
                    v1251 += v1255;
                    ++v1250;
                    v1254 += 8 * (int)v483;
                    v1252 += v1256;
                  }
                  while (v1250 != v1249);
                }
              }
              else
              {
                unint64_t v2155 = v207[6];
                if (v2155)
                {
                  unint64_t v2184 = 0;
                  uint64_t v2087 = v315[19];
                  uint64_t v2102 = v208[19];
                  uint64_t v1986 = v207[19];
                  do
                  {
                    uint64_t v1987 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      uint64_t v1988 = v208[3];
                      uint64_t v1989 = v211;
                      int v1990 = v2184;
                      do
                      {
                        ldiv_t v1991 = ldiv(v1990, v209[v1989]);
                        int v1990 = v1991.quot;
                        v1987 += *(void *)(v1988 + 8 * v1989--) * v1991.rem;
                      }
                      while (v1989 != -1);
                    }
                    uint64_t v1992 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1993) = 0;
                    }
                    else
                    {
                      uint64_t v1993 = 0;
                      uint64_t v1994 = v315[3];
                      int v1995 = v2184;
                      do
                      {
                        ldiv_t v1996 = ldiv(v1995, v316[v1992]);
                        int v1995 = v1996.quot;
                        v1993 += *(void *)(v1994 + 8 * v1992--) * v1996.rem;
                      }
                      while (v1992 != -1);
                    }
                    uint64_t v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      uint64_t v1997 = 0;
                      uint64_t v1998 = *(void *)(v2087 + 8 * (int)v1993);
                      unsigned int v1999 = v483 + 1;
                      do
                      {
                        if (v1998) {
                          BOOL v2000 = *(void *)(v2102 + 8 * (int)v1987 + v1997) == 0;
                        }
                        else {
                          BOOL v2000 = 1;
                        }
                        uint64_t v2001 = !v2000;
                        *(void *)(v1986 + v1997) = v2001;
                        --v1999;
                        v1997 += 8;
                      }
                      while (v1999 > 1);
                    }
                    v1986 += 8 * (int)v483;
                    v2184 += (int)v483;
                  }
                  while (v2184 < v2155);
                }
              }
              break;
            case 3:
              if (v214 == 2)
              {
                uint64_t v1468 = *v209;
                if (v1468)
                {
                  uint64_t v1469 = 0;
                  uint64_t v1470 = 0;
                  uint64_t v1471 = 0;
                  uint64_t v1472 = v208[19];
                  uint64_t v1473 = v315[19];
                  uint64_t v1474 = v207[19];
                  unint64_t v1475 = v209[1];
                  v1476 = (uint64_t *)v208[3];
                  uint64_t v1477 = *v1476;
                  uint64_t v1478 = v1476[1];
                  v1479 = (uint64_t *)v315[3];
                  uint64_t v1480 = *v1479;
                  uint64_t v1481 = v1479[1];
                  if (v1475 <= 1) {
                    uint64_t v1482 = 1;
                  }
                  else {
                    uint64_t v1482 = v209[1];
                  }
                  uint64_t v1483 = v1477 - v1478 * v1475;
                  uint64_t v1484 = v1480 - v1481 * v316[1];
                  do
                  {
                    if (v1475)
                    {
                      uint64_t v1485 = 0;
                      uint64_t v1486 = v1473 + 8 * v1470;
                      uint64_t v1487 = v1472 + 8 * v1471;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          uint64_t v1488 = 0;
                          unsigned int v1489 = v483 + 1;
                          do
                          {
                            if (*(void *)(v1487 + v1488)) {
                              BOOL v1490 = *(void *)(v1486 + v1488) == 0;
                            }
                            else {
                              BOOL v1490 = 1;
                            }
                            uint64_t v1491 = !v1490;
                            *(void *)(v1474 + v1488) = v1491;
                            --v1489;
                            v1488 += 8;
                          }
                          while (v1489 > 1);
                        }
                        v1471 += v1478;
                        v1470 += v1481;
                        v1474 += 8 * (int)v483;
                        ++v1485;
                        v1486 += 8 * v1481;
                        v1487 += 8 * v1478;
                      }
                      while (v1485 != v1482);
                    }
                    v1471 += v1483;
                    v1470 += v1484;
                    ++v1469;
                  }
                  while (v1469 != v1468);
                }
              }
              else if (v214 == 1)
              {
                uint64_t v484 = *v209;
                if (v484)
                {
                  uint64_t v485 = 0;
                  uint64_t v486 = v208[19];
                  uint64_t v487 = v315[19];
                  uint64_t v488 = v207[19];
                  uint64_t v489 = 8 * *(void *)v315[3];
                  uint64_t v490 = 8 * *(void *)v208[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      uint64_t v491 = 0;
                      unsigned int v492 = v483 + 1;
                      do
                      {
                        if (*(void *)(v486 + v491)) {
                          BOOL v493 = *(void *)(v487 + v491) == 0;
                        }
                        else {
                          BOOL v493 = 1;
                        }
                        uint64_t v494 = !v493;
                        *(void *)(v488 + v491) = v494;
                        --v492;
                        v491 += 8;
                      }
                      while (v492 > 1);
                    }
                    ++v485;
                    v488 += 8 * (int)v483;
                    v487 += v489;
                    v486 += v490;
                  }
                  while (v485 != v484);
                }
              }
              else
              {
                unint64_t v2142 = v207[6];
                if (v2142)
                {
                  unint64_t v2171 = 0;
                  uint64_t v2080 = v315[19];
                  uint64_t v2093 = v208[19];
                  uint64_t v1492 = v207[19];
                  do
                  {
                    uint64_t v1493 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      uint64_t v1494 = v208[3];
                      uint64_t v1495 = v211;
                      int v1496 = v2171;
                      do
                      {
                        ldiv_t v1497 = ldiv(v1496, v209[v1495]);
                        int v1496 = v1497.quot;
                        v1493 += *(void *)(v1494 + 8 * v1495--) * v1497.rem;
                      }
                      while (v1495 != -1);
                    }
                    uint64_t v1498 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1499) = 0;
                    }
                    else
                    {
                      uint64_t v1499 = 0;
                      uint64_t v1500 = v315[3];
                      int v1501 = v2171;
                      do
                      {
                        ldiv_t v1502 = ldiv(v1501, v316[v1498]);
                        int v1501 = v1502.quot;
                        v1499 += *(void *)(v1500 + 8 * v1498--) * v1502.rem;
                      }
                      while (v1498 != -1);
                    }
                    uint64_t v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      uint64_t v1503 = 0;
                      unsigned int v1504 = v483 + 1;
                      do
                      {
                        if (*(void *)(v2093 + 8 * (int)v1493 + v1503)) {
                          BOOL v1505 = *(void *)(v2080 + 8 * (int)v1499 + v1503) == 0;
                        }
                        else {
                          BOOL v1505 = 1;
                        }
                        uint64_t v1506 = !v1505;
                        *(void *)(v1492 + v1503) = v1506;
                        --v1504;
                        v1503 += 8;
                      }
                      while (v1504 > 1);
                    }
                    v1492 += 8 * (int)v483;
                    v2171 += (int)v483;
                  }
                  while (v2171 < v2142);
                }
              }
              break;
            default:
LABEL_680:
              switch(v479)
              {
                case 1uLL:
                  uint64_t v495 = v207[6];
                  if (v495)
                  {
                    v496 = (void *)v208[19];
                    v497 = (void *)v315[19];
                    v498 = (uint64_t *)v207[19];
                    uint64_t v499 = 8 * *(void *)v315[3];
                    uint64_t v500 = 8 * *(void *)v208[3];
                    do
                    {
                      if (*v496) {
                        BOOL v501 = *v497 == 0;
                      }
                      else {
                        BOOL v501 = 1;
                      }
                      uint64_t v502 = !v501;
                      *v498++ = v502;
                      v497 = (void *)((char *)v497 + v499);
                      v496 = (void *)((char *)v496 + v500);
                      --v495;
                    }
                    while (v495);
                  }
                  break;
                case 2uLL:
                  uint64_t v952 = *v209;
                  if (v952)
                  {
                    uint64_t v953 = 0;
                    uint64_t v954 = 0;
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = v208[19];
                    uint64_t v958 = v315[19];
                    uint64_t v959 = v207[19];
                    unint64_t v960 = v209[1];
                    v961 = (uint64_t *)v208[3];
                    uint64_t v962 = *v961;
                    uint64_t v963 = v961[1];
                    v964 = (uint64_t *)v315[3];
                    uint64_t v965 = *v964;
                    uint64_t v966 = v964[1];
                    uint64_t v967 = v965 - v966 * v316[1];
                    if (v960 <= 1) {
                      uint64_t v968 = 1;
                    }
                    else {
                      uint64_t v968 = v209[1];
                    }
                    uint64_t v969 = v962 - v963 * v960;
                    do
                    {
                      if (v960)
                      {
                        uint64_t v970 = v954 + v968;
                        v971 = (uint64_t *)(v959 + 8 * v954);
                        uint64_t v972 = v968;
                        do
                        {
                          if (*(void *)(v957 + 8 * v956)) {
                            BOOL v973 = *(void *)(v958 + 8 * v955) == 0;
                          }
                          else {
                            BOOL v973 = 1;
                          }
                          uint64_t v974 = !v973;
                          *v971++ = v974;
                          v956 += v963;
                          v955 += v966;
                          --v972;
                        }
                        while (v972);
                        uint64_t v954 = v970;
                      }
                      v956 += v969;
                      v955 += v967;
                      ++v953;
                    }
                    while (v953 != v952);
                  }
                  break;
                case 3uLL:
                  uint64_t v975 = *v209;
                  if (v975)
                  {
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = 0;
                    uint64_t v979 = 0;
                    uint64_t v980 = v208[19];
                    uint64_t v981 = v315[19];
                    uint64_t v982 = v207[19];
                    unint64_t v983 = v209[1];
                    v984 = (void *)v208[3];
                    uint64_t v985 = v984[1];
                    v986 = (void *)v315[3];
                    uint64_t v987 = v986[1];
                    uint64_t v988 = *v986 - v987 * v316[1];
                    if (v983 <= 1) {
                      uint64_t v989 = 1;
                    }
                    else {
                      uint64_t v989 = v209[1];
                    }
                    unint64_t v990 = *v984 - v985 * v983;
                    do
                    {
                      if (v983)
                      {
                        uint64_t v991 = 0;
                        unint64_t v992 = v209[2];
                        uint64_t v993 = v984[2];
                        uint64_t v994 = v986[2];
                        if (v992 <= 1) {
                          uint64_t v995 = 1;
                        }
                        else {
                          uint64_t v995 = v209[2];
                        }
                        uint64_t v996 = v987 - v994 * v316[2];
                        do
                        {
                          uint64_t v997 = v995;
                          if (v992)
                          {
                            do
                            {
                              if (*(void *)(v980 + 8 * v979)) {
                                BOOL v998 = *(void *)(v981 + 8 * v978) == 0;
                              }
                              else {
                                BOOL v998 = 1;
                              }
                              uint64_t v999 = !v998;
                              *(void *)(v982 + 8 * v977++) = v999;
                              v979 += v993;
                              v978 += v994;
                              --v997;
                            }
                            while (v997);
                          }
                          v979 += v985 - v993 * v992;
                          v978 += v996;
                          ++v991;
                        }
                        while (v991 != v989);
                      }
                      v979 += v990;
                      v978 += v988;
                      ++v976;
                    }
                    while (v976 != v975);
                  }
                  break;
                case 4uLL:
                  uint64_t v2213 = *v209;
                  if (v2213)
                  {
                    uint64_t v1000 = 0;
                    uint64_t v1001 = 0;
                    uint64_t v1002 = 0;
                    uint64_t v1003 = 0;
                    uint64_t v1004 = v208[19];
                    uint64_t v1005 = v315[19];
                    uint64_t v1006 = v207[19];
                    unint64_t v1007 = v209[1];
                    v1008 = (void *)v208[3];
                    v1009 = (void *)v315[3];
                    uint64_t v2105 = v1009[1];
                    uint64_t v2120 = v1008[1];
                    uint64_t v2163 = *v1009 - v2105 * v316[1];
                    int v2195 = v209[1];
                    if (v1007 <= 1) {
                      uint64_t v1010 = 1;
                    }
                    else {
                      uint64_t v1010 = v209[1];
                    }
                    unint64_t v2134 = *v1008 - v1008[1] * v1007;
                    do
                    {
                      if (v2195)
                      {
                        uint64_t v1011 = 0;
                        unint64_t v1012 = v209[2];
                        uint64_t v1013 = v1008[2];
                        uint64_t v1014 = v1009[2];
                        if (v1012 <= 1) {
                          uint64_t v1015 = 1;
                        }
                        else {
                          uint64_t v1015 = v209[2];
                        }
                        uint64_t v1016 = v2105 - v1014 * v316[2];
                        do
                        {
                          if (v1012)
                          {
                            uint64_t v1017 = 0;
                            unint64_t v1018 = v209[3];
                            uint64_t v1019 = v1008[3];
                            uint64_t v1020 = v1009[3];
                            if (v1018 <= 1) {
                              uint64_t v1021 = 1;
                            }
                            else {
                              uint64_t v1021 = v209[3];
                            }
                            uint64_t v1022 = v1014 - v1020 * v316[3];
                            do
                            {
                              uint64_t v1023 = v1021;
                              if (v1018)
                              {
                                do
                                {
                                  if (*(void *)(v1004 + 8 * v1003)) {
                                    BOOL v1024 = *(void *)(v1005 + 8 * v1002) == 0;
                                  }
                                  else {
                                    BOOL v1024 = 1;
                                  }
                                  uint64_t v1025 = !v1024;
                                  *(void *)(v1006 + 8 * v1001++) = v1025;
                                  v1003 += v1019;
                                  v1002 += v1020;
                                  --v1023;
                                }
                                while (v1023);
                              }
                              v1003 += v1013 - v1019 * v1018;
                              v1002 += v1022;
                              ++v1017;
                            }
                            while (v1017 != v1015);
                          }
                          v1003 += v2120 - v1013 * v1012;
                          v1002 += v1016;
                          ++v1011;
                        }
                        while (v1011 != v1010);
                      }
                      v1003 += v2134;
                      v1002 += v2163;
                      ++v1000;
                    }
                    while (v1000 != v2213);
                  }
                  break;
                default:
                  uint64_t v938 = v207[6];
                  if (v938)
                  {
                    uint64_t v939 = 0;
                    uint64_t v2133 = v315[19];
                    uint64_t v2162 = v208[19];
                    uint64_t v2119 = v207[19];
                    do
                    {
                      uint64_t v940 = 0;
                      if ((v211 & 0x80000000) == 0)
                      {
                        uint64_t v941 = v208[3];
                        uint64_t v942 = v211;
                        int v943 = v939;
                        do
                        {
                          ldiv_t v944 = ldiv(v943, v209[v942]);
                          int v943 = v944.quot;
                          v940 += *(void *)(v941 + 8 * v942--) * v944.rem;
                        }
                        while (v942 != -1);
                      }
                      uint64_t v945 = v2190;
                      if ((v2190 & 0x80000000) != 0)
                      {
                        LODWORD(v946) = 0;
                      }
                      else
                      {
                        uint64_t v946 = 0;
                        uint64_t v947 = v315[3];
                        int v948 = v939;
                        do
                        {
                          ldiv_t v949 = ldiv(v948, v316[v945]);
                          int v948 = v949.quot;
                          v946 += *(void *)(v947 + 8 * v945--) * v949.rem;
                        }
                        while (v945 != -1);
                      }
                      if (*(void *)(v2162 + 8 * (int)v940)) {
                        BOOL v950 = *(void *)(v2133 + 8 * (int)v946) == 0;
                      }
                      else {
                        BOOL v950 = 1;
                      }
                      uint64_t v951 = !v950;
                      *(void *)(v2119 + 8 * v939++) = v951;
                      uint64_t v211 = v2208;
                    }
                    while (v939 != v938);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v36)
      {
        case 0:
          BOOL v37 = **(float **)(*a1 + 152) != 0.0;
          if (**(float **)(*a2 + 152) == 0.0) {
            BOOL v37 = 0;
          }
          **(float **)(*(void *)a3 + 152) = (float)v37;
          return;
        case 1:
          int v254 = *(_DWORD *)(*a2 + 160);
          if (v254 >= 1)
          {
            v255 = *(float **)(*(void *)a3 + 152);
            v256 = *(float **)(*a2 + 152);
            float v257 = **(float **)(*a1 + 152);
            unsigned int v258 = v254 + 1;
            do
            {
              BOOL v259 = v257 != 0.0;
              float v260 = *v256++;
              if (v260 == 0.0) {
                BOOL v259 = 0;
              }
              *v255++ = (float)v259;
              --v258;
            }
            while (v258 > 1);
          }
          return;
        case 2:
          int v261 = *(_DWORD *)(*a1 + 160);
          if (v261 >= 1)
          {
            v262 = *(float **)(*(void *)a3 + 152);
            v263 = *(float **)(*a1 + 152);
            float v264 = **(float **)(*a2 + 152);
            unsigned int v265 = v261 + 1;
            do
            {
              BOOL v266 = v264 != 0.0;
              float v267 = *v263++;
              if (v267 == 0.0) {
                BOOL v266 = 0;
              }
              *v262++ = (float)v266;
              --v265;
            }
            while (v265 > 1);
          }
          return;
        case 3:
          int v268 = *(_DWORD *)(*(void *)a3 + 48);
          if (v268 >= 1)
          {
            v269 = *(float **)(*(void *)a3 + 152);
            v270 = *(float **)(*a2 + 152);
            v271 = *(float **)(*a1 + 152);
            unsigned int v272 = v268 + 1;
            do
            {
              float v273 = *v271++;
              float v274 = v273;
              float v275 = *v270++;
              BOOL v276 = v274 != 0.0;
              if (v275 == 0.0) {
                BOOL v276 = 0;
              }
              *v269++ = (float)v276;
              --v272;
            }
            while (v272 > 1);
          }
          return;
        default:
          v245 = *(void **)a3;
          v246 = (void *)*a1;
          v247 = *(int **)*a1;
          uint64_t v248 = (v246[1] - (void)v247) >> 2;
          uint64_t v249 = (v248 - 1);
          if ((int)v249 >= -1) {
            int v250 = -1;
          }
          else {
            int v250 = v248 - 1;
          }
          int v251 = v250 + 1;
          int v252 = v248 + 1;
          while (1)
          {
            unsigned int v253 = v252 - 2;
            if (v252 - 2 < 0) {
              break;
            }
            --v252;
            if (*(void *)(v246[3] + 8 * v253) != *(void *)(v245[3] + 8 * v253)) {
              goto LABEL_328;
            }
          }
          int v252 = v251;
LABEL_328:
          v323 = (void *)*a2;
          v324 = *(int **)*a2;
          uint64_t v325 = (v323[1] - (void)v324) >> 2;
          uint64_t v326 = (v325 - 1);
          if ((int)v326 >= -1) {
            int v327 = -1;
          }
          else {
            int v327 = v325 - 1;
          }
          int v328 = v327 + 1;
          int v329 = v325 + 1;
          while (1)
          {
            unsigned int v330 = v329 - 2;
            if (v329 - 2 < 0) {
              break;
            }
            --v329;
            if (*(void *)(v323[3] + 8 * v330) != *(void *)(v245[3] + 8 * v330)) {
              goto LABEL_366;
            }
          }
          int v329 = v328;
LABEL_366:
          int v343 = v248 + 1;
          while (1)
          {
            unsigned int v344 = v343 - 2;
            if (v343 - 2 < 0) {
              break;
            }
            --v343;
            if (*(void *)(v246[3] + 8 * v344)) {
              goto LABEL_401;
            }
          }
          int v343 = v251;
LABEL_401:
          int v357 = v325 + 1;
          while (1)
          {
            unsigned int v358 = v357 - 2;
            if (v357 - 2 < 0) {
              break;
            }
            --v357;
            if (*(void *)(v323[3] + 8 * v358)) {
              goto LABEL_692;
            }
          }
          int v357 = v328;
LABEL_692:
          unint64_t v503 = (uint64_t)(v245[1] - *v245) >> 2;
          if (v252 <= v329) {
            int v504 = v329;
          }
          else {
            int v504 = v252;
          }
          if (v252 <= v357) {
            int v252 = v357;
          }
          if (v343 > v329) {
            int v329 = v343;
          }
          if (v503 > v329)
          {
            int v505 = 1;
          }
          else
          {
            int v329 = (uint64_t)(v245[1] - *v245) >> 2;
            int v505 = v36;
          }
          if (v503 > v252)
          {
            int v506 = 2;
          }
          else
          {
            int v252 = v329;
            int v506 = v505;
          }
          if (v503 > v504)
          {
            int v252 = v504;
            int v506 = 3;
          }
          uint64_t v2191 = v326;
          uint64_t v2209 = v249;
          if (!v252) {
            goto LABEL_723;
          }
          unint64_t v507 = *(void *)(v245[3] + 8 * (v252 - 1));
          if (v507 < 0x10) {
            goto LABEL_723;
          }
          switch(v506)
          {
            case 1:
              if (v252 == 2)
              {
                uint64_t v2002 = *v247;
                if (v2002)
                {
                  uint64_t v2003 = 0;
                  uint64_t v2004 = 0;
                  uint64_t v2005 = 0;
                  uint64_t v2006 = v246[19];
                  uint64_t v2007 = v323[19];
                  uint64_t v2008 = v245[19];
                  unint64_t v2009 = v247[1];
                  v2010 = (uint64_t *)v246[3];
                  uint64_t v2011 = *v2010;
                  uint64_t v2012 = v2010[1];
                  v2013 = (uint64_t *)v323[3];
                  uint64_t v2014 = *v2013;
                  uint64_t v2015 = v2013[1];
                  if (v2009 <= 1) {
                    uint64_t v2016 = 1;
                  }
                  else {
                    uint64_t v2016 = v247[1];
                  }
                  uint64_t v2017 = v2011 - v2012 * v2009;
                  uint64_t v2018 = v2014 - v2015 * v324[1];
                  do
                  {
                    if (v2009)
                    {
                      uint64_t v2019 = 0;
                      uint64_t v2020 = v2007 + 4 * v2004;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          uint64_t v2021 = 0;
                          float v2022 = *(float *)(v2006 + 4 * v2005);
                          unsigned int v2023 = v507 + 1;
                          do
                          {
                            BOOL v2024 = v2022 != 0.0;
                            if (*(float *)(v2020 + v2021) == 0.0) {
                              BOOL v2024 = 0;
                            }
                            *(float *)(v2008 + v2021) = (float)v2024;
                            --v2023;
                            v2021 += 4;
                          }
                          while (v2023 > 1);
                        }
                        v2005 += v2012;
                        v2004 += v2015;
                        v2008 += 4 * (int)v507;
                        ++v2019;
                        v2020 += 4 * v2015;
                      }
                      while (v2019 != v2016);
                    }
                    v2005 += v2017;
                    v2004 += v2018;
                    ++v2003;
                  }
                  while (v2003 != v2002);
                }
              }
              else if (v252 == 1)
              {
                uint64_t v1262 = *v247;
                if (v1262)
                {
                  uint64_t v1263 = 0;
                  uint64_t v1264 = 0;
                  uint64_t v1265 = v246[19];
                  uint64_t v1266 = v323[19];
                  uint64_t v1267 = v245[19];
                  uint64_t v1268 = *(void *)v246[3];
                  uint64_t v1269 = 4 * *(void *)v323[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      uint64_t v1270 = 0;
                      float v1271 = *(float *)(v1265 + 4 * v1264);
                      unsigned int v1272 = v507 + 1;
                      do
                      {
                        BOOL v1273 = v1271 != 0.0;
                        if (*(float *)(v1266 + v1270) == 0.0) {
                          BOOL v1273 = 0;
                        }
                        *(float *)(v1267 + v1270) = (float)v1273;
                        --v1272;
                        v1270 += 4;
                      }
                      while (v1272 > 1);
                    }
                    v1264 += v1268;
                    ++v1263;
                    v1267 += 4 * (int)v507;
                    v1266 += v1269;
                  }
                  while (v1263 != v1262);
                }
              }
              else
              {
                unint64_t v2156 = v245[6];
                if (v2156)
                {
                  unint64_t v2185 = 0;
                  uint64_t v2088 = v323[19];
                  uint64_t v2103 = v246[19];
                  uint64_t v2025 = v245[19];
                  do
                  {
                    uint64_t v2026 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      uint64_t v2027 = v246[3];
                      uint64_t v2028 = v249;
                      int v2029 = v2185;
                      do
                      {
                        ldiv_t v2030 = ldiv(v2029, v247[v2028]);
                        int v2029 = v2030.quot;
                        v2026 += *(void *)(v2027 + 8 * v2028--) * v2030.rem;
                      }
                      while (v2028 != -1);
                    }
                    uint64_t v2031 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v2032) = 0;
                    }
                    else
                    {
                      uint64_t v2032 = 0;
                      uint64_t v2033 = v323[3];
                      int v2034 = v2185;
                      do
                      {
                        ldiv_t v2035 = ldiv(v2034, v324[v2031]);
                        int v2034 = v2035.quot;
                        v2032 += *(void *)(v2033 + 8 * v2031--) * v2035.rem;
                      }
                      while (v2031 != -1);
                    }
                    uint64_t v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      uint64_t v2036 = 0;
                      float v2037 = *(float *)(v2103 + 4 * (int)v2026);
                      unsigned int v2038 = v507 + 1;
                      do
                      {
                        BOOL v2039 = v2037 != 0.0;
                        if (*(float *)(v2088 + 4 * (int)v2032 + v2036) == 0.0) {
                          BOOL v2039 = 0;
                        }
                        *(float *)(v2025 + v2036) = (float)v2039;
                        --v2038;
                        v2036 += 4;
                      }
                      while (v2038 > 1);
                    }
                    v2025 += 4 * (int)v507;
                    v2185 += (int)v507;
                  }
                  while (v2185 < v2156);
                }
              }
              break;
            case 2:
              if (v252 == 2)
              {
                uint64_t v2040 = *v247;
                if (v2040)
                {
                  uint64_t v2041 = 0;
                  uint64_t v2042 = 0;
                  uint64_t v2043 = 0;
                  uint64_t v2044 = v246[19];
                  uint64_t v2045 = v323[19];
                  uint64_t v2046 = v245[19];
                  unint64_t v2047 = v247[1];
                  v2048 = (uint64_t *)v246[3];
                  uint64_t v2049 = *v2048;
                  uint64_t v2050 = v2048[1];
                  v2051 = (uint64_t *)v323[3];
                  uint64_t v2052 = *v2051;
                  uint64_t v2053 = v2051[1];
                  if (v2047 <= 1) {
                    uint64_t v2054 = 1;
                  }
                  else {
                    uint64_t v2054 = v247[1];
                  }
                  uint64_t v2055 = v2049 - v2050 * v2047;
                  uint64_t v2056 = v2052 - v2053 * v324[1];
                  do
                  {
                    if (v2047)
                    {
                      uint64_t v2057 = 0;
                      uint64_t v2058 = v2044 + 4 * v2043;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          uint64_t v2059 = 0;
                          float v2060 = *(float *)(v2045 + 4 * v2042);
                          unsigned int v2061 = v507 + 1;
                          do
                          {
                            BOOL v2062 = v2060 != 0.0;
                            if (*(float *)(v2058 + v2059) == 0.0) {
                              BOOL v2062 = 0;
                            }
                            *(float *)(v2046 + v2059) = (float)v2062;
                            --v2061;
                            v2059 += 4;
                          }
                          while (v2061 > 1);
                        }
                        v2043 += v2050;
                        v2042 += v2053;
                        v2046 += 4 * (int)v507;
                        ++v2057;
                        v2058 += 4 * v2050;
                      }
                      while (v2057 != v2054);
                    }
                    v2043 += v2055;
                    v2042 += v2056;
                    ++v2041;
                  }
                  while (v2041 != v2040);
                }
              }
              else if (v252 == 1)
              {
                uint64_t v1274 = *v247;
                if (v1274)
                {
                  uint64_t v1275 = 0;
                  uint64_t v1276 = 0;
                  uint64_t v1277 = v246[19];
                  uint64_t v1278 = v323[19];
                  uint64_t v1279 = v245[19];
                  uint64_t v1280 = *(void *)v323[3];
                  uint64_t v1281 = 4 * *(void *)v246[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      uint64_t v1282 = 0;
                      float v1283 = *(float *)(v1278 + 4 * v1276);
                      unsigned int v1284 = v507 + 1;
                      do
                      {
                        BOOL v1285 = v1283 != 0.0;
                        if (*(float *)(v1277 + v1282) == 0.0) {
                          BOOL v1285 = 0;
                        }
                        *(float *)(v1279 + v1282) = (float)v1285;
                        --v1284;
                        v1282 += 4;
                      }
                      while (v1284 > 1);
                    }
                    v1276 += v1280;
                    ++v1275;
                    v1279 += 4 * (int)v507;
                    v1277 += v1281;
                  }
                  while (v1275 != v1274);
                }
              }
              else
              {
                unint64_t v2157 = v245[6];
                if (v2157)
                {
                  unint64_t v2186 = 0;
                  uint64_t v2089 = v323[19];
                  uint64_t v2104 = v246[19];
                  uint64_t v2063 = v245[19];
                  do
                  {
                    uint64_t v2064 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      uint64_t v2065 = v246[3];
                      uint64_t v2066 = v249;
                      int v2067 = v2186;
                      do
                      {
                        ldiv_t v2068 = ldiv(v2067, v247[v2066]);
                        int v2067 = v2068.quot;
                        v2064 += *(void *)(v2065 + 8 * v2066--) * v2068.rem;
                      }
                      while (v2066 != -1);
                    }
                    uint64_t v2069 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v2070) = 0;
                    }
                    else
                    {
                      uint64_t v2070 = 0;
                      uint64_t v2071 = v323[3];
                      int v2072 = v2186;
                      do
                      {
                        ldiv_t v2073 = ldiv(v2072, v324[v2069]);
                        int v2072 = v2073.quot;
                        v2070 += *(void *)(v2071 + 8 * v2069--) * v2073.rem;
                      }
                      while (v2069 != -1);
                    }
                    uint64_t v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      uint64_t v2074 = 0;
                      float v2075 = *(float *)(v2089 + 4 * (int)v2070);
                      unsigned int v2076 = v507 + 1;
                      do
                      {
                        BOOL v2077 = v2075 != 0.0;
                        if (*(float *)(v2104 + 4 * (int)v2064 + v2074) == 0.0) {
                          BOOL v2077 = 0;
                        }
                        *(float *)(v2063 + v2074) = (float)v2077;
                        --v2076;
                        v2074 += 4;
                      }
                      while (v2076 > 1);
                    }
                    v2063 += 4 * (int)v507;
                    v2186 += (int)v507;
                  }
                  while (v2186 < v2157);
                }
              }
              break;
            case 3:
              if (v252 == 2)
              {
                uint64_t v1507 = *v247;
                if (v1507)
                {
                  uint64_t v1508 = 0;
                  uint64_t v1509 = 0;
                  uint64_t v1510 = 0;
                  uint64_t v1511 = v246[19];
                  uint64_t v1512 = v323[19];
                  uint64_t v1513 = v245[19];
                  unint64_t v1514 = v247[1];
                  v1515 = (uint64_t *)v246[3];
                  uint64_t v1516 = *v1515;
                  uint64_t v1517 = v1515[1];
                  v1518 = (uint64_t *)v323[3];
                  uint64_t v1519 = *v1518;
                  uint64_t v1520 = v1518[1];
                  if (v1514 <= 1) {
                    uint64_t v1521 = 1;
                  }
                  else {
                    uint64_t v1521 = v247[1];
                  }
                  uint64_t v1522 = v1516 - v1517 * v1514;
                  uint64_t v1523 = v1519 - v1520 * v324[1];
                  do
                  {
                    if (v1514)
                    {
                      uint64_t v1524 = 0;
                      uint64_t v1525 = v1512 + 4 * v1509;
                      uint64_t v1526 = v1511 + 4 * v1510;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          uint64_t v1527 = 0;
                          unsigned int v1528 = v507 + 1;
                          do
                          {
                            BOOL v1529 = *(float *)(v1526 + v1527) != 0.0;
                            if (*(float *)(v1525 + v1527) == 0.0) {
                              BOOL v1529 = 0;
                            }
                            *(float *)(v1513 + v1527) = (float)v1529;
                            --v1528;
                            v1527 += 4;
                          }
                          while (v1528 > 1);
                        }
                        v1510 += v1517;
                        v1509 += v1520;
                        v1513 += 4 * (int)v507;
                        ++v1524;
                        v1525 += 4 * v1520;
                        v1526 += 4 * v1517;
                      }
                      while (v1524 != v1521);
                    }
                    v1510 += v1522;
                    v1509 += v1523;
                    ++v1508;
                  }
                  while (v1508 != v1507);
                }
              }
              else if (v252 == 1)
              {
                uint64_t v508 = *v247;
                if (v508)
                {
                  uint64_t v509 = 0;
                  uint64_t v510 = v246[19];
                  uint64_t v511 = v323[19];
                  uint64_t v512 = v245[19];
                  uint64_t v513 = 4 * *(void *)v323[3];
                  uint64_t v514 = 4 * *(void *)v246[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      uint64_t v515 = 0;
                      unsigned int v516 = v507 + 1;
                      do
                      {
                        BOOL v517 = *(float *)(v510 + v515) != 0.0;
                        if (*(float *)(v511 + v515) == 0.0) {
                          BOOL v517 = 0;
                        }
                        *(float *)(v512 + v515) = (float)v517;
                        --v516;
                        v515 += 4;
                      }
                      while (v516 > 1);
                    }
                    ++v509;
                    v512 += 4 * (int)v507;
                    v511 += v513;
                    v510 += v514;
                  }
                  while (v509 != v508);
                }
              }
              else
              {
                unint64_t v2143 = v245[6];
                if (v2143)
                {
                  unint64_t v2172 = 0;
                  uint64_t v2081 = v323[19];
                  uint64_t v2094 = v246[19];
                  uint64_t v1530 = v245[19];
                  do
                  {
                    uint64_t v1531 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      uint64_t v1532 = v246[3];
                      uint64_t v1533 = v249;
                      int v1534 = v2172;
                      do
                      {
                        ldiv_t v1535 = ldiv(v1534, v247[v1533]);
                        int v1534 = v1535.quot;
                        v1531 += *(void *)(v1532 + 8 * v1533--) * v1535.rem;
                      }
                      while (v1533 != -1);
                    }
                    uint64_t v1536 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v1537) = 0;
                    }
                    else
                    {
                      uint64_t v1537 = 0;
                      uint64_t v1538 = v323[3];
                      int v1539 = v2172;
                      do
                      {
                        ldiv_t v1540 = ldiv(v1539, v324[v1536]);
                        int v1539 = v1540.quot;
                        v1537 += *(void *)(v1538 + 8 * v1536--) * v1540.rem;
                      }
                      while (v1536 != -1);
                    }
                    uint64_t v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      uint64_t v1541 = 0;
                      unsigned int v1542 = v507 + 1;
                      do
                      {
                        BOOL v1543 = *(float *)(v2094 + 4 * (int)v1531 + v1541) != 0.0;
                        if (*(float *)(v2081 + 4 * (int)v1537 + v1541) == 0.0) {
                          BOOL v1543 = 0;
                        }
                        *(float *)(v1530 + v1541) = (float)v1543;
                        --v1542;
                        v1541 += 4;
                      }
                      while (v1542 > 1);
                    }
                    v1530 += 4 * (int)v507;
                    v2172 += (int)v507;
                  }
                  while (v2172 < v2143);
                }
              }
              break;
            default:
LABEL_723:
              switch(v503)
              {
                case 1uLL:
                  uint64_t v518 = v245[6];
                  if (v518)
                  {
                    v519 = (float *)v246[19];
                    v520 = (float *)v323[19];
                    v521 = (float *)v245[19];
                    uint64_t v522 = 4 * *(void *)v323[3];
                    uint64_t v523 = 4 * *(void *)v246[3];
                    do
                    {
                      BOOL v524 = *v519 != 0.0;
                      if (*v520 == 0.0) {
                        BOOL v524 = 0;
                      }
                      *v521++ = (float)v524;
                      v520 = (float *)((char *)v520 + v522);
                      v519 = (float *)((char *)v519 + v523);
                      --v518;
                    }
                    while (v518);
                  }
                  break;
                case 2uLL:
                  uint64_t v1039 = *v247;
                  if (v1039)
                  {
                    uint64_t v1040 = 0;
                    uint64_t v1041 = 0;
                    uint64_t v1042 = 0;
                    uint64_t v1043 = 0;
                    uint64_t v1044 = v246[19];
                    uint64_t v1045 = v323[19];
                    uint64_t v1046 = v245[19];
                    unint64_t v1047 = v247[1];
                    v1048 = (uint64_t *)v246[3];
                    uint64_t v1049 = *v1048;
                    uint64_t v1050 = v1048[1];
                    v1051 = (uint64_t *)v323[3];
                    uint64_t v1052 = *v1051;
                    uint64_t v1053 = v1051[1];
                    uint64_t v1054 = v1052 - v1053 * v324[1];
                    if (v1047 <= 1) {
                      uint64_t v1055 = 1;
                    }
                    else {
                      uint64_t v1055 = v247[1];
                    }
                    uint64_t v1056 = v1049 - v1050 * v1047;
                    do
                    {
                      if (v1047)
                      {
                        uint64_t v1057 = v1041 + v1055;
                        v1058 = (float *)(v1046 + 4 * v1041);
                        uint64_t v1059 = v1055;
                        do
                        {
                          BOOL v1060 = *(float *)(v1044 + 4 * v1043) != 0.0;
                          if (*(float *)(v1045 + 4 * v1042) == 0.0) {
                            BOOL v1060 = 0;
                          }
                          *v1058++ = (float)v1060;
                          v1043 += v1050;
                          v1042 += v1053;
                          --v1059;
                        }
                        while (v1059);
                        uint64_t v1041 = v1057;
                      }
                      v1043 += v1056;
                      v1042 += v1054;
                      ++v1040;
                    }
                    while (v1040 != v1039);
                  }
                  break;
                case 3uLL:
                  uint64_t v1061 = *v247;
                  if (v1061)
                  {
                    uint64_t v1062 = 0;
                    uint64_t v1063 = 0;
                    uint64_t v1064 = 0;
                    uint64_t v1065 = 0;
                    uint64_t v1066 = v246[19];
                    uint64_t v1067 = v323[19];
                    uint64_t v1068 = v245[19];
                    unint64_t v1069 = v247[1];
                    v1070 = (void *)v246[3];
                    uint64_t v1071 = v1070[1];
                    v1072 = (void *)v323[3];
                    uint64_t v1073 = v1072[1];
                    uint64_t v1074 = *v1072 - v1073 * v324[1];
                    if (v1069 <= 1) {
                      uint64_t v1075 = 1;
                    }
                    else {
                      uint64_t v1075 = v247[1];
                    }
                    unint64_t v1076 = *v1070 - v1071 * v1069;
                    do
                    {
                      if (v1069)
                      {
                        uint64_t v1077 = 0;
                        unint64_t v1078 = v247[2];
                        uint64_t v1079 = v1070[2];
                        uint64_t v1080 = v1072[2];
                        if (v1078 <= 1) {
                          uint64_t v1081 = 1;
                        }
                        else {
                          uint64_t v1081 = v247[2];
                        }
                        uint64_t v1082 = v1073 - v1080 * v324[2];
                        do
                        {
                          uint64_t v1083 = v1081;
                          if (v1078)
                          {
                            do
                            {
                              BOOL v1084 = *(float *)(v1066 + 4 * v1065) != 0.0;
                              if (*(float *)(v1067 + 4 * v1064) == 0.0) {
                                BOOL v1084 = 0;
                              }
                              *(float *)(v1068 + 4 * v1063++) = (float)v1084;
                              v1065 += v1079;
                              v1064 += v1080;
                              --v1083;
                            }
                            while (v1083);
                          }
                          v1065 += v1071 - v1079 * v1078;
                          v1064 += v1082;
                          ++v1077;
                        }
                        while (v1077 != v1075);
                      }
                      v1065 += v1076;
                      v1064 += v1074;
                      ++v1062;
                    }
                    while (v1062 != v1061);
                  }
                  break;
                case 4uLL:
                  uint64_t v2214 = *v247;
                  if (v2214)
                  {
                    uint64_t v1085 = 0;
                    uint64_t v1086 = 0;
                    uint64_t v1087 = 0;
                    uint64_t v1088 = 0;
                    uint64_t v1089 = v246[19];
                    uint64_t v1090 = v323[19];
                    uint64_t v1091 = v245[19];
                    unint64_t v1092 = v247[1];
                    v1093 = (void *)v246[3];
                    v1094 = (void *)v323[3];
                    uint64_t v2122 = v1094[1];
                    uint64_t v2136 = v1093[1];
                    if (v1092 <= 1) {
                      uint64_t v1095 = 1;
                    }
                    else {
                      uint64_t v1095 = v247[1];
                    }
                    unint64_t v2165 = *v1093 - v1093[1] * v1092;
                    uint64_t v2196 = *v1094 - v2122 * v324[1];
                    do
                    {
                      if (v1092)
                      {
                        uint64_t v1096 = 0;
                        unint64_t v1097 = v247[2];
                        uint64_t v1098 = v1093[2];
                        uint64_t v1099 = v1094[2];
                        if (v1097 <= 1) {
                          uint64_t v1100 = 1;
                        }
                        else {
                          uint64_t v1100 = v247[2];
                        }
                        uint64_t v1101 = v2122 - v1099 * v324[2];
                        do
                        {
                          if (v1097)
                          {
                            uint64_t v1102 = 0;
                            unint64_t v1103 = v247[3];
                            uint64_t v1104 = v1093[3];
                            uint64_t v1105 = v1094[3];
                            if (v1103 <= 1) {
                              uint64_t v1106 = 1;
                            }
                            else {
                              uint64_t v1106 = v247[3];
                            }
                            uint64_t v1107 = v1099 - v1105 * v324[3];
                            do
                            {
                              uint64_t v1108 = v1106;
                              if (v1103)
                              {
                                do
                                {
                                  BOOL v1109 = *(float *)(v1089 + 4 * v1088) != 0.0;
                                  if (*(float *)(v1090 + 4 * v1087) == 0.0) {
                                    BOOL v1109 = 0;
                                  }
                                  *(float *)(v1091 + 4 * v1086++) = (float)v1109;
                                  v1088 += v1104;
                                  v1087 += v1105;
                                  --v1108;
                                }
                                while (v1108);
                              }
                              v1088 += v1098 - v1104 * v1103;
                              v1087 += v1107;
                              ++v1102;
                            }
                            while (v1102 != v1100);
                          }
                          v1088 += v2136 - v1098 * v1097;
                          v1087 += v1101;
                          ++v1096;
                        }
                        while (v1096 != v1095);
                      }
                      v1088 += v2165;
                      v1087 += v2196;
                      ++v1085;
                    }
                    while (v1085 != v2214);
                  }
                  break;
                default:
                  uint64_t v1026 = v245[6];
                  if (v1026)
                  {
                    uint64_t v1027 = 0;
                    uint64_t v2135 = v323[19];
                    uint64_t v2164 = v246[19];
                    uint64_t v2121 = v245[19];
                    do
                    {
                      uint64_t v1028 = 0;
                      if ((v249 & 0x80000000) == 0)
                      {
                        uint64_t v1029 = v246[3];
                        uint64_t v1030 = v249;
                        int v1031 = v1027;
                        do
                        {
                          ldiv_t v1032 = ldiv(v1031, v247[v1030]);
                          int v1031 = v1032.quot;
                          v1028 += *(void *)(v1029 + 8 * v1030--) * v1032.rem;
                        }
                        while (v1030 != -1);
                      }
                      uint64_t v1033 = v2191;
                      if ((v2191 & 0x80000000) != 0)
                      {
                        LODWORD(v1034) = 0;
                      }
                      else
                      {
                        uint64_t v1034 = 0;
                        uint64_t v1035 = v323[3];
                        int v1036 = v1027;
                        do
                        {
                          ldiv_t v1037 = ldiv(v1036, v324[v1033]);
                          int v1036 = v1037.quot;
                          v1034 += *(void *)(v1035 + 8 * v1033--) * v1037.rem;
                        }
                        while (v1033 != -1);
                      }
                      BOOL v1038 = *(float *)(v2164 + 4 * (int)v1028) != 0.0;
                      if (*(float *)(v2135 + 4 * (int)v1034) == 0.0) {
                        BOOL v1038 = 0;
                      }
                      *(float *)(v2121 + 4 * v1027++) = (float)v1038;
                      uint64_t v249 = v2209;
                    }
                    while (v1027 != v1026);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::LogicalOr::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  unint64_t v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LogicalOr::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::LogicalOr>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned char **)(*a2 + 152) | **(unsigned char **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          int v36 = *(_DWORD *)(*a2 + 160);
          if (v36 >= 1)
          {
            char v37 = **(unsigned char **)(*a1 + 152);
            uint64_t v38 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v39 = *(char **)(*a2 + 152);
            unsigned int v40 = v36 + 1;
            do
            {
              char v41 = *v39++;
              *v38++ = v41 | v37;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 2:
          int v42 = *(_DWORD *)(*a1 + 160);
          if (v42 >= 1)
          {
            char v43 = **(unsigned char **)(*a2 + 152);
            int v44 = *(unsigned char **)(*(void *)a3 + 152);
            int v45 = *(char **)(*a1 + 152);
            unsigned int v46 = v42 + 1;
            do
            {
              char v47 = *v45++;
              *v44++ = v47 | v43;
              --v46;
            }
            while (v46 > 1);
          }
          return;
        case 3:
          int v48 = *(_DWORD *)(*(void *)a3 + 48);
          if (v48 >= 1)
          {
            uint64_t v49 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v50 = *(char **)(*a2 + 152);
            unsigned int v51 = *(char **)(*a1 + 152);
            unsigned int v52 = v48 + 1;
            do
            {
              char v54 = *v51++;
              char v53 = v54;
              char v55 = *v50++;
              *v49++ = v55 | v53;
              --v52;
            }
            while (v52 > 1);
          }
          return;
        default:
          int v27 = *(void **)a3;
          int v28 = (void *)*a1;
          char v29 = *(int **)*a1;
          uint64_t v30 = (v28[1] - (void)v29) >> 2;
          uint64_t v31 = (v30 - 1);
          if ((int)v31 >= -1) {
            int v32 = -1;
          }
          else {
            int v32 = v30 - 1;
          }
          int v33 = v32 + 1;
          int v34 = v30 + 1;
          break;
      }
      while (1)
      {
        unsigned int v35 = v34 - 2;
        if (v34 - 2 < 0) {
          break;
        }
        --v34;
        if (*(void *)(v28[3] + 8 * v35) != *(void *)(v27[3] + 8 * v35)) {
          goto LABEL_155;
        }
      }
      int v34 = v33;
LABEL_155:
      uint64_t v219 = (void *)*a2;
      unsigned int v220 = *(int **)*a2;
      uint64_t v221 = (v219[1] - (void)v220) >> 2;
      uint64_t v222 = (v221 - 1);
      if ((int)v222 >= -1) {
        int v223 = -1;
      }
      else {
        int v223 = v221 - 1;
      }
      int v224 = v223 + 1;
      int v225 = v221 + 1;
      while (1)
      {
        unsigned int v226 = v225 - 2;
        if (v225 - 2 < 0) {
          break;
        }
        --v225;
        if (*(void *)(v219[3] + 8 * v226) != *(void *)(v27[3] + 8 * v226)) {
          goto LABEL_209;
        }
      }
      int v225 = v224;
LABEL_209:
      int v273 = v30 + 1;
      while (1)
      {
        unsigned int v274 = v273 - 2;
        if (v273 - 2 < 0) {
          break;
        }
        --v273;
        if (*(void *)(v28[3] + 8 * v274)) {
          goto LABEL_244;
        }
      }
      int v273 = v33;
LABEL_244:
      int v287 = v221 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(v219[3] + 8 * v288)) {
          goto LABEL_279;
        }
      }
      int v287 = v224;
LABEL_279:
      unint64_t v301 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v225) {
        int v302 = v225;
      }
      else {
        int v302 = v34;
      }
      if (v34 <= v287) {
        int v34 = v287;
      }
      if (v273 > v225) {
        int v225 = v273;
      }
      if (v301 > v225)
      {
        int v303 = 1;
      }
      else
      {
        int v225 = (uint64_t)(v27[1] - *v27) >> 2;
        int v303 = 4;
      }
      if (v301 > v34)
      {
        int v304 = 2;
      }
      else
      {
        int v34 = v225;
        int v304 = v303;
      }
      if (v301 > v302)
      {
        int v34 = v302;
        int v304 = 3;
      }
      uint64_t v1962 = v222;
      uint64_t v1978 = v31;
      if (!v34) {
        goto LABEL_308;
      }
      unint64_t v305 = *(void *)(v27[3] + 8 * (v34 - 1));
      if (v305 < 0x10) {
        goto LABEL_308;
      }
      switch(v304)
      {
        case 1:
          if (v34 == 2)
          {
            uint64_t v1366 = *v29;
            if (v1366)
            {
              uint64_t v1367 = 0;
              uint64_t v1368 = 0;
              uint64_t v1369 = 0;
              uint64_t v1370 = v28[19];
              uint64_t v1371 = v219[19];
              uint64_t v1372 = v27[19];
              unint64_t v1373 = v29[1];
              uint64_t v1374 = (uint64_t *)v28[3];
              uint64_t v1375 = *v1374;
              uint64_t v1376 = v1374[1];
              unsigned int v1377 = (uint64_t *)v219[3];
              uint64_t v1379 = *v1377;
              uint64_t v1378 = v1377[1];
              if (v1373 <= 1) {
                uint64_t v1380 = 1;
              }
              else {
                uint64_t v1380 = v29[1];
              }
              uint64_t v1381 = v1375 - v1376 * v1373;
              uint64_t v1382 = v1379 - v1378 * v220[1];
              do
              {
                if (v1373)
                {
                  uint64_t v1383 = 0;
                  uint64_t v1384 = v1371 + v1368;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      uint64_t v1385 = 0;
                      char v1386 = *(unsigned char *)(v1370 + v1369);
                      unsigned int v1387 = v305 + 1;
                      do
                      {
                        *(unsigned char *)(v1372 + v1385) = *(unsigned char *)(v1384 + v1385) | v1386;
                        --v1387;
                        ++v1385;
                      }
                      while (v1387 > 1);
                    }
                    v1369 += v1376;
                    v1368 += v1378;
                    v1372 += (int)v305;
                    ++v1383;
                    v1384 += v1378;
                  }
                  while (v1383 != v1380);
                }
                v1369 += v1381;
                v1368 += v1382;
                ++v1367;
              }
              while (v1367 != v1366);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v980 = *v29;
            if (v980)
            {
              uint64_t v981 = 0;
              uint64_t v982 = 0;
              uint64_t v983 = v28[19];
              uint64_t v984 = v219[19];
              uint64_t v985 = v27[19];
              uint64_t v986 = *(void *)v28[3];
              uint64_t v987 = *(void *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  uint64_t v988 = 0;
                  char v989 = *(unsigned char *)(v983 + v982);
                  unsigned int v990 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v985 + v988) = *(unsigned char *)(v984 + v988) | v989;
                    --v990;
                    ++v988;
                  }
                  while (v990 > 1);
                }
                v982 += v986;
                v985 += (int)v305;
                ++v981;
                v984 += v987;
              }
              while (v981 != v980);
            }
          }
          else
          {
            unint64_t v1919 = v27[6];
            if (v1919)
            {
              unint64_t v1948 = 0;
              uint64_t v1869 = v219[19];
              uint64_t v1884 = v28[19];
              uint64_t v1388 = v27[19];
              do
              {
                uint64_t v1389 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1390 = v28[3];
                  int quot = v1948;
                  do
                  {
                    ldiv_t v1392 = ldiv(quot, v29[v31]);
                    int quot = v1392.quot;
                    v1389 += *(void *)(v1390 + 8 * v31--) * v1392.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1393 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1394) = 0;
                }
                else
                {
                  uint64_t v1394 = 0;
                  uint64_t v1395 = v219[3];
                  int v1396 = v1948;
                  do
                  {
                    ldiv_t v1397 = ldiv(v1396, v220[v1393]);
                    int v1396 = v1397.quot;
                    v1394 += *(void *)(v1395 + 8 * v1393--) * v1397.rem;
                  }
                  while (v1393 != -1);
                }
                uint64_t v31 = v1978;
                if ((int)v305 >= 1)
                {
                  uint64_t v1398 = 0;
                  char v1399 = *(unsigned char *)(v1884 + (int)v1389);
                  unsigned int v1400 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v1388 + v1398) = *(unsigned char *)(v1869 + (int)v1394 + v1398) | v1399;
                    --v1400;
                    ++v1398;
                  }
                  while (v1400 > 1);
                }
                v1388 += (int)v305;
                v1948 += (int)v305;
              }
              while (v1948 < v1919);
            }
          }
          break;
        case 2:
          if (v34 == 2)
          {
            uint64_t v1401 = *v29;
            if (v1401)
            {
              uint64_t v1402 = 0;
              uint64_t v1403 = 0;
              uint64_t v1404 = 0;
              uint64_t v1405 = v28[19];
              uint64_t v1406 = v219[19];
              uint64_t v1407 = v27[19];
              unint64_t v1408 = v29[1];
              uint64_t v1409 = (uint64_t *)v28[3];
              uint64_t v1410 = *v1409;
              uint64_t v1411 = v1409[1];
              uint64_t v1412 = (uint64_t *)v219[3];
              uint64_t v1414 = *v1412;
              uint64_t v1413 = v1412[1];
              if (v1408 <= 1) {
                uint64_t v1415 = 1;
              }
              else {
                uint64_t v1415 = v29[1];
              }
              uint64_t v1416 = v1410 - v1411 * v1408;
              uint64_t v1417 = v1414 - v1413 * v220[1];
              do
              {
                if (v1408)
                {
                  uint64_t v1418 = 0;
                  uint64_t v1419 = v1405 + v1404;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      uint64_t v1420 = 0;
                      char v1421 = *(unsigned char *)(v1406 + v1403);
                      unsigned int v1422 = v305 + 1;
                      do
                      {
                        *(unsigned char *)(v1407 + v1420) = *(unsigned char *)(v1419 + v1420) | v1421;
                        --v1422;
                        ++v1420;
                      }
                      while (v1422 > 1);
                    }
                    v1404 += v1411;
                    v1403 += v1413;
                    v1407 += (int)v305;
                    ++v1418;
                    v1419 += v1411;
                  }
                  while (v1418 != v1415);
                }
                v1404 += v1416;
                v1403 += v1417;
                ++v1402;
              }
              while (v1402 != v1401);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v991 = *v29;
            if (v991)
            {
              uint64_t v992 = 0;
              uint64_t v993 = 0;
              uint64_t v994 = v28[19];
              uint64_t v995 = v219[19];
              uint64_t v996 = v27[19];
              uint64_t v997 = *(void *)v28[3];
              uint64_t v998 = *(void *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  uint64_t v999 = 0;
                  char v1000 = *(unsigned char *)(v995 + v993);
                  unsigned int v1001 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v996 + v999) = *(unsigned char *)(v994 + v999) | v1000;
                    --v1001;
                    ++v999;
                  }
                  while (v1001 > 1);
                }
                v993 += v998;
                v996 += (int)v305;
                ++v992;
                v994 += v997;
              }
              while (v992 != v991);
            }
          }
          else
          {
            unint64_t v1920 = v27[6];
            if (v1920)
            {
              unint64_t v1949 = 0;
              uint64_t v1870 = v219[19];
              uint64_t v1885 = v28[19];
              uint64_t v1423 = v27[19];
              do
              {
                uint64_t v1424 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1425 = v28[3];
                  int v1426 = v1949;
                  do
                  {
                    ldiv_t v1427 = ldiv(v1426, v29[v31]);
                    int v1426 = v1427.quot;
                    v1424 += *(void *)(v1425 + 8 * v31--) * v1427.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1428 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1429) = 0;
                }
                else
                {
                  uint64_t v1429 = 0;
                  uint64_t v1430 = v219[3];
                  int v1431 = v1949;
                  do
                  {
                    ldiv_t v1432 = ldiv(v1431, v220[v1428]);
                    int v1431 = v1432.quot;
                    v1429 += *(void *)(v1430 + 8 * v1428--) * v1432.rem;
                  }
                  while (v1428 != -1);
                }
                uint64_t v31 = v1978;
                if ((int)v305 >= 1)
                {
                  uint64_t v1433 = 0;
                  char v1434 = *(unsigned char *)(v1870 + (int)v1429);
                  unsigned int v1435 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v1423 + v1433) = *(unsigned char *)(v1885 + (int)v1424 + v1433) | v1434;
                    --v1435;
                    ++v1433;
                  }
                  while (v1435 > 1);
                }
                v1423 += (int)v305;
                v1949 += (int)v305;
              }
              while (v1949 < v1920);
            }
          }
          break;
        case 3:
          if (v34 == 2)
          {
            uint64_t v1132 = *v29;
            if (v1132)
            {
              uint64_t v1133 = 0;
              uint64_t v1134 = 0;
              uint64_t v1135 = 0;
              uint64_t v1136 = v28[19];
              uint64_t v1137 = v219[19];
              uint64_t v1138 = v27[19];
              unint64_t v1139 = v29[1];
              uint64_t v1140 = (uint64_t *)v28[3];
              uint64_t v1141 = *v1140;
              uint64_t v1142 = v1140[1];
              uint64_t v1143 = (uint64_t *)v219[3];
              uint64_t v1145 = *v1143;
              uint64_t v1144 = v1143[1];
              if (v1139 <= 1) {
                uint64_t v1146 = 1;
              }
              else {
                uint64_t v1146 = v29[1];
              }
              uint64_t v1147 = v1141 - v1142 * v1139;
              uint64_t v1148 = v1145 - v1144 * v220[1];
              do
              {
                if (v1139)
                {
                  uint64_t v1149 = 0;
                  uint64_t v1150 = v1137 + v1134;
                  uint64_t v1151 = v1136 + v1135;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      uint64_t v1152 = 0;
                      unsigned int v1153 = v305 + 1;
                      do
                      {
                        *(unsigned char *)(v1138 + v1152) = *(unsigned char *)(v1150 + v1152) | *(unsigned char *)(v1151 + v1152);
                        --v1153;
                        ++v1152;
                      }
                      while (v1153 > 1);
                    }
                    v1135 += v1142;
                    v1134 += v1144;
                    v1138 += (int)v305;
                    ++v1149;
                    v1150 += v1144;
                    v1151 += v1142;
                  }
                  while (v1149 != v1146);
                }
                v1135 += v1147;
                v1134 += v1148;
                ++v1133;
              }
              while (v1133 != v1132);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v306 = *v29;
            if (v306)
            {
              uint64_t v307 = 0;
              uint64_t v308 = v28[19];
              uint64_t v309 = v219[19];
              uint64_t v310 = v27[19];
              uint64_t v311 = *(void *)v28[3];
              uint64_t v312 = *(void *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  uint64_t v313 = 0;
                  unsigned int v314 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v310 + v313) = *(unsigned char *)(v309 + v313) | *(unsigned char *)(v308 + v313);
                    --v314;
                    ++v313;
                  }
                  while (v314 > 1);
                }
                v310 += (int)v305;
                ++v307;
                v309 += v312;
                v308 += v311;
              }
              while (v307 != v306);
            }
          }
          else
          {
            unint64_t v1912 = v27[6];
            if (v1912)
            {
              unint64_t v1941 = 0;
              uint64_t v1864 = v219[19];
              uint64_t v1881 = v28[19];
              uint64_t v1154 = v27[19];
              do
              {
                uint64_t v1155 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1156 = v28[3];
                  int v1157 = v1941;
                  do
                  {
                    ldiv_t v1158 = ldiv(v1157, v29[v31]);
                    int v1157 = v1158.quot;
                    v1155 += *(void *)(v1156 + 8 * v31--) * v1158.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1159 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1160) = 0;
                }
                else
                {
                  uint64_t v1160 = 0;
                  uint64_t v1161 = v219[3];
                  int v1162 = v1941;
                  do
                  {
                    ldiv_t v1163 = ldiv(v1162, v220[v1159]);
                    int v1162 = v1163.quot;
                    v1160 += *(void *)(v1161 + 8 * v1159--) * v1163.rem;
                  }
                  while (v1159 != -1);
                }
                uint64_t v31 = v1978;
                if ((int)v305 >= 1)
                {
                  uint64_t v1164 = 0;
                  unsigned int v1165 = v305 + 1;
                  do
                  {
                    *(unsigned char *)(v1154 + v1164) = *(unsigned char *)(v1864 + (int)v1160 + v1164) | *(unsigned char *)(v1881
                                                                                                  + (int)v1155
                                                                                                  + v1164);
                    --v1165;
                    ++v1164;
                  }
                  while (v1165 > 1);
                }
                v1154 += (int)v305;
                v1941 += (int)v305;
              }
              while (v1941 < v1912);
            }
          }
          break;
        default:
LABEL_308:
          switch(v301)
          {
            case 1uLL:
              uint64_t v315 = v27[6];
              if (v315)
              {
                v316 = (unsigned char *)v28[19];
                uint64_t v317 = (unsigned char *)v219[19];
                uint64_t v318 = (unsigned char *)v27[19];
                uint64_t v319 = *(void *)v28[3];
                uint64_t v320 = *(void *)v219[3];
                do
                {
                  *v318++ = *v317 | *v316;
                  v317 += v320;
                  v316 += v319;
                  --v315;
                }
                while (v315);
              }
              break;
            case 2uLL:
              uint64_t v454 = *v29;
              if (v454)
              {
                uint64_t v455 = 0;
                uint64_t v456 = 0;
                uint64_t v457 = 0;
                uint64_t v458 = 0;
                uint64_t v459 = v28[19];
                uint64_t v460 = v219[19];
                uint64_t v461 = v27[19];
                unint64_t v462 = v29[1];
                uint64_t v463 = (uint64_t *)v28[3];
                uint64_t v464 = *v463;
                uint64_t v465 = v463[1];
                uint64_t v466 = (uint64_t *)v219[3];
                uint64_t v467 = *v466;
                uint64_t v468 = v466[1];
                uint64_t v469 = v467 - v468 * v220[1];
                if (v462 <= 1) {
                  uint64_t v470 = 1;
                }
                else {
                  uint64_t v470 = v29[1];
                }
                uint64_t v471 = v464 - v465 * v462;
                do
                {
                  if (v462)
                  {
                    uint64_t v472 = v456 + v470;
                    v473 = (unsigned char *)(v461 + v456);
                    uint64_t v474 = v470;
                    do
                    {
                      *v473++ = *(unsigned char *)(v460 + v457) | *(unsigned char *)(v459 + v458);
                      v458 += v465;
                      v457 += v468;
                      --v474;
                    }
                    while (v474);
                    uint64_t v456 = v472;
                  }
                  v458 += v471;
                  v457 += v469;
                  ++v455;
                }
                while (v455 != v454);
              }
              break;
            case 3uLL:
              uint64_t v475 = *v29;
              if (v475)
              {
                uint64_t v476 = 0;
                uint64_t v477 = 0;
                uint64_t v478 = 0;
                uint64_t v479 = 0;
                uint64_t v480 = v28[19];
                uint64_t v481 = v219[19];
                uint64_t v482 = v27[19];
                unint64_t v483 = v29[1];
                uint64_t v484 = (void *)v28[3];
                uint64_t v485 = v484[1];
                uint64_t v486 = (void *)v219[3];
                uint64_t v487 = v486[1];
                uint64_t v488 = *v486 - v487 * v220[1];
                if (v483 <= 1) {
                  uint64_t v489 = 1;
                }
                else {
                  uint64_t v489 = v29[1];
                }
                unint64_t v490 = *v484 - v485 * v483;
                do
                {
                  if (v483)
                  {
                    uint64_t v491 = 0;
                    unint64_t v492 = v29[2];
                    uint64_t v493 = v484[2];
                    uint64_t v494 = v486[2];
                    if (v492 <= 1) {
                      uint64_t v495 = 1;
                    }
                    else {
                      uint64_t v495 = v29[2];
                    }
                    uint64_t v496 = v487 - v494 * v220[2];
                    do
                    {
                      uint64_t v497 = v495;
                      if (v492)
                      {
                        do
                        {
                          *(unsigned char *)(v482 + v477++) = *(unsigned char *)(v481 + v478) | *(unsigned char *)(v480 + v479);
                          v479 += v493;
                          v478 += v494;
                          --v497;
                        }
                        while (v497);
                      }
                      v479 += v485 - v493 * v492;
                      v478 += v496;
                      ++v491;
                    }
                    while (v491 != v489);
                  }
                  v479 += v490;
                  v478 += v488;
                  ++v476;
                }
                while (v476 != v475);
              }
              break;
            case 4uLL:
              uint64_t v1985 = *v29;
              if (v1985)
              {
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = 0;
                uint64_t v502 = v28[19];
                uint64_t v503 = v219[19];
                uint64_t v504 = v27[19];
                unint64_t v505 = v29[1];
                int v506 = (void *)v28[3];
                unint64_t v507 = (void *)v219[3];
                uint64_t v1879 = v507[1];
                uint64_t v1891 = v506[1];
                uint64_t v1934 = *v507 - v1879 * v220[1];
                int v1967 = v29[1];
                if (v505 <= 1) {
                  uint64_t v508 = 1;
                }
                else {
                  uint64_t v508 = v29[1];
                }
                unint64_t v1905 = *v506 - v506[1] * v505;
                do
                {
                  if (v1967)
                  {
                    uint64_t v509 = 0;
                    unint64_t v510 = v29[2];
                    uint64_t v511 = v506[2];
                    uint64_t v512 = v507[2];
                    if (v510 <= 1) {
                      uint64_t v513 = 1;
                    }
                    else {
                      uint64_t v513 = v29[2];
                    }
                    uint64_t v514 = v1879 - v512 * v220[2];
                    do
                    {
                      if (v510)
                      {
                        uint64_t v515 = 0;
                        unint64_t v516 = v29[3];
                        uint64_t v517 = v506[3];
                        uint64_t v518 = v507[3];
                        if (v516 <= 1) {
                          uint64_t v519 = 1;
                        }
                        else {
                          uint64_t v519 = v29[3];
                        }
                        uint64_t v520 = v512 - v518 * v220[3];
                        do
                        {
                          uint64_t v521 = v519;
                          if (v516)
                          {
                            do
                            {
                              *(unsigned char *)(v504 + v499++) = *(unsigned char *)(v503 + v500) | *(unsigned char *)(v502 + v501);
                              v501 += v517;
                              v500 += v518;
                              --v521;
                            }
                            while (v521);
                          }
                          v501 += v511 - v517 * v516;
                          v500 += v520;
                          ++v515;
                        }
                        while (v515 != v513);
                      }
                      v501 += v1891 - v511 * v510;
                      v500 += v514;
                      ++v509;
                    }
                    while (v509 != v508);
                  }
                  v501 += v1905;
                  v500 += v1934;
                  ++v498;
                }
                while (v498 != v1985);
              }
              break;
            default:
              uint64_t v443 = v27[6];
              if (v443)
              {
                uint64_t v444 = 0;
                uint64_t v1904 = v219[19];
                uint64_t v1933 = v28[19];
                uint64_t v1890 = v27[19];
                do
                {
                  uint64_t v445 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    uint64_t v446 = v28[3];
                    int v447 = v444;
                    do
                    {
                      ldiv_t v448 = ldiv(v447, v29[v31]);
                      int v447 = v448.quot;
                      v445 += *(void *)(v446 + 8 * v31--) * v448.rem;
                    }
                    while (v31 != -1);
                  }
                  uint64_t v449 = v1962;
                  if ((v1962 & 0x80000000) != 0)
                  {
                    LODWORD(v450) = 0;
                  }
                  else
                  {
                    uint64_t v450 = 0;
                    uint64_t v451 = v219[3];
                    int v452 = v444;
                    do
                    {
                      ldiv_t v453 = ldiv(v452, v220[v449]);
                      int v452 = v453.quot;
                      v450 += *(void *)(v451 + 8 * v449--) * v453.rem;
                    }
                    while (v449 != -1);
                  }
                  *(unsigned char *)(v1890 + v444++) = *(unsigned char *)(v1904 + (int)v450) | *(unsigned char *)(v1933 + (int)v445);
                  uint64_t v31 = v1978;
                }
                while (v444 != v443);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            int v10 = **(unsigned __int8 **)(*a1 + 152);
            uint64_t v11 = *(BOOL **)(*(void *)a3 + 152);
            int v12 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              int v14 = *v12++;
              *v11++ = (v14 | v10) != 0;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v64 = *(_DWORD *)(*a1 + 160);
          if (v64 >= 1)
          {
            int v65 = **(unsigned __int8 **)(*a2 + 152);
            uint64_t v66 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v67 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v68 = v64 + 1;
            do
            {
              int v69 = *v67++;
              *v66++ = (v69 | v65) != 0;
              --v68;
            }
            while (v68 > 1);
          }
          return;
        case 3:
          int v70 = *(_DWORD *)(*(void *)a3 + 48);
          if (v70 >= 1)
          {
            int v71 = *(BOOL **)(*(void *)a3 + 152);
            int v72 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v73 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v74 = v70 + 1;
            do
            {
              int v76 = *v73++;
              int v75 = v76;
              int v77 = *v72++;
              *v71++ = (v77 | v75) != 0;
              --v74;
            }
            while (v74 > 1);
          }
          return;
        default:
          int v56 = *(void **)a3;
          uint64_t v57 = *a1;
          int v58 = *(int **)*a1;
          uint64_t v59 = (*(void *)(*a1 + 8) - (void)v58) >> 2;
          int v60 = v59 - 1;
          if ((int)v59 - 1 >= -1) {
            int v60 = -1;
          }
          int v61 = v60 + 1;
          int v62 = v59 + 1;
          break;
      }
      while (1)
      {
        unsigned int v63 = v62 - 2;
        if (v62 - 2 < 0) {
          break;
        }
        --v62;
        if (*(void *)(*(void *)(v57 + 24) + 8 * v63) != *(void *)(v56[3] + 8 * v63)) {
          goto LABEL_163;
        }
      }
      int v62 = v61;
LABEL_163:
      v227 = (int **)*a2;
      uint64_t v228 = *(int **)*a2;
      uint64_t v229 = (*(void *)(*a2 + 8) - (void)v228) >> 2;
      int v230 = v229 - 1;
      if ((int)v229 - 1 >= -1) {
        int v230 = -1;
      }
      int v231 = v230 + 1;
      int v232 = v229 + 1;
      while (1)
      {
        unsigned int v233 = v232 - 2;
        if (v232 - 2 < 0) {
          break;
        }
        --v232;
        if (*(void *)&v227[3][2 * v233] != *(void *)(v56[3] + 8 * v233)) {
          goto LABEL_214;
        }
      }
      int v232 = v231;
LABEL_214:
      int v275 = v59 + 1;
      while (1)
      {
        unsigned int v276 = v275 - 2;
        if (v275 - 2 < 0) {
          break;
        }
        --v275;
        if (*(void *)(*(void *)(v57 + 24) + 8 * v276)) {
          goto LABEL_249;
        }
      }
      int v275 = v61;
LABEL_249:
      int v289 = v229 + 1;
      while (1)
      {
        int v290 = v289 - 2;
        if (v289 - 2 < 0) {
          break;
        }
        --v289;
        if (*(void *)&v227[3][2 * v290]) {
          goto LABEL_314;
        }
      }
      int v289 = v231;
LABEL_314:
      unint64_t v321 = (uint64_t)(v56[1] - *v56) >> 2;
      if (v62 <= v232) {
        int v322 = v232;
      }
      else {
        int v322 = v62;
      }
      if (v62 <= v289) {
        int v62 = v289;
      }
      if (v275 > v232) {
        int v232 = v275;
      }
      if (v321 > v232)
      {
        int v323 = 1;
      }
      else
      {
        int v232 = (uint64_t)(v56[1] - *v56) >> 2;
        int v323 = 4;
      }
      if (v321 > v62)
      {
        int v324 = 2;
      }
      else
      {
        int v62 = v232;
        int v324 = v323;
      }
      if (v321 > v322)
      {
        int v62 = v322;
        int v324 = 3;
      }
      if (!v62) {
        goto LABEL_344;
      }
      unint64_t v325 = *(void *)(v56[3] + 8 * (v62 - 1));
      if (v325 < 0x10) {
        goto LABEL_344;
      }
      uint64_t v1979 = *(void *)(v56[3] + 8 * (v62 - 1));
      switch(v324)
      {
        case 1:
          if (v62 == 2)
          {
            int v1436 = *v58;
            if (*v58)
            {
              unint64_t v1437 = 0;
              uint64_t v1438 = 0;
              uint64_t v1439 = 0;
              uint64_t v1440 = *(void *)(v57 + 152);
              uint64_t v1441 = v227[19];
              uint64_t v1442 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1443 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      uint64_t v1444 = 0;
                      int v1445 = *(unsigned __int8 *)(v1440 + v1439);
                      unsigned int v1446 = v325 + 1;
                      do
                      {
                        *(unsigned char *)(v1442 + v1444) = (*((unsigned __int8 *)v1441 + v1438 + v1444) | v1445) != 0;
                        --v1446;
                        ++v1444;
                      }
                      while (v1446 > 1);
                      uint64_t v57 = *a1;
                      v227 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    uint64_t v1447 = *(void **)(v57 + 24);
                    uint64_t v1448 = v1447[1];
                    v1439 += v1448;
                    v1438 += *((void *)v227[3] + 1);
                    v1442 += (int)v325;
                    ++v1443;
                    unint64_t v1449 = v58[1];
                  }
                  while (v1443 < v1449);
                  int v1436 = *v58;
                  uint64_t v228 = *v227;
                }
                else
                {
                  unint64_t v1449 = 0;
                  uint64_t v1447 = *(void **)(v57 + 24);
                  uint64_t v1448 = v1447[1];
                }
                uint64_t v1439 = *v1447 + v1439 - v1449 * v1448;
                uint64_t v1438 = *(void *)v227[3] + v1438 - *((void *)v227[3] + 1) * v228[1];
                ++v1437;
              }
              while (v1437 < v1436);
            }
          }
          else if (v62 == 1)
          {
            int v1002 = *v58;
            if (*v58)
            {
              unint64_t v1003 = 0;
              uint64_t v1004 = 0;
              uint64_t v1005 = 0;
              uint64_t v1006 = *(void *)(v57 + 152);
              unint64_t v1007 = v227[19];
              uint64_t v1008 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  uint64_t v1009 = 0;
                  int v1010 = *(unsigned __int8 *)(v1006 + v1005);
                  unsigned int v1011 = v325 + 1;
                  do
                  {
                    *(unsigned char *)(v1008 + v1009) = (*((unsigned __int8 *)v1007 + v1004 + v1009) | v1010) != 0;
                    --v1011;
                    ++v1009;
                  }
                  while (v1011 > 1);
                  uint64_t v57 = *a1;
                  v227 = (int **)*a2;
                  int v1002 = **(_DWORD **)*a1;
                }
                v1005 += **(void **)(v57 + 24);
                v1004 += *(void *)v227[3];
                v1008 += (int)v325;
                ++v1003;
              }
              while (v1003 < v1002);
            }
          }
          else if (v56[6])
          {
            uint64_t v1900 = v227[19];
            uint64_t v1921 = *(void *)(v57 + 152);
            uint64_t v1950 = (int)v325;
            unint64_t v1974 = 0;
            unsigned int v1886 = v325 + 1;
            uint64_t v1450 = v56[19];
            do
            {
              uint64_t v1451 = *(void *)*a1;
              unint64_t v1452 = (unint64_t)(*(void *)(*a1 + 8) - v1451) >> 2;
              uint64_t v1453 = 0;
              uint64_t v1454 = (v1452 - 1);
              if ((int)v1452 - 1 >= 0)
              {
                uint64_t v1455 = *(void *)(*a1 + 24);
                int v1456 = v1974;
                do
                {
                  ldiv_t v1457 = ldiv(v1456, *(int *)(v1451 + 4 * v1454));
                  int v1456 = v1457.quot;
                  v1453 += *(void *)(v1455 + 8 * v1454--) * v1457.rem;
                }
                while (v1454 != -1);
              }
              uint64_t v1458 = *(void *)*a2;
              unint64_t v1459 = (unint64_t)(*(void *)(*a2 + 8) - v1458) >> 2;
              uint64_t v1460 = 0;
              uint64_t v1461 = (v1459 - 1);
              if ((int)v1459 - 1 >= 0)
              {
                uint64_t v1462 = *(void *)(*a2 + 24);
                int v1463 = v1974;
                do
                {
                  ldiv_t v1464 = ldiv(v1463, *(int *)(v1458 + 4 * v1461));
                  int v1463 = v1464.quot;
                  v1460 += *(void *)(v1462 + 8 * v1461--) * v1464.rem;
                }
                while (v1461 != -1);
              }
              if ((int)v1979 >= 1)
              {
                uint64_t v1465 = 0;
                int v1466 = *(unsigned __int8 *)(v1921 + (int)v1453);
                unsigned int v1467 = v1886;
                do
                {
                  *(unsigned char *)(v1450 + v1465) = (*((unsigned __int8 *)v1900 + (int)v1460 + v1465) | v1466) != 0;
                  --v1467;
                  ++v1465;
                }
                while (v1467 > 1);
                int v56 = *(void **)a3;
              }
              v1450 += v1950;
              v1974 += v1950;
            }
            while (v1974 < v56[6]);
          }
          break;
        case 2:
          if (v62 == 2)
          {
            int v1468 = *v58;
            if (*v58)
            {
              unint64_t v1469 = 0;
              uint64_t v1470 = 0;
              uint64_t v1471 = 0;
              uint64_t v1472 = *(void *)(v57 + 152);
              uint64_t v1473 = v227[19];
              uint64_t v1474 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1475 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      uint64_t v1476 = 0;
                      int v1477 = *((unsigned __int8 *)v1473 + v1470);
                      unsigned int v1478 = v325 + 1;
                      do
                      {
                        *(unsigned char *)(v1474 + v1476) = (*(unsigned __int8 *)(v1472 + v1471 + v1476) | v1477) != 0;
                        --v1478;
                        ++v1476;
                      }
                      while (v1478 > 1);
                      uint64_t v57 = *a1;
                      v227 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    v1479 = *(void **)(v57 + 24);
                    uint64_t v1480 = v1479[1];
                    v1471 += v1480;
                    v1470 += *((void *)v227[3] + 1);
                    v1474 += (int)v325;
                    ++v1475;
                    unint64_t v1481 = v58[1];
                  }
                  while (v1475 < v1481);
                  int v1468 = *v58;
                  uint64_t v228 = *v227;
                }
                else
                {
                  unint64_t v1481 = 0;
                  v1479 = *(void **)(v57 + 24);
                  uint64_t v1480 = v1479[1];
                }
                uint64_t v1471 = *v1479 + v1471 - v1481 * v1480;
                uint64_t v1470 = *(void *)v227[3] + v1470 - *((void *)v227[3] + 1) * v228[1];
                ++v1469;
              }
              while (v1469 < v1468);
            }
          }
          else if (v62 == 1)
          {
            int v1012 = *v58;
            if (*v58)
            {
              unint64_t v1013 = 0;
              uint64_t v1014 = 0;
              uint64_t v1015 = 0;
              uint64_t v1016 = *(void *)(v57 + 152);
              uint64_t v1017 = v227[19];
              uint64_t v1018 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  uint64_t v1019 = 0;
                  int v1020 = *((unsigned __int8 *)v1017 + v1014);
                  unsigned int v1021 = v325 + 1;
                  do
                  {
                    *(unsigned char *)(v1018 + v1019) = (*(unsigned __int8 *)(v1016 + v1015 + v1019) | v1020) != 0;
                    --v1021;
                    ++v1019;
                  }
                  while (v1021 > 1);
                  uint64_t v57 = *a1;
                  v227 = (int **)*a2;
                  int v1012 = **(_DWORD **)*a1;
                }
                v1015 += **(void **)(v57 + 24);
                v1014 += *(void *)v227[3];
                v1018 += (int)v325;
                ++v1013;
              }
              while (v1013 < v1012);
            }
          }
          else if (v56[6])
          {
            int v1901 = v227[19];
            uint64_t v1922 = *(void *)(v57 + 152);
            uint64_t v1951 = (int)v325;
            unint64_t v1975 = 0;
            unsigned int v1887 = v325 + 1;
            uint64_t v1482 = v56[19];
            do
            {
              uint64_t v1483 = *(void *)*a1;
              unint64_t v1484 = (unint64_t)(*(void *)(*a1 + 8) - v1483) >> 2;
              uint64_t v1485 = 0;
              uint64_t v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                uint64_t v1487 = *(void *)(*a1 + 24);
                int v1488 = v1975;
                do
                {
                  ldiv_t v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  int v1488 = v1489.quot;
                  v1485 += *(void *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              uint64_t v1490 = *(void *)*a2;
              unint64_t v1491 = (unint64_t)(*(void *)(*a2 + 8) - v1490) >> 2;
              uint64_t v1492 = 0;
              uint64_t v1493 = (v1491 - 1);
              if ((int)v1491 - 1 >= 0)
              {
                uint64_t v1494 = *(void *)(*a2 + 24);
                int v1495 = v1975;
                do
                {
                  ldiv_t v1496 = ldiv(v1495, *(int *)(v1490 + 4 * v1493));
                  int v1495 = v1496.quot;
                  v1492 += *(void *)(v1494 + 8 * v1493--) * v1496.rem;
                }
                while (v1493 != -1);
              }
              if ((int)v1979 >= 1)
              {
                uint64_t v1497 = 0;
                int v1498 = *((unsigned __int8 *)v1901 + (int)v1492);
                unsigned int v1499 = v1887;
                do
                {
                  *(unsigned char *)(v1482 + v1497) = (*(unsigned __int8 *)(v1922 + (int)v1485 + v1497) | v1498) != 0;
                  --v1499;
                  ++v1497;
                }
                while (v1499 > 1);
                int v56 = *(void **)a3;
              }
              v1482 += v1951;
              v1975 += v1951;
            }
            while (v1975 < v56[6]);
          }
          break;
        case 3:
          if (v62 == 2)
          {
            int v1166 = *v58;
            if (*v58)
            {
              unint64_t v1167 = 0;
              uint64_t v1168 = 0;
              uint64_t v1169 = 0;
              uint64_t v1170 = *(void *)(v57 + 152);
              BOOL v1171 = v227[19];
              uint64_t v1172 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1173 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      uint64_t v1174 = 0;
                      unsigned int v1175 = v325 + 1;
                      do
                      {
                        *(unsigned char *)(v1172 + v1174) = (*((unsigned __int8 *)v1171 + v1168 + v1174) | *(unsigned __int8 *)(v1170 + v1169 + v1174)) != 0;
                        --v1175;
                        ++v1174;
                      }
                      while (v1175 > 1);
                      uint64_t v57 = *a1;
                      v227 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    uint64_t v1176 = *(void **)(v57 + 24);
                    uint64_t v1177 = v1176[1];
                    v1169 += v1177;
                    v1168 += *((void *)v227[3] + 1);
                    v1172 += (int)v325;
                    ++v1173;
                    unint64_t v1178 = v58[1];
                  }
                  while (v1173 < v1178);
                  int v1166 = *v58;
                  uint64_t v228 = *v227;
                }
                else
                {
                  unint64_t v1178 = 0;
                  uint64_t v1176 = *(void **)(v57 + 24);
                  uint64_t v1177 = v1176[1];
                }
                uint64_t v1169 = *v1176 + v1169 - v1178 * v1177;
                uint64_t v1168 = *(void *)v227[3] + v1168 - *((void *)v227[3] + 1) * v228[1];
                ++v1167;
              }
              while (v1167 < v1166);
            }
          }
          else if (v62 == 1)
          {
            int v326 = *v58;
            if (*v58)
            {
              unint64_t v327 = 0;
              uint64_t v328 = 0;
              uint64_t v329 = 0;
              uint64_t v330 = *(void *)(v57 + 152);
              int v331 = v227[19];
              uint64_t v332 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  uint64_t v333 = 0;
                  unsigned int v334 = v325 + 1;
                  do
                  {
                    *(unsigned char *)(v332 + v333) = (*((unsigned __int8 *)v331 + v328 + v333) | *(unsigned __int8 *)(v330 + v329 + v333)) != 0;
                    --v334;
                    ++v333;
                  }
                  while (v334 > 1);
                  uint64_t v57 = *a1;
                  v227 = (int **)*a2;
                  int v326 = **(_DWORD **)*a1;
                }
                v329 += **(void **)(v57 + 24);
                v328 += *(void *)v227[3];
                v332 += (int)v325;
                ++v327;
              }
              while (v327 < v326);
            }
          }
          else if (v56[6])
          {
            unint64_t v1898 = v227[19];
            uint64_t v1913 = *(void *)(v57 + 152);
            uint64_t v1942 = (int)v325;
            unint64_t v1972 = 0;
            unsigned int v1882 = v325 + 1;
            uint64_t v1179 = v56[19];
            do
            {
              uint64_t v1180 = *(void *)*a1;
              unint64_t v1181 = (unint64_t)(*(void *)(*a1 + 8) - v1180) >> 2;
              uint64_t v1182 = 0;
              uint64_t v1183 = (v1181 - 1);
              if ((int)v1181 - 1 >= 0)
              {
                uint64_t v1184 = *(void *)(*a1 + 24);
                int v1185 = v1972;
                do
                {
                  ldiv_t v1186 = ldiv(v1185, *(int *)(v1180 + 4 * v1183));
                  int v1185 = v1186.quot;
                  v1182 += *(void *)(v1184 + 8 * v1183--) * v1186.rem;
                }
                while (v1183 != -1);
              }
              uint64_t v1187 = *(void *)*a2;
              unint64_t v1188 = (unint64_t)(*(void *)(*a2 + 8) - v1187) >> 2;
              uint64_t v1189 = 0;
              uint64_t v1190 = (v1188 - 1);
              if ((int)v1188 - 1 >= 0)
              {
                uint64_t v1191 = *(void *)(*a2 + 24);
                int v1192 = v1972;
                do
                {
                  ldiv_t v1193 = ldiv(v1192, *(int *)(v1187 + 4 * v1190));
                  int v1192 = v1193.quot;
                  v1189 += *(void *)(v1191 + 8 * v1190--) * v1193.rem;
                }
                while (v1190 != -1);
              }
              if ((int)v1979 >= 1)
              {
                uint64_t v1194 = 0;
                unsigned int v1195 = v1882;
                do
                {
                  *(unsigned char *)(v1179 + v1194) = (*((unsigned __int8 *)v1898 + (int)v1189 + v1194) | *(unsigned __int8 *)(v1913 + (int)v1182 + v1194)) != 0;
                  --v1195;
                  ++v1194;
                }
                while (v1195 > 1);
                int v56 = *(void **)a3;
              }
              v1179 += v1942;
              v1972 += v1942;
            }
            while (v1972 < v56[6]);
          }
          break;
        default:
LABEL_344:
          switch(v321)
          {
            case 1uLL:
              if (v56[6])
              {
                unint64_t v335 = 0;
                uint64_t v336 = 0;
                uint64_t v337 = 0;
                uint64_t v338 = *(void *)(v57 + 152);
                int v339 = v227[19];
                uint64_t v340 = v56[19];
                do
                {
                  *(unsigned char *)(v340 + v335) = (*((unsigned __int8 *)v339 + v336) | *(unsigned __int8 *)(v338 + v337)) != 0;
                  v337 += **(void **)(*a1 + 24);
                  v336 += **(void **)(*a2 + 24);
                  ++v335;
                }
                while (v335 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v538 = *v58;
              if (*v58)
              {
                unint64_t v539 = 0;
                uint64_t v540 = 0;
                uint64_t v541 = 0;
                uint64_t v542 = 0;
                uint64_t v543 = *(void *)(v57 + 152);
                uint64_t v544 = v227[19];
                uint64_t v545 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v546 = 0;
                    do
                    {
                      *(unsigned char *)(v545 + v540 + v546) = (*((unsigned __int8 *)v544 + v541) | *(unsigned __int8 *)(v543 + v542)) != 0;
                      uint64_t v57 = *a1;
                      v547 = *(void **)(*a1 + 24);
                      uint64_t v548 = v547[1];
                      v542 += v548;
                      v227 = (int **)*a2;
                      uint64_t v549 = *(int **)(*a2 + 24);
                      uint64_t v550 = *((void *)v549 + 1);
                      v541 += v550;
                      ++v546;
                      int v58 = *(int **)*a1;
                      unint64_t v551 = v58[1];
                    }
                    while (v546 < v551);
                    int v538 = *v58;
                    uint64_t v228 = *v227;
                    v540 += v546;
                  }
                  else
                  {
                    unint64_t v551 = 0;
                    v547 = *(void **)(v57 + 24);
                    uint64_t v548 = v547[1];
                    uint64_t v549 = v227[3];
                    uint64_t v550 = *((void *)v549 + 1);
                  }
                  uint64_t v542 = *v547 + v542 - v551 * v548;
                  uint64_t v541 = *(void *)v549 + v541 - v550 * v228[1];
                  ++v539;
                }
                while (v539 < v538);
              }
              break;
            case 3uLL:
              int v552 = *v58;
              if (*v58)
              {
                unint64_t v553 = 0;
                uint64_t v554 = 0;
                uint64_t v555 = 0;
                uint64_t v556 = 0;
                uint64_t v557 = *(void *)(v57 + 152);
                uint64_t v558 = v227[19];
                uint64_t v559 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v560 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        unint64_t v561 = 0;
                        do
                        {
                          *(unsigned char *)(v559 + v554 + v561) = (*((unsigned __int8 *)v558 + v555) | *(unsigned __int8 *)(v557 + v556)) != 0;
                          uint64_t v57 = *a1;
                          uint64_t v562 = *(void **)(*a1 + 24);
                          uint64_t v563 = v562[2];
                          v556 += v563;
                          v227 = (int **)*a2;
                          uint64_t v564 = *(int **)(*a2 + 24);
                          uint64_t v565 = *((void *)v564 + 2);
                          v555 += v565;
                          ++v561;
                          int v58 = *(int **)*a1;
                          unint64_t v566 = v58[2];
                        }
                        while (v561 < v566);
                        uint64_t v228 = *v227;
                        v554 += v561;
                      }
                      else
                      {
                        unint64_t v566 = 0;
                        uint64_t v562 = *(void **)(v57 + 24);
                        uint64_t v563 = v562[2];
                        uint64_t v564 = v227[3];
                        uint64_t v565 = *((void *)v564 + 2);
                      }
                      uint64_t v567 = v562[1];
                      uint64_t v556 = v567 + v556 - v566 * v563;
                      uint64_t v555 = *((void *)v564 + 1) + v555 - v565 * v228[2];
                      ++v560;
                      unint64_t v568 = v58[1];
                    }
                    while (v560 < v568);
                    int v552 = *v58;
                  }
                  else
                  {
                    unint64_t v568 = 0;
                    uint64_t v562 = *(void **)(v57 + 24);
                    uint64_t v567 = v562[1];
                  }
                  uint64_t v556 = *v562 + v556 - v568 * v567;
                  uint64_t v555 = *(void *)v227[3] + v555 - *((void *)v227[3] + 1) * v228[1];
                  ++v553;
                }
                while (v553 < v552);
              }
              break;
            case 4uLL:
              int v569 = *v58;
              if (*v58)
              {
                unint64_t v570 = 0;
                uint64_t v571 = 0;
                uint64_t v572 = 0;
                uint64_t v573 = 0;
                uint64_t v574 = *(void *)(v57 + 152);
                uint64_t v575 = v227[19];
                uint64_t v576 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v577 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        unint64_t v578 = 0;
                        do
                        {
                          if (v58[3])
                          {
                            unint64_t v579 = 0;
                            do
                            {
                              *(unsigned char *)(v576 + v571 + v579) = (*((unsigned __int8 *)v575 + v572) | *(unsigned __int8 *)(v574 + v573)) != 0;
                              uint64_t v57 = *a1;
                              uint64_t v580 = *(void **)(*a1 + 24);
                              uint64_t v581 = v580[3];
                              v573 += v581;
                              v227 = (int **)*a2;
                              uint64_t v582 = *(int **)(*a2 + 24);
                              uint64_t v583 = *((void *)v582 + 3);
                              v572 += v583;
                              ++v579;
                              int v58 = *(int **)*a1;
                              unint64_t v584 = v58[3];
                            }
                            while (v579 < v584);
                            uint64_t v228 = *v227;
                            v571 += v579;
                          }
                          else
                          {
                            unint64_t v584 = 0;
                            uint64_t v580 = *(void **)(v57 + 24);
                            uint64_t v581 = v580[3];
                            uint64_t v582 = v227[3];
                            uint64_t v583 = *((void *)v582 + 3);
                          }
                          uint64_t v585 = v580[2];
                          uint64_t v573 = v585 + v573 - v584 * v581;
                          uint64_t v572 = *((void *)v582 + 2) + v572 - v583 * v228[3];
                          ++v578;
                          unint64_t v586 = v58[2];
                        }
                        while (v578 < v586);
                      }
                      else
                      {
                        unint64_t v586 = 0;
                        uint64_t v580 = *(void **)(v57 + 24);
                        uint64_t v585 = v580[2];
                      }
                      uint64_t v573 = v580[1] + v573 - v586 * v585;
                      uint64_t v572 = *((void *)v227[3] + 1) + v572 - *((void *)v227[3] + 2) * v228[2];
                      ++v577;
                      unint64_t v587 = v58[1];
                    }
                    while (v577 < v587);
                    int v569 = *v58;
                  }
                  else
                  {
                    unint64_t v587 = 0;
                  }
                  uint64_t v573 = **(void **)(v57 + 24) + v573 - *(void *)(*(void *)(v57 + 24) + 8) * v587;
                  uint64_t v572 = *(void *)v227[3] + v572 - *((void *)v227[3] + 1) * v228[1];
                  ++v570;
                }
                while (v570 < v569);
              }
              break;
            default:
              if (v56[6])
              {
                unint64_t v522 = 0;
                uint64_t v1968 = v227[19];
                uint64_t v1986 = *(void *)(v57 + 152);
                uint64_t v523 = v56[19];
                do
                {
                  uint64_t v524 = *(void *)*a1;
                  unint64_t v525 = (unint64_t)(*(void *)(*a1 + 8) - v524) >> 2;
                  uint64_t v526 = 0;
                  uint64_t v527 = (v525 - 1);
                  if ((int)v525 - 1 >= 0)
                  {
                    uint64_t v528 = *(void *)(*a1 + 24);
                    int v529 = v522;
                    do
                    {
                      ldiv_t v530 = ldiv(v529, *(int *)(v524 + 4 * v527));
                      int v529 = v530.quot;
                      v526 += *(void *)(v528 + 8 * v527--) * v530.rem;
                    }
                    while (v527 != -1);
                  }
                  uint64_t v531 = *(void *)*a2;
                  unint64_t v532 = (unint64_t)(*(void *)(*a2 + 8) - v531) >> 2;
                  uint64_t v533 = 0;
                  uint64_t v534 = (v532 - 1);
                  if ((int)v532 - 1 >= 0)
                  {
                    uint64_t v535 = *(void *)(*a2 + 24);
                    int v536 = v522;
                    do
                    {
                      ldiv_t v537 = ldiv(v536, *(int *)(v531 + 4 * v534));
                      int v536 = v537.quot;
                      v533 += *(void *)(v535 + 8 * v534--) * v537.rem;
                    }
                    while (v534 != -1);
                  }
                  *(unsigned char *)(v523 + v522++) = (*((unsigned __int8 *)v1968 + (int)v533) | *(unsigned __int8 *)(v1986 + (int)v526)) != 0;
                }
                while (v522 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            int v18 = *(_DWORD **)(*(void *)a3 + 152);
            int v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = (v21 | v17) != 0;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          int v87 = *(_DWORD *)(*a1 + 160);
          if (v87 >= 1)
          {
            int v88 = **(_DWORD **)(*a2 + 152);
            int v89 = *(_DWORD **)(*(void *)a3 + 152);
            BOOL v90 = *(int **)(*a1 + 152);
            unsigned int v91 = v87 + 1;
            do
            {
              int v92 = *v90++;
              *v89++ = (v92 | v88) != 0;
              --v91;
            }
            while (v91 > 1);
          }
          return;
        case 3:
          int v93 = *(_DWORD *)(*(void *)a3 + 48);
          if (v93 >= 1)
          {
            uint64_t v94 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v95 = *(int **)(*a2 + 152);
            unsigned int v96 = *(int **)(*a1 + 152);
            unsigned int v97 = v93 + 1;
            do
            {
              int v99 = *v96++;
              int v98 = v99;
              int v100 = *v95++;
              *v94++ = (v100 | v98) != 0;
              --v97;
            }
            while (v97 > 1);
          }
          return;
        default:
          uint64_t v78 = *(void **)a3;
          int v79 = (void *)*a1;
          int v80 = *(int **)*a1;
          uint64_t v81 = (v79[1] - (void)v80) >> 2;
          uint64_t v82 = (v81 - 1);
          if ((int)v82 >= -1) {
            int v83 = -1;
          }
          else {
            int v83 = v81 - 1;
          }
          int v84 = v83 + 1;
          int v85 = v81 + 1;
          break;
      }
      while (1)
      {
        unsigned int v86 = v85 - 2;
        if (v85 - 2 < 0) {
          break;
        }
        --v85;
        if (*(void *)(v79[3] + 8 * v86) != *(void *)(v78[3] + 8 * v86)) {
          goto LABEL_170;
        }
      }
      int v85 = v84;
LABEL_170:
      int v234 = (void *)*a2;
      v235 = *(int **)*a2;
      uint64_t v236 = (v234[1] - (void)v235) >> 2;
      uint64_t v237 = (v236 - 1);
      if ((int)v237 >= -1) {
        int v238 = -1;
      }
      else {
        int v238 = v236 - 1;
      }
      int v239 = v238 + 1;
      int v240 = v236 + 1;
      while (1)
      {
        unsigned int v241 = v240 - 2;
        if (v240 - 2 < 0) {
          break;
        }
        --v240;
        if (*(void *)(v234[3] + 8 * v241) != *(void *)(v78[3] + 8 * v241)) {
          goto LABEL_219;
        }
      }
      int v240 = v239;
LABEL_219:
      int v277 = v81 + 1;
      while (1)
      {
        unsigned int v278 = v277 - 2;
        if (v277 - 2 < 0) {
          break;
        }
        --v277;
        if (*(void *)(v79[3] + 8 * v278)) {
          goto LABEL_254;
        }
      }
      int v277 = v84;
LABEL_254:
      int v291 = v236 + 1;
      while (1)
      {
        unsigned int v292 = v291 - 2;
        if (v291 - 2 < 0) {
          break;
        }
        --v291;
        if (*(void *)(v234[3] + 8 * v292)) {
          goto LABEL_350;
        }
      }
      int v291 = v239;
LABEL_350:
      unint64_t v341 = (uint64_t)(v78[1] - *v78) >> 2;
      if (v85 <= v240) {
        int v342 = v240;
      }
      else {
        int v342 = v85;
      }
      if (v85 <= v291) {
        int v85 = v291;
      }
      if (v277 > v240) {
        int v240 = v277;
      }
      if (v341 > v240)
      {
        int v343 = 1;
      }
      else
      {
        int v240 = (uint64_t)(v78[1] - *v78) >> 2;
        int v343 = 4;
      }
      if (v341 > v85)
      {
        int v344 = 2;
      }
      else
      {
        int v85 = v240;
        int v344 = v343;
      }
      if (v341 > v342)
      {
        int v85 = v342;
        int v344 = 3;
      }
      uint64_t v1963 = v237;
      uint64_t v1980 = v82;
      if (!v85) {
        goto LABEL_380;
      }
      unint64_t v345 = *(void *)(v78[3] + 8 * (v85 - 1));
      if (v345 < 0x10) {
        goto LABEL_380;
      }
      switch(v344)
      {
        case 1:
          if (v85 == 2)
          {
            int v1500 = *v80;
            if (*v80)
            {
              unint64_t v1501 = 0;
              uint64_t v1502 = 0;
              uint64_t v1503 = 0;
              uint64_t v1504 = v79[19];
              uint64_t v1505 = v234[19];
              uint64_t v1506 = v78[19];
              uint64_t v1507 = (uint64_t *)v79[3];
              uint64_t v1508 = *v1507;
              uint64_t v1509 = v1507[1];
              uint64_t v1510 = (uint64_t *)v234[3];
              uint64_t v1511 = *v1510;
              uint64_t v1512 = v1510[1];
              int v1513 = v80[1];
              int v1514 = v1513;
              do
              {
                if (v1514)
                {
                  unint64_t v1515 = 0;
                  uint64_t v1516 = v1505 + 4 * v1502;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      uint64_t v1517 = 0;
                      int v1518 = *(_DWORD *)(v1504 + 4 * v1503);
                      unsigned int v1519 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1506 + v1517) = (*(_DWORD *)(v1516 + v1517) | v1518) != 0;
                        --v1519;
                        v1517 += 4;
                      }
                      while (v1519 > 1);
                      int v1513 = v80[1];
                    }
                    v1503 += v1509;
                    v1502 += v1512;
                    v1506 += 4 * (int)v345;
                    ++v1515;
                    v1516 += 4 * v1512;
                  }
                  while (v1515 < v1513);
                  uint64_t v1520 = v1513;
                  int v1500 = *v80;
                  int v1514 = v1513;
                }
                else
                {
                  uint64_t v1520 = 0;
                }
                uint64_t v1503 = v1503 + v1508 - v1520 * v1509;
                uint64_t v1502 = v1502 + v1511 - v1512 * v235[1];
                ++v1501;
              }
              while (v1501 < v1500);
            }
          }
          else if (v85 == 1)
          {
            int v1022 = *v80;
            if (*v80)
            {
              unint64_t v1023 = 0;
              uint64_t v1024 = 0;
              uint64_t v1025 = v79[19];
              uint64_t v1026 = v234[19];
              uint64_t v1027 = v78[19];
              uint64_t v1028 = *(void *)v79[3];
              uint64_t v1029 = 4 * *(void *)v234[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  uint64_t v1030 = 0;
                  int v1031 = *(_DWORD *)(v1025 + 4 * v1024);
                  unsigned int v1032 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1027 + v1030) = (*(_DWORD *)(v1026 + v1030) | v1031) != 0;
                    --v1032;
                    v1030 += 4;
                  }
                  while (v1032 > 1);
                  int v1022 = *v80;
                }
                v1024 += v1028;
                ++v1023;
                v1027 += 4 * (int)v345;
                v1026 += v1029;
              }
              while (v1023 < v1022);
            }
          }
          else
          {
            unint64_t v1923 = v78[6];
            if (v1923)
            {
              unint64_t v1952 = 0;
              uint64_t v1856 = v234[19];
              uint64_t v1871 = v79[19];
              uint64_t v1521 = v78[19];
              do
              {
                uint64_t v1522 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  uint64_t v1523 = v79[3];
                  uint64_t v1524 = v82;
                  int v1525 = v1952;
                  do
                  {
                    ldiv_t v1526 = ldiv(v1525, v80[v1524]);
                    int v1525 = v1526.quot;
                    v1522 += *(void *)(v1523 + 8 * v1524--) * v1526.rem;
                  }
                  while (v1524 != -1);
                }
                uint64_t v1527 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1528) = 0;
                }
                else
                {
                  uint64_t v1528 = 0;
                  uint64_t v1529 = v234[3];
                  int v1530 = v1952;
                  do
                  {
                    ldiv_t v1531 = ldiv(v1530, v235[v1527]);
                    int v1530 = v1531.quot;
                    v1528 += *(void *)(v1529 + 8 * v1527--) * v1531.rem;
                  }
                  while (v1527 != -1);
                }
                uint64_t v82 = v1980;
                if ((int)v345 >= 1)
                {
                  uint64_t v1532 = 0;
                  int v1533 = *(_DWORD *)(v1871 + 4 * (int)v1522);
                  unsigned int v1534 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1521 + v1532) = (*(_DWORD *)(v1856 + 4 * (int)v1528 + v1532) | v1533) != 0;
                    --v1534;
                    v1532 += 4;
                  }
                  while (v1534 > 1);
                }
                v1521 += 4 * (int)v345;
                v1952 += (int)v345;
              }
              while (v1952 < v1923);
            }
          }
          break;
        case 2:
          if (v85 == 2)
          {
            int v1535 = *v80;
            if (*v80)
            {
              unint64_t v1536 = 0;
              uint64_t v1537 = 0;
              uint64_t v1538 = 0;
              uint64_t v1539 = v79[19];
              uint64_t v1540 = v234[19];
              uint64_t v1541 = v78[19];
              unsigned int v1542 = (uint64_t *)v79[3];
              uint64_t v1543 = *v1542;
              uint64_t v1544 = v1542[1];
              uint64_t v1545 = (uint64_t *)v234[3];
              uint64_t v1546 = *v1545;
              uint64_t v1547 = v1545[1];
              int v1548 = v80[1];
              int v1549 = v1548;
              do
              {
                if (v1549)
                {
                  unint64_t v1550 = 0;
                  uint64_t v1551 = v1539 + 4 * v1538;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      uint64_t v1552 = 0;
                      int v1553 = *(_DWORD *)(v1540 + 4 * v1537);
                      unsigned int v1554 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1541 + v1552) = (*(_DWORD *)(v1551 + v1552) | v1553) != 0;
                        --v1554;
                        v1552 += 4;
                      }
                      while (v1554 > 1);
                      int v1548 = v80[1];
                    }
                    v1538 += v1544;
                    v1537 += v1547;
                    v1541 += 4 * (int)v345;
                    ++v1550;
                    v1551 += 4 * v1544;
                  }
                  while (v1550 < v1548);
                  uint64_t v1555 = v1548;
                  int v1535 = *v80;
                  int v1549 = v1548;
                }
                else
                {
                  uint64_t v1555 = 0;
                }
                uint64_t v1538 = v1538 + v1543 - v1555 * v1544;
                uint64_t v1537 = v1537 + v1546 - v1547 * v235[1];
                ++v1536;
              }
              while (v1536 < v1535);
            }
          }
          else if (v85 == 1)
          {
            int v1033 = *v80;
            if (*v80)
            {
              unint64_t v1034 = 0;
              uint64_t v1035 = 0;
              uint64_t v1036 = v79[19];
              uint64_t v1037 = v234[19];
              uint64_t v1038 = v78[19];
              uint64_t v1039 = *(void *)v234[3];
              uint64_t v1040 = 4 * *(void *)v79[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  uint64_t v1041 = 0;
                  int v1042 = *(_DWORD *)(v1037 + 4 * v1035);
                  unsigned int v1043 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1038 + v1041) = (*(_DWORD *)(v1036 + v1041) | v1042) != 0;
                    --v1043;
                    v1041 += 4;
                  }
                  while (v1043 > 1);
                  int v1033 = *v80;
                }
                v1035 += v1039;
                ++v1034;
                v1038 += 4 * (int)v345;
                v1036 += v1040;
              }
              while (v1034 < v1033);
            }
          }
          else
          {
            unint64_t v1924 = v78[6];
            if (v1924)
            {
              unint64_t v1953 = 0;
              uint64_t v1857 = v234[19];
              uint64_t v1872 = v79[19];
              uint64_t v1556 = v78[19];
              do
              {
                uint64_t v1557 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  uint64_t v1558 = v79[3];
                  uint64_t v1559 = v82;
                  int v1560 = v1953;
                  do
                  {
                    ldiv_t v1561 = ldiv(v1560, v80[v1559]);
                    int v1560 = v1561.quot;
                    v1557 += *(void *)(v1558 + 8 * v1559--) * v1561.rem;
                  }
                  while (v1559 != -1);
                }
                uint64_t v1562 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1563) = 0;
                }
                else
                {
                  uint64_t v1563 = 0;
                  uint64_t v1564 = v234[3];
                  int v1565 = v1953;
                  do
                  {
                    ldiv_t v1566 = ldiv(v1565, v235[v1562]);
                    int v1565 = v1566.quot;
                    v1563 += *(void *)(v1564 + 8 * v1562--) * v1566.rem;
                  }
                  while (v1562 != -1);
                }
                uint64_t v82 = v1980;
                if ((int)v345 >= 1)
                {
                  uint64_t v1567 = 0;
                  int v1568 = *(_DWORD *)(v1857 + 4 * (int)v1563);
                  unsigned int v1569 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1556 + v1567) = (*(_DWORD *)(v1872 + 4 * (int)v1557 + v1567) | v1568) != 0;
                    --v1569;
                    v1567 += 4;
                  }
                  while (v1569 > 1);
                }
                v1556 += 4 * (int)v345;
                v1953 += (int)v345;
              }
              while (v1953 < v1924);
            }
          }
          break;
        case 3:
          if (v85 == 2)
          {
            int v1196 = *v80;
            if (*v80)
            {
              unint64_t v1197 = 0;
              uint64_t v1198 = 0;
              uint64_t v1199 = 0;
              uint64_t v1200 = v79[19];
              uint64_t v1201 = v234[19];
              uint64_t v1202 = v78[19];
              v1203 = (uint64_t *)v79[3];
              uint64_t v1204 = *v1203;
              uint64_t v1205 = v1203[1];
              int v1206 = (uint64_t *)v234[3];
              uint64_t v1207 = *v1206;
              uint64_t v1208 = v1206[1];
              int v1209 = v80[1];
              int v1210 = v1209;
              do
              {
                if (v1210)
                {
                  unint64_t v1211 = 0;
                  uint64_t v1212 = v1201 + 4 * v1198;
                  uint64_t v1213 = v1200 + 4 * v1199;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      uint64_t v1214 = 0;
                      unsigned int v1215 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1202 + v1214) = (*(_DWORD *)(v1212 + v1214) | *(_DWORD *)(v1213 + v1214)) != 0;
                        --v1215;
                        v1214 += 4;
                      }
                      while (v1215 > 1);
                      int v1209 = v80[1];
                    }
                    v1199 += v1205;
                    v1198 += v1208;
                    v1202 += 4 * (int)v345;
                    ++v1211;
                    v1212 += 4 * v1208;
                    v1213 += 4 * v1205;
                  }
                  while (v1211 < v1209);
                  uint64_t v1216 = v1209;
                  int v1196 = *v80;
                  int v1210 = v1209;
                }
                else
                {
                  uint64_t v1216 = 0;
                }
                uint64_t v1199 = v1199 + v1204 - v1216 * v1205;
                uint64_t v1198 = v1198 + v1207 - v1208 * v235[1];
                ++v1197;
              }
              while (v1197 < v1196);
            }
          }
          else if (v85 == 1)
          {
            int v346 = *v80;
            if (*v80)
            {
              unint64_t v347 = 0;
              uint64_t v348 = v79[19];
              uint64_t v349 = v234[19];
              uint64_t v350 = v78[19];
              uint64_t v351 = 4 * *(void *)v234[3];
              uint64_t v352 = 4 * *(void *)v79[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  uint64_t v353 = 0;
                  unsigned int v354 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v350 + v353) = (*(_DWORD *)(v349 + v353) | *(_DWORD *)(v348 + v353)) != 0;
                    --v354;
                    v353 += 4;
                  }
                  while (v354 > 1);
                  int v346 = *v80;
                }
                ++v347;
                v350 += 4 * (int)v345;
                v349 += v351;
                v348 += v352;
              }
              while (v347 < v346);
            }
          }
          else
          {
            unint64_t v1914 = v78[6];
            if (v1914)
            {
              unint64_t v1943 = 0;
              uint64_t v1852 = v234[19];
              uint64_t v1865 = v79[19];
              uint64_t v1217 = v78[19];
              do
              {
                uint64_t v1218 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  uint64_t v1219 = v79[3];
                  uint64_t v1220 = v82;
                  int v1221 = v1943;
                  do
                  {
                    ldiv_t v1222 = ldiv(v1221, v80[v1220]);
                    int v1221 = v1222.quot;
                    v1218 += *(void *)(v1219 + 8 * v1220--) * v1222.rem;
                  }
                  while (v1220 != -1);
                }
                uint64_t v1223 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1224) = 0;
                }
                else
                {
                  uint64_t v1224 = 0;
                  uint64_t v1225 = v234[3];
                  int v1226 = v1943;
                  do
                  {
                    ldiv_t v1227 = ldiv(v1226, v235[v1223]);
                    int v1226 = v1227.quot;
                    v1224 += *(void *)(v1225 + 8 * v1223--) * v1227.rem;
                  }
                  while (v1223 != -1);
                }
                uint64_t v82 = v1980;
                if ((int)v345 >= 1)
                {
                  uint64_t v1228 = 0;
                  unsigned int v1229 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1217 + v1228) = (*(_DWORD *)(v1852 + 4 * (int)v1224 + v1228) | *(_DWORD *)(v1865 + 4 * (int)v1218 + v1228)) != 0;
                    --v1229;
                    v1228 += 4;
                  }
                  while (v1229 > 1);
                }
                v1217 += 4 * (int)v345;
                v1943 += (int)v345;
              }
              while (v1943 < v1914);
            }
          }
          break;
        default:
LABEL_380:
          switch(v341)
          {
            case 1uLL:
              uint64_t v355 = v78[6];
              if (v355)
              {
                unsigned int v356 = (_DWORD *)v79[19];
                int v357 = (_DWORD *)v234[19];
                unsigned int v358 = (_DWORD *)v78[19];
                uint64_t v359 = 4 * *(void *)v234[3];
                uint64_t v360 = 4 * *(void *)v79[3];
                do
                {
                  *v358++ = (*v357 | *v356) != 0;
                  int v357 = (_DWORD *)((char *)v357 + v359);
                  unsigned int v356 = (_DWORD *)((char *)v356 + v360);
                  --v355;
                }
                while (v355);
              }
              break;
            case 2uLL:
              int v600 = *v80;
              if (*v80)
              {
                unint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = v79[19];
                uint64_t v606 = v234[19];
                uint64_t v607 = v78[19];
                uint64_t v608 = (uint64_t *)v79[3];
                uint64_t v609 = *v608;
                uint64_t v610 = v608[1];
                char v611 = (uint64_t *)v234[3];
                uint64_t v613 = *v611;
                uint64_t v612 = v611[1];
                int v614 = v80[1];
                do
                {
                  if (v614)
                  {
                    for (unint64_t i = 0; i < v614; ++i)
                    {
                      *(_DWORD *)(v607 + 4 * v602 + 4 * i) = (*(_DWORD *)(v606 + 4 * v603) | *(_DWORD *)(v605 + 4 * v604)) != 0;
                      v604 += v610;
                      v603 += v612;
                      int v614 = v80[1];
                    }
                    uint64_t v616 = v614;
                    int v600 = *v80;
                    v602 += i;
                  }
                  else
                  {
                    uint64_t v616 = 0;
                  }
                  uint64_t v604 = v604 + v609 - v616 * v610;
                  uint64_t v603 = v603 + v613 - v612 * v235[1];
                  ++v601;
                }
                while (v601 < v600);
              }
              break;
            case 3uLL:
              int v617 = *v80;
              if (*v80)
              {
                unint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = 0;
                uint64_t v621 = 0;
                uint64_t v622 = v79[19];
                uint64_t v623 = v234[19];
                uint64_t v624 = v78[19];
                uint64_t v625 = (uint64_t *)v79[3];
                uint64_t v626 = *v625;
                uint64_t v627 = v625[1];
                BOOL v628 = (uint64_t *)v234[3];
                uint64_t v629 = *v628;
                uint64_t v630 = v628[1];
                int v631 = v80[1];
                int v632 = v631;
                do
                {
                  if (v632)
                  {
                    unint64_t v633 = 0;
                    uint64_t v634 = v625[2];
                    uint64_t v635 = v628[2];
                    int v636 = v80[2];
                    do
                    {
                      if (v636)
                      {
                        for (unint64_t j = 0; j < v636; ++j)
                        {
                          *(_DWORD *)(v624 + 4 * v619 + 4 * j) = (*(_DWORD *)(v623 + 4 * v620) | *(_DWORD *)(v622 + 4 * v621)) != 0;
                          v621 += v634;
                          v620 += v635;
                          int v636 = v80[2];
                        }
                        uint64_t v638 = v636;
                        int v631 = v80[1];
                        v619 += j;
                      }
                      else
                      {
                        uint64_t v638 = 0;
                      }
                      uint64_t v621 = v621 + v627 - v638 * v634;
                      uint64_t v620 = v620 + v630 - v635 * v235[2];
                      ++v633;
                    }
                    while (v633 < v631);
                    uint64_t v639 = v631;
                    int v617 = *v80;
                    int v632 = v631;
                  }
                  else
                  {
                    uint64_t v639 = 0;
                  }
                  uint64_t v621 = v621 + v626 - v639 * v627;
                  uint64_t v620 = v620 + v629 - v630 * v235[1];
                  ++v618;
                }
                while (v618 < v617);
              }
              break;
            case 4uLL:
              int v640 = *v80;
              if (*v80)
              {
                unint64_t v641 = 0;
                uint64_t v642 = 0;
                uint64_t v643 = 0;
                uint64_t v644 = 0;
                uint64_t v645 = v79[19];
                uint64_t v646 = v234[19];
                uint64_t v647 = v78[19];
                uint64_t v648 = (uint64_t *)v79[3];
                uint64_t v649 = *v648;
                uint64_t v650 = v648[1];
                uint64_t v651 = (uint64_t *)v234[3];
                uint64_t v652 = *v651;
                uint64_t v653 = v651[1];
                int v654 = v80[1];
                int v655 = v654;
                do
                {
                  if (v655)
                  {
                    unint64_t v656 = 0;
                    uint64_t v657 = v648[2];
                    uint64_t v658 = v651[2];
                    int v659 = v80[2];
                    int v660 = v659;
                    do
                    {
                      if (v660)
                      {
                        unint64_t v661 = 0;
                        uint64_t v662 = v648[3];
                        uint64_t v663 = v651[3];
                        int v664 = v80[3];
                        do
                        {
                          if (v664)
                          {
                            for (unint64_t k = 0; k < v664; ++k)
                            {
                              *(_DWORD *)(v647 + 4 * v642 + 4 * k) = (*(_DWORD *)(v646 + 4 * v643) | *(_DWORD *)(v645 + 4 * v644)) != 0;
                              v644 += v662;
                              v643 += v663;
                              int v664 = v80[3];
                            }
                            uint64_t v666 = v664;
                            int v659 = v80[2];
                            v642 += k;
                          }
                          else
                          {
                            uint64_t v666 = 0;
                          }
                          uint64_t v644 = v644 + v657 - v666 * v662;
                          uint64_t v643 = v643 + v658 - v663 * v235[3];
                          ++v661;
                        }
                        while (v661 < v659);
                        uint64_t v667 = v659;
                        int v654 = v80[1];
                        int v660 = v659;
                      }
                      else
                      {
                        uint64_t v667 = 0;
                      }
                      uint64_t v644 = v644 + v650 - v667 * v657;
                      uint64_t v643 = v643 + v653 - v658 * v235[2];
                      ++v656;
                    }
                    while (v656 < v654);
                    uint64_t v668 = v654;
                    int v640 = *v80;
                    int v655 = v654;
                  }
                  else
                  {
                    uint64_t v668 = 0;
                  }
                  uint64_t v644 = v644 + v649 - v668 * v650;
                  uint64_t v643 = v643 + v652 - v653 * v235[1];
                  ++v641;
                }
                while (v641 < v640);
              }
              break;
            default:
              uint64_t v588 = v78[6];
              if (v588)
              {
                uint64_t v589 = 0;
                uint64_t v1906 = v234[19];
                uint64_t v1935 = v79[19];
                uint64_t v1892 = v78[19];
                do
                {
                  uint64_t v590 = 0;
                  if ((v82 & 0x80000000) == 0)
                  {
                    uint64_t v591 = v79[3];
                    uint64_t v592 = v82;
                    int v593 = v589;
                    do
                    {
                      ldiv_t v594 = ldiv(v593, v80[v592]);
                      int v593 = v594.quot;
                      v590 += *(void *)(v591 + 8 * v592--) * v594.rem;
                    }
                    while (v592 != -1);
                  }
                  uint64_t v595 = v1963;
                  if ((v1963 & 0x80000000) != 0)
                  {
                    LODWORD(v596) = 0;
                  }
                  else
                  {
                    uint64_t v596 = 0;
                    uint64_t v597 = v234[3];
                    int v598 = v589;
                    do
                    {
                      ldiv_t v599 = ldiv(v598, v235[v595]);
                      int v598 = v599.quot;
                      v596 += *(void *)(v597 + 8 * v595--) * v599.rem;
                    }
                    while (v595 != -1);
                  }
                  *(_DWORD *)(v1892 + 4 * v589++) = (*(_DWORD *)(v1906 + 4 * (int)v596) | *(_DWORD *)(v1935 + 4 * (int)v590)) != 0;
                  uint64_t v82 = v1980;
                }
                while (v589 != v588);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          char v7 = (**(unsigned __int8 **)(*a2 + 152) | **(unsigned __int8 **)(*a1 + 152)) != 0;
LABEL_16:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v109 = *(_DWORD *)(*a2 + 160);
          if (v109 >= 1)
          {
            int v110 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v111 = *(BOOL **)(*(void *)a3 + 152);
            int v112 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v113 = v109 + 1;
            do
            {
              int v114 = *v112++;
              *v111++ = (v114 | v110) != 0;
              --v113;
            }
            while (v113 > 1);
          }
          return;
        case 2:
          int v115 = *(_DWORD *)(*a1 + 160);
          if (v115 >= 1)
          {
            int v116 = **(unsigned __int8 **)(*a2 + 152);
            int v117 = *(BOOL **)(*(void *)a3 + 152);
            int v118 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v119 = v115 + 1;
            do
            {
              int v120 = *v118++;
              *v117++ = (v120 | v116) != 0;
              --v119;
            }
            while (v119 > 1);
          }
          return;
        case 3:
          int v121 = *(_DWORD *)(*(void *)a3 + 48);
          if (v121 >= 1)
          {
            uint64_t v122 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v123 = *(unsigned __int8 **)(*a2 + 152);
            float v124 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v125 = v121 + 1;
            do
            {
              int v127 = *v124++;
              int v126 = v127;
              int v128 = *v123++;
              *v122++ = (v128 | v126) != 0;
              --v125;
            }
            while (v125 > 1);
          }
          return;
        default:
          BOOL v101 = *(void **)a3;
          uint64_t v102 = *a1;
          uint64_t v103 = *(int **)*a1;
          uint64_t v104 = (*(void *)(*a1 + 8) - (void)v103) >> 2;
          int v105 = v104 - 1;
          if ((int)v104 - 1 >= -1) {
            int v105 = -1;
          }
          int v106 = v105 + 1;
          int v107 = v104 + 1;
          while (1)
          {
            unsigned int v108 = v107 - 2;
            if (v107 - 2 < 0) {
              break;
            }
            --v107;
            if (*(void *)(*(void *)(v102 + 24) + 8 * v108) != *(void *)(v101[3] + 8 * v108)) {
              goto LABEL_178;
            }
          }
          int v107 = v106;
LABEL_178:
          uint64_t v242 = (int **)*a2;
          BOOL v243 = *(int **)*a2;
          uint64_t v244 = (*(void *)(*a2 + 8) - (void)v243) >> 2;
          int v245 = v244 - 1;
          if ((int)v244 - 1 >= -1) {
            int v245 = -1;
          }
          int v246 = v245 + 1;
          int v247 = v244 + 1;
          while (1)
          {
            unsigned int v248 = v247 - 2;
            if (v247 - 2 < 0) {
              break;
            }
            --v247;
            if (*(void *)&v242[3][2 * v248] != *(void *)(v101[3] + 8 * v248)) {
              goto LABEL_224;
            }
          }
          int v247 = v246;
LABEL_224:
          int v279 = v104 + 1;
          while (1)
          {
            unsigned int v280 = v279 - 2;
            if (v279 - 2 < 0) {
              break;
            }
            --v279;
            if (*(void *)(*(void *)(v102 + 24) + 8 * v280)) {
              goto LABEL_259;
            }
          }
          int v279 = v106;
LABEL_259:
          int v293 = v244 + 1;
          while (1)
          {
            int v294 = v293 - 2;
            if (v293 - 2 < 0) {
              break;
            }
            --v293;
            if (*(void *)&v242[3][2 * v294]) {
              goto LABEL_386;
            }
          }
          int v293 = v246;
LABEL_386:
          unint64_t v361 = (uint64_t)(v101[1] - *v101) >> 2;
          if (v107 <= v247) {
            int v362 = v247;
          }
          else {
            int v362 = v107;
          }
          if (v107 <= v293) {
            int v107 = v293;
          }
          if (v279 > v247) {
            int v247 = v279;
          }
          if (v361 > v247)
          {
            int v363 = 1;
          }
          else
          {
            int v247 = (uint64_t)(v101[1] - *v101) >> 2;
            int v363 = 4;
          }
          if (v361 > v107)
          {
            int v364 = 2;
          }
          else
          {
            int v107 = v247;
            int v364 = v363;
          }
          if (v361 > v362)
          {
            int v107 = v362;
            int v364 = 3;
          }
          if (!v107) {
            goto LABEL_416;
          }
          unint64_t v365 = *(void *)(v101[3] + 8 * (v107 - 1));
          if (v365 < 0x10) {
            goto LABEL_416;
          }
          uint64_t v1981 = *(void *)(v101[3] + 8 * (v107 - 1));
          switch(v364)
          {
            case 1:
              if (v107 == 2)
              {
                int v1570 = *v103;
                if (*v103)
                {
                  unint64_t v1571 = 0;
                  uint64_t v1572 = 0;
                  uint64_t v1573 = 0;
                  uint64_t v1574 = *(void *)(v102 + 152);
                  uint64_t v1575 = v242[19];
                  uint64_t v1576 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      unint64_t v1577 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          uint64_t v1578 = 0;
                          int v1579 = *(unsigned __int8 *)(v1574 + v1573);
                          unsigned int v1580 = v365 + 1;
                          do
                          {
                            *(unsigned char *)(v1576 + v1578) = (*((unsigned __int8 *)v1575 + v1572 + v1578) | v1579) != 0;
                            --v1580;
                            ++v1578;
                          }
                          while (v1580 > 1);
                          uint64_t v102 = *a1;
                          uint64_t v242 = (int **)*a2;
                          uint64_t v103 = *(int **)*a1;
                        }
                        BOOL v1581 = *(void **)(v102 + 24);
                        uint64_t v1582 = v1581[1];
                        v1573 += v1582;
                        v1572 += *((void *)v242[3] + 1);
                        v1576 += (int)v365;
                        ++v1577;
                        unint64_t v1583 = v103[1];
                      }
                      while (v1577 < v1583);
                      int v1570 = *v103;
                      BOOL v243 = *v242;
                    }
                    else
                    {
                      unint64_t v1583 = 0;
                      BOOL v1581 = *(void **)(v102 + 24);
                      uint64_t v1582 = v1581[1];
                    }
                    uint64_t v1573 = *v1581 + v1573 - v1583 * v1582;
                    uint64_t v1572 = *(void *)v242[3] + v1572 - *((void *)v242[3] + 1) * v243[1];
                    ++v1571;
                  }
                  while (v1571 < v1570);
                }
              }
              else if (v107 == 1)
              {
                int v1044 = *v103;
                if (*v103)
                {
                  unint64_t v1045 = 0;
                  uint64_t v1046 = 0;
                  uint64_t v1047 = 0;
                  uint64_t v1048 = *(void *)(v102 + 152);
                  uint64_t v1049 = v242[19];
                  uint64_t v1050 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      uint64_t v1051 = 0;
                      int v1052 = *(unsigned __int8 *)(v1048 + v1047);
                      unsigned int v1053 = v365 + 1;
                      do
                      {
                        *(unsigned char *)(v1050 + v1051) = (*((unsigned __int8 *)v1049 + v1046 + v1051) | v1052) != 0;
                        --v1053;
                        ++v1051;
                      }
                      while (v1053 > 1);
                      uint64_t v102 = *a1;
                      uint64_t v242 = (int **)*a2;
                      int v1044 = **(_DWORD **)*a1;
                    }
                    v1047 += **(void **)(v102 + 24);
                    v1046 += *(void *)v242[3];
                    v1050 += (int)v365;
                    ++v1045;
                  }
                  while (v1045 < v1044);
                }
              }
              else if (v101[6])
              {
                unsigned int v1902 = v242[19];
                uint64_t v1925 = *(void *)(v102 + 152);
                uint64_t v1954 = (int)v365;
                unint64_t v1976 = 0;
                unsigned int v1888 = v365 + 1;
                uint64_t v1584 = v101[19];
                do
                {
                  uint64_t v1585 = *(void *)*a1;
                  unint64_t v1586 = (unint64_t)(*(void *)(*a1 + 8) - v1585) >> 2;
                  uint64_t v1587 = 0;
                  uint64_t v1588 = (v1586 - 1);
                  if ((int)v1586 - 1 >= 0)
                  {
                    uint64_t v1589 = *(void *)(*a1 + 24);
                    int v1590 = v1976;
                    do
                    {
                      ldiv_t v1591 = ldiv(v1590, *(int *)(v1585 + 4 * v1588));
                      int v1590 = v1591.quot;
                      v1587 += *(void *)(v1589 + 8 * v1588--) * v1591.rem;
                    }
                    while (v1588 != -1);
                  }
                  uint64_t v1592 = *(void *)*a2;
                  unint64_t v1593 = (unint64_t)(*(void *)(*a2 + 8) - v1592) >> 2;
                  uint64_t v1594 = 0;
                  uint64_t v1595 = (v1593 - 1);
                  if ((int)v1593 - 1 >= 0)
                  {
                    uint64_t v1596 = *(void *)(*a2 + 24);
                    int v1597 = v1976;
                    do
                    {
                      ldiv_t v1598 = ldiv(v1597, *(int *)(v1592 + 4 * v1595));
                      int v1597 = v1598.quot;
                      v1594 += *(void *)(v1596 + 8 * v1595--) * v1598.rem;
                    }
                    while (v1595 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    uint64_t v1599 = 0;
                    int v1600 = *(unsigned __int8 *)(v1925 + (int)v1587);
                    unsigned int v1601 = v1888;
                    do
                    {
                      *(unsigned char *)(v1584 + v1599) = (*((unsigned __int8 *)v1902 + (int)v1594 + v1599) | v1600) != 0;
                      --v1601;
                      ++v1599;
                    }
                    while (v1601 > 1);
                    BOOL v101 = *(void **)a3;
                  }
                  v1584 += v1954;
                  v1976 += v1954;
                }
                while (v1976 < v101[6]);
              }
              break;
            case 2:
              if (v107 == 2)
              {
                int v1602 = *v103;
                if (*v103)
                {
                  unint64_t v1603 = 0;
                  uint64_t v1604 = 0;
                  uint64_t v1605 = 0;
                  uint64_t v1606 = *(void *)(v102 + 152);
                  uint64_t v1607 = v242[19];
                  uint64_t v1608 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      unint64_t v1609 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          uint64_t v1610 = 0;
                          int v1611 = *((unsigned __int8 *)v1607 + v1604);
                          unsigned int v1612 = v365 + 1;
                          do
                          {
                            *(unsigned char *)(v1608 + v1610) = (*(unsigned __int8 *)(v1606 + v1605 + v1610) | v1611) != 0;
                            --v1612;
                            ++v1610;
                          }
                          while (v1612 > 1);
                          uint64_t v102 = *a1;
                          uint64_t v242 = (int **)*a2;
                          uint64_t v103 = *(int **)*a1;
                        }
                        uint64_t v1613 = *(void **)(v102 + 24);
                        uint64_t v1614 = v1613[1];
                        v1605 += v1614;
                        v1604 += *((void *)v242[3] + 1);
                        v1608 += (int)v365;
                        ++v1609;
                        unint64_t v1615 = v103[1];
                      }
                      while (v1609 < v1615);
                      int v1602 = *v103;
                      BOOL v243 = *v242;
                    }
                    else
                    {
                      unint64_t v1615 = 0;
                      uint64_t v1613 = *(void **)(v102 + 24);
                      uint64_t v1614 = v1613[1];
                    }
                    uint64_t v1605 = *v1613 + v1605 - v1615 * v1614;
                    uint64_t v1604 = *(void *)v242[3] + v1604 - *((void *)v242[3] + 1) * v243[1];
                    ++v1603;
                  }
                  while (v1603 < v1602);
                }
              }
              else if (v107 == 1)
              {
                int v1054 = *v103;
                if (*v103)
                {
                  unint64_t v1055 = 0;
                  uint64_t v1056 = 0;
                  uint64_t v1057 = 0;
                  uint64_t v1058 = *(void *)(v102 + 152);
                  uint64_t v1059 = v242[19];
                  uint64_t v1060 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      uint64_t v1061 = 0;
                      int v1062 = *((unsigned __int8 *)v1059 + v1056);
                      unsigned int v1063 = v365 + 1;
                      do
                      {
                        *(unsigned char *)(v1060 + v1061) = (*(unsigned __int8 *)(v1058 + v1057 + v1061) | v1062) != 0;
                        --v1063;
                        ++v1061;
                      }
                      while (v1063 > 1);
                      uint64_t v102 = *a1;
                      uint64_t v242 = (int **)*a2;
                      int v1054 = **(_DWORD **)*a1;
                    }
                    v1057 += **(void **)(v102 + 24);
                    v1056 += *(void *)v242[3];
                    v1060 += (int)v365;
                    ++v1055;
                  }
                  while (v1055 < v1054);
                }
              }
              else if (v101[6])
              {
                BOOL v1903 = v242[19];
                uint64_t v1926 = *(void *)(v102 + 152);
                uint64_t v1955 = (int)v365;
                unint64_t v1977 = 0;
                unsigned int v1889 = v365 + 1;
                uint64_t v1616 = v101[19];
                do
                {
                  uint64_t v1617 = *(void *)*a1;
                  unint64_t v1618 = (unint64_t)(*(void *)(*a1 + 8) - v1617) >> 2;
                  uint64_t v1619 = 0;
                  uint64_t v1620 = (v1618 - 1);
                  if ((int)v1618 - 1 >= 0)
                  {
                    uint64_t v1621 = *(void *)(*a1 + 24);
                    int v1622 = v1977;
                    do
                    {
                      ldiv_t v1623 = ldiv(v1622, *(int *)(v1617 + 4 * v1620));
                      int v1622 = v1623.quot;
                      v1619 += *(void *)(v1621 + 8 * v1620--) * v1623.rem;
                    }
                    while (v1620 != -1);
                  }
                  uint64_t v1624 = *(void *)*a2;
                  unint64_t v1625 = (unint64_t)(*(void *)(*a2 + 8) - v1624) >> 2;
                  uint64_t v1626 = 0;
                  uint64_t v1627 = (v1625 - 1);
                  if ((int)v1625 - 1 >= 0)
                  {
                    uint64_t v1628 = *(void *)(*a2 + 24);
                    int v1629 = v1977;
                    do
                    {
                      ldiv_t v1630 = ldiv(v1629, *(int *)(v1624 + 4 * v1627));
                      int v1629 = v1630.quot;
                      v1626 += *(void *)(v1628 + 8 * v1627--) * v1630.rem;
                    }
                    while (v1627 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    uint64_t v1631 = 0;
                    int v1632 = *((unsigned __int8 *)v1903 + (int)v1626);
                    unsigned int v1633 = v1889;
                    do
                    {
                      *(unsigned char *)(v1616 + v1631) = (*(unsigned __int8 *)(v1926 + (int)v1619 + v1631) | v1632) != 0;
                      --v1633;
                      ++v1631;
                    }
                    while (v1633 > 1);
                    BOOL v101 = *(void **)a3;
                  }
                  v1616 += v1955;
                  v1977 += v1955;
                }
                while (v1977 < v101[6]);
              }
              break;
            case 3:
              if (v107 == 2)
              {
                int v1230 = *v103;
                if (*v103)
                {
                  unint64_t v1231 = 0;
                  uint64_t v1232 = 0;
                  uint64_t v1233 = 0;
                  uint64_t v1234 = *(void *)(v102 + 152);
                  int v1235 = v242[19];
                  uint64_t v1236 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      unint64_t v1237 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          uint64_t v1238 = 0;
                          unsigned int v1239 = v365 + 1;
                          do
                          {
                            *(unsigned char *)(v1236 + v1238) = (*((unsigned __int8 *)v1235 + v1232 + v1238) | *(unsigned __int8 *)(v1234 + v1233 + v1238)) != 0;
                            --v1239;
                            ++v1238;
                          }
                          while (v1239 > 1);
                          uint64_t v102 = *a1;
                          uint64_t v242 = (int **)*a2;
                          uint64_t v103 = *(int **)*a1;
                        }
                        uint64_t v1240 = *(void **)(v102 + 24);
                        uint64_t v1241 = v1240[1];
                        v1233 += v1241;
                        v1232 += *((void *)v242[3] + 1);
                        v1236 += (int)v365;
                        ++v1237;
                        unint64_t v1242 = v103[1];
                      }
                      while (v1237 < v1242);
                      int v1230 = *v103;
                      BOOL v243 = *v242;
                    }
                    else
                    {
                      unint64_t v1242 = 0;
                      uint64_t v1240 = *(void **)(v102 + 24);
                      uint64_t v1241 = v1240[1];
                    }
                    uint64_t v1233 = *v1240 + v1233 - v1242 * v1241;
                    uint64_t v1232 = *(void *)v242[3] + v1232 - *((void *)v242[3] + 1) * v243[1];
                    ++v1231;
                  }
                  while (v1231 < v1230);
                }
              }
              else if (v107 == 1)
              {
                int v366 = *v103;
                if (*v103)
                {
                  unint64_t v367 = 0;
                  uint64_t v368 = 0;
                  uint64_t v369 = 0;
                  uint64_t v370 = *(void *)(v102 + 152);
                  uint64_t v371 = v242[19];
                  uint64_t v372 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      uint64_t v373 = 0;
                      unsigned int v374 = v365 + 1;
                      do
                      {
                        *(unsigned char *)(v372 + v373) = (*((unsigned __int8 *)v371 + v368 + v373) | *(unsigned __int8 *)(v370 + v369 + v373)) != 0;
                        --v374;
                        ++v373;
                      }
                      while (v374 > 1);
                      uint64_t v102 = *a1;
                      uint64_t v242 = (int **)*a2;
                      int v366 = **(_DWORD **)*a1;
                    }
                    v369 += **(void **)(v102 + 24);
                    v368 += *(void *)v242[3];
                    v372 += (int)v365;
                    ++v367;
                  }
                  while (v367 < v366);
                }
              }
              else if (v101[6])
              {
                uint64_t v1899 = v242[19];
                uint64_t v1915 = *(void *)(v102 + 152);
                uint64_t v1944 = (int)v365;
                unint64_t v1973 = 0;
                unsigned int v1883 = v365 + 1;
                uint64_t v1243 = v101[19];
                do
                {
                  uint64_t v1244 = *(void *)*a1;
                  unint64_t v1245 = (unint64_t)(*(void *)(*a1 + 8) - v1244) >> 2;
                  uint64_t v1246 = 0;
                  uint64_t v1247 = (v1245 - 1);
                  if ((int)v1245 - 1 >= 0)
                  {
                    uint64_t v1248 = *(void *)(*a1 + 24);
                    int v1249 = v1973;
                    do
                    {
                      ldiv_t v1250 = ldiv(v1249, *(int *)(v1244 + 4 * v1247));
                      int v1249 = v1250.quot;
                      v1246 += *(void *)(v1248 + 8 * v1247--) * v1250.rem;
                    }
                    while (v1247 != -1);
                  }
                  uint64_t v1251 = *(void *)*a2;
                  unint64_t v1252 = (unint64_t)(*(void *)(*a2 + 8) - v1251) >> 2;
                  uint64_t v1253 = 0;
                  uint64_t v1254 = (v1252 - 1);
                  if ((int)v1252 - 1 >= 0)
                  {
                    uint64_t v1255 = *(void *)(*a2 + 24);
                    int v1256 = v1973;
                    do
                    {
                      ldiv_t v1257 = ldiv(v1256, *(int *)(v1251 + 4 * v1254));
                      int v1256 = v1257.quot;
                      v1253 += *(void *)(v1255 + 8 * v1254--) * v1257.rem;
                    }
                    while (v1254 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    uint64_t v1258 = 0;
                    unsigned int v1259 = v1883;
                    do
                    {
                      *(unsigned char *)(v1243 + v1258) = (*((unsigned __int8 *)v1899 + (int)v1253 + v1258) | *(unsigned __int8 *)(v1915 + (int)v1246 + v1258)) != 0;
                      --v1259;
                      ++v1258;
                    }
                    while (v1259 > 1);
                    BOOL v101 = *(void **)a3;
                  }
                  v1243 += v1944;
                  v1973 += v1944;
                }
                while (v1973 < v101[6]);
              }
              break;
            default:
LABEL_416:
              switch(v361)
              {
                case 1uLL:
                  if (v101[6])
                  {
                    unint64_t v375 = 0;
                    uint64_t v376 = 0;
                    uint64_t v377 = 0;
                    uint64_t v378 = *(void *)(v102 + 152);
                    uint64_t v379 = v242[19];
                    uint64_t v380 = v101[19];
                    do
                    {
                      *(unsigned char *)(v380 + v375) = (*((unsigned __int8 *)v379 + v376) | *(unsigned __int8 *)(v378 + v377)) != 0;
                      v377 += **(void **)(*a1 + 24);
                      v376 += **(void **)(*a2 + 24);
                      ++v375;
                    }
                    while (v375 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v685 = *v103;
                  if (*v103)
                  {
                    unint64_t v686 = 0;
                    uint64_t v687 = 0;
                    uint64_t v688 = 0;
                    uint64_t v689 = 0;
                    uint64_t v690 = *(void *)(v102 + 152);
                    int v691 = v242[19];
                    uint64_t v692 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        unint64_t v693 = 0;
                        do
                        {
                          *(unsigned char *)(v692 + v687 + v693) = (*((unsigned __int8 *)v691 + v688) | *(unsigned __int8 *)(v690 + v689)) != 0;
                          uint64_t v102 = *a1;
                          uint64_t v694 = *(void **)(*a1 + 24);
                          uint64_t v695 = v694[1];
                          v689 += v695;
                          uint64_t v242 = (int **)*a2;
                          int v696 = *(int **)(*a2 + 24);
                          uint64_t v697 = *((void *)v696 + 1);
                          v688 += v697;
                          ++v693;
                          uint64_t v103 = *(int **)*a1;
                          unint64_t v698 = v103[1];
                        }
                        while (v693 < v698);
                        int v685 = *v103;
                        BOOL v243 = *v242;
                        v687 += v693;
                      }
                      else
                      {
                        unint64_t v698 = 0;
                        uint64_t v694 = *(void **)(v102 + 24);
                        uint64_t v695 = v694[1];
                        int v696 = v242[3];
                        uint64_t v697 = *((void *)v696 + 1);
                      }
                      uint64_t v689 = *v694 + v689 - v698 * v695;
                      uint64_t v688 = *(void *)v696 + v688 - v697 * v243[1];
                      ++v686;
                    }
                    while (v686 < v685);
                  }
                  break;
                case 3uLL:
                  int v699 = *v103;
                  if (*v103)
                  {
                    unint64_t v700 = 0;
                    uint64_t v701 = 0;
                    uint64_t v702 = 0;
                    uint64_t v703 = 0;
                    uint64_t v704 = *(void *)(v102 + 152);
                    uint64_t v705 = v242[19];
                    uint64_t v706 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        unint64_t v707 = 0;
                        do
                        {
                          if (v103[2])
                          {
                            unint64_t v708 = 0;
                            do
                            {
                              *(unsigned char *)(v706 + v701 + v708) = (*((unsigned __int8 *)v705 + v702) | *(unsigned __int8 *)(v704 + v703)) != 0;
                              uint64_t v102 = *a1;
                              uint64_t v709 = *(void **)(*a1 + 24);
                              uint64_t v710 = v709[2];
                              v703 += v710;
                              uint64_t v242 = (int **)*a2;
                              v711 = *(int **)(*a2 + 24);
                              uint64_t v712 = *((void *)v711 + 2);
                              v702 += v712;
                              ++v708;
                              uint64_t v103 = *(int **)*a1;
                              unint64_t v713 = v103[2];
                            }
                            while (v708 < v713);
                            BOOL v243 = *v242;
                            v701 += v708;
                          }
                          else
                          {
                            unint64_t v713 = 0;
                            uint64_t v709 = *(void **)(v102 + 24);
                            uint64_t v710 = v709[2];
                            v711 = v242[3];
                            uint64_t v712 = *((void *)v711 + 2);
                          }
                          uint64_t v714 = v709[1];
                          uint64_t v703 = v714 + v703 - v713 * v710;
                          uint64_t v702 = *((void *)v711 + 1) + v702 - v712 * v243[2];
                          ++v707;
                          unint64_t v715 = v103[1];
                        }
                        while (v707 < v715);
                        int v699 = *v103;
                      }
                      else
                      {
                        unint64_t v715 = 0;
                        uint64_t v709 = *(void **)(v102 + 24);
                        uint64_t v714 = v709[1];
                      }
                      uint64_t v703 = *v709 + v703 - v715 * v714;
                      uint64_t v702 = *(void *)v242[3] + v702 - *((void *)v242[3] + 1) * v243[1];
                      ++v700;
                    }
                    while (v700 < v699);
                  }
                  break;
                case 4uLL:
                  int v716 = *v103;
                  if (*v103)
                  {
                    unint64_t v717 = 0;
                    uint64_t v718 = 0;
                    uint64_t v719 = 0;
                    uint64_t v720 = 0;
                    uint64_t v721 = *(void *)(v102 + 152);
                    uint64_t v722 = v242[19];
                    uint64_t v723 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        unint64_t v724 = 0;
                        do
                        {
                          if (v103[2])
                          {
                            unint64_t v725 = 0;
                            do
                            {
                              if (v103[3])
                              {
                                unint64_t v726 = 0;
                                do
                                {
                                  *(unsigned char *)(v723 + v718 + v726) = (*((unsigned __int8 *)v722 + v719) | *(unsigned __int8 *)(v721 + v720)) != 0;
                                  uint64_t v102 = *a1;
                                  v727 = *(void **)(*a1 + 24);
                                  uint64_t v728 = v727[3];
                                  v720 += v728;
                                  uint64_t v242 = (int **)*a2;
                                  uint64_t v729 = *(int **)(*a2 + 24);
                                  uint64_t v730 = *((void *)v729 + 3);
                                  v719 += v730;
                                  ++v726;
                                  uint64_t v103 = *(int **)*a1;
                                  unint64_t v731 = v103[3];
                                }
                                while (v726 < v731);
                                BOOL v243 = *v242;
                                v718 += v726;
                              }
                              else
                              {
                                unint64_t v731 = 0;
                                v727 = *(void **)(v102 + 24);
                                uint64_t v728 = v727[3];
                                uint64_t v729 = v242[3];
                                uint64_t v730 = *((void *)v729 + 3);
                              }
                              uint64_t v732 = v727[2];
                              uint64_t v720 = v732 + v720 - v731 * v728;
                              uint64_t v719 = *((void *)v729 + 2) + v719 - v730 * v243[3];
                              ++v725;
                              unint64_t v733 = v103[2];
                            }
                            while (v725 < v733);
                          }
                          else
                          {
                            unint64_t v733 = 0;
                            v727 = *(void **)(v102 + 24);
                            uint64_t v732 = v727[2];
                          }
                          uint64_t v720 = v727[1] + v720 - v733 * v732;
                          uint64_t v719 = *((void *)v242[3] + 1) + v719 - *((void *)v242[3] + 2) * v243[2];
                          ++v724;
                          unint64_t v734 = v103[1];
                        }
                        while (v724 < v734);
                        int v716 = *v103;
                      }
                      else
                      {
                        unint64_t v734 = 0;
                      }
                      uint64_t v720 = **(void **)(v102 + 24) + v720 - *(void *)(*(void *)(v102 + 24) + 8) * v734;
                      uint64_t v719 = *(void *)v242[3] + v719 - *((void *)v242[3] + 1) * v243[1];
                      ++v717;
                    }
                    while (v717 < v716);
                  }
                  break;
                default:
                  if (v101[6])
                  {
                    unint64_t v669 = 0;
                    unint64_t v1969 = v242[19];
                    uint64_t v1987 = *(void *)(v102 + 152);
                    uint64_t v670 = v101[19];
                    do
                    {
                      uint64_t v671 = *(void *)*a1;
                      unint64_t v672 = (unint64_t)(*(void *)(*a1 + 8) - v671) >> 2;
                      uint64_t v673 = 0;
                      uint64_t v674 = (v672 - 1);
                      if ((int)v672 - 1 >= 0)
                      {
                        uint64_t v675 = *(void *)(*a1 + 24);
                        int v676 = v669;
                        do
                        {
                          ldiv_t v677 = ldiv(v676, *(int *)(v671 + 4 * v674));
                          int v676 = v677.quot;
                          v673 += *(void *)(v675 + 8 * v674--) * v677.rem;
                        }
                        while (v674 != -1);
                      }
                      uint64_t v678 = *(void *)*a2;
                      unint64_t v679 = (unint64_t)(*(void *)(*a2 + 8) - v678) >> 2;
                      uint64_t v680 = 0;
                      uint64_t v681 = (v679 - 1);
                      if ((int)v679 - 1 >= 0)
                      {
                        uint64_t v682 = *(void *)(*a2 + 24);
                        int v683 = v669;
                        do
                        {
                          ldiv_t v684 = ldiv(v683, *(int *)(v678 + 4 * v681));
                          int v683 = v684.quot;
                          v680 += *(void *)(v682 + 8 * v681--) * v684.rem;
                        }
                        while (v681 != -1);
                      }
                      *(unsigned char *)(v670 + v669++) = (*((unsigned __int8 *)v1969 + (int)v680) | *(unsigned __int8 *)(v1987 + (int)v673)) != 0;
                    }
                    while (v669 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = (**(_DWORD **)(*a2 + 152) | **(_DWORD **)(*a1 + 152)) != 0;
          return;
        case 1:
          int v138 = *(_DWORD *)(*a2 + 160);
          if (v138 >= 1)
          {
            int v139 = **(_DWORD **)(*a1 + 152);
            int v140 = *(_DWORD **)(*(void *)a3 + 152);
            v141 = *(int **)(*a2 + 152);
            unsigned int v142 = v138 + 1;
            do
            {
              int v143 = *v141++;
              *v140++ = (v143 | v139) != 0;
              --v142;
            }
            while (v142 > 1);
          }
          return;
        case 2:
          int v144 = *(_DWORD *)(*a1 + 160);
          if (v144 >= 1)
          {
            int v145 = **(_DWORD **)(*a2 + 152);
            int v146 = *(_DWORD **)(*(void *)a3 + 152);
            BOOL v147 = *(int **)(*a1 + 152);
            unsigned int v148 = v144 + 1;
            do
            {
              int v149 = *v147++;
              *v146++ = (v149 | v145) != 0;
              --v148;
            }
            while (v148 > 1);
          }
          return;
        case 3:
          int v150 = *(_DWORD *)(*(void *)a3 + 48);
          if (v150 >= 1)
          {
            v151 = *(_DWORD **)(*(void *)a3 + 152);
            int v152 = *(int **)(*a2 + 152);
            unsigned int v153 = *(int **)(*a1 + 152);
            unsigned int v154 = v150 + 1;
            do
            {
              int v156 = *v153++;
              int v155 = v156;
              int v157 = *v152++;
              *v151++ = (v157 | v155) != 0;
              --v154;
            }
            while (v154 > 1);
          }
          return;
        default:
          int v129 = *(void **)a3;
          BOOL v130 = (void *)*a1;
          int v131 = *(int **)*a1;
          uint64_t v132 = (v130[1] - (void)v131) >> 2;
          uint64_t v133 = (v132 - 1);
          if ((int)v133 >= -1) {
            int v134 = -1;
          }
          else {
            int v134 = v132 - 1;
          }
          int v135 = v134 + 1;
          int v136 = v132 + 1;
          while (1)
          {
            unsigned int v137 = v136 - 2;
            if (v136 - 2 < 0) {
              break;
            }
            --v136;
            if (*(void *)(v130[3] + 8 * v137) != *(void *)(v129[3] + 8 * v137)) {
              goto LABEL_185;
            }
          }
          int v136 = v135;
LABEL_185:
          uint64_t v249 = (void *)*a2;
          int v250 = *(int **)*a2;
          uint64_t v251 = (v249[1] - (void)v250) >> 2;
          uint64_t v252 = (v251 - 1);
          if ((int)v252 >= -1) {
            int v253 = -1;
          }
          else {
            int v253 = v251 - 1;
          }
          int v254 = v253 + 1;
          int v255 = v251 + 1;
          while (1)
          {
            unsigned int v256 = v255 - 2;
            if (v255 - 2 < 0) {
              break;
            }
            --v255;
            if (*(void *)(v249[3] + 8 * v256) != *(void *)(v129[3] + 8 * v256)) {
              goto LABEL_229;
            }
          }
          int v255 = v254;
LABEL_229:
          int v281 = v132 + 1;
          while (1)
          {
            unsigned int v282 = v281 - 2;
            if (v281 - 2 < 0) {
              break;
            }
            --v281;
            if (*(void *)(v130[3] + 8 * v282)) {
              goto LABEL_264;
            }
          }
          int v281 = v135;
LABEL_264:
          int v295 = v251 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)(v249[3] + 8 * v296)) {
              goto LABEL_422;
            }
          }
          int v295 = v254;
LABEL_422:
          unint64_t v381 = (uint64_t)(v129[1] - *v129) >> 2;
          if (v136 <= v255) {
            int v382 = v255;
          }
          else {
            int v382 = v136;
          }
          if (v136 <= v295) {
            int v136 = v295;
          }
          if (v281 > v255) {
            int v255 = v281;
          }
          if (v381 > v255)
          {
            int v383 = 1;
          }
          else
          {
            int v255 = (uint64_t)(v129[1] - *v129) >> 2;
            int v383 = 4;
          }
          if (v381 > v136)
          {
            int v384 = 2;
          }
          else
          {
            int v136 = v255;
            int v384 = v383;
          }
          if (v381 > v382)
          {
            int v136 = v382;
            int v384 = 3;
          }
          uint64_t v1964 = v252;
          uint64_t v1982 = v133;
          if (!v136) {
            goto LABEL_452;
          }
          unint64_t v385 = *(void *)(v129[3] + 8 * (v136 - 1));
          if (v385 < 0x10) {
            goto LABEL_452;
          }
          switch(v384)
          {
            case 1:
              if (v136 == 2)
              {
                int v1634 = *v131;
                if (*v131)
                {
                  unint64_t v1635 = 0;
                  uint64_t v1636 = 0;
                  uint64_t v1637 = 0;
                  uint64_t v1638 = v130[19];
                  uint64_t v1639 = v249[19];
                  uint64_t v1640 = v129[19];
                  uint64_t v1641 = (uint64_t *)v130[3];
                  uint64_t v1642 = *v1641;
                  uint64_t v1643 = v1641[1];
                  int v1644 = (uint64_t *)v249[3];
                  uint64_t v1645 = *v1644;
                  uint64_t v1646 = v1644[1];
                  int v1647 = v131[1];
                  int v1648 = v1647;
                  do
                  {
                    if (v1648)
                    {
                      unint64_t v1649 = 0;
                      uint64_t v1650 = v1639 + 4 * v1636;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          uint64_t v1651 = 0;
                          int v1652 = *(_DWORD *)(v1638 + 4 * v1637);
                          unsigned int v1653 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1640 + v1651) = (*(_DWORD *)(v1650 + v1651) | v1652) != 0;
                            --v1653;
                            v1651 += 4;
                          }
                          while (v1653 > 1);
                          int v1647 = v131[1];
                        }
                        v1637 += v1643;
                        v1636 += v1646;
                        v1640 += 4 * (int)v385;
                        ++v1649;
                        v1650 += 4 * v1646;
                      }
                      while (v1649 < v1647);
                      uint64_t v1654 = v1647;
                      int v1634 = *v131;
                      int v1648 = v1647;
                    }
                    else
                    {
                      uint64_t v1654 = 0;
                    }
                    uint64_t v1637 = v1637 + v1642 - v1654 * v1643;
                    uint64_t v1636 = v1636 + v1645 - v1646 * v250[1];
                    ++v1635;
                  }
                  while (v1635 < v1634);
                }
              }
              else if (v136 == 1)
              {
                int v1064 = *v131;
                if (*v131)
                {
                  unint64_t v1065 = 0;
                  uint64_t v1066 = 0;
                  uint64_t v1067 = v130[19];
                  uint64_t v1068 = v249[19];
                  uint64_t v1069 = v129[19];
                  uint64_t v1070 = *(void *)v130[3];
                  uint64_t v1071 = 4 * *(void *)v249[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      uint64_t v1072 = 0;
                      int v1073 = *(_DWORD *)(v1067 + 4 * v1066);
                      unsigned int v1074 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1069 + v1072) = (*(_DWORD *)(v1068 + v1072) | v1073) != 0;
                        --v1074;
                        v1072 += 4;
                      }
                      while (v1074 > 1);
                      int v1064 = *v131;
                    }
                    v1066 += v1070;
                    ++v1065;
                    v1069 += 4 * (int)v385;
                    v1068 += v1071;
                  }
                  while (v1065 < v1064);
                }
              }
              else
              {
                unint64_t v1927 = v129[6];
                if (v1927)
                {
                  unint64_t v1956 = 0;
                  uint64_t v1858 = v249[19];
                  uint64_t v1873 = v130[19];
                  uint64_t v1655 = v129[19];
                  do
                  {
                    uint64_t v1656 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      uint64_t v1657 = v130[3];
                      uint64_t v1658 = v133;
                      int v1659 = v1956;
                      do
                      {
                        ldiv_t v1660 = ldiv(v1659, v131[v1658]);
                        int v1659 = v1660.quot;
                        v1656 += *(void *)(v1657 + 8 * v1658--) * v1660.rem;
                      }
                      while (v1658 != -1);
                    }
                    uint64_t v1661 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1662) = 0;
                    }
                    else
                    {
                      uint64_t v1662 = 0;
                      uint64_t v1663 = v249[3];
                      int v1664 = v1956;
                      do
                      {
                        ldiv_t v1665 = ldiv(v1664, v250[v1661]);
                        int v1664 = v1665.quot;
                        v1662 += *(void *)(v1663 + 8 * v1661--) * v1665.rem;
                      }
                      while (v1661 != -1);
                    }
                    uint64_t v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      uint64_t v1666 = 0;
                      int v1667 = *(_DWORD *)(v1873 + 4 * (int)v1656);
                      unsigned int v1668 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1655 + v1666) = (*(_DWORD *)(v1858 + 4 * (int)v1662 + v1666) | v1667) != 0;
                        --v1668;
                        v1666 += 4;
                      }
                      while (v1668 > 1);
                    }
                    v1655 += 4 * (int)v385;
                    v1956 += (int)v385;
                  }
                  while (v1956 < v1927);
                }
              }
              break;
            case 2:
              if (v136 == 2)
              {
                int v1669 = *v131;
                if (*v131)
                {
                  unint64_t v1670 = 0;
                  uint64_t v1671 = 0;
                  uint64_t v1672 = 0;
                  uint64_t v1673 = v130[19];
                  uint64_t v1674 = v249[19];
                  uint64_t v1675 = v129[19];
                  unint64_t v1676 = (uint64_t *)v130[3];
                  uint64_t v1677 = *v1676;
                  uint64_t v1678 = v1676[1];
                  uint64_t v1679 = (uint64_t *)v249[3];
                  uint64_t v1680 = *v1679;
                  uint64_t v1681 = v1679[1];
                  int v1682 = v131[1];
                  int v1683 = v1682;
                  do
                  {
                    if (v1683)
                    {
                      unint64_t v1684 = 0;
                      uint64_t v1685 = v1673 + 4 * v1672;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          uint64_t v1686 = 0;
                          int v1687 = *(_DWORD *)(v1674 + 4 * v1671);
                          unsigned int v1688 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1675 + v1686) = (*(_DWORD *)(v1685 + v1686) | v1687) != 0;
                            --v1688;
                            v1686 += 4;
                          }
                          while (v1688 > 1);
                          int v1682 = v131[1];
                        }
                        v1672 += v1678;
                        v1671 += v1681;
                        v1675 += 4 * (int)v385;
                        ++v1684;
                        v1685 += 4 * v1678;
                      }
                      while (v1684 < v1682);
                      uint64_t v1689 = v1682;
                      int v1669 = *v131;
                      int v1683 = v1682;
                    }
                    else
                    {
                      uint64_t v1689 = 0;
                    }
                    uint64_t v1672 = v1672 + v1677 - v1689 * v1678;
                    uint64_t v1671 = v1671 + v1680 - v1681 * v250[1];
                    ++v1670;
                  }
                  while (v1670 < v1669);
                }
              }
              else if (v136 == 1)
              {
                int v1075 = *v131;
                if (*v131)
                {
                  unint64_t v1076 = 0;
                  uint64_t v1077 = 0;
                  uint64_t v1078 = v130[19];
                  uint64_t v1079 = v249[19];
                  uint64_t v1080 = v129[19];
                  uint64_t v1081 = *(void *)v249[3];
                  uint64_t v1082 = 4 * *(void *)v130[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      uint64_t v1083 = 0;
                      int v1084 = *(_DWORD *)(v1079 + 4 * v1077);
                      unsigned int v1085 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1080 + v1083) = (*(_DWORD *)(v1078 + v1083) | v1084) != 0;
                        --v1085;
                        v1083 += 4;
                      }
                      while (v1085 > 1);
                      int v1075 = *v131;
                    }
                    v1077 += v1081;
                    ++v1076;
                    v1080 += 4 * (int)v385;
                    v1078 += v1082;
                  }
                  while (v1076 < v1075);
                }
              }
              else
              {
                unint64_t v1928 = v129[6];
                if (v1928)
                {
                  unint64_t v1957 = 0;
                  uint64_t v1859 = v249[19];
                  uint64_t v1874 = v130[19];
                  uint64_t v1690 = v129[19];
                  do
                  {
                    uint64_t v1691 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      uint64_t v1692 = v130[3];
                      uint64_t v1693 = v133;
                      int v1694 = v1957;
                      do
                      {
                        ldiv_t v1695 = ldiv(v1694, v131[v1693]);
                        int v1694 = v1695.quot;
                        v1691 += *(void *)(v1692 + 8 * v1693--) * v1695.rem;
                      }
                      while (v1693 != -1);
                    }
                    uint64_t v1696 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1697) = 0;
                    }
                    else
                    {
                      uint64_t v1697 = 0;
                      uint64_t v1698 = v249[3];
                      int v1699 = v1957;
                      do
                      {
                        ldiv_t v1700 = ldiv(v1699, v250[v1696]);
                        int v1699 = v1700.quot;
                        v1697 += *(void *)(v1698 + 8 * v1696--) * v1700.rem;
                      }
                      while (v1696 != -1);
                    }
                    uint64_t v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      uint64_t v1701 = 0;
                      int v1702 = *(_DWORD *)(v1859 + 4 * (int)v1697);
                      unsigned int v1703 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1690 + v1701) = (*(_DWORD *)(v1874 + 4 * (int)v1691 + v1701) | v1702) != 0;
                        --v1703;
                        v1701 += 4;
                      }
                      while (v1703 > 1);
                    }
                    v1690 += 4 * (int)v385;
                    v1957 += (int)v385;
                  }
                  while (v1957 < v1928);
                }
              }
              break;
            case 3:
              if (v136 == 2)
              {
                int v1260 = *v131;
                if (*v131)
                {
                  unint64_t v1261 = 0;
                  uint64_t v1262 = 0;
                  uint64_t v1263 = 0;
                  uint64_t v1264 = v130[19];
                  uint64_t v1265 = v249[19];
                  uint64_t v1266 = v129[19];
                  uint64_t v1267 = (uint64_t *)v130[3];
                  uint64_t v1268 = *v1267;
                  uint64_t v1269 = v1267[1];
                  uint64_t v1270 = (uint64_t *)v249[3];
                  uint64_t v1271 = *v1270;
                  uint64_t v1272 = v1270[1];
                  int v1273 = v131[1];
                  int v1274 = v1273;
                  do
                  {
                    if (v1274)
                    {
                      unint64_t v1275 = 0;
                      uint64_t v1276 = v1265 + 4 * v1262;
                      uint64_t v1277 = v1264 + 4 * v1263;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          uint64_t v1278 = 0;
                          unsigned int v1279 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1266 + v1278) = (*(_DWORD *)(v1276 + v1278) | *(_DWORD *)(v1277 + v1278)) != 0;
                            --v1279;
                            v1278 += 4;
                          }
                          while (v1279 > 1);
                          int v1273 = v131[1];
                        }
                        v1263 += v1269;
                        v1262 += v1272;
                        v1266 += 4 * (int)v385;
                        ++v1275;
                        v1276 += 4 * v1272;
                        v1277 += 4 * v1269;
                      }
                      while (v1275 < v1273);
                      uint64_t v1280 = v1273;
                      int v1260 = *v131;
                      int v1274 = v1273;
                    }
                    else
                    {
                      uint64_t v1280 = 0;
                    }
                    uint64_t v1263 = v1263 + v1268 - v1280 * v1269;
                    uint64_t v1262 = v1262 + v1271 - v1272 * v250[1];
                    ++v1261;
                  }
                  while (v1261 < v1260);
                }
              }
              else if (v136 == 1)
              {
                int v386 = *v131;
                if (*v131)
                {
                  unint64_t v387 = 0;
                  uint64_t v388 = v130[19];
                  uint64_t v389 = v249[19];
                  uint64_t v390 = v129[19];
                  uint64_t v391 = 4 * *(void *)v249[3];
                  uint64_t v392 = 4 * *(void *)v130[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      uint64_t v393 = 0;
                      unsigned int v394 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v390 + v393) = (*(_DWORD *)(v389 + v393) | *(_DWORD *)(v388 + v393)) != 0;
                        --v394;
                        v393 += 4;
                      }
                      while (v394 > 1);
                      int v386 = *v131;
                    }
                    ++v387;
                    v390 += 4 * (int)v385;
                    v389 += v391;
                    v388 += v392;
                  }
                  while (v387 < v386);
                }
              }
              else
              {
                unint64_t v1916 = v129[6];
                if (v1916)
                {
                  unint64_t v1945 = 0;
                  uint64_t v1853 = v249[19];
                  uint64_t v1866 = v130[19];
                  uint64_t v1281 = v129[19];
                  do
                  {
                    uint64_t v1282 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      uint64_t v1283 = v130[3];
                      uint64_t v1284 = v133;
                      int v1285 = v1945;
                      do
                      {
                        ldiv_t v1286 = ldiv(v1285, v131[v1284]);
                        int v1285 = v1286.quot;
                        v1282 += *(void *)(v1283 + 8 * v1284--) * v1286.rem;
                      }
                      while (v1284 != -1);
                    }
                    uint64_t v1287 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1288) = 0;
                    }
                    else
                    {
                      uint64_t v1288 = 0;
                      uint64_t v1289 = v249[3];
                      int v1290 = v1945;
                      do
                      {
                        ldiv_t v1291 = ldiv(v1290, v250[v1287]);
                        int v1290 = v1291.quot;
                        v1288 += *(void *)(v1289 + 8 * v1287--) * v1291.rem;
                      }
                      while (v1287 != -1);
                    }
                    uint64_t v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      uint64_t v1292 = 0;
                      unsigned int v1293 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1281 + v1292) = (*(_DWORD *)(v1853 + 4 * (int)v1288 + v1292) | *(_DWORD *)(v1866 + 4 * (int)v1282 + v1292)) != 0;
                        --v1293;
                        v1292 += 4;
                      }
                      while (v1293 > 1);
                    }
                    v1281 += 4 * (int)v385;
                    v1945 += (int)v385;
                  }
                  while (v1945 < v1916);
                }
              }
              break;
            default:
LABEL_452:
              switch(v381)
              {
                case 1uLL:
                  uint64_t v395 = v129[6];
                  if (v395)
                  {
                    unsigned int v396 = (_DWORD *)v130[19];
                    BOOL v397 = (_DWORD *)v249[19];
                    char v398 = (_DWORD *)v129[19];
                    uint64_t v399 = 4 * *(void *)v249[3];
                    uint64_t v400 = 4 * *(void *)v130[3];
                    do
                    {
                      *v398++ = (*v397 | *v396) != 0;
                      BOOL v397 = (_DWORD *)((char *)v397 + v399);
                      unsigned int v396 = (_DWORD *)((char *)v396 + v400);
                      --v395;
                    }
                    while (v395);
                  }
                  break;
                case 2uLL:
                  int v747 = *v131;
                  if (*v131)
                  {
                    unint64_t v748 = 0;
                    uint64_t v749 = 0;
                    uint64_t v750 = 0;
                    uint64_t v751 = 0;
                    uint64_t v752 = v130[19];
                    uint64_t v753 = v249[19];
                    uint64_t v754 = v129[19];
                    v755 = (uint64_t *)v130[3];
                    uint64_t v756 = *v755;
                    uint64_t v757 = v755[1];
                    int v758 = (uint64_t *)v249[3];
                    uint64_t v760 = *v758;
                    uint64_t v759 = v758[1];
                    int v761 = v131[1];
                    do
                    {
                      if (v761)
                      {
                        for (unint64_t m = 0; m < v761; ++m)
                        {
                          *(_DWORD *)(v754 + 4 * v749 + 4 * m) = (*(_DWORD *)(v753 + 4 * v750) | *(_DWORD *)(v752 + 4 * v751)) != 0;
                          v751 += v757;
                          v750 += v759;
                          int v761 = v131[1];
                        }
                        uint64_t v763 = v761;
                        int v747 = *v131;
                        v749 += m;
                      }
                      else
                      {
                        uint64_t v763 = 0;
                      }
                      uint64_t v751 = v751 + v756 - v763 * v757;
                      uint64_t v750 = v750 + v760 - v759 * v250[1];
                      ++v748;
                    }
                    while (v748 < v747);
                  }
                  break;
                case 3uLL:
                  int v764 = *v131;
                  if (*v131)
                  {
                    unint64_t v765 = 0;
                    uint64_t v766 = 0;
                    uint64_t v767 = 0;
                    uint64_t v768 = 0;
                    uint64_t v769 = v130[19];
                    uint64_t v770 = v249[19];
                    uint64_t v771 = v129[19];
                    uint64_t v772 = (uint64_t *)v130[3];
                    uint64_t v773 = *v772;
                    uint64_t v774 = v772[1];
                    unint64_t v775 = (uint64_t *)v249[3];
                    uint64_t v776 = *v775;
                    uint64_t v777 = v775[1];
                    int v778 = v131[1];
                    int v779 = v778;
                    do
                    {
                      if (v779)
                      {
                        unint64_t v780 = 0;
                        uint64_t v781 = v772[2];
                        uint64_t v782 = v775[2];
                        int v783 = v131[2];
                        do
                        {
                          if (v783)
                          {
                            for (unint64_t n = 0; n < v783; ++n)
                            {
                              *(_DWORD *)(v771 + 4 * v766 + 4 * n) = (*(_DWORD *)(v770 + 4 * v767) | *(_DWORD *)(v769 + 4 * v768)) != 0;
                              v768 += v781;
                              v767 += v782;
                              int v783 = v131[2];
                            }
                            uint64_t v785 = v783;
                            int v778 = v131[1];
                            v766 += n;
                          }
                          else
                          {
                            uint64_t v785 = 0;
                          }
                          uint64_t v768 = v768 + v774 - v785 * v781;
                          uint64_t v767 = v767 + v777 - v782 * v250[2];
                          ++v780;
                        }
                        while (v780 < v778);
                        uint64_t v786 = v778;
                        int v764 = *v131;
                        int v779 = v778;
                      }
                      else
                      {
                        uint64_t v786 = 0;
                      }
                      uint64_t v768 = v768 + v773 - v786 * v774;
                      uint64_t v767 = v767 + v776 - v777 * v250[1];
                      ++v765;
                    }
                    while (v765 < v764);
                  }
                  break;
                case 4uLL:
                  int v787 = *v131;
                  if (*v131)
                  {
                    unint64_t v788 = 0;
                    uint64_t v789 = 0;
                    uint64_t v790 = 0;
                    uint64_t v791 = 0;
                    uint64_t v792 = v130[19];
                    uint64_t v793 = v249[19];
                    uint64_t v794 = v129[19];
                    uint64_t v795 = (uint64_t *)v130[3];
                    uint64_t v796 = *v795;
                    uint64_t v797 = v795[1];
                    uint64_t v798 = (uint64_t *)v249[3];
                    uint64_t v799 = *v798;
                    uint64_t v800 = v798[1];
                    int v801 = v131[1];
                    int v802 = v801;
                    do
                    {
                      if (v802)
                      {
                        unint64_t v803 = 0;
                        uint64_t v804 = v795[2];
                        uint64_t v805 = v798[2];
                        int v806 = v131[2];
                        int v807 = v806;
                        do
                        {
                          if (v807)
                          {
                            unint64_t v808 = 0;
                            uint64_t v809 = v795[3];
                            uint64_t v810 = v798[3];
                            int v811 = v131[3];
                            do
                            {
                              if (v811)
                              {
                                for (iunint64_t i = 0; ii < v811; ++ii)
                                {
                                  *(_DWORD *)(v794 + 4 * v789 + 4 * ii) = (*(_DWORD *)(v793 + 4 * v790) | *(_DWORD *)(v792 + 4 * v791)) != 0;
                                  v791 += v809;
                                  v790 += v810;
                                  int v811 = v131[3];
                                }
                                uint64_t v813 = v811;
                                int v806 = v131[2];
                                v789 += ii;
                              }
                              else
                              {
                                uint64_t v813 = 0;
                              }
                              uint64_t v791 = v791 + v804 - v813 * v809;
                              uint64_t v790 = v790 + v805 - v810 * v250[3];
                              ++v808;
                            }
                            while (v808 < v806);
                            uint64_t v814 = v806;
                            int v801 = v131[1];
                            int v807 = v806;
                          }
                          else
                          {
                            uint64_t v814 = 0;
                          }
                          uint64_t v791 = v791 + v797 - v814 * v804;
                          uint64_t v790 = v790 + v800 - v805 * v250[2];
                          ++v803;
                        }
                        while (v803 < v801);
                        uint64_t v815 = v801;
                        int v787 = *v131;
                        int v802 = v801;
                      }
                      else
                      {
                        uint64_t v815 = 0;
                      }
                      uint64_t v791 = v791 + v796 - v815 * v797;
                      uint64_t v790 = v790 + v799 - v800 * v250[1];
                      ++v788;
                    }
                    while (v788 < v787);
                  }
                  break;
                default:
                  uint64_t v735 = v129[6];
                  if (v735)
                  {
                    uint64_t v736 = 0;
                    uint64_t v1907 = v249[19];
                    uint64_t v1936 = v130[19];
                    uint64_t v1893 = v129[19];
                    do
                    {
                      uint64_t v737 = 0;
                      if ((v133 & 0x80000000) == 0)
                      {
                        uint64_t v738 = v130[3];
                        uint64_t v739 = v133;
                        int v740 = v736;
                        do
                        {
                          ldiv_t v741 = ldiv(v740, v131[v739]);
                          int v740 = v741.quot;
                          v737 += *(void *)(v738 + 8 * v739--) * v741.rem;
                        }
                        while (v739 != -1);
                      }
                      uint64_t v742 = v1964;
                      if ((v1964 & 0x80000000) != 0)
                      {
                        LODWORD(v743) = 0;
                      }
                      else
                      {
                        uint64_t v743 = 0;
                        uint64_t v744 = v249[3];
                        int v745 = v736;
                        do
                        {
                          ldiv_t v746 = ldiv(v745, v250[v742]);
                          int v745 = v746.quot;
                          v743 += *(void *)(v744 + 8 * v742--) * v746.rem;
                        }
                        while (v742 != -1);
                      }
                      *(_DWORD *)(v1893 + 4 * v736++) = (*(_DWORD *)(v1907 + 4 * (int)v743) | *(_DWORD *)(v1936 + 4 * (int)v737)) != 0;
                      uint64_t v133 = v1982;
                    }
                    while (v736 != v735);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v24)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = (**(void **)(*a2 + 152) | **(void **)(*a1 + 152)) != 0;
          return;
        case 1:
          int v167 = *(_DWORD *)(*a2 + 160);
          if (v167 >= 1)
          {
            uint64_t v168 = **(void **)(*a1 + 152);
            v169 = *(void **)(*(void *)a3 + 152);
            v170 = *(uint64_t **)(*a2 + 152);
            unsigned int v171 = v167 + 1;
            do
            {
              uint64_t v172 = *v170++;
              *v169++ = (v172 | v168) != 0;
              --v171;
            }
            while (v171 > 1);
          }
          return;
        case 2:
          int v173 = *(_DWORD *)(*a1 + 160);
          if (v173 >= 1)
          {
            uint64_t v174 = **(void **)(*a2 + 152);
            int v175 = *(void **)(*(void *)a3 + 152);
            int v176 = *(uint64_t **)(*a1 + 152);
            unsigned int v177 = v173 + 1;
            do
            {
              uint64_t v178 = *v176++;
              *v175++ = (v178 | v174) != 0;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        case 3:
          int v179 = *(_DWORD *)(*(void *)a3 + 48);
          if (v179 >= 1)
          {
            v180 = *(void **)(*(void *)a3 + 152);
            int v181 = *(uint64_t **)(*a2 + 152);
            unsigned int v182 = *(uint64_t **)(*a1 + 152);
            unsigned int v183 = v179 + 1;
            do
            {
              uint64_t v185 = *v182++;
              uint64_t v184 = v185;
              uint64_t v186 = *v181++;
              *v180++ = (v186 | v184) != 0;
              --v183;
            }
            while (v183 > 1);
          }
          return;
        default:
          int v158 = *(void **)a3;
          v159 = (void *)*a1;
          v160 = *(int **)*a1;
          uint64_t v161 = (v159[1] - (void)v160) >> 2;
          uint64_t v162 = (v161 - 1);
          if ((int)v162 >= -1) {
            int v163 = -1;
          }
          else {
            int v163 = v161 - 1;
          }
          int v164 = v163 + 1;
          int v165 = v161 + 1;
          while (1)
          {
            unsigned int v166 = v165 - 2;
            if (v165 - 2 < 0) {
              break;
            }
            --v165;
            if (*(void *)(v159[3] + 8 * v166) != *(void *)(v158[3] + 8 * v166)) {
              goto LABEL_193;
            }
          }
          int v165 = v164;
LABEL_193:
          float v257 = (void *)*a2;
          unsigned int v258 = *(int **)*a2;
          uint64_t v259 = (v257[1] - (void)v258) >> 2;
          uint64_t v260 = (v259 - 1);
          if ((int)v260 >= -1) {
            int v261 = -1;
          }
          else {
            int v261 = v259 - 1;
          }
          int v262 = v261 + 1;
          int v263 = v259 + 1;
          while (1)
          {
            unsigned int v264 = v263 - 2;
            if (v263 - 2 < 0) {
              break;
            }
            --v263;
            if (*(void *)(v257[3] + 8 * v264) != *(void *)(v158[3] + 8 * v264)) {
              goto LABEL_234;
            }
          }
          int v263 = v262;
LABEL_234:
          int v283 = v161 + 1;
          while (1)
          {
            unsigned int v284 = v283 - 2;
            if (v283 - 2 < 0) {
              break;
            }
            --v283;
            if (*(void *)(v159[3] + 8 * v284)) {
              goto LABEL_269;
            }
          }
          int v283 = v164;
LABEL_269:
          int v297 = v259 + 1;
          while (1)
          {
            unsigned int v298 = v297 - 2;
            if (v297 - 2 < 0) {
              break;
            }
            --v297;
            if (*(void *)(v257[3] + 8 * v298)) {
              goto LABEL_458;
            }
          }
          int v297 = v262;
LABEL_458:
          unint64_t v401 = (uint64_t)(v158[1] - *v158) >> 2;
          if (v165 <= v263) {
            int v402 = v263;
          }
          else {
            int v402 = v165;
          }
          if (v165 <= v297) {
            int v165 = v297;
          }
          if (v283 > v263) {
            int v263 = v283;
          }
          if (v401 > v263)
          {
            int v403 = 1;
          }
          else
          {
            int v263 = (uint64_t)(v158[1] - *v158) >> 2;
            int v403 = 4;
          }
          if (v401 > v165)
          {
            int v404 = 2;
          }
          else
          {
            int v165 = v263;
            int v404 = v403;
          }
          if (v401 > v402)
          {
            int v165 = v402;
            int v404 = 3;
          }
          uint64_t v1965 = v260;
          uint64_t v1983 = v162;
          if (!v165) {
            goto LABEL_487;
          }
          unint64_t v405 = *(void *)(v158[3] + 8 * (v165 - 1));
          if (v405 < 0x10) {
            goto LABEL_487;
          }
          switch(v404)
          {
            case 1:
              if (v165 == 2)
              {
                uint64_t v1704 = *v160;
                if (v1704)
                {
                  uint64_t v1705 = 0;
                  uint64_t v1706 = 0;
                  uint64_t v1707 = 0;
                  uint64_t v1708 = v159[19];
                  uint64_t v1709 = v257[19];
                  uint64_t v1710 = v158[19];
                  unint64_t v1711 = v160[1];
                  int v1712 = (uint64_t *)v159[3];
                  uint64_t v1713 = *v1712;
                  uint64_t v1714 = v1712[1];
                  int v1715 = (uint64_t *)v257[3];
                  uint64_t v1716 = *v1715;
                  uint64_t v1717 = v1715[1];
                  if (v1711 <= 1) {
                    uint64_t v1718 = 1;
                  }
                  else {
                    uint64_t v1718 = v160[1];
                  }
                  uint64_t v1719 = v1713 - v1714 * v1711;
                  uint64_t v1720 = v1716 - v1717 * v258[1];
                  do
                  {
                    if (v1711)
                    {
                      uint64_t v1721 = 0;
                      uint64_t v1722 = v1709 + 8 * v1706;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          uint64_t v1723 = 0;
                          uint64_t v1724 = *(void *)(v1708 + 8 * v1707);
                          unsigned int v1725 = v405 + 1;
                          do
                          {
                            *(void *)(v1710 + v1723) = (*(void *)(v1722 + v1723) | v1724) != 0;
                            --v1725;
                            v1723 += 8;
                          }
                          while (v1725 > 1);
                        }
                        v1707 += v1714;
                        v1706 += v1717;
                        v1710 += 8 * (int)v405;
                        ++v1721;
                        v1722 += 8 * v1717;
                      }
                      while (v1721 != v1718);
                    }
                    v1707 += v1719;
                    v1706 += v1720;
                    ++v1705;
                  }
                  while (v1705 != v1704);
                }
              }
              else if (v165 == 1)
              {
                uint64_t v1086 = *v160;
                if (v1086)
                {
                  uint64_t v1087 = 0;
                  uint64_t v1088 = 0;
                  uint64_t v1089 = v159[19];
                  uint64_t v1090 = v257[19];
                  uint64_t v1091 = v158[19];
                  uint64_t v1092 = *(void *)v159[3];
                  uint64_t v1093 = 8 * *(void *)v257[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      uint64_t v1094 = 0;
                      uint64_t v1095 = *(void *)(v1089 + 8 * v1088);
                      unsigned int v1096 = v405 + 1;
                      do
                      {
                        *(void *)(v1091 + v1094) = (*(void *)(v1090 + v1094) | v1095) != 0;
                        --v1096;
                        v1094 += 8;
                      }
                      while (v1096 > 1);
                    }
                    v1088 += v1092;
                    ++v1087;
                    v1091 += 8 * (int)v405;
                    v1090 += v1093;
                  }
                  while (v1087 != v1086);
                }
              }
              else
              {
                unint64_t v1929 = v158[6];
                if (v1929)
                {
                  unint64_t v1958 = 0;
                  uint64_t v1860 = v257[19];
                  uint64_t v1875 = v159[19];
                  uint64_t v1726 = v158[19];
                  do
                  {
                    uint64_t v1727 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      uint64_t v1728 = v159[3];
                      uint64_t v1729 = v162;
                      int v1730 = v1958;
                      do
                      {
                        ldiv_t v1731 = ldiv(v1730, v160[v1729]);
                        int v1730 = v1731.quot;
                        v1727 += *(void *)(v1728 + 8 * v1729--) * v1731.rem;
                      }
                      while (v1729 != -1);
                    }
                    uint64_t v1732 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1733) = 0;
                    }
                    else
                    {
                      uint64_t v1733 = 0;
                      uint64_t v1734 = v257[3];
                      int v1735 = v1958;
                      do
                      {
                        ldiv_t v1736 = ldiv(v1735, v258[v1732]);
                        int v1735 = v1736.quot;
                        v1733 += *(void *)(v1734 + 8 * v1732--) * v1736.rem;
                      }
                      while (v1732 != -1);
                    }
                    uint64_t v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      uint64_t v1737 = 0;
                      uint64_t v1738 = *(void *)(v1875 + 8 * (int)v1727);
                      unsigned int v1739 = v405 + 1;
                      do
                      {
                        *(void *)(v1726 + v1737) = (*(void *)(v1860 + 8 * (int)v1733 + v1737) | v1738) != 0;
                        --v1739;
                        v1737 += 8;
                      }
                      while (v1739 > 1);
                    }
                    v1726 += 8 * (int)v405;
                    v1958 += (int)v405;
                  }
                  while (v1958 < v1929);
                }
              }
              break;
            case 2:
              if (v165 == 2)
              {
                uint64_t v1740 = *v160;
                if (v1740)
                {
                  uint64_t v1741 = 0;
                  uint64_t v1742 = 0;
                  uint64_t v1743 = 0;
                  uint64_t v1744 = v159[19];
                  uint64_t v1745 = v257[19];
                  uint64_t v1746 = v158[19];
                  unint64_t v1747 = v160[1];
                  unint64_t v1748 = (uint64_t *)v159[3];
                  uint64_t v1749 = *v1748;
                  uint64_t v1750 = v1748[1];
                  int v1751 = (uint64_t *)v257[3];
                  uint64_t v1752 = *v1751;
                  uint64_t v1753 = v1751[1];
                  if (v1747 <= 1) {
                    uint64_t v1754 = 1;
                  }
                  else {
                    uint64_t v1754 = v160[1];
                  }
                  uint64_t v1755 = v1749 - v1750 * v1747;
                  uint64_t v1756 = v1752 - v1753 * v258[1];
                  do
                  {
                    if (v1747)
                    {
                      uint64_t v1757 = 0;
                      uint64_t v1758 = v1744 + 8 * v1743;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          uint64_t v1759 = 0;
                          uint64_t v1760 = *(void *)(v1745 + 8 * v1742);
                          unsigned int v1761 = v405 + 1;
                          do
                          {
                            *(void *)(v1746 + v1759) = (*(void *)(v1758 + v1759) | v1760) != 0;
                            --v1761;
                            v1759 += 8;
                          }
                          while (v1761 > 1);
                        }
                        v1743 += v1750;
                        v1742 += v1753;
                        v1746 += 8 * (int)v405;
                        ++v1757;
                        v1758 += 8 * v1750;
                      }
                      while (v1757 != v1754);
                    }
                    v1743 += v1755;
                    v1742 += v1756;
                    ++v1741;
                  }
                  while (v1741 != v1740);
                }
              }
              else if (v165 == 1)
              {
                uint64_t v1097 = *v160;
                if (v1097)
                {
                  uint64_t v1098 = 0;
                  uint64_t v1099 = 0;
                  uint64_t v1100 = v159[19];
                  uint64_t v1101 = v257[19];
                  uint64_t v1102 = v158[19];
                  uint64_t v1103 = *(void *)v257[3];
                  uint64_t v1104 = 8 * *(void *)v159[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      uint64_t v1105 = 0;
                      uint64_t v1106 = *(void *)(v1101 + 8 * v1099);
                      unsigned int v1107 = v405 + 1;
                      do
                      {
                        *(void *)(v1102 + v1105) = (*(void *)(v1100 + v1105) | v1106) != 0;
                        --v1107;
                        v1105 += 8;
                      }
                      while (v1107 > 1);
                    }
                    v1099 += v1103;
                    ++v1098;
                    v1102 += 8 * (int)v405;
                    v1100 += v1104;
                  }
                  while (v1098 != v1097);
                }
              }
              else
              {
                unint64_t v1930 = v158[6];
                if (v1930)
                {
                  unint64_t v1959 = 0;
                  uint64_t v1861 = v257[19];
                  uint64_t v1876 = v159[19];
                  uint64_t v1762 = v158[19];
                  do
                  {
                    uint64_t v1763 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      uint64_t v1764 = v159[3];
                      uint64_t v1765 = v162;
                      int v1766 = v1959;
                      do
                      {
                        ldiv_t v1767 = ldiv(v1766, v160[v1765]);
                        int v1766 = v1767.quot;
                        v1763 += *(void *)(v1764 + 8 * v1765--) * v1767.rem;
                      }
                      while (v1765 != -1);
                    }
                    uint64_t v1768 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1769) = 0;
                    }
                    else
                    {
                      uint64_t v1769 = 0;
                      uint64_t v1770 = v257[3];
                      int v1771 = v1959;
                      do
                      {
                        ldiv_t v1772 = ldiv(v1771, v258[v1768]);
                        int v1771 = v1772.quot;
                        v1769 += *(void *)(v1770 + 8 * v1768--) * v1772.rem;
                      }
                      while (v1768 != -1);
                    }
                    uint64_t v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      uint64_t v1773 = 0;
                      uint64_t v1774 = *(void *)(v1861 + 8 * (int)v1769);
                      unsigned int v1775 = v405 + 1;
                      do
                      {
                        *(void *)(v1762 + v1773) = (*(void *)(v1876 + 8 * (int)v1763 + v1773) | v1774) != 0;
                        --v1775;
                        v1773 += 8;
                      }
                      while (v1775 > 1);
                    }
                    v1762 += 8 * (int)v405;
                    v1959 += (int)v405;
                  }
                  while (v1959 < v1930);
                }
              }
              break;
            case 3:
              if (v165 == 2)
              {
                uint64_t v1294 = *v160;
                if (v1294)
                {
                  uint64_t v1295 = 0;
                  uint64_t v1296 = 0;
                  uint64_t v1297 = 0;
                  uint64_t v1298 = v159[19];
                  uint64_t v1299 = v257[19];
                  uint64_t v1300 = v158[19];
                  unint64_t v1301 = v160[1];
                  uint64_t v1302 = (uint64_t *)v159[3];
                  uint64_t v1303 = *v1302;
                  uint64_t v1304 = v1302[1];
                  uint64_t v1305 = (uint64_t *)v257[3];
                  uint64_t v1306 = *v1305;
                  uint64_t v1307 = v1305[1];
                  if (v1301 <= 1) {
                    uint64_t v1308 = 1;
                  }
                  else {
                    uint64_t v1308 = v160[1];
                  }
                  uint64_t v1309 = v1303 - v1304 * v1301;
                  uint64_t v1310 = v1306 - v1307 * v258[1];
                  do
                  {
                    if (v1301)
                    {
                      uint64_t v1311 = 0;
                      uint64_t v1312 = v1299 + 8 * v1296;
                      uint64_t v1313 = v1298 + 8 * v1297;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          uint64_t v1314 = 0;
                          unsigned int v1315 = v405 + 1;
                          do
                          {
                            *(void *)(v1300 + v1314) = (*(void *)(v1312 + v1314) | *(void *)(v1313 + v1314)) != 0;
                            --v1315;
                            v1314 += 8;
                          }
                          while (v1315 > 1);
                        }
                        v1297 += v1304;
                        v1296 += v1307;
                        v1300 += 8 * (int)v405;
                        ++v1311;
                        v1312 += 8 * v1307;
                        v1313 += 8 * v1304;
                      }
                      while (v1311 != v1308);
                    }
                    v1297 += v1309;
                    v1296 += v1310;
                    ++v1295;
                  }
                  while (v1295 != v1294);
                }
              }
              else if (v165 == 1)
              {
                uint64_t v406 = *v160;
                if (v406)
                {
                  uint64_t v407 = 0;
                  uint64_t v408 = v159[19];
                  uint64_t v409 = v257[19];
                  uint64_t v410 = v158[19];
                  uint64_t v411 = 8 * *(void *)v257[3];
                  uint64_t v412 = 8 * *(void *)v159[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      uint64_t v413 = 0;
                      unsigned int v414 = v405 + 1;
                      do
                      {
                        *(void *)(v410 + v413) = (*(void *)(v409 + v413) | *(void *)(v408 + v413)) != 0;
                        --v414;
                        v413 += 8;
                      }
                      while (v414 > 1);
                    }
                    ++v407;
                    v410 += 8 * (int)v405;
                    v409 += v411;
                    v408 += v412;
                  }
                  while (v407 != v406);
                }
              }
              else
              {
                unint64_t v1917 = v158[6];
                if (v1917)
                {
                  unint64_t v1946 = 0;
                  uint64_t v1854 = v257[19];
                  uint64_t v1867 = v159[19];
                  uint64_t v1316 = v158[19];
                  do
                  {
                    uint64_t v1317 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      uint64_t v1318 = v159[3];
                      uint64_t v1319 = v162;
                      int v1320 = v1946;
                      do
                      {
                        ldiv_t v1321 = ldiv(v1320, v160[v1319]);
                        int v1320 = v1321.quot;
                        v1317 += *(void *)(v1318 + 8 * v1319--) * v1321.rem;
                      }
                      while (v1319 != -1);
                    }
                    uint64_t v1322 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1323) = 0;
                    }
                    else
                    {
                      uint64_t v1323 = 0;
                      uint64_t v1324 = v257[3];
                      int v1325 = v1946;
                      do
                      {
                        ldiv_t v1326 = ldiv(v1325, v258[v1322]);
                        int v1325 = v1326.quot;
                        v1323 += *(void *)(v1324 + 8 * v1322--) * v1326.rem;
                      }
                      while (v1322 != -1);
                    }
                    uint64_t v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      uint64_t v1327 = 0;
                      unsigned int v1328 = v405 + 1;
                      do
                      {
                        *(void *)(v1316 + v1327) = (*(void *)(v1854 + 8 * (int)v1323 + v1327) | *(void *)(v1867 + 8 * (int)v1317 + v1327)) != 0;
                        --v1328;
                        v1327 += 8;
                      }
                      while (v1328 > 1);
                    }
                    v1316 += 8 * (int)v405;
                    v1946 += (int)v405;
                  }
                  while (v1946 < v1917);
                }
              }
              break;
            default:
LABEL_487:
              switch(v401)
              {
                case 1uLL:
                  uint64_t v415 = v158[6];
                  if (v415)
                  {
                    uint64_t v416 = (void *)v159[19];
                    uint64_t v417 = (void *)v257[19];
                    uint64_t v418 = (void *)v158[19];
                    uint64_t v419 = 8 * *(void *)v257[3];
                    uint64_t v420 = 8 * *(void *)v159[3];
                    do
                    {
                      *v418++ = (*v417 | *v416) != 0;
                      uint64_t v417 = (void *)((char *)v417 + v419);
                      uint64_t v416 = (void *)((char *)v416 + v420);
                      --v415;
                    }
                    while (v415);
                  }
                  break;
                case 2uLL:
                  uint64_t v828 = *v160;
                  if (v828)
                  {
                    uint64_t v829 = 0;
                    uint64_t v830 = 0;
                    uint64_t v831 = 0;
                    uint64_t v832 = 0;
                    uint64_t v833 = v159[19];
                    uint64_t v834 = v257[19];
                    uint64_t v835 = v158[19];
                    unint64_t v836 = v160[1];
                    unint64_t v837 = (uint64_t *)v159[3];
                    uint64_t v838 = *v837;
                    uint64_t v839 = v837[1];
                    char v840 = (uint64_t *)v257[3];
                    uint64_t v841 = *v840;
                    uint64_t v842 = v840[1];
                    uint64_t v843 = v841 - v842 * v258[1];
                    if (v836 <= 1) {
                      uint64_t v844 = 1;
                    }
                    else {
                      uint64_t v844 = v160[1];
                    }
                    uint64_t v845 = v838 - v839 * v836;
                    do
                    {
                      if (v836)
                      {
                        uint64_t v846 = v830 + v844;
                        unint64_t v847 = (void *)(v835 + 8 * v830);
                        uint64_t v848 = v844;
                        do
                        {
                          *v847++ = (*(void *)(v834 + 8 * v831) | *(void *)(v833 + 8 * v832)) != 0;
                          v832 += v839;
                          v831 += v842;
                          --v848;
                        }
                        while (v848);
                        uint64_t v830 = v846;
                      }
                      v832 += v845;
                      v831 += v843;
                      ++v829;
                    }
                    while (v829 != v828);
                  }
                  break;
                case 3uLL:
                  uint64_t v849 = *v160;
                  if (v849)
                  {
                    uint64_t v850 = 0;
                    uint64_t v851 = 0;
                    uint64_t v852 = 0;
                    uint64_t v853 = 0;
                    uint64_t v854 = v159[19];
                    uint64_t v855 = v257[19];
                    uint64_t v856 = v158[19];
                    unint64_t v857 = v160[1];
                    uint64_t v858 = (void *)v159[3];
                    uint64_t v859 = v858[1];
                    ldiv_t v860 = (void *)v257[3];
                    uint64_t v861 = v860[1];
                    uint64_t v862 = *v860 - v861 * v258[1];
                    if (v857 <= 1) {
                      uint64_t v863 = 1;
                    }
                    else {
                      uint64_t v863 = v160[1];
                    }
                    unint64_t v864 = *v858 - v859 * v857;
                    do
                    {
                      if (v857)
                      {
                        uint64_t v865 = 0;
                        unint64_t v866 = v160[2];
                        uint64_t v867 = v858[2];
                        uint64_t v868 = v860[2];
                        if (v866 <= 1) {
                          uint64_t v869 = 1;
                        }
                        else {
                          uint64_t v869 = v160[2];
                        }
                        uint64_t v870 = v861 - v868 * v258[2];
                        do
                        {
                          uint64_t v871 = v869;
                          if (v866)
                          {
                            do
                            {
                              *(void *)(v856 + 8 * v851++) = (*(void *)(v855 + 8 * v852) | *(void *)(v854 + 8 * v853)) != 0;
                              v853 += v867;
                              v852 += v868;
                              --v871;
                            }
                            while (v871);
                          }
                          v853 += v859 - v867 * v866;
                          v852 += v870;
                          ++v865;
                        }
                        while (v865 != v863);
                      }
                      v853 += v864;
                      v852 += v862;
                      ++v850;
                    }
                    while (v850 != v849);
                  }
                  break;
                case 4uLL:
                  uint64_t v1988 = *v160;
                  if (v1988)
                  {
                    uint64_t v872 = 0;
                    uint64_t v873 = 0;
                    uint64_t v874 = 0;
                    uint64_t v875 = 0;
                    uint64_t v876 = v159[19];
                    uint64_t v877 = v257[19];
                    uint64_t v878 = v158[19];
                    unint64_t v879 = v160[1];
                    int v880 = (void *)v159[3];
                    uint64_t v881 = (void *)v257[3];
                    uint64_t v1880 = v881[1];
                    uint64_t v1895 = v880[1];
                    uint64_t v1938 = *v881 - v1880 * v258[1];
                    int v1970 = v160[1];
                    if (v879 <= 1) {
                      uint64_t v882 = 1;
                    }
                    else {
                      uint64_t v882 = v160[1];
                    }
                    unint64_t v1909 = *v880 - v880[1] * v879;
                    do
                    {
                      if (v1970)
                      {
                        uint64_t v883 = 0;
                        unint64_t v884 = v160[2];
                        uint64_t v885 = v880[2];
                        uint64_t v886 = v881[2];
                        if (v884 <= 1) {
                          uint64_t v887 = 1;
                        }
                        else {
                          uint64_t v887 = v160[2];
                        }
                        uint64_t v888 = v1880 - v886 * v258[2];
                        do
                        {
                          if (v884)
                          {
                            uint64_t v889 = 0;
                            unint64_t v890 = v160[3];
                            uint64_t v891 = v880[3];
                            uint64_t v892 = v881[3];
                            if (v890 <= 1) {
                              uint64_t v893 = 1;
                            }
                            else {
                              uint64_t v893 = v160[3];
                            }
                            uint64_t v894 = v886 - v892 * v258[3];
                            do
                            {
                              uint64_t v895 = v893;
                              if (v890)
                              {
                                do
                                {
                                  *(void *)(v878 + 8 * v873++) = (*(void *)(v877 + 8 * v874) | *(void *)(v876 + 8 * v875)) != 0;
                                  v875 += v891;
                                  v874 += v892;
                                  --v895;
                                }
                                while (v895);
                              }
                              v875 += v885 - v891 * v890;
                              v874 += v894;
                              ++v889;
                            }
                            while (v889 != v887);
                          }
                          v875 += v1895 - v885 * v884;
                          v874 += v888;
                          ++v883;
                        }
                        while (v883 != v882);
                      }
                      v875 += v1909;
                      v874 += v1938;
                      ++v872;
                    }
                    while (v872 != v1988);
                  }
                  break;
                default:
                  uint64_t v816 = v158[6];
                  if (v816)
                  {
                    uint64_t v817 = 0;
                    uint64_t v1908 = v257[19];
                    uint64_t v1937 = v159[19];
                    uint64_t v1894 = v158[19];
                    do
                    {
                      uint64_t v818 = 0;
                      if ((v162 & 0x80000000) == 0)
                      {
                        uint64_t v819 = v159[3];
                        uint64_t v820 = v162;
                        int v821 = v817;
                        do
                        {
                          ldiv_t v822 = ldiv(v821, v160[v820]);
                          int v821 = v822.quot;
                          v818 += *(void *)(v819 + 8 * v820--) * v822.rem;
                        }
                        while (v820 != -1);
                      }
                      uint64_t v823 = v1965;
                      if ((v1965 & 0x80000000) != 0)
                      {
                        LODWORD(v824) = 0;
                      }
                      else
                      {
                        uint64_t v824 = 0;
                        uint64_t v825 = v257[3];
                        int v826 = v817;
                        do
                        {
                          ldiv_t v827 = ldiv(v826, v258[v823]);
                          int v826 = v827.quot;
                          v824 += *(void *)(v825 + 8 * v823--) * v827.rem;
                        }
                        while (v823 != -1);
                      }
                      *(void *)(v1894 + 8 * v817++) = (*(void *)(v1908 + 8 * (int)v824) | *(void *)(v1937 + 8 * (int)v818)) != 0;
                      uint64_t v162 = v1983;
                    }
                    while (v817 != v816);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          BOOL v26 = **(float **)(*a1 + 152) != 0.0;
          if (**(float **)(*a2 + 152) != 0.0) {
            BOOL v26 = 1;
          }
          **(float **)(*(void *)a3 + 152) = (float)v26;
          return;
        case 1:
          int v196 = *(_DWORD *)(*a2 + 160);
          if (v196 >= 1)
          {
            v197 = *(float **)(*(void *)a3 + 152);
            v198 = *(float **)(*a2 + 152);
            float v199 = **(float **)(*a1 + 152);
            unsigned int v200 = v196 + 1;
            do
            {
              BOOL v201 = v199 != 0.0;
              float v202 = *v198++;
              if (v202 != 0.0) {
                BOOL v201 = 1;
              }
              *v197++ = (float)v201;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        case 2:
          int v203 = *(_DWORD *)(*a1 + 160);
          if (v203 >= 1)
          {
            int v204 = *(float **)(*(void *)a3 + 152);
            BOOL v205 = *(float **)(*a1 + 152);
            float v206 = **(float **)(*a2 + 152);
            unsigned int v207 = v203 + 1;
            do
            {
              BOOL v208 = v206 != 0.0;
              float v209 = *v205++;
              if (v209 != 0.0) {
                BOOL v208 = 1;
              }
              *v204++ = (float)v208;
              --v207;
            }
            while (v207 > 1);
          }
          return;
        case 3:
          int v210 = *(_DWORD *)(*(void *)a3 + 48);
          if (v210 >= 1)
          {
            uint64_t v211 = *(float **)(*(void *)a3 + 152);
            int v212 = *(float **)(*a2 + 152);
            int v213 = *(float **)(*a1 + 152);
            unsigned int v214 = v210 + 1;
            do
            {
              float v215 = *v213++;
              float v216 = v215;
              float v217 = *v212++;
              BOOL v218 = v216 != 0.0;
              if (v217 != 0.0) {
                BOOL v218 = 1;
              }
              *v211++ = (float)v218;
              --v214;
            }
            while (v214 > 1);
          }
          return;
        default:
          int v187 = *(void **)a3;
          v188 = (void *)*a1;
          v189 = *(int **)*a1;
          uint64_t v190 = (v188[1] - (void)v189) >> 2;
          uint64_t v191 = (v190 - 1);
          if ((int)v191 >= -1) {
            int v192 = -1;
          }
          else {
            int v192 = v190 - 1;
          }
          int v193 = v192 + 1;
          int v194 = v190 + 1;
          while (1)
          {
            unsigned int v195 = v194 - 2;
            if (v194 - 2 < 0) {
              break;
            }
            --v194;
            if (*(void *)(v188[3] + 8 * v195) != *(void *)(v187[3] + 8 * v195)) {
              goto LABEL_201;
            }
          }
          int v194 = v193;
LABEL_201:
          unsigned int v265 = (void *)*a2;
          BOOL v266 = *(int **)*a2;
          uint64_t v267 = (v265[1] - (void)v266) >> 2;
          uint64_t v268 = (v267 - 1);
          if ((int)v268 >= -1) {
            int v269 = -1;
          }
          else {
            int v269 = v267 - 1;
          }
          int v270 = v269 + 1;
          int v271 = v267 + 1;
          while (1)
          {
            unsigned int v272 = v271 - 2;
            if (v271 - 2 < 0) {
              break;
            }
            --v271;
            if (*(void *)(v265[3] + 8 * v272) != *(void *)(v187[3] + 8 * v272)) {
              goto LABEL_239;
            }
          }
          int v271 = v270;
LABEL_239:
          int v285 = v190 + 1;
          while (1)
          {
            unsigned int v286 = v285 - 2;
            if (v285 - 2 < 0) {
              break;
            }
            --v285;
            if (*(void *)(v188[3] + 8 * v286)) {
              goto LABEL_274;
            }
          }
          int v285 = v193;
LABEL_274:
          int v299 = v267 + 1;
          while (1)
          {
            unsigned int v300 = v299 - 2;
            if (v299 - 2 < 0) {
              break;
            }
            --v299;
            if (*(void *)(v265[3] + 8 * v300)) {
              goto LABEL_493;
            }
          }
          int v299 = v270;
LABEL_493:
          unint64_t v421 = (uint64_t)(v187[1] - *v187) >> 2;
          if (v194 <= v271) {
            int v422 = v271;
          }
          else {
            int v422 = v194;
          }
          if (v194 <= v299) {
            int v194 = v299;
          }
          if (v285 > v271) {
            int v271 = v285;
          }
          if (v421 > v271)
          {
            int v423 = 1;
          }
          else
          {
            int v271 = (uint64_t)(v187[1] - *v187) >> 2;
            int v423 = 4;
          }
          if (v421 > v194)
          {
            int v424 = 2;
          }
          else
          {
            int v194 = v271;
            int v424 = v423;
          }
          if (v421 > v422)
          {
            int v194 = v422;
            int v424 = 3;
          }
          uint64_t v1966 = v268;
          uint64_t v1984 = v191;
          if (!v194) {
            goto LABEL_524;
          }
          unint64_t v425 = *(void *)(v187[3] + 8 * (v194 - 1));
          if (v425 < 0x10) {
            goto LABEL_524;
          }
          switch(v424)
          {
            case 1:
              if (v194 == 2)
              {
                uint64_t v1776 = *v189;
                if (v1776)
                {
                  uint64_t v1777 = 0;
                  uint64_t v1778 = 0;
                  uint64_t v1779 = 0;
                  uint64_t v1780 = v188[19];
                  uint64_t v1781 = v265[19];
                  uint64_t v1782 = v187[19];
                  unint64_t v1783 = v189[1];
                  char v1784 = (uint64_t *)v188[3];
                  uint64_t v1785 = *v1784;
                  uint64_t v1786 = v1784[1];
                  unint64_t v1787 = (uint64_t *)v265[3];
                  uint64_t v1788 = *v1787;
                  uint64_t v1789 = v1787[1];
                  if (v1783 <= 1) {
                    uint64_t v1790 = 1;
                  }
                  else {
                    uint64_t v1790 = v189[1];
                  }
                  uint64_t v1791 = v1785 - v1786 * v1783;
                  uint64_t v1792 = v1788 - v1789 * v266[1];
                  do
                  {
                    if (v1783)
                    {
                      uint64_t v1793 = 0;
                      uint64_t v1794 = v1781 + 4 * v1778;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          uint64_t v1795 = 0;
                          float v1796 = *(float *)(v1780 + 4 * v1779);
                          unsigned int v1797 = v425 + 1;
                          do
                          {
                            BOOL v1798 = v1796 != 0.0;
                            if (*(float *)(v1794 + v1795) != 0.0) {
                              BOOL v1798 = 1;
                            }
                            *(float *)(v1782 + v1795) = (float)v1798;
                            --v1797;
                            v1795 += 4;
                          }
                          while (v1797 > 1);
                        }
                        v1779 += v1786;
                        v1778 += v1789;
                        v1782 += 4 * (int)v425;
                        ++v1793;
                        v1794 += 4 * v1789;
                      }
                      while (v1793 != v1790);
                    }
                    v1779 += v1791;
                    v1778 += v1792;
                    ++v1777;
                  }
                  while (v1777 != v1776);
                }
              }
              else if (v194 == 1)
              {
                uint64_t v1108 = *v189;
                if (v1108)
                {
                  uint64_t v1109 = 0;
                  uint64_t v1110 = 0;
                  uint64_t v1111 = v188[19];
                  uint64_t v1112 = v265[19];
                  uint64_t v1113 = v187[19];
                  uint64_t v1114 = *(void *)v188[3];
                  uint64_t v1115 = 4 * *(void *)v265[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      uint64_t v1116 = 0;
                      float v1117 = *(float *)(v1111 + 4 * v1110);
                      unsigned int v1118 = v425 + 1;
                      do
                      {
                        BOOL v1119 = v1117 != 0.0;
                        if (*(float *)(v1112 + v1116) != 0.0) {
                          BOOL v1119 = 1;
                        }
                        *(float *)(v1113 + v1116) = (float)v1119;
                        --v1118;
                        v1116 += 4;
                      }
                      while (v1118 > 1);
                    }
                    v1110 += v1114;
                    ++v1109;
                    v1113 += 4 * (int)v425;
                    v1112 += v1115;
                  }
                  while (v1109 != v1108);
                }
              }
              else
              {
                unint64_t v1931 = v187[6];
                if (v1931)
                {
                  unint64_t v1960 = 0;
                  uint64_t v1862 = v265[19];
                  uint64_t v1877 = v188[19];
                  uint64_t v1799 = v187[19];
                  do
                  {
                    uint64_t v1800 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      uint64_t v1801 = v188[3];
                      uint64_t v1802 = v191;
                      int v1803 = v1960;
                      do
                      {
                        ldiv_t v1804 = ldiv(v1803, v189[v1802]);
                        int v1803 = v1804.quot;
                        v1800 += *(void *)(v1801 + 8 * v1802--) * v1804.rem;
                      }
                      while (v1802 != -1);
                    }
                    uint64_t v1805 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1806) = 0;
                    }
                    else
                    {
                      uint64_t v1806 = 0;
                      uint64_t v1807 = v265[3];
                      int v1808 = v1960;
                      do
                      {
                        ldiv_t v1809 = ldiv(v1808, v266[v1805]);
                        int v1808 = v1809.quot;
                        v1806 += *(void *)(v1807 + 8 * v1805--) * v1809.rem;
                      }
                      while (v1805 != -1);
                    }
                    uint64_t v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      uint64_t v1810 = 0;
                      float v1811 = *(float *)(v1877 + 4 * (int)v1800);
                      unsigned int v1812 = v425 + 1;
                      do
                      {
                        BOOL v1813 = v1811 != 0.0;
                        if (*(float *)(v1862 + 4 * (int)v1806 + v1810) != 0.0) {
                          BOOL v1813 = 1;
                        }
                        *(float *)(v1799 + v1810) = (float)v1813;
                        --v1812;
                        v1810 += 4;
                      }
                      while (v1812 > 1);
                    }
                    v1799 += 4 * (int)v425;
                    v1960 += (int)v425;
                  }
                  while (v1960 < v1931);
                }
              }
              break;
            case 2:
              if (v194 == 2)
              {
                uint64_t v1814 = *v189;
                if (v1814)
                {
                  uint64_t v1815 = 0;
                  uint64_t v1816 = 0;
                  uint64_t v1817 = 0;
                  uint64_t v1818 = v188[19];
                  uint64_t v1819 = v265[19];
                  uint64_t v1820 = v187[19];
                  unint64_t v1821 = v189[1];
                  uint64_t v1822 = (uint64_t *)v188[3];
                  uint64_t v1823 = *v1822;
                  uint64_t v1824 = v1822[1];
                  uint64_t v1825 = (uint64_t *)v265[3];
                  uint64_t v1826 = *v1825;
                  uint64_t v1827 = v1825[1];
                  if (v1821 <= 1) {
                    uint64_t v1828 = 1;
                  }
                  else {
                    uint64_t v1828 = v189[1];
                  }
                  uint64_t v1829 = v1823 - v1824 * v1821;
                  uint64_t v1830 = v1826 - v1827 * v266[1];
                  do
                  {
                    if (v1821)
                    {
                      uint64_t v1831 = 0;
                      uint64_t v1832 = v1818 + 4 * v1817;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          uint64_t v1833 = 0;
                          float v1834 = *(float *)(v1819 + 4 * v1816);
                          unsigned int v1835 = v425 + 1;
                          do
                          {
                            BOOL v1836 = v1834 != 0.0;
                            if (*(float *)(v1832 + v1833) != 0.0) {
                              BOOL v1836 = 1;
                            }
                            *(float *)(v1820 + v1833) = (float)v1836;
                            --v1835;
                            v1833 += 4;
                          }
                          while (v1835 > 1);
                        }
                        v1817 += v1824;
                        v1816 += v1827;
                        v1820 += 4 * (int)v425;
                        ++v1831;
                        v1832 += 4 * v1824;
                      }
                      while (v1831 != v1828);
                    }
                    v1817 += v1829;
                    v1816 += v1830;
                    ++v1815;
                  }
                  while (v1815 != v1814);
                }
              }
              else if (v194 == 1)
              {
                uint64_t v1120 = *v189;
                if (v1120)
                {
                  uint64_t v1121 = 0;
                  uint64_t v1122 = 0;
                  uint64_t v1123 = v188[19];
                  uint64_t v1124 = v265[19];
                  uint64_t v1125 = v187[19];
                  uint64_t v1126 = *(void *)v265[3];
                  uint64_t v1127 = 4 * *(void *)v188[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      uint64_t v1128 = 0;
                      float v1129 = *(float *)(v1124 + 4 * v1122);
                      unsigned int v1130 = v425 + 1;
                      do
                      {
                        BOOL v1131 = v1129 != 0.0;
                        if (*(float *)(v1123 + v1128) != 0.0) {
                          BOOL v1131 = 1;
                        }
                        *(float *)(v1125 + v1128) = (float)v1131;
                        --v1130;
                        v1128 += 4;
                      }
                      while (v1130 > 1);
                    }
                    v1122 += v1126;
                    ++v1121;
                    v1125 += 4 * (int)v425;
                    v1123 += v1127;
                  }
                  while (v1121 != v1120);
                }
              }
              else
              {
                unint64_t v1932 = v187[6];
                if (v1932)
                {
                  unint64_t v1961 = 0;
                  uint64_t v1863 = v265[19];
                  uint64_t v1878 = v188[19];
                  uint64_t v1837 = v187[19];
                  do
                  {
                    uint64_t v1838 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      uint64_t v1839 = v188[3];
                      uint64_t v1840 = v191;
                      int v1841 = v1961;
                      do
                      {
                        ldiv_t v1842 = ldiv(v1841, v189[v1840]);
                        int v1841 = v1842.quot;
                        v1838 += *(void *)(v1839 + 8 * v1840--) * v1842.rem;
                      }
                      while (v1840 != -1);
                    }
                    uint64_t v1843 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1844) = 0;
                    }
                    else
                    {
                      uint64_t v1844 = 0;
                      uint64_t v1845 = v265[3];
                      int v1846 = v1961;
                      do
                      {
                        ldiv_t v1847 = ldiv(v1846, v266[v1843]);
                        int v1846 = v1847.quot;
                        v1844 += *(void *)(v1845 + 8 * v1843--) * v1847.rem;
                      }
                      while (v1843 != -1);
                    }
                    uint64_t v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      uint64_t v1848 = 0;
                      float v1849 = *(float *)(v1863 + 4 * (int)v1844);
                      unsigned int v1850 = v425 + 1;
                      do
                      {
                        BOOL v1851 = v1849 != 0.0;
                        if (*(float *)(v1878 + 4 * (int)v1838 + v1848) != 0.0) {
                          BOOL v1851 = 1;
                        }
                        *(float *)(v1837 + v1848) = (float)v1851;
                        --v1850;
                        v1848 += 4;
                      }
                      while (v1850 > 1);
                    }
                    v1837 += 4 * (int)v425;
                    v1961 += (int)v425;
                  }
                  while (v1961 < v1932);
                }
              }
              break;
            case 3:
              if (v194 == 2)
              {
                uint64_t v1329 = *v189;
                if (v1329)
                {
                  uint64_t v1330 = 0;
                  uint64_t v1331 = 0;
                  uint64_t v1332 = 0;
                  uint64_t v1333 = v188[19];
                  uint64_t v1334 = v265[19];
                  uint64_t v1335 = v187[19];
                  unint64_t v1336 = v189[1];
                  uint64_t v1337 = (uint64_t *)v188[3];
                  uint64_t v1338 = *v1337;
                  uint64_t v1339 = v1337[1];
                  uint64_t v1340 = (uint64_t *)v265[3];
                  uint64_t v1341 = *v1340;
                  uint64_t v1342 = v1340[1];
                  if (v1336 <= 1) {
                    uint64_t v1343 = 1;
                  }
                  else {
                    uint64_t v1343 = v189[1];
                  }
                  uint64_t v1344 = v1338 - v1339 * v1336;
                  uint64_t v1345 = v1341 - v1342 * v266[1];
                  do
                  {
                    if (v1336)
                    {
                      uint64_t v1346 = 0;
                      uint64_t v1347 = v1334 + 4 * v1331;
                      uint64_t v1348 = v1333 + 4 * v1332;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          uint64_t v1349 = 0;
                          unsigned int v1350 = v425 + 1;
                          do
                          {
                            BOOL v1351 = *(float *)(v1348 + v1349) != 0.0;
                            if (*(float *)(v1347 + v1349) != 0.0) {
                              BOOL v1351 = 1;
                            }
                            *(float *)(v1335 + v1349) = (float)v1351;
                            --v1350;
                            v1349 += 4;
                          }
                          while (v1350 > 1);
                        }
                        v1332 += v1339;
                        v1331 += v1342;
                        v1335 += 4 * (int)v425;
                        ++v1346;
                        v1347 += 4 * v1342;
                        v1348 += 4 * v1339;
                      }
                      while (v1346 != v1343);
                    }
                    v1332 += v1344;
                    v1331 += v1345;
                    ++v1330;
                  }
                  while (v1330 != v1329);
                }
              }
              else if (v194 == 1)
              {
                uint64_t v426 = *v189;
                if (v426)
                {
                  uint64_t v427 = 0;
                  uint64_t v428 = v188[19];
                  uint64_t v429 = v265[19];
                  uint64_t v430 = v187[19];
                  uint64_t v431 = 4 * *(void *)v265[3];
                  uint64_t v432 = 4 * *(void *)v188[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      uint64_t v433 = 0;
                      unsigned int v434 = v425 + 1;
                      do
                      {
                        BOOL v435 = *(float *)(v428 + v433) != 0.0;
                        if (*(float *)(v429 + v433) != 0.0) {
                          BOOL v435 = 1;
                        }
                        *(float *)(v430 + v433) = (float)v435;
                        --v434;
                        v433 += 4;
                      }
                      while (v434 > 1);
                    }
                    ++v427;
                    v430 += 4 * (int)v425;
                    v429 += v431;
                    v428 += v432;
                  }
                  while (v427 != v426);
                }
              }
              else
              {
                unint64_t v1918 = v187[6];
                if (v1918)
                {
                  unint64_t v1947 = 0;
                  uint64_t v1855 = v265[19];
                  uint64_t v1868 = v188[19];
                  uint64_t v1352 = v187[19];
                  do
                  {
                    uint64_t v1353 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      uint64_t v1354 = v188[3];
                      uint64_t v1355 = v191;
                      int v1356 = v1947;
                      do
                      {
                        ldiv_t v1357 = ldiv(v1356, v189[v1355]);
                        int v1356 = v1357.quot;
                        v1353 += *(void *)(v1354 + 8 * v1355--) * v1357.rem;
                      }
                      while (v1355 != -1);
                    }
                    uint64_t v1358 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1359) = 0;
                    }
                    else
                    {
                      uint64_t v1359 = 0;
                      uint64_t v1360 = v265[3];
                      int v1361 = v1947;
                      do
                      {
                        ldiv_t v1362 = ldiv(v1361, v266[v1358]);
                        int v1361 = v1362.quot;
                        v1359 += *(void *)(v1360 + 8 * v1358--) * v1362.rem;
                      }
                      while (v1358 != -1);
                    }
                    uint64_t v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      uint64_t v1363 = 0;
                      unsigned int v1364 = v425 + 1;
                      do
                      {
                        BOOL v1365 = *(float *)(v1868 + 4 * (int)v1353 + v1363) != 0.0;
                        if (*(float *)(v1855 + 4 * (int)v1359 + v1363) != 0.0) {
                          BOOL v1365 = 1;
                        }
                        *(float *)(v1352 + v1363) = (float)v1365;
                        --v1364;
                        v1363 += 4;
                      }
                      while (v1364 > 1);
                    }
                    v1352 += 4 * (int)v425;
                    v1947 += (int)v425;
                  }
                  while (v1947 < v1918);
                }
              }
              break;
            default:
LABEL_524:
              switch(v421)
              {
                case 1uLL:
                  uint64_t v436 = v187[6];
                  if (v436)
                  {
                    unint64_t v437 = (float *)v188[19];
                    uint64_t v438 = (float *)v265[19];
                    uint64_t v439 = (float *)v187[19];
                    uint64_t v440 = 4 * *(void *)v265[3];
                    uint64_t v441 = 4 * *(void *)v188[3];
                    do
                    {
                      BOOL v442 = *v437 != 0.0;
                      if (*v438 != 0.0) {
                        BOOL v442 = 1;
                      }
                      *v439++ = (float)v442;
                      uint64_t v438 = (float *)((char *)v438 + v440);
                      unint64_t v437 = (float *)((char *)v437 + v441);
                      --v436;
                    }
                    while (v436);
                  }
                  break;
                case 2uLL:
                  uint64_t v909 = *v189;
                  if (v909)
                  {
                    uint64_t v910 = 0;
                    uint64_t v911 = 0;
                    uint64_t v912 = 0;
                    uint64_t v913 = 0;
                    uint64_t v914 = v188[19];
                    uint64_t v915 = v265[19];
                    uint64_t v916 = v187[19];
                    unint64_t v917 = v189[1];
                    v918 = (uint64_t *)v188[3];
                    uint64_t v919 = *v918;
                    uint64_t v920 = v918[1];
                    int v921 = (uint64_t *)v265[3];
                    uint64_t v922 = *v921;
                    uint64_t v923 = v921[1];
                    uint64_t v924 = v922 - v923 * v266[1];
                    if (v917 <= 1) {
                      uint64_t v925 = 1;
                    }
                    else {
                      uint64_t v925 = v189[1];
                    }
                    uint64_t v926 = v919 - v920 * v917;
                    do
                    {
                      if (v917)
                      {
                        uint64_t v927 = v911 + v925;
                        unint64_t v928 = (float *)(v916 + 4 * v911);
                        uint64_t v929 = v925;
                        do
                        {
                          BOOL v930 = *(float *)(v914 + 4 * v913) != 0.0;
                          if (*(float *)(v915 + 4 * v912) != 0.0) {
                            BOOL v930 = 1;
                          }
                          *v928++ = (float)v930;
                          v913 += v920;
                          v912 += v923;
                          --v929;
                        }
                        while (v929);
                        uint64_t v911 = v927;
                      }
                      v913 += v926;
                      v912 += v924;
                      ++v910;
                    }
                    while (v910 != v909);
                  }
                  break;
                case 3uLL:
                  uint64_t v931 = *v189;
                  if (v931)
                  {
                    uint64_t v932 = 0;
                    uint64_t v933 = 0;
                    uint64_t v934 = 0;
                    uint64_t v935 = 0;
                    uint64_t v936 = v188[19];
                    uint64_t v937 = v265[19];
                    uint64_t v938 = v187[19];
                    unint64_t v939 = v189[1];
                    uint64_t v940 = (void *)v188[3];
                    uint64_t v941 = v940[1];
                    uint64_t v942 = (void *)v265[3];
                    uint64_t v943 = v942[1];
                    uint64_t v944 = *v942 - v943 * v266[1];
                    if (v939 <= 1) {
                      uint64_t v945 = 1;
                    }
                    else {
                      uint64_t v945 = v189[1];
                    }
                    unint64_t v946 = *v940 - v941 * v939;
                    do
                    {
                      if (v939)
                      {
                        uint64_t v947 = 0;
                        unint64_t v948 = v189[2];
                        uint64_t v949 = v940[2];
                        uint64_t v950 = v942[2];
                        if (v948 <= 1) {
                          uint64_t v951 = 1;
                        }
                        else {
                          uint64_t v951 = v189[2];
                        }
                        uint64_t v952 = v943 - v950 * v266[2];
                        do
                        {
                          uint64_t v953 = v951;
                          if (v948)
                          {
                            do
                            {
                              BOOL v954 = *(float *)(v936 + 4 * v935) != 0.0;
                              if (*(float *)(v937 + 4 * v934) != 0.0) {
                                BOOL v954 = 1;
                              }
                              *(float *)(v938 + 4 * v933++) = (float)v954;
                              v935 += v949;
                              v934 += v950;
                              --v953;
                            }
                            while (v953);
                          }
                          v935 += v941 - v949 * v948;
                          v934 += v952;
                          ++v947;
                        }
                        while (v947 != v945);
                      }
                      v935 += v946;
                      v934 += v944;
                      ++v932;
                    }
                    while (v932 != v931);
                  }
                  break;
                case 4uLL:
                  uint64_t v1989 = *v189;
                  if (v1989)
                  {
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = 0;
                    uint64_t v958 = 0;
                    uint64_t v959 = v188[19];
                    uint64_t v960 = v265[19];
                    uint64_t v961 = v187[19];
                    unint64_t v962 = v189[1];
                    uint64_t v963 = (void *)v188[3];
                    v964 = (void *)v265[3];
                    uint64_t v1897 = v964[1];
                    uint64_t v1911 = v963[1];
                    if (v962 <= 1) {
                      uint64_t v965 = 1;
                    }
                    else {
                      uint64_t v965 = v189[1];
                    }
                    unint64_t v1940 = *v963 - v963[1] * v962;
                    uint64_t v1971 = *v964 - v1897 * v266[1];
                    do
                    {
                      if (v962)
                      {
                        uint64_t v966 = 0;
                        unint64_t v967 = v189[2];
                        uint64_t v968 = v963[2];
                        uint64_t v969 = v964[2];
                        if (v967 <= 1) {
                          uint64_t v970 = 1;
                        }
                        else {
                          uint64_t v970 = v189[2];
                        }
                        uint64_t v971 = v1897 - v969 * v266[2];
                        do
                        {
                          if (v967)
                          {
                            uint64_t v972 = 0;
                            unint64_t v973 = v189[3];
                            uint64_t v974 = v963[3];
                            uint64_t v975 = v964[3];
                            if (v973 <= 1) {
                              uint64_t v976 = 1;
                            }
                            else {
                              uint64_t v976 = v189[3];
                            }
                            uint64_t v977 = v969 - v975 * v266[3];
                            do
                            {
                              uint64_t v978 = v976;
                              if (v973)
                              {
                                do
                                {
                                  BOOL v979 = *(float *)(v959 + 4 * v958) != 0.0;
                                  if (*(float *)(v960 + 4 * v957) != 0.0) {
                                    BOOL v979 = 1;
                                  }
                                  *(float *)(v961 + 4 * v956++) = (float)v979;
                                  v958 += v974;
                                  v957 += v975;
                                  --v978;
                                }
                                while (v978);
                              }
                              v958 += v968 - v974 * v973;
                              v957 += v977;
                              ++v972;
                            }
                            while (v972 != v970);
                          }
                          v958 += v1911 - v968 * v967;
                          v957 += v971;
                          ++v966;
                        }
                        while (v966 != v965);
                      }
                      v958 += v1940;
                      v957 += v1971;
                      ++v955;
                    }
                    while (v955 != v1989);
                  }
                  break;
                default:
                  uint64_t v896 = v187[6];
                  if (v896)
                  {
                    uint64_t v897 = 0;
                    uint64_t v1910 = v265[19];
                    uint64_t v1939 = v188[19];
                    uint64_t v1896 = v187[19];
                    do
                    {
                      uint64_t v898 = 0;
                      if ((v191 & 0x80000000) == 0)
                      {
                        uint64_t v899 = v188[3];
                        uint64_t v900 = v191;
                        int v901 = v897;
                        do
                        {
                          ldiv_t v902 = ldiv(v901, v189[v900]);
                          int v901 = v902.quot;
                          v898 += *(void *)(v899 + 8 * v900--) * v902.rem;
                        }
                        while (v900 != -1);
                      }
                      uint64_t v903 = v1966;
                      if ((v1966 & 0x80000000) != 0)
                      {
                        LODWORD(v904) = 0;
                      }
                      else
                      {
                        uint64_t v904 = 0;
                        uint64_t v905 = v265[3];
                        int v906 = v897;
                        do
                        {
                          ldiv_t v907 = ldiv(v906, v266[v903]);
                          int v906 = v907.quot;
                          v904 += *(void *)(v905 + 8 * v903--) * v907.rem;
                        }
                        while (v903 != -1);
                      }
                      BOOL v908 = *(float *)(v1939 + 4 * (int)v898) != 0.0;
                      if (*(float *)(v1910 + 4 * (int)v904) != 0.0) {
                        BOOL v908 = 1;
                      }
                      *(float *)(v1896 + 4 * v897++) = (float)v908;
                      uint64_t v191 = v1984;
                    }
                    while (v897 != v896);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

float mlx::core::Negative::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Negative::eval();
  }
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  switch((int)v6)
  {
    case 0:
      char v7 = *(char **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v108 = *(void *)(*(void *)v3 + 160);
        if (v108)
        {
          int v109 = *(unsigned char **)(*(void *)a3 + 152);
          do
          {
            char v110 = *v7++;
            *v109++ = v110;
            --v108;
          }
          while (v108);
        }
      }
      else
      {
        int v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v10 = *(void *)a3;
        uint64_t v11 = *(void *)(*(void *)a3 + 48);
        if (v11)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(v10 + 152);
          int v14 = *(uint64_t **)v3;
          uint64_t v15 = *v14;
          uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
          do
          {
            uint64_t v17 = 0;
            if ((v16 & 0x80000000) == 0)
            {
              uint64_t v18 = v14[3];
              uint64_t v19 = v16;
              int quot = v12;
              do
              {
                ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
                int quot = v21.quot;
                v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
              }
              while (v19 != -1);
            }
            *(unsigned char *)(v13 + v12++) = v7[(int)v17];
          }
          while (v12 != v11);
        }
      }
      break;
    case 1:
      uint64_t v61 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v111 = 0;
          uint64_t v112 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v112 + v111) = -*(unsigned char *)(v61 + v111);
            ++v111;
          }
          while (v111 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        int v62 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v62, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v63 = 0;
          uint64_t v64 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v65 = **(void **)v3;
            unint64_t v66 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v65) >> 2;
            uint64_t v67 = 0;
            uint64_t v68 = (v66 - 1);
            if ((int)v66 - 1 >= 0)
            {
              uint64_t v69 = *(void *)(*(void *)v3 + 24);
              int v70 = v63;
              do
              {
                ldiv_t v71 = ldiv(v70, *(int *)(v65 + 4 * v68));
                int v70 = v71.quot;
                v67 += *(void *)(v69 + 8 * v68--) * v71.rem;
              }
              while (v68 != -1);
            }
            *(unsigned char *)(v64 + v63++) = -*(unsigned char *)(v61 + (int)v67);
          }
          while (v63 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 2:
      int v36 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v103 = *(void *)(*(void *)v3 + 160);
        if (v103)
        {
          uint64_t v104 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v105 = *v36++;
            *v104++ = -v105;
            --v103;
          }
          while (v103);
        }
      }
      else
      {
        char v37 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v37, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v38 = *(void *)a3;
        uint64_t v39 = *(void *)(*(void *)a3 + 48);
        if (v39)
        {
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v38 + 152);
          int v42 = *(uint64_t **)v3;
          uint64_t v43 = *v42;
          uint64_t v44 = ((unint64_t)(v42[1] - *v42) >> 2) - 1;
          do
          {
            uint64_t v45 = 0;
            if ((v44 & 0x80000000) == 0)
            {
              uint64_t v46 = v42[3];
              uint64_t v47 = v44;
              int v48 = v40;
              do
              {
                ldiv_t v49 = ldiv(v48, *(int *)(v43 + 4 * v47));
                int v48 = v49.quot;
                v45 += *(void *)(v46 + 8 * v47--) * v49.rem;
              }
              while (v47 != -1);
            }
            *(_DWORD *)(v41 + 4 * v40++) = -v36[(int)v45];
          }
          while (v40 != v39);
        }
      }
      break;
    case 3:
      uint64_t v50 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v106 = 0;
          uint64_t v107 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v107 + v106) = -*(unsigned char *)(v50 + v106);
            ++v106;
          }
          while (v106 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        unsigned int v51 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v51, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v52 = 0;
          uint64_t v53 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v54 = **(void **)v3;
            unint64_t v55 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v54) >> 2;
            uint64_t v56 = 0;
            uint64_t v57 = (v55 - 1);
            if ((int)v55 - 1 >= 0)
            {
              uint64_t v58 = *(void *)(*(void *)v3 + 24);
              int v59 = v52;
              do
              {
                ldiv_t v60 = ldiv(v59, *(int *)(v54 + 4 * v57));
                int v59 = v60.quot;
                v56 += *(void *)(v58 + 8 * v57--) * v60.rem;
              }
              while (v57 != -1);
            }
            *(unsigned char *)(v53 + v52++) = -*(unsigned char *)(v50 + (int)v56);
          }
          while (v52 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 4:
      int v22 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v100 = *(void *)(*(void *)v3 + 160);
        if (v100)
        {
          BOOL v101 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v102 = *v22++;
            *v101++ = -v102;
            --v100;
          }
          while (v100);
        }
      }
      else
      {
        int v23 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v23, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v24 = *(void *)a3;
        uint64_t v25 = *(void *)(*(void *)a3 + 48);
        if (v25)
        {
          uint64_t v26 = 0;
          uint64_t v27 = *(void *)(v24 + 152);
          int v28 = *(uint64_t **)v3;
          uint64_t v29 = *v28;
          uint64_t v30 = ((unint64_t)(v28[1] - *v28) >> 2) - 1;
          do
          {
            uint64_t v31 = 0;
            if ((v30 & 0x80000000) == 0)
            {
              uint64_t v32 = v28[3];
              uint64_t v33 = v30;
              int v34 = v26;
              do
              {
                ldiv_t v35 = ldiv(v34, *(int *)(v29 + 4 * v33));
                int v34 = v35.quot;
                v31 += *(void *)(v32 + 8 * v33--) * v35.rem;
              }
              while (v33 != -1);
            }
            *(_DWORD *)(v27 + 4 * v26++) = -v22[(int)v31];
          }
          while (v26 != v25);
        }
      }
      break;
    case 5:
      int v72 = *(uint64_t **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v113 = *(void *)(*(void *)v3 + 160);
        if (v113)
        {
          int v114 = *(void **)(*(void *)a3 + 152);
          do
          {
            uint64_t v115 = *v72++;
            *v114++ = -v115;
            --v113;
          }
          while (v113);
        }
      }
      else
      {
        uint64_t v73 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v73, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v74 = *(void *)a3;
        uint64_t v75 = *(void *)(*(void *)a3 + 48);
        if (v75)
        {
          uint64_t v76 = 0;
          uint64_t v77 = *(void *)(v74 + 152);
          uint64_t v78 = *(uint64_t **)v3;
          uint64_t v79 = *v78;
          uint64_t v80 = ((unint64_t)(v78[1] - *v78) >> 2) - 1;
          do
          {
            uint64_t v81 = 0;
            if ((v80 & 0x80000000) == 0)
            {
              uint64_t v82 = v78[3];
              uint64_t v83 = v80;
              int v84 = v76;
              do
              {
                ldiv_t v85 = ldiv(v84, *(int *)(v79 + 4 * v83));
                int v84 = v85.quot;
                v81 += *(void *)(v82 + 8 * v83--) * v85.rem;
              }
              while (v83 != -1);
            }
            *(void *)(v77 + 8 * v76++) = -v72[(int)v81];
          }
          while (v76 != v75);
        }
      }
      break;
    case 6:
      unsigned int v86 = *(float **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v116 = *(void *)(*(void *)v3 + 160);
        if (v116)
        {
          int v117 = *(float **)(*(void *)a3 + 152);
          do
          {
            float v118 = *v86++;
            float result = -v118;
            *v117++ = -v118;
            --v116;
          }
          while (v116);
        }
      }
      else
      {
        int v87 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        int v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v87, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v88 = *(void *)a3;
        uint64_t v89 = *(void *)(*(void *)a3 + 48);
        if (v89)
        {
          uint64_t v90 = 0;
          uint64_t v91 = *(void *)(v88 + 152);
          int v92 = *(uint64_t **)v3;
          uint64_t v93 = *v92;
          uint64_t v94 = ((unint64_t)(v92[1] - *v92) >> 2) - 1;
          do
          {
            uint64_t v95 = 0;
            if ((v94 & 0x80000000) == 0)
            {
              uint64_t v96 = v92[3];
              uint64_t v97 = v94;
              int v98 = v90;
              do
              {
                ldiv_t v99 = ldiv(v98, *(int *)(v93 + 4 * v97));
                int v98 = v99.quot;
                v95 += *(void *)(v96 + 8 * v97--) * v99.rem;
              }
              while (v97 != -1);
            }
            float result = -v86[(int)v95];
            *(float *)(v91 + 4 * v90++) = result;
          }
          while (v90 != v89);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256D79B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::eval(void *a1, uint64_t **a2, int ***this, float a4)
{
  unint64_t v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 32) {
    mlx::core::Pad::eval();
  }
  uint64_t v6 = v4[2];
  if (*(void *)(v6 + 48) != 1) {
    mlx::core::Pad::eval();
  }
  int v7 = *(_DWORD *)(v6 + 56);
  if (v7 != *(_DWORD *)(*v4 + 56) || v7 != *((_DWORD *)*this + 14)) {
    mlx::core::Pad::eval();
  }
  mlx::core::copy((mlx::core::array *)(v4 + 2), this, 0, a4);
  int v9 = (int *)a1[3];
  uint64_t v10 = 0;
  uint64_t v11 = a1[4] - (void)v9;
  if (v11)
  {
    uint64_t v12 = v11 >> 2;
    uint64_t v13 = (int *)a1[6];
    if ((unint64_t)(v11 >> 2) <= 1) {
      uint64_t v12 = 1;
    }
    do
    {
      uint64_t v15 = *v9++;
      uint64_t v14 = v15;
      if ((v15 & 0x80000000) != 0) {
        v14 += (*this)[1] - **this;
      }
      else {
        uint64_t v14 = v14;
      }
      uint64_t v16 = *v13++;
      v10 += *(void *)&(*this)[3][2 * v14] * v16;
      --v12;
    }
    while (v12);
  }
  uint64_t v17 = *v4;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 2);
  uint64_t v18 = (uint64_t)(*this)[7];
  long long v21 = 0uLL;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  mlx::core::array::array(v23, (long long *)__p, v18, &v21, &v19);
  uint64_t v24 = (void **)&v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::copy_shared_buffer(v23, (uint64_t)this, (uint64_t)(*this + 3), *((unsigned char *)*this + 168), *(void *)(v23[0] + 48), v10);
  mlx::core::copy_inplace(v4, v23, 3);
  mlx::core::array::~array((mlx::core::array *)v23);
}

void sub_256D79D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16)
{
  *(void *)(v17 - 40) = v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::RandomBits::eval(uint64_t a1, uint64_t ***a2, int ***a3)
{
  v43[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::RandomBits::eval();
  }
  unint64_t v6 = (*v3)[6];
  unint64_t v7 = (unint64_t)(*a3)[6];
  uint64_t v8 = *((unsigned __int8 *)*a3 + 60);
  int v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(v8 * v7));
  v43[0] = &unk_27062AEC8;
  v43[1] = mlx::core::allocator::free;
  v43[3] = v43;
  mlx::core::array::set_data(a3, (uint64_t)v9, (uint64_t)v43);
  uint64_t result = (uint64_t)std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v43);
  if (v6 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v6 >> 1;
    unint64_t v13 = v8 * (v7 / (v6 >> 1));
    uint64_t v14 = (**a2)[19];
    unint64_t v15 = (v13 + 3) >> 3;
    unint64_t v39 = v13 + 3;
    uint64_t v40 = v14;
    uint64_t v16 = (*a3)[19];
    unint64_t v37 = (v13 + 3) & 4;
    unint64_t v38 = v15 + (v37 >> 2);
    unint64_t v33 = v15;
    __leunint64_t n = v13 & 3;
    if (v6 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v35 = v12;
    unint64_t v36 = v8 * (v7 / (v6 >> 1));
    if (v15 <= 2) {
      unint64_t v17 = 2;
    }
    else {
      unint64_t v17 = (v13 + 3) >> 3;
    }
    do
    {
      uint64_t v18 = **v3;
      unint64_t v19 = (unint64_t)((*v3)[1] - v18) >> 2;
      uint64_t v20 = (v19 - 1);
      if ((int)v19 - 1 < 0)
      {
        uint64_t v21 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (*v3)[3];
        uint64_t v23 = (v19 - 1);
        int quot = 2 * v11;
        do
        {
          ldiv_t v25 = ldiv(quot, *(int *)(v18 + 4 * v23));
          int quot = v25.quot;
          v21 += *(void *)(v22 + 8 * v23--) * v25.rem;
        }
        while (v23 != -1);
        uint64_t v26 = 0;
        LODWORD(result) = (2 * v11) | 1;
        do
        {
          ldiv_t v27 = ldiv((int)result, *(int *)(v18 + 4 * v20));
          uint64_t result = v27.quot;
          v26 += *(void *)(v22 + 8 * v20--) * v27.rem;
        }
        while (v20 != -1);
        unint64_t v15 = v33;
      }
      unint64_t v42 = *(unsigned int *)(v40 + 4 * v21) | ((unint64_t)*(unsigned int *)(v40 + 4 * v26) << 32);
      if (v39 < 0x10)
      {
        unint64_t v32 = 0;
        unint64_t v30 = v38;
        LODWORD(v29) = 1;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = 1;
        unint64_t v30 = v38;
        do
        {
          uint64_t v31 = v29;
          uint64_t result = mlx::core::random::threefry2x32_hash(&v42, (v29 - 1) | (v30 << 32));
          v16[v28] = result;
          v16[v30++] = HIDWORD(result);
          ++v29;
          uint64_t v28 = v31;
        }
        while (v17 != v31 + 1);
        unint64_t v32 = v31;
      }
      if (v32 >= v15)
      {
        LODWORD(v29) = v32;
      }
      else
      {
        uint64_t result = mlx::core::random::threefry2x32_hash(&v42, v32 | ((unint64_t)v30 << 32));
        int __src = HIDWORD(result);
        v16[v32] = result;
        if (__len) {
          uint64_t result = (uint64_t)memmove(&v16[v30], &__src, __len);
        }
        else {
          v16[v30] = HIDWORD(result);
        }
      }
      if (v37)
      {
        uint64_t result = mlx::core::random::threefry2x32_hash(&v42, v29);
        v16[v15] = result;
      }
      ++v11;
      uint64_t v16 = (int *)((char *)v16 + v36);
    }
    while (v11 != v35);
  }
  return result;
}

void sub_256D7A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  unint64_t v3 = *(uint64_t ***)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Reshape::eval();
  }
  mlx::core::Reshape::prepare_reshape(*(uint64_t ***)a2, a3, (uint64_t)v7);
  if (v7[0]) {
    mlx::core::copy((mlx::core::array *)v3, (int ***)a3, 2 * ((*v3)[20] != 1), v6);
  }
  else {
    mlx::core::Reshape::shared_buffer_reshape(a1, (uint64_t)v3, (uint64_t)__p, (uint64_t *)a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256D7A120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::Round::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Round::eval();
  }
  uint64_t v28 = *(void **)(*(void *)v3 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    uint64_t v6 = *(void *)(*(void *)a3 + 56);
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
      ldiv_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
      v27[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v25, v27);
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
      MEMORY[0x25A2B1480](exception, v27);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    unint64_t v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v22 = *(void *)(*(void *)v3 + 160);
      if (v22)
      {
        uint64_t v23 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v24 = *v7++;
          float result = rintf(v24);
          *v23++ = result;
          --v22;
        }
        while (v22);
      }
    }
    else
    {
      uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
      uint64_t v28 = &unk_27062AEC8;
      v29[0] = mlx::core::allocator::free;
      v29[2] = &v28;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
      uint64_t v10 = *(void *)a3;
      uint64_t v11 = *(void *)(*(void *)a3 + 48);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(v10 + 152);
        uint64_t v14 = *(uint64_t **)v3;
        uint64_t v15 = *v14;
        uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
        do
        {
          uint64_t v17 = 0;
          if ((v16 & 0x80000000) == 0)
          {
            uint64_t v18 = v14[3];
            uint64_t v19 = v16;
            int quot = v12;
            do
            {
              ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
              int quot = v21.quot;
              v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
            }
            while (v19 != -1);
          }
          float result = rintf(v7[(int)v17]);
          *(float *)(v13 + 4 * v12++) = result;
        }
        while (v12 != v11);
      }
    }
  }
  else
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
  }
  return result;
}

void sub_256D7A3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Sigmoid::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v25[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sigmoid::eval();
  }
  float v24 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v24, &mlx::core::inexact))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sigmoid] Cannot sigmoid of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
    ldiv_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"[unary_fp] Does not support ", 28);
    v23[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v21, v23);
    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, v23);
    MEMORY[0x25A2B1480](v22, v23);
    __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(void *)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    if (*(void *)(*(void *)v3 + 160))
    {
      unint64_t v18 = 0;
      uint64_t v19 = *(void *)(*(void *)a3 + 152);
      do
      {
        *(float *)(v19 + 4 * v18) = mlx::core::detail::Sigmoid::operator()<float>(*(float *)(v7 + 4 * v18));
        ++v18;
      }
      while (v18 < *(void *)(*(void *)v3 + 160));
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    float v24 = &unk_27062AEC8;
    v25[0] = mlx::core::allocator::free;
    v25[2] = &v24;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v24);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v24);
    if (*(void *)(*(void *)a3 + 48))
    {
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(*(void *)a3 + 152);
      do
      {
        uint64_t v11 = **(void **)v3;
        unint64_t v12 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v11) >> 2;
        uint64_t v13 = 0;
        uint64_t v14 = (v12 - 1);
        if ((int)v12 - 1 >= 0)
        {
          uint64_t v15 = *(void *)(*(void *)v3 + 24);
          int quot = v9;
          do
          {
            ldiv_t v17 = ldiv(quot, *(int *)(v11 + 4 * v14));
            int quot = v17.quot;
            v13 += *(void *)(v15 + 8 * v14--) * v17.rem;
          }
          while (v14 != -1);
        }
        *(float *)(v10 + 4 * v9++) = mlx::core::detail::Sigmoid::operator()<float>(*(float *)(v7 + 4 * (int)v13));
      }
      while (v9 < *(void *)(*(void *)a3 + 48));
    }
  }
}

void sub_256D7A6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

float mlx::core::Sign::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sign::eval();
  }
  uint64_t v5 = *(uint64_t **)v3;
  if (*(_DWORD *)(*(void *)v3 + 56))
  {
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)(*(void *)a3 + 56);
    switch((int)v7)
    {
      case 0:
        uint64_t v8 = (char *)v5[19];
        if (v5[21])
        {
          uint64_t v110 = *(void *)(*(void *)v3 + 160);
          if (v110)
          {
            unint64_t v111 = *(unsigned char **)(*(void *)a3 + 152);
            do
            {
              char v112 = *v8++;
              *v111++ = v112;
              --v110;
            }
            while (v110);
          }
        }
        else
        {
          unint64_t v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          uint64_t v11 = *(void *)a3;
          uint64_t v12 = *(void *)(*(void *)a3 + 48);
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = *(void *)(v11 + 152);
            uint64_t v15 = *(uint64_t **)v3;
            uint64_t v16 = *v15;
            uint64_t v17 = ((unint64_t)(v15[1] - *v15) >> 2) - 1;
            do
            {
              uint64_t v18 = 0;
              if ((v17 & 0x80000000) == 0)
              {
                uint64_t v19 = v15[3];
                uint64_t v20 = v17;
                int quot = v13;
                do
                {
                  ldiv_t v22 = ldiv(quot, *(int *)(v16 + 4 * v20));
                  int quot = v22.quot;
                  v18 += *(void *)(v19 + 8 * v20--) * v22.rem;
                }
                while (v20 != -1);
              }
              *(unsigned char *)(v14 + v13++) = v8[(int)v18];
            }
            while (v13 != v12);
          }
        }
        break;
      case 1:
        uint64_t v63 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v113 = 0;
            uint64_t v114 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v114 + v113) = *(unsigned char *)(v63 + v113) != 0;
              ++v113;
            }
            while (v113 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          uint64_t v64 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v64, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v65 = 0;
            uint64_t v66 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v67 = **(void **)v3;
              unint64_t v68 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v67) >> 2;
              uint64_t v69 = 0;
              uint64_t v70 = (v68 - 1);
              if ((int)v68 - 1 >= 0)
              {
                uint64_t v71 = *(void *)(*(void *)v3 + 24);
                int v72 = v65;
                do
                {
                  ldiv_t v73 = ldiv(v72, *(int *)(v67 + 4 * v70));
                  int v72 = v73.quot;
                  v69 += *(void *)(v71 + 8 * v70--) * v73.rem;
                }
                while (v70 != -1);
              }
              *(unsigned char *)(v66 + v65++) = *(unsigned char *)(v63 + (int)v69) != 0;
            }
            while (v65 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 2:
        unint64_t v38 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v105 = *(void *)(*(void *)v3 + 160);
          if (v105)
          {
            unint64_t v106 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v107 = *v38++;
              *v106++ = v107 != 0;
              --v105;
            }
            while (v105);
          }
        }
        else
        {
          unint64_t v39 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v39, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          uint64_t v40 = *(void *)a3;
          uint64_t v41 = *(void *)(*(void *)a3 + 48);
          if (v41)
          {
            uint64_t v42 = 0;
            uint64_t v43 = *(void *)(v40 + 152);
            uint64_t v44 = *(uint64_t **)v3;
            uint64_t v45 = *v44;
            uint64_t v46 = ((unint64_t)(v44[1] - *v44) >> 2) - 1;
            do
            {
              uint64_t v47 = 0;
              if ((v46 & 0x80000000) == 0)
              {
                uint64_t v48 = v44[3];
                uint64_t v49 = v46;
                int v50 = v42;
                do
                {
                  ldiv_t v51 = ldiv(v50, *(int *)(v45 + 4 * v49));
                  int v50 = v51.quot;
                  v47 += *(void *)(v48 + 8 * v49--) * v51.rem;
                }
                while (v49 != -1);
              }
              *(_DWORD *)(v43 + 4 * v42++) = v38[(int)v47] != 0;
            }
            while (v42 != v41);
          }
        }
        break;
      case 3:
        uint64_t v52 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v108 = 0;
            uint64_t v109 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v109 + v108) = (*(unsigned char *)(v52 + v108) != 0) | (*(char *)(v52 + v108) >> 7);
              ++v108;
            }
            while (v108 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          uint64_t v53 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v53, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v54 = 0;
            uint64_t v55 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v56 = **(void **)v3;
              unint64_t v57 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v56) >> 2;
              uint64_t v58 = 0;
              uint64_t v59 = (v57 - 1);
              if ((int)v57 - 1 >= 0)
              {
                uint64_t v60 = *(void *)(*(void *)v3 + 24);
                int v61 = v54;
                do
                {
                  ldiv_t v62 = ldiv(v61, *(int *)(v56 + 4 * v59));
                  int v61 = v62.quot;
                  v58 += *(void *)(v60 + 8 * v59--) * v62.rem;
                }
                while (v59 != -1);
              }
              *(unsigned char *)(v55 + v54++) = (*(unsigned char *)(v52 + (int)v58) != 0) | (*(char *)(v52 + (int)v58) >> 7);
            }
            while (v54 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 4:
        float v24 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v102 = *(void *)(*(void *)v3 + 160);
          if (v102)
          {
            uint64_t v103 = *(int **)(*(void *)a3 + 152);
            do
            {
              int v104 = *v24++;
              *v103++ = (v104 != 0) | (v104 >> 31);
              --v102;
            }
            while (v102);
          }
        }
        else
        {
          ldiv_t v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v25, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          uint64_t v26 = *(void *)a3;
          uint64_t v27 = *(void *)(*(void *)a3 + 48);
          if (v27)
          {
            uint64_t v28 = 0;
            uint64_t v29 = *(void *)(v26 + 152);
            unint64_t v30 = *(uint64_t **)v3;
            uint64_t v31 = *v30;
            uint64_t v32 = ((unint64_t)(v30[1] - *v30) >> 2) - 1;
            do
            {
              uint64_t v33 = 0;
              if ((v32 & 0x80000000) == 0)
              {
                uint64_t v34 = v30[3];
                uint64_t v35 = v32;
                int v36 = v28;
                do
                {
                  ldiv_t v37 = ldiv(v36, *(int *)(v31 + 4 * v35));
                  int v36 = v37.quot;
                  v33 += *(void *)(v34 + 8 * v35--) * v37.rem;
                }
                while (v35 != -1);
              }
              *(_DWORD *)(v29 + 4 * v28++) = (v24[(int)v33] != 0) | (v24[(int)v33] >> 31);
            }
            while (v28 != v27);
          }
        }
        break;
      case 5:
        uint64_t v74 = (uint64_t *)v5[19];
        if (v5[21])
        {
          uint64_t v115 = *(void *)(*(void *)v3 + 160);
          if (v115)
          {
            uint64_t v116 = *(unint64_t **)(*(void *)a3 + 152);
            do
            {
              uint64_t v117 = *v74++;
              *v116++ = (v117 != 0) | (unint64_t)(v117 >> 63);
              --v115;
            }
            while (v115);
          }
        }
        else
        {
          uint64_t v75 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v75, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          uint64_t v76 = *(void *)a3;
          uint64_t v77 = *(void *)(*(void *)a3 + 48);
          if (v77)
          {
            uint64_t v78 = 0;
            uint64_t v79 = *(void *)(v76 + 152);
            uint64_t v80 = *(uint64_t **)v3;
            uint64_t v81 = *v80;
            uint64_t v82 = ((unint64_t)(v80[1] - *v80) >> 2) - 1;
            do
            {
              uint64_t v83 = 0;
              if ((v82 & 0x80000000) == 0)
              {
                uint64_t v84 = v80[3];
                uint64_t v85 = v82;
                int v86 = v78;
                do
                {
                  ldiv_t v87 = ldiv(v86, *(int *)(v81 + 4 * v85));
                  int v86 = v87.quot;
                  v83 += *(void *)(v84 + 8 * v85--) * v87.rem;
                }
                while (v85 != -1);
              }
              *(void *)(v79 + 8 * v78++) = (v74[(int)v83] != 0) | (unint64_t)(v74[(int)v83] >> 63);
            }
            while (v78 != v77);
          }
        }
        break;
      case 6:
        uint64_t v88 = (float *)v5[19];
        if (v5[21])
        {
          uint64_t v118 = *(void *)(*(void *)v3 + 160);
          if (v118)
          {
            unsigned int v119 = *(float **)(*(void *)a3 + 152);
            do
            {
              float v120 = *v88++;
              float result = (float)(int)((__PAIR64__(v120 > 0.0, LODWORD(v120)) - COERCE_UNSIGNED_INT(0.0)) >> 32);
              *v119++ = result;
              --v118;
            }
            while (v118);
          }
        }
        else
        {
          uint64_t v89 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v121 = &unk_27062AEC8;
          uint64_t v122 = mlx::core::allocator::free;
          uint64_t v123 = &v121;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v89, (uint64_t)&v121);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v121);
          uint64_t v90 = *(void *)a3;
          uint64_t v91 = *(void *)(*(void *)a3 + 48);
          if (v91)
          {
            uint64_t v92 = 0;
            uint64_t v93 = *(void *)(v90 + 152);
            uint64_t v94 = *(uint64_t **)v3;
            uint64_t v95 = *v94;
            uint64_t v96 = ((unint64_t)(v94[1] - *v94) >> 2) - 1;
            do
            {
              uint64_t v97 = 0;
              if ((v96 & 0x80000000) == 0)
              {
                uint64_t v98 = v94[3];
                uint64_t v99 = v96;
                int v100 = v92;
                do
                {
                  ldiv_t v101 = ldiv(v100, *(int *)(v95 + 4 * v99));
                  int v100 = v101.quot;
                  v97 += *(void *)(v98 + 8 * v99--) * v101.rem;
                }
                while (v99 != -1);
              }
              float result = (float)(int)((__PAIR64__(v88[(int)v97] > 0.0, LODWORD(v88[(int)v97])) - COERCE_UNSIGNED_INT(0.0)) >> 32);
              *(float *)(v93 + 4 * v92++) = result;
            }
            while (v92 != v91);
          }
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    uint64_t v23 = *(const mlx::core::array **)a2;
    mlx::core::array::copy_shared_buffer(a3, v23);
  }
  return result;
}

void sub_256D7B094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sin::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sin] Cannot compute sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    ldiv_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      ldiv_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = sinf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = sinf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D7B380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Sinh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sinh::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sinh] Cannot compute hyperbolic sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    ldiv_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      ldiv_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = sinhf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = sinhf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D7B690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Slice::eval(mlx::core::Slice *a1, uint64_t a2, int ***a3)
{
  v18[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(uint64_t ***)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Slice::eval();
  }
  if ((*a3)[6])
  {
    mlx::core::Slice::prepare_slice(a1, *(uint64_t ***)a2, (uint64_t)v13);
    if (v13[0])
    {
      uint64_t v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (void)(*a3)[6]));
      v17[0] = &unk_27062AEC8;
      v17[1] = mlx::core::allocator::free;
      v17[3] = v17;
      mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v17);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v17);
      uint64_t v7 = (uint64_t *)(*a3)[3];
      uint64_t v8 = (uint64_t *)(*a3)[4];
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      __p = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&__p, v7, v8, v8 - v7);
      mlx::core::copy_inplace<long long>((uint64_t)v3, (uint64_t **)a3, *a3, (uint64_t **)&v15, (uint64_t *)&__p, v14, 0, 2u, v9);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long *>,std::__wrap_iter<long long *>>((char *)&__p, (uint64_t *)v15, v16, ((char *)v16 - (unsigned char *)v15) >> 3);
      mlx::core::Slice::shared_buffer_slice((uint64_t)a1, (uint64_t)v3, (uint64_t **)&__p, v14, (uint64_t *)a3);
    }
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
    if (v15)
    {
      uint64_t v16 = (uint64_t *)v15;
      operator delete(v15);
    }
  }
  else
  {
    v18[0] = &unk_27062AEC8;
    v18[1] = mlx::core::allocator::free;
    v18[3] = v18;
    mlx::core::array::set_data(a3, 0, (uint64_t)v18);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v18);
  }
}

void sub_256D7B8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::SliceUpdate::eval(mlx::core::SliceUpdate *a1, uint64_t a2, int ***this, float a4)
{
  v22[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(int ****)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::SliceUpdate::eval();
  }
  if ((*this)[6])
  {
    if (v4[2][6])
    {
      uint64_t v7 = *v4;
      if ((_BYTE)(*v4)[21])
      {
        uint64_t v11 = v7[6];
        uint64_t v8 = v7[20];
        if (v11 == v8) {
          int v9 = 1;
        }
        else {
          int v9 = 2;
        }
      }
      else
      {
        uint64_t v8 = v7[20];
        int v9 = 2;
      }
      if (v8 == (int *)1) {
        int v12 = 0;
      }
      else {
        int v12 = v9;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v12, a4);
      mlx::core::SliceUpdate::prepare_slice(a1, (const mlx::core::array *)this, &v20);
      uint64_t v13 = v4[2];
      uint64_t v14 = (uint64_t *)v13[3];
      uint64_t v15 = (uint64_t *)v13[4];
      __p = 0;
      int v18 = 0;
      uint64_t v19 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&__p, v14, v15, v15 - v14);
      mlx::core::copy_inplace<long long>((uint64_t)(v4 + 2), (uint64_t **)this, v4[2], (uint64_t **)&__p, (uint64_t *)v21, 0, v20, 3u, v16);
      if (__p)
      {
        int v18 = __p;
        operator delete(__p);
      }
      if (v21[0])
      {
        v21[1] = v21[0];
        operator delete(v21[0]);
      }
    }
    else
    {
      uint64_t v10 = *(const mlx::core::array **)a2;
      mlx::core::array::copy_shared_buffer((mlx::core::array *)this, v10);
    }
  }
  else
  {
    v22[0] = &unk_27062AEC8;
    v22[1] = mlx::core::allocator::free;
    v22[3] = v22;
    mlx::core::array::set_data(this, 0, (uint64_t)v22);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v22);
  }
}

void sub_256D7BB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

float mlx::core::Square::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Square::eval();
  }
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  switch((int)v6)
  {
    case 0:
      uint64_t v7 = *(char **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v108 = *(void *)(*(void *)v3 + 160);
        if (v108)
        {
          uint64_t v109 = *(unsigned char **)(*(void *)a3 + 152);
          do
          {
            char v110 = *v7++;
            *v109++ = v110;
            --v108;
          }
          while (v108);
        }
      }
      else
      {
        uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v10 = *(void *)a3;
        uint64_t v11 = *(void *)(*(void *)a3 + 48);
        if (v11)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(v10 + 152);
          uint64_t v14 = *(uint64_t **)v3;
          uint64_t v15 = *v14;
          uint64_t v16 = ((unint64_t)(v14[1] - *v14) >> 2) - 1;
          do
          {
            uint64_t v17 = 0;
            if ((v16 & 0x80000000) == 0)
            {
              uint64_t v18 = v14[3];
              uint64_t v19 = v16;
              int quot = v12;
              do
              {
                ldiv_t v21 = ldiv(quot, *(int *)(v15 + 4 * v19));
                int quot = v21.quot;
                v17 += *(void *)(v18 + 8 * v19--) * v21.rem;
              }
              while (v19 != -1);
            }
            *(unsigned char *)(v13 + v12++) = v7[(int)v17];
          }
          while (v12 != v11);
        }
      }
      break;
    case 1:
      uint64_t v61 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v111 = 0;
          uint64_t v112 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v112 + v111) = *(unsigned char *)(v61 + v111) * *(unsigned char *)(v61 + v111);
            ++v111;
          }
          while (v111 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        ldiv_t v62 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v62, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v63 = 0;
          uint64_t v64 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v65 = **(void **)v3;
            unint64_t v66 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v65) >> 2;
            uint64_t v67 = 0;
            uint64_t v68 = (v66 - 1);
            if ((int)v66 - 1 >= 0)
            {
              uint64_t v69 = *(void *)(*(void *)v3 + 24);
              int v70 = v63;
              do
              {
                ldiv_t v71 = ldiv(v70, *(int *)(v65 + 4 * v68));
                int v70 = v71.quot;
                v67 += *(void *)(v69 + 8 * v68--) * v71.rem;
              }
              while (v68 != -1);
            }
            *(unsigned char *)(v64 + v63++) = *(unsigned char *)(v61 + (int)v67) * *(unsigned char *)(v61 + (int)v67);
          }
          while (v63 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 2:
      int v36 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v103 = *(void *)(*(void *)v3 + 160);
        if (v103)
        {
          int v104 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v105 = *v36++;
            *v104++ = v105 * v105;
            --v103;
          }
          while (v103);
        }
      }
      else
      {
        ldiv_t v37 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v37, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v38 = *(void *)a3;
        uint64_t v39 = *(void *)(*(void *)a3 + 48);
        if (v39)
        {
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v38 + 152);
          uint64_t v42 = *(uint64_t **)v3;
          uint64_t v43 = *v42;
          uint64_t v44 = ((unint64_t)(v42[1] - *v42) >> 2) - 1;
          do
          {
            uint64_t v45 = 0;
            if ((v44 & 0x80000000) == 0)
            {
              uint64_t v46 = v42[3];
              uint64_t v47 = v44;
              int v48 = v40;
              do
              {
                ldiv_t v49 = ldiv(v48, *(int *)(v43 + 4 * v47));
                int v48 = v49.quot;
                v45 += *(void *)(v46 + 8 * v47--) * v49.rem;
              }
              while (v47 != -1);
            }
            *(_DWORD *)(v41 + 4 * v40++) = v36[(int)v45] * v36[(int)v45];
          }
          while (v40 != v39);
        }
      }
      break;
    case 3:
      uint64_t v50 = *(void *)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        if (*(void *)(*(void *)v3 + 160))
        {
          unint64_t v106 = 0;
          uint64_t v107 = *(void *)(*(void *)a3 + 152);
          do
          {
            *(unsigned char *)(v107 + v106) = *(unsigned char *)(v50 + v106) * *(unsigned char *)(v50 + v106);
            ++v106;
          }
          while (v106 < *(void *)(*(void *)v3 + 160));
        }
      }
      else
      {
        ldiv_t v51 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v51, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        if (*(void *)(*(void *)a3 + 48))
        {
          unint64_t v52 = 0;
          uint64_t v53 = *(void *)(*(void *)a3 + 152);
          do
          {
            uint64_t v54 = **(void **)v3;
            unint64_t v55 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v54) >> 2;
            uint64_t v56 = 0;
            uint64_t v57 = (v55 - 1);
            if ((int)v55 - 1 >= 0)
            {
              uint64_t v58 = *(void *)(*(void *)v3 + 24);
              int v59 = v52;
              do
              {
                ldiv_t v60 = ldiv(v59, *(int *)(v54 + 4 * v57));
                int v59 = v60.quot;
                v56 += *(void *)(v58 + 8 * v57--) * v60.rem;
              }
              while (v57 != -1);
            }
            *(unsigned char *)(v53 + v52++) = *(unsigned char *)(v50 + (int)v56) * *(unsigned char *)(v50 + (int)v56);
          }
          while (v52 < *(void *)(*(void *)a3 + 48));
        }
      }
      break;
    case 4:
      ldiv_t v22 = *(int **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v100 = *(void *)(*(void *)v3 + 160);
        if (v100)
        {
          ldiv_t v101 = *(_DWORD **)(*(void *)a3 + 152);
          do
          {
            int v102 = *v22++;
            *v101++ = v102 * v102;
            --v100;
          }
          while (v100);
        }
      }
      else
      {
        float v23 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v23, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v24 = *(void *)a3;
        uint64_t v25 = *(void *)(*(void *)a3 + 48);
        if (v25)
        {
          uint64_t v26 = 0;
          uint64_t v27 = *(void *)(v24 + 152);
          uint64_t v28 = *(uint64_t **)v3;
          uint64_t v29 = *v28;
          uint64_t v30 = ((unint64_t)(v28[1] - *v28) >> 2) - 1;
          do
          {
            uint64_t v31 = 0;
            if ((v30 & 0x80000000) == 0)
            {
              uint64_t v32 = v28[3];
              uint64_t v33 = v30;
              int v34 = v26;
              do
              {
                ldiv_t v35 = ldiv(v34, *(int *)(v29 + 4 * v33));
                int v34 = v35.quot;
                v31 += *(void *)(v32 + 8 * v33--) * v35.rem;
              }
              while (v33 != -1);
            }
            *(_DWORD *)(v27 + 4 * v26++) = v22[(int)v31] * v22[(int)v31];
          }
          while (v26 != v25);
        }
      }
      break;
    case 5:
      int v72 = *(uint64_t **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v113 = *(void *)(*(void *)v3 + 160);
        if (v113)
        {
          uint64_t v114 = *(void **)(*(void *)a3 + 152);
          do
          {
            uint64_t v115 = *v72++;
            *v114++ = v115 * v115;
            --v113;
          }
          while (v113);
        }
      }
      else
      {
        ldiv_t v73 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v73, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v74 = *(void *)a3;
        uint64_t v75 = *(void *)(*(void *)a3 + 48);
        if (v75)
        {
          uint64_t v76 = 0;
          uint64_t v77 = *(void *)(v74 + 152);
          uint64_t v78 = *(uint64_t **)v3;
          uint64_t v79 = *v78;
          uint64_t v80 = ((unint64_t)(v78[1] - *v78) >> 2) - 1;
          do
          {
            uint64_t v81 = 0;
            if ((v80 & 0x80000000) == 0)
            {
              uint64_t v82 = v78[3];
              uint64_t v83 = v80;
              int v84 = v76;
              do
              {
                ldiv_t v85 = ldiv(v84, *(int *)(v79 + 4 * v83));
                int v84 = v85.quot;
                v81 += *(void *)(v82 + 8 * v83--) * v85.rem;
              }
              while (v83 != -1);
            }
            *(void *)(v77 + 8 * v76++) = v72[(int)v81] * v72[(int)v81];
          }
          while (v76 != v75);
        }
      }
      break;
    case 6:
      int v86 = *(float **)(*(void *)v3 + 152);
      if (*(unsigned char *)(*(void *)v3 + 168))
      {
        uint64_t v116 = *(void *)(*(void *)v3 + 160);
        if (v116)
        {
          uint64_t v117 = *(float **)(*(void *)a3 + 152);
          do
          {
            float v118 = *v86++;
            float result = v118 * v118;
            *v117++ = v118 * v118;
            --v116;
          }
          while (v116);
        }
      }
      else
      {
        ldiv_t v87 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
        unsigned int v119 = &unk_27062AEC8;
        float v120 = mlx::core::allocator::free;
        int v121 = &v119;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v87, (uint64_t)&v119);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v119);
        uint64_t v88 = *(void *)a3;
        uint64_t v89 = *(void *)(*(void *)a3 + 48);
        if (v89)
        {
          uint64_t v90 = 0;
          uint64_t v91 = *(void *)(v88 + 152);
          uint64_t v92 = *(uint64_t **)v3;
          uint64_t v93 = *v92;
          uint64_t v94 = ((unint64_t)(v92[1] - *v92) >> 2) - 1;
          do
          {
            uint64_t v95 = 0;
            if ((v94 & 0x80000000) == 0)
            {
              uint64_t v96 = v92[3];
              uint64_t v97 = v94;
              int v98 = v90;
              do
              {
                ldiv_t v99 = ldiv(v98, *(int *)(v93 + 4 * v97));
                int v98 = v99.quot;
                v95 += *(void *)(v96 + 8 * v97--) * v99.rem;
              }
              while (v97 != -1);
            }
            float result = v86[(int)v95] * v86[(int)v95];
            *(float *)(v91 + 4 * v90++) = result;
          }
          while (v90 != v89);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256D7C43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sqrt::eval();
  }
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (*(unsigned char *)(a1 + 20))
  {
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
      uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[unary_fp] Does not support ", 28);
      v45[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v41, v45);
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, v45);
      MEMORY[0x25A2B1480](exception, v45);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v35 = *(void *)(*(void *)v3 + 160);
      if (v35)
      {
        int v36 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v37 = *v7++;
          *v36++ = 1.0 / sqrtf(v37);
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
      uint64_t v46 = &unk_27062AEC8;
      v47[0] = mlx::core::allocator::free;
      int v48 = &v46;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v46);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v46);
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = *(void *)(*(void *)a3 + 48);
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(v9 + 152);
        uint64_t v13 = *(uint64_t **)v3;
        uint64_t v14 = *v13;
        uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
        do
        {
          uint64_t v16 = 0;
          if ((v15 & 0x80000000) == 0)
          {
            uint64_t v17 = v13[3];
            uint64_t v18 = v15;
            int quot = v11;
            do
            {
              ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
              int quot = v20.quot;
              v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
            }
            while (v18 != -1);
          }
          *(float *)(v12 + 4 * v11++) = 1.0 / sqrtf(v7[(int)v16]);
        }
        while (v11 != v10);
      }
    }
  }
  else
  {
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[unary_fp] Does not support ", 28);
      v45[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v43, v45);
      uint64_t v44 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, v45);
      MEMORY[0x25A2B1480](v44, v45);
      __cxa_throw(v44, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    ldiv_t v21 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v38 = *(void *)(*(void *)v3 + 160);
      if (v38)
      {
        uint64_t v39 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v40 = *v21++;
          *v39++ = sqrtf(v40);
          --v38;
        }
        while (v38);
      }
    }
    else
    {
      ldiv_t v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v5 + 48) * BYTE4(v6)));
      uint64_t v46 = &unk_27062AEC8;
      v47[0] = mlx::core::allocator::free;
      int v48 = &v46;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v22, (uint64_t)&v46);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v46);
      uint64_t v23 = *(void *)a3;
      uint64_t v24 = *(void *)(*(void *)a3 + 48);
      if (v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *(void *)(v23 + 152);
        uint64_t v27 = *(uint64_t **)v3;
        uint64_t v28 = *v27;
        uint64_t v29 = ((unint64_t)(v27[1] - *v27) >> 2) - 1;
        do
        {
          uint64_t v30 = 0;
          if ((v29 & 0x80000000) == 0)
          {
            uint64_t v31 = v27[3];
            uint64_t v32 = v29;
            int v33 = v25;
            do
            {
              ldiv_t v34 = ldiv(v33, *(int *)(v28 + 4 * v32));
              int v33 = v34.quot;
              v30 += *(void *)(v31 + 8 * v32--) * v34.rem;
            }
            while (v32 != -1);
          }
          *(float *)(v26 + 4 * v25++) = sqrtf(v21[(int)v30]);
        }
        while (v25 != v24);
      }
    }
  }
}

void sub_256D7C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Tan::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tan::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tan] Cannot compute tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      ldiv_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = tanf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = tanf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D7CBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Tanh::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  v29[32] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tanh::eval();
  }
  uint64_t v28 = *(void **)(*(void *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tanh] Cannot compute hyperbolic tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[unary_fp] Does not support ", 28);
    v27[0] = *(void *)(*(void *)a3 + 56);
    mlx::core::operator<<(v25, v27);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29, v27);
    MEMORY[0x25A2B1480](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(float **)(*(void *)v3 + 152);
  if (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v21 = *(void *)(*(void *)v3 + 160);
    if (v21)
    {
      ldiv_t v22 = *(float **)(*(void *)a3 + 152);
      do
      {
        float v23 = *v7++;
        *v22++ = tanhf(v23);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
    uint64_t v28 = &unk_27062AEC8;
    v29[0] = mlx::core::allocator::free;
    v29[2] = &v28;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v28);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v28);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = *(void *)(*(void *)a3 + 48);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 152);
      uint64_t v13 = *(uint64_t **)v3;
      uint64_t v14 = *v13;
      uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
      do
      {
        uint64_t v16 = 0;
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v17 = v13[3];
          uint64_t v18 = v15;
          int quot = v11;
          do
          {
            ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
            int quot = v20.quot;
            v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
          }
          while (v18 != -1);
        }
        *(float *)(v12 + 4 * v11++) = tanhf(v7[(int)v16]);
      }
      while (v11 != v10);
    }
  }
}

void sub_256D7CEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void __clang_call_terminate(void *a1)
{
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265426340, MEMORY[0x263F8C060]);
}

void sub_256D7CFA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiounint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
}

void sub_256D7D0BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256D7D164(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256D7D25C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        mlx::core::array::~array((mlx::core::array *)(v4 - 16));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_256D7D398(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long *>,std::__wrap_iter<long long *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_256D7D40C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::~__func()
{
}

void *std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_27062AEC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_27062AEC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void mlx::core::anonymous namespace'::set_unary_output_data(mlx::core::_anonymous_namespace_ *this, const mlx::core::array *a2, mlx::core::array *a3)
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void **)this;
    if (!v6)
    {
      uint64_t v8 = v7[18];
      if (v8)
      {
        if (!*(void *)(v8 + 8) && ((*(void *)(*(void *)a2 + 56) ^ v7[7]) & 0xFF00000000) == 0)
        {
          mlx::core::array::copy_shared_buffer(a2, this);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void **)this;
  }
  uint64_t v9 = v7[20];
  uint64_t v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)a2 + 60) * v9));
  uint64_t v11 = *(void *)this;
  uint64_t v14 = 0;
  __n128 __p = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 3);
  char v12 = *(unsigned char *)(*(void *)this + 168);
  v15[0] = &unk_27062AEC8;
  v15[1] = mlx::core::allocator::free;
  v15[3] = v15;
  mlx::core::array::set_data((uint64_t *)a2, (uint64_t)v10, v9, &__p, v12, (uint64_t)v15);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v15);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  uint64_t v11;
  char v12;
  __n128 __p;
  uint64_t v14;
  void v15[5];
  uint64_t vars8;

  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void **)this;
    if (!v6)
    {
      uint64_t v8 = v7[18];
      if (v8)
      {
        if (!*(void *)(v8 + 8) && ((*(void *)(*(void *)a2 + 56) ^ v7[7]) & 0xFF00000000) == 0)
        {
          mlx::core::array::copy_shared_buffer(a2, this);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void **)this;
  }
  uint64_t v9 = v7[20];
  uint64_t v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)a2 + 60) * v9));
  uint64_t v11 = *(void *)this;
  uint64_t v14 = 0;
  __n128 __p = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 3);
  char v12 = *(unsigned char *)(*(void *)this + 168);
  v15[0] = &unk_27062AEC8;
  v15[1] = mlx::core::allocator::free;
  v15[3] = v15;
  mlx::core::array::set_data((uint64_t *)a2, (uint64_t)v10, v9, &__p, v12, (uint64_t)v15);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v15);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_256D7D768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_256D7D904(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A2B1740](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A2B1740](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A2B14C0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A2B14D0](v13);
  return a1;
}

void sub_256D7DB6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A2B14D0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x256D7DB4CLL);
}

void sub_256D7DBC0(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_256D7DD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

float mlx::core::detail::Erf::operator()<float>(int8x16_t a1)
{
  float v1 = fabsf(*(float *)a1.i32);
  float v2 = *(float *)a1.i32 * *(float *)a1.i32;
  if (v1 <= 0.92773) {
    return *(float *)a1.i32
  }
         + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * -0.00059676)
                                                                                         + 0.0049912)
                                                                                 * v2)
                                                                         + -0.026768)
                                                                 * v2)
                                                         + 0.11282)
                                                 * v2)
                                         + -0.37613)
                                 * v2)
                         + 0.12838)
                 * *(float *)a1.i32);
  *(float *)v3.i32 = 1.0
                   - expf(-(float)(v1
                                 - (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v1 * -0.003884) + 0.024255)
                                                                                                 + (float)((float)((float)(v1 * -0.000017285) + 0.0003832) * v2))
                                                                                         * v1)
                                                                                 + -0.10678)
                                                                         * v1)
                                                                 + -0.63485)
                                                         * v1)
                                                 + -0.12872)
                                         * v1)));
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  LODWORD(result) = vbslq_s8(v4, v3, a1).u32[0];
  return result;
}

float mlx::core::detail::ErfInv::operator()<float>(float a1)
{
  float v2 = logf((float)(a1 * (float)(0.0 - a1)) + 1.0);
  if (fabsf(v2) <= 6.125)
  {
    float v3 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * 0.0000000054388) + 0.00000014329) * v2) + 0.0000012277)
                                                                                               * v2)
                                                                                       + 0.00000011296)
                                                                               * v2)
                                                                       + -0.000056153)
                                                               * v2)
                                                       + -0.0001477)
                                               * v2)
                                       + 0.0023147)
                               * v2)
                       + 0.011539)
               * v2)
       + -0.23202;
    float v4 = 0.88623;
  }
  else
  {
    float v3 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * 3.037e-10) + 0.000000029324)
                                                                                               * v2)
                                                                                       + 0.0000012215)
                                                                               * v2)
                                                                       + 0.000028411)
                                                               * v2)
                                                       + 0.00039355)
                                               * v2)
                                       + 0.003027)
                               * v2)
                       + 0.0048319)
               * v2)
       + -0.26465;
    float v4 = 0.84002;
  }
  return (float)(v4 + (float)(v3 * v2)) * a1;
}

float mlx::core::detail::Exp::operator()<float>(float a1)
{
  float v1 = 0.0;
  if (a1 != -INFINITY)
  {
    float v1 = a1;
    if (a1 != INFINITY)
    {
      float v2 = a1 * 1.442695;
      if (v2 > 80.0) {
        float v2 = 80.0;
      }
      float v3 = fmaxf(v2, -80.0);
      float v4 = floor(v3 + 0.5);
      return (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 - v4) * 0.00015353) + 0.0013399)
                                                                                           * (float)(v3 - v4))
                                                                                   + 0.0096184)
                                                                           * (float)(v3 - v4))
                                                                   + 0.055503)
                                                           * (float)(v3 - v4))
                                                   + 0.24023)
                                           * (float)(v3 - v4))
                                   + 0.69315)
                           * (float)(v3 - v4))
                   + 1.0)
           * COERCE_FLOAT(((int)v4 << 23) + 1065353216);
    }
  }
  return v1;
}

uint64_t mlx::core::anonymous namespace'::get_binary_op_type(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 160);
  if (*(void *)(*a1 + 160) == 1)
  {
    if (v4 == 1) {
      return 0;
    }
    if (*(unsigned char *)(v3 + 168)) {
      return 1;
    }
  }
  else if (v4 == 1)
  {
    char v6 = *(unsigned char *)(v2 + 168);
    if (v6) {
      return 2;
    }
    goto LABEL_9;
  }
  char v6 = *(unsigned char *)(v2 + 168);
LABEL_9:
  if ((v6 & 2) != 0 && (*(unsigned char *)(v3 + 168) & 2) != 0 || (v6 & 4) != 0 && (*(unsigned char *)(v3 + 168) & 4) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

void mlx::core::anonymous namespace'::set_binary_op_output_data(mlx::core::array *a1, mlx::core::array *a2, mlx::core::array *this, int a4)
{
  v55[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  switch(a4)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(void *)this + 60));
      uint64_t v8 = *(void *)a1;
      uint64_t v50 = 0;
      __n128 v49 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v49, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 3);
      char v9 = *(unsigned char *)(*(void *)a1 + 168);
      v55[0] = &unk_27062AEC8;
      v55[1] = mlx::core::allocator::free;
      v55[3] = v55;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v49, v9, (uint64_t)v55);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v55);
      uint64_t v10 = (void *)v49.n128_u64[0];
      if (v49.n128_u64[0])
      {
        v49.n128_u64[1] = v49.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 1:
      uint64_t v11 = *((void *)a2 + 1);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(void **)a2;
        if (!v12)
        {
          uint64_t v14 = v13[18];
          if (v14)
          {
            if (!*(void *)(v14 + 8) && ((*(void *)(*(void *)this + 56) ^ v13[7]) & 0xFF00000000) == 0) {
              goto LABEL_54;
            }
          }
        }
      }
      else
      {
        uint64_t v13 = *(void **)a2;
      }
      uint64_t v28 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v13[20]));
      uint64_t v29 = *(void *)v5;
      uint64_t v30 = *(void *)(*(void *)v5 + 160);
      uint64_t v48 = 0;
      __n128 v47 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v47, *(const void **)(v29 + 24), *(void *)(v29 + 32), (uint64_t)(*(void *)(v29 + 32) - *(void *)(v29 + 24)) >> 3);
      char v31 = *(unsigned char *)(*(void *)v5 + 168);
      v54[0] = &unk_27062AEC8;
      v54[1] = mlx::core::allocator::free;
      v54[3] = v54;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v28, v30, &v47, v31, (uint64_t)v54);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v54);
      uint64_t v10 = (void *)v47.n128_u64[0];
      if (v47.n128_u64[0])
      {
        v47.n128_u64[1] = v47.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 2:
      uint64_t v15 = *((void *)a1 + 1);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v17 = *(void **)a1;
        if (!v16)
        {
          uint64_t v18 = v17[18];
          if (v18)
          {
            if (!*(void *)(v18 + 8) && ((*(void *)(*(void *)this + 56) ^ v17[7]) & 0xFF00000000) == 0) {
              goto LABEL_38;
            }
          }
        }
      }
      else
      {
        uint64_t v17 = *(void **)a1;
      }
      uint64_t v32 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v17[20]));
      uint64_t v33 = *(void *)a1;
      uint64_t v34 = *(void *)(*(void *)a1 + 160);
      uint64_t v46 = 0;
      __n128 __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v33 + 24), *(void *)(v33 + 32), (uint64_t)(*(void *)(v33 + 32) - *(void *)(v33 + 24)) >> 3);
      char v35 = *(unsigned char *)(*(void *)a1 + 168);
      v53[0] = &unk_27062AEC8;
      v53[1] = mlx::core::allocator::free;
      v53[3] = v53;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v32, v34, &__p, v35, (uint64_t)v53);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v53);
      uint64_t v10 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 3:
      uint64_t v19 = *((void *)a1 + 1);
      if (v19)
      {
        if (!*(void *)(v19 + 8))
        {
          uint64_t v36 = *(void *)(*(void *)a1 + 144);
          if (v36)
          {
            if (!*(void *)(v36 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_38;
            }
          }
        }
      }
      uint64_t v20 = *((void *)a2 + 1);
      if (v20)
      {
        if (!*(void *)(v20 + 8))
        {
          uint64_t v42 = *(void *)(*(void *)a2 + 144);
          if (v42)
          {
            if (!*(void *)(v42 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_54;
            }
          }
        }
      }
      uint64_t v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * *(void *)(*(void *)a1 + 160)));
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void *)(*(void *)a1 + 160);
      uint64_t v44 = 0;
      __n128 v43 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v43, *(const void **)(v22 + 24), *(void *)(v22 + 32), (uint64_t)(*(void *)(v22 + 32) - *(void *)(v22 + 24)) >> 3);
      char v24 = *(unsigned char *)(*(void *)a1 + 168);
      v52[0] = &unk_27062AEC8;
      v52[1] = mlx::core::allocator::free;
      v52[3] = v52;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v21, v23, &v43, v24, (uint64_t)v52);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v52);
      uint64_t v10 = (void *)v43.n128_u64[0];
      if (v43.n128_u64[0])
      {
        v43.n128_u64[1] = v43.n128_u64[0];
LABEL_33:
        operator delete(v10);
      }
      break;
    case 4:
      uint64_t v25 = *((void *)a1 + 1);
      if (v25
        && !*(void *)(v25 + 8)
        && (v38 = *(void *)a1, (uint64_t v39 = *(void *)(*(void *)a1 + 144)) != 0)
        && !*(void *)(v39 + 8)
        && (*(unsigned char *)(v38 + 168) & 2) != 0
        && ((*(void *)(*(void *)this + 56) ^ *(void *)(v38 + 56)) & 0xFF00000000) == 0
        && *(void *)(v38 + 48) == *(void *)(*(void *)this + 48))
      {
LABEL_38:
        float v37 = this;
        a2 = a1;
      }
      else
      {
        uint64_t v26 = *((void *)a2 + 1);
        if (!v26
          || *(void *)(v26 + 8)
          || (uint64_t v40 = *(void *)a2, (v41 = *(void *)(*(void *)a2 + 144)) == 0)
          || *(void *)(v41 + 8)
          || (*(unsigned char *)(v40 + 168) & 2) == 0
          || ((*(void *)(*(void *)this + 56) ^ *(void *)(v40 + 56)) & 0xFF00000000) != 0
          || *(void *)(v40 + 48) != *(void *)(*(void *)this + 48))
        {
          uint64_t v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                            * *(void *)(*(void *)this + 48)));
          v51[0] = &unk_27062AEC8;
          v51[1] = mlx::core::allocator::free;
          v51[3] = v51;
          mlx::core::array::set_data((int ***)this, (uint64_t)v27, (uint64_t)v51);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v51);
          return;
        }
LABEL_54:
        float v37 = this;
      }
      mlx::core::array::copy_shared_buffer(v37, a2);
      break;
    default:
      return;
  }
}

{
  mlx::core::array *v5;
  mlx::core::scheduler *v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  mlx::core::scheduler *v27;
  mlx::core::scheduler *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  mlx::core::scheduler *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  mlx::core::array *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 __p;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  void v51[4];
  void v52[4];
  void v53[4];
  void v54[4];
  void v55[5];
  uint64_t vars8;

  v55[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  switch(a4)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(void *)this + 60));
      uint64_t v8 = *(void *)a1;
      uint64_t v50 = 0;
      __n128 v49 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v49, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 3);
      char v9 = *(unsigned char *)(*(void *)a1 + 168);
      v55[0] = &unk_27062AEC8;
      v55[1] = mlx::core::allocator::free;
      v55[3] = v55;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v49, v9, (uint64_t)v55);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v55);
      uint64_t v10 = (void *)v49.n128_u64[0];
      if (v49.n128_u64[0])
      {
        v49.n128_u64[1] = v49.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 1:
      uint64_t v11 = *((void *)a2 + 1);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(void **)a2;
        if (!v12)
        {
          uint64_t v14 = v13[18];
          if (v14)
          {
            if (!*(void *)(v14 + 8) && ((*(void *)(*(void *)this + 56) ^ v13[7]) & 0xFF00000000) == 0) {
              goto LABEL_54;
            }
          }
        }
      }
      else
      {
        uint64_t v13 = *(void **)a2;
      }
      uint64_t v28 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v13[20]));
      uint64_t v29 = *(void *)v5;
      uint64_t v30 = *(void *)(*(void *)v5 + 160);
      uint64_t v48 = 0;
      __n128 v47 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v47, *(const void **)(v29 + 24), *(void *)(v29 + 32), (uint64_t)(*(void *)(v29 + 32) - *(void *)(v29 + 24)) >> 3);
      char v31 = *(unsigned char *)(*(void *)v5 + 168);
      v54[0] = &unk_27062AEC8;
      v54[1] = mlx::core::allocator::free;
      v54[3] = v54;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v28, v30, &v47, v31, (uint64_t)v54);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v54);
      uint64_t v10 = (void *)v47.n128_u64[0];
      if (v47.n128_u64[0])
      {
        v47.n128_u64[1] = v47.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 2:
      uint64_t v15 = *((void *)a1 + 1);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v17 = *(void **)a1;
        if (!v16)
        {
          uint64_t v18 = v17[18];
          if (v18)
          {
            if (!*(void *)(v18 + 8) && ((*(void *)(*(void *)this + 56) ^ v17[7]) & 0xFF00000000) == 0) {
              goto LABEL_38;
            }
          }
        }
      }
      else
      {
        uint64_t v17 = *(void **)a1;
      }
      uint64_t v32 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v17[20]));
      uint64_t v33 = *(void *)a1;
      uint64_t v34 = *(void *)(*(void *)a1 + 160);
      uint64_t v46 = 0;
      __n128 __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v33 + 24), *(void *)(v33 + 32), (uint64_t)(*(void *)(v33 + 32) - *(void *)(v33 + 24)) >> 3);
      char v35 = *(unsigned char *)(*(void *)a1 + 168);
      v53[0] = &unk_27062AEC8;
      v53[1] = mlx::core::allocator::free;
      v53[3] = v53;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v32, v34, &__p, v35, (uint64_t)v53);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v53);
      uint64_t v10 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 3:
      uint64_t v19 = *((void *)a1 + 1);
      if (v19)
      {
        if (!*(void *)(v19 + 8))
        {
          uint64_t v36 = *(void *)(*(void *)a1 + 144);
          if (v36)
          {
            if (!*(void *)(v36 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_38;
            }
          }
        }
      }
      uint64_t v20 = *((void *)a2 + 1);
      if (v20)
      {
        if (!*(void *)(v20 + 8))
        {
          uint64_t v42 = *(void *)(*(void *)a2 + 144);
          if (v42)
          {
            if (!*(void *)(v42 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_54;
            }
          }
        }
      }
      uint64_t v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * *(void *)(*(void *)a1 + 160)));
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void *)(*(void *)a1 + 160);
      uint64_t v44 = 0;
      __n128 v43 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v43, *(const void **)(v22 + 24), *(void *)(v22 + 32), (uint64_t)(*(void *)(v22 + 32) - *(void *)(v22 + 24)) >> 3);
      char v24 = *(unsigned char *)(*(void *)a1 + 168);
      v52[0] = &unk_27062AEC8;
      v52[1] = mlx::core::allocator::free;
      v52[3] = v52;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v21, v23, &v43, v24, (uint64_t)v52);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v52);
      uint64_t v10 = (void *)v43.n128_u64[0];
      if (v43.n128_u64[0])
      {
        v43.n128_u64[1] = v43.n128_u64[0];
LABEL_33:
        operator delete(v10);
      }
      break;
    case 4:
      uint64_t v25 = *((void *)a1 + 1);
      if (v25
        && !*(void *)(v25 + 8)
        && (v38 = *(void *)a1, (uint64_t v39 = *(void *)(*(void *)a1 + 144)) != 0)
        && !*(void *)(v39 + 8)
        && (*(unsigned char *)(v38 + 168) & 2) != 0
        && ((*(void *)(*(void *)this + 56) ^ *(void *)(v38 + 56)) & 0xFF00000000) == 0
        && *(void *)(v38 + 48) == *(void *)(*(void *)this + 48))
      {
LABEL_38:
        float v37 = this;
        a2 = a1;
      }
      else
      {
        uint64_t v26 = *((void *)a2 + 1);
        if (!v26
          || *(void *)(v26 + 8)
          || (uint64_t v40 = *(void *)a2, (v41 = *(void *)(*(void *)a2 + 144)) == 0)
          || *(void *)(v41 + 8)
          || (*(unsigned char *)(v40 + 168) & 2) == 0
          || ((*(void *)(*(void *)this + 56) ^ *(void *)(v40 + 56)) & 0xFF00000000) != 0
          || *(void *)(v40 + 48) != *(void *)(*(void *)this + 48))
        {
          uint64_t v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                            * *(void *)(*(void *)this + 48)));
          v51[0] = &unk_27062AEC8;
          v51[1] = mlx::core::allocator::free;
          v51[3] = v51;
          mlx::core::array::set_data((int ***)this, (uint64_t)v27, (uint64_t)v51);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v51);
          return;
        }
LABEL_54:
        float v37 = this;
      }
      mlx::core::array::copy_shared_buffer(v37, a2);
      break;
    default:
      return;
  }
}

{
  mlx::core::array *v5;
  mlx::core::scheduler *v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  mlx::core::scheduler *v27;
  mlx::core::scheduler *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  mlx::core::scheduler *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  mlx::core::array *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 __p;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  void v51[4];
  void v52[4];
  void v53[4];
  void v54[4];
  void v55[5];
  uint64_t vars8;

  v55[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  switch(a4)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(void *)this + 60));
      uint64_t v8 = *(void *)a1;
      uint64_t v50 = 0;
      __n128 v49 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v49, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 3);
      char v9 = *(unsigned char *)(*(void *)a1 + 168);
      v55[0] = &unk_27062AEC8;
      v55[1] = mlx::core::allocator::free;
      v55[3] = v55;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v49, v9, (uint64_t)v55);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v55);
      uint64_t v10 = (void *)v49.n128_u64[0];
      if (v49.n128_u64[0])
      {
        v49.n128_u64[1] = v49.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 1:
      uint64_t v11 = *((void *)a2 + 1);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(void **)a2;
        if (!v12)
        {
          uint64_t v14 = v13[18];
          if (v14)
          {
            if (!*(void *)(v14 + 8) && ((*(void *)(*(void *)this + 56) ^ v13[7]) & 0xFF00000000) == 0) {
              goto LABEL_54;
            }
          }
        }
      }
      else
      {
        uint64_t v13 = *(void **)a2;
      }
      uint64_t v28 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v13[20]));
      uint64_t v29 = *(void *)v5;
      uint64_t v30 = *(void *)(*(void *)v5 + 160);
      uint64_t v48 = 0;
      __n128 v47 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v47, *(const void **)(v29 + 24), *(void *)(v29 + 32), (uint64_t)(*(void *)(v29 + 32) - *(void *)(v29 + 24)) >> 3);
      char v31 = *(unsigned char *)(*(void *)v5 + 168);
      v54[0] = &unk_27062AEC8;
      v54[1] = mlx::core::allocator::free;
      v54[3] = v54;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v28, v30, &v47, v31, (uint64_t)v54);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v54);
      uint64_t v10 = (void *)v47.n128_u64[0];
      if (v47.n128_u64[0])
      {
        v47.n128_u64[1] = v47.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 2:
      uint64_t v15 = *((void *)a1 + 1);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v17 = *(void **)a1;
        if (!v16)
        {
          uint64_t v18 = v17[18];
          if (v18)
          {
            if (!*(void *)(v18 + 8) && ((*(void *)(*(void *)this + 56) ^ v17[7]) & 0xFF00000000) == 0) {
              goto LABEL_38;
            }
          }
        }
      }
      else
      {
        uint64_t v17 = *(void **)a1;
      }
      uint64_t v32 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * v17[20]));
      uint64_t v33 = *(void *)a1;
      uint64_t v34 = *(void *)(*(void *)a1 + 160);
      uint64_t v46 = 0;
      __n128 __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v33 + 24), *(void *)(v33 + 32), (uint64_t)(*(void *)(v33 + 32) - *(void *)(v33 + 24)) >> 3);
      char v35 = *(unsigned char *)(*(void *)a1 + 168);
      v53[0] = &unk_27062AEC8;
      v53[1] = mlx::core::allocator::free;
      v53[3] = v53;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v32, v34, &__p, v35, (uint64_t)v53);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v53);
      uint64_t v10 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        goto LABEL_33;
      }
      break;
    case 3:
      uint64_t v19 = *((void *)a1 + 1);
      if (v19)
      {
        if (!*(void *)(v19 + 8))
        {
          uint64_t v36 = *(void *)(*(void *)a1 + 144);
          if (v36)
          {
            if (!*(void *)(v36 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_38;
            }
          }
        }
      }
      uint64_t v20 = *((void *)a2 + 1);
      if (v20)
      {
        if (!*(void *)(v20 + 8))
        {
          uint64_t v42 = *(void *)(*(void *)a2 + 144);
          if (v42)
          {
            if (!*(void *)(v42 + 8)
              && ((*(void *)(*(void *)this + 56) ^ *(void *)(*(void *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_54;
            }
          }
        }
      }
      uint64_t v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                        * *(void *)(*(void *)a1 + 160)));
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void *)(*(void *)a1 + 160);
      uint64_t v44 = 0;
      __n128 v43 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v43, *(const void **)(v22 + 24), *(void *)(v22 + 32), (uint64_t)(*(void *)(v22 + 32) - *(void *)(v22 + 24)) >> 3);
      char v24 = *(unsigned char *)(*(void *)a1 + 168);
      v52[0] = &unk_27062AEC8;
      v52[1] = mlx::core::allocator::free;
      v52[3] = v52;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v21, v23, &v43, v24, (uint64_t)v52);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v52);
      uint64_t v10 = (void *)v43.n128_u64[0];
      if (v43.n128_u64[0])
      {
        v43.n128_u64[1] = v43.n128_u64[0];
LABEL_33:
        operator delete(v10);
      }
      break;
    case 4:
      uint64_t v25 = *((void *)a1 + 1);
      if (v25
        && !*(void *)(v25 + 8)
        && (v38 = *(void *)a1, (uint64_t v39 = *(void *)(*(void *)a1 + 144)) != 0)
        && !*(void *)(v39 + 8)
        && (*(unsigned char *)(v38 + 168) & 2) != 0
        && ((*(void *)(*(void *)this + 56) ^ *(void *)(v38 + 56)) & 0xFF00000000) == 0
        && *(void *)(v38 + 48) == *(void *)(*(void *)this + 48))
      {
LABEL_38:
        float v37 = this;
        a2 = a1;
      }
      else
      {
        uint64_t v26 = *((void *)a2 + 1);
        if (!v26
          || *(void *)(v26 + 8)
          || (uint64_t v40 = *(void *)a2, (v41 = *(void *)(*(void *)a2 + 144)) == 0)
          || *(void *)(v41 + 8)
          || (*(unsigned char *)(v40 + 168) & 2) == 0
          || ((*(void *)(*(void *)this + 56) ^ *(void *)(v40 + 56)) & 0xFF00000000) != 0
          || *(void *)(v40 + 48) != *(void *)(*(void *)this + 48))
        {
          uint64_t v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(void *)this + 60)
                                                                            * *(void *)(*(void *)this + 48)));
          v51[0] = &unk_27062AEC8;
          v51[1] = mlx::core::allocator::free;
          v51[3] = v51;
          mlx::core::array::set_data((int ***)this, (uint64_t)v27, (uint64_t)v51);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v51);
          return;
        }
LABEL_54:
        float v37 = this;
      }
      mlx::core::array::copy_shared_buffer(v37, a2);
      break;
    default:
      return;
  }
}

void sub_256D7E8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float mlx::core::detail::Sigmoid::operator()<float>(float a1)
{
  float v1 = 0.0;
  if (a1 != INFINITY)
  {
    float v1 = -a1;
    if (a1 != -INFINITY)
    {
      float v2 = v1 * 1.442695;
      if (v2 > 80.0) {
        float v2 = 80.0;
      }
      float v3 = fmaxf(v2, -80.0);
      float v4 = floor(v3 + 0.5);
      float v1 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 - v4) * 0.00015353)
                                                                                                 + 0.0013399)
                                                                                         * (float)(v3 - v4))
                                                                                 + 0.0096184)
                                                                         * (float)(v3 - v4))
                                                                 + 0.055503)
                                                         * (float)(v3 - v4))
                                                 + 0.24023)
                                         * (float)(v3 - v4))
                                 + 0.69315)
                         * (float)(v3 - v4))
                 + 1.0)
         * COERCE_FLOAT(((int)v4 << 23) + 1065353216);
    }
  }
  return 1.0 / (float)(v1 + 1.0);
}

uint64_t mlx::core::promote_types(int *a1, int *a2)
{
}

uint64_t mlx::core::kindof(int *a1)
{
}

uint64_t mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype()
{
  return 0x100000000;
}

uint64_t mlx::core::TypeToDtype<unsigned char>::operator mlx::core::Dtype()
{
  return 0x100000001;
}

uint64_t mlx::core::TypeToDtype<unsigned int>::operator mlx::core::Dtype()
{
  return 0x400000002;
}

uint64_t mlx::core::TypeToDtype<signed char>::operator mlx::core::Dtype()
{
  return 0x100000003;
}

uint64_t mlx::core::TypeToDtype<int>::operator mlx::core::Dtype()
{
  return 0x400000004;
}

uint64_t mlx::core::TypeToDtype<long long>::operator mlx::core::Dtype()
{
  return 0x800000005;
}

uint64_t mlx::core::TypeToDtype<float>::operator mlx::core::Dtype()
{
  return 0x400000006;
}

uint64_t mlx::core::TypeToDtype<double>::operator mlx::core::Dtype()
{
  return 0x400000006;
}

BOOL mlx::core::issubdtype(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t mlx::core::issubdtype()
{
  return 0;
}

uint64_t mlx::core::issubdtype(unsigned int *a1, unsigned int *a2)
{
}

uint64_t mlx::core::issubdtype(mlx::core *this, const Category *a2, const Category *a3)
{
}

uint64_t mlx::core::dtype_to_array_protocol@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  if (*((unsigned __int8 *)a1 + 4) <= 1u) {
    float v4 = "|";
  }
  else {
    float v4 = "<";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)v4, 1);
  mlx::core::operator<<(&v7, (int *)&v6);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a2);
  uint64_t v7 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[0] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25A2B1740](&v10);
}

void sub_256D7EC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::dtype_from_array_protocol(char *a1, uint64_t a2)
{
  v8[0] = a1;
  v8[1] = a2;
  if (a2 != 2)
  {
    if (a2 != 3) {
      goto LABEL_26;
    }
    ++a1;
  }
  int v2 = a1[1];
  int v3 = *a1;
  if (v3 > 104)
  {
    if (v3 == 105)
    {
      if (v2 != 49)
      {
        if (v2 == 56) {
          return 0x800000005;
        }
        if (v2 != 52) {
          goto LABEL_26;
        }
        return 0x400000004;
      }
      return 0x100000003;
    }
    else
    {
      if (v3 != 117) {
        goto LABEL_26;
      }
      if (v2 == 49)
      {
        return 0x100000001;
      }
      else
      {
        if (v2 != 52) {
          goto LABEL_26;
        }
        return 0x400000002;
      }
    }
  }
  else
  {
    if (v3 != 98)
    {
      if (v3 == 102 && v2 == 52) {
        return 0x400000006;
      }
LABEL_26:
      exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string<std::string_view,0>(&v6, (uint64_t)v8);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("[from_str] Invalid array protocol type-string: ", &v6, &v7);
      std::logic_error::logic_error(exception, &v7);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    if (v2 != 49)
    {
      if (v2 != 52)
      {
        if (v2 != 56) {
          goto LABEL_26;
        }
        return 0x800000005;
      }
      return 0x400000004;
    }
    return 0x100000000;
  }
}

void sub_256D7EE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  std::string v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *std::string::basic_string<std::string_view,0>(void *__dst, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  float v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((unsigned char *)v5 + v3) = 0;
  return __dst;
}

char *mlx::core::AsStrided::eval(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] - v3 != 16) {
    mlx::core::AsStrided::eval();
  }
  char v5 = *(unsigned char *)(*(void *)v3 + 168);
  if ((v5 & 2) == 0)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "AsStrided must be used with row contiguous arrays only.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7] - v6;
  unsigned int v8 = (v7 >> 3) - 1;
  if ((v8 & 0x80000000) != 0)
  {
    char v25 = v5 & 0xF8;
    char v24 = 1;
    char v26 = 2;
LABEL_21:
    LOBYTE(v9) = 4;
    goto LABEL_22;
  }
  uint64_t v9 = (v7 >> 3);
  int v10 = 1;
  uint64_t v11 = (int *)a1[3];
  uint64_t v12 = (uint64_t *)a1[6];
  uint64_t v13 = v11;
  char v14 = 1;
  uint64_t v15 = 1;
  uint64_t v16 = 1;
  do
  {
    uint64_t v17 = v8;
    BOOL v18 = v15 == *(void *)(v6 + 8 * v8) || v11[v8] == 1;
    v10 &= v18;
    uint64_t v19 = *v12++;
    BOOL v22 = v16 == v19;
    uint64_t v21 = *v13++;
    uint64_t v20 = v21;
    BOOL v22 = v22 || v20 == 1;
    char v23 = v22;
    v14 &= v23;
    v15 *= v11[v17];
    v16 *= v20;
    unsigned int v8 = v17 - 1;
    --v9;
  }
  while (v9);
  char v24 = (v10 | v14) & 1;
  char v25 = v5 & 0xF8;
  if (v10) {
    char v26 = 2;
  }
  else {
    char v26 = 0;
  }
  if (v14) {
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v27 = *(void *)(*a3 + 48);
  uint64_t v28 = a1[9];
  return mlx::core::array::copy_shared_buffer(a3, v3, (uint64_t)(a1 + 6), v9 | (v25 | v26 | v24), v27, v28);
}

void sub_256D7F0FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::eval(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void v17[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t ***)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Broadcast::eval();
  }
  if (*(void *)(*a3 + 48))
  {
    unint64_t v5 = (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 2;
    uint64_t v15 = 0;
    std::vector<unsigned long>::vector(__p, v5, &v15);
    uint64_t v6 = (void *)*a3;
    unint64_t v7 = *v3;
    uint64_t v8 = **v3;
    uint64_t v9 = ((*v3)[1] - v8) >> 2;
    uint64_t v10 = (v9 - 1);
    if ((int)v9 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p[0] + 8 * (int)(((v6[1] - *v6) >> 2) - v9);
      do
      {
        if (*(_DWORD *)(v8 + 4 * v10) == 1) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = *(void *)(v7[3] + 8 * v10);
        }
        *(void *)&v11[8 * v10] = v12;
      }
      while (v10-- > 0);
    }
    if (v6[6] <= (unint64_t)v7[6]) {
      char v14 = *((unsigned char *)v7 + 168);
    }
    else {
      char v14 = v7[21] & 0xF9;
    }
    mlx::core::array::copy_shared_buffer(a3, (uint64_t)v3, (uint64_t)__p, v14, v7[20], 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v17[0] = &unk_27062AEC8;
    v17[1] = mlx::core::allocator::free;
    v17[3] = v17;
    mlx::core::array::set_data((int ***)a3, 0, (uint64_t)v17);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v17);
  }
}

void sub_256D7F298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

char *mlx::core::Copy::eval(int a1, uint64_t a2, mlx::core::array *this)
{
  uint64_t v3 = *(const mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - (void)v3 != 16) {
    mlx::core::Copy::eval();
  }
  return mlx::core::array::copy_shared_buffer(this, v3);
}

char *mlx::core::CustomVJP::eval(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v3 = (uint64_t)(a2[1] - *a2) >> 4;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v6 = v5 - *a3;
  if (v3 <= v6 >> 4) {
    mlx::core::CustomVJP::eval();
  }
  if (v5 != v4)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 16 * (int)(v3 - (v6 >> 4));
    do
    {
      __n128 result = mlx::core::array::copy_shared_buffer((mlx::core::array *)(v4 + v9), (const mlx::core::array *)(*a2 + v11 + v9));
      ++v10;
      uint64_t v4 = *a3;
      v9 += 16;
    }
    while (v10 < (a3[1] - *a3) >> 4);
  }
  return result;
}

char *mlx::core::Depends::eval(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (a2[1] - *a2 <= (unint64_t)(v4 - *a3)) {
    mlx::core::Depends::eval();
  }
  if (v4 != v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      __n128 result = mlx::core::array::copy_shared_buffer((mlx::core::array *)(v3 + v7), (const mlx::core::array *)(*a2 + v7));
      ++v8;
      uint64_t v3 = *a3;
      v7 += 16;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  return result;
}

void *mlx::core::NumberOfElements::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  v16[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::NumberOfElements::eval();
  }
  uint64_t v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]));
  v16[0] = &unk_27062AEC8;
  v16[1] = mlx::core::allocator::free;
  v16[3] = v16;
  mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v16);
  __n128 result = std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v16);
  unint64_t v8 = *(int **)(a1 + 24);
  uint64_t v9 = *(int **)(a1 + 32);
  double v10 = 1.0;
  while (v8 != v9)
  {
    __n128 result = (void *)mlx::core::array::shape(*(mlx::core::array **)a2, *v8);
    double v10 = v10 * (double)(int)result;
    ++v8;
  }
  double v11 = 1.0 / v10;
  if (!*(unsigned char *)(a1 + 48)) {
    double v11 = v10;
  }
  uint64_t v12 = *a3;
  switch(*((_DWORD *)*a3 + 14))
  {
    case 0:
      LOBYTE(v13) = v11 != 0.0;
      goto LABEL_11;
    case 1:
    case 3:
      int v13 = (int)v11;
LABEL_11:
      *(unsigned char *)v12[19] = v13;
      return result;
    case 2:
      int v14 = v11;
      goto LABEL_13;
    case 4:
      int v14 = (int)v11;
LABEL_13:
      *v12[19] = v14;
      break;
    case 5:
      *(void *)v12[19] = (uint64_t)v11;
      break;
    case 6:
      float v15 = v11;
      *(float *)v12[19] = v15;
      break;
    default:
      return result;
  }
  return result;
}

void sub_256D7F5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::prepare_reshape(uint64_t **a1@<X1>, const mlx::core::array *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (!(*a1)[6] || (v6[21] & 2) != 0)
  {
    uint64_t v32 = *(void *)a2;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v33 = *(const void **)(v32 + 24);
    uint64_t v34 = *(void *)(v32 + 32);
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a3 + 8), v33, v34, (v34 - (uint64_t)v33) >> 3);
    return;
  }
  if ((*a1)[1] == *v6)
  {
    unint64_t v35 = (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2;
    __n128 __p = 0;
    std::vector<unsigned long>::vector(&v42, v35, &__p);
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a3 + 8), v42, (uint64_t)v43, (v43 - (unsigned char *)v42) >> 3);
    goto LABEL_57;
  }
  mlx::core::collapse_contiguous_dims<mlx::core::array const&,void>(a1, &v42);
  uint64_t v38 = v44;
  __n128 __p = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (*(void *)(*(void *)a2 + 8) == **(void **)a2)
  {
    uint64_t v12 = 0;
    uint64_t v36 = 0;
    char v37 = 0;
    goto LABEL_54;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  while (1)
  {
    int v9 = mlx::core::array::shape(a2, v7);
    if (v8 < (unint64_t)((v43 - (unsigned char *)v42) >> 2))
    {
      int v10 = *((_DWORD *)v42 + v8);
      int v11 = v10 / v9;
      if (!(v10 % v9))
      {
        *((_DWORD *)v42 + v8) = v11;
        uint64_t v20 = *(void *)(*v38 + 8 * v8) * v11;
        uint64_t v21 = v40;
        if (v40 >= v41)
        {
          char v24 = (char *)__p;
          uint64_t v25 = (v40 - (unsigned char *)__p) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v41 - (unsigned char *)__p;
          if ((v41 - (unsigned char *)__p) >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v41, v28);
            char v24 = (char *)__p;
            uint64_t v21 = v40;
          }
          else
          {
            uint64_t v29 = 0;
          }
          uint64_t v30 = &v29[8 * v25];
          *(void *)uint64_t v30 = v20;
          uint64_t v12 = (uint64_t)(v30 + 8);
          while (v21 != v24)
          {
            uint64_t v31 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v30 - 1) = v31;
            v30 -= 8;
          }
          __n128 __p = v30;
          uint64_t v40 = (char *)v12;
          uint64_t v41 = &v29[8 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(void *)uint64_t v40 = v20;
          uint64_t v12 = (uint64_t)(v21 + 8);
        }
        uint64_t v40 = (char *)v12;
        if (*((_DWORD *)v42 + v8) == 1) {
          ++v8;
        }
        goto LABEL_28;
      }
    }
    uint64_t v12 = (uint64_t)v40;
    if (v9 != 1) {
      break;
    }
    if (v40 >= v41)
    {
      int v13 = (char *)__p;
      uint64_t v14 = (v40 - (unsigned char *)__p) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v41 - (unsigned char *)__p;
      if ((v41 - (unsigned char *)__p) >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        BOOL v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v41, v17);
        int v13 = (char *)__p;
        uint64_t v19 = v40;
      }
      else
      {
        BOOL v18 = 0;
        uint64_t v19 = v40;
      }
      BOOL v22 = &v18[8 * v14];
      *(void *)BOOL v22 = *((void *)v40 - 1);
      uint64_t v12 = (uint64_t)(v22 + 8);
      while (v19 != v13)
      {
        uint64_t v23 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v22 - 1) = v23;
        v22 -= 8;
      }
      __n128 __p = v22;
      uint64_t v40 = (char *)v12;
      uint64_t v41 = &v18[8 * v17];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(void *)uint64_t v40 = *((void *)v40 - 1);
      v12 += 8;
    }
    uint64_t v40 = (char *)v12;
LABEL_28:
    if (++v7 >= (unint64_t)((uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2))
    {
      char v37 = 0;
      goto LABEL_53;
    }
  }
  char v37 = 1;
LABEL_53:
  uint64_t v36 = __p;
LABEL_54:
  *(unsigned char *)a3 = v37;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a3 + 8), v36, v12, (v12 - (uint64_t)v36) >> 3);
  if (__p)
  {
    uint64_t v40 = (char *)__p;
    operator delete(__p);
  }
  __n128 __p = &v44;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_57:
  if (v42)
  {
    __n128 v43 = v42;
    operator delete(v42);
  }
}

void sub_256D7F99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::collapse_contiguous_dims<mlx::core::array const&,void>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  v11[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = &v6;
  char v10 = 0;
  uint64_t v5 = (uint64_t **)operator new(0x10uLL);
  uint64_t v6 = v5;
  int v8 = (char *)(v5 + 2);
  void *v5 = v4;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)(v5 + 2);
  mlx::core::collapse_contiguous_dims(&v6, a2);
  int v9 = &v6;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256D7FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<int>,std::vector<std::vector<unsigned long>>>::~tuple(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

char *mlx::core::Reshape::shared_buffer_reshape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(unsigned char *)(*(void *)a2 + 168);
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = *(int **)*a4;
    uint64_t v6 = *(int **)(*a4 + 8);
    uint64_t v7 = v5 + 1;
    if (v5 != v6 && v7 != v6)
    {
      int v9 = *v5;
      char v10 = v5 + 1;
      do
      {
        int v12 = *v10++;
        int v11 = v12;
        BOOL v13 = v9 < v12;
        if (v9 <= v12) {
          int v9 = v11;
        }
        if (v13) {
          uint64_t v5 = v7;
        }
        uint64_t v7 = v10;
      }
      while (v10 != v6);
    }
    unint64_t v14 = *(void *)(*a4 + 48);
    if (v14 >= 2) {
      char v15 = 4 * (v14 == *v5);
    }
    else {
      char v15 = 4;
    }
    char v4 = v15 | v4 & 0xFB;
  }
  return mlx::core::array::copy_shared_buffer(a4, a2, a3, v4, *(void *)(*(void *)a2 + 160), 0);
}

void mlx::core::Split::eval(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 16) {
    mlx::core::Split::eval();
  }
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v37, 1uLL, &__x);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v37, (uint64_t)v37.__end_, *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  end = v37.__end_;
  if (v37.__end_ != v37.__begin_)
  {
    unint64_t v7 = 0;
    end = v37.__begin_;
    do
    {
      uint64_t v8 = *(void *)(*(void *)v3 + 24);
      int v9 = (int ***)(*a3 + 16 * v7);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)v3 + 168) | 6;
      int v11 = **v9;
      unint64_t v12 = (char *)(*v9)[1] - (char *)v11;
      int v13 = (v12 >> 2) - 1;
      if (v13 < 0) {
        goto LABEL_29;
      }
      uint64_t v14 = (v12 >> 2);
      char v15 = *(uint64_t **)(*(void *)v3 + 24);
      uint64_t v16 = *(void *)(*(void *)v3 + 160);
      unint64_t v17 = **v9;
      uint64_t v18 = 1;
      uint64_t v19 = 1;
      uint64_t v20 = 1;
      do
      {
        unsigned int v21 = v10;
        uint64_t v23 = *v15++;
        uint64_t v22 = v23;
        uint64_t v25 = *v17++;
        uint64_t v24 = v25;
        BOOL v27 = v22 == v19 || v24 == 1;
        if ((v27 & (v21 >> 2)) != 0) {
          int v28 = 4;
        }
        else {
          int v28 = 0;
        }
        uint64_t v29 = v11[v13];
        BOOL v31 = *(void *)(v8 + 8 * v13) == v18 || v29 == 1;
        if ((v31 & (v21 >> 1)) != 0) {
          int v32 = 2;
        }
        else {
          int v32 = 0;
        }
        unsigned int v10 = v28 | v21 & 0xFFFFFFF9 | v32;
        v19 *= v24;
        v18 *= v29;
        if (v22) {
          uint64_t v33 = v24;
        }
        else {
          uint64_t v33 = 1;
        }
        v20 *= v33;
        --v13;
        --v14;
      }
      while (v14);
      if (v20 == 1)
      {
LABEL_29:
        char v34 = v10 | 1;
        uint64_t v35 = 1;
      }
      else
      {
        char v34 = v28 & 0xFE | v21 & 0xF8 | v32 & 0xFE | v21 & ((v32 | v28) != 0);
        if (v20 == v16) {
          uint64_t v35 = *(void *)(*(void *)v3 + 160);
        }
        else {
          uint64_t v35 = v20;
        }
        if (v20 == v16) {
          char v34 = v28 | v21 & 0xF9 | v32;
        }
      }
      mlx::core::array::copy_shared_buffer((uint64_t *)(*a3 + 16 * v7), v3, *(void *)v3 + 24, v34, v35, *(void *)(v8 + 8 * *(int *)(a1 + 48)) * end[v7]);
      ++v7;
      end = v37.__begin_;
    }
    while (v7 < v37.__end_ - v37.__begin_);
  }
  if (end)
  {
    v37.__end_ = end;
    operator delete(end);
  }
}

void sub_256D7FD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Slice::prepare_slice(mlx::core::Slice *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = ((*a2)[1] - **a2) >> 2;
  uint64_t v22 = 0;
  std::vector<long long>::vector(&__p, v6, &v22);
  uint64_t v8 = **a2;
  uint64_t v7 = (*a2)[1];
  uint64_t v9 = v7 - v8;
  if (v7 == v8)
  {
    uint64_t v11 = 0;
    LOBYTE(v10) = 0;
  }
  else
  {
    int v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = v9 >> 2;
    int v13 = (int *)*((void *)this + 3);
    uint64_t v14 = (uint64_t *)(*a2)[3];
    char v15 = (int *)*((void *)this + 9);
    uint64_t v16 = __p;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    do
    {
      uint64_t v18 = *v13++;
      uint64_t v17 = v18;
      uint64_t v20 = *v14++;
      uint64_t v19 = v20;
      uint64_t v21 = *v15++;
      v11 += v19 * v17;
      *v16++ = v19 * v21;
      v10 |= v21 >> 31;
      --v12;
    }
    while (v12);
  }
  *(unsigned char *)a3 = v10;
  *(void *)(a3 + 8) = v11;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a3 + 16), __p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
}

void sub_256D7FE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *mlx::core::Slice::shared_buffer_slice(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(void *)*a5;
  unint64_t v9 = *(void *)(*a5 + 8) - v8;
  int v10 = (v9 >> 2) - 1;
  if (v10 < 0)
  {
    unint64_t v30 = 257;
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v11 = (v9 >> 2);
    uint64_t v12 = 1;
    int v13 = *a3;
    uint64_t v14 = *(int **)*a5;
    uint64_t v15 = 1;
    int v16 = 1;
    LODWORD(v17) = 1;
    uint64_t v18 = 1;
    do
    {
      uint64_t v20 = *v13++;
      uint64_t v19 = v20;
      BOOL v23 = v20 == v15;
      uint64_t v22 = *v14++;
      uint64_t v21 = v22;
      BOOL v23 = v23 || v21 == 1;
      int v24 = v23;
      uint64_t v17 = v17 & v24;
      uint64_t v25 = *(int *)(v8 + 4 * v10);
      BOOL v27 = (*a3)[v10] == v12 || v25 == 1;
      v16 &= v27;
      v15 *= v21;
      v12 *= v25;
      if (v19) {
        uint64_t v28 = v21;
      }
      else {
        uint64_t v28 = 1;
      }
      v18 *= v28;
      --v10;
      --v11;
    }
    while (v11);
    uint64_t v29 = 256;
    if (!v16) {
      uint64_t v29 = 0;
    }
    unint64_t v30 = v29 | v17;
  }
  int v31 = *(unsigned __int8 *)(*(void *)a2 + 168);
  int v32 = (4 * (v30 >> 8)) | (2 * v30) | v31 & 0xFFFFFFF9;
  if (v18 == 1)
  {
    LOBYTE(v30) = (4 * BYTE1(v30)) | (2 * v30) | v31 & 0xF9 | 1;
  }
  else
  {
    LODWORD(v30) = (4 * (v30 >> 8)) | (2 * v30) | v31 & 0xFFFFFFF8 | (v30 | (v30 >> 8)) & v31;
    if (v18 == *(void *)(*(void *)a2 + 160)) {
      LOBYTE(v30) = v32;
    }
  }
  return mlx::core::array::copy_shared_buffer(a5, a2, (uint64_t)a3, v30, v18, a4);
}

void mlx::core::SliceUpdate::prepare_slice(mlx::core::SliceUpdate *this@<X0>, const mlx::core::array *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2;
  uint64_t v19 = 0;
  std::vector<long long>::vector(&__p, v6, &v19);
  uint64_t v7 = *(void *)(*(void *)a2 + 8) - **(void **)a2;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    int v10 = (int *)*((void *)this + 3);
    uint64_t v11 = *(uint64_t **)(*(void *)a2 + 24);
    uint64_t v12 = (int *)*((void *)this + 9);
    int v13 = __p;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      uint64_t v15 = *v10++;
      uint64_t v14 = v15;
      uint64_t v17 = *v11++;
      uint64_t v16 = v17;
      v8 += v17 * v14;
      uint64_t v18 = *v12++;
      *v13++ = v16 * v18;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a3 + 1, __p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_256D800A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *mlx::core::StopGradient::eval(int a1, uint64_t a2, mlx::core::array *this)
{
  uint64_t v3 = *(const mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - (void)v3 != 16) {
    mlx::core::StopGradient::eval();
  }
  return mlx::core::array::copy_shared_buffer(this, v3);
}

void mlx::core::Transpose::eval(uint64_t a1, uint64_t *a2, mlx::core::array *a3)
{
  if (a2[1] - *a2 != 16) {
    mlx::core::Transpose::eval();
  }
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(void *)(*(void *)a3 + 8) - **(void **)a3) >> 2);
  uint64_t v6 = *a2;
  uint64_t v7 = *(int **)(a1 + 24);
  uint64_t v8 = *(void *)*a2;
  uint64_t v9 = *(void *)(a1 + 32) - (void)v7;
  if (v9)
  {
    unint64_t v10 = v9 >> 2;
    uint64_t v11 = *(void *)(v8 + 24);
    uint64_t v12 = __p[0];
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      uint64_t v13 = *v7++;
      *v12++ = *(void *)(v11 + 8 * v13);
      --v10;
    }
    while (v10);
  }
  unsigned int v14 = *(unsigned __int8 *)(v8 + 168);
  if ((v14 & 1) != 0 && *(void *)(v8 + 160) == *(void *)(v8 + 48))
  {
    v14 |= 6u;
    unint64_t v15 = *(void *)(*(void *)a3 + 8) - **(void **)a3;
    if (v15)
    {
      unint64_t v26 = (uint64_t *)v6;
      unint64_t v16 = 0;
      int v17 = (v15 >> 2) - 1;
      uint64_t v18 = 1;
      uint64_t v19 = 1;
      do
      {
        BOOL v20 = *((void *)__p[0] + v16) == v19 || mlx::core::array::shape(a3, v16) == 1;
        if ((v20 & (v14 >> 2)) != 0) {
          int v21 = 4;
        }
        else {
          int v21 = 0;
        }
        int v22 = mlx::core::array::shape(a3, v16);
        BOOL v23 = *((void *)__p[0] + v17) == v18 || mlx::core::array::shape(a3, v17) == 1;
        int v24 = mlx::core::array::shape(a3, v17);
        v19 *= v22;
        if ((v23 & (v14 >> 1)) != 0) {
          int v25 = 2;
        }
        else {
          int v25 = 0;
        }
        unsigned int v14 = v21 | v14 & 0xFFFFFFF9 | v25;
        v18 *= v24;
        ++v16;
        --v17;
      }
      while (v16 < (uint64_t)(*(void *)(*(void *)a3 + 8) - **(void **)a3) >> 2);
      uint64_t v6 = (uint64_t)v26;
      uint64_t v8 = *v26;
    }
  }
  mlx::core::array::copy_shared_buffer((uint64_t *)a3, v6, (uint64_t)__p, v14, *(void *)(v8 + 160), 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256D802EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_256D80374(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::collapse_contiguous_dims(uint64_t ***a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if ((unint64_t)v6 >= v13)
      {
        uint64_t v6 = (void *)std::vector<std::vector<unsigned long>>::__emplace_back_slow_path<std::vector<unsigned long> const&>(&v11, (uint64_t)(v7 + 3));
      }
      else
      {
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, (const void *)v7[3], v7[4], (v7[4] - v7[3]) >> 3);
        v6 += 3;
      }
      uint64_t v12 = v6;
      v3 += 2;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
    uint64_t v8 = v11;
  }
  uint64_t v9 = *v3;
  memset(v10, 0, sizeof(v10));
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v10, v8, (uint64_t)v6, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v8) >> 3));
  mlx::core::collapse_contiguous_dims<unsigned long>(v9, (uint64_t)v10, a2);
  unsigned int v14 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  unsigned int v14 = (void **)&v11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_256D804A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void mlx::core::collapse_contiguous_dims<unsigned long>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __n128 __p = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  if (a1[1] != *a1)
  {
    char v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, 1uLL);
    *(_DWORD *)char v4 = 0;
    uint64_t v6 = v4 + 4;
    __n128 __p = v4;
    uint64_t v83 = &v4[4 * v5];
    uint64_t v82 = v4 + 4;
    uint64_t v7 = *a1;
    if ((unint64_t)(a1[1] - *a1) < 5)
    {
      int v21 = v6;
    }
    else
    {
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *(void **)a2;
        unint64_t v10 = *(void **)(a2 + 8);
        if (*(void **)a2 != v10)
        {
          uint64_t v11 = *(int *)(v7 + 4 * v8);
          while (*(void *)(*v9 + 8 * v8) * v11 == *(void *)(*v9 + 8 * (v8 - 1)))
          {
            v9 += 3;
            if (v9 == v10) {
              goto LABEL_26;
            }
          }
          if (v6 >= v83)
          {
            unint64_t v13 = (char *)__p;
            uint64_t v14 = (v6 - (unsigned char *)__p) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v83 - (unsigned char *)__p;
            if ((v83 - (unsigned char *)__p) >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v17);
              unint64_t v13 = (char *)__p;
              uint64_t v6 = v82;
            }
            else
            {
              uint64_t v18 = 0;
            }
            uint64_t v19 = &v18[4 * v14];
            *(_DWORD *)uint64_t v19 = -1;
            uint64_t v12 = v19 + 4;
            while (v6 != v13)
            {
              int v20 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            __n128 __p = v19;
            uint64_t v82 = v12;
            uint64_t v83 = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v6 = -1;
            uint64_t v12 = v6 + 4;
          }
          uint64_t v82 = v12;
          uint64_t v6 = v12;
        }
LABEL_26:
        if (v6 >= v83)
        {
          int v22 = (char *)__p;
          uint64_t v23 = (v6 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v83 - (unsigned char *)__p;
          if ((v83 - (unsigned char *)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            BOOL v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v26);
            int v22 = (char *)__p;
            uint64_t v6 = v82;
          }
          else
          {
            BOOL v27 = 0;
          }
          uint64_t v28 = &v27[4 * v23];
          *(_DWORD *)uint64_t v28 = v8;
          int v21 = v28 + 4;
          while (v6 != v22)
          {
            int v29 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __n128 __p = v28;
          uint64_t v82 = v21;
          uint64_t v83 = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v6 = v8;
          int v21 = v6 + 4;
        }
        uint64_t v82 = v21;
        ++v8;
        uint64_t v7 = *a1;
        uint64_t v6 = v21;
      }
      while (v8 < (a1[1] - *a1) >> 2);
    }
    if (v21 >= v83)
    {
      int v31 = (char *)__p;
      uint64_t v32 = (v21 - (unsigned char *)__p) >> 2;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v83 - (unsigned char *)__p;
      if ((v83 - (unsigned char *)__p) >> 1 > v33) {
        unint64_t v33 = v34 >> 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v35);
        int v31 = (char *)__p;
        int v21 = v82;
      }
      else
      {
        uint64_t v36 = 0;
      }
      std::vector<int> v37 = &v36[4 * v32];
      uint64_t v38 = &v36[4 * v35];
      *(_DWORD *)std::vector<int> v37 = -1;
      unint64_t v30 = v37 + 4;
      while (v21 != v31)
      {
        int v39 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      __n128 __p = v37;
      uint64_t v82 = v30;
      uint64_t v83 = v38;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(_DWORD *)int v21 = -1;
      unint64_t v30 = v21 + 4;
    }
    uint64_t v82 = v30;
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<std::vector<unsigned long>>::vector(v77, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v40 = (int *)__p;
  if (v82 != __p)
  {
    uint64_t v41 = 0;
    int v42 = 0;
    do
    {
      int v43 = *(_DWORD *)(*a1 + 4 * v40[v41]);
      int v44 = v40[v42 + 1];
      if (v44 != -1)
      {
        uint64_t v45 = &v40[v42 + 2];
        do
        {
          v43 *= *(_DWORD *)(*a1 + 4 * v44);
          int v46 = *v45++;
          int v44 = v46;
          ++v42;
        }
        while (v46 != -1);
      }
      __n128 v47 = v79;
      if (v79 >= v80)
      {
        __n128 v49 = (char *)v78;
        uint64_t v50 = (v79 - (unsigned char *)v78) >> 2;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = v80 - (unsigned char *)v78;
        if ((v80 - (unsigned char *)v78) >> 1 > v51) {
          unint64_t v51 = v52 >> 1;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v53);
          __n128 v49 = (char *)v78;
          __n128 v47 = v79;
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = &v54[4 * v50];
        *(_DWORD *)unint64_t v55 = v43;
        uint64_t v48 = v55 + 4;
        while (v47 != v49)
        {
          int v56 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v55 - 1) = v56;
          v55 -= 4;
        }
        uint64_t v78 = v55;
        uint64_t v79 = v48;
        uint64_t v80 = &v54[4 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v79 = v43;
        uint64_t v48 = v47 + 4;
      }
      uint64_t v79 = v48;
      uint64_t v57 = *(void **)a2;
      if (*(void *)(a2 + 8) != *(void *)a2)
      {
        unint64_t v58 = 0;
        do
        {
          uint64_t v59 = v77[0] + 24 * v58;
          uint64_t v60 = *((int *)__p + v42);
          uint64_t v61 = v57[3 * v58];
          unint64_t v63 = (void **)(v59 + 8);
          ldiv_t v62 = *(void **)(v59 + 8);
          uint64_t v65 = (void *)(v59 + 16);
          unint64_t v64 = *(void *)(v59 + 16);
          if ((unint64_t)v62 >= v64)
          {
            uint64_t v67 = *(void **)v59;
            uint64_t v68 = ((uint64_t)v62 - *(void *)v59) >> 3;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v70 = v64 - (void)v67;
            if (v70 >> 2 > v69) {
              unint64_t v69 = v70 >> 2;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              int v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v65, v71);
              ldiv_t v62 = *v63;
              uint64_t v67 = *(void **)v59;
            }
            else
            {
              int v72 = 0;
            }
            ldiv_t v73 = &v72[8 * v68];
            *(void *)ldiv_t v73 = *(void *)(v61 + 8 * v60);
            unint64_t v66 = v73 + 8;
            while (v62 != v67)
            {
              uint64_t v74 = *--v62;
              *((void *)v73 - 1) = v74;
              v73 -= 8;
            }
            *(void *)uint64_t v59 = v73;
            *unint64_t v63 = v66;
            *uint64_t v65 = &v72[8 * v71];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *ldiv_t v62 = *(void *)(v61 + 8 * v60);
            unint64_t v66 = v62 + 1;
          }
          *unint64_t v63 = v66;
          ++v58;
          uint64_t v57 = *(void **)a2;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) > v58);
      }
      v42 += 2;
      uint64_t v41 = v42;
      uint64_t v40 = (int *)__p;
    }
    while (v42 < (unint64_t)((v82 - (unsigned char *)__p) >> 2));
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIiNS_9allocatorIiEEEENS3_INS3_ImNS4_ImEEEENS4_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS6_SA_EJEJEJRS6_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v78, v77);
  int v84 = (void **)v77;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v84);
  if (v78)
  {
    uint64_t v79 = (char *)v78;
    operator delete(v78);
  }
  if (__p)
  {
    uint64_t v82 = (char *)__p;
    operator delete(__p);
  }
}

void sub_256D80ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned long>>::__emplace_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_256D80C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_256D80F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIiNS_9allocatorIiEEEENS3_INS3_ImNS4_ImEEEENS4_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS6_SA_EJEJEJRS6_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_256D810EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256D81170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_256D81230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      size_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_256D81334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begiunint64_t n = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    unint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    size_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    int v21 = &__src[4 * a5];
    uint64_t v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    unint64_t v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  int v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_256D81528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  begiunint64_t n = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<int>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  long long v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    std::vector<int>::pointer v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_256D81690(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::pointer v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256D8170C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_256D81784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::load_safetensors()
{
  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "[load_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

{
  void *exception;

  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "[load_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256D817E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_256D81844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::save_safetensors()
{
  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "[save_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

{
  void *exception;

  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "[save_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256D818A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_256D818FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArgSort::eval();
  }
  uint64_t v221 = *(mlx::core::array **)a2;
  switch(*(_DWORD *)(*(void *)v3 + 56))
  {
    case 0:
      int v4 = *(_DWORD *)(a1 + 20);
      size_t v5 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v5, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      std::vector<int>::pointer v6 = *(const void ***)v3;
      if (v4 < 0) {
        v4 += (unint64_t)((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2;
      }
      unint64_t v7 = (unint64_t)v6[6];
      int v8 = mlx::core::array::shape(v3, v4);
      int v9 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v9, (uint64_t)v9[1], ((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2);
      uint64_t v10 = (char *)v226 + 4 * v4;
      int64_t v11 = v227 - (v10 + 4);
      if (v227 != v10 + 4) {
        memmove((char *)v226 + 4 * v4, v10 + 4, v227 - (v10 + 4));
      }
      v227 = &v10[v11];
      int64_t v12 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v12[3], (uint64_t)v12[4], ((unsigned char *)v12[4] - (unsigned char *)v12[3]) >> 3);
      uint64_t v13 = v4;
      unint64_t v14 = (char *)__p + 8 * v4;
      int64_t v15 = v224 - (v14 + 8);
      if (v224 != v14 + 8) {
        memmove(v14, v14 + 8, v224 - (v14 + 8));
      }
      int v224 = &v14[v15];
      unint64_t v16 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v13);
      int v17 = mlx::core::array::shape(v3, v13);
      if (v7 >= v8)
      {
        uint64_t v18 = 0;
        unint64_t v19 = v16 * v17;
        unint64_t v20 = v7 / v8;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        unint64_t v214 = v20;
        do
        {
          int v21 = (int *)v226;
          unint64_t v22 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v23 = 0;
          uint64_t v24 = (v22 - 1);
          if ((int)v22 - 1 >= 0)
          {
            uint64_t v25 = __p;
            int quot = v18;
            do
            {
              ldiv_t v27 = ldiv(quot, v21[v24]);
              int quot = v27.quot;
              v23 += v25[v24--] * v27.rem;
            }
            while (v24 != -1);
          }
          uint64_t v28 = *(void *)(*(void *)v221 + 152);
          uint64_t v29 = (unsigned int *)&(*a3)[19][v23];
          if (v19)
          {
            uint64_t v30 = 0;
            unsigned int v31 = 0;
            do
            {
              v29[v30] = v31++;
              v30 += v16;
            }
            while (v19 != v30);
          }
          uint64_t v229 = v28 + v23;
          unint64_t v230 = v16;
          if ((int)(v19 / v16) <= 128)
          {
          }
          else
          {
            uint64_t v32 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v19 / v16));
            if (v32) {
              operator delete(v32);
            }
          }
          ++v18;
        }
        while (v18 != v214);
      }
      goto LABEL_156;
    case 1:
      int v124 = *(_DWORD *)(a1 + 20);
      unsigned int v125 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v125, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      int v126 = *(const void ***)v3;
      if (v124 < 0) {
        v124 += (unint64_t)((unsigned char *)v126[1] - (unsigned char *)*v126) >> 2;
      }
      unint64_t v127 = (unint64_t)v126[6];
      int v128 = mlx::core::array::shape(v3, v124);
      int v129 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v129, (uint64_t)v129[1], ((unsigned char *)v129[1] - (unsigned char *)*v129) >> 2);
      BOOL v130 = (char *)v226 + 4 * v124;
      int64_t v131 = v227 - (v130 + 4);
      if (v227 != v130 + 4) {
        memmove((char *)v226 + 4 * v124, v130 + 4, v227 - (v130 + 4));
      }
      v227 = &v130[v131];
      uint64_t v132 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v132[3], (uint64_t)v132[4], ((unsigned char *)v132[4] - (unsigned char *)v132[3]) >> 3);
      uint64_t v133 = v124;
      int v134 = (char *)__p + 8 * v124;
      int64_t v135 = v224 - (v134 + 8);
      if (v224 != v134 + 8) {
        memmove(v134, v134 + 8, v224 - (v134 + 8));
      }
      int v224 = &v134[v135];
      unint64_t v136 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v133);
      int v137 = mlx::core::array::shape(v3, v133);
      if (v127 >= v128)
      {
        uint64_t v138 = 0;
        unint64_t v139 = v136 * v137;
        unint64_t v140 = v127 / v128;
        if (v140 <= 1) {
          unint64_t v140 = 1;
        }
        unint64_t v218 = v140;
        do
        {
          v141 = (int *)v226;
          unint64_t v142 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v143 = 0;
          uint64_t v144 = (v142 - 1);
          if ((int)v142 - 1 >= 0)
          {
            int v145 = __p;
            int v146 = v138;
            do
            {
              ldiv_t v147 = ldiv(v146, v141[v144]);
              int v146 = v147.quot;
              v143 += v145[v144--] * v147.rem;
            }
            while (v144 != -1);
          }
          uint64_t v148 = *(void *)(*(void *)v221 + 152);
          int v149 = (unsigned int *)&(*a3)[19][v143];
          if (v139)
          {
            uint64_t v150 = 0;
            unsigned int v151 = 0;
            do
            {
              v149[v150] = v151++;
              v150 += v136;
            }
            while (v139 != v150);
          }
          uint64_t v229 = v148 + v143;
          unint64_t v230 = v136;
          if ((int)(v139 / v136) <= 128)
          {
          }
          else
          {
            int v152 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v139 / v136));
            if (v152) {
              operator delete(v152);
            }
          }
          ++v138;
        }
        while (v138 != v218);
      }
      goto LABEL_156;
    case 2:
      int v64 = *(_DWORD *)(a1 + 20);
      uint64_t v65 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v65, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      unint64_t v66 = *(const void ***)v3;
      if (v64 < 0) {
        v64 += (unint64_t)((unsigned char *)v66[1] - (unsigned char *)*v66) >> 2;
      }
      unint64_t v67 = (unint64_t)v66[6];
      int v68 = mlx::core::array::shape(v3, v64);
      unint64_t v69 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v69, (uint64_t)v69[1], ((unsigned char *)v69[1] - (unsigned char *)*v69) >> 2);
      uint64_t v70 = (char *)v226 + 4 * v64;
      int64_t v71 = v227 - (v70 + 4);
      if (v227 != v70 + 4) {
        memmove((char *)v226 + 4 * v64, v70 + 4, v227 - (v70 + 4));
      }
      v227 = &v70[v71];
      int v72 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v72[3], (uint64_t)v72[4], ((unsigned char *)v72[4] - (unsigned char *)v72[3]) >> 3);
      uint64_t v73 = v64;
      uint64_t v74 = (char *)__p + 8 * v64;
      int64_t v75 = v224 - (v74 + 8);
      if (v224 != v74 + 8) {
        memmove(v74, v74 + 8, v224 - (v74 + 8));
      }
      int v224 = &v74[v75];
      unint64_t v76 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v73);
      int v77 = mlx::core::array::shape(v3, v73);
      if (v67 >= v68)
      {
        uint64_t v78 = 0;
        unint64_t v79 = v76 * v77;
        unint64_t v80 = v67 / v68;
        if (v80 <= 1) {
          unint64_t v80 = 1;
        }
        unint64_t v216 = v80;
        do
        {
          uint64_t v81 = (int *)v226;
          unint64_t v82 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v83 = 0;
          uint64_t v84 = (v82 - 1);
          if ((int)v82 - 1 >= 0)
          {
            ldiv_t v85 = __p;
            int v86 = v78;
            do
            {
              ldiv_t v87 = ldiv(v86, v81[v84]);
              int v86 = v87.quot;
              v83 += v85[v84--] * v87.rem;
            }
            while (v84 != -1);
          }
          uint64_t v88 = *(void *)(*(void *)v221 + 152);
          uint64_t v89 = (unsigned int *)&(*a3)[19][v83];
          if (v79)
          {
            uint64_t v90 = 0;
            unsigned int v91 = 0;
            do
            {
              v89[v90] = v91++;
              v90 += v76;
            }
            while (v79 != v90);
          }
          uint64_t v229 = v88 + 4 * v83;
          unint64_t v230 = v76;
          if ((int)(v79 / v76) <= 128)
          {
          }
          else
          {
            uint64_t v92 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v79 / v76));
            if (v92) {
              operator delete(v92);
            }
          }
          ++v78;
        }
        while (v78 != v216);
      }
      goto LABEL_156;
    case 3:
      int v94 = *(_DWORD *)(a1 + 20);
      uint64_t v95 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v95, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      uint64_t v96 = *(const void ***)v3;
      if (v94 < 0) {
        v94 += (unint64_t)((unsigned char *)v96[1] - (unsigned char *)*v96) >> 2;
      }
      unint64_t v97 = (unint64_t)v96[6];
      int v98 = mlx::core::array::shape(v3, v94);
      ldiv_t v99 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v99, (uint64_t)v99[1], ((unsigned char *)v99[1] - (unsigned char *)*v99) >> 2);
      uint64_t v100 = (char *)v226 + 4 * v94;
      int64_t v101 = v227 - (v100 + 4);
      if (v227 != v100 + 4) {
        memmove((char *)v226 + 4 * v94, v100 + 4, v227 - (v100 + 4));
      }
      v227 = &v100[v101];
      int v102 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v102[3], (uint64_t)v102[4], ((unsigned char *)v102[4] - (unsigned char *)v102[3]) >> 3);
      uint64_t v103 = v94;
      int v104 = (char *)__p + 8 * v94;
      int64_t v105 = v224 - (v104 + 8);
      if (v224 != v104 + 8) {
        memmove(v104, v104 + 8, v224 - (v104 + 8));
      }
      int v224 = &v104[v105];
      unint64_t v106 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v103);
      int v107 = mlx::core::array::shape(v3, v103);
      if (v97 >= v98)
      {
        uint64_t v108 = 0;
        unint64_t v109 = v106 * v107;
        unint64_t v110 = v97 / v98;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        unint64_t v217 = v110;
        do
        {
          unint64_t v111 = (int *)v226;
          unint64_t v112 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v113 = 0;
          uint64_t v114 = (v112 - 1);
          if ((int)v112 - 1 >= 0)
          {
            uint64_t v115 = __p;
            int v116 = v108;
            do
            {
              ldiv_t v117 = ldiv(v116, v111[v114]);
              int v116 = v117.quot;
              v113 += v115[v114--] * v117.rem;
            }
            while (v114 != -1);
          }
          uint64_t v118 = *(void *)(*(void *)v221 + 152);
          unsigned int v119 = (unsigned int *)&(*a3)[19][v113];
          if (v109)
          {
            uint64_t v120 = 0;
            unsigned int v121 = 0;
            do
            {
              v119[v120] = v121++;
              v120 += v106;
            }
            while (v109 != v120);
          }
          uint64_t v229 = v118 + v113;
          unint64_t v230 = v106;
          if ((int)(v109 / v106) <= 128)
          {
          }
          else
          {
            uint64_t v122 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v109 / v106));
            if (v122) {
              operator delete(v122);
            }
          }
          ++v108;
        }
        while (v108 != v217);
      }
      goto LABEL_156;
    case 4:
      int v34 = *(_DWORD *)(a1 + 20);
      unint64_t v35 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v35, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      uint64_t v36 = *(const void ***)v3;
      if (v34 < 0) {
        v34 += (unint64_t)((unsigned char *)v36[1] - (unsigned char *)*v36) >> 2;
      }
      unint64_t v37 = (unint64_t)v36[6];
      int v38 = mlx::core::array::shape(v3, v34);
      int v39 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v39, (uint64_t)v39[1], ((unsigned char *)v39[1] - (unsigned char *)*v39) >> 2);
      uint64_t v40 = (char *)v226 + 4 * v34;
      int64_t v41 = v227 - (v40 + 4);
      if (v227 != v40 + 4) {
        memmove((char *)v226 + 4 * v34, v40 + 4, v227 - (v40 + 4));
      }
      v227 = &v40[v41];
      int v42 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v42[3], (uint64_t)v42[4], ((unsigned char *)v42[4] - (unsigned char *)v42[3]) >> 3);
      uint64_t v43 = v34;
      int v44 = (char *)__p + 8 * v34;
      int64_t v45 = v224 - (v44 + 8);
      if (v224 != v44 + 8) {
        memmove(v44, v44 + 8, v224 - (v44 + 8));
      }
      int v224 = &v44[v45];
      unint64_t v46 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v43);
      int v47 = mlx::core::array::shape(v3, v43);
      if (v37 >= v38)
      {
        uint64_t v48 = 0;
        unint64_t v49 = v46 * v47;
        unint64_t v50 = v37 / v38;
        if (v50 <= 1) {
          unint64_t v50 = 1;
        }
        unint64_t v215 = v50;
        do
        {
          unint64_t v51 = (int *)v226;
          unint64_t v52 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v53 = 0;
          uint64_t v54 = (v52 - 1);
          if ((int)v52 - 1 >= 0)
          {
            unint64_t v55 = __p;
            int v56 = v48;
            do
            {
              ldiv_t v57 = ldiv(v56, v51[v54]);
              int v56 = v57.quot;
              v53 += v55[v54--] * v57.rem;
            }
            while (v54 != -1);
          }
          uint64_t v58 = *(void *)(*(void *)v221 + 152);
          uint64_t v59 = (unsigned int *)&(*a3)[19][v53];
          if (v49)
          {
            uint64_t v60 = 0;
            unsigned int v61 = 0;
            do
            {
              v59[v60] = v61++;
              v60 += v46;
            }
            while (v49 != v60);
          }
          uint64_t v229 = v58 + 4 * v53;
          unint64_t v230 = v46;
          if ((int)(v49 / v46) <= 128)
          {
          }
          else
          {
            ldiv_t v62 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v49 / v46));
            if (v62) {
              operator delete(v62);
            }
          }
          ++v48;
        }
        while (v48 != v215);
      }
      goto LABEL_156;
    case 5:
      int v154 = *(_DWORD *)(a1 + 20);
      int v155 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v155, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      int v156 = *(const void ***)v3;
      if (v154 < 0) {
        v154 += (unint64_t)((unsigned char *)v156[1] - (unsigned char *)*v156) >> 2;
      }
      unint64_t v157 = (unint64_t)v156[6];
      int v158 = mlx::core::array::shape(v3, v154);
      v159 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v159, (uint64_t)v159[1], ((unsigned char *)v159[1] - (unsigned char *)*v159) >> 2);
      v160 = (char *)v226 + 4 * v154;
      int64_t v161 = v227 - (v160 + 4);
      if (v227 != v160 + 4) {
        memmove((char *)v226 + 4 * v154, v160 + 4, v227 - (v160 + 4));
      }
      v227 = &v160[v161];
      uint64_t v162 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v162[3], (uint64_t)v162[4], ((unsigned char *)v162[4] - (unsigned char *)v162[3]) >> 3);
      uint64_t v163 = v154;
      int v164 = (char *)__p + 8 * v154;
      int64_t v165 = v224 - (v164 + 8);
      if (v224 != v164 + 8) {
        memmove(v164, v164 + 8, v224 - (v164 + 8));
      }
      int v224 = &v164[v165];
      unint64_t v166 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v163);
      int v167 = mlx::core::array::shape(v3, v163);
      if (v157 >= v158)
      {
        uint64_t v168 = 0;
        unint64_t v169 = v166 * v167;
        unint64_t v170 = v157 / v158;
        if (v170 <= 1) {
          unint64_t v170 = 1;
        }
        unint64_t v219 = v170;
        do
        {
          unsigned int v171 = (int *)v226;
          unint64_t v172 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v173 = 0;
          uint64_t v174 = (v172 - 1);
          if ((int)v172 - 1 >= 0)
          {
            int v175 = __p;
            int v176 = v168;
            do
            {
              ldiv_t v177 = ldiv(v176, v171[v174]);
              int v176 = v177.quot;
              v173 += v175[v174--] * v177.rem;
            }
            while (v174 != -1);
          }
          uint64_t v178 = *(void *)(*(void *)v221 + 152);
          int v179 = (unsigned int *)&(*a3)[19][v173];
          if (v169)
          {
            uint64_t v180 = 0;
            unsigned int v181 = 0;
            do
            {
              v179[v180] = v181++;
              v180 += v166;
            }
            while (v169 != v180);
          }
          uint64_t v229 = v178 + 8 * v173;
          unint64_t v230 = v166;
          if ((int)(v169 / v166) <= 128)
          {
          }
          else
          {
            unsigned int v182 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v169 / v166));
            if (v182) {
              operator delete(v182);
            }
          }
          ++v168;
        }
        while (v168 != v219);
      }
      goto LABEL_156;
    case 6:
      int v184 = *(_DWORD *)(a1 + 20);
      uint64_t v185 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      int v231 = &unk_27062AEC8;
      int v232 = mlx::core::allocator::free;
      unsigned int v233 = &v231;
      mlx::core::array::set_data(a3, (uint64_t)v185, (uint64_t)&v231);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v231);
      uint64_t v186 = *(const void ***)v3;
      if (v184 < 0) {
        v184 += (unint64_t)((unsigned char *)v186[1] - (unsigned char *)*v186) >> 2;
      }
      unint64_t v187 = (unint64_t)v186[6];
      int v188 = mlx::core::array::shape(v3, v184);
      v189 = *(const void ***)v3;
      unsigned int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v226, *v189, (uint64_t)v189[1], ((unsigned char *)v189[1] - (unsigned char *)*v189) >> 2);
      uint64_t v190 = (char *)v226 + 4 * v184;
      int64_t v191 = v227 - (v190 + 4);
      if (v227 != v190 + 4) {
        memmove((char *)v226 + 4 * v184, v190 + 4, v227 - (v190 + 4));
      }
      v227 = &v190[v191];
      int v192 = *(const void ***)v3;
      __n128 __p = 0;
      int v224 = 0;
      uint64_t v225 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v192[3], (uint64_t)v192[4], ((unsigned char *)v192[4] - (unsigned char *)v192[3]) >> 3);
      uint64_t v193 = v184;
      int v194 = (char *)__p + 8 * v184;
      int64_t v195 = v224 - (v194 + 8);
      if (v224 != v194 + 8) {
        memmove(v194, v194 + 8, v224 - (v194 + 8));
      }
      int v224 = &v194[v195];
      unint64_t v196 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * v193);
      int v197 = mlx::core::array::shape(v3, v193);
      if (v187 >= v188)
      {
        uint64_t v198 = 0;
        unint64_t v199 = v196 * v197;
        unint64_t v200 = v187 / v188;
        if (v200 <= 1) {
          unint64_t v200 = 1;
        }
        unint64_t v220 = v200;
        do
        {
          BOOL v201 = (int *)v226;
          unint64_t v202 = (unint64_t)(v227 - (unsigned char *)v226) >> 2;
          uint64_t v203 = 0;
          uint64_t v204 = (v202 - 1);
          if ((int)v202 - 1 >= 0)
          {
            BOOL v205 = __p;
            int v206 = v198;
            do
            {
              ldiv_t v207 = ldiv(v206, v201[v204]);
              int v206 = v207.quot;
              v203 += v205[v204--] * v207.rem;
            }
            while (v204 != -1);
          }
          uint64_t v208 = *(void *)(*(void *)v221 + 152);
          float v209 = (unsigned int *)&(*a3)[19][v203];
          if (v199)
          {
            uint64_t v210 = 0;
            unsigned int v211 = 0;
            do
            {
              v209[v210] = v211++;
              v210 += v196;
            }
            while (v199 != v210);
          }
          uint64_t v229 = v208 + 4 * v203;
          unint64_t v230 = v196;
          if ((int)(v199 / v196) <= 128)
          {
          }
          else
          {
            int v212 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v199 / v196));
            if (v212) {
              operator delete(v212);
            }
          }
          ++v198;
        }
        while (v198 != v220);
      }
LABEL_156:
      if (__p)
      {
        int v224 = (char *)__p;
        operator delete(__p);
      }
      if (v226)
      {
        v227 = (char *)v226;
        operator delete(v226);
      }
      break;
    default:
      return;
  }
}

void sub_256D82B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Sort::eval(uint64_t a1, uint64_t a2, int ***this, float a4)
{
  int v4 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sort::eval();
  }
  size_t v5 = *(const void ***)v4;
  switch(*(_DWORD *)(*(void *)v4 + 56))
  {
    case 0:
      int v7 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v8, a4);
      int v9 = *(const void ***)v4;
      if (v7 < 0) {
        v7 += (unint64_t)((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2;
      }
      unint64_t v10 = (unint64_t)v9[6];
      int v11 = mlx::core::array::shape(v4, v7);
      int64_t v12 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v12, (uint64_t)v12[1], ((unsigned char *)v12[1] - (unsigned char *)*v12) >> 2);
      uint64_t v13 = (char *)v201 + 4 * v7;
      int64_t v14 = v202 - (v13 + 4);
      if (v202 != v13 + 4) {
        memmove((char *)v201 + 4 * v7, v13 + 4, v202 - (v13 + 4));
      }
      unint64_t v202 = &v13[v14];
      int64_t v15 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v15[3], (uint64_t)v15[4], ((unsigned char *)v15[4] - (unsigned char *)v15[3]) >> 3);
      uint64_t v16 = v7;
      int v17 = (char *)__p + 8 * v7;
      int64_t v18 = v199 - (v17 + 8);
      if (v199 != v17 + 8) {
        memmove(v17, v17 + 8, v199 - (v17 + 8));
      }
      unint64_t v199 = &v17[v18];
      unint64_t v19 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v16);
      int v20 = mlx::core::array::shape(v4, v16);
      if (v10 >= v11)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v19 * v20;
        if (v10 / v11 <= 1) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v10 / v11;
        }
        do
        {
          uint64_t v24 = (int *)v201;
          unint64_t v25 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v26 = 0;
          uint64_t v27 = (v25 - 1);
          if ((int)v25 - 1 >= 0)
          {
            uint64_t v28 = __p;
            int quot = v21;
            do
            {
              ldiv_t v30 = ldiv(quot, v24[v27]);
              int quot = v30.quot;
              v26 += v28[v27--] * v30.rem;
            }
            while (v27 != -1);
          }
          unsigned int v31 = (unsigned __int8 *)(*this)[19] + v26;
          if ((int)(v22 / v19) <= 128)
          {
          }
          else
          {
            uint64_t v32 = (unsigned __int8 *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v22 / v19));
            if (v32) {
              operator delete(v32);
            }
          }
          ++v21;
        }
        while (v21 != v23);
      }
      goto LABEL_156;
    case 1:
      int v34 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v35 = 1;
      }
      else {
        int v35 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v35, a4);
      uint64_t v36 = *(const void ***)v4;
      if (v34 < 0) {
        v34 += (unint64_t)((unsigned char *)v36[1] - (unsigned char *)*v36) >> 2;
      }
      unint64_t v37 = (unint64_t)v36[6];
      int v38 = mlx::core::array::shape(v4, v34);
      int v39 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v39, (uint64_t)v39[1], ((unsigned char *)v39[1] - (unsigned char *)*v39) >> 2);
      uint64_t v40 = (char *)v201 + 4 * v34;
      int64_t v41 = v202 - (v40 + 4);
      if (v202 != v40 + 4) {
        memmove((char *)v201 + 4 * v34, v40 + 4, v202 - (v40 + 4));
      }
      unint64_t v202 = &v40[v41];
      int v42 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v42[3], (uint64_t)v42[4], ((unsigned char *)v42[4] - (unsigned char *)v42[3]) >> 3);
      uint64_t v43 = v34;
      int v44 = (char *)__p + 8 * v34;
      int64_t v45 = v199 - (v44 + 8);
      if (v199 != v44 + 8) {
        memmove(v44, v44 + 8, v199 - (v44 + 8));
      }
      unint64_t v199 = &v44[v45];
      unint64_t v46 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v43);
      int v47 = mlx::core::array::shape(v4, v43);
      if (v37 >= v38)
      {
        uint64_t v48 = 0;
        unint64_t v49 = v46 * v47;
        if (v37 / v38 <= 1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = v37 / v38;
        }
        do
        {
          unint64_t v51 = (int *)v201;
          unint64_t v52 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v53 = 0;
          uint64_t v54 = (v52 - 1);
          if ((int)v52 - 1 >= 0)
          {
            unint64_t v55 = __p;
            int v56 = v48;
            do
            {
              ldiv_t v57 = ldiv(v56, v51[v54]);
              int v56 = v57.quot;
              v53 += v55[v54--] * v57.rem;
            }
            while (v54 != -1);
          }
          uint64_t v58 = (unsigned __int8 *)(*this)[19] + v53;
          if ((int)(v49 / v46) <= 128)
          {
          }
          else
          {
            uint64_t v59 = (unsigned __int8 *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v49 / v46));
            if (v59) {
              operator delete(v59);
            }
          }
          ++v48;
        }
        while (v48 != v50);
      }
      goto LABEL_156;
    case 2:
      int v61 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v62 = 1;
      }
      else {
        int v62 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v62, a4);
      uint64_t v63 = *(const void ***)v4;
      if (v61 < 0) {
        v61 += (unint64_t)((unsigned char *)v63[1] - (unsigned char *)*v63) >> 2;
      }
      unint64_t v64 = (unint64_t)v63[6];
      int v65 = mlx::core::array::shape(v4, v61);
      unint64_t v66 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v66, (uint64_t)v66[1], ((unsigned char *)v66[1] - (unsigned char *)*v66) >> 2);
      unint64_t v67 = (char *)v201 + 4 * v61;
      int64_t v68 = v202 - (v67 + 4);
      if (v202 != v67 + 4) {
        memmove((char *)v201 + 4 * v61, v67 + 4, v202 - (v67 + 4));
      }
      unint64_t v202 = &v67[v68];
      unint64_t v69 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v69[3], (uint64_t)v69[4], ((unsigned char *)v69[4] - (unsigned char *)v69[3]) >> 3);
      uint64_t v70 = v61;
      int64_t v71 = (char *)__p + 8 * v61;
      int64_t v72 = v199 - (v71 + 8);
      if (v199 != v71 + 8) {
        memmove(v71, v71 + 8, v199 - (v71 + 8));
      }
      unint64_t v199 = &v71[v72];
      unint64_t v73 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v70);
      int v74 = mlx::core::array::shape(v4, v70);
      if (v64 >= v65)
      {
        uint64_t v75 = 0;
        unint64_t v76 = v73 * v74;
        if (v64 / v65 <= 1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = v64 / v65;
        }
        do
        {
          uint64_t v78 = (int *)v201;
          unint64_t v79 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v80 = 0;
          uint64_t v81 = (v79 - 1);
          if ((int)v79 - 1 >= 0)
          {
            unint64_t v82 = __p;
            int v83 = v75;
            do
            {
              ldiv_t v84 = ldiv(v83, v78[v81]);
              int v83 = v84.quot;
              v80 += v82[v81--] * v84.rem;
            }
            while (v81 != -1);
          }
          ldiv_t v85 = (unsigned int *)&(*this)[19][v80];
          if ((int)(v76 / v73) <= 128)
          {
          }
          else
          {
            int v86 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v76 / v73));
            if (v86) {
              operator delete(v86);
            }
          }
          ++v75;
        }
        while (v75 != v77);
      }
      goto LABEL_156;
    case 3:
      int v88 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v89 = 1;
      }
      else {
        int v89 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v89, a4);
      uint64_t v90 = *(const void ***)v4;
      if (v88 < 0) {
        v88 += (unint64_t)((unsigned char *)v90[1] - (unsigned char *)*v90) >> 2;
      }
      unint64_t v91 = (unint64_t)v90[6];
      int v92 = mlx::core::array::shape(v4, v88);
      uint64_t v93 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v93, (uint64_t)v93[1], ((unsigned char *)v93[1] - (unsigned char *)*v93) >> 2);
      int v94 = (char *)v201 + 4 * v88;
      int64_t v95 = v202 - (v94 + 4);
      if (v202 != v94 + 4) {
        memmove((char *)v201 + 4 * v88, v94 + 4, v202 - (v94 + 4));
      }
      unint64_t v202 = &v94[v95];
      uint64_t v96 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v96[3], (uint64_t)v96[4], ((unsigned char *)v96[4] - (unsigned char *)v96[3]) >> 3);
      uint64_t v97 = v88;
      int v98 = (char *)__p + 8 * v88;
      int64_t v99 = v199 - (v98 + 8);
      if (v199 != v98 + 8) {
        memmove(v98, v98 + 8, v199 - (v98 + 8));
      }
      unint64_t v199 = &v98[v99];
      unint64_t v100 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v97);
      int v101 = mlx::core::array::shape(v4, v97);
      if (v91 >= v92)
      {
        uint64_t v102 = 0;
        unint64_t v103 = v100 * v101;
        if (v91 / v92 <= 1) {
          unint64_t v104 = 1;
        }
        else {
          unint64_t v104 = v91 / v92;
        }
        do
        {
          int64_t v105 = (int *)v201;
          unint64_t v106 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v107 = 0;
          uint64_t v108 = (v106 - 1);
          if ((int)v106 - 1 >= 0)
          {
            unint64_t v109 = __p;
            int v110 = v102;
            do
            {
              ldiv_t v111 = ldiv(v110, v105[v108]);
              int v110 = v111.quot;
              v107 += v109[v108--] * v111.rem;
            }
            while (v108 != -1);
          }
          unint64_t v112 = (char *)(*this)[19] + v107;
          if ((int)(v103 / v100) <= 128)
          {
          }
          else
          {
            uint64_t v113 = (char *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v103 / v100));
            if (v113) {
              operator delete(v113);
            }
          }
          ++v102;
        }
        while (v102 != v104);
      }
      goto LABEL_156;
    case 4:
      int v115 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v116 = 1;
      }
      else {
        int v116 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v116, a4);
      ldiv_t v117 = *(const void ***)v4;
      if (v115 < 0) {
        v115 += (unint64_t)((unsigned char *)v117[1] - (unsigned char *)*v117) >> 2;
      }
      unint64_t v118 = (unint64_t)v117[6];
      int v119 = mlx::core::array::shape(v4, v115);
      uint64_t v120 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v120, (uint64_t)v120[1], ((unsigned char *)v120[1] - (unsigned char *)*v120) >> 2);
      unsigned int v121 = (char *)v201 + 4 * v115;
      int64_t v122 = v202 - (v121 + 4);
      if (v202 != v121 + 4) {
        memmove((char *)v201 + 4 * v115, v121 + 4, v202 - (v121 + 4));
      }
      unint64_t v202 = &v121[v122];
      uint64_t v123 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v123[3], (uint64_t)v123[4], ((unsigned char *)v123[4] - (unsigned char *)v123[3]) >> 3);
      uint64_t v124 = v115;
      unsigned int v125 = (char *)__p + 8 * v115;
      int64_t v126 = v199 - (v125 + 8);
      if (v199 != v125 + 8) {
        memmove(v125, v125 + 8, v199 - (v125 + 8));
      }
      unint64_t v199 = &v125[v126];
      unint64_t v127 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v124);
      int v128 = mlx::core::array::shape(v4, v124);
      if (v118 >= v119)
      {
        uint64_t v129 = 0;
        unint64_t v130 = v127 * v128;
        if (v118 / v119 <= 1) {
          unint64_t v131 = 1;
        }
        else {
          unint64_t v131 = v118 / v119;
        }
        do
        {
          uint64_t v132 = (int *)v201;
          unint64_t v133 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v134 = 0;
          uint64_t v135 = (v133 - 1);
          if ((int)v133 - 1 >= 0)
          {
            unint64_t v136 = __p;
            int v137 = v129;
            do
            {
              ldiv_t v138 = ldiv(v137, v132[v135]);
              int v137 = v138.quot;
              v134 += v136[v135--] * v138.rem;
            }
            while (v135 != -1);
          }
          unint64_t v139 = &(*this)[19][v134];
          if ((int)(v130 / v127) <= 128)
          {
          }
          else
          {
            unint64_t v140 = (int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v130 / v127));
            if (v140) {
              operator delete(v140);
            }
          }
          ++v129;
        }
        while (v129 != v131);
      }
      goto LABEL_156;
    case 5:
      int v142 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v143 = 1;
      }
      else {
        int v143 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v143, a4);
      uint64_t v144 = *(const void ***)v4;
      if (v142 < 0) {
        v142 += (unint64_t)((unsigned char *)v144[1] - (unsigned char *)*v144) >> 2;
      }
      unint64_t v145 = (unint64_t)v144[6];
      int v146 = mlx::core::array::shape(v4, v142);
      ldiv_t v147 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v147, (uint64_t)v147[1], ((unsigned char *)v147[1] - (unsigned char *)*v147) >> 2);
      uint64_t v148 = (char *)v201 + 4 * v142;
      int64_t v149 = v202 - (v148 + 4);
      if (v202 != v148 + 4) {
        memmove((char *)v201 + 4 * v142, v148 + 4, v202 - (v148 + 4));
      }
      unint64_t v202 = &v148[v149];
      uint64_t v150 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v150[3], (uint64_t)v150[4], ((unsigned char *)v150[4] - (unsigned char *)v150[3]) >> 3);
      uint64_t v151 = v142;
      int v152 = (char *)__p + 8 * v142;
      int64_t v153 = v199 - (v152 + 8);
      if (v199 != v152 + 8) {
        memmove(v152, v152 + 8, v199 - (v152 + 8));
      }
      unint64_t v199 = &v152[v153];
      unint64_t v154 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v151);
      int v155 = mlx::core::array::shape(v4, v151);
      if (v145 >= v146)
      {
        uint64_t v156 = 0;
        unint64_t v157 = v154 * v155;
        if (v145 / v146 <= 1) {
          unint64_t v158 = 1;
        }
        else {
          unint64_t v158 = v145 / v146;
        }
        do
        {
          v159 = (int *)v201;
          unint64_t v160 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v161 = 0;
          uint64_t v162 = (v160 - 1);
          if ((int)v160 - 1 >= 0)
          {
            uint64_t v163 = __p;
            int v164 = v156;
            do
            {
              ldiv_t v165 = ldiv(v164, v159[v162]);
              int v164 = v165.quot;
              v161 += v163[v162--] * v165.rem;
            }
            while (v162 != -1);
          }
          unint64_t v166 = (uint64_t *)&(*this)[19][2 * v161];
          if ((int)(v157 / v154) <= 128)
          {
          }
          else
          {
            int v167 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<long long>((v157 / v154));
            if (v167) {
              operator delete(v167);
            }
          }
          ++v156;
        }
        while (v156 != v158);
      }
      goto LABEL_156;
    case 6:
      int v169 = *(_DWORD *)(a1 + 20);
      if ((_BYTE)v5[21]) {
        int v170 = 1;
      }
      else {
        int v170 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, this, v170, a4);
      unsigned int v171 = *(const void ***)v4;
      if (v169 < 0) {
        v169 += (unint64_t)((unsigned char *)v171[1] - (unsigned char *)*v171) >> 2;
      }
      unint64_t v172 = (unint64_t)v171[6];
      int v173 = mlx::core::array::shape(v4, v169);
      uint64_t v174 = *(const void ***)v4;
      BOOL v201 = 0;
      unint64_t v202 = 0;
      uint64_t v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v174, (uint64_t)v174[1], ((unsigned char *)v174[1] - (unsigned char *)*v174) >> 2);
      int v175 = (char *)v201 + 4 * v169;
      int64_t v176 = v202 - (v175 + 4);
      if (v202 != v175 + 4) {
        memmove((char *)v201 + 4 * v169, v175 + 4, v202 - (v175 + 4));
      }
      unint64_t v202 = &v175[v176];
      ldiv_t v177 = *(const void ***)v4;
      __n128 __p = 0;
      unint64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v177[3], (uint64_t)v177[4], ((unsigned char *)v177[4] - (unsigned char *)v177[3]) >> 3);
      uint64_t v178 = v169;
      int v179 = (char *)__p + 8 * v169;
      int64_t v180 = v199 - (v179 + 8);
      if (v199 != v179 + 8) {
        memmove(v179, v179 + 8, v199 - (v179 + 8));
      }
      unint64_t v199 = &v179[v180];
      unint64_t v181 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v178);
      int v182 = mlx::core::array::shape(v4, v178);
      if (v172 >= v173)
      {
        uint64_t v184 = 0;
        unint64_t v185 = v181 * v182;
        if (v172 / v173 <= 1) {
          unint64_t v186 = 1;
        }
        else {
          unint64_t v186 = v172 / v173;
        }
        do
        {
          unint64_t v187 = (int *)v201;
          unint64_t v188 = (unint64_t)(v202 - (unsigned char *)v201) >> 2;
          uint64_t v189 = 0;
          uint64_t v190 = (v188 - 1);
          if ((int)v188 - 1 >= 0)
          {
            int64_t v191 = __p;
            int v192 = v184;
            do
            {
              ldiv_t v193 = ldiv(v192, v187[v190]);
              int v192 = v193.quot;
              v189 += v191[v190--] * v193.rem;
            }
            while (v190 != -1);
          }
          int v194 = (float *)&(*this)[19][v189];
          if ((int)(v185 / v181) <= 128)
          {
          }
          else
          {
            int64_t v195 = (float *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v185 / v181));
            if (v195) {
              operator delete(v195);
            }
          }
          ++v184;
        }
        while (v184 != v186);
      }
LABEL_156:
      if (__p)
      {
        unint64_t v199 = (char *)__p;
        operator delete(__p);
      }
      if (v201)
      {
        unint64_t v202 = (char *)v201;
        operator delete(v201);
      }
      break;
    default:
      return;
  }
}

void sub_256D83A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::ArgPartition::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t v771 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArgPartition::eval();
  }
  int v758 = *(mlx::core::array **)a2;
  switch(*(_DWORD *)(*(void *)v3 + 56))
  {
    case 0:
      int v4 = *(_DWORD *)(a1 + 20);
      uint64_t v5 = *(unsigned int *)(a1 + 24);
      std::vector<int>::pointer v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      int v7 = *(const void ***)v3;
      if ((v5 & 0x80000000) != 0) {
        v5 += ((unsigned char *)v7[1] - (unsigned char *)*v7) >> 2;
      }
      unint64_t v8 = (unint64_t)v7[6];
      int v9 = mlx::core::array::shape(v3, v5);
      unint64_t v10 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v10, (uint64_t)v10[1], ((unsigned char *)v10[1] - (unsigned char *)*v10) >> 2);
      int v11 = (char *)v763 + 4 * (int)v5;
      int64_t v12 = v764 - (v11 + 4);
      if (v764 != v11 + 4) {
        memmove((char *)v763 + 4 * (int)v5, v11 + 4, v764 - (v11 + 4));
      }
      int v764 = &v11[v12];
      uint64_t v13 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v13[3], (uint64_t)v13[4], ((unsigned char *)v13[4] - (unsigned char *)v13[3]) >> 3);
      int64_t v14 = (char *)__p + 8 * (int)v5;
      int64_t v15 = v761 - (v14 + 8);
      if (v761 != v14 + 8) {
        memmove((char *)__p + 8 * (int)v5, v14 + 8, v761 - (v14 + 8));
      }
      int v761 = &v14[v15];
      unint64_t v16 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v5);
      int v17 = mlx::core::array::shape(v3, v5);
      if (v8 < v9) {
        goto LABEL_863;
      }
      uint64_t v18 = 0;
      unint64_t v19 = v8 / v9;
      unint64_t v20 = 4 * v16 * v17;
      uint64_t v21 = 4 * v16;
      unint64_t v751 = v16 * v17;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      unint64_t v737 = v19;
      unint64_t v744 = v16 * ((v17 & (v4 >> 31)) + v4);
      break;
    case 1:
      int v425 = *(_DWORD *)(a1 + 20);
      uint64_t v426 = *(unsigned int *)(a1 + 24);
      uint64_t v427 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v427, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v428 = *(const void ***)v3;
      if ((v426 & 0x80000000) != 0) {
        v426 += ((unsigned char *)v428[1] - (unsigned char *)*v428) >> 2;
      }
      unint64_t v429 = (unint64_t)v428[6];
      int v430 = mlx::core::array::shape(v3, v426);
      uint64_t v431 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v431, (uint64_t)v431[1], ((unsigned char *)v431[1] - (unsigned char *)*v431) >> 2);
      uint64_t v432 = (char *)v763 + 4 * (int)v426;
      int64_t v433 = v764 - (v432 + 4);
      if (v764 != v432 + 4) {
        memmove((char *)v763 + 4 * (int)v426, v432 + 4, v764 - (v432 + 4));
      }
      int v764 = &v432[v433];
      unsigned int v434 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v434[3], (uint64_t)v434[4], ((unsigned char *)v434[4] - (unsigned char *)v434[3]) >> 3);
      BOOL v435 = (char *)__p + 8 * (int)v426;
      int64_t v436 = v761 - (v435 + 8);
      if (v761 != v435 + 8) {
        memmove((char *)__p + 8 * (int)v426, v435 + 8, v761 - (v435 + 8));
      }
      int v761 = &v435[v436];
      unint64_t v437 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v426);
      int v438 = mlx::core::array::shape(v3, v426);
      if (v429 < v430) {
        goto LABEL_863;
      }
      uint64_t v439 = 0;
      unint64_t v440 = v429 / v430;
      unint64_t v441 = 4 * v437 * v438;
      uint64_t v442 = 4 * v437;
      unint64_t v755 = v437 * v438;
      if (v440 <= 1) {
        unint64_t v440 = 1;
      }
      unint64_t v741 = v440;
      unint64_t v748 = v437 * ((v438 & (v425 >> 31)) + v425);
      do
      {
        uint64_t v443 = (int *)v763;
        unint64_t v444 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v445 = 0;
        uint64_t v446 = (v444 - 1);
        if ((int)v444 - 1 >= 0)
        {
          int v447 = __p;
          int quot = v439;
          do
          {
            ldiv_t v449 = ldiv(quot, v443[v446]);
            int quot = v449.quot;
            v445 += v447[v446--] * v449.rem;
          }
          while (v446 != -1);
        }
        uint64_t v450 = *(void *)(*(void *)v3 + 152);
        uint64_t v451 = &(*a3)[19][v445];
        if (v755)
        {
          uint64_t v452 = 0;
          int v453 = 0;
          do
          {
            *(int *)((char *)v451 + v452) = v453++;
            v452 += v442;
          }
          while (v441 != v452);
        }
        uint64_t v454 = v450 + v445;
        uint64_t v766 = v454;
        unint64_t v767 = v437;
        if (v748 != v755)
        {
          uint64_t v455 = (unsigned int *)&v451[v755];
          unint64_t v456 = v437;
          uint64_t v457 = (unsigned int *)&v451[v748];
          do
          {
            unint64_t v458 = (((char *)v455 - (char *)v451) >> 2) / v437;
            if (v458 < 2) {
              break;
            }
            if (v458 == 3)
            {
              break;
            }
            if (v458 == 2)
            {
              uint64_t v515 = v455[-v437];
              uint64_t v516 = *v451;
              unsigned int v517 = *(unsigned __int8 *)(v454 + v456 * v515);
              unsigned int v518 = *(unsigned __int8 *)(v454 + v456 * v516);
              if (v517 < v518 || v515 < v516 && v517 == v518)
              {
                int *v451 = v515;
                v455[-v437] = v516;
              }
              break;
            }
            if ((int)v458 <= 7)
            {
              uint64_t v519 = &v455[-v437];
              if (v519 != (unsigned int *)v451)
              {
                uint64_t v520 = v766;
                unint64_t v521 = v767;
                unint64_t v522 = (unsigned int *)&v451[(unint64_t)v442 / 4];
                do
                {
                  uint64_t v523 = (unsigned int *)&v451[v437];
                  if (v451 != (int *)v455 && v523 != v455)
                  {
                    uint64_t v524 = v522;
                    unint64_t v525 = v451;
                    do
                    {
                      uint64_t v526 = *v524;
                      uint64_t v527 = *v525;
                      unsigned int v528 = *(unsigned __int8 *)(v520 + v521 * v526);
                      unsigned int v529 = *(unsigned __int8 *)(v520 + v521 * v527);
                      if (v528 < v529
                        || (v526 < v527 ? (BOOL v530 = v528 == v529) : (BOOL v530 = 0), v530))
                      {
                        unint64_t v525 = (int *)v524;
                      }
                      uint64_t v524 = (unsigned int *)((char *)v524 + v442);
                    }
                    while (v524 != v455);
                    if (v525 != v451)
                    {
                      int v531 = *v451;
                      int *v451 = *v525;
                      *unint64_t v525 = v531;
                    }
                  }
                  unint64_t v522 = (unsigned int *)((char *)v522 + v442);
                  v451 += v437;
                }
                while (v523 != v519);
              }
              break;
            }
            uint64_t v459 = (unsigned int *)&v451[(v458 >> 1) * v437];
            uint64_t v460 = (int *)&v455[-v437];
            uint64_t v462 = *v451;
            uint64_t v463 = *v459;
            uint64_t v454 = v766;
            unint64_t v456 = v767;
            unsigned int v464 = *(unsigned __int8 *)(v766 + v767 * v462);
            unsigned int v465 = *(unsigned __int8 *)(v766 + v767 * v463);
            if (v464 < v465 || (v462 < v463 ? (BOOL v466 = v464 == v465) : (BOOL v466 = 0), v466))
            {
              uint64_t v468 = &v455[-v437];
LABEL_610:
              uint64_t v472 = (unsigned int *)&v451[v437];
              if (v472 < v468)
              {
                unint64_t v473 = v437;
                while (1)
                {
                  uint64_t v474 = *v459;
                  unsigned int v475 = *(unsigned __int8 *)(v454 + v456 * v474);
                  while (1)
                  {
                    uint64_t v476 = *v472;
                    unsigned int v477 = *(unsigned __int8 *)(v454 + v456 * v476);
                    if (v477 >= v475 && (v476 >= v474 || v477 != v475)) {
                      break;
                    }
                    uint64_t v472 = (unsigned int *)((char *)v472 + v442);
                  }
                  uint64_t v479 = &v468[-v437];
                  do
                  {
                    uint64_t v468 = v479;
                    uint64_t v480 = *v479;
                    unsigned int v481 = *(unsigned __int8 *)(v454 + v456 * v480);
                    if (v481 < v475) {
                      break;
                    }
                    v479 -= v437;
                  }
                  while (v480 >= v474 || v481 != v475);
                  if (v472 >= v468) {
                    break;
                  }
                  unsigned int *v472 = v480;
                  *uint64_t v468 = v476;
                  ++v461;
                  if (v472 == v459 && v473 == v437)
                  {
                    uint64_t v459 = v468;
                    unint64_t v473 = v437;
                  }
                  uint64_t v472 = (unsigned int *)((char *)v472 + v442);
                }
              }
              if (v472 != v459)
              {
                uint64_t v483 = *v459;
                uint64_t v484 = *v472;
                unsigned int v485 = *(unsigned __int8 *)(v454 + v456 * v483);
                unsigned int v486 = *(unsigned __int8 *)(v454 + v456 * v484);
                if (v485 < v486 || v483 < v484 && v485 == v486)
                {
                  unsigned int *v472 = v483;
                  *uint64_t v459 = v484;
                  ++v461;
                }
              }
              if (v472 == v457) {
                break;
              }
              if (!v461)
              {
                uint64_t v488 = v472;
                if (v472 <= v457)
                {
                  while (&v488[(unint64_t)v442 / 4] != v455)
                  {
                    uint64_t v495 = v488[v437];
                    uint64_t v496 = *v488;
                    unsigned int v497 = *(unsigned __int8 *)(v454 + v456 * v495);
                    unsigned int v498 = *(unsigned __int8 *)(v454 + v456 * v496);
                    if (v497 >= v498)
                    {
                      uint64_t v488 = (unsigned int *)((char *)v488 + v442);
                      if (v495 >= v496 || v497 != v498) {
                        continue;
                      }
                    }
                    goto LABEL_637;
                  }
                }
                else
                {
                  uint64_t v489 = v451;
                  while (&v489[(unint64_t)v442 / 4] != (int *)v472)
                  {
                    uint64_t v490 = v489[v437];
                    uint64_t v491 = *v489;
                    unsigned int v492 = *(unsigned __int8 *)(v454 + v456 * v490);
                    unsigned int v493 = *(unsigned __int8 *)(v454 + v456 * v491);
                    if (v492 >= v493)
                    {
                      uint64_t v489 = (int *)((char *)v489 + v442);
                      if (v490 >= v491 || v492 != v493) {
                        continue;
                      }
                    }
                    goto LABEL_637;
                  }
                }
                break;
              }
LABEL_637:
              if (v472 <= v457)
              {
                uint64_t v487 = (int *)&v472[v437];
              }
              else
              {
                uint64_t v455 = v472;
                uint64_t v487 = v451;
              }
            }
            else
            {
              uint64_t v467 = (int *)&v455[-2 * v437];
              while (v467 != v451)
              {
                uint64_t v468 = (unsigned int *)v467;
                uint64_t v469 = *v467;
                unsigned int v470 = *(unsigned __int8 *)(v766 + v767 * v469);
                if (v470 >= v465)
                {
                  v467 -= v437;
                  if (v469 >= v463 || v470 != v465) {
                    continue;
                  }
                }
                int *v451 = v469;
                *uint64_t v468 = v462;
                ++v461;
                goto LABEL_610;
              }
              uint64_t v487 = &v451[v437];
              uint64_t v500 = *v460;
              unsigned int v501 = *(unsigned __int8 *)(v766 + v767 * v500);
              if (v464 >= v501 && (v462 >= v500 || v464 != v501))
              {
                if (v487 == v460) {
                  break;
                }
                uint64_t v503 = v451;
                while (1)
                {
                  uint64_t v504 = v503[v437];
                  unsigned int v505 = *(unsigned __int8 *)(v766 + v767 * v504);
                  if (v464 < v505) {
                    break;
                  }
                  if (v462 < v504 && v464 == v505) {
                    break;
                  }
                  uint64_t v503 = (int *)((char *)v503 + v442);
                  if (&v503[(unint64_t)v442 / 4] == v460) {
                    goto LABEL_588;
                  }
                }
                v503[v437] = v500;
                *uint64_t v460 = v504;
                uint64_t v487 = &v503[2 * v437];
              }
              if (v487 == v460) {
                break;
              }
              while (1)
              {
                uint64_t v507 = *v451;
                unsigned int v508 = *(unsigned __int8 *)(v454 + v456 * v507);
                uint64_t v509 = *v487;
                unsigned int v510 = *(unsigned __int8 *)(v454 + v456 * v509);
                LODWORD(v511) = *v487;
                while (v508 >= v510)
                {
                  if (v508 == v510 && v507 < v509)
                  {
                    LODWORD(v511) = v509;
                    goto LABEL_682;
                  }
                  uint64_t v487 = (int *)((char *)v487 + v442);
                  uint64_t v511 = *v487;
                  unsigned int v510 = *(unsigned __int8 *)(v454 + v456 * v511);
                  LODWORD(v509) = *v487;
                }
                do
                {
                  do
                  {
LABEL_682:
                    v460 -= v437;
                    uint64_t v512 = *v460;
                    unsigned int v513 = *(unsigned __int8 *)(v454 + v456 * v512);
                  }
                  while (v508 < v513);
                }
                while (v507 < v512 && v508 == v513);
                if (v487 >= v460) {
                  break;
                }
                *uint64_t v487 = v512;
                *uint64_t v460 = v511;
                v487 += v437;
              }
              if (v487 > (int *)v457) {
                break;
              }
            }
            uint64_t v451 = v487;
          }
          while (v455 != v457);
        }
LABEL_588:
        ++v439;
        uint64_t v3 = v758;
      }
      while (v439 != v741);
      goto LABEL_863;
    case 2:
      int v218 = *(_DWORD *)(a1 + 20);
      uint64_t v219 = *(unsigned int *)(a1 + 24);
      unint64_t v220 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v220, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v221 = *(const void ***)v3;
      if ((v219 & 0x80000000) != 0) {
        v219 += ((unsigned char *)v221[1] - (unsigned char *)*v221) >> 2;
      }
      unint64_t v222 = (unint64_t)v221[6];
      int v223 = mlx::core::array::shape(v3, v219);
      int v224 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v224, (uint64_t)v224[1], ((unsigned char *)v224[1] - (unsigned char *)*v224) >> 2);
      uint64_t v225 = (char *)v763 + 4 * (int)v219;
      int64_t v226 = v764 - (v225 + 4);
      if (v764 != v225 + 4) {
        memmove((char *)v763 + 4 * (int)v219, v225 + 4, v764 - (v225 + 4));
      }
      int v764 = &v225[v226];
      v227 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v227[3], (uint64_t)v227[4], ((unsigned char *)v227[4] - (unsigned char *)v227[3]) >> 3);
      uint64_t v228 = (char *)__p + 8 * (int)v219;
      int64_t v229 = v761 - (v228 + 8);
      if (v761 != v228 + 8) {
        memmove((char *)__p + 8 * (int)v219, v228 + 8, v761 - (v228 + 8));
      }
      int v761 = &v228[v229];
      unint64_t v230 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v219);
      int v231 = mlx::core::array::shape(v3, v219);
      if (v222 < v223) {
        goto LABEL_863;
      }
      uint64_t v232 = 0;
      unint64_t v233 = v222 / v223;
      unint64_t v234 = 4 * v230 * v231;
      uint64_t v235 = 4 * v230;
      unint64_t v753 = v230 * v231;
      if (v233 <= 1) {
        unint64_t v233 = 1;
      }
      unint64_t v739 = v233;
      unint64_t v746 = v230 * ((v231 & (v218 >> 31)) + v218);
      do
      {
        uint64_t v236 = (int *)v763;
        unint64_t v237 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v238 = 0;
        uint64_t v239 = (v237 - 1);
        if ((int)v237 - 1 >= 0)
        {
          int v240 = __p;
          int v241 = v232;
          do
          {
            ldiv_t v242 = ldiv(v241, v236[v239]);
            int v241 = v242.quot;
            v238 += v240[v239--] * v242.rem;
          }
          while (v239 != -1);
        }
        uint64_t v243 = *(void *)(*(void *)v3 + 152);
        uint64_t v244 = &(*a3)[19][v238];
        if (v753)
        {
          uint64_t v245 = 0;
          int v246 = 0;
          do
          {
            *(int *)((char *)v244 + v245) = v246++;
            v245 += v235;
          }
          while (v234 != v245);
        }
        uint64_t v247 = v243 + 4 * v238;
        uint64_t v766 = v247;
        unint64_t v767 = v230;
        if (v746 != v753)
        {
          unsigned int v248 = (unsigned int *)&v244[v753];
          unint64_t v249 = v230;
          int v250 = (unsigned int *)&v244[v746];
          do
          {
            unint64_t v251 = (((char *)v248 - (char *)v244) >> 2) / v230;
            if (v251 < 2) {
              break;
            }
            if (v251 == 3)
            {
              break;
            }
            if (v251 == 2)
            {
              uint64_t v308 = v248[-v230];
              uint64_t v309 = *v244;
              unsigned int v310 = *(_DWORD *)(v247 + 4 * v249 * v308);
              unsigned int v311 = *(_DWORD *)(v247 + 4 * v249 * v309);
              if (v310 < v311 || v308 < v309 && v310 == v311)
              {
                *uint64_t v244 = v308;
                v248[-v230] = v309;
              }
              break;
            }
            if ((int)v251 <= 7)
            {
              uint64_t v312 = &v248[-v230];
              if (v312 != (unsigned int *)v244)
              {
                uint64_t v313 = v766;
                unint64_t v314 = v767;
                uint64_t v315 = (unsigned int *)&v244[(unint64_t)v235 / 4];
                do
                {
                  v316 = (unsigned int *)&v244[v230];
                  if (v244 != (int *)v248 && v316 != v248)
                  {
                    uint64_t v317 = v315;
                    uint64_t v318 = v244;
                    do
                    {
                      uint64_t v319 = *v317;
                      uint64_t v320 = *v318;
                      unsigned int v321 = *(_DWORD *)(v313 + 4 * v314 * v319);
                      unsigned int v322 = *(_DWORD *)(v313 + 4 * v314 * v320);
                      if (v321 < v322
                        || (v319 < v320 ? (BOOL v323 = v321 == v322) : (BOOL v323 = 0), v323))
                      {
                        uint64_t v318 = (int *)v317;
                      }
                      uint64_t v317 = (unsigned int *)((char *)v317 + v235);
                    }
                    while (v317 != v248);
                    if (v318 != v244)
                    {
                      int v324 = *v244;
                      *uint64_t v244 = *v318;
                      *uint64_t v318 = v324;
                    }
                  }
                  uint64_t v315 = (unsigned int *)((char *)v315 + v235);
                  v244 += v230;
                }
                while (v316 != v312);
              }
              break;
            }
            uint64_t v252 = (unsigned int *)&v244[(v251 >> 1) * v230];
            int v253 = (int *)&v248[-v230];
            uint64_t v255 = *v244;
            uint64_t v256 = *v252;
            uint64_t v247 = v766;
            unint64_t v249 = v767;
            unsigned int v257 = *(_DWORD *)(v766 + 4 * v767 * v255);
            unsigned int v258 = *(_DWORD *)(v766 + 4 * v767 * v256);
            if (v257 < v258 || (v255 < v256 ? (BOOL v259 = v257 == v258) : (BOOL v259 = 0), v259))
            {
              int v261 = &v248[-v230];
LABEL_326:
              unsigned int v265 = (unsigned int *)&v244[v230];
              if (v265 < v261)
              {
                unint64_t v266 = v230;
                while (1)
                {
                  uint64_t v267 = *v252;
                  unsigned int v268 = *(_DWORD *)(v247 + 4 * v249 * v267);
                  while (1)
                  {
                    uint64_t v269 = *v265;
                    unsigned int v270 = *(_DWORD *)(v247 + 4 * v249 * v269);
                    if (v270 >= v268 && (v269 >= v267 || v270 != v268)) {
                      break;
                    }
                    unsigned int v265 = (unsigned int *)((char *)v265 + v235);
                  }
                  unsigned int v272 = &v261[-v230];
                  do
                  {
                    int v261 = v272;
                    uint64_t v273 = *v272;
                    unsigned int v274 = *(_DWORD *)(v247 + 4 * v249 * v273);
                    if (v274 < v268) {
                      break;
                    }
                    v272 -= v230;
                  }
                  while (v273 >= v267 || v274 != v268);
                  if (v265 >= v261) {
                    break;
                  }
                  *unsigned int v265 = v273;
                  *int v261 = v269;
                  ++v254;
                  if (v265 == v252 && v266 == v230)
                  {
                    uint64_t v252 = v261;
                    unint64_t v266 = v230;
                  }
                  unsigned int v265 = (unsigned int *)((char *)v265 + v235);
                }
              }
              if (v265 != v252)
              {
                uint64_t v276 = *v252;
                uint64_t v277 = *v265;
                unsigned int v278 = *(_DWORD *)(v247 + 4 * v249 * v276);
                unsigned int v279 = *(_DWORD *)(v247 + 4 * v249 * v277);
                if (v278 < v279 || v276 < v277 && v278 == v279)
                {
                  *unsigned int v265 = v276;
                  *uint64_t v252 = v277;
                  ++v254;
                }
              }
              if (v265 == v250) {
                break;
              }
              if (!v254)
              {
                int v281 = v265;
                if (v265 <= v250)
                {
                  while (&v281[(unint64_t)v235 / 4] != v248)
                  {
                    uint64_t v288 = v281[v230];
                    uint64_t v289 = *v281;
                    unsigned int v290 = *(_DWORD *)(v247 + 4 * v249 * v288);
                    unsigned int v291 = *(_DWORD *)(v247 + 4 * v249 * v289);
                    if (v290 >= v291)
                    {
                      int v281 = (unsigned int *)((char *)v281 + v235);
                      if (v288 >= v289 || v290 != v291) {
                        continue;
                      }
                    }
                    goto LABEL_353;
                  }
                }
                else
                {
                  unsigned int v282 = v244;
                  while (&v282[(unint64_t)v235 / 4] != (int *)v265)
                  {
                    uint64_t v283 = v282[v230];
                    uint64_t v284 = *v282;
                    unsigned int v285 = *(_DWORD *)(v247 + 4 * v249 * v283);
                    unsigned int v286 = *(_DWORD *)(v247 + 4 * v249 * v284);
                    if (v285 >= v286)
                    {
                      unsigned int v282 = (int *)((char *)v282 + v235);
                      if (v283 >= v284 || v285 != v286) {
                        continue;
                      }
                    }
                    goto LABEL_353;
                  }
                }
                break;
              }
LABEL_353:
              if (v265 <= v250)
              {
                unsigned int v280 = (int *)&v265[v230];
              }
              else
              {
                unsigned int v248 = v265;
                unsigned int v280 = v244;
              }
            }
            else
            {
              uint64_t v260 = (int *)&v248[-2 * v230];
              while (v260 != v244)
              {
                int v261 = (unsigned int *)v260;
                uint64_t v262 = *v260;
                unsigned int v263 = *(_DWORD *)(v766 + 4 * v767 * v262);
                if (v263 >= v258)
                {
                  v260 -= v230;
                  if (v262 >= v256 || v263 != v258) {
                    continue;
                  }
                }
                *uint64_t v244 = v262;
                *int v261 = v255;
                ++v254;
                goto LABEL_326;
              }
              unsigned int v280 = &v244[v230];
              uint64_t v293 = *v253;
              unsigned int v294 = *(_DWORD *)(v766 + 4 * v767 * v293);
              if (v257 >= v294 && (v255 >= v293 || v257 != v294))
              {
                if (v280 == v253) {
                  break;
                }
                unsigned int v296 = v244;
                while (1)
                {
                  uint64_t v297 = v296[v230];
                  unsigned int v298 = *(_DWORD *)(v766 + 4 * v767 * v297);
                  if (v257 < v298) {
                    break;
                  }
                  if (v255 < v297 && v257 == v298) {
                    break;
                  }
                  unsigned int v296 = (int *)((char *)v296 + v235);
                  if (&v296[(unint64_t)v235 / 4] == v253) {
                    goto LABEL_304;
                  }
                }
                v296[v230] = v293;
                *int v253 = v297;
                unsigned int v280 = &v296[2 * v230];
              }
              if (v280 == v253) {
                break;
              }
              while (1)
              {
                uint64_t v300 = *v244;
                unsigned int v301 = *(_DWORD *)(v247 + 4 * v249 * v300);
                uint64_t v302 = *v280;
                unsigned int v303 = *(_DWORD *)(v247 + 4 * v249 * v302);
                LODWORD(v304) = *v280;
                while (v301 >= v303)
                {
                  if (v301 == v303 && v300 < v302)
                  {
                    LODWORD(v304) = v302;
                    goto LABEL_398;
                  }
                  unsigned int v280 = (int *)((char *)v280 + v235);
                  uint64_t v304 = *v280;
                  unsigned int v303 = *(_DWORD *)(v247 + 4 * v249 * v304);
                  LODWORD(v302) = *v280;
                }
                do
                {
                  do
                  {
LABEL_398:
                    v253 -= v230;
                    uint64_t v305 = *v253;
                    unsigned int v306 = *(_DWORD *)(v247 + 4 * v249 * v305);
                  }
                  while (v301 < v306);
                }
                while (v300 < v305 && v301 == v306);
                if (v280 >= v253) {
                  break;
                }
                *unsigned int v280 = v305;
                *int v253 = v304;
                v280 += v230;
              }
              if (v280 > (int *)v250) {
                break;
              }
            }
            uint64_t v244 = v280;
          }
          while (v248 != v250);
        }
LABEL_304:
        ++v232;
        uint64_t v3 = v758;
      }
      while (v232 != v739);
      goto LABEL_863;
    case 3:
      int v325 = *(_DWORD *)(a1 + 20);
      uint64_t v326 = *(unsigned int *)(a1 + 24);
      unint64_t v327 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v327, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v328 = *(const void ***)v3;
      if ((v326 & 0x80000000) != 0) {
        v326 += ((unsigned char *)v328[1] - (unsigned char *)*v328) >> 2;
      }
      unint64_t v329 = (unint64_t)v328[6];
      int v330 = mlx::core::array::shape(v3, v326);
      int v331 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v331, (uint64_t)v331[1], ((unsigned char *)v331[1] - (unsigned char *)*v331) >> 2);
      uint64_t v332 = (char *)v763 + 4 * (int)v326;
      int64_t v333 = v764 - (v332 + 4);
      if (v764 != v332 + 4) {
        memmove((char *)v763 + 4 * (int)v326, v332 + 4, v764 - (v332 + 4));
      }
      int v764 = &v332[v333];
      unsigned int v334 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v334[3], (uint64_t)v334[4], ((unsigned char *)v334[4] - (unsigned char *)v334[3]) >> 3);
      unint64_t v335 = (char *)__p + 8 * (int)v326;
      int64_t v336 = v761 - (v335 + 8);
      if (v761 != v335 + 8) {
        memmove((char *)__p + 8 * (int)v326, v335 + 8, v761 - (v335 + 8));
      }
      int v761 = &v335[v336];
      unint64_t v337 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v326);
      int v338 = mlx::core::array::shape(v3, v326);
      if (v329 < v330) {
        goto LABEL_863;
      }
      uint64_t v339 = 0;
      unint64_t v340 = v329 / v330;
      unint64_t v341 = 4 * v337 * v338;
      uint64_t v342 = 4 * v337;
      unint64_t v754 = v337 * v338;
      if (v340 <= 1) {
        unint64_t v340 = 1;
      }
      unint64_t v740 = v340;
      unint64_t v747 = v337 * ((v338 & (v325 >> 31)) + v325);
      do
      {
        int v343 = (int *)v763;
        unint64_t v344 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v345 = 0;
        uint64_t v346 = (v344 - 1);
        if ((int)v344 - 1 >= 0)
        {
          unint64_t v347 = __p;
          int v348 = v339;
          do
          {
            ldiv_t v349 = ldiv(v348, v343[v346]);
            int v348 = v349.quot;
            v345 += v347[v346--] * v349.rem;
          }
          while (v346 != -1);
        }
        uint64_t v350 = *(void *)(*(void *)v3 + 152);
        uint64_t v351 = &(*a3)[19][v345];
        if (v754)
        {
          uint64_t v352 = 0;
          int v353 = 0;
          do
          {
            *(int *)((char *)v351 + v352) = v353++;
            v352 += v342;
          }
          while (v341 != v352);
        }
        uint64_t v354 = v350 + v345;
        uint64_t v766 = v354;
        unint64_t v767 = v337;
        if (v747 != v754)
        {
          uint64_t v355 = (unsigned int *)&v351[v754];
          unint64_t v356 = v337;
          int v357 = (unsigned int *)&v351[v747];
          do
          {
            unint64_t v358 = (((char *)v355 - (char *)v351) >> 2) / v337;
            if (v358 < 2) {
              break;
            }
            if (v358 == 3)
            {
              break;
            }
            if (v358 == 2)
            {
              uint64_t v408 = v355[-v337];
              uint64_t v409 = *v351;
              int v410 = *(char *)(v354 + v356 * v408);
              int v411 = *(char *)(v354 + v356 * v409);
              if (v410 < v411 || v408 < v409 && v410 == v411)
              {
                *uint64_t v351 = v408;
                v355[-v337] = v409;
              }
              break;
            }
            if ((int)v358 <= 7)
            {
              uint64_t v412 = &v355[-v337];
              if (v412 != (unsigned int *)v351)
              {
                uint64_t v413 = v766;
                unint64_t v414 = v767;
                uint64_t v415 = (unsigned int *)&v351[(unint64_t)v342 / 4];
                do
                {
                  uint64_t v416 = (unsigned int *)&v351[v337];
                  if (v351 != (int *)v355 && v416 != v355)
                  {
                    uint64_t v417 = v415;
                    uint64_t v418 = v351;
                    do
                    {
                      uint64_t v419 = *v417;
                      uint64_t v420 = *v418;
                      int v421 = *(char *)(v413 + v414 * v419);
                      int v422 = *(char *)(v413 + v414 * v420);
                      if (v421 < v422
                        || (v419 < v420 ? (BOOL v423 = v421 == v422) : (BOOL v423 = 0), v423))
                      {
                        uint64_t v418 = (int *)v417;
                      }
                      uint64_t v417 = (unsigned int *)((char *)v417 + v342);
                    }
                    while (v417 != v355);
                    if (v418 != v351)
                    {
                      int v424 = *v351;
                      *uint64_t v351 = *v418;
                      *uint64_t v418 = v424;
                    }
                  }
                  uint64_t v415 = (unsigned int *)((char *)v415 + v342);
                  v351 += v337;
                }
                while (v416 != v412);
              }
              break;
            }
            uint64_t v359 = (unsigned int *)&v351[(v358 >> 1) * v337];
            uint64_t v360 = (int *)&v355[-v337];
            uint64_t v362 = *v351;
            uint64_t v363 = *v359;
            uint64_t v354 = v766;
            unint64_t v356 = v767;
            int v364 = *(unsigned __int8 *)(v766 + v767 * v362);
            if (*(char *)(v766 + v767 * v363) > (char)v364
              || ((int v365 = *(unsigned __int8 *)(v766 + v767 * v363), v362 < v363)
                ? (BOOL v366 = v364 == v365)
                : (BOOL v366 = 0),
                  v366))
            {
              uint64_t v368 = &v355[-v337];
LABEL_468:
              uint64_t v371 = (unsigned int *)&v351[v337];
              if (v371 < v368)
              {
                unint64_t v372 = v337;
                while (1)
                {
                  uint64_t v373 = *v359;
                  int v374 = *(unsigned __int8 *)(v354 + v356 * v373);
                  while (1)
                  {
                    uint64_t v375 = *v371;
                    if (*(char *)(v354 + v356 * v375) >= (char)v374
                      && (v375 >= v373 || *(unsigned __int8 *)(v354 + v356 * v375) != v374))
                    {
                      break;
                    }
                    uint64_t v371 = (unsigned int *)((char *)v371 + v342);
                  }
                  uint64_t v377 = &v368[-v337];
                  do
                  {
                    uint64_t v368 = v377;
                    uint64_t v378 = *v377;
                    if (*(char *)(v354 + v356 * v378) < (char)v374) {
                      break;
                    }
                    v377 -= v337;
                  }
                  while (v378 >= v373 || *(unsigned __int8 *)(v354 + v356 * v378) != v374);
                  if (v371 >= v368) {
                    break;
                  }
                  *uint64_t v371 = v378;
                  *uint64_t v368 = v375;
                  ++v361;
                  if (v371 == v359 && v372 == v337)
                  {
                    uint64_t v359 = v368;
                    unint64_t v372 = v337;
                  }
                  uint64_t v371 = (unsigned int *)((char *)v371 + v342);
                }
              }
              if (v371 != v359)
              {
                uint64_t v380 = *v359;
                uint64_t v381 = *v371;
                int v382 = *(char *)(v354 + v356 * v380);
                int v383 = *(char *)(v354 + v356 * v381);
                if (v382 < v383 || v380 < v381 && v382 == v383)
                {
                  *uint64_t v371 = v380;
                  *uint64_t v359 = v381;
                  ++v361;
                }
              }
              if (v371 == v357) {
                break;
              }
              if (!v361)
              {
                unint64_t v385 = v371;
                if (v371 <= v357)
                {
                  while (&v385[(unint64_t)v342 / 4] != v355)
                  {
                    uint64_t v392 = v385[v337];
                    uint64_t v393 = *v385;
                    int v394 = *(char *)(v354 + v356 * v392);
                    int v395 = *(char *)(v354 + v356 * v393);
                    if (v394 >= v395)
                    {
                      unint64_t v385 = (unsigned int *)((char *)v385 + v342);
                      if (v392 >= v393 || v394 != v395) {
                        continue;
                      }
                    }
                    goto LABEL_495;
                  }
                }
                else
                {
                  int v386 = v351;
                  while (&v386[(unint64_t)v342 / 4] != (int *)v371)
                  {
                    uint64_t v387 = v386[v337];
                    uint64_t v388 = *v386;
                    int v389 = *(char *)(v354 + v356 * v387);
                    int v390 = *(char *)(v354 + v356 * v388);
                    if (v389 >= v390)
                    {
                      int v386 = (int *)((char *)v386 + v342);
                      if (v387 >= v388 || v389 != v390) {
                        continue;
                      }
                    }
                    goto LABEL_495;
                  }
                }
                break;
              }
LABEL_495:
              if (v371 <= v357)
              {
                int v384 = (int *)&v371[v337];
              }
              else
              {
                uint64_t v355 = v371;
                int v384 = v351;
              }
            }
            else
            {
              unint64_t v367 = (int *)&v355[-2 * v337];
              while (v367 != v351)
              {
                uint64_t v368 = (unsigned int *)v367;
                uint64_t v369 = *v367;
                if (*(char *)(v766 + v767 * v369) >= (char)v365)
                {
                  v367 -= v337;
                  if (v369 >= v363 || *(unsigned __int8 *)(v766 + v767 * v369) != v365) {
                    continue;
                  }
                }
                *uint64_t v351 = v369;
                *uint64_t v368 = v362;
                ++v361;
                goto LABEL_468;
              }
              int v384 = &v351[v337];
              uint64_t v397 = *v360;
              if (*(char *)(v766 + v767 * v397) <= (char)v364
                && (v362 >= v397 || v364 != *(unsigned __int8 *)(v766 + v767 * v397)))
              {
                if (v384 == v360) {
                  break;
                }
                uint64_t v399 = v351;
                while (1)
                {
                  uint64_t v400 = v399[v337];
                  if (*(char *)(v766 + v767 * v400) > (char)v364) {
                    break;
                  }
                  if (v362 < v400 && v364 == *(unsigned __int8 *)(v766 + v767 * v400)) {
                    break;
                  }
                  uint64_t v399 = (int *)((char *)v399 + v342);
                  if (&v399[(unint64_t)v342 / 4] == v360) {
                    goto LABEL_446;
                  }
                }
                v399[v337] = v397;
                *uint64_t v360 = v400;
                int v384 = &v399[2 * v337];
              }
              if (v384 == v360) {
                break;
              }
              while (1)
              {
                uint64_t v402 = *v351;
                int v403 = *(unsigned __int8 *)(v354 + v356 * v402);
                uint64_t v404 = *v384;
                if (*(char *)(v354 + v356 * v402) >= *(char *)(v354 + v356 * v404))
                {
                  int v405 = *(unsigned __int8 *)(v354 + v356 * v404);
                  do
                  {
                    if (v403 == v405 && v402 < v404) {
                      break;
                    }
                    int v384 = (int *)((char *)v384 + v342);
                    uint64_t v404 = *v384;
                    int v405 = *(unsigned __int8 *)(v354 + v356 * v404);
                  }
                  while (*(char *)(v354 + v356 * v404) <= (char)v403);
                }
                do
                {
                  do
                  {
                    v360 -= v337;
                    uint64_t v406 = *v360;
                  }
                  while (*(char *)(v354 + v356 * v406) > (char)v403);
                }
                while (v402 < v406 && v403 == *(unsigned __int8 *)(v354 + v356 * v406));
                if (v384 >= v360) {
                  break;
                }
                *int v384 = v406;
                *uint64_t v360 = v404;
                v384 += v337;
              }
              if (v384 > (int *)v357) {
                break;
              }
            }
            uint64_t v351 = v384;
          }
          while (v355 != v357);
        }
LABEL_446:
        ++v339;
        uint64_t v3 = v758;
      }
      while (v339 != v740);
      goto LABEL_863;
    case 4:
      int v111 = *(_DWORD *)(a1 + 20);
      uint64_t v112 = *(unsigned int *)(a1 + 24);
      uint64_t v113 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v113, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v114 = *(const void ***)v3;
      if ((v112 & 0x80000000) != 0) {
        v112 += ((unsigned char *)v114[1] - (unsigned char *)*v114) >> 2;
      }
      unint64_t v115 = (unint64_t)v114[6];
      int v116 = mlx::core::array::shape(v3, v112);
      ldiv_t v117 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v117, (uint64_t)v117[1], ((unsigned char *)v117[1] - (unsigned char *)*v117) >> 2);
      unint64_t v118 = (char *)v763 + 4 * (int)v112;
      int64_t v119 = v764 - (v118 + 4);
      if (v764 != v118 + 4) {
        memmove((char *)v763 + 4 * (int)v112, v118 + 4, v764 - (v118 + 4));
      }
      int v764 = &v118[v119];
      uint64_t v120 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v120[3], (uint64_t)v120[4], ((unsigned char *)v120[4] - (unsigned char *)v120[3]) >> 3);
      unsigned int v121 = (char *)__p + 8 * (int)v112;
      int64_t v122 = v761 - (v121 + 8);
      if (v761 != v121 + 8) {
        memmove((char *)__p + 8 * (int)v112, v121 + 8, v761 - (v121 + 8));
      }
      int v761 = &v121[v122];
      unint64_t v123 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v112);
      int v124 = mlx::core::array::shape(v3, v112);
      if (v115 < v116) {
        goto LABEL_863;
      }
      uint64_t v125 = 0;
      unint64_t v126 = v115 / v116;
      unint64_t v127 = 4 * v123 * v124;
      uint64_t v128 = 4 * v123;
      unint64_t v752 = v123 * v124;
      if (v126 <= 1) {
        unint64_t v126 = 1;
      }
      unint64_t v738 = v126;
      unint64_t v745 = v123 * ((v124 & (v111 >> 31)) + v111);
      do
      {
        uint64_t v129 = (int *)v763;
        unint64_t v130 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v131 = 0;
        uint64_t v132 = (v130 - 1);
        if ((int)v130 - 1 >= 0)
        {
          unint64_t v133 = __p;
          int v134 = v125;
          do
          {
            ldiv_t v135 = ldiv(v134, v129[v132]);
            int v134 = v135.quot;
            v131 += v133[v132--] * v135.rem;
          }
          while (v132 != -1);
        }
        uint64_t v136 = *(void *)(*(void *)v3 + 152);
        int v137 = &(*a3)[19][v131];
        if (v752)
        {
          uint64_t v138 = 0;
          int v139 = 0;
          do
          {
            *(int *)((char *)v137 + v138) = v139++;
            v138 += v128;
          }
          while (v127 != v138);
        }
        uint64_t v140 = v136 + 4 * v131;
        uint64_t v766 = v140;
        unint64_t v767 = v123;
        if (v745 != v752)
        {
          uint64_t v141 = (unsigned int *)&v137[v752];
          unint64_t v142 = v123;
          int v143 = (unsigned int *)&v137[v745];
          do
          {
            unint64_t v144 = (((char *)v141 - (char *)v137) >> 2) / v123;
            if (v144 < 2) {
              break;
            }
            if (v144 == 3)
            {
              break;
            }
            if (v144 == 2)
            {
              uint64_t v201 = v141[-v123];
              uint64_t v202 = *v137;
              int v203 = *(_DWORD *)(v140 + 4 * v142 * v201);
              int v204 = *(_DWORD *)(v140 + 4 * v142 * v202);
              if (v203 < v204 || v201 < v202 && v203 == v204)
              {
                *int v137 = v201;
                v141[-v123] = v202;
              }
              break;
            }
            if ((int)v144 <= 7)
            {
              BOOL v205 = &v141[-v123];
              if (v205 != (unsigned int *)v137)
              {
                uint64_t v206 = v766;
                unint64_t v207 = v767;
                uint64_t v208 = (unsigned int *)&v137[(unint64_t)v128 / 4];
                do
                {
                  float v209 = (unsigned int *)&v137[v123];
                  if (v137 != (int *)v141 && v209 != v141)
                  {
                    uint64_t v210 = v208;
                    unsigned int v211 = v137;
                    do
                    {
                      uint64_t v212 = *v210;
                      uint64_t v213 = *v211;
                      int v214 = *(_DWORD *)(v206 + 4 * v207 * v212);
                      int v215 = *(_DWORD *)(v206 + 4 * v207 * v213);
                      if (v214 < v215
                        || (v212 < v213 ? (BOOL v216 = v214 == v215) : (BOOL v216 = 0), v216))
                      {
                        unsigned int v211 = (int *)v210;
                      }
                      uint64_t v210 = (unsigned int *)((char *)v210 + v128);
                    }
                    while (v210 != v141);
                    if (v211 != v137)
                    {
                      int v217 = *v137;
                      *int v137 = *v211;
                      *unsigned int v211 = v217;
                    }
                  }
                  uint64_t v208 = (unsigned int *)((char *)v208 + v128);
                  v137 += v123;
                }
                while (v209 != v205);
              }
              break;
            }
            unint64_t v145 = (unsigned int *)&v137[(v144 >> 1) * v123];
            int v146 = (int *)&v141[-v123];
            uint64_t v148 = *v137;
            uint64_t v149 = *v145;
            uint64_t v140 = v766;
            unint64_t v142 = v767;
            int v150 = *(_DWORD *)(v766 + 4 * v767 * v148);
            int v151 = *(_DWORD *)(v766 + 4 * v767 * v149);
            if (v150 < v151 || (v148 < v149 ? (BOOL v152 = v150 == v151) : (BOOL v152 = 0), v152))
            {
              unint64_t v154 = &v141[-v123];
LABEL_184:
              unint64_t v158 = (unsigned int *)&v137[v123];
              if (v158 < v154)
              {
                unint64_t v159 = v123;
                while (1)
                {
                  uint64_t v160 = *v145;
                  int v161 = *(_DWORD *)(v140 + 4 * v142 * v160);
                  while (1)
                  {
                    uint64_t v162 = *v158;
                    int v163 = *(_DWORD *)(v140 + 4 * v142 * v162);
                    if (v163 >= v161 && (v162 >= v160 || v163 != v161)) {
                      break;
                    }
                    unint64_t v158 = (unsigned int *)((char *)v158 + v128);
                  }
                  ldiv_t v165 = &v154[-v123];
                  do
                  {
                    unint64_t v154 = v165;
                    uint64_t v166 = *v165;
                    int v167 = *(_DWORD *)(v140 + 4 * v142 * v166);
                    if (v167 < v161) {
                      break;
                    }
                    v165 -= v123;
                  }
                  while (v166 >= v160 || v167 != v161);
                  if (v158 >= v154) {
                    break;
                  }
                  *unint64_t v158 = v166;
                  *unint64_t v154 = v162;
                  ++v147;
                  if (v158 == v145 && v159 == v123)
                  {
                    unint64_t v145 = v154;
                    unint64_t v159 = v123;
                  }
                  unint64_t v158 = (unsigned int *)((char *)v158 + v128);
                }
              }
              if (v158 != v145)
              {
                uint64_t v169 = *v145;
                uint64_t v170 = *v158;
                int v171 = *(_DWORD *)(v140 + 4 * v142 * v169);
                int v172 = *(_DWORD *)(v140 + 4 * v142 * v170);
                if (v171 < v172 || v169 < v170 && v171 == v172)
                {
                  *unint64_t v158 = v169;
                  *unint64_t v145 = v170;
                  ++v147;
                }
              }
              if (v158 == v143) {
                break;
              }
              if (!v147)
              {
                uint64_t v174 = v158;
                if (v158 <= v143)
                {
                  while (&v174[(unint64_t)v128 / 4] != v141)
                  {
                    uint64_t v181 = v174[v123];
                    uint64_t v182 = *v174;
                    int v183 = *(_DWORD *)(v140 + 4 * v142 * v181);
                    int v184 = *(_DWORD *)(v140 + 4 * v142 * v182);
                    if (v183 >= v184)
                    {
                      uint64_t v174 = (unsigned int *)((char *)v174 + v128);
                      if (v181 >= v182 || v183 != v184) {
                        continue;
                      }
                    }
                    goto LABEL_211;
                  }
                }
                else
                {
                  int v175 = v137;
                  while (&v175[(unint64_t)v128 / 4] != (int *)v158)
                  {
                    uint64_t v176 = v175[v123];
                    uint64_t v177 = *v175;
                    int v178 = *(_DWORD *)(v140 + 4 * v142 * v176);
                    int v179 = *(_DWORD *)(v140 + 4 * v142 * v177);
                    if (v178 >= v179)
                    {
                      int v175 = (int *)((char *)v175 + v128);
                      if (v176 >= v177 || v178 != v179) {
                        continue;
                      }
                    }
                    goto LABEL_211;
                  }
                }
                break;
              }
LABEL_211:
              if (v158 <= v143)
              {
                int v173 = (int *)&v158[v123];
              }
              else
              {
                uint64_t v141 = v158;
                int v173 = v137;
              }
            }
            else
            {
              int64_t v153 = (int *)&v141[-2 * v123];
              while (v153 != v137)
              {
                unint64_t v154 = (unsigned int *)v153;
                uint64_t v155 = *v153;
                int v156 = *(_DWORD *)(v766 + 4 * v767 * v155);
                if (v156 >= v151)
                {
                  v153 -= v123;
                  if (v155 >= v149 || v156 != v151) {
                    continue;
                  }
                }
                *int v137 = v155;
                *unint64_t v154 = v148;
                ++v147;
                goto LABEL_184;
              }
              int v173 = &v137[v123];
              uint64_t v186 = *v146;
              int v187 = *(_DWORD *)(v766 + 4 * v767 * v186);
              if (v150 >= v187 && (v148 >= v186 || v150 != v187))
              {
                if (v173 == v146) {
                  break;
                }
                uint64_t v189 = v137;
                while (1)
                {
                  uint64_t v190 = v189[v123];
                  int v191 = *(_DWORD *)(v766 + 4 * v767 * v190);
                  if (v150 < v191) {
                    break;
                  }
                  if (v148 < v190 && v150 == v191) {
                    break;
                  }
                  uint64_t v189 = (int *)((char *)v189 + v128);
                  if (&v189[(unint64_t)v128 / 4] == v146) {
                    goto LABEL_162;
                  }
                }
                v189[v123] = v186;
                *int v146 = v190;
                int v173 = &v189[2 * v123];
              }
              if (v173 == v146) {
                break;
              }
              while (1)
              {
                uint64_t v193 = *v137;
                int v194 = *(_DWORD *)(v140 + 4 * v142 * v193);
                uint64_t v195 = *v173;
                int v196 = *(_DWORD *)(v140 + 4 * v142 * v195);
                LODWORD(v197) = *v173;
                while (v194 >= v196)
                {
                  if (v194 == v196 && v193 < v195)
                  {
                    LODWORD(v197) = v195;
                    goto LABEL_256;
                  }
                  int v173 = (int *)((char *)v173 + v128);
                  uint64_t v197 = *v173;
                  int v196 = *(_DWORD *)(v140 + 4 * v142 * v197);
                  LODWORD(v195) = *v173;
                }
                do
                {
                  do
                  {
LABEL_256:
                    v146 -= v123;
                    uint64_t v198 = *v146;
                    int v199 = *(_DWORD *)(v140 + 4 * v142 * v198);
                  }
                  while (v194 < v199);
                }
                while (v193 < v198 && v194 == v199);
                if (v173 >= v146) {
                  break;
                }
                *int v173 = v198;
                *int v146 = v197;
                v173 += v123;
              }
              if (v173 > (int *)v143) {
                break;
              }
            }
            int v137 = v173;
          }
          while (v141 != v143);
        }
LABEL_162:
        ++v125;
        uint64_t v3 = v758;
      }
      while (v125 != v738);
      goto LABEL_863;
    case 5:
      int v532 = *(_DWORD *)(a1 + 20);
      uint64_t v533 = *(unsigned int *)(a1 + 24);
      uint64_t v534 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v534, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v535 = *(const void ***)v3;
      if ((v533 & 0x80000000) != 0) {
        v533 += ((unsigned char *)v535[1] - (unsigned char *)*v535) >> 2;
      }
      unint64_t v536 = (unint64_t)v535[6];
      int v537 = mlx::core::array::shape(v3, v533);
      int v538 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v538, (uint64_t)v538[1], ((unsigned char *)v538[1] - (unsigned char *)*v538) >> 2);
      unint64_t v539 = (char *)v763 + 4 * (int)v533;
      int64_t v540 = v764 - (v539 + 4);
      if (v764 != v539 + 4) {
        memmove((char *)v763 + 4 * (int)v533, v539 + 4, v764 - (v539 + 4));
      }
      int v764 = &v539[v540];
      uint64_t v541 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v541[3], (uint64_t)v541[4], ((unsigned char *)v541[4] - (unsigned char *)v541[3]) >> 3);
      uint64_t v542 = (char *)__p + 8 * (int)v533;
      int64_t v543 = v761 - (v542 + 8);
      if (v761 != v542 + 8) {
        memmove((char *)__p + 8 * (int)v533, v542 + 8, v761 - (v542 + 8));
      }
      int v761 = &v542[v543];
      unint64_t v544 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v533);
      int v545 = mlx::core::array::shape(v3, v533);
      if (v536 < v537) {
        goto LABEL_863;
      }
      uint64_t v546 = 0;
      unint64_t v547 = v536 / v537;
      unint64_t v548 = 4 * v544 * v545;
      uint64_t v549 = 4 * v544;
      unint64_t v756 = v544 * v545;
      if (v547 <= 1) {
        unint64_t v547 = 1;
      }
      unint64_t v742 = v547;
      unint64_t v749 = v544 * ((v545 & (v532 >> 31)) + v532);
      do
      {
        uint64_t v550 = (int *)v763;
        unint64_t v551 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v552 = 0;
        uint64_t v553 = (v551 - 1);
        if ((int)v551 - 1 >= 0)
        {
          uint64_t v554 = __p;
          int v555 = v546;
          do
          {
            ldiv_t v556 = ldiv(v555, v550[v553]);
            int v555 = v556.quot;
            v552 += v554[v553--] * v556.rem;
          }
          while (v553 != -1);
        }
        uint64_t v557 = *(void *)(*(void *)v3 + 152);
        uint64_t v558 = &(*a3)[19][v552];
        if (v756)
        {
          uint64_t v559 = 0;
          int v560 = 0;
          do
          {
            *(int *)((char *)v558 + v559) = v560++;
            v559 += v549;
          }
          while (v548 != v559);
        }
        uint64_t v561 = v557 + 8 * v552;
        uint64_t v766 = v561;
        unint64_t v767 = v544;
        if (v749 != v756)
        {
          uint64_t v562 = (unsigned int *)&v558[v756];
          unint64_t v563 = v544;
          uint64_t v564 = (unsigned int *)&v558[v749];
          do
          {
            unint64_t v565 = (((char *)v562 - (char *)v558) >> 2) / v544;
            if (v565 < 2) {
              break;
            }
            if (v565 == 3)
            {
              break;
            }
            if (v565 == 2)
            {
              uint64_t v622 = v562[-v544];
              uint64_t v623 = *v558;
              uint64_t v624 = *(void *)(v561 + 8 * v563 * v622);
              uint64_t v625 = *(void *)(v561 + 8 * v563 * v623);
              if (v624 < v625 || v622 < v623 && v624 == v625)
              {
                *uint64_t v558 = v622;
                v562[-v544] = v623;
              }
              break;
            }
            if ((int)v565 <= 7)
            {
              uint64_t v626 = &v562[-v544];
              if (v626 != (unsigned int *)v558)
              {
                uint64_t v627 = v766;
                unint64_t v628 = v767;
                uint64_t v629 = (unsigned int *)&v558[(unint64_t)v549 / 4];
                do
                {
                  uint64_t v630 = (unsigned int *)&v558[v544];
                  if (v558 != (int *)v562 && v630 != v562)
                  {
                    int v631 = v629;
                    int v632 = v558;
                    do
                    {
                      uint64_t v633 = *v631;
                      uint64_t v634 = *v632;
                      uint64_t v635 = *(void *)(v627 + 8 * v628 * v633);
                      uint64_t v636 = *(void *)(v627 + 8 * v628 * v634);
                      if (v635 < v636
                        || (v633 < v634 ? (BOOL v637 = v635 == v636) : (BOOL v637 = 0), v637))
                      {
                        int v632 = (int *)v631;
                      }
                      int v631 = (unsigned int *)((char *)v631 + v549);
                    }
                    while (v631 != v562);
                    if (v632 != v558)
                    {
                      int v638 = *v558;
                      *uint64_t v558 = *v632;
                      *int v632 = v638;
                    }
                  }
                  uint64_t v629 = (unsigned int *)((char *)v629 + v549);
                  v558 += v544;
                }
                while (v630 != v626);
              }
              break;
            }
            unint64_t v566 = (unsigned int *)&v558[(v565 >> 1) * v544];
            uint64_t v567 = (int *)&v562[-v544];
            uint64_t v569 = *v558;
            uint64_t v570 = *v566;
            uint64_t v561 = v766;
            unint64_t v563 = v767;
            uint64_t v571 = *(void *)(v766 + 8 * v767 * v569);
            uint64_t v572 = *(void *)(v766 + 8 * v767 * v570);
            if (v571 < v572 || (v569 < v570 ? (BOOL v573 = v571 == v572) : (BOOL v573 = 0), v573))
            {
              uint64_t v575 = &v562[-v544];
LABEL_752:
              unint64_t v579 = (unsigned int *)&v558[v544];
              if (v579 < v575)
              {
                unint64_t v580 = v544;
                while (1)
                {
                  uint64_t v581 = *v566;
                  uint64_t v582 = *(void *)(v561 + 8 * v563 * v581);
                  while (1)
                  {
                    uint64_t v583 = *v579;
                    uint64_t v584 = *(void *)(v561 + 8 * v563 * v583);
                    if (v584 >= v582 && (v583 >= v581 || v584 != v582)) {
                      break;
                    }
                    unint64_t v579 = (unsigned int *)((char *)v579 + v549);
                  }
                  unint64_t v586 = &v575[-v544];
                  do
                  {
                    uint64_t v575 = v586;
                    uint64_t v587 = *v586;
                    uint64_t v588 = *(void *)(v561 + 8 * v563 * v587);
                    if (v588 < v582) {
                      break;
                    }
                    v586 -= v544;
                  }
                  while (v587 >= v581 || v588 != v582);
                  if (v579 >= v575) {
                    break;
                  }
                  *unint64_t v579 = v587;
                  *uint64_t v575 = v583;
                  ++v568;
                  if (v579 == v566 && v580 == v544)
                  {
                    unint64_t v566 = v575;
                    unint64_t v580 = v544;
                  }
                  unint64_t v579 = (unsigned int *)((char *)v579 + v549);
                }
              }
              if (v579 != v566)
              {
                uint64_t v590 = *v566;
                uint64_t v591 = *v579;
                uint64_t v592 = *(void *)(v561 + 8 * v563 * v590);
                uint64_t v593 = *(void *)(v561 + 8 * v563 * v591);
                if (v592 < v593 || v590 < v591 && v592 == v593)
                {
                  *unint64_t v579 = v590;
                  *unint64_t v566 = v591;
                  ++v568;
                }
              }
              if (v579 == v564) {
                break;
              }
              if (!v568)
              {
                uint64_t v595 = v579;
                if (v579 <= v564)
                {
                  while (&v595[(unint64_t)v549 / 4] != v562)
                  {
                    uint64_t v602 = v595[v544];
                    uint64_t v603 = *v595;
                    uint64_t v604 = *(void *)(v561 + 8 * v563 * v602);
                    uint64_t v605 = *(void *)(v561 + 8 * v563 * v603);
                    if (v604 >= v605)
                    {
                      uint64_t v595 = (unsigned int *)((char *)v595 + v549);
                      if (v602 >= v603 || v604 != v605) {
                        continue;
                      }
                    }
                    goto LABEL_779;
                  }
                }
                else
                {
                  uint64_t v596 = v558;
                  while (&v596[(unint64_t)v549 / 4] != (int *)v579)
                  {
                    uint64_t v597 = v596[v544];
                    uint64_t v598 = *v596;
                    uint64_t v599 = *(void *)(v561 + 8 * v563 * v597);
                    uint64_t v600 = *(void *)(v561 + 8 * v563 * v598);
                    if (v599 >= v600)
                    {
                      uint64_t v596 = (int *)((char *)v596 + v549);
                      if (v597 >= v598 || v599 != v600) {
                        continue;
                      }
                    }
                    goto LABEL_779;
                  }
                }
                break;
              }
LABEL_779:
              if (v579 <= v564)
              {
                ldiv_t v594 = (int *)&v579[v544];
              }
              else
              {
                uint64_t v562 = v579;
                ldiv_t v594 = v558;
              }
            }
            else
            {
              uint64_t v574 = (int *)&v562[-2 * v544];
              while (v574 != v558)
              {
                uint64_t v575 = (unsigned int *)v574;
                uint64_t v576 = *v574;
                uint64_t v577 = *(void *)(v766 + 8 * v767 * v576);
                if (v577 >= v572)
                {
                  v574 -= v544;
                  if (v576 >= v570 || v577 != v572) {
                    continue;
                  }
                }
                *uint64_t v558 = v576;
                *uint64_t v575 = v569;
                ++v568;
                goto LABEL_752;
              }
              ldiv_t v594 = &v558[v544];
              uint64_t v607 = *v567;
              uint64_t v608 = *(void *)(v766 + 8 * v767 * v607);
              if (v571 >= v608 && (v569 >= v607 || v571 != v608))
              {
                if (v594 == v567) {
                  break;
                }
                uint64_t v610 = v558;
                while (1)
                {
                  uint64_t v611 = v610[v544];
                  uint64_t v612 = *(void *)(v766 + 8 * v767 * v611);
                  if (v571 < v612) {
                    break;
                  }
                  if (v569 < v611 && v571 == v612) {
                    break;
                  }
                  uint64_t v610 = (int *)((char *)v610 + v549);
                  if (&v610[(unint64_t)v549 / 4] == v567) {
                    goto LABEL_730;
                  }
                }
                v610[v544] = v607;
                *uint64_t v567 = v611;
                ldiv_t v594 = &v610[2 * v544];
              }
              if (v594 == v567) {
                break;
              }
              while (2)
              {
                uint64_t v614 = *v558;
                uint64_t v615 = *(void *)(v561 + 8 * v563 * v614);
                uint64_t v616 = *v594;
                uint64_t v617 = *(void *)(v561 + 8 * v563 * v616);
                LODWORD(v618) = *v594;
                while (v615 >= v617)
                {
                  if (v615 == v617 && v614 < v616)
                  {
                    LODWORD(v618) = v616;
                    goto LABEL_826;
                  }
                  ldiv_t v594 = (int *)((char *)v594 + v549);
                  uint64_t v618 = *v594;
                  uint64_t v617 = *(void *)(v561 + 8 * v563 * v618);
                  LODWORD(v616) = *v594;
                }
                do
                {
                  do
                  {
LABEL_826:
                    v567 -= v544;
                    uint64_t v619 = *v567;
                    uint64_t v620 = *(void *)(v561 + 8 * v563 * v619);
                  }
                  while (v615 < v620);
                }
                while (v614 < v619 && v615 == v620);
                if (v594 < v567)
                {
                  int *v594 = v619;
                  *uint64_t v567 = v618;
                  v594 += v544;
                  continue;
                }
                break;
              }
              if (v594 > (int *)v564) {
                break;
              }
            }
            uint64_t v558 = v594;
          }
          while (v562 != v564);
        }
LABEL_730:
        ++v546;
        uint64_t v3 = v758;
      }
      while (v546 != v742);
      goto LABEL_863;
    case 6:
      int v639 = *(_DWORD *)(a1 + 20);
      uint64_t v640 = *(unsigned int *)(a1 + 24);
      unint64_t v641 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
      uint64_t v768 = &unk_27062AEC8;
      uint64_t v769 = mlx::core::allocator::free;
      uint64_t v770 = &v768;
      mlx::core::array::set_data(a3, (uint64_t)v641, (uint64_t)&v768);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v768);
      uint64_t v642 = *(const void ***)v3;
      if ((v640 & 0x80000000) != 0) {
        v640 += ((unsigned char *)v642[1] - (unsigned char *)*v642) >> 2;
      }
      unint64_t v643 = (unint64_t)v642[6];
      int v644 = mlx::core::array::shape(v3, v640);
      uint64_t v645 = *(const void ***)v3;
      uint64_t v763 = 0;
      int v764 = 0;
      uint64_t v765 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v763, *v645, (uint64_t)v645[1], ((unsigned char *)v645[1] - (unsigned char *)*v645) >> 2);
      uint64_t v646 = (char *)v763 + 4 * (int)v640;
      int64_t v647 = v764 - (v646 + 4);
      if (v764 != v646 + 4) {
        memmove((char *)v763 + 4 * (int)v640, v646 + 4, v764 - (v646 + 4));
      }
      int v764 = &v646[v647];
      uint64_t v648 = *(const void ***)v3;
      __n128 __p = 0;
      int v761 = 0;
      uint64_t v762 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v648[3], (uint64_t)v648[4], ((unsigned char *)v648[4] - (unsigned char *)v648[3]) >> 3);
      uint64_t v649 = (char *)__p + 8 * (int)v640;
      int64_t v650 = v761 - (v649 + 8);
      if (v761 != v649 + 8) {
        memmove((char *)__p + 8 * (int)v640, v649 + 8, v761 - (v649 + 8));
      }
      int v761 = &v649[v650];
      unint64_t v651 = *(void *)(*(void *)(*(void *)v3 + 24) + 8 * (int)v640);
      int v652 = mlx::core::array::shape(v3, v640);
      if (v643 < v644) {
        goto LABEL_863;
      }
      uint64_t v653 = 0;
      unint64_t v654 = v643 / v644;
      unint64_t v655 = 4 * v651 * v652;
      uint64_t v656 = 4 * v651;
      unint64_t v757 = v651 * v652;
      if (v654 <= 1) {
        unint64_t v654 = 1;
      }
      unint64_t v743 = v654;
      unint64_t v750 = v651 * ((v652 & (v639 >> 31)) + v639);
      do
      {
        uint64_t v657 = (int *)v763;
        unint64_t v658 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
        uint64_t v659 = 0;
        uint64_t v660 = (v658 - 1);
        if ((int)v658 - 1 >= 0)
        {
          unint64_t v661 = __p;
          int v662 = v653;
          do
          {
            ldiv_t v663 = ldiv(v662, v657[v660]);
            int v662 = v663.quot;
            v659 += v661[v660--] * v663.rem;
          }
          while (v660 != -1);
        }
        uint64_t v664 = *(void *)(*(void *)v758 + 152);
        int v665 = &(*a3)[19][v659];
        if (v757)
        {
          uint64_t v666 = 0;
          int v667 = 0;
          do
          {
            *(int *)((char *)v665 + v666) = v667++;
            v666 += v656;
          }
          while (v655 != v666);
        }
        uint64_t v668 = v664 + 4 * v659;
        uint64_t v766 = v668;
        unint64_t v767 = v651;
        if (v750 != v757)
        {
          unint64_t v669 = (unsigned int *)&v665[v757];
          unint64_t v670 = v651;
          uint64_t v671 = (unsigned int *)&v665[v750];
          do
          {
            unint64_t v672 = (((char *)v669 - (char *)v665) >> 2) / v651;
            if (v672 < 2) {
              break;
            }
            if (v672 == 3)
            {
              break;
            }
            if (v672 == 2)
            {
              uint64_t v721 = v669[-v651];
              uint64_t v722 = *v665;
              float v723 = *(float *)(v668 + 4 * v670 * v721);
              float v724 = *(float *)(v668 + 4 * v670 * v722);
              if (v723 < v724 || v721 < v722 && v723 == v724)
              {
                *int v665 = v721;
                v669[-v651] = v722;
              }
              break;
            }
            if ((int)v672 <= 7)
            {
              unint64_t v725 = &v669[-v651];
              if (v725 != (unsigned int *)v665)
              {
                uint64_t v726 = v766;
                unint64_t v727 = v767;
                uint64_t v728 = (unsigned int *)&v665[(unint64_t)v656 / 4];
                do
                {
                  uint64_t v729 = (unsigned int *)&v665[v651];
                  if (v665 != (int *)v669 && v729 != v669)
                  {
                    uint64_t v730 = v728;
                    unint64_t v731 = v665;
                    do
                    {
                      uint64_t v732 = *v730;
                      uint64_t v733 = *v731;
                      float v734 = *(float *)(v726 + 4 * v727 * v732);
                      float v735 = *(float *)(v726 + 4 * v727 * v733);
                      if (v734 < v735 || v732 < v733 && v734 == v735) {
                        unint64_t v731 = (int *)v730;
                      }
                      uint64_t v730 = (unsigned int *)((char *)v730 + v656);
                    }
                    while (v730 != v669);
                    if (v731 != v665)
                    {
                      int v736 = *v665;
                      *int v665 = *v731;
                      *unint64_t v731 = v736;
                    }
                  }
                  uint64_t v728 = (unsigned int *)((char *)v728 + v656);
                  v665 += v651;
                }
                while (v729 != v725);
              }
              break;
            }
            uint64_t v673 = (unsigned int *)&v665[(v672 >> 1) * v651];
            uint64_t v674 = (int *)&v669[-v651];
            uint64_t v676 = *v665;
            uint64_t v677 = *v673;
            uint64_t v668 = v766;
            unint64_t v670 = v767;
            float v678 = *(float *)(v766 + 4 * v767 * v676);
            float v679 = *(float *)(v766 + 4 * v767 * v677);
            if (v678 < v679 || v676 < v677 && v678 == v679)
            {
              uint64_t v680 = &v669[-v651];
LABEL_889:
              uint64_t v681 = (unsigned int *)&v665[v651];
              if (v681 < v680)
              {
                unint64_t v682 = v651;
                while (1)
                {
                  uint64_t v683 = *v673;
                  float v684 = *(float *)(v668 + 4 * v670 * v683);
                  while (1)
                  {
                    uint64_t v685 = *v681;
                    float v686 = *(float *)(v668 + 4 * v670 * v685);
                    if (v686 >= v684 && (v685 >= v683 || v686 != v684)) {
                      break;
                    }
                    uint64_t v681 = (unsigned int *)((char *)v681 + v656);
                  }
                  uint64_t v687 = &v680[-v651];
                  do
                  {
                    uint64_t v680 = v687;
                    uint64_t v688 = *v687;
                    float v689 = *(float *)(v668 + 4 * v670 * v688);
                    if (v689 < v684) {
                      break;
                    }
                    v687 -= v651;
                  }
                  while (v688 >= v683 || v689 != v684);
                  if (v681 >= v680) {
                    break;
                  }
                  *uint64_t v681 = v688;
                  unsigned int *v680 = v685;
                  ++v675;
                  if (v681 == v673 && v682 == v651)
                  {
                    uint64_t v673 = v680;
                    unint64_t v682 = v651;
                  }
                  uint64_t v681 = (unsigned int *)((char *)v681 + v656);
                }
              }
              if (v681 != v673)
              {
                uint64_t v690 = *v673;
                uint64_t v691 = *v681;
                float v692 = *(float *)(v668 + 4 * v670 * v690);
                float v693 = *(float *)(v668 + 4 * v670 * v691);
                if (v692 < v693 || v690 < v691 && v692 == v693)
                {
                  *uint64_t v681 = v690;
                  *uint64_t v673 = v691;
                  ++v675;
                }
              }
              if (v681 == v671) {
                break;
              }
              if (!v675)
              {
                uint64_t v695 = v681;
                if (v681 <= v671)
                {
                  while (&v695[(unint64_t)v656 / 4] != v669)
                  {
                    uint64_t v701 = v695[v651];
                    uint64_t v702 = *v695;
                    float v703 = *(float *)(v668 + 4 * v670 * v701);
                    float v704 = *(float *)(v668 + 4 * v670 * v702);
                    if (v703 >= v704)
                    {
                      uint64_t v695 = (unsigned int *)((char *)v695 + v656);
                      if (v701 >= v702 || v703 != v704) {
                        continue;
                      }
                    }
                    goto LABEL_911;
                  }
                }
                else
                {
                  int v696 = v665;
                  while (&v696[(unint64_t)v656 / 4] != (int *)v681)
                  {
                    uint64_t v697 = v696[v651];
                    uint64_t v698 = *v696;
                    float v699 = *(float *)(v668 + 4 * v670 * v697);
                    float v700 = *(float *)(v668 + 4 * v670 * v698);
                    if (v699 >= v700)
                    {
                      int v696 = (int *)((char *)v696 + v656);
                      if (v697 >= v698 || v699 != v700) {
                        continue;
                      }
                    }
                    goto LABEL_911;
                  }
                }
                break;
              }
LABEL_911:
              if (v681 <= v671)
              {
                uint64_t v694 = (int *)&v681[v651];
              }
              else
              {
                unint64_t v669 = v681;
                uint64_t v694 = v665;
              }
            }
            else
            {
              uint64_t v705 = (int *)&v669[-2 * v651];
              while (v705 != v665)
              {
                uint64_t v680 = (unsigned int *)v705;
                uint64_t v706 = *v705;
                float v707 = *(float *)(v766 + 4 * v767 * v706);
                if (v707 >= v679)
                {
                  v705 -= v651;
                  if (v706 >= v677 || v707 != v679) {
                    continue;
                  }
                }
                *int v665 = v706;
                unsigned int *v680 = v676;
                ++v675;
                goto LABEL_889;
              }
              uint64_t v694 = &v665[v651];
              uint64_t v708 = *v674;
              float v709 = *(float *)(v766 + 4 * v767 * v708);
              if (v678 >= v709 && (v676 >= v708 || v678 != v709))
              {
                if (v694 == v674) {
                  break;
                }
                uint64_t v710 = v665;
                while (1)
                {
                  uint64_t v711 = v710[v651];
                  float v712 = *(float *)(v766 + 4 * v767 * v711);
                  if (v678 < v712 || v676 < v711 && v678 == v712) {
                    break;
                  }
                  uint64_t v710 = (int *)((char *)v710 + v656);
                  if (&v710[(unint64_t)v656 / 4] == v674) {
                    goto LABEL_878;
                  }
                }
                v710[v651] = v708;
                *uint64_t v674 = v711;
                uint64_t v694 = &v710[2 * v651];
              }
              if (v694 == v674) {
                break;
              }
              while (1)
              {
                uint64_t v713 = *v665;
                float v714 = *(float *)(v668 + 4 * v670 * v713);
                uint64_t v715 = *v694;
                float v716 = *(float *)(v668 + 4 * v670 * v715);
                LODWORD(v717) = *v694;
                if (v714 >= v716)
                {
                  while (v714 != v716 || v713 >= v715)
                  {
                    uint64_t v694 = (int *)((char *)v694 + v656);
                    uint64_t v717 = *v694;
                    float v716 = *(float *)(v668 + 4 * v670 * v717);
                    LODWORD(v715) = *v694;
                    if (v714 < v716) {
                      goto LABEL_953;
                    }
                  }
                  LODWORD(v717) = v715;
                }
                do
                {
                  do
                  {
LABEL_953:
                    v674 -= v651;
                    uint64_t v719 = *v674;
                    float v720 = *(float *)(v668 + 4 * v670 * v719);
                  }
                  while (v714 < v720);
                }
                while (v713 < v719 && v714 == v720);
                if (v694 >= v674) {
                  break;
                }
                *uint64_t v694 = v719;
                *uint64_t v674 = v717;
                v694 += v651;
              }
              if (v694 > (int *)v671) {
                break;
              }
            }
            int v665 = v694;
          }
          while (v669 != v671);
        }
LABEL_878:
        ++v653;
      }
      while (v653 != v743);
LABEL_863:
      if (__p)
      {
        int v761 = (char *)__p;
        operator delete(__p);
      }
      if (v763)
      {
        int v764 = (char *)v763;
        operator delete(v763);
      }
      return;
    default:
      return;
  }
LABEL_13:
  unint64_t v22 = (int *)v763;
  unint64_t v23 = (unint64_t)(v764 - (unsigned char *)v763) >> 2;
  uint64_t v24 = 0;
  uint64_t v25 = (v23 - 1);
  if ((int)v23 - 1 >= 0)
  {
    uint64_t v26 = __p;
    int v27 = v18;
    do
    {
      ldiv_t v28 = ldiv(v27, v22[v25]);
      int v27 = v28.quot;
      v24 += v26[v25--] * v28.rem;
    }
    while (v25 != -1);
  }
  uint64_t v29 = *(void *)(*(void *)v3 + 152);
  ldiv_t v30 = &(*a3)[19][v24];
  if (v751)
  {
    uint64_t v31 = 0;
    int v32 = 0;
    do
    {
      *(int *)((char *)v30 + v31) = v32++;
      v31 += v21;
    }
    while (v20 != v31);
  }
  uint64_t v33 = v29 + v24;
  uint64_t v766 = v33;
  unint64_t v767 = v16;
  if (v744 == v751) {
    goto LABEL_20;
  }
  int v34 = (unsigned int *)&v30[v751];
  unint64_t v35 = v16;
  uint64_t v36 = (unsigned int *)&v30[v744];
  while (1)
  {
    unint64_t v37 = (((char *)v34 - (char *)v30) >> 2) / v16;
    if (v37 < 2) {
      goto LABEL_20;
    }
    if (v37 == 3)
    {
      goto LABEL_20;
    }
    if (v37 == 2)
    {
      uint64_t v94 = v34[-v16];
      uint64_t v95 = *v30;
      unsigned int v96 = *(unsigned __int8 *)(v33 + v35 * v94);
      unsigned int v97 = *(unsigned __int8 *)(v33 + v35 * v95);
      if (v96 < v97 || v94 < v95 && v96 == v97)
      {
        *ldiv_t v30 = v94;
        v34[-v16] = v95;
      }
      goto LABEL_20;
    }
    if ((int)v37 <= 7)
    {
      int v98 = &v34[-v16];
      if (v98 != (unsigned int *)v30)
      {
        uint64_t v99 = v766;
        unint64_t v100 = v767;
        int v101 = (unsigned int *)&v30[(unint64_t)v21 / 4];
        do
        {
          uint64_t v102 = (unsigned int *)&v30[v16];
          if (v30 != (int *)v34 && v102 != v34)
          {
            unint64_t v103 = v101;
            unint64_t v104 = v30;
            do
            {
              uint64_t v105 = *v103;
              uint64_t v106 = *v104;
              unsigned int v107 = *(unsigned __int8 *)(v99 + v100 * v105);
              unsigned int v108 = *(unsigned __int8 *)(v99 + v100 * v106);
              if (v107 < v108 || (v105 < v106 ? (BOOL v109 = v107 == v108) : (BOOL v109 = 0), v109)) {
                unint64_t v104 = (int *)v103;
              }
              unint64_t v103 = (unsigned int *)((char *)v103 + v21);
            }
            while (v103 != v34);
            if (v104 != v30)
            {
              int v110 = *v30;
              *ldiv_t v30 = *v104;
              int *v104 = v110;
            }
          }
          int v101 = (unsigned int *)((char *)v101 + v21);
          v30 += v16;
        }
        while (v102 != v98);
      }
      goto LABEL_20;
    }
    int v38 = (unsigned int *)&v30[(v37 >> 1) * v16];
    int v39 = (int *)&v34[-v16];
    uint64_t v41 = *v30;
    uint64_t v42 = *v38;
    uint64_t v33 = v766;
    unint64_t v35 = v767;
    unsigned int v43 = *(unsigned __int8 *)(v766 + v767 * v41);
    unsigned int v44 = *(unsigned __int8 *)(v766 + v767 * v42);
    if (v43 < v44 || (v41 < v42 ? (BOOL v45 = v43 == v44) : (BOOL v45 = 0), v45))
    {
      int v47 = &v34[-v16];
LABEL_42:
      unint64_t v51 = (unsigned int *)&v30[v16];
      if (v51 < v47)
      {
        unint64_t v52 = v16;
        while (1)
        {
          uint64_t v53 = *v38;
          unsigned int v54 = *(unsigned __int8 *)(v33 + v35 * v53);
          while (1)
          {
            uint64_t v55 = *v51;
            unsigned int v56 = *(unsigned __int8 *)(v33 + v35 * v55);
            if (v56 >= v54 && (v55 >= v53 || v56 != v54)) {
              break;
            }
            unint64_t v51 = (unsigned int *)((char *)v51 + v21);
          }
          uint64_t v58 = &v47[-v16];
          do
          {
            int v47 = v58;
            uint64_t v59 = *v58;
            unsigned int v60 = *(unsigned __int8 *)(v33 + v35 * v59);
            if (v60 < v54) {
              break;
            }
            v58 -= v16;
          }
          while (v59 >= v53 || v60 != v54);
          if (v51 >= v47) {
            break;
          }
          *unint64_t v51 = v59;
          *int v47 = v55;
          ++v40;
          if (v51 == v38 && v52 == v16)
          {
            int v38 = v47;
            unint64_t v52 = v16;
          }
          unint64_t v51 = (unsigned int *)((char *)v51 + v21);
        }
      }
      if (v51 != v38)
      {
        uint64_t v62 = *v38;
        uint64_t v63 = *v51;
        unsigned int v64 = *(unsigned __int8 *)(v33 + v35 * v62);
        unsigned int v65 = *(unsigned __int8 *)(v33 + v35 * v63);
        if (v64 < v65 || v62 < v63 && v64 == v65)
        {
          *unint64_t v51 = v62;
          unsigned int *v38 = v63;
          ++v40;
        }
      }
      if (v51 == v36) {
        goto LABEL_20;
      }
      if (!v40)
      {
        unint64_t v67 = v51;
        if (v51 <= v36)
        {
          while (&v67[(unint64_t)v21 / 4] != v34)
          {
            uint64_t v74 = v67[v16];
            uint64_t v75 = *v67;
            unsigned int v76 = *(unsigned __int8 *)(v33 + v35 * v74);
            unsigned int v77 = *(unsigned __int8 *)(v33 + v35 * v75);
            if (v76 >= v77)
            {
              unint64_t v67 = (unsigned int *)((char *)v67 + v21);
              if (v74 >= v75 || v76 != v77) {
                continue;
              }
            }
            goto LABEL_69;
          }
        }
        else
        {
          int64_t v68 = v30;
          while (&v68[(unint64_t)v21 / 4] != (int *)v51)
          {
            uint64_t v69 = v68[v16];
            uint64_t v70 = *v68;
            unsigned int v71 = *(unsigned __int8 *)(v33 + v35 * v69);
            unsigned int v72 = *(unsigned __int8 *)(v33 + v35 * v70);
            if (v71 >= v72)
            {
              int64_t v68 = (int *)((char *)v68 + v21);
              if (v69 >= v70 || v71 != v72) {
                continue;
              }
            }
            goto LABEL_69;
          }
        }
LABEL_20:
        ++v18;
        uint64_t v3 = v758;
        if (v18 == v737) {
          goto LABEL_863;
        }
        goto LABEL_13;
      }
LABEL_69:
      if (v51 <= v36)
      {
        unint64_t v66 = (int *)&v51[v16];
      }
      else
      {
        int v34 = v51;
        unint64_t v66 = v30;
      }
    }
    else
    {
      unint64_t v46 = (int *)&v34[-2 * v16];
      while (v46 != v30)
      {
        int v47 = (unsigned int *)v46;
        uint64_t v48 = *v46;
        unsigned int v49 = *(unsigned __int8 *)(v766 + v767 * v48);
        if (v49 >= v44)
        {
          v46 -= v16;
          if (v48 >= v42 || v49 != v44) {
            continue;
          }
        }
        *ldiv_t v30 = v48;
        *int v47 = v41;
        ++v40;
        goto LABEL_42;
      }
      unint64_t v66 = &v30[v16];
      uint64_t v79 = *v39;
      unsigned int v80 = *(unsigned __int8 *)(v766 + v767 * v79);
      if (v43 >= v80 && (v41 >= v79 || v43 != v80))
      {
        if (v66 == v39) {
          goto LABEL_20;
        }
        unint64_t v82 = v30;
        while (1)
        {
          uint64_t v83 = v82[v16];
          unsigned int v84 = *(unsigned __int8 *)(v766 + v767 * v83);
          if (v43 < v84) {
            break;
          }
          if (v41 < v83 && v43 == v84) {
            break;
          }
          unint64_t v82 = (int *)((char *)v82 + v21);
          if (&v82[(unint64_t)v21 / 4] == v39) {
            goto LABEL_20;
          }
        }
        v82[v16] = v79;
        *int v39 = v83;
        unint64_t v66 = &v82[2 * v16];
      }
      if (v66 == v39) {
        goto LABEL_20;
      }
      while (1)
      {
        uint64_t v86 = *v30;
        unsigned int v87 = *(unsigned __int8 *)(v33 + v35 * v86);
        uint64_t v88 = *v66;
        unsigned int v89 = *(unsigned __int8 *)(v33 + v35 * v88);
        LODWORD(v90) = *v66;
        while (1)
        {
          if (v87 < v89) {
            goto LABEL_114;
          }
          if (v87 == v89 && v86 < v88) {
            break;
          }
          unint64_t v66 = (int *)((char *)v66 + v21);
          uint64_t v90 = *v66;
          unsigned int v89 = *(unsigned __int8 *)(v33 + v35 * v90);
          LODWORD(v88) = *v66;
        }
        LODWORD(v90) = v88;
        do
        {
          do
          {
LABEL_114:
            v39 -= v16;
            uint64_t v91 = *v39;
            unsigned int v92 = *(unsigned __int8 *)(v33 + v35 * v91);
          }
          while (v87 < v92);
        }
        while (v86 < v91 && v87 == v92);
        if (v66 >= v39) {
          break;
        }
        *unint64_t v66 = v91;
        *int v39 = v90;
        v66 += v16;
      }
      if (v66 > (int *)v36) {
        goto LABEL_20;
      }
    }
    ldiv_t v30 = v66;
    if (v34 == v36) {
      goto LABEL_20;
    }
  }
}

void sub_256D86C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Partition::eval(uint64_t a1, uint64_t a2, int ***a3, float a4)
{
  int v4 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Partition::eval();
  }
  uint64_t v5 = *(const void ***)v4;
  switch(*(_DWORD *)(*(void *)v4 + 56))
  {
    case 0:
      int v6 = *(_DWORD *)(a1 + 20);
      int v7 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v8, a4);
      int v9 = *(const void ***)v4;
      if (v7 < 0) {
        v7 += (unint64_t)((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2;
      }
      unint64_t v10 = (unint64_t)v9[6];
      int v11 = mlx::core::array::shape(v4, v7);
      int64_t v12 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v12, (uint64_t)v12[1], ((unsigned char *)v12[1] - (unsigned char *)*v12) >> 2);
      uint64_t v13 = (char *)v448 + 4 * v7;
      int64_t v14 = v449 - (v13 + 4);
      if (v449 != v13 + 4) {
        memmove((char *)v448 + 4 * v7, v13 + 4, v449 - (v13 + 4));
      }
      ldiv_t v449 = &v13[v14];
      int64_t v15 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v15[3], (uint64_t)v15[4], ((unsigned char *)v15[4] - (unsigned char *)v15[3]) >> 3);
      uint64_t v16 = v7;
      int v17 = (char *)__p + 8 * v7;
      int64_t v18 = v446 - (v17 + 8);
      if (v446 != v17 + 8) {
        memmove(v17, v17 + 8, v446 - (v17 + 8));
      }
      uint64_t v446 = &v17[v18];
      unint64_t v19 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v16);
      int v20 = mlx::core::array::shape(v4, v16);
      if (v10 < v11) {
        goto LABEL_539;
      }
      uint64_t v21 = 0;
      unint64_t v430 = v19 * v20;
      unint64_t v437 = v19 * ((v20 & (v6 >> 31)) + v6);
      if (v10 / v11 <= 1) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = v10 / v11;
      }
      unint64_t v429 = v22;
      while (1)
      {
        unint64_t v23 = (int *)v448;
        unint64_t v24 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v25 = 0;
        uint64_t v26 = (v24 - 1);
        if ((int)v24 - 1 >= 0)
        {
          int v27 = __p;
          int quot = v21;
          do
          {
            ldiv_t v29 = ldiv(quot, v23[v26]);
            int quot = v29.quot;
            v25 += v27[v26--] * v29.rem;
          }
          while (v26 != -1);
        }
        if (v437 == v430) {
          goto LABEL_21;
        }
        ldiv_t v30 = (unsigned __int8 *)(*a3)[19] + v25;
        uint64_t v31 = &v30[v437];
        int v32 = &v30[v430];
        do
        {
          unint64_t v33 = (v32 - v30) / v19;
          if (v33 < 2) {
            break;
          }
          if (v33 == 3)
          {
            break;
          }
          if (v33 == 2)
          {
            unsigned int v60 = v32[-v19];
            unsigned int v61 = *v30;
            if (v60 < v61)
            {
              *ldiv_t v30 = v60;
              v32[-v19] = v61;
            }
            break;
          }
          if ((int)v33 <= 7)
          {
            if (&v32[-v19] == v30) {
              break;
            }
LABEL_81:
            uint64_t v62 = v32;
            if (v30 == v32)
            {
LABEL_87:
              if (v62 != v30)
              {
                unsigned __int8 v65 = *v30;
                *ldiv_t v30 = *v62;
                *uint64_t v62 = v65;
              }
            }
            else
            {
              uint64_t v63 = &v30[v19];
              if (&v30[v19] != v32)
              {
                unsigned __int8 v64 = *v30;
                uint64_t v62 = v30;
                do
                {
                  if (*v63 < v64)
                  {
                    unsigned __int8 v64 = *v63;
                    uint64_t v62 = v63;
                  }
                  v63 += v19;
                }
                while (v63 != v32);
                goto LABEL_87;
              }
            }
            v30 += v19;
            if (v30 == &v32[-v19]) {
              break;
            }
            goto LABEL_81;
          }
          int v34 = &v30[(v33 >> 1) * v19];
          unint64_t v35 = &v32[-v19];
          unsigned int v37 = *v30;
          unsigned int v38 = *v34;
          if (v37 < v38) {
            goto LABEL_33;
          }
          int v39 = v32;
          while (&v39[-2 * v19] != v30)
          {
            unsigned int v40 = v39[-2 * v19];
            v39 -= v19;
            if (v40 < v38)
            {
              *ldiv_t v30 = v40;
              unint64_t v35 = &v39[-v19];
              v39[-v19] = v37;
              ++v36;
LABEL_33:
              uint64_t v41 = &v30[v19];
              if (&v30[v19] < v35)
              {
                unint64_t v42 = v19;
                while (1)
                {
                  unsigned int v43 = *v34;
                  while (1)
                  {
                    unsigned int v44 = *v41;
                    if (v44 >= v43) {
                      break;
                    }
                    v41 += v19;
                  }
                  do
                  {
                    v35 -= v19;
                    unsigned int v45 = *v35;
                  }
                  while (v45 >= v43);
                  if (v41 >= v35) {
                    break;
                  }
                  *uint64_t v41 = v45;
                  *unint64_t v35 = v44;
                  ++v36;
                  if (v34 == v41 && v42 == v19)
                  {
                    int v34 = v35;
                    unint64_t v42 = v19;
                  }
                  v41 += v19;
                }
              }
              if (v41 != v34)
              {
                unsigned int v46 = *v34;
                unsigned int v47 = *v41;
                if (v46 < v47)
                {
                  *uint64_t v41 = v46;
                  *int v34 = v47;
                  ++v36;
                }
              }
              if (v41 != v31)
              {
                if (v36)
                {
LABEL_48:
                  if (v41 <= v31)
                  {
                    uint64_t v48 = &v41[v19];
                  }
                  else
                  {
                    int v32 = v41;
                    uint64_t v48 = v30;
                  }
                  goto LABEL_75;
                }
                unsigned int v49 = v41;
                if (v41 <= v31)
                {
                  while (&v49[v19] != v32)
                  {
                    unsigned int v53 = v49[v19];
                    unsigned int v54 = *v49;
                    v49 += v19;
                    if (v53 < v54) {
                      goto LABEL_48;
                    }
                  }
                }
                else
                {
                  unint64_t v50 = v30;
                  while (&v50[v19] != v41)
                  {
                    unsigned int v51 = v50[v19];
                    unsigned int v52 = *v50;
                    v50 += v19;
                    if (v51 < v52) {
                      goto LABEL_48;
                    }
                  }
                }
              }
              goto LABEL_21;
            }
          }
          uint64_t v48 = &v30[v19];
          unsigned int v55 = *v35;
          if (v37 >= v55)
          {
            if (v48 == v35) {
              break;
            }
            unsigned int v56 = v30;
            while (1)
            {
              unsigned int v57 = v56[v19];
              if (v37 < v57) {
                break;
              }
              v56 += v19;
              if (&v56[v19] == v35) {
                goto LABEL_21;
              }
            }
            v56[v19] = v55;
            *unint64_t v35 = v57;
            uint64_t v48 = &v56[2 * v19];
          }
          if (v48 == v35) {
            break;
          }
          while (1)
          {
            unsigned int v58 = *v30;
            while (v58 >= *v48)
              v48 += v19;
            do
            {
              v35 -= v19;
              unsigned int v59 = *v35;
            }
            while (v58 < v59);
            if (v48 >= v35) {
              break;
            }
            *uint64_t v48 = v59;
            *unint64_t v35 = 1;
            v48 += v19;
          }
          if (v48 > v31) {
            break;
          }
LABEL_75:
          ldiv_t v30 = v48;
        }
        while (v32 != v31);
LABEL_21:
        if (++v21 == v429) {
          goto LABEL_539;
        }
      }
    case 1:
      int v66 = *(_DWORD *)(a1 + 20);
      int v67 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v68 = 1;
      }
      else {
        int v68 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v68, a4);
      uint64_t v69 = *(const void ***)v4;
      if (v67 < 0) {
        v67 += (unint64_t)((unsigned char *)v69[1] - (unsigned char *)*v69) >> 2;
      }
      unint64_t v70 = (unint64_t)v69[6];
      int v71 = mlx::core::array::shape(v4, v67);
      unsigned int v72 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v72, (uint64_t)v72[1], ((unsigned char *)v72[1] - (unsigned char *)*v72) >> 2);
      unint64_t v73 = (char *)v448 + 4 * v67;
      int64_t v74 = v449 - (v73 + 4);
      if (v449 != v73 + 4) {
        memmove((char *)v448 + 4 * v67, v73 + 4, v449 - (v73 + 4));
      }
      ldiv_t v449 = &v73[v74];
      uint64_t v75 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v75[3], (uint64_t)v75[4], ((unsigned char *)v75[4] - (unsigned char *)v75[3]) >> 3);
      uint64_t v76 = v67;
      unsigned int v77 = (char *)__p + 8 * v67;
      int64_t v78 = v446 - (v77 + 8);
      if (v446 != v77 + 8) {
        memmove(v77, v77 + 8, v446 - (v77 + 8));
      }
      uint64_t v446 = &v77[v78];
      unint64_t v79 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v76);
      int v80 = mlx::core::array::shape(v4, v76);
      if (v70 < v71) {
        goto LABEL_539;
      }
      uint64_t v81 = 0;
      unint64_t v82 = v70 / v71;
      unint64_t v83 = v79 * ((v80 & (v66 >> 31)) + v66);
      unint64_t v84 = v79 * v80;
      if (v82 <= 1) {
        unint64_t v82 = 1;
      }
      unint64_t v431 = v82;
      unint64_t v438 = v83;
      break;
    case 2:
      int v129 = *(_DWORD *)(a1 + 20);
      int v130 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v131 = 1;
      }
      else {
        int v131 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v131, a4);
      uint64_t v132 = *(const void ***)v4;
      if (v130 < 0) {
        v130 += (unint64_t)((unsigned char *)v132[1] - (unsigned char *)*v132) >> 2;
      }
      unint64_t v133 = (unint64_t)v132[6];
      int v134 = mlx::core::array::shape(v4, v130);
      ldiv_t v135 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v135, (uint64_t)v135[1], ((unsigned char *)v135[1] - (unsigned char *)*v135) >> 2);
      uint64_t v136 = (char *)v448 + 4 * v130;
      int64_t v137 = v449 - (v136 + 4);
      if (v449 != v136 + 4) {
        memmove((char *)v448 + 4 * v130, v136 + 4, v449 - (v136 + 4));
      }
      ldiv_t v449 = &v136[v137];
      uint64_t v138 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v138[3], (uint64_t)v138[4], ((unsigned char *)v138[4] - (unsigned char *)v138[3]) >> 3);
      uint64_t v139 = v130;
      uint64_t v140 = (char *)__p + 8 * v130;
      int64_t v141 = v446 - (v140 + 8);
      if (v446 != v140 + 8) {
        memmove(v140, v140 + 8, v446 - (v140 + 8));
      }
      uint64_t v446 = &v140[v141];
      unint64_t v142 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v139);
      int v143 = mlx::core::array::shape(v4, v139);
      if (v133 < v134) {
        goto LABEL_539;
      }
      uint64_t v144 = 0;
      unint64_t v145 = v133 / v134;
      unint64_t v432 = v142 * v143;
      unint64_t v439 = v142 * ((v143 & (v129 >> 31)) + v129);
      if (v145 <= 1) {
        unint64_t v145 = 1;
      }
      unint64_t v425 = v145;
      uint64_t v146 = 4 * v142;
      while (1)
      {
        int v147 = (int *)v448;
        unint64_t v148 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v149 = 0;
        uint64_t v150 = (v148 - 1);
        if ((int)v148 - 1 >= 0)
        {
          int v151 = __p;
          int v152 = v144;
          do
          {
            ldiv_t v153 = ldiv(v152, v147[v150]);
            int v152 = v153.quot;
            v149 += v151[v150--] * v153.rem;
          }
          while (v150 != -1);
        }
        if (v439 == v432) {
          goto LABEL_195;
        }
        unint64_t v154 = (unsigned int *)&(*a3)[19][v149];
        uint64_t v155 = &v154[v439];
        int v156 = &v154[v432];
        do
        {
          unint64_t v157 = (v156 - v154) / v142;
          if (v157 < 2) {
            break;
          }
          if (v157 == 3)
          {
            break;
          }
          if (v157 == 2)
          {
            unsigned int v180 = v156[-v142];
            unsigned int v181 = *v154;
            if (v180 < *v154)
            {
              *unint64_t v154 = v180;
              v156[-v142] = v181;
            }
            break;
          }
          if ((int)v157 <= 7)
          {
            uint64_t v182 = &v156[-v142];
            if (v182 == v154) {
              break;
            }
            int v183 = &v154[(unint64_t)v146 / 4];
LABEL_256:
            int v184 = v156;
            if (v154 == v156)
            {
LABEL_262:
              if (v184 != v154)
              {
                unsigned int v187 = *v154;
                *unint64_t v154 = *v184;
                *int v184 = v187;
              }
            }
            else if (&v154[v142] != v156)
            {
              unsigned int v185 = *v154;
              uint64_t v186 = v183;
              int v184 = v154;
              do
              {
                if (*v186 < v185)
                {
                  unsigned int v185 = *v186;
                  int v184 = v186;
                }
                uint64_t v186 = (unsigned int *)((char *)v186 + v146);
              }
              while (v186 != v156);
              goto LABEL_262;
            }
            v154 += v142;
            int v183 = (unsigned int *)((char *)v183 + v146);
            if (v154 == v182) {
              break;
            }
            goto LABEL_256;
          }
          unint64_t v158 = &v154[(v157 >> 1) * v142];
          unint64_t v159 = &v156[-v142];
          unsigned int v161 = *v154;
          if (*v154 < *v158) {
            goto LABEL_207;
          }
          uint64_t v162 = v156;
          while (&v162[-2 * v142] != v154)
          {
            unsigned int v163 = v162[-2 * v142];
            v162 -= v142;
            if (v163 < *v158)
            {
              *unint64_t v154 = v163;
              unint64_t v159 = &v162[-v142];
              unsigned int *v159 = v161;
              ++v160;
LABEL_207:
              int v164 = &v154[v142];
              if (v164 < v159)
              {
                unint64_t v165 = v142;
                while (1)
                {
                  unsigned int v166 = *v158;
                  while (1)
                  {
                    unsigned int v167 = *v164;
                    if (*v164 >= v166) {
                      break;
                    }
                    int v164 = (unsigned int *)((char *)v164 + v146);
                  }
                  do
                    v159 -= v142;
                  while (*v159 >= v166);
                  if (v164 >= v159) {
                    break;
                  }
                  *int v164 = *v159;
                  unsigned int *v159 = v167;
                  ++v160;
                  if (v158 == v164 && v165 == v142)
                  {
                    unint64_t v158 = v159;
                    unint64_t v165 = v142;
                  }
                  v164 += v142;
                }
              }
              if (v164 != v158)
              {
                unsigned int v168 = *v164;
                if (*v158 < *v164)
                {
                  *int v164 = *v158;
                  *unint64_t v158 = v168;
                  ++v160;
                }
              }
              if (v164 != v155)
              {
                if (v160)
                {
LABEL_222:
                  if (v164 <= v155)
                  {
                    uint64_t v169 = &v164[v142];
                  }
                  else
                  {
                    int v156 = v164;
                    uint64_t v169 = v154;
                  }
                  goto LABEL_249;
                }
                uint64_t v170 = v164;
                if (v164 <= v155)
                {
                  while (&v170[(unint64_t)v146 / 4] != v156)
                  {
                    unsigned int v174 = v170[v142];
                    unsigned int v175 = *v170;
                    uint64_t v170 = (unsigned int *)((char *)v170 + v146);
                    if (v174 < v175) {
                      goto LABEL_222;
                    }
                  }
                }
                else
                {
                  int v171 = v154;
                  while (&v171[(unint64_t)v146 / 4] != v164)
                  {
                    unsigned int v172 = v171[v142];
                    unsigned int v173 = *v171;
                    int v171 = (unsigned int *)((char *)v171 + v146);
                    if (v172 < v173) {
                      goto LABEL_222;
                    }
                  }
                }
              }
              goto LABEL_195;
            }
          }
          uint64_t v169 = &v154[v142];
          if (v161 >= *v159)
          {
            if (v169 == v159) {
              break;
            }
            uint64_t v176 = v154;
            while (1)
            {
              unsigned int v177 = v176[v142];
              if (v161 < v177) {
                break;
              }
              uint64_t v176 = (unsigned int *)((char *)v176 + v146);
              if (&v176[(unint64_t)v146 / 4] == v159) {
                goto LABEL_195;
              }
            }
            v176[v142] = *v159;
            unsigned int *v159 = v177;
            uint64_t v169 = &v176[2 * v142];
          }
          if (v169 == v159) {
            break;
          }
          while (1)
          {
            unsigned int v178 = *v154;
            while (1)
            {
              unsigned int v179 = *v169;
              if (v178 < *v169) {
                break;
              }
              uint64_t v169 = (unsigned int *)((char *)v169 + v146);
            }
            do
              v159 -= v142;
            while (v178 < *v159);
            if (v169 >= v159) {
              break;
            }
            unsigned int *v169 = *v159;
            unsigned int *v159 = v179;
            v169 += v142;
          }
          if (v169 > v155) {
            break;
          }
LABEL_249:
          unint64_t v154 = v169;
        }
        while (v156 != v155);
LABEL_195:
        if (++v144 == v425) {
          goto LABEL_539;
        }
      }
    case 3:
      int v188 = *(_DWORD *)(a1 + 20);
      int v189 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v190 = 1;
      }
      else {
        int v190 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v190, a4);
      int v191 = *(const void ***)v4;
      if (v189 < 0) {
        v189 += (unint64_t)((unsigned char *)v191[1] - (unsigned char *)*v191) >> 2;
      }
      unint64_t v192 = (unint64_t)v191[6];
      int v193 = mlx::core::array::shape(v4, v189);
      int v194 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v194, (uint64_t)v194[1], ((unsigned char *)v194[1] - (unsigned char *)*v194) >> 2);
      uint64_t v195 = (char *)v448 + 4 * v189;
      int64_t v196 = v449 - (v195 + 4);
      if (v449 != v195 + 4) {
        memmove((char *)v448 + 4 * v189, v195 + 4, v449 - (v195 + 4));
      }
      ldiv_t v449 = &v195[v196];
      uint64_t v197 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v197[3], (uint64_t)v197[4], ((unsigned char *)v197[4] - (unsigned char *)v197[3]) >> 3);
      uint64_t v198 = v189;
      int v199 = (char *)__p + 8 * v189;
      int64_t v200 = v446 - (v199 + 8);
      if (v446 != v199 + 8) {
        memmove(v199, v199 + 8, v446 - (v199 + 8));
      }
      uint64_t v446 = &v199[v200];
      unint64_t v201 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v198);
      int v202 = mlx::core::array::shape(v4, v198);
      if (v192 < v193) {
        goto LABEL_539;
      }
      uint64_t v203 = 0;
      unint64_t v204 = v192 / v193;
      unint64_t v205 = v201 * ((v202 & (v188 >> 31)) + v188);
      unint64_t v206 = v201 * v202;
      if (v204 <= 1) {
        unint64_t v204 = 1;
      }
      unint64_t v433 = v204;
      unint64_t v440 = v205;
      while (1)
      {
        unint64_t v207 = (int *)v448;
        unint64_t v208 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v209 = 0;
        uint64_t v210 = (v208 - 1);
        if ((int)v208 - 1 >= 0)
        {
          unsigned int v211 = __p;
          int v212 = v203;
          do
          {
            ldiv_t v213 = ldiv(v212, v207[v210]);
            int v212 = v213.quot;
            v209 += v211[v210--] * v213.rem;
          }
          while (v210 != -1);
        }
        if (v440 == v206) {
          goto LABEL_283;
        }
        int v214 = (char *)(*a3)[19] + v209;
        int v215 = &v214[v440];
        BOOL v216 = &v214[v206];
        do
        {
          unint64_t v217 = (v216 - v214) / v201;
          if (v217 < 2) {
            break;
          }
          if (v217 == 3)
          {
            break;
          }
          if (v217 == 2)
          {
            int v245 = v216[-v201];
            int v246 = *v214;
            if (v245 < v246)
            {
              *int v214 = v245;
              v216[-v201] = v246;
            }
            break;
          }
          if ((int)v217 <= 7)
          {
            if (&v216[-v201] == v214) {
              break;
            }
LABEL_343:
            uint64_t v247 = v216;
            if (v214 == v216)
            {
LABEL_349:
              if (v247 != v214)
              {
                char v250 = *v214;
                *int v214 = *v247;
                char *v247 = v250;
              }
            }
            else
            {
              unsigned int v248 = &v214[v201];
              if (&v214[v201] != v216)
              {
                char v249 = *v214;
                uint64_t v247 = v214;
                do
                {
                  if (*v248 < v249)
                  {
                    char v249 = *v248;
                    uint64_t v247 = v248;
                  }
                  v248 += v201;
                }
                while (v248 != v216);
                goto LABEL_349;
              }
            }
            v214 += v201;
            if (v214 == &v216[-v201]) {
              break;
            }
            goto LABEL_343;
          }
          int v218 = &v214[(v217 >> 1) * v201];
          uint64_t v219 = &v216[-v201];
          int v221 = *v214;
          int v222 = *v218;
          if (v221 < v222) {
            goto LABEL_295;
          }
          int v223 = v216;
          while (&v223[-2 * v201] != v214)
          {
            int v224 = v223[-2 * v201];
            v223 -= v201;
            if (v224 < v222)
            {
              *int v214 = v224;
              uint64_t v219 = &v223[-v201];
              v223[-v201] = v221;
              ++v220;
LABEL_295:
              uint64_t v225 = &v214[v201];
              if (&v214[v201] < v219)
              {
                unint64_t v226 = v201;
                while (1)
                {
                  int v227 = *v218;
                  while (1)
                  {
                    int v228 = *v225;
                    if (v228 >= v227) {
                      break;
                    }
                    v225 += v201;
                  }
                  do
                  {
                    v219 -= v201;
                    int v229 = *v219;
                  }
                  while (v229 >= v227);
                  if (v225 >= v219) {
                    break;
                  }
                  *uint64_t v225 = v229;
                  *uint64_t v219 = v228;
                  ++v220;
                  if (v218 == v225 && v226 == v201)
                  {
                    int v218 = v219;
                    unint64_t v226 = v201;
                  }
                  v225 += v201;
                }
              }
              if (v225 != v218)
              {
                int v230 = *v218;
                int v231 = *v225;
                if (v230 < v231)
                {
                  *uint64_t v225 = v230;
                  char *v218 = v231;
                  ++v220;
                }
              }
              if (v225 != v215)
              {
                if (v220)
                {
LABEL_310:
                  if (v225 <= v215)
                  {
                    uint64_t v232 = &v225[v201];
                  }
                  else
                  {
                    BOOL v216 = v225;
                    uint64_t v232 = v214;
                  }
                  goto LABEL_337;
                }
                unint64_t v233 = v225;
                if (v225 <= v215)
                {
                  while (&v233[v201] != v216)
                  {
                    int v237 = v233[v201];
                    int v238 = *v233;
                    v233 += v201;
                    if (v237 < v238) {
                      goto LABEL_310;
                    }
                  }
                }
                else
                {
                  unint64_t v234 = v214;
                  while (&v234[v201] != v225)
                  {
                    int v235 = v234[v201];
                    int v236 = *v234;
                    v234 += v201;
                    if (v235 < v236) {
                      goto LABEL_310;
                    }
                  }
                }
              }
              goto LABEL_283;
            }
          }
          uint64_t v232 = &v214[v201];
          int v239 = *v219;
          if (v221 >= v239)
          {
            if (v232 == v219) {
              break;
            }
            int v240 = v214;
            while (1)
            {
              int v241 = v240[v201];
              if (v221 < v241) {
                break;
              }
              v240 += v201;
              if (&v240[v201] == v219) {
                goto LABEL_283;
              }
            }
            v240[v201] = v239;
            *uint64_t v219 = v241;
            uint64_t v232 = &v240[2 * v201];
          }
          if (v232 == v219) {
            break;
          }
          while (1)
          {
            int v242 = *v214;
            while (1)
            {
              int v243 = *v232;
              if (v242 < v243) {
                break;
              }
              v232 += v201;
            }
            do
            {
              v219 -= v201;
              int v244 = *v219;
            }
            while (v242 < v244);
            if (v232 >= v219) {
              break;
            }
            *uint64_t v232 = v244;
            *uint64_t v219 = v243;
            v232 += v201;
          }
          if (v232 > v215) {
            break;
          }
LABEL_337:
          int v214 = v232;
        }
        while (v216 != v215);
LABEL_283:
        if (++v203 == v433) {
          goto LABEL_539;
        }
      }
    case 4:
      int v251 = *(_DWORD *)(a1 + 20);
      int v252 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v253 = 1;
      }
      else {
        int v253 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v253, a4);
      int v254 = *(const void ***)v4;
      if (v252 < 0) {
        v252 += (unint64_t)((unsigned char *)v254[1] - (unsigned char *)*v254) >> 2;
      }
      unint64_t v255 = (unint64_t)v254[6];
      int v256 = mlx::core::array::shape(v4, v252);
      unsigned int v257 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v257, (uint64_t)v257[1], ((unsigned char *)v257[1] - (unsigned char *)*v257) >> 2);
      unsigned int v258 = (char *)v448 + 4 * v252;
      int64_t v259 = v449 - (v258 + 4);
      if (v449 != v258 + 4) {
        memmove((char *)v448 + 4 * v252, v258 + 4, v449 - (v258 + 4));
      }
      ldiv_t v449 = &v258[v259];
      uint64_t v260 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v260[3], (uint64_t)v260[4], ((unsigned char *)v260[4] - (unsigned char *)v260[3]) >> 3);
      uint64_t v261 = v252;
      uint64_t v262 = (char *)__p + 8 * v252;
      int64_t v263 = v446 - (v262 + 8);
      if (v446 != v262 + 8) {
        memmove(v262, v262 + 8, v446 - (v262 + 8));
      }
      uint64_t v446 = &v262[v263];
      unint64_t v264 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v261);
      int v265 = mlx::core::array::shape(v4, v261);
      if (v255 < v256) {
        goto LABEL_539;
      }
      uint64_t v266 = 0;
      unint64_t v267 = v255 / v256;
      unint64_t v434 = v264 * v265;
      unint64_t v441 = v264 * ((v265 & (v251 >> 31)) + v251);
      if (v267 <= 1) {
        unint64_t v267 = 1;
      }
      unint64_t v426 = v267;
      uint64_t v268 = 4 * v264;
      while (1)
      {
        uint64_t v269 = (int *)v448;
        unint64_t v270 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v271 = 0;
        uint64_t v272 = (v270 - 1);
        if ((int)v270 - 1 >= 0)
        {
          uint64_t v273 = __p;
          int v274 = v266;
          do
          {
            ldiv_t v275 = ldiv(v274, v269[v272]);
            int v274 = v275.quot;
            v271 += v273[v272--] * v275.rem;
          }
          while (v272 != -1);
        }
        if (v441 == v434) {
          goto LABEL_370;
        }
        uint64_t v276 = &(*a3)[19][v271];
        uint64_t v277 = &v276[v441];
        unsigned int v278 = &v276[v434];
        do
        {
          unint64_t v279 = (v278 - v276) / v264;
          if (v279 < 2) {
            break;
          }
          if (v279 == 3)
          {
            break;
          }
          if (v279 == 2)
          {
            int v302 = v278[-v264];
            int v303 = *v276;
            if (v302 < *v276)
            {
              *uint64_t v276 = v302;
              v278[-v264] = v303;
            }
            break;
          }
          if ((int)v279 <= 7)
          {
            uint64_t v304 = &v278[-v264];
            if (v304 == v276) {
              break;
            }
            uint64_t v305 = &v276[(unint64_t)v268 / 4];
LABEL_431:
            unsigned int v306 = v278;
            if (v276 == v278)
            {
LABEL_437:
              if (v306 != v276)
              {
                int v309 = *v276;
                *uint64_t v276 = *v306;
                *unsigned int v306 = v309;
              }
            }
            else if (&v276[v264] != v278)
            {
              int v307 = *v276;
              uint64_t v308 = v305;
              unsigned int v306 = v276;
              do
              {
                if (*v308 < v307)
                {
                  int v307 = *v308;
                  unsigned int v306 = v308;
                }
                uint64_t v308 = (int *)((char *)v308 + v268);
              }
              while (v308 != v278);
              goto LABEL_437;
            }
            v276 += v264;
            uint64_t v305 = (int *)((char *)v305 + v268);
            if (v276 == v304) {
              break;
            }
            goto LABEL_431;
          }
          unsigned int v280 = &v276[(v279 >> 1) * v264];
          int v281 = &v278[-v264];
          int v283 = *v276;
          if (*v276 < *v280) {
            goto LABEL_382;
          }
          uint64_t v284 = v278;
          while (&v284[-2 * v264] != v276)
          {
            int v285 = v284[-2 * v264];
            v284 -= v264;
            if (v285 < *v280)
            {
              *uint64_t v276 = v285;
              int v281 = &v284[-v264];
              *int v281 = v283;
              ++v282;
LABEL_382:
              unsigned int v286 = &v276[v264];
              if (v286 < v281)
              {
                unint64_t v287 = v264;
                while (1)
                {
                  int v288 = *v280;
                  while (1)
                  {
                    int v289 = *v286;
                    if (*v286 >= v288) {
                      break;
                    }
                    unsigned int v286 = (int *)((char *)v286 + v268);
                  }
                  do
                    v281 -= v264;
                  while (*v281 >= v288);
                  if (v286 >= v281) {
                    break;
                  }
                  int *v286 = *v281;
                  *int v281 = v289;
                  ++v282;
                  if (v280 == v286 && v287 == v264)
                  {
                    unsigned int v280 = v281;
                    unint64_t v287 = v264;
                  }
                  v286 += v264;
                }
              }
              if (v286 != v280)
              {
                int v290 = *v286;
                if (*v280 < *v286)
                {
                  int *v286 = *v280;
                  *unsigned int v280 = v290;
                  ++v282;
                }
              }
              if (v286 != v277)
              {
                if (v282)
                {
LABEL_397:
                  if (v286 <= v277)
                  {
                    unsigned int v291 = &v286[v264];
                  }
                  else
                  {
                    unsigned int v278 = v286;
                    unsigned int v291 = v276;
                  }
                  goto LABEL_424;
                }
                unsigned int v292 = v286;
                if (v286 <= v277)
                {
                  while (&v292[(unint64_t)v268 / 4] != v278)
                  {
                    int v296 = v292[v264];
                    int v297 = *v292;
                    unsigned int v292 = (int *)((char *)v292 + v268);
                    if (v296 < v297) {
                      goto LABEL_397;
                    }
                  }
                }
                else
                {
                  uint64_t v293 = v276;
                  while (&v293[(unint64_t)v268 / 4] != v286)
                  {
                    int v294 = v293[v264];
                    int v295 = *v293;
                    uint64_t v293 = (int *)((char *)v293 + v268);
                    if (v294 < v295) {
                      goto LABEL_397;
                    }
                  }
                }
              }
              goto LABEL_370;
            }
          }
          unsigned int v291 = &v276[v264];
          if (v283 >= *v281)
          {
            if (v291 == v281) {
              break;
            }
            unsigned int v298 = v276;
            while (1)
            {
              int v299 = v298[v264];
              if (v283 < v299) {
                break;
              }
              unsigned int v298 = (int *)((char *)v298 + v268);
              if (&v298[(unint64_t)v268 / 4] == v281) {
                goto LABEL_370;
              }
            }
            v298[v264] = *v281;
            *int v281 = v299;
            unsigned int v291 = &v298[2 * v264];
          }
          if (v291 == v281) {
            break;
          }
          while (1)
          {
            int v300 = *v276;
            while (1)
            {
              int v301 = *v291;
              if (v300 < *v291) {
                break;
              }
              unsigned int v291 = (int *)((char *)v291 + v268);
            }
            do
              v281 -= v264;
            while (v300 < *v281);
            if (v291 >= v281) {
              break;
            }
            *unsigned int v291 = *v281;
            *int v281 = v301;
            v291 += v264;
          }
          if (v291 > v277) {
            break;
          }
LABEL_424:
          uint64_t v276 = v291;
        }
        while (v278 != v277);
LABEL_370:
        if (++v266 == v426) {
          goto LABEL_539;
        }
      }
    case 5:
      int v310 = *(_DWORD *)(a1 + 20);
      int v311 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v312 = 1;
      }
      else {
        int v312 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v312, a4);
      uint64_t v313 = *(const void ***)v4;
      if (v311 < 0) {
        v311 += (unint64_t)((unsigned char *)v313[1] - (unsigned char *)*v313) >> 2;
      }
      unint64_t v314 = (unint64_t)v313[6];
      int v315 = mlx::core::array::shape(v4, v311);
      v316 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v316, (uint64_t)v316[1], ((unsigned char *)v316[1] - (unsigned char *)*v316) >> 2);
      uint64_t v317 = (char *)v448 + 4 * v311;
      int64_t v318 = v449 - (v317 + 4);
      if (v449 != v317 + 4) {
        memmove((char *)v448 + 4 * v311, v317 + 4, v449 - (v317 + 4));
      }
      ldiv_t v449 = &v317[v318];
      uint64_t v319 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v319[3], (uint64_t)v319[4], ((unsigned char *)v319[4] - (unsigned char *)v319[3]) >> 3);
      uint64_t v320 = v311;
      unsigned int v321 = (char *)__p + 8 * v311;
      int64_t v322 = v446 - (v321 + 8);
      if (v446 != v321 + 8) {
        memmove(v321, v321 + 8, v446 - (v321 + 8));
      }
      uint64_t v446 = &v321[v322];
      unint64_t v323 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v320);
      int v324 = mlx::core::array::shape(v4, v320);
      if (v314 < v315) {
        goto LABEL_539;
      }
      uint64_t v325 = 0;
      unint64_t v326 = v314 / v315;
      unint64_t v435 = v323 * v324;
      unint64_t v442 = v323 * ((v324 & (v310 >> 31)) + v310);
      if (v326 <= 1) {
        unint64_t v326 = 1;
      }
      unint64_t v427 = v326;
      uint64_t v327 = 8 * v323;
      while (1)
      {
        uint64_t v328 = (int *)v448;
        unint64_t v329 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v330 = 0;
        uint64_t v331 = (v329 - 1);
        if ((int)v329 - 1 >= 0)
        {
          uint64_t v332 = __p;
          int v333 = v325;
          do
          {
            ldiv_t v334 = ldiv(v333, v328[v331]);
            int v333 = v334.quot;
            v330 += v332[v331--] * v334.rem;
          }
          while (v331 != -1);
        }
        if (v442 == v435) {
          goto LABEL_458;
        }
        unint64_t v335 = (uint64_t *)&(*a3)[19][2 * v330];
        int64_t v336 = &v335[v442];
        unint64_t v337 = &v335[v435];
        do
        {
          unint64_t v338 = (v337 - v335) / v323;
          if (v338 < 2) {
            break;
          }
          if (v338 == 3)
          {
            break;
          }
          if (v338 == 2)
          {
            uint64_t v361 = v337[-v323];
            uint64_t v362 = *v335;
            if (v361 < *v335)
            {
              *unint64_t v335 = v361;
              v337[-v323] = v362;
            }
            break;
          }
          if ((int)v338 <= 7)
          {
            uint64_t v363 = &v337[-v323];
            if (v363 == v335) {
              break;
            }
            int v364 = &v335[(unint64_t)v327 / 8];
LABEL_519:
            int v365 = v337;
            if (v335 == v337)
            {
LABEL_525:
              if (v365 != v335)
              {
                uint64_t v368 = *v335;
                *unint64_t v335 = *v365;
                *int v365 = v368;
              }
            }
            else if (&v335[v323] != v337)
            {
              uint64_t v366 = *v335;
              unint64_t v367 = v364;
              int v365 = v335;
              do
              {
                if (*v367 < v366)
                {
                  uint64_t v366 = *v367;
                  int v365 = v367;
                }
                unint64_t v367 = (uint64_t *)((char *)v367 + v327);
              }
              while (v367 != v337);
              goto LABEL_525;
            }
            v335 += v323;
            int v364 = (uint64_t *)((char *)v364 + v327);
            if (v335 == v363) {
              break;
            }
            goto LABEL_519;
          }
          uint64_t v339 = &v335[(v338 >> 1) * v323];
          unint64_t v340 = &v337[-v323];
          uint64_t v342 = *v335;
          if (*v335 < *v339) {
            goto LABEL_470;
          }
          int v343 = v337;
          while (&v343[-2 * v323] != v335)
          {
            uint64_t v344 = v343[-2 * v323];
            v343 -= v323;
            if (v344 < *v339)
            {
              *unint64_t v335 = v344;
              unint64_t v340 = &v343[-v323];
              *unint64_t v340 = v342;
              ++v341;
LABEL_470:
              uint64_t v345 = &v335[v323];
              if (v345 < v340)
              {
                unint64_t v346 = v323;
                while (1)
                {
                  uint64_t v347 = *v339;
                  while (1)
                  {
                    uint64_t v348 = *v345;
                    if (*v345 >= v347) {
                      break;
                    }
                    uint64_t v345 = (uint64_t *)((char *)v345 + v327);
                  }
                  do
                    v340 -= v323;
                  while (*v340 >= v347);
                  if (v345 >= v340) {
                    break;
                  }
                  *uint64_t v345 = *v340;
                  *unint64_t v340 = v348;
                  ++v341;
                  if (v339 == v345 && v346 == v323)
                  {
                    uint64_t v339 = v340;
                    unint64_t v346 = v323;
                  }
                  v345 += v323;
                }
              }
              if (v345 != v339)
              {
                uint64_t v349 = *v345;
                if (*v339 < *v345)
                {
                  *uint64_t v345 = *v339;
                  *uint64_t v339 = v349;
                  ++v341;
                }
              }
              if (v345 != v336)
              {
                if (v341)
                {
LABEL_485:
                  if (v345 <= v336)
                  {
                    uint64_t v350 = &v345[v323];
                  }
                  else
                  {
                    unint64_t v337 = v345;
                    uint64_t v350 = v335;
                  }
                  goto LABEL_512;
                }
                uint64_t v351 = v345;
                if (v345 <= v336)
                {
                  while (1)
                  {
                    uint64_t v355 = &v351[(unint64_t)v327 / 8];
                    if (&v351[(unint64_t)v327 / 8] == v337) {
                      break;
                    }
                    uint64_t v356 = *v351;
                    uint64_t v351 = (uint64_t *)((char *)v351 + v327);
                    if (*v355 < v356) {
                      goto LABEL_485;
                    }
                  }
                }
                else
                {
                  uint64_t v352 = v335;
                  while (1)
                  {
                    int v353 = &v352[(unint64_t)v327 / 8];
                    if (&v352[(unint64_t)v327 / 8] == v345) {
                      break;
                    }
                    uint64_t v354 = *v352;
                    uint64_t v352 = (uint64_t *)((char *)v352 + v327);
                    if (*v353 < v354) {
                      goto LABEL_485;
                    }
                  }
                }
              }
              goto LABEL_458;
            }
          }
          uint64_t v350 = &v335[v323];
          if (v342 >= *v340)
          {
            if (v350 == v340) {
              break;
            }
            int v357 = v335;
            while (1)
            {
              uint64_t v358 = v357[v323];
              if (v342 < v358) {
                break;
              }
              int v357 = (uint64_t *)((char *)v357 + v327);
              if (&v357[(unint64_t)v327 / 8] == v340) {
                goto LABEL_458;
              }
            }
            v357[v323] = *v340;
            *unint64_t v340 = v358;
            uint64_t v350 = &v357[2 * v323];
          }
          if (v350 == v340) {
            break;
          }
          while (1)
          {
            uint64_t v359 = *v335;
            while (1)
            {
              uint64_t v360 = *v350;
              if (v359 < *v350) {
                break;
              }
              uint64_t v350 = (uint64_t *)((char *)v350 + v327);
            }
            do
              v340 -= v323;
            while (v359 < *v340);
            if (v350 >= v340) {
              break;
            }
            *uint64_t v350 = *v340;
            *unint64_t v340 = v360;
            v350 += v323;
          }
          if (v350 > v336) {
            break;
          }
LABEL_512:
          unint64_t v335 = v350;
        }
        while (v337 != v336);
LABEL_458:
        if (++v325 == v427) {
          goto LABEL_539;
        }
      }
    case 6:
      int v370 = *(_DWORD *)(a1 + 20);
      int v369 = *(_DWORD *)(a1 + 24);
      if ((_BYTE)v5[21]) {
        int v371 = 1;
      }
      else {
        int v371 = 2;
      }
      mlx::core::copy(*(mlx::core::array **)a2, a3, v371, a4);
      unint64_t v372 = *(const void ***)v4;
      if (v369 < 0) {
        v369 += (unint64_t)((unsigned char *)v372[1] - (unsigned char *)*v372) >> 2;
      }
      unint64_t v373 = (unint64_t)v372[6];
      int v374 = mlx::core::array::shape(v4, v369);
      uint64_t v375 = *(const void ***)v4;
      ldiv_t v448 = 0;
      ldiv_t v449 = 0;
      uint64_t v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v375, (uint64_t)v375[1], ((unsigned char *)v375[1] - (unsigned char *)*v375) >> 2);
      uint64_t v376 = (char *)v448 + 4 * v369;
      int64_t v377 = v449 - (v376 + 4);
      if (v449 != v376 + 4) {
        memmove((char *)v448 + 4 * v369, v376 + 4, v449 - (v376 + 4));
      }
      ldiv_t v449 = &v376[v377];
      uint64_t v378 = *(const void ***)v4;
      __n128 __p = 0;
      uint64_t v446 = 0;
      uint64_t v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v378[3], (uint64_t)v378[4], ((unsigned char *)v378[4] - (unsigned char *)v378[3]) >> 3);
      uint64_t v379 = v369;
      uint64_t v380 = (char *)__p + 8 * v369;
      int64_t v381 = v446 - (v380 + 8);
      if (v446 != v380 + 8) {
        memmove(v380, v380 + 8, v446 - (v380 + 8));
      }
      uint64_t v446 = &v380[v381];
      unint64_t v382 = *(void *)(*(void *)(*(void *)v4 + 24) + 8 * v379);
      int v383 = mlx::core::array::shape(v4, v379);
      if (v373 < v374) {
        goto LABEL_539;
      }
      uint64_t v384 = 0;
      unint64_t v385 = v373 / v374;
      unint64_t v436 = v382 * v383;
      unint64_t v443 = v382 * ((v383 & (v370 >> 31)) + v370);
      if (v385 <= 1) {
        unint64_t v385 = 1;
      }
      unint64_t v428 = v385;
      uint64_t v386 = 4 * v382;
      while (1)
      {
        uint64_t v387 = (int *)v448;
        unint64_t v388 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
        uint64_t v389 = 0;
        uint64_t v390 = (v388 - 1);
        if ((int)v388 - 1 >= 0)
        {
          uint64_t v391 = __p;
          int v392 = v384;
          do
          {
            ldiv_t v393 = ldiv(v392, v387[v390]);
            int v392 = v393.quot;
            v389 += v391[v390--] * v393.rem;
          }
          while (v390 != -1);
        }
        if (v443 == v436) {
          goto LABEL_551;
        }
        int v394 = (float *)&(*a3)[19][v389];
        int v395 = &v394[v443];
        unsigned int v396 = &v394[v436];
        do
        {
          unint64_t v397 = (v396 - v394) / v382;
          if (v397 < 2) {
            break;
          }
          if (v397 == 3)
          {
            break;
          }
          if (v397 == 2)
          {
            float v417 = v396[-v382];
            float v418 = *v394;
            if (v417 < *v394)
            {
              *int v394 = v417;
              v396[-v382] = v418;
            }
            break;
          }
          if ((int)v397 <= 7)
          {
            uint64_t v419 = &v396[-v382];
            if (v419 == v394) {
              break;
            }
            uint64_t v420 = &v394[(unint64_t)v386 / 4];
LABEL_614:
            int v421 = v396;
            if (v394 == v396)
            {
LABEL_620:
              if (v421 != v394)
              {
                float v424 = *v394;
                *int v394 = *v421;
                *int v421 = v424;
              }
            }
            else if (&v394[v382] != v396)
            {
              float v422 = *v394;
              BOOL v423 = v420;
              int v421 = v394;
              do
              {
                if (*v423 < v422)
                {
                  float v422 = *v423;
                  int v421 = v423;
                }
                BOOL v423 = (float *)((char *)v423 + v386);
              }
              while (v423 != v396);
              goto LABEL_620;
            }
            v394 += v382;
            uint64_t v420 = (float *)((char *)v420 + v386);
            if (v394 == v419) {
              break;
            }
            goto LABEL_614;
          }
          char v398 = &v394[(v397 >> 1) * v382];
          uint64_t v399 = &v396[-v382];
          float v401 = *v394;
          if (*v394 < *v398) {
            goto LABEL_563;
          }
          uint64_t v402 = v396;
          while (1)
          {
            int v403 = &v402[-2 * v382];
            if (v403 == v394) {
              break;
            }
            v402 -= v382;
            if (*v403 < *v398)
            {
              *int v394 = *v403;
              uint64_t v399 = &v402[-v382];
              *uint64_t v399 = v401;
              ++v400;
LABEL_563:
              uint64_t v404 = &v394[v382];
              if (v404 < v399)
              {
                unint64_t v405 = v382;
                while (1)
                {
                  float v406 = *v398;
                  while (1)
                  {
                    float v407 = *v404;
                    if (*v404 >= v406) {
                      break;
                    }
                    uint64_t v404 = (float *)((char *)v404 + v386);
                  }
                  do
                    v399 -= v382;
                  while (*v399 >= v406);
                  if (v404 >= v399) {
                    break;
                  }
                  *uint64_t v404 = *v399;
                  *uint64_t v399 = v407;
                  ++v400;
                  if (v398 == v404 && v405 == v382)
                  {
                    char v398 = v399;
                    unint64_t v405 = v382;
                  }
                  v404 += v382;
                }
              }
              if (v404 != v398)
              {
                float v408 = *v404;
                if (*v398 < *v404)
                {
                  *uint64_t v404 = *v398;
                  *char v398 = v408;
                  ++v400;
                }
              }
              if (v404 != v395)
              {
                if (v400)
                {
LABEL_578:
                  if (v404 <= v395)
                  {
                    uint64_t v409 = &v404[v382];
                  }
                  else
                  {
                    unsigned int v396 = v404;
                    uint64_t v409 = v394;
                  }
                  goto LABEL_607;
                }
                int v410 = v404;
                if (v404 <= v395)
                {
                  while (&v410[(unint64_t)v386 / 4] != v396)
                  {
                    BOOL v412 = v410[v382] < *v410;
                    int v410 = (float *)((char *)v410 + v386);
                    if (v412) {
                      goto LABEL_578;
                    }
                  }
                }
                else
                {
                  int v411 = v394;
                  while (&v411[(unint64_t)v386 / 4] != v404)
                  {
                    BOOL v412 = v411[v382] < *v411;
                    int v411 = (float *)((char *)v411 + v386);
                    if (v412) {
                      goto LABEL_578;
                    }
                  }
                }
              }
              goto LABEL_551;
            }
          }
          uint64_t v409 = &v394[v382];
          if (v401 >= *v399)
          {
            if (v409 == v399) {
              break;
            }
            uint64_t v413 = v394;
            while (1)
            {
              float v414 = v413[v382];
              if (v401 < v414) {
                break;
              }
              uint64_t v413 = (float *)((char *)v413 + v386);
              if (&v413[(unint64_t)v386 / 4] == v399) {
                goto LABEL_551;
              }
            }
            v413[v382] = *v399;
            *uint64_t v399 = v414;
            uint64_t v409 = &v413[2 * v382];
          }
          if (v409 == v399) {
            break;
          }
          while (1)
          {
            float v415 = *v394;
            while (1)
            {
              float v416 = *v409;
              if (v415 < *v409) {
                break;
              }
              uint64_t v409 = (float *)((char *)v409 + v386);
            }
            do
              v399 -= v382;
            while (v415 < *v399);
            if (v409 >= v399) {
              break;
            }
            *uint64_t v409 = *v399;
            *uint64_t v399 = v416;
            v409 += v382;
          }
          if (v409 > v395) {
            break;
          }
LABEL_607:
          int v394 = v409;
        }
        while (v396 != v395);
LABEL_551:
        if (++v384 == v428) {
          goto LABEL_539;
        }
      }
    default:
      return;
  }
  do
  {
    ldiv_t v85 = (int *)v448;
    unint64_t v86 = (unint64_t)(v449 - (unsigned char *)v448) >> 2;
    uint64_t v87 = 0;
    uint64_t v88 = (v86 - 1);
    if ((int)v86 - 1 >= 0)
    {
      unsigned int v89 = __p;
      int v90 = v81;
      do
      {
        ldiv_t v91 = ldiv(v90, v85[v88]);
        int v90 = v91.quot;
        v87 += v89[v88--] * v91.rem;
      }
      while (v88 != -1);
    }
    if (v438 == v84) {
      goto LABEL_108;
    }
    unsigned int v92 = (unsigned __int8 *)(*a3)[19] + v87;
    uint64_t v93 = &v92[v438];
    uint64_t v94 = &v92[v84];
    while (1)
    {
      unint64_t v95 = (v94 - v92) / v79;
      if (v95 < 2) {
        goto LABEL_108;
      }
      if (v95 == 3)
      {
        goto LABEL_108;
      }
      if (v95 == 2)
      {
        unsigned int v123 = v94[-v79];
        unsigned int v124 = *v92;
        if (v123 < v124)
        {
          *unsigned int v92 = v123;
          v94[-v79] = v124;
        }
        goto LABEL_108;
      }
      if ((int)v95 <= 7)
      {
        if (&v94[-v79] == v92) {
          goto LABEL_108;
        }
        while (1)
        {
          uint64_t v125 = v94;
          if (v92 == v94) {
            goto LABEL_174;
          }
          unint64_t v126 = &v92[v79];
          if (&v92[v79] != v94) {
            break;
          }
LABEL_176:
          v92 += v79;
          if (v92 == &v94[-v79]) {
            goto LABEL_108;
          }
        }
        unsigned __int8 v127 = *v92;
        uint64_t v125 = v92;
        do
        {
          if (*v126 < v127)
          {
            unsigned __int8 v127 = *v126;
            uint64_t v125 = v126;
          }
          v126 += v79;
        }
        while (v126 != v94);
LABEL_174:
        if (v125 != v92)
        {
          unsigned __int8 v128 = *v92;
          *unsigned int v92 = *v125;
          unsigned __int8 *v125 = v128;
        }
        goto LABEL_176;
      }
      unsigned int v96 = &v92[(v95 >> 1) * v79];
      unsigned int v97 = &v94[-v79];
      unsigned int v99 = *v92;
      unsigned int v100 = *v96;
      if (v99 < v100) {
        break;
      }
      int v101 = v94;
      while (&v101[-2 * v79] != v92)
      {
        unsigned int v102 = v101[-2 * v79];
        v101 -= v79;
        if (v102 < v100)
        {
          *unsigned int v92 = v102;
          unsigned int v97 = &v101[-v79];
          v101[-v79] = v99;
          ++v98;
          goto LABEL_120;
        }
      }
      int v110 = &v92[v79];
      unsigned int v117 = *v97;
      if (v99 >= v117)
      {
        if (v110 == v97) {
          goto LABEL_108;
        }
        unint64_t v118 = v92;
        while (1)
        {
          unsigned int v119 = v118[v79];
          if (v99 < v119) {
            break;
          }
          v118 += v79;
          if (&v118[v79] == v97) {
            goto LABEL_108;
          }
        }
        v118[v79] = v117;
        *unsigned int v97 = v119;
        int v110 = &v118[2 * v79];
      }
      if (v110 == v97) {
        goto LABEL_108;
      }
      while (1)
      {
        unsigned int v120 = *v92;
        while (1)
        {
          unsigned int v121 = *v110;
          if (v120 < v121) {
            break;
          }
          v110 += v79;
        }
        do
        {
          v97 -= v79;
          unsigned int v122 = *v97;
        }
        while (v120 < v122);
        if (v110 >= v97) {
          break;
        }
        *int v110 = v122;
        *unsigned int v97 = v121;
        v110 += v79;
      }
      if (v110 > v93) {
        goto LABEL_108;
      }
LABEL_162:
      unsigned int v92 = v110;
      if (v94 == v93) {
        goto LABEL_108;
      }
    }
LABEL_120:
    unint64_t v103 = &v92[v79];
    if (&v92[v79] < v97)
    {
      unint64_t v104 = v79;
      while (1)
      {
        unsigned int v105 = *v96;
        while (1)
        {
          unsigned int v106 = *v103;
          if (v106 >= v105) {
            break;
          }
          v103 += v79;
        }
        do
        {
          v97 -= v79;
          unsigned int v107 = *v97;
        }
        while (v107 >= v105);
        if (v103 >= v97) {
          break;
        }
        *unint64_t v103 = v107;
        *unsigned int v97 = v106;
        ++v98;
        if (v96 == v103 && v104 == v79)
        {
          unsigned int v96 = v97;
          unint64_t v104 = v79;
        }
        v103 += v79;
      }
    }
    if (v103 != v96)
    {
      unsigned int v108 = *v96;
      unsigned int v109 = *v103;
      if (v108 < v109)
      {
        *unint64_t v103 = v108;
        *unsigned int v96 = v109;
        ++v98;
      }
    }
    if (v103 == v93) {
      goto LABEL_108;
    }
    if (v98)
    {
LABEL_135:
      if (v103 <= v93)
      {
        int v110 = &v103[v79];
      }
      else
      {
        uint64_t v94 = v103;
        int v110 = v92;
      }
      goto LABEL_162;
    }
    int v111 = v103;
    if (v103 <= v93)
    {
      while (&v111[v79] != v94)
      {
        unsigned int v115 = v111[v79];
        unsigned int v116 = *v111;
        v111 += v79;
        if (v115 < v116) {
          goto LABEL_135;
        }
      }
    }
    else
    {
      uint64_t v112 = v92;
      while (&v112[v79] != v103)
      {
        unsigned int v113 = v112[v79];
        unsigned int v114 = *v112;
        v112 += v79;
        if (v113 < v114) {
          goto LABEL_135;
        }
      }
    }
LABEL_108:
    ++v81;
  }
  while (v81 != v431);
LABEL_539:
  if (__p)
  {
    uint64_t v446 = (char *)__p;
    operator delete(__p);
  }
  if (v448)
  {
    ldiv_t v449 = (char *)v448;
    operator delete(v448);
  }
}

void sub_256D88FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned int>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(4 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    int v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      unsigned int v15 = *(unsigned __int8 *)(*a5 + v14 * v12);
      unsigned int v16 = *(unsigned __int8 *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        unint64_t v35 = a7;
        uint64_t v36 = a6 >> 1;
        uint64_t v37 = a6;
        unsigned int v52 = a6 - (a6 >> 1);
        unsigned int v38 = &a2[result * v36];
        if (a6 <= a8)
        {
          int v39 = &v35[v36];
          uint64_t v40 = *a5;
          uint64_t v41 = a5[1];
          uint64_t v42 = 4 * v18;
          unsigned int v43 = v39;
          unsigned int v44 = &v35[v37];
          while (v43 != v44)
          {
            uint64_t v45 = *v43;
            uint64_t v46 = *v35;
            unsigned int v47 = *(unsigned __int8 *)(v40 + v41 * v45);
            unsigned int v48 = *(unsigned __int8 *)(v40 + v41 * v46);
            if (v47 < v48 || (v45 < v46 ? (BOOL v49 = v47 == v48) : (BOOL v49 = 0), v49))
            {
              *int v11 = v45;
              ++v43;
            }
            else
            {
              *int v11 = v46;
              ++v35;
            }
            int v11 = (int *)((char *)v11 + v42);
            if (v35 == v39)
            {
              while (v43 != v44)
              {
                int v50 = *v43++;
                *int v11 = v50;
                int v11 = (int *)((char *)v11 + v42);
              }
              return result;
            }
          }
          while (v35 != v39)
          {
            unsigned int v51 = *v35++;
            *int v11 = v51;
            int v11 = (int *)((char *)v11 + v42);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        unint64_t v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = a2;
          do
          {
            uint64_t v25 = v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            unsigned int v28 = *(unsigned __int8 *)(v21 + v22 * v26);
            uint64_t result = *(unsigned __int8 *)(v21 + v22 * v27);
            if (v28 < result
              || (v26 < v27 ? (BOOL v29 = v28 == result) : (BOOL v29 = 0), v29))
            {
              *uint64_t v25 = v27;
              if (v24 == a2)
              {
LABEL_30:
                unint64_t v33 = a2;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)a2 + v30 + -4 * v18);
                  uint64_t result = *(unsigned __int8 *)(v21 + v22 * v31);
                  if (v28 >= result && (v26 >= v31 || v28 != result)) {
                    break;
                  }
                  *(unsigned int *)((char *)a2 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                unint64_t v33 = (unsigned int *)((char *)a2 + v30);
              }
              *unint64_t v33 = v26;
            }
            unint64_t v19 = &v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      unsigned int v16 = *(unsigned __int8 *)(*a5 + v15 * v13);
      unsigned int v17 = *(unsigned __int8 *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      unsigned int v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          unsigned int v44 = *(unsigned __int8 *)(v39 + v40 * v42);
          unsigned int v45 = *(unsigned __int8 *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      unint64_t v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          unsigned int v28 = *(unsigned __int8 *)(v21 + v22 * v27);
          unsigned int v29 = *(unsigned __int8 *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                unsigned int v35 = *(unsigned __int8 *)(v21 + v22 * v33);
                uint64_t result = *(unsigned __int8 *)(v21 + v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    uint64_t v13 = a7;
    ldiv_t v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      unsigned int v20 = *(unsigned __int8 *)(*v13 + v19 * v17);
      int v21 = -a8;
      while (1)
      {
        uint64_t v22 = a2[v16];
        unsigned int v23 = *(unsigned __int8 *)(v18 + v19 * v22);
        if (v20 < v23) {
          break;
        }
        if (v17 < v22 && v20 == v23) {
          break;
        }
        v16 += a1;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v83 = a5;
      unint64_t v84 = a6;
      int64_t v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v37 = -v21;
        }
        else {
          int v37 = 1 - v21;
        }
        uint64_t v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        unint64_t v38 = (a6 - a4) / a5;
        if (v38)
        {
          uint64_t v39 = *v31;
          unsigned int v40 = *(unsigned __int8 *)(v18 + v19 * v39);
          uint64_t v27 = a4;
          do
          {
            uint64_t v41 = v38 >> 1;
            uint64_t v42 = &v27[a3 * v41];
            uint64_t v43 = *v42;
            unsigned int v44 = *(unsigned __int8 *)(v18 + v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (BOOL v45 = v44 == v40) : (BOOL v45 = 0), v45))
            {
              uint64_t v27 = &v42[a3];
              LODWORD(v41) = v38 + ~v41;
            }
            LODWORD(v38) = v41;
          }
          while (v41);
        }
        else
        {
          uint64_t v27 = a4;
        }
        unint64_t v87 = (v37 >> 1);
        unint64_t v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0) {
          int v26 = result;
        }
        else {
          int v26 = result + 1;
        }
        uint64_t v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        unint64_t v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v28)
        {
          uint64_t v29 = *v27;
          unsigned int v30 = *(unsigned __int8 *)(v18 + v19 * v29);
          uint64_t v31 = &a2[v16];
          do
          {
            uint64_t v32 = v28 >> 1;
            uint64_t v33 = &v31[a1 * v32];
            uint64_t v34 = *v33;
            unsigned int v35 = *(unsigned __int8 *)(v18 + v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              uint64_t v31 = &v33[a1];
              LODWORD(v32) = v28 + ~v32;
            }
            LODWORD(v28) = v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v31 = &a2[v16];
        }
        unint64_t v86 = (v26 >> 1);
        unint64_t v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      unsigned int v82 = result - v86;
      int v46 = result;
      unint64_t v80 = a3;
      unint64_t v81 = a1;
      a1 = v88;
      unsigned int v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        BOOL v49 = v89;
        uint64_t v13 = a7;
        uint64_t v27 = v31;
        a3 = v81;
        unsigned int v47 = v78;
        unint64_t v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        uint64_t v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        unint64_t v48 = v82;
      }
      uint64_t result = v48;
      a2 = v47;
      a4 = v27;
      if (!v48) {
        return result;
      }
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 4 * a1;
        unsigned __int8 v64 = a2;
        do
        {
          a10[v62++] = *v64;
          unsigned __int8 v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          unsigned __int8 v65 = &a10[v62];
          uint64_t v66 = (uint64_t)&a10[v62 - 1];
          uint64_t v67 = *v13;
          uint64_t v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v69 = *a4;
            unint64_t v70 = v85;
            uint64_t v71 = *v85;
            unsigned int v72 = *(unsigned __int8 *)(v67 + v68 * v69);
            unsigned int v73 = *(unsigned __int8 *)(v67 + v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (BOOL v74 = v72 == v73) : (BOOL v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              unint64_t v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            ldiv_t v85 = v70;
            if (v65 == v70) {
              return result;
            }
          }
          uint64_t v76 = v85 - 1;
          do
          {
            int v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v50 = 0;
      unsigned int v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        unsigned int v52 = &a10[v50];
        uint64_t v53 = *v13;
        uint64_t v54 = v13[1];
        uint64_t v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          unsigned int v56 = &a4[-a3];
          uint64_t v57 = *(v52 - 1);
          uint64_t v58 = *v56;
          unsigned int v59 = *(unsigned __int8 *)(v53 + v54 * v57);
          uint64_t result = *(unsigned __int8 *)(v53 + v54 * v58);
          if (v59 >= result)
          {
            BOOL v61 = v57 < v58 && v59 == result;
            unsigned int v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              unsigned int v56 = a4;
              --v52;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60) {
            return result;
          }
        }
        do
        {
          int v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

unint64_t std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>@<X0>(unint64_t result@<X0>, int *a2@<X1>, unint64_t a3@<X2>, int *a4@<X3>, unint64_t a5@<X4>, int *a6@<X5>, unint64_t *a7@<X8>)
{
  if (a2 == a4 && result == a3)
  {
    *a7 = a5;
    a7[1] = (unint64_t)a6;
  }
  else if (a4 == a6 && a3 == a5)
  {
    *a7 = result;
    a7[1] = (unint64_t)a2;
    a5 = a3;
  }
  else
  {
    if (&a2[result] == a4 && result == a3)
    {
      int v7 = *a2;
      if (a4 != a6)
      {
        uint64_t v8 = 0;
        do
        {
          a2[v8] = a4[v8];
          v8 += result;
        }
        while (&a4[v8] != a6);
        a2 = (int *)((char *)a2 + v8 * 4);
      }
      *a2 = v7;
      a4 = a2;
    }
    else if (&a4[a3] == a6 && a3 == a5)
    {
      int v9 = &a6[-a3];
      int v10 = *v9;
      a4 = a6;
      if (v9 != a2)
      {
        uint64_t v11 = 0;
        do
        {
          v9[v11] = a6[v11 + -2 * a3];
          v11 -= a3;
        }
        while (&v9[v11] != a2);
        a4 = &a6[v11];
      }
      *a2 = v10;
      uint64_t result = a5;
    }
    else
    {
      unint64_t v12 = (a4 - a2) / a3;
      unint64_t v13 = (a6 - a4) / a5;
      if (v12 == v13)
      {
        if (a2 != a4 && a4 != a6)
        {
          uint64_t v14 = a4;
          do
          {
            int v15 = *a2;
            *a2 = *v14;
            int *v14 = v15;
            a2 += result;
            v14 += a3;
          }
          while (a2 != a4 && v14 != a6);
        }
        uint64_t result = a3;
      }
      else
      {
        unint64_t v17 = (a6 - a4) / a5;
        unint64_t v18 = (a4 - a2) / a3;
        do
        {
          int v19 = v18;
          LODWORD(v18) = v17;
          LODWORD(v17) = v19 % (int)v17;
        }
        while (v17);
        uint64_t v20 = result * (int)v18;
        if (v20)
        {
          int v21 = &a2[v20];
          uint64_t v22 = (int)v12 * result;
          do
          {
            v21 -= result;
            int v23 = *v21;
            unint64_t v24 = &v21[v22];
            unsigned int v25 = v21;
            do
            {
              int v26 = v24;
              *unsigned int v25 = *v24;
              unint64_t v27 = (a6 - v24) / a5;
              if ((int)v12 >= (int)v27) {
                unint64_t v24 = &a2[((int)v12 - (int)v27) * result];
              }
              else {
                unint64_t v24 = &v26[v22];
              }
              unsigned int v25 = v26;
            }
            while (v24 != v21);
            *int v26 = v23;
          }
          while (v21 != a2);
        }
        a4 = &a2[(int)v13 * result];
      }
    }
    *a7 = result;
    a7[1] = (unint64_t)a4;
  }
  a7[2] = a5;
  a7[3] = (unint64_t)a6;
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      unsigned int v15 = *(unsigned __int8 *)(*a5 + v14 * v12);
      unsigned int v16 = *(unsigned __int8 *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        uint64_t v36 = a7;
        uint64_t v37 = a6 >> 1;
        uint64_t v38 = a6;
        unsigned int v53 = a6 - (a6 >> 1);
        uint64_t v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          unsigned int v40 = &v36[v37];
          uint64_t v41 = *a5;
          uint64_t v42 = a5[1];
          uint64_t v43 = 4 * v18;
          unsigned int v44 = v40;
          BOOL v45 = &v36[v38];
          while (v44 != v45)
          {
            uint64_t v46 = *v44;
            uint64_t v47 = *v36;
            unsigned int v48 = *(unsigned __int8 *)(v41 + v42 * v46);
            unsigned int v49 = *(unsigned __int8 *)(v41 + v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (BOOL v50 = v48 == v49) : (BOOL v50 = 0), v50))
            {
              *uint64_t v11 = v46;
              ++v44;
            }
            else
            {
              *uint64_t v11 = v47;
              ++v36;
            }
            uint64_t v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                int v51 = *v44++;
                *uint64_t v11 = v51;
                uint64_t v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            unsigned int v52 = *v36++;
            *uint64_t v11 = v52;
            uint64_t v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        int v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = (int *)a2;
          do
          {
            unsigned int v25 = (int *)v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            uint64_t result = *(unsigned __int8 *)(v21 + v22 * v26);
            unsigned int v28 = *(unsigned __int8 *)(v21 + v22 * v27);
            if (result < v28
              || (v26 < v27 ? (BOOL v29 = result == v28) : (BOOL v29 = 0), v29))
            {
              *unsigned int v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                uint64_t v34 = v11;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  uint64_t result = *(unsigned __int8 *)(v21 + v22 * v26);
                  unsigned int v32 = *(unsigned __int8 *)(v21 + v22 * v31);
                  if (result >= v32 && (v26 >= v31 || result != v32)) {
                    break;
                  }
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                uint64_t v34 = (int *)((char *)v11 + v30);
              }
              *uint64_t v34 = v26;
            }
            int v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      unsigned int v16 = *(unsigned __int8 *)(*a5 + v15 * v13);
      unsigned int v17 = *(unsigned __int8 *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      uint64_t v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          unsigned int v44 = *(unsigned __int8 *)(v39 + v40 * v42);
          unsigned int v45 = *(unsigned __int8 *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      int v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          unsigned int v28 = *(unsigned __int8 *)(v21 + v22 * v27);
          unsigned int v29 = *(unsigned __int8 *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                unsigned int v35 = *(unsigned __int8 *)(v21 + v22 * v33);
                uint64_t result = *(unsigned __int8 *)(v21 + v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      unsigned int v15 = *(_DWORD *)(*a5 + 4 * v14 * v12);
      unsigned int v16 = *(_DWORD *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        uint64_t v36 = a7;
        uint64_t v37 = a6 >> 1;
        uint64_t v38 = a6;
        unsigned int v53 = a6 - (a6 >> 1);
        uint64_t v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          uint64_t v40 = &v36[v37];
          uint64_t v41 = *a5;
          uint64_t v42 = a5[1];
          uint64_t v43 = 4 * v18;
          unsigned int v44 = v40;
          unsigned int v45 = &v36[v38];
          while (v44 != v45)
          {
            uint64_t v46 = *v44;
            uint64_t v47 = *v36;
            unsigned int v48 = *(_DWORD *)(v41 + 4 * v42 * v46);
            unsigned int v49 = *(_DWORD *)(v41 + 4 * v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (BOOL v50 = v48 == v49) : (BOOL v50 = 0), v50))
            {
              *uint64_t v11 = v46;
              ++v44;
            }
            else
            {
              *uint64_t v11 = v47;
              ++v36;
            }
            uint64_t v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                int v51 = *v44++;
                *uint64_t v11 = v51;
                uint64_t v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            unsigned int v52 = *v36++;
            *uint64_t v11 = v52;
            uint64_t v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        int v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = (int *)a2;
          do
          {
            unsigned int v25 = (int *)v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v26);
            unsigned int v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
            if (result < v28
              || (v26 < v27 ? (BOOL v29 = result == v28) : (BOOL v29 = 0), v29))
            {
              *unsigned int v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                uint64_t v34 = v11;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v26);
                  unsigned int v32 = *(_DWORD *)(v21 + 4 * v22 * v31);
                  if (result >= v32 && (v26 >= v31 || result != v32)) {
                    break;
                  }
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                uint64_t v34 = (int *)((char *)v11 + v30);
              }
              *uint64_t v34 = v26;
            }
            int v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      unsigned int v16 = *(_DWORD *)(*a5 + 4 * v15 * v13);
      unsigned int v17 = *(_DWORD *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      uint64_t v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          unsigned int v44 = *(_DWORD *)(v39 + 4 * v40 * v42);
          unsigned int v45 = *(_DWORD *)(v39 + 4 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      int v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          unsigned int v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
          unsigned int v29 = *(_DWORD *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                unsigned int v35 = *(_DWORD *)(v21 + 4 * v22 * v33);
                uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    uint64_t v13 = a7;
    ldiv_t v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      unsigned int v20 = *(_DWORD *)(*v13 + 4 * v19 * v17);
      int v21 = -a8;
      while (1)
      {
        uint64_t v22 = a2[v16];
        unsigned int v23 = *(_DWORD *)(v18 + 4 * v19 * v22);
        if (v20 < v23) {
          break;
        }
        if (v17 < v22 && v20 == v23) {
          break;
        }
        v16 += a1;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v83 = a5;
      unint64_t v84 = a6;
      int64_t v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v37 = -v21;
        }
        else {
          int v37 = 1 - v21;
        }
        uint64_t v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        unint64_t v38 = (a6 - a4) / a5;
        if (v38)
        {
          uint64_t v39 = *v31;
          unsigned int v40 = *(_DWORD *)(v18 + 4 * v19 * v39);
          uint64_t v27 = a4;
          do
          {
            uint64_t v41 = v38 >> 1;
            uint64_t v42 = &v27[a3 * v41];
            uint64_t v43 = *v42;
            unsigned int v44 = *(_DWORD *)(v18 + 4 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (BOOL v45 = v44 == v40) : (BOOL v45 = 0), v45))
            {
              uint64_t v27 = &v42[a3];
              LODWORD(v41) = v38 + ~v41;
            }
            LODWORD(v38) = v41;
          }
          while (v41);
        }
        else
        {
          uint64_t v27 = a4;
        }
        unint64_t v87 = (v37 >> 1);
        unint64_t v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0) {
          int v26 = result;
        }
        else {
          int v26 = result + 1;
        }
        uint64_t v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        unint64_t v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v28)
        {
          uint64_t v29 = *v27;
          unsigned int v30 = *(_DWORD *)(v18 + 4 * v19 * v29);
          uint64_t v31 = &a2[v16];
          do
          {
            uint64_t v32 = v28 >> 1;
            uint64_t v33 = &v31[a1 * v32];
            uint64_t v34 = *v33;
            unsigned int v35 = *(_DWORD *)(v18 + 4 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              uint64_t v31 = &v33[a1];
              LODWORD(v32) = v28 + ~v32;
            }
            LODWORD(v28) = v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v31 = &a2[v16];
        }
        unint64_t v86 = (v26 >> 1);
        unint64_t v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      unsigned int v82 = result - v86;
      int v46 = result;
      unint64_t v80 = a3;
      unint64_t v81 = a1;
      a1 = v88;
      uint64_t v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        unsigned int v49 = v89;
        uint64_t v13 = a7;
        uint64_t v27 = v31;
        a3 = v81;
        uint64_t v47 = v78;
        unint64_t v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        uint64_t v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        unint64_t v48 = v82;
      }
      uint64_t result = v48;
      a2 = v47;
      a4 = v27;
      if (!v48) {
        return result;
      }
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 4 * a1;
        unsigned __int8 v64 = a2;
        do
        {
          a10[v62++] = *v64;
          unsigned __int8 v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          unsigned __int8 v65 = &a10[v62];
          uint64_t v66 = (uint64_t)&a10[v62 - 1];
          uint64_t v67 = *v13;
          uint64_t v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v69 = *a4;
            unint64_t v70 = v85;
            uint64_t v71 = *v85;
            unsigned int v72 = *(_DWORD *)(v67 + 4 * v68 * v69);
            unsigned int v73 = *(_DWORD *)(v67 + 4 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (BOOL v74 = v72 == v73) : (BOOL v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              unint64_t v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            ldiv_t v85 = v70;
            if (v65 == v70) {
              return result;
            }
          }
          uint64_t v76 = v85 - 1;
          do
          {
            int v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v50 = 0;
      int v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        unsigned int v52 = &a10[v50];
        uint64_t v53 = *v13;
        uint64_t v54 = v13[1];
        uint64_t v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          unsigned int v56 = &a4[-a3];
          uint64_t v57 = *(v52 - 1);
          uint64_t v58 = *v56;
          unsigned int v59 = *(_DWORD *)(v53 + 4 * v54 * v57);
          uint64_t result = *(unsigned int *)(v53 + 4 * v54 * v58);
          if (v59 >= result)
          {
            BOOL v61 = v57 < v58 && v59 == result;
            unsigned int v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              unsigned int v56 = a4;
              --v52;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60) {
            return result;
          }
        }
        do
        {
          int v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      int v15 = *(char *)(*a5 + v14 * v12);
      int v16 = *(char *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        uint64_t v36 = a7;
        uint64_t v37 = a6 >> 1;
        uint64_t v38 = a6;
        unsigned int v53 = a6 - (a6 >> 1);
        uint64_t v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          unsigned int v40 = &v36[v37];
          uint64_t v41 = *a5;
          uint64_t v42 = a5[1];
          uint64_t v43 = 4 * v18;
          unsigned int v44 = v40;
          BOOL v45 = &v36[v38];
          while (v44 != v45)
          {
            uint64_t v46 = *v44;
            uint64_t v47 = *v36;
            int v48 = *(char *)(v41 + v42 * v46);
            int v49 = *(char *)(v41 + v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (BOOL v50 = v48 == v49) : (BOOL v50 = 0), v50))
            {
              *uint64_t v11 = v46;
              ++v44;
            }
            else
            {
              *uint64_t v11 = v47;
              ++v36;
            }
            uint64_t v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                int v51 = *v44++;
                *uint64_t v11 = v51;
                uint64_t v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            unsigned int v52 = *v36++;
            *uint64_t v11 = v52;
            uint64_t v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        uint64_t v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = (int *)a2;
          do
          {
            unsigned int v25 = (int *)v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            uint64_t result = *(char *)(v21 + v22 * v26);
            int v28 = *(char *)(v21 + v22 * v27);
            if ((int)result < v28
              || (v26 < v27 ? (BOOL v29 = result == v28) : (BOOL v29 = 0), v29))
            {
              *unsigned int v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                uint64_t v34 = v11;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  uint64_t result = *(char *)(v21 + v22 * v26);
                  int v32 = *(char *)(v21 + v22 * v31);
                  if ((int)result >= v32 && (v26 >= v31 || result != v32)) {
                    break;
                  }
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                uint64_t v34 = (int *)((char *)v11 + v30);
              }
              *uint64_t v34 = v26;
            }
            uint64_t v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      int v16 = *(char *)(*a5 + v15 * v13);
      int v17 = *(char *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      uint64_t v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          int v44 = *(char *)(v39 + v40 * v42);
          int v45 = *(char *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      uint64_t v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          int v28 = *(char *)(v21 + v22 * v27);
          int v29 = *(char *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                int v35 = *(char *)(v21 + v22 * v33);
                uint64_t result = *(char *)(v21 + v22 * v34);
                if (v35 >= (int)result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    uint64_t v13 = a7;
    ldiv_t v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      int v20 = *(char *)(*v13 + v19 * v17);
      int v21 = -a8;
      while (1)
      {
        uint64_t v22 = a2[v16];
        int v23 = *(char *)(v18 + v19 * v22);
        if (v20 < v23) {
          break;
        }
        if (v17 < v22 && v20 == v23) {
          break;
        }
        v16 += a1;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v83 = a5;
      unint64_t v84 = a6;
      int64_t v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v37 = -v21;
        }
        else {
          int v37 = 1 - v21;
        }
        uint64_t v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        unint64_t v38 = (a6 - a4) / a5;
        if (v38)
        {
          uint64_t v39 = *v31;
          int v40 = *(char *)(v18 + v19 * v39);
          uint64_t v27 = a4;
          do
          {
            uint64_t v41 = v38 >> 1;
            uint64_t v42 = &v27[a3 * v41];
            uint64_t v43 = *v42;
            int v44 = *(char *)(v18 + v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (BOOL v45 = v44 == v40) : (BOOL v45 = 0), v45))
            {
              uint64_t v27 = &v42[a3];
              LODWORD(v41) = v38 + ~v41;
            }
            LODWORD(v38) = v41;
          }
          while (v41);
        }
        else
        {
          uint64_t v27 = a4;
        }
        unint64_t v87 = (v37 >> 1);
        unint64_t v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0) {
          int v26 = result;
        }
        else {
          int v26 = result + 1;
        }
        uint64_t v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        unint64_t v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v28)
        {
          uint64_t v29 = *v27;
          int v30 = *(char *)(v18 + v19 * v29);
          uint64_t v31 = &a2[v16];
          do
          {
            uint64_t v32 = v28 >> 1;
            uint64_t v33 = &v31[a1 * v32];
            uint64_t v34 = *v33;
            int v35 = *(char *)(v18 + v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              uint64_t v31 = &v33[a1];
              LODWORD(v32) = v28 + ~v32;
            }
            LODWORD(v28) = v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v31 = &a2[v16];
        }
        unint64_t v86 = (v26 >> 1);
        unint64_t v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      unsigned int v82 = result - v86;
      int v46 = result;
      unint64_t v80 = a3;
      unint64_t v81 = a1;
      a1 = v88;
      uint64_t v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        int v49 = v89;
        uint64_t v13 = a7;
        uint64_t v27 = v31;
        a3 = v81;
        uint64_t v47 = v78;
        unint64_t v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        uint64_t v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        unint64_t v48 = v82;
      }
      uint64_t result = v48;
      a2 = v47;
      a4 = v27;
      if (!v48) {
        return result;
      }
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 4 * a1;
        unsigned __int8 v64 = a2;
        do
        {
          a10[v62++] = *v64;
          unsigned __int8 v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          unsigned __int8 v65 = &a10[v62];
          uint64_t v66 = (uint64_t)&a10[v62 - 1];
          uint64_t v67 = *v13;
          uint64_t v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v69 = *a4;
            unint64_t v70 = v85;
            uint64_t v71 = *v85;
            int v72 = *(char *)(v67 + v68 * v69);
            int v73 = *(char *)(v67 + v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (BOOL v74 = v72 == v73) : (BOOL v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              unint64_t v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            ldiv_t v85 = v70;
            if (v65 == v70) {
              return result;
            }
          }
          uint64_t v76 = v85 - 1;
          do
          {
            int v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v50 = 0;
      int v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        unsigned int v52 = &a10[v50];
        uint64_t v53 = *v13;
        uint64_t v54 = v13[1];
        uint64_t v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          unsigned int v56 = &a4[-a3];
          uint64_t v57 = *(v52 - 1);
          uint64_t v58 = *v56;
          int v59 = *(char *)(v53 + v54 * v57);
          uint64_t result = *(char *)(v53 + v54 * v58);
          if (v59 >= (int)result)
          {
            BOOL v61 = v57 < v58 && v59 == result;
            unsigned int v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              unsigned int v56 = a4;
              --v52;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60) {
            return result;
          }
        }
        do
        {
          int v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      int v15 = *(_DWORD *)(*a5 + 4 * v14 * v12);
      int v16 = *(_DWORD *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        uint64_t v36 = a7;
        uint64_t v37 = a6 >> 1;
        uint64_t v38 = a6;
        unsigned int v53 = a6 - (a6 >> 1);
        uint64_t v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          int v40 = &v36[v37];
          uint64_t v41 = *a5;
          uint64_t v42 = a5[1];
          uint64_t v43 = 4 * v18;
          int v44 = v40;
          BOOL v45 = &v36[v38];
          while (v44 != v45)
          {
            uint64_t v46 = *v44;
            uint64_t v47 = *v36;
            int v48 = *(_DWORD *)(v41 + 4 * v42 * v46);
            int v49 = *(_DWORD *)(v41 + 4 * v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (BOOL v50 = v48 == v49) : (BOOL v50 = 0), v50))
            {
              *uint64_t v11 = v46;
              ++v44;
            }
            else
            {
              *uint64_t v11 = v47;
              ++v36;
            }
            uint64_t v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                int v51 = *v44++;
                *uint64_t v11 = v51;
                uint64_t v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            unsigned int v52 = *v36++;
            *uint64_t v11 = v52;
            uint64_t v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        uint64_t v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = (int *)a2;
          do
          {
            unsigned int v25 = (int *)v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v26);
            int v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
            if ((int)result < v28
              || (v26 < v27 ? (BOOL v29 = result == v28) : (BOOL v29 = 0), v29))
            {
              *unsigned int v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                uint64_t v34 = v11;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v26);
                  int v32 = *(_DWORD *)(v21 + 4 * v22 * v31);
                  if ((int)result >= v32 && (v26 >= v31 || result != v32)) {
                    break;
                  }
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                uint64_t v34 = (int *)((char *)v11 + v30);
              }
              *uint64_t v34 = v26;
            }
            uint64_t v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      int v16 = *(_DWORD *)(*a5 + 4 * v15 * v13);
      int v17 = *(_DWORD *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      uint64_t v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          int v44 = *(_DWORD *)(v39 + 4 * v40 * v42);
          int v45 = *(_DWORD *)(v39 + 4 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      uint64_t v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          int v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
          int v29 = *(_DWORD *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                int v35 = *(_DWORD *)(v21 + 4 * v22 * v33);
                uint64_t result = *(unsigned int *)(v21 + 4 * v22 * v34);
                if (v35 >= (int)result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    uint64_t v13 = a7;
    ldiv_t v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      int v20 = *(_DWORD *)(*v13 + 4 * v19 * v17);
      int v21 = -a8;
      while (1)
      {
        uint64_t v22 = a2[v16];
        int v23 = *(_DWORD *)(v18 + 4 * v19 * v22);
        if (v20 < v23) {
          break;
        }
        if (v17 < v22 && v20 == v23) {
          break;
        }
        v16 += a1;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v83 = a5;
      unint64_t v84 = a6;
      int64_t v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v37 = -v21;
        }
        else {
          int v37 = 1 - v21;
        }
        uint64_t v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        unint64_t v38 = (a6 - a4) / a5;
        if (v38)
        {
          uint64_t v39 = *v31;
          int v40 = *(_DWORD *)(v18 + 4 * v19 * v39);
          uint64_t v27 = a4;
          do
          {
            uint64_t v41 = v38 >> 1;
            uint64_t v42 = &v27[a3 * v41];
            uint64_t v43 = *v42;
            int v44 = *(_DWORD *)(v18 + 4 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (BOOL v45 = v44 == v40) : (BOOL v45 = 0), v45))
            {
              uint64_t v27 = &v42[a3];
              LODWORD(v41) = v38 + ~v41;
            }
            LODWORD(v38) = v41;
          }
          while (v41);
        }
        else
        {
          uint64_t v27 = a4;
        }
        unint64_t v87 = (v37 >> 1);
        unint64_t v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0) {
          int v26 = result;
        }
        else {
          int v26 = result + 1;
        }
        uint64_t v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        unint64_t v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v28)
        {
          uint64_t v29 = *v27;
          int v30 = *(_DWORD *)(v18 + 4 * v19 * v29);
          uint64_t v31 = &a2[v16];
          do
          {
            uint64_t v32 = v28 >> 1;
            uint64_t v33 = &v31[a1 * v32];
            uint64_t v34 = *v33;
            int v35 = *(_DWORD *)(v18 + 4 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              uint64_t v31 = &v33[a1];
              LODWORD(v32) = v28 + ~v32;
            }
            LODWORD(v28) = v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v31 = &a2[v16];
        }
        unint64_t v86 = (v26 >> 1);
        unint64_t v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      unsigned int v82 = result - v86;
      int v46 = result;
      unint64_t v80 = a3;
      unint64_t v81 = a1;
      a1 = v88;
      uint64_t v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        int v49 = v89;
        uint64_t v13 = a7;
        uint64_t v27 = v31;
        a3 = v81;
        uint64_t v47 = v78;
        unint64_t v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        uint64_t v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        unint64_t v48 = v82;
      }
      uint64_t result = v48;
      a2 = v47;
      a4 = v27;
      if (!v48) {
        return result;
      }
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 4 * a1;
        unsigned __int8 v64 = a2;
        do
        {
          a10[v62++] = *v64;
          unsigned __int8 v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          unsigned __int8 v65 = &a10[v62];
          uint64_t v66 = (uint64_t)&a10[v62 - 1];
          uint64_t v67 = *v13;
          uint64_t v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v69 = *a4;
            unint64_t v70 = v85;
            uint64_t v71 = *v85;
            int v72 = *(_DWORD *)(v67 + 4 * v68 * v69);
            int v73 = *(_DWORD *)(v67 + 4 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (BOOL v74 = v72 == v73) : (BOOL v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              unint64_t v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            ldiv_t v85 = v70;
            if (v65 == v70) {
              return result;
            }
          }
          uint64_t v76 = v85 - 1;
          do
          {
            int v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v50 = 0;
      int v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        unsigned int v52 = &a10[v50];
        uint64_t v53 = *v13;
        uint64_t v54 = v13[1];
        uint64_t v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          unsigned int v56 = &a4[-a3];
          uint64_t v57 = *(v52 - 1);
          uint64_t v58 = *v56;
          int v59 = *(_DWORD *)(v53 + 4 * v54 * v57);
          uint64_t result = *(unsigned int *)(v53 + 4 * v54 * v58);
          if (v59 >= (int)result)
          {
            BOOL v61 = v57 < v58 && v59 == result;
            unsigned int v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              unsigned int v56 = a4;
              --v52;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60) {
            return result;
          }
        }
        do
        {
          int v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      uint64_t v15 = *(void *)(*a5 + 8 * v14 * v12);
      uint64_t v16 = *(void *)(*a5 + 8 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v18 = result;
      if ((int)a6 > 128)
      {
        int v35 = a7;
        uint64_t v36 = a6 >> 1;
        uint64_t v37 = a6;
        unsigned int v52 = a6 - (a6 >> 1);
        unint64_t v38 = &a2[result * v36];
        if (a6 <= a8)
        {
          uint64_t v39 = &v35[v36];
          uint64_t v40 = *a5;
          uint64_t v41 = a5[1];
          uint64_t v42 = 4 * v18;
          uint64_t v43 = v39;
          int v44 = &v35[v37];
          while (v43 != v44)
          {
            uint64_t v45 = *v43;
            uint64_t v46 = *v35;
            uint64_t v47 = *(void *)(v40 + 8 * v41 * v45);
            uint64_t v48 = *(void *)(v40 + 8 * v41 * v46);
            if (v47 < v48 || (v45 < v46 ? (BOOL v49 = v47 == v48) : (BOOL v49 = 0), v49))
            {
              *uint64_t v11 = v45;
              ++v43;
            }
            else
            {
              *uint64_t v11 = v46;
              ++v35;
            }
            uint64_t v11 = (int *)((char *)v11 + v42);
            if (v35 == v39)
            {
              while (v43 != v44)
              {
                int v50 = *v43++;
                *uint64_t v11 = v50;
                uint64_t v11 = (int *)((char *)v11 + v42);
              }
              return result;
            }
          }
          while (v35 != v39)
          {
            unsigned int v51 = *v35++;
            *uint64_t v11 = v51;
            uint64_t v11 = (int *)((char *)v11 + v42);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        uint64_t v19 = &a2[result];
        if (v19 != a4)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *a5;
          uint64_t v22 = a5[1];
          uint64_t v23 = 4 * result;
          unint64_t v24 = a2;
          do
          {
            unsigned int v25 = v19;
            uint64_t v26 = *v19;
            uint64_t v27 = *v24;
            uint64_t v28 = *(void *)(v21 + 8 * v22 * v26);
            uint64_t result = *(void *)(v21 + 8 * v22 * v27);
            if (v28 < result || (v26 < v27 ? (BOOL v29 = v28 == result) : (BOOL v29 = 0), v29))
            {
              *unsigned int v25 = v27;
              if (v24 == a2)
              {
LABEL_30:
                uint64_t v33 = a2;
              }
              else
              {
                uint64_t v30 = v20;
                while (1)
                {
                  uint64_t v31 = *(unsigned int *)((char *)a2 + v30 + -4 * v18);
                  uint64_t result = *(void *)(v21 + 8 * v22 * v31);
                  if (v28 >= result && (v26 >= v31 || v28 != result)) {
                    break;
                  }
                  *(unsigned int *)((char *)a2 + v30) = v31;
                  v30 -= v23;
                  if (!v30) {
                    goto LABEL_30;
                  }
                }
                uint64_t v33 = (unsigned int *)((char *)a2 + v30);
              }
              *uint64_t v33 = v26;
            }
            uint64_t v19 = &v25[v18];
            v20 += v23;
            unint64_t v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      uint64_t v16 = *(void *)(*a5 + 8 * v15 * v13);
      uint64_t v17 = *(void *)(*a5 + 8 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v37 = a6 >> 1;
      unint64_t v38 = &a2[result * v37];
      if (v18 * v37)
      {
        uint64_t v39 = *a5;
        uint64_t v40 = a5[1];
        uint64_t v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          uint64_t v42 = *v41;
          uint64_t v43 = *v9;
          uint64_t v44 = *(void *)(v39 + 8 * v40 * v42);
          uint64_t v45 = *(void *)(v39 + 8 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (BOOL v46 = v44 == v45) : (BOOL v46 = 0), v46))
          {
            *int v7 = v42;
            v41 += v18;
          }
          else
          {
            *int v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38) {
            goto LABEL_47;
          }
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      uint64_t v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          uint64_t v28 = *(void *)(v21 + 8 * v22 * v27);
          uint64_t v29 = *(void *)(v21 + 8 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (BOOL v30 = v28 == v29) : (BOOL v30 = 0), v30))
          {
            v23[1] = v25;
            uint64_t v31 = a7;
            if (v23 != a7)
            {
              uint64_t v32 = v20;
              do
              {
                uint64_t v33 = *v19;
                uint64_t v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                uint64_t v35 = *(void *)(v21 + 8 * v22 * v33);
                uint64_t result = *(void *)(v21 + 8 * v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != result))
                {
                  uint64_t v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              uint64_t v31 = a7;
            }
LABEL_30:
            *uint64_t v31 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    uint64_t v13 = a7;
    ldiv_t v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      uint64_t v20 = *(void *)(*v13 + 8 * v19 * v17);
      int v21 = -a8;
      while (1)
      {
        uint64_t v22 = a2[v16];
        uint64_t v23 = *(void *)(v18 + 8 * v19 * v22);
        if (v20 < v23) {
          break;
        }
        if (v17 < v22 && v20 == v23) {
          break;
        }
        v16 += a1;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v83 = a5;
      unint64_t v84 = a6;
      int64_t v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v37 = -v21;
        }
        else {
          int v37 = 1 - v21;
        }
        uint64_t v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        unint64_t v38 = (a6 - a4) / a5;
        if (v38)
        {
          uint64_t v39 = *v31;
          uint64_t v40 = *(void *)(v18 + 8 * v19 * v39);
          uint64_t v27 = a4;
          do
          {
            uint64_t v41 = v38 >> 1;
            uint64_t v42 = &v27[a3 * v41];
            uint64_t v43 = *v42;
            uint64_t v44 = *(void *)(v18 + 8 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (BOOL v45 = v44 == v40) : (BOOL v45 = 0), v45))
            {
              uint64_t v27 = &v42[a3];
              LODWORD(v41) = v38 + ~v41;
            }
            LODWORD(v38) = v41;
          }
          while (v41);
        }
        else
        {
          uint64_t v27 = a4;
        }
        unint64_t v87 = (v37 >> 1);
        unint64_t v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0) {
          int v26 = result;
        }
        else {
          int v26 = result + 1;
        }
        uint64_t v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        unint64_t v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v28)
        {
          uint64_t v29 = *v27;
          uint64_t v30 = *(void *)(v18 + 8 * v19 * v29);
          uint64_t v31 = &a2[v16];
          do
          {
            uint64_t v32 = v28 >> 1;
            uint64_t v33 = &v31[a1 * v32];
            uint64_t v34 = *v33;
            uint64_t v35 = *(void *)(v18 + 8 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              uint64_t v31 = &v33[a1];
              LODWORD(v32) = v28 + ~v32;
            }
            LODWORD(v28) = v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v31 = &a2[v16];
        }
        unint64_t v86 = (v26 >> 1);
        unint64_t v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      unsigned int v82 = result - v86;
      int v46 = result;
      unint64_t v80 = a3;
      unint64_t v81 = a1;
      a1 = v88;
      uint64_t v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        BOOL v49 = v89;
        uint64_t v13 = a7;
        uint64_t v27 = v31;
        a3 = v81;
        uint64_t v47 = v78;
        unint64_t v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        uint64_t v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        unint64_t v48 = v82;
      }
      uint64_t result = v48;
      a2 = v47;
      a4 = v27;
      if (!v48) {
        return result;
      }
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = 4 * a1;
        unsigned __int8 v64 = a2;
        do
        {
          a10[v62++] = *v64;
          unsigned __int8 v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          unsigned __int8 v65 = &a10[v62];
          uint64_t v66 = (uint64_t)&a10[v62 - 1];
          uint64_t v67 = *v13;
          uint64_t v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v69 = *a4;
            unint64_t v70 = v85;
            uint64_t v71 = *v85;
            uint64_t v72 = *(void *)(v67 + 8 * v68 * v69);
            uint64_t v73 = *(void *)(v67 + 8 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (BOOL v74 = v72 == v73) : (BOOL v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              unint64_t v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            ldiv_t v85 = v70;
            if (v65 == v70) {
              return result;
            }
          }
          uint64_t v76 = v85 - 1;
          do
          {
            int v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v50 = 0;
      unsigned int v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        unsigned int v52 = &a10[v50];
        uint64_t v53 = *v13;
        uint64_t v54 = v13[1];
        uint64_t v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          unsigned int v56 = &a4[-a3];
          uint64_t v57 = *(v52 - 1);
          uint64_t v58 = *v56;
          uint64_t v59 = *(void *)(v53 + 8 * v54 * v57);
          uint64_t result = *(void *)(v53 + 8 * v54 * v58);
          if (v59 >= result)
          {
            BOOL v61 = v57 < v58 && v59 == result;
            unsigned int v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              unsigned int v56 = a4;
              --v52;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60) {
            return result;
          }
        }
        do
        {
          int v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

unint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  if (a6 >= 2)
  {
    uint64_t v11 = (int *)a2;
    if (a6 == 2)
    {
      uint64_t v12 = a4[-a3];
      uint64_t v13 = *a2;
      uint64_t v14 = a5[1];
      float v15 = *(float *)(*a5 + 4 * v14 * v12);
      float v16 = *(float *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || v12 < v13 && v15 == v16)
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      unint64_t v17 = result;
      if ((int)a6 > 128)
      {
        uint64_t v34 = a7;
        uint64_t v35 = a6 >> 1;
        uint64_t v36 = a6;
        unsigned int v50 = a6 - (a6 >> 1);
        int v37 = &a2[result * v35];
        if (a6 <= a8)
        {
          unint64_t v38 = &v34[v35];
          uint64_t v39 = *a5;
          uint64_t v40 = a5[1];
          uint64_t v41 = 4 * v17;
          uint64_t v42 = v38;
          uint64_t v43 = &v34[v36];
          while (v42 != v43)
          {
            uint64_t v44 = *v42;
            uint64_t v45 = *v34;
            float v46 = *(float *)(v39 + 4 * v40 * v44);
            float v47 = *(float *)(v39 + 4 * v40 * v45);
            if (v46 < v47 || v44 < v45 && v46 == v47)
            {
              *uint64_t v11 = v44;
              ++v42;
            }
            else
            {
              *uint64_t v11 = v45;
              ++v34;
            }
            uint64_t v11 = (int *)((char *)v11 + v41);
            if (v34 == v38)
            {
              while (v42 != v43)
              {
                int v48 = *v42++;
                *uint64_t v11 = v48;
                uint64_t v11 = (int *)((char *)v11 + v41);
              }
              return result;
            }
          }
          while (v34 != v38)
          {
            unsigned int v49 = *v34++;
            *uint64_t v11 = v49;
            uint64_t v11 = (int *)((char *)v11 + v41);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        uint64_t v18 = &a2[result];
        if (v18 != a4)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *a5;
          uint64_t v21 = a5[1];
          uint64_t v22 = 4 * result;
          uint64_t v23 = a2;
          do
          {
            unint64_t v24 = v23;
            uint64_t v23 = v18;
            uint64_t v25 = *v18;
            uint64_t v26 = *v24;
            float v27 = *(float *)(v20 + 4 * v21 * v25);
            float v28 = *(float *)(v20 + 4 * v21 * v26);
            if (v27 < v28 || v25 < v26 && v27 == v28)
            {
              unsigned int *v23 = v26;
              if (v24 == a2)
              {
LABEL_21:
                uint64_t v32 = a2;
              }
              else
              {
                uint64_t v29 = v19;
                while (1)
                {
                  uint64_t v30 = *(unsigned int *)((char *)a2 + v29 + -4 * result);
                  float v31 = *(float *)(v20 + 4 * v21 * v30);
                  if (v27 >= v31 && (v25 >= v30 || v27 != v31)) {
                    break;
                  }
                  *(unsigned int *)((char *)a2 + v29) = v30;
                  v29 -= v22;
                  if (!v29) {
                    goto LABEL_21;
                  }
                }
                uint64_t v32 = (unsigned int *)((char *)a2 + v29);
              }
              *uint64_t v32 = v25;
            }
            uint64_t v18 = &v23[result];
            v19 += v22;
          }
          while (v18 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  if (a6)
  {
    int v7 = a7;
    int v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *int v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      uint64_t v13 = a4[-a3];
      uint64_t v14 = *a2;
      uint64_t v15 = a5[1];
      float v16 = *(float *)(*a5 + 4 * v15 * v13);
      float v17 = *(float *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        int v9 = &a4[-a3];
      }
      *a7 = v13;
      int v7 = a7 + 1;
      goto LABEL_8;
    }
    uint64_t v18 = result;
    if ((int)a6 > 8)
    {
      uint64_t v36 = a6 >> 1;
      int v37 = &a2[result * v36];
      if (v18 * v36)
      {
        uint64_t v38 = *a5;
        uint64_t v39 = a5[1];
        uint64_t v40 = &v9[v18 * v36];
        while (v40 != a4 || v18 != a3)
        {
          uint64_t v41 = *v40;
          uint64_t v42 = *v9;
          float v43 = *(float *)(v38 + 4 * v39 * v41);
          float v44 = *(float *)(v38 + 4 * v39 * v42);
          if (v43 < v44 || v41 < v42 && v43 == v44)
          {
            *int v7 = v41;
            v40 += v18;
          }
          else
          {
            *int v7 = v42;
            v9 += v18;
          }
          ++v7;
          if (v9 == v37) {
            goto LABEL_41;
          }
        }
        for (; v9 != v37; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        uint64_t v40 = &v9[v18 * v36];
LABEL_41:
        while (v40 != a4)
        {
          *v7++ = *v40;
          v40 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      uint64_t v19 = &a2[result];
      if (v19 != a4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = a5[1];
        uint64_t v23 = a7;
        unint64_t v24 = a7;
        do
        {
          unsigned int v26 = *v24++;
          unsigned int v25 = v26;
          uint64_t v27 = *v19;
          float v28 = *(float *)(v21 + 4 * v22 * v27);
          float v29 = *(float *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || v27 < v25 && v28 == v29)
          {
            v23[1] = v25;
            uint64_t v30 = a7;
            if (v23 != a7)
            {
              uint64_t v31 = v20;
              while (1)
              {
                uint64_t v32 = *v19;
                uint64_t v33 = *(unsigned int *)((char *)a7 + v31 - 4);
                float v34 = *(float *)(v21 + 4 * v22 * v32);
                float v35 = *(float *)(v21 + 4 * v22 * v33);
                if (v34 >= v35 && (v32 >= v33 || v34 != v35)) {
                  break;
                }
                *(unsigned int *)((char *)a7 + v31) = v33;
                v31 -= 4;
                if (!v31)
                {
                  uint64_t v30 = a7;
                  goto LABEL_26;
                }
              }
              uint64_t v30 = (unsigned int *)((char *)a7 + v31);
            }
LABEL_26:
            *uint64_t v30 = *v19;
          }
          else
          {
            *unint64_t v24 = v27;
          }
          v19 += result;
          v20 += 4;
          uint64_t v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

unint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t result, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, int a9, unsigned int *a10, uint64_t a11)
{
  int v11 = a9;
  if (a9)
  {
    LODWORD(v12) = a8;
    uint64_t v13 = a7;
    unint64_t v83 = a10;
    while (v11 > a11 && (int)v12 > a11)
    {
      if (!v12) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      float v20 = *(float *)(*v13 + 4 * v19 * v17);
      int v21 = -(int)v12;
      while (1)
      {
        uint64_t v22 = a2[v16];
        float v23 = *(float *)(v18 + 4 * v19 * v22);
        if (v20 < v23 || v17 < v22 && v20 == v23) {
          break;
        }
        v16 += result;
        if (__CFADD__(v21++, 1)) {
          return result;
        }
      }
      unint64_t v81 = a5;
      unsigned int v82 = a6;
      uint64_t v76 = &a2[v16];
      if (-v21 >= v11)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0) {
          int v35 = -v21;
        }
        else {
          int v35 = 1 - v21;
        }
        uint64_t v30 = &a2[result * ((uint64_t)v35 >> 1) + v16];
        unint64_t v36 = (a6 - a4) / a5;
        if (v36)
        {
          uint64_t v37 = *v30;
          float v38 = *(float *)(v18 + 4 * v19 * v37);
          unsigned int v26 = a4;
          do
          {
            uint64_t v39 = v36 >> 1;
            uint64_t v40 = &v26[a3 * v39];
            uint64_t v41 = *v40;
            float v42 = *(float *)(v18 + 4 * v19 * v41);
            if (v42 < v38 || v41 < v37 && v42 == v38)
            {
              unsigned int v26 = &v40[a3];
              LODWORD(v39) = v36 + ~v39;
            }
            LODWORD(v36) = v39;
          }
          while (v39);
        }
        else
        {
          unsigned int v26 = a4;
        }
        unint64_t v85 = (v35 >> 1);
        unint64_t v84 = (v26 - a4) / a3;
      }
      else
      {
        if (v11 >= 0) {
          int v25 = v11;
        }
        else {
          int v25 = v11 + 1;
        }
        unsigned int v26 = &a4[a3 * ((uint64_t)v25 >> 1)];
        unint64_t v27 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if (v27)
        {
          uint64_t v28 = *v26;
          float v29 = *(float *)(v18 + 4 * v19 * v28);
          uint64_t v30 = &a2[v16];
          do
          {
            uint64_t v31 = v27 >> 1;
            uint64_t v32 = &v30[result * v31];
            uint64_t v33 = *v32;
            float v34 = *(float *)(v18 + 4 * v19 * v33);
            if (v29 >= v34 && (v28 >= v33 || v29 != v34))
            {
              uint64_t v30 = &v32[result];
              LODWORD(v31) = v27 + ~v31;
            }
            LODWORD(v27) = v31;
          }
          while (v31);
        }
        else
        {
          uint64_t v30 = &a2[v16];
        }
        LODWORD(v84) = v25 >> 1;
        unint64_t v85 = (((char *)v30 - (char *)a2 - v16 * 4) >> 2) / result;
      }
      uint64_t v12 = -(v85 + v21);
      int v80 = v11 - v84;
      unint64_t v78 = a3;
      unint64_t v79 = result;
      int v43 = v11;
      float v44 = v87;
      if ((int)v85 + (int)v84 >= v43 - ((int)v85 + (int)v84) - v21)
      {
        float v47 = v87;
        uint64_t v13 = a7;
        unint64_t v48 = v86;
        unsigned int v26 = v30;
        uint64_t result = v79;
        a3 = v79;
        float v44 = v76;
        int v46 = v84;
        LODWORD(v12) = v85;
        a5 = v48;
        a6 = v47;
      }
      else
      {
        unint64_t v45 = v86;
        uint64_t v13 = a7;
        uint64_t result = v45;
        a5 = v81;
        a6 = v82;
        a3 = v78;
        int v46 = v80;
      }
      int v11 = v46;
      a2 = v44;
      a4 = v26;
      if (!v46) {
        return result;
      }
    }
    if ((int)v12 <= v11)
    {
      if (a2 != a4)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 4 * result;
        uint64_t v63 = a2;
        do
        {
          a10[v61++] = *v63;
          uint64_t v63 = (int *)((char *)v63 + v62);
        }
        while (v63 != a4);
        if (v61 * 4)
        {
          unsigned __int8 v64 = &a10[v61];
          uint64_t v65 = (uint64_t)&a10[v61 - 1];
          uint64_t v66 = *v13;
          uint64_t v67 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            uint64_t v68 = *a4;
            uint64_t v69 = v83;
            uint64_t v70 = *v83;
            float v71 = *(float *)(v66 + 4 * v67 * v68);
            float v72 = *(float *)(v66 + 4 * v67 * v70);
            if (v71 < v72 || v68 < v70 && v71 == v72)
            {
              *a2 = v68;
              a4 += a3;
            }
            else
            {
              *a2 = v70;
              uint64_t v69 = v83 + 1;
            }
            a2 = (int *)((char *)a2 + v62);
            unint64_t v83 = v69;
            if (v64 == v69) {
              return result;
            }
          }
          BOOL v74 = v83 - 1;
          do
          {
            int v75 = v74[1];
            ++v74;
            *a2 = v75;
            a2 = (int *)((char *)a2 + v62);
          }
          while ((unsigned int *)v65 != v74);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v49 = 0;
      unsigned int v50 = a4;
      do
      {
        a10[v49++] = *v50;
        v50 += a3;
      }
      while (v50 != a6);
      if (v49 * 4)
      {
        unsigned int v51 = &a10[v49];
        uint64_t v52 = *v13;
        uint64_t v53 = v13[1];
        uint64_t v54 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != result)
        {
          uint64_t v55 = &a4[-a3];
          uint64_t v56 = *(v51 - 1);
          uint64_t v57 = *v55;
          float v58 = *(float *)(v52 + 4 * v53 * v56);
          float v59 = *(float *)(v52 + 4 * v53 * v57);
          if (v58 >= v59)
          {
            unsigned int v60 = a10;
            if (v56 >= v57 || v58 != v59)
            {
              LODWORD(v57) = *(v51 - 1);
              uint64_t v55 = a4;
              --v51;
            }
          }
          else
          {
            unsigned int v60 = a10;
          }
          a6 -= a5;
          *a6 = v57;
          a4 = v55;
          if (v51 == v60) {
            return result;
          }
        }
        do
        {
          int v73 = *--v51;
          a6[v54] = v73;
          v54 -= a5;
        }
        while (v51 != a10);
      }
    }
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<BOOL>(uint64_t __sz)
{
  if (__sz < 1) {
    return 0;
  }
  size_t v1 = __sz;
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = a2;
    if (a5 == 2)
    {
      unsigned int v10 = a4[-a3];
      unsigned int v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        float v23 = a6;
        uint64_t v24 = a5 >> 1;
        uint64_t v25 = a5;
        uint64_t v26 = a5 - (a5 >> 1);
        unint64_t v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          uint64_t v28 = &v23[v24];
          float v29 = &v23[v25];
          uint64_t v30 = &v23[v24];
          while (v30 != v29)
          {
            unsigned int v31 = *v30;
            unsigned int v32 = *v23;
            BOOL v33 = v31 >= v32;
            if (v31 < v32) {
              unsigned __int8 v34 = 0;
            }
            else {
              unsigned __int8 v34 = *v23;
            }
            if (v33) {
              ++v23;
            }
            if (!v33) {
              ++v30;
            }
            unsigned __int8 *v9 = v34;
            v9 += v12;
            if (v23 == v28)
            {
              while (v30 != v29)
              {
                unsigned __int8 v35 = *v30++;
                unsigned __int8 *v9 = v35;
                v9 += v12;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            unsigned __int8 v36 = *v23++;
            unsigned __int8 *v9 = v36;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        uint64_t v13 = &a2[result];
        if (&a2[result] != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = &a2[-result];
          uint64_t v16 = a2;
          do
          {
            unsigned int v17 = *v16;
            uint64_t v16 = v13;
            unsigned int v18 = *v13;
            if (v18 < v17)
            {
              uint64_t v19 = 0;
              while (1)
              {
                v16[v19] = 1;
                if (v14 == v19) {
                  break;
                }
                unsigned int v20 = v15[v19];
                v19 -= result;
                if (v18 >= v20)
                {
                  int v21 = &v16[v19];
                  goto LABEL_17;
                }
              }
              int v21 = a2;
LABEL_17:
              *int v21 = v18;
            }
            uint64_t v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned char *a4, unsigned int a5, unsigned char *a6)
{
  if (a5)
  {
    int v6 = a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      unsigned int v11 = a4[-a3];
      unsigned int v12 = *a2;
      BOOL v13 = v11 >= v12;
      if (v11 >= v12) {
        LOBYTE(v11) = *a2;
      }
      *a6 = v11;
      int v6 = a6 + 1;
      if (v13) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_9;
    }
    uint64_t v14 = result;
    if ((int)a5 > 8)
    {
      uint64_t v25 = a5 >> 1;
      uint64_t v26 = &a2[result * v25];
      if (v14 * v25)
      {
        unint64_t v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          unsigned int v28 = *v27;
          unsigned int v29 = *v8;
          BOOL v30 = v28 >= v29;
          if (v28 >= v29) {
            char v31 = *v8;
          }
          else {
            char v31 = 0;
          }
          if (v30) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v14;
          }
          v27 += v32;
          if (v30) {
            uint64_t v33 = v14;
          }
          else {
            uint64_t v33 = 0;
          }
          v8 += v33;
          *v6++ = v31;
          if (v8 == v26) {
            goto LABEL_45;
          }
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        unint64_t v27 = &v8[v14 * v25];
LABEL_45:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v15 = &a2[result];
      if (&a2[result] != a4)
      {
        uint64_t v16 = 0;
        unsigned int v17 = a6;
        unsigned int v18 = a6;
        do
        {
          unsigned int v20 = *v18++;
          char v19 = v20;
          unsigned int v21 = *v15;
          if (v21 >= v20)
          {
            *unsigned int v18 = v21;
          }
          else
          {
            v17[1] = v19;
            uint64_t v22 = a6;
            if (v17 != a6)
            {
              uint64_t v23 = v16;
              while (1)
              {
                uint64_t v22 = &a6[v23];
                unsigned int v24 = a6[v23 - 1];
                if (*v15 >= v24) {
                  break;
                }
                unsigned char *v22 = v24;
                if (!--v23)
                {
                  uint64_t v22 = a6;
                  break;
                }
              }
            }
            unsigned char *v22 = *v15;
          }
          v15 += result;
          ++v16;
          unsigned int v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, int a7, int a8, unsigned __int8 *a9, uint64_t a10)
{
  if (!a8) {
    return result;
  }
  unint64_t v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7) {
      return result;
    }
    uint64_t v16 = 0;
    unsigned int v17 = *a4;
    int v18 = -a7;
    while (1)
    {
      unsigned int v19 = a2[v16];
      if (v17 < v19) {
        break;
      }
      v16 += v12;
      BOOL v75 = __CFADD__(v18++, 1);
      if (v75) {
        return result;
      }
    }
    unsigned int v20 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0) {
        int v29 = -v18;
      }
      else {
        int v29 = 1 - v18;
      }
      unsigned int v24 = &a2[v12 * ((uint64_t)v29 >> 1) + v16];
      unint64_t v30 = (a6 - a4) / a5;
      if (v30)
      {
        uint64_t v22 = a4;
        do
        {
          uint64_t v31 = v30 >> 1;
          uint64_t v32 = &v22[a3 * v31];
          unsigned int v33 = *v32;
          unsigned __int8 v34 = &v32[a3];
          LODWORD(v30) = v30 + ~(v30 >> 1);
          if (v33 < *v24) {
            uint64_t v22 = v34;
          }
          else {
            LODWORD(v30) = v31;
          }
        }
        while (v30);
      }
      else
      {
        uint64_t v22 = a4;
      }
      unint64_t v36 = (v29 >> 1);
      unint64_t v35 = (v22 - a4) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v21 = a8;
      }
      else {
        int v21 = a8 + 1;
      }
      uint64_t v22 = &a4[a3 * ((uint64_t)v21 >> 1)];
      unint64_t v23 = (a4 - a2 - v16) / a3;
      if (v23)
      {
        unsigned int v24 = &a2[v16];
        do
        {
          uint64_t v25 = v23 >> 1;
          uint64_t v26 = &v24[v12 * v25];
          unsigned int v27 = *v26;
          unsigned int v28 = &v26[v12];
          LODWORD(v23) = v23 + ~(v23 >> 1);
          if (*v22 < v27) {
            LODWORD(v23) = v25;
          }
          else {
            unsigned int v24 = v28;
          }
        }
        while (v23);
      }
      else
      {
        unsigned int v24 = &a2[v16];
      }
      unint64_t v35 = (v21 >> 1);
      unint64_t v36 = (v24 - a2 - v16) / v12;
    }
    if (v24 != a4 || (uint64_t v37 = v22, v38 = v12, v12 != a3))
    {
      uint64_t v37 = v24;
      unint64_t v38 = v12;
      if (a4 != v22)
      {
        if (&v24[v12] == a4 && v12 == a3)
        {
          uint64_t v39 = 0;
          unsigned __int8 v40 = *v24;
          do
          {
            v24[v39] = a4[v39];
            v39 += v12;
          }
          while (&a4[v39] != v22);
          a4 = &v24[v39];
          v24[v39] = v40;
          unint64_t v38 = v12;
        }
        else
        {
          if (&a4[a3] == v22)
          {
            float v59 = &v22[-a3];
            unsigned __int8 v60 = v22[-a3];
            if (&v22[-a3] == v24)
            {
              a4 = v22;
            }
            else
            {
              uint64_t v61 = 0;
              do
              {
                v59[v61] = v22[v61 + -2 * a3];
                v61 -= a3;
              }
              while (&v59[v61] != v24);
              a4 = &v22[v61];
            }
            *unsigned int v24 = v60;
          }
          else
          {
            unint64_t v41 = (v22 - a4) / a3;
            int v42 = v41;
            unint64_t v43 = (a4 - v24) / a3;
            int v44 = v43;
            if (v43 != v41)
            {
              do
              {
                int v49 = v44;
                int v44 = v42;
                int v42 = v49 % v42;
              }
              while (v42);
              unint64_t v50 = v36;
              unint64_t v51 = v12 * v44;
              if (v51)
              {
                uint64_t v52 = &v24[v51];
                unint64_t v53 = (int)v43 * v12;
                do
                {
                  v52 -= v12;
                  unsigned __int8 v54 = *v52;
                  uint64_t v55 = &v52[v53];
                  uint64_t v56 = v52;
                  do
                  {
                    uint64_t v57 = v55;
                    *uint64_t v56 = *v55;
                    unint64_t v58 = (v22 - v55) / a3;
                    if ((int)v43 >= (int)v58) {
                      uint64_t v55 = &v24[((int)v43 - (int)v58) * v12];
                    }
                    else {
                      uint64_t v55 = &v57[v53];
                    }
                    uint64_t v56 = v57;
                  }
                  while (v55 != v52);
                  *uint64_t v57 = v54;
                }
                while (v52 != v24);
              }
              a4 = &v24[(int)v41 * v12];
              unint64_t v38 = v12;
              unint64_t v36 = v50;
              goto LABEL_74;
            }
            if (v24 != a4)
            {
              unint64_t v45 = v24;
              int v46 = a4;
              do
              {
                unsigned __int8 v47 = *v45;
                *unint64_t v45 = *v46;
                *int v46 = v47;
                v45 += v12;
                v46 += a3;
              }
              while (v45 != a4 && v46 != v22);
            }
          }
          unint64_t v38 = a3;
        }
LABEL_74:
        uint64_t v37 = a4;
      }
    }
    a7 = -(v36 + v18);
    int v62 = a8 - v35;
    uint64_t v90 = a10;
    uint64_t v88 = a10;
    if ((int)v36 + (int)v35 >= a8 - ((int)v36 + (int)v35) - v18)
    {
      unsigned int v89 = v37;
      uint64_t v63 = a9;
      int v62 = v35;
      a7 = v36;
      a3 = v12;
      uint64_t v22 = v24;
      uint64_t v37 = v20;
      a5 = v38;
      a6 = v89;
    }
    else
    {
      uint64_t v63 = a9;
      unint64_t v64 = v12;
      unint64_t v65 = v12;
      uint64_t v66 = v24;
      unint64_t v67 = a5;
      uint64_t v68 = a6;
      a5 = v67;
      a6 = v68;
      unint64_t v12 = v38;
    }
    a8 = v62;
    a2 = v37;
    a4 = v22;
    a9 = v63;
    a10 = v90;
    if (!v62) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v77 = 0;
      unint64_t v78 = a2;
      do
      {
        a9[v77] = *v78;
        v78 += v12;
        ++v77;
      }
      while (v78 != a4);
      if (v77)
      {
        unint64_t v79 = &a9[v77];
        uint64_t v80 = (uint64_t)&a9[v77 - 1];
        while (a4 != a6 || a3 != a5)
        {
          unsigned int v81 = *a4;
          unsigned int v82 = *a9;
          BOOL v83 = v81 >= v82;
          if (v81 < v82) {
            unsigned __int8 v84 = 0;
          }
          else {
            unsigned __int8 v84 = *a9;
          }
          if (v83) {
            ++a9;
          }
          if (v83) {
            unint64_t v85 = 0;
          }
          else {
            unint64_t v85 = a3;
          }
          a4 += v85;
          *a2 = v84;
          a2 += v12;
          if (v79 == a9) {
            return result;
          }
        }
        unint64_t v86 = a9 - 1;
        do
        {
          unsigned __int8 v87 = *++v86;
          *a2 = v87;
          a2 += v12;
        }
        while ((unsigned __int8 *)v80 != v86);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v69 = 0;
    uint64_t v70 = a4;
    do
    {
      a9[v69] = *v70;
      v70 += a3;
      ++v69;
    }
    while (v70 != a6);
    if (v69)
    {
      float v71 = &a9[v69];
      uint64_t v72 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        unsigned int v73 = *(v71 - 1);
        unsigned int v74 = a4[-a3];
        a6 -= a5;
        BOOL v75 = v73 >= v74;
        if (v73 <= v74) {
          LOBYTE(v73) = a4[-a3];
        }
        if (v75) {
          --v71;
        }
        else {
          a4 -= a3;
        }
        *a6 = v73;
        if (v71 == a9) {
          return result;
        }
      }
      do
      {
        unsigned __int8 v76 = *--v71;
        a6[v72] = v76;
        v72 -= a5;
      }
      while (v71 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = a2;
    if (a5 == 2)
    {
      unsigned int v10 = a4[-a3];
      unsigned int v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        uint64_t v22 = a6;
        uint64_t v23 = a5 >> 1;
        uint64_t v24 = a5;
        uint64_t v25 = a5 - (a5 >> 1);
        uint64_t v26 = &a2[result * v23];
        if (a5 <= a7)
        {
          unsigned int v27 = &v22[v23];
          unsigned int v28 = &v22[v24];
          int v29 = &v22[v23];
          while (v29 != v28)
          {
            unsigned int v30 = *v29;
            if (v30 < *v22) {
              ++v29;
            }
            else {
              LOBYTE(v30) = *v22++;
            }
            unsigned __int8 *v9 = v30;
            v9 += v12;
            if (v22 == v27)
            {
              while (v29 != v28)
              {
                unsigned __int8 v31 = *v29++;
                unsigned __int8 *v9 = v31;
                v9 += v12;
              }
              return result;
            }
          }
          while (v22 != v27)
          {
            unsigned __int8 v32 = *v22++;
            unsigned __int8 *v9 = v32;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        BOOL v13 = &a2[result];
        if (&a2[result] != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = &a2[-result];
          uint64_t v16 = a2;
          do
          {
            unsigned int v17 = *v16;
            uint64_t v16 = v13;
            unsigned int v18 = *v13;
            if (v18 < v17)
            {
              uint64_t v19 = 0;
              while (1)
              {
                v16[v19] = v17;
                if (v14 == v19) {
                  break;
                }
                unsigned int v17 = v15[v19];
                v19 -= result;
                if (v18 >= v17)
                {
                  unsigned int v20 = &v16[v19];
                  goto LABEL_17;
                }
              }
              unsigned int v20 = a2;
LABEL_17:
              *unsigned int v20 = v18;
            }
            BOOL v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned char *a4, unsigned int a5, unsigned char *a6)
{
  if (a5)
  {
    int v6 = a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      unsigned int v11 = a4[-a3];
      unsigned int v12 = *a2;
      BOOL v13 = v11 >= v12;
      if (v11 >= v12) {
        LOBYTE(v11) = *a2;
      }
      *a6 = v11;
      int v6 = a6 + 1;
      if (v13) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_9;
    }
    uint64_t v14 = result;
    if ((int)a5 > 8)
    {
      uint64_t v25 = a5 >> 1;
      uint64_t v26 = &a2[result * v25];
      if (v14 * v25)
      {
        unsigned int v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          unsigned int v28 = *v27;
          unsigned int v29 = *v8;
          BOOL v30 = v28 >= v29;
          if (v28 < v29)
          {
            uint64_t v31 = v14;
          }
          else
          {
            LOBYTE(v28) = *v8;
            uint64_t v31 = 0;
          }
          v27 += v31;
          if (v30) {
            uint64_t v32 = v14;
          }
          else {
            uint64_t v32 = 0;
          }
          v8 += v32;
          *v6++ = v28;
          if (v8 == v26) {
            goto LABEL_42;
          }
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        unsigned int v27 = &v8[v14 * v25];
LABEL_42:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v15 = &a2[result];
      if (&a2[result] != a4)
      {
        uint64_t v16 = 0;
        unsigned int v17 = a6;
        unsigned int v18 = a6;
        do
        {
          unsigned int v20 = *v18++;
          char v19 = v20;
          unsigned int v21 = *v15;
          if (v21 >= v20)
          {
            *unsigned int v18 = v21;
          }
          else
          {
            v17[1] = v19;
            uint64_t v22 = a6;
            if (v17 != a6)
            {
              uint64_t v23 = v16;
              while (1)
              {
                uint64_t v22 = &a6[v23];
                unsigned int v24 = a6[v23 - 1];
                if (*v15 >= v24) {
                  break;
                }
                unsigned char *v22 = v24;
                if (!--v23)
                {
                  uint64_t v22 = a6;
                  break;
                }
              }
            }
            unsigned char *v22 = *v15;
          }
          v15 += result;
          ++v16;
          unsigned int v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, int a7, int a8, unsigned __int8 *a9, uint64_t a10)
{
  if (!a8) {
    return result;
  }
  unint64_t v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7) {
      return result;
    }
    uint64_t v16 = 0;
    unsigned int v17 = *a4;
    int v18 = -a7;
    while (1)
    {
      unsigned int v19 = a2[v16];
      if (v17 < v19) {
        break;
      }
      v16 += v12;
      BOOL v75 = __CFADD__(v18++, 1);
      if (v75) {
        return result;
      }
    }
    unsigned int v20 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0) {
        int v29 = -v18;
      }
      else {
        int v29 = 1 - v18;
      }
      unsigned int v24 = &a2[v12 * ((uint64_t)v29 >> 1) + v16];
      unint64_t v30 = (a6 - a4) / a5;
      if (v30)
      {
        uint64_t v22 = a4;
        do
        {
          uint64_t v31 = v30 >> 1;
          uint64_t v32 = &v22[a3 * v31];
          unsigned int v33 = *v32;
          unsigned __int8 v34 = &v32[a3];
          LODWORD(v30) = v30 + ~(v30 >> 1);
          if (v33 < *v24) {
            uint64_t v22 = v34;
          }
          else {
            LODWORD(v30) = v31;
          }
        }
        while (v30);
      }
      else
      {
        uint64_t v22 = a4;
      }
      unint64_t v36 = (v29 >> 1);
      unint64_t v35 = (v22 - a4) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v21 = a8;
      }
      else {
        int v21 = a8 + 1;
      }
      uint64_t v22 = &a4[a3 * ((uint64_t)v21 >> 1)];
      unint64_t v23 = (a4 - a2 - v16) / a3;
      if (v23)
      {
        unsigned int v24 = &a2[v16];
        do
        {
          uint64_t v25 = v23 >> 1;
          uint64_t v26 = &v24[v12 * v25];
          unsigned int v27 = *v26;
          unsigned int v28 = &v26[v12];
          LODWORD(v23) = v23 + ~(v23 >> 1);
          if (*v22 < v27) {
            LODWORD(v23) = v25;
          }
          else {
            unsigned int v24 = v28;
          }
        }
        while (v23);
      }
      else
      {
        unsigned int v24 = &a2[v16];
      }
      unint64_t v35 = (v21 >> 1);
      unint64_t v36 = (v24 - a2 - v16) / v12;
    }
    if (v24 != a4 || (uint64_t v37 = v22, v38 = v12, v12 != a3))
    {
      uint64_t v37 = v24;
      unint64_t v38 = v12;
      if (a4 != v22)
      {
        if (&v24[v12] == a4 && v12 == a3)
        {
          uint64_t v39 = 0;
          unsigned __int8 v40 = *v24;
          do
          {
            v24[v39] = a4[v39];
            v39 += v12;
          }
          while (&a4[v39] != v22);
          a4 = &v24[v39];
          v24[v39] = v40;
          unint64_t v38 = v12;
        }
        else
        {
          if (&a4[a3] == v22)
          {
            float v59 = &v22[-a3];
            unsigned __int8 v60 = v22[-a3];
            if (&v22[-a3] == v24)
            {
              a4 = v22;
            }
            else
            {
              uint64_t v61 = 0;
              do
              {
                v59[v61] = v22[v61 + -2 * a3];
                v61 -= a3;
              }
              while (&v59[v61] != v24);
              a4 = &v22[v61];
            }
            *unsigned int v24 = v60;
          }
          else
          {
            unint64_t v41 = (v22 - a4) / a3;
            int v42 = v41;
            unint64_t v43 = (a4 - v24) / a3;
            int v44 = v43;
            if (v43 != v41)
            {
              do
              {
                int v49 = v44;
                int v44 = v42;
                int v42 = v49 % v42;
              }
              while (v42);
              unint64_t v50 = v36;
              unint64_t v51 = v12 * v44;
              if (v51)
              {
                uint64_t v52 = &v24[v51];
                unint64_t v53 = (int)v43 * v12;
                do
                {
                  v52 -= v12;
                  unsigned __int8 v54 = *v52;
                  uint64_t v55 = &v52[v53];
                  uint64_t v56 = v52;
                  do
                  {
                    uint64_t v57 = v55;
                    *uint64_t v56 = *v55;
                    unint64_t v58 = (v22 - v55) / a3;
                    if ((int)v43 >= (int)v58) {
                      uint64_t v55 = &v24[((int)v43 - (int)v58) * v12];
                    }
                    else {
                      uint64_t v55 = &v57[v53];
                    }
                    uint64_t v56 = v57;
                  }
                  while (v55 != v52);
                  *uint64_t v57 = v54;
                }
                while (v52 != v24);
              }
              a4 = &v24[(int)v41 * v12];
              unint64_t v38 = v12;
              unint64_t v36 = v50;
              goto LABEL_74;
            }
            if (v24 != a4)
            {
              unint64_t v45 = v24;
              int v46 = a4;
              do
              {
                unsigned __int8 v47 = *v45;
                *unint64_t v45 = *v46;
                *int v46 = v47;
                v45 += v12;
                v46 += a3;
              }
              while (v45 != a4 && v46 != v22);
            }
          }
          unint64_t v38 = a3;
        }
LABEL_74:
        uint64_t v37 = a4;
      }
    }
    a7 = -(v36 + v18);
    int v62 = a8 - v35;
    uint64_t v87 = a10;
    uint64_t v85 = a10;
    if ((int)v36 + (int)v35 >= a8 - ((int)v36 + (int)v35) - v18)
    {
      unint64_t v86 = v37;
      uint64_t v63 = a9;
      int v62 = v35;
      a7 = v36;
      a3 = v12;
      uint64_t v22 = v24;
      uint64_t v37 = v20;
      a5 = v38;
      a6 = v86;
    }
    else
    {
      uint64_t v63 = a9;
      unint64_t v64 = v12;
      unint64_t v65 = v12;
      uint64_t v66 = v24;
      unint64_t v67 = a5;
      uint64_t v68 = a6;
      a5 = v67;
      a6 = v68;
      unint64_t v12 = v38;
    }
    a8 = v62;
    a2 = v37;
    a4 = v22;
    a9 = v63;
    a10 = v87;
    if (!v62) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v77 = 0;
      unint64_t v78 = a2;
      do
      {
        a9[v77] = *v78;
        v78 += v12;
        ++v77;
      }
      while (v78 != a4);
      if (v77)
      {
        unint64_t v79 = &a9[v77];
        uint64_t v80 = (uint64_t)&a9[v77 - 1];
        while (a4 != a6 || a3 != a5)
        {
          unsigned int v81 = *a4;
          if (v81 < *a9)
          {
            unint64_t v82 = a3;
          }
          else
          {
            LOBYTE(v81) = *a9++;
            unint64_t v82 = 0;
          }
          a4 += v82;
          *a2 = v81;
          a2 += v12;
          if (v79 == a9) {
            return result;
          }
        }
        BOOL v83 = a9 - 1;
        do
        {
          unsigned __int8 v84 = *++v83;
          *a2 = v84;
          a2 += v12;
        }
        while ((unsigned __int8 *)v80 != v83);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v69 = 0;
    uint64_t v70 = a4;
    do
    {
      a9[v69] = *v70;
      v70 += a3;
      ++v69;
    }
    while (v70 != a6);
    if (v69)
    {
      float v71 = &a9[v69];
      uint64_t v72 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        unsigned int v73 = *(v71 - 1);
        unsigned int v74 = a4[-a3];
        a6 -= a5;
        BOOL v75 = v73 >= v74;
        if (v73 <= v74) {
          LOBYTE(v73) = a4[-a3];
        }
        if (v75) {
          --v71;
        }
        else {
          a4 -= a3;
        }
        *a6 = v73;
        if (v71 == a9) {
          return result;
        }
      }
      do
      {
        unsigned __int8 v76 = *--v71;
        a6[v72] = v76;
        v72 -= a5;
      }
      while (v71 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, unsigned int a5, unsigned int *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = (int *)a2;
    if (a5 == 2)
    {
      unsigned int v10 = a4[-a3];
      unsigned int v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        unint64_t v23 = (int *)a6;
        uint64_t v24 = a5 >> 1;
        uint64_t v25 = a5;
        uint64_t v26 = a5 - (a5 >> 1);
        unsigned int v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          unsigned int v28 = (unsigned int *)&v23[v24];
          uint64_t v29 = 4 * v12;
          unint64_t v30 = (int *)v28;
          uint64_t v31 = &v23[v25];
          while (v30 != v31)
          {
            int v32 = *v30;
            BOOL v33 = *v30 < *v23;
            if (*v30 >= *v23) {
              int v32 = *v23;
            }
            v23 += *v30 >= *v23;
            v30 += v33;
            int *v9 = v32;
            int v9 = (int *)((char *)v9 + v29);
            if (v23 == (int *)v28)
            {
              while (v30 != v31)
              {
                int v34 = *v30++;
                int *v9 = v34;
                int v9 = (int *)((char *)v9 + v29);
              }
              return result;
            }
          }
          while (v23 != (int *)v28)
          {
            int v35 = *v23++;
            int *v9 = v35;
            int v9 = (int *)((char *)v9 + v29);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        BOOL v13 = &a2[result];
        if (v13 != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 4 * result;
          uint64_t v16 = a2;
          unsigned int v17 = &a2[-result];
          do
          {
            unsigned int v18 = *v16;
            uint64_t v16 = v13;
            unsigned int v19 = *v13;
            if (v19 < v18)
            {
              uint64_t v20 = 0;
              while (1)
              {
                *(unsigned int *)((char *)v16 + v20) = v18;
                if (v14 == v20) {
                  break;
                }
                unsigned int v18 = *(unsigned int *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  int v21 = (unsigned int *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              int v21 = a2;
LABEL_17:
              *int v21 = v19;
            }
            BOOL v13 = &v16[(unint64_t)v15 / 4];
            unsigned int v17 = (unsigned int *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 4] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, unsigned int a5, unsigned int *a6)
{
  if (a5)
  {
    int v6 = (int *)a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      unsigned int v11 = a4[-a3];
      BOOL v12 = v11 >= *a2;
      if (v11 >= *a2) {
        unsigned int v11 = *a2;
      }
      *a6 = v11;
      int v6 = (int *)(a6 + 1);
      if (v12) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_9;
    }
    uint64_t v13 = result;
    if ((int)a5 > 8)
    {
      uint64_t v23 = a5 >> 1;
      uint64_t v24 = &a2[result * v23];
      if (v13 * v23)
      {
        uint64_t v25 = (int *)&v8[v13 * v23];
        while (v25 != (int *)a4 || v13 != a3)
        {
          int v26 = *v25;
          BOOL v27 = *v25 >= *v8;
          if (*v25 < *v8)
          {
            uint64_t v28 = v13;
          }
          else
          {
            int v26 = *v8;
            uint64_t v28 = 0;
          }
          v25 += v28;
          if (v27) {
            uint64_t v29 = v13;
          }
          else {
            uint64_t v29 = 0;
          }
          v8 += v29;
          *v6++ = v26;
          if (v8 == v24) {
            goto LABEL_38;
          }
        }
        for (; v8 != v24; v8 += v13)
          *v6++ = *v8;
      }
      else
      {
        uint64_t v25 = (int *)&v8[v13 * v23];
LABEL_38:
        while (v25 != (int *)a4)
        {
          *v6++ = *v25;
          v25 += v13;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v14 = &a2[result];
      if (v14 != a4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = a6;
        unsigned int v17 = a6;
        do
        {
          unsigned int v19 = *v17++;
          unsigned int v18 = v19;
          if (*v14 >= v19)
          {
            *unsigned int v17 = *v14;
          }
          else
          {
            v16[1] = v18;
            uint64_t v20 = a6;
            if (v16 != a6)
            {
              uint64_t v21 = v15;
              while (1)
              {
                uint64_t v20 = (unsigned int *)((char *)a6 + v21);
                unsigned int v22 = *(unsigned int *)((char *)a6 + v21 - 4);
                if (*v14 >= v22) {
                  break;
                }
                *uint64_t v20 = v22;
                v21 -= 4;
                if (!v21)
                {
                  uint64_t v20 = a6;
                  break;
                }
              }
            }
            *uint64_t v20 = *v14;
          }
          v14 += result;
          v15 += 4;
          uint64_t v16 = v17;
        }
        while (v14 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, int a7, int a8, int *a9, uint64_t a10)
{
  if (a8)
  {
    int v10 = a8;
    LODWORD(v11) = a7;
    unint64_t v13 = result;
    while (v10 > a10 && (int)v11 > a10)
    {
      if (!v11) {
        return result;
      }
      uint64_t v17 = 0;
      unsigned int v18 = *a4;
      int v19 = -(int)v11;
      while (1)
      {
        unsigned int v20 = a2[v17];
        if (v18 < v20) {
          break;
        }
        v17 += v13;
        BOOL v48 = __CFADD__(v19++, 1);
        if (v48) {
          return result;
        }
      }
      uint64_t v21 = &a2[v17];
      unint64_t v62 = a5;
      uint64_t v63 = a6;
      uint64_t v65 = a10;
      uint64_t v66 = a9;
      unsigned __int8 v60 = &a2[v17];
      if (-v19 >= v10)
      {
        if (v19 == -1)
        {
          a2[v17] = v18;
          *a4 = v20;
          return result;
        }
        if (v19 <= 0) {
          int v30 = -v19;
        }
        else {
          int v30 = 1 - v19;
        }
        uint64_t v21 = &a2[v13 * ((uint64_t)v30 >> 1) + v17];
        unint64_t v31 = (a6 - a4) / a5;
        if (v31)
        {
          uint64_t v23 = a4;
          do
          {
            uint64_t v32 = v31 >> 1;
            BOOL v33 = &v23[a3 * v32];
            unsigned int v34 = *v33;
            int v35 = &v33[a3];
            LODWORD(v31) = v31 + ~(v31 >> 1);
            if (v34 < *v21) {
              uint64_t v23 = v35;
            }
            else {
              LODWORD(v31) = v32;
            }
          }
          while (v31);
        }
        else
        {
          uint64_t v23 = a4;
        }
        unint64_t v29 = (v30 >> 1);
        unint64_t v64 = (v23 - a4) / a3;
      }
      else
      {
        if (v10 >= 0) {
          int v22 = v10;
        }
        else {
          int v22 = v10 + 1;
        }
        uint64_t v23 = &a4[a3 * ((uint64_t)v22 >> 1)];
        unint64_t v24 = (((char *)a4 - (char *)a2 - v17 * 4) >> 2) / a3;
        while (v24)
        {
          uint64_t v25 = v24 >> 1;
          int v26 = &v21[v13 * v25];
          unsigned int v27 = *v26;
          uint64_t v28 = &v26[v13];
          LODWORD(v24) = v24 + ~(v24 >> 1);
          if (*v23 < v27) {
            LODWORD(v24) = v25;
          }
          else {
            uint64_t v21 = v28;
          }
        }
        unint64_t v64 = (v22 >> 1);
        unint64_t v29 = (((char *)v21 - (char *)a2 - v17 * 4) >> 2) / v13;
      }
      uint64_t v11 = -(v29 + v19);
      unint64_t v61 = a3;
      if ((int)v29 + (int)v64 >= v10 - ((int)v29 + (int)v64) - v19)
      {
        unsigned __int8 v40 = v68;
        unint64_t v41 = v67;
        uint64_t v23 = v21;
        a3 = v13;
        a2 = v60;
        int v39 = v64;
        LODWORD(v11) = v29;
        a5 = v41;
        a6 = v40;
      }
      else
      {
        unint64_t v36 = &a2[v17];
        unint64_t v37 = v13;
        unint64_t v38 = v13;
        unint64_t v13 = v67;
        a2 = v68;
        a5 = v62;
        a6 = v63;
        a3 = v61;
        int v39 = v10 - v64;
      }
      int v10 = v39;
      a4 = v23;
      a10 = v65;
      a9 = v66;
      if (!v39) {
        return result;
      }
    }
    if ((int)v11 <= v10)
    {
      if (a2 != a4)
      {
        uint64_t v49 = 0;
        uint64_t v50 = 4 * v13;
        unint64_t v51 = a2;
        do
        {
          a9[v49++] = *v51;
          unint64_t v51 = (int *)((char *)v51 + v50);
        }
        while (v51 != a4);
        if (v49 * 4)
        {
          uint64_t v52 = &a9[v49];
          uint64_t v53 = (uint64_t)&a9[v49 - 1];
          while (a4 != a6 || a3 != a5)
          {
            int v54 = *a4;
            BOOL v55 = *a4 >= *a9;
            if (*a4 >= *a9) {
              int v54 = *a9;
            }
            a9 += *a4 >= *a9;
            if (v55) {
              unint64_t v56 = 0;
            }
            else {
              unint64_t v56 = a3;
            }
            a4 += v56;
            *a2 = v54;
            a2 = (int *)((char *)a2 + v50);
            if (v52 == a9) {
              return result;
            }
          }
          unint64_t v58 = a9 - 1;
          do
          {
            int v59 = v58[1];
            ++v58;
            *a2 = v59;
            a2 = (int *)((char *)a2 + v50);
          }
          while ((int *)v53 != v58);
        }
      }
    }
    else if (a4 != a6)
    {
      uint64_t v42 = 0;
      unint64_t v43 = a4;
      do
      {
        a9[v42++] = *v43;
        v43 += a3;
      }
      while (v43 != a6);
      if (v42 * 4)
      {
        int v44 = &a9[v42];
        uint64_t v45 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != v13)
        {
          unsigned int v46 = *(v44 - 1);
          unsigned int v47 = a4[-a3];
          a6 -= a5;
          BOOL v48 = v46 >= v47;
          if (v46 <= v47) {
            unsigned int v46 = a4[-a3];
          }
          if (v48) {
            --v44;
          }
          else {
            a4 -= a3;
          }
          *a6 = v46;
          if (v44 == a9) {
            return result;
          }
        }
        do
        {
          int v57 = *--v44;
          a6[v45] = v57;
          v45 -= a5;
        }
        while (v44 != a9);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unsigned int a5, char *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = a2;
    if (a5 == 2)
    {
      int v10 = a4[-a3];
      int v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        int v22 = a6;
        uint64_t v23 = a5 >> 1;
        uint64_t v24 = a5;
        uint64_t v25 = a5 - (a5 >> 1);
        int v26 = &a2[result * v23];
        if (a5 <= a7)
        {
          unsigned int v27 = &v22[v23];
          uint64_t v28 = &v22[v24];
          unint64_t v29 = &v22[v23];
          while (v29 != v28)
          {
            int v30 = *v29;
            if (v30 < *v22) {
              ++v29;
            }
            else {
              LOBYTE(v30) = *v22++;
            }
            char *v9 = v30;
            v9 += v12;
            if (v22 == v27)
            {
              while (v29 != v28)
              {
                char v31 = *v29++;
                char *v9 = v31;
                v9 += v12;
              }
              return result;
            }
          }
          while (v22 != v27)
          {
            char v32 = *v22++;
            char *v9 = v32;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        unint64_t v13 = &a2[result];
        if (&a2[result] != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = &a2[-result];
          uint64_t v16 = a2;
          do
          {
            int v17 = *v16;
            uint64_t v16 = v13;
            int v18 = *v13;
            if (v18 < v17)
            {
              uint64_t v19 = 0;
              while (1)
              {
                v16[v19] = v17;
                if (v14 == v19) {
                  break;
                }
                int v17 = v15[v19];
                v19 -= result;
                if (v18 >= v17)
                {
                  unsigned int v20 = &v16[v19];
                  goto LABEL_17;
                }
              }
              unsigned int v20 = a2;
LABEL_17:
              *unsigned int v20 = v18;
            }
            unint64_t v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned char *a4, unsigned int a5, unsigned char *a6)
{
  if (a5)
  {
    int v6 = a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      int v11 = (char)a4[-a3];
      int v12 = (char)*a2;
      BOOL v13 = v11 < v12;
      if (v11 >= v12) {
        LOBYTE(v11) = *a2;
      }
      *a6 = v11;
      int v6 = a6 + 1;
      if (!v13) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_8;
    }
    uint64_t v14 = result;
    if ((int)a5 > 8)
    {
      uint64_t v25 = a5 >> 1;
      int v26 = &a2[result * v25];
      if (v14 * v25)
      {
        unsigned int v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          int v28 = (char)*v27;
          int v29 = (char)*v8;
          BOOL v30 = v28 < v29;
          if (v28 < v29)
          {
            uint64_t v31 = v14;
          }
          else
          {
            LOBYTE(v28) = *v8;
            uint64_t v31 = 0;
          }
          v27 += v31;
          if (v30) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v14;
          }
          v8 += v32;
          *v6++ = v28;
          if (v8 == v26) {
            goto LABEL_41;
          }
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        unsigned int v27 = &v8[v14 * v25];
LABEL_41:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v15 = &a2[result];
      if (&a2[result] != a4)
      {
        uint64_t v16 = 0;
        int v17 = a6;
        int v18 = a6;
        do
        {
          int v20 = (char)*v18++;
          char v19 = v20;
          int v21 = (char)*v15;
          if (v21 >= v20)
          {
            *int v18 = v21;
          }
          else
          {
            v17[1] = v19;
            int v22 = a6;
            if (v17 != a6)
            {
              uint64_t v23 = v16;
              while (1)
              {
                int v22 = &a6[v23];
                int v24 = (char)a6[v23 - 1];
                if ((char)*v15 >= v24) {
                  break;
                }
                unsigned char *v22 = v24;
                if (!--v23)
                {
                  int v22 = a6;
                  break;
                }
              }
            }
            unsigned char *v22 = *v15;
          }
          v15 += result;
          ++v16;
          int v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, char *a9, uint64_t a10)
{
  if (!a8) {
    return result;
  }
  unint64_t v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7) {
      return result;
    }
    uint64_t v16 = 0;
    int v17 = *a4;
    int v18 = -a7;
    while (1)
    {
      int v19 = a2[v16];
      if (v17 < v19) {
        break;
      }
      v16 += v12;
      if (__CFADD__(v18++, 1)) {
        return result;
      }
    }
    int v21 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0) {
        int v30 = -v18;
      }
      else {
        int v30 = 1 - v18;
      }
      uint64_t v25 = &a2[v12 * ((uint64_t)v30 >> 1) + v16];
      unint64_t v31 = (a6 - a4) / a5;
      if (v31)
      {
        uint64_t v23 = a4;
        do
        {
          uint64_t v32 = v31 >> 1;
          BOOL v33 = &v23[a3 * v32];
          int v34 = *v33;
          int v35 = &v33[a3];
          LODWORD(v31) = v31 + ~(v31 >> 1);
          if (v34 < *v25) {
            uint64_t v23 = v35;
          }
          else {
            LODWORD(v31) = v32;
          }
        }
        while (v31);
      }
      else
      {
        uint64_t v23 = a4;
      }
      unint64_t v37 = (v30 >> 1);
      unint64_t v36 = (v23 - a4) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v22 = a8;
      }
      else {
        int v22 = a8 + 1;
      }
      uint64_t v23 = &a4[a3 * ((uint64_t)v22 >> 1)];
      unint64_t v24 = (a4 - a2 - v16) / a3;
      if (v24)
      {
        uint64_t v25 = &a2[v16];
        do
        {
          uint64_t v26 = v24 >> 1;
          unsigned int v27 = &v25[v12 * v26];
          int v28 = *v27;
          int v29 = &v27[v12];
          LODWORD(v24) = v24 + ~(v24 >> 1);
          if (*v23 < v28) {
            LODWORD(v24) = v26;
          }
          else {
            uint64_t v25 = v29;
          }
        }
        while (v24);
      }
      else
      {
        uint64_t v25 = &a2[v16];
      }
      unint64_t v36 = (v22 >> 1);
      unint64_t v37 = (v25 - a2 - v16) / v12;
    }
    if (v25 != a4 || (v38 = v23, unint64_t v39 = v12, v12 != a3))
    {
      unint64_t v38 = v25;
      unint64_t v39 = v12;
      if (a4 != v23)
      {
        if (&v25[v12] == a4 && v12 == a3)
        {
          uint64_t v40 = 0;
          char v41 = *v25;
          do
          {
            v25[v40] = a4[v40];
            v40 += v12;
          }
          while (&a4[v40] != v23);
          a4 = &v25[v40];
          v25[v40] = v41;
          unint64_t v39 = v12;
        }
        else
        {
          if (&a4[a3] == v23)
          {
            unsigned __int8 v60 = &v23[-a3];
            char v61 = v23[-a3];
            if (&v23[-a3] == v25)
            {
              a4 = v23;
            }
            else
            {
              uint64_t v62 = 0;
              do
              {
                v60[v62] = v23[v62 + -2 * a3];
                v62 -= a3;
              }
              while (&v60[v62] != v25);
              a4 = &v23[v62];
            }
            *uint64_t v25 = v61;
          }
          else
          {
            unint64_t v42 = (v23 - a4) / a3;
            int v43 = v42;
            unint64_t v44 = (a4 - v25) / a3;
            int v45 = v44;
            if (v44 != v42)
            {
              do
              {
                int v50 = v45;
                int v45 = v43;
                int v43 = v50 % v43;
              }
              while (v43);
              unint64_t v51 = v37;
              unint64_t v52 = v12 * v45;
              if (v52)
              {
                uint64_t v53 = &v25[v52];
                unint64_t v54 = (int)v44 * v12;
                do
                {
                  v53 -= v12;
                  char v55 = *v53;
                  unint64_t v56 = &v53[v54];
                  int v57 = v53;
                  do
                  {
                    unint64_t v58 = v56;
                    *int v57 = *v56;
                    unint64_t v59 = (v23 - v56) / a3;
                    if ((int)v44 >= (int)v59) {
                      unint64_t v56 = &v25[((int)v44 - (int)v59) * v12];
                    }
                    else {
                      unint64_t v56 = &v58[v54];
                    }
                    int v57 = v58;
                  }
                  while (v56 != v53);
                  *unint64_t v58 = v55;
                }
                while (v53 != v25);
              }
              a4 = &v25[(int)v42 * v12];
              unint64_t v39 = v12;
              unint64_t v37 = v51;
              goto LABEL_74;
            }
            if (v25 != a4)
            {
              unsigned int v46 = v25;
              unsigned int v47 = a4;
              do
              {
                char v48 = *v46;
                *unsigned int v46 = *v47;
                *unsigned int v47 = v48;
                v46 += v12;
                v47 += a3;
              }
              while (v46 != a4 && v47 != v23);
            }
          }
          unint64_t v39 = a3;
        }
LABEL_74:
        unint64_t v38 = a4;
      }
    }
    a7 = -(v37 + v18);
    int v63 = a8 - v36;
    uint64_t v88 = a10;
    uint64_t v86 = a10;
    if ((int)v37 + (int)v36 >= a8 - ((int)v37 + (int)v36) - v18)
    {
      uint64_t v87 = v38;
      unint64_t v64 = a9;
      int v63 = v36;
      a7 = v37;
      a3 = v12;
      uint64_t v23 = v25;
      unint64_t v38 = v21;
      a5 = v39;
      a6 = v87;
    }
    else
    {
      unint64_t v64 = a9;
      unint64_t v65 = v12;
      unint64_t v66 = v12;
      unint64_t v67 = v25;
      unint64_t v68 = a5;
      uint64_t v69 = a6;
      a5 = v68;
      a6 = v69;
      unint64_t v12 = v39;
    }
    a8 = v63;
    a2 = v38;
    a4 = v23;
    a9 = v64;
    a10 = v88;
    if (!v63) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v78 = 0;
      unint64_t v79 = a2;
      do
      {
        a9[v78] = *v79;
        v79 += v12;
        ++v78;
      }
      while (v79 != a4);
      if (v78)
      {
        uint64_t v80 = &a9[v78];
        uint64_t v81 = (uint64_t)&a9[v78 - 1];
        while (a4 != a6 || a3 != a5)
        {
          int v82 = *a4;
          if (v82 < *a9)
          {
            unint64_t v83 = a3;
          }
          else
          {
            LOBYTE(v82) = *a9++;
            unint64_t v83 = 0;
          }
          a4 += v83;
          *a2 = v82;
          a2 += v12;
          if (v80 == a9) {
            return result;
          }
        }
        unsigned __int8 v84 = a9 - 1;
        do
        {
          char v85 = *++v84;
          *a2 = v85;
          a2 += v12;
        }
        while ((char *)v81 != v84);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v70 = 0;
    float v71 = a4;
    do
    {
      a9[v70] = *v71;
      v71 += a3;
      ++v70;
    }
    while (v71 != a6);
    if (v70)
    {
      uint64_t v72 = &a9[v70];
      uint64_t v73 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        int v74 = *(v72 - 1);
        int v75 = a4[-a3];
        a6 -= a5;
        BOOL v76 = v74 < v75;
        if (v74 <= v75) {
          LOBYTE(v74) = a4[-a3];
        }
        if (v76) {
          a4 -= a3;
        }
        else {
          --v72;
        }
        *a6 = v74;
        if (v72 == a9) {
          return result;
        }
      }
      do
      {
        char v77 = *--v72;
        a6[v73] = v77;
        v73 -= a5;
      }
      while (v72 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<int,int>>(uint64_t result, int *a2, unint64_t a3, int *a4, unsigned int a5, int *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = (char *)a2;
    if (a5 == 2)
    {
      int v10 = a4[-a3];
      int v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        uint64_t v23 = a6;
        uint64_t v24 = a5 >> 1;
        uint64_t v25 = a5;
        uint64_t v26 = a5 - (a5 >> 1);
        unsigned int v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          int v28 = &v23[v24];
          uint64_t v29 = 4 * v12;
          int v30 = v28;
          unint64_t v31 = &v23[v25];
          while (v30 != v31)
          {
            int v32 = *v30;
            BOOL v33 = *v30 < *v23;
            if (*v30 >= *v23) {
              int v32 = *v23;
            }
            v23 += *v30 >= *v23;
            v30 += v33;
            *(_DWORD *)int v9 = v32;
            v9 += v29;
            if (v23 == v28)
            {
              while (v30 != v31)
              {
                int v34 = *v30++;
                *(_DWORD *)int v9 = v34;
                v9 += v29;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            int v35 = *v23++;
            *(_DWORD *)int v9 = v35;
            v9 += v29;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        BOOL v13 = &a2[result];
        if (v13 != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 4 * result;
          uint64_t v16 = a2;
          int v17 = &a2[-result];
          do
          {
            int v18 = *v16;
            uint64_t v16 = v13;
            int v19 = *v13;
            if (v19 < v18)
            {
              uint64_t v20 = 0;
              while (1)
              {
                *(int *)((char *)v16 + v20) = v18;
                if (v14 == v20) {
                  break;
                }
                int v18 = *(int *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  int v21 = (int *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              int v21 = a2;
LABEL_17:
              *int v21 = v19;
            }
            BOOL v13 = &v16[(unint64_t)v15 / 4];
            int v17 = (int *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 4] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<int,int>>(uint64_t result, int *a2, uint64_t a3, int *a4, unsigned int a5, int *a6)
{
  if (a5)
  {
    int v6 = a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      int v11 = a4[-a3];
      BOOL v12 = v11 < *a2;
      if (v11 >= *a2) {
        int v11 = *a2;
      }
      *a6 = v11;
      int v6 = a6 + 1;
      if (!v12) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_8;
    }
    uint64_t v13 = result;
    if ((int)a5 > 8)
    {
      uint64_t v23 = a5 >> 1;
      uint64_t v24 = &a2[result * v23];
      if (v13 * v23)
      {
        uint64_t v25 = &v8[v13 * v23];
        while (v25 != a4 || v13 != a3)
        {
          int v26 = *v25;
          BOOL v27 = *v25 < *v8;
          if (*v25 < *v8)
          {
            uint64_t v28 = v13;
          }
          else
          {
            int v26 = *v8;
            uint64_t v28 = 0;
          }
          v25 += v28;
          if (v27) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v13;
          }
          v8 += v29;
          *v6++ = v26;
          if (v8 == v24) {
            goto LABEL_37;
          }
        }
        for (; v8 != v24; v8 += v13)
          *v6++ = *v8;
      }
      else
      {
        uint64_t v25 = &v8[v13 * v23];
LABEL_37:
        while (v25 != a4)
        {
          *v6++ = *v25;
          v25 += v13;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v14 = &a2[result];
      if (v14 != a4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = a6;
        int v17 = a6;
        do
        {
          int v19 = *v17++;
          int v18 = v19;
          if (*v14 >= v19)
          {
            *int v17 = *v14;
          }
          else
          {
            v16[1] = v18;
            uint64_t v20 = a6;
            if (v16 != a6)
            {
              uint64_t v21 = v15;
              while (1)
              {
                uint64_t v20 = (int *)((char *)a6 + v21);
                int v22 = *(int *)((char *)a6 + v21 - 4);
                if (*v14 >= v22) {
                  break;
                }
                *uint64_t v20 = v22;
                v21 -= 4;
                if (!v21)
                {
                  uint64_t v20 = a6;
                  break;
                }
              }
            }
            *uint64_t v20 = *v14;
          }
          v14 += result;
          v15 += 4;
          uint64_t v16 = v17;
        }
        while (v14 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<int,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, _DWORD *a9, uint64_t a10)
{
  if (!a8) {
    return result;
  }
  unint64_t v13 = result;
  uint64_t result = 0xFFFFFFFFLL;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7) {
      return result;
    }
    uint64_t v17 = 0;
    int v18 = *(_DWORD *)a4;
    int v19 = -a7;
    uint64_t v20 = 4 * v13;
    while (1)
    {
      int v21 = *(_DWORD *)&a2[v17];
      if (v18 < v21) {
        break;
      }
      v17 += v20;
      if (__CFADD__(v19++, 1)) {
        return result;
      }
    }
    uint64_t v23 = &a2[v17];
    if (-v19 >= a8)
    {
      if (v19 == -1)
      {
        *(_DWORD *)&a2[v17] = v18;
        *(_DWORD *)a4 = v21;
        return result;
      }
      if (v19 <= 0) {
        int v32 = -v19;
      }
      else {
        int v32 = 1 - v19;
      }
      BOOL v27 = &a2[4 * v13 * ((uint64_t)v32 >> 1) + v17];
      unint64_t v33 = ((a6 - a4) >> 2) / a5;
      if (v33)
      {
        uint64_t v25 = a4;
        do
        {
          uint64_t v34 = v33 >> 1;
          int v35 = &v25[4 * a3 * v34];
          int v36 = *(_DWORD *)v35;
          unint64_t v37 = &v35[4 * a3];
          LODWORD(v33) = v33 + ~(v33 >> 1);
          if (v36 < *(_DWORD *)v27) {
            uint64_t v25 = v37;
          }
          else {
            LODWORD(v33) = v34;
          }
        }
        while (v33);
      }
      else
      {
        uint64_t v25 = a4;
      }
      unint64_t v39 = (v32 >> 1);
      unint64_t v38 = ((v25 - a4) >> 2) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v24 = a8;
      }
      else {
        int v24 = a8 + 1;
      }
      uint64_t v25 = &a4[4 * a3 * ((uint64_t)v24 >> 1)];
      unint64_t v26 = ((a4 - a2 - v17) >> 2) / a3;
      if (v26)
      {
        BOOL v27 = &a2[v17];
        do
        {
          uint64_t v28 = v26 >> 1;
          uint64_t v29 = &v27[4 * v13 * v28];
          int v30 = *(_DWORD *)v29;
          unint64_t v31 = &v29[4 * v13];
          LODWORD(v26) = v26 + ~(v26 >> 1);
          if (*(_DWORD *)v25 < v30) {
            LODWORD(v26) = v28;
          }
          else {
            BOOL v27 = v31;
          }
        }
        while (v26);
      }
      else
      {
        BOOL v27 = &a2[v17];
      }
      unint64_t v38 = (v24 >> 1);
      unint64_t v39 = ((v27 - a2 - v17) >> 2) / v13;
    }
    if (v27 != a4 || (uint64_t v40 = v25, v41 = v13, v13 != a3))
    {
      uint64_t v40 = v27;
      unint64_t v41 = v13;
      if (a4 != v25)
      {
        if (&v27[4 * v13] == a4 && v13 == a3)
        {
          uint64_t v42 = 0;
          int v43 = *(_DWORD *)v27;
          do
          {
            *(_DWORD *)&v27[v42] = *(_DWORD *)&a4[v42];
            v42 += v20;
          }
          while (&a4[v42] != v25);
          a4 = &v27[v42];
          *(_DWORD *)&v27[v42] = v43;
          unint64_t v41 = v13;
        }
        else
        {
          if (&a4[4 * a3] == v25)
          {
            uint64_t v62 = &v25[-4 * a3];
            int v63 = *(_DWORD *)v62;
            if (v62 == v27)
            {
              a4 = v25;
            }
            else
            {
              uint64_t v64 = 0;
              do
              {
                *(_DWORD *)&v62[v64] = *(_DWORD *)&v25[v64 + -8 * a3];
                v64 -= 4 * a3;
              }
              while (&v62[v64] != v27);
              a4 = &v25[v64];
            }
            *(_DWORD *)BOOL v27 = v63;
          }
          else
          {
            unint64_t v44 = ((v25 - a4) >> 2) / a3;
            int v45 = v44;
            unint64_t v46 = ((a4 - v27) >> 2) / a3;
            int v47 = v46;
            if (v46 != v44)
            {
              do
              {
                int v52 = v47;
                int v47 = v45;
                int v45 = v52 % v45;
              }
              while (v45);
              unint64_t v53 = v39;
              unint64_t v54 = v13 * v47;
              if (v54)
              {
                char v55 = &v27[4 * v54];
                unint64_t v56 = (int)v46 * v13;
                do
                {
                  v55 -= 4 * v13;
                  int v57 = *(_DWORD *)v55;
                  unint64_t v58 = &v55[4 * v56];
                  unint64_t v59 = v55;
                  do
                  {
                    unsigned __int8 v60 = v58;
                    *(_DWORD *)unint64_t v59 = *(_DWORD *)v58;
                    unint64_t v61 = ((v25 - v58) >> 2) / a3;
                    if ((int)v46 >= (int)v61) {
                      unint64_t v58 = &v27[4 * ((int)v46 - (int)v61) * v13];
                    }
                    else {
                      unint64_t v58 = &v60[4 * v56];
                    }
                    unint64_t v59 = v60;
                  }
                  while (v58 != v55);
                  *(_DWORD *)unsigned __int8 v60 = v57;
                }
                while (v55 != v27);
              }
              a4 = &v27[4 * (int)v44 * v13];
              unint64_t v41 = v13;
              unint64_t v39 = v53;
              goto LABEL_74;
            }
            if (v27 != a4)
            {
              char v48 = a4;
              uint64_t v49 = (int *)v27;
              do
              {
                int v50 = *v49;
                *uint64_t v49 = *(_DWORD *)v48;
                *(_DWORD *)char v48 = v50;
                uint64_t v49 = (int *)((char *)v49 + v20);
                v48 += 4 * a3;
              }
              while (v49 != (int *)a4 && v48 != v25);
            }
          }
          unint64_t v41 = a3;
        }
LABEL_74:
        uint64_t v40 = a4;
      }
    }
    a7 = -(v39 + v19);
    int v65 = a8 - v38;
    uint64_t v92 = a10;
    uint64_t v90 = a10;
    if ((int)v39 + (int)v38 >= a8 - ((int)v39 + (int)v38) - v19)
    {
      ldiv_t v91 = v40;
      unint64_t v66 = a9;
      int v65 = v38;
      a7 = v39;
      a3 = v13;
      uint64_t v25 = v27;
      uint64_t v40 = v23;
      a5 = v41;
      a6 = v91;
    }
    else
    {
      unint64_t v66 = a9;
      unint64_t v67 = v13;
      unint64_t v68 = v13;
      uint64_t v69 = v27;
      uint64_t v70 = a6;
      unint64_t v71 = a5;
      a5 = v71;
      a6 = v70;
      unint64_t v13 = v41;
    }
    a8 = v65;
    a2 = v40;
    a4 = v25;
    a9 = v66;
    a10 = v92;
    uint64_t result = 0xFFFFFFFFLL;
    if (!v65) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v79 = 0;
      uint64_t v80 = 4 * v13;
      uint64_t v81 = a2;
      do
      {
        a9[v79++] = *v81;
        uint64_t v81 = (_DWORD *)((char *)v81 + v80);
      }
      while (v81 != (_DWORD *)a4);
      if (v79 * 4)
      {
        int v82 = &a9[v79];
        uint64_t v83 = (uint64_t)&a9[v79 - 1];
        while (a4 != a6 || a3 != a5)
        {
          int v84 = *(_DWORD *)a4;
          BOOL v85 = *(_DWORD *)a4 < *a9;
          if (*(_DWORD *)a4 >= *a9) {
            int v84 = *a9;
          }
          a9 += *(_DWORD *)a4 >= *a9;
          if (v85) {
            unint64_t v86 = a3;
          }
          else {
            unint64_t v86 = 0;
          }
          a4 += 4 * v86;
          *(_DWORD *)a2 = v84;
          a2 += v80;
          if (v82 == a9) {
            return result;
          }
        }
        uint64_t v88 = a9 - 1;
        do
        {
          int v89 = v88[1];
          ++v88;
          *(_DWORD *)a2 = v89;
          a2 += v80;
        }
        while ((_DWORD *)v83 != v88);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v72 = 0;
    uint64_t v73 = a4;
    do
    {
      a9[v72++] = *(_DWORD *)v73;
      v73 += 4 * a3;
    }
    while (v73 != a6);
    if (v72 * 4)
    {
      int v74 = &a9[v72];
      uint64_t v75 = -4 * a5;
      while (a4 != a2 || a3 != v13)
      {
        int v76 = *(v74 - 1);
        int v77 = *(_DWORD *)&a4[-4 * a3];
        a6 -= 4 * a5;
        BOOL v78 = v76 < v77;
        if (v76 <= v77) {
          int v76 = *(_DWORD *)&a4[-4 * a3];
        }
        if (v78) {
          a4 -= 4 * a3;
        }
        else {
          --v74;
        }
        *(_DWORD *)a6 = v76;
        if (v74 == a9) {
          return result;
        }
      }
      do
      {
        int v87 = *--v74;
        *(_DWORD *)&a6[v75] = v87;
        v75 -= 4 * a5;
      }
      while (v74 != a9);
    }
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<long long>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  if (a5 >= 2)
  {
    int v9 = (char *)a2;
    if (a5 == 2)
    {
      uint64_t v10 = a4[-a3];
      uint64_t v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      unint64_t v12 = result;
      if ((int)a5 > 128)
      {
        uint64_t v23 = a6;
        uint64_t v24 = a5 >> 1;
        uint64_t v25 = a5;
        uint64_t v26 = a5 - (a5 >> 1);
        BOOL v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          uint64_t v28 = &v23[v24];
          uint64_t v29 = 8 * v12;
          int v30 = v28;
          unint64_t v31 = &v23[v25];
          while (v30 != v31)
          {
            uint64_t v32 = *v30;
            BOOL v33 = *v30 < *v23;
            if (*v30 >= *v23) {
              uint64_t v32 = *v23;
            }
            v23 += *v30 >= *v23;
            v30 += v33;
            *(void *)int v9 = v32;
            v9 += v29;
            if (v23 == v28)
            {
              while (v30 != v31)
              {
                uint64_t v34 = *v30++;
                *(void *)int v9 = v34;
                v9 += v29;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            uint64_t v35 = *v23++;
            *(void *)int v9 = v35;
            v9 += v29;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        unint64_t v13 = &a2[result];
        if (v13 != a4)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * result;
          uint64_t v16 = a2;
          uint64_t v17 = &a2[-result];
          do
          {
            uint64_t v18 = *v16;
            uint64_t v16 = v13;
            uint64_t v19 = *v13;
            if (v19 < v18)
            {
              uint64_t v20 = 0;
              while (1)
              {
                *(uint64_t *)((char *)v16 + v20) = v18;
                if (v14 == v20) {
                  break;
                }
                uint64_t v18 = *(uint64_t *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  int v21 = (uint64_t *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              int v21 = a2;
LABEL_17:
              *int v21 = v19;
            }
            unint64_t v13 = &v16[(unint64_t)v15 / 8];
            uint64_t v17 = (uint64_t *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 8] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t *a6)
{
  if (a5)
  {
    int v6 = a6;
    uint64_t v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *int v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      uint64_t v11 = &a4[-a3];
      uint64_t v12 = *v11;
      BOOL v13 = *v11 < *a2;
      if (*v11 >= *a2) {
        uint64_t v12 = *a2;
      }
      *a6 = v12;
      int v6 = a6 + 1;
      if (!v13) {
        uint64_t v8 = &a4[-a3];
      }
      goto LABEL_8;
    }
    uint64_t v14 = result;
    if ((int)a5 > 8)
    {
      uint64_t v24 = a5 >> 1;
      uint64_t v25 = &a2[result * v24];
      if (v14 * v24)
      {
        uint64_t v26 = &v8[v14 * v24];
        while (v26 != a4 || v14 != a3)
        {
          uint64_t v27 = *v26;
          BOOL v28 = *v26 < *v8;
          if (*v26 < *v8)
          {
            uint64_t v29 = v14;
          }
          else
          {
            uint64_t v27 = *v8;
            uint64_t v29 = 0;
          }
          v26 += v29;
          if (v28) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v14;
          }
          v8 += v30;
          *v6++ = v27;
          if (v8 == v25) {
            goto LABEL_37;
          }
        }
        for (; v8 != v25; v8 += v14)
          *v6++ = *v8;
      }
      else
      {
        uint64_t v26 = &v8[v14 * v24];
LABEL_37:
        while (v26 != a4)
        {
          *v6++ = *v26;
          v26 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      uint64_t v15 = &a2[result];
      if (v15 != a4)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a6;
        uint64_t v18 = a6;
        do
        {
          uint64_t v20 = *v18++;
          uint64_t v19 = v20;
          if (*v15 >= v20)
          {
            *uint64_t v18 = *v15;
          }
          else
          {
            v17[1] = v19;
            int v21 = a6;
            if (v17 != a6)
            {
              uint64_t v22 = v16;
              while (1)
              {
                int v21 = (uint64_t *)((char *)a6 + v22);
                uint64_t v23 = *(uint64_t *)((char *)a6 + v22 - 8);
                if (*v15 >= v23) {
                  break;
                }
                *int v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  int v21 = a6;
                  break;
                }
              }
            }
            *int v21 = *v15;
          }
          v15 += result;
          v16 += 8;
          uint64_t v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, void *a9, uint64_t a10)
{
  if (!a8) {
    return result;
  }
  unint64_t v13 = result;
  uint64_t result = 0xFFFFFFFFLL;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7) {
      return result;
    }
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)a4;
    int v19 = -a7;
    uint64_t v20 = 8 * v13;
    while (1)
    {
      uint64_t v21 = *(void *)&a2[v17];
      if (v18 < v21) {
        break;
      }
      v17 += v20;
      if (__CFADD__(v19++, 1)) {
        return result;
      }
    }
    uint64_t v23 = &a2[v17];
    if (-v19 >= a8)
    {
      if (v19 == -1)
      {
        *(void *)&a2[v17] = v18;
        *(void *)a4 = v21;
        return result;
      }
      if (v19 <= 0) {
        int v32 = -v19;
      }
      else {
        int v32 = 1 - v19;
      }
      uint64_t v27 = &a2[8 * v13 * ((uint64_t)v32 >> 1) + v17];
      unint64_t v33 = ((a6 - a4) >> 3) / a5;
      if (v33)
      {
        uint64_t v25 = a4;
        do
        {
          uint64_t v34 = v33 >> 1;
          uint64_t v35 = &v25[8 * a3 * v34];
          uint64_t v36 = *(void *)v35;
          unint64_t v37 = &v35[8 * a3];
          LODWORD(v33) = v33 + ~(v33 >> 1);
          if (v36 < *(void *)v27) {
            uint64_t v25 = v37;
          }
          else {
            LODWORD(v33) = v34;
          }
        }
        while (v33);
      }
      else
      {
        uint64_t v25 = a4;
      }
      unint64_t v39 = (v32 >> 1);
      unint64_t v38 = ((v25 - a4) >> 3) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v24 = a8;
      }
      else {
        int v24 = a8 + 1;
      }
      uint64_t v25 = &a4[8 * a3 * ((uint64_t)v24 >> 1)];
      unint64_t v26 = ((a4 - a2 - v17) >> 3) / a3;
      if (v26)
      {
        uint64_t v27 = &a2[v17];
        do
        {
          uint64_t v28 = v26 >> 1;
          uint64_t v29 = &v27[8 * v13 * v28];
          uint64_t v30 = *(void *)v29;
          unint64_t v31 = &v29[8 * v13];
          LODWORD(v26) = v26 + ~(v26 >> 1);
          if (*(void *)v25 < v30) {
            LODWORD(v26) = v28;
          }
          else {
            uint64_t v27 = v31;
          }
        }
        while (v26);
      }
      else
      {
        uint64_t v27 = &a2[v17];
      }
      unint64_t v38 = (v24 >> 1);
      unint64_t v39 = ((v27 - a2 - v17) >> 3) / v13;
    }
    if (v27 != a4 || (uint64_t v40 = v25, v41 = v13, v13 != a3))
    {
      uint64_t v40 = v27;
      unint64_t v41 = v13;
      if (a4 != v25)
      {
        if (&v27[8 * v13] == a4 && v13 == a3)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)v27;
          do
          {
            *(void *)&v27[v42] = *(void *)&a4[v42];
            v42 += v20;
          }
          while (&a4[v42] != v25);
          a4 = &v27[v42];
          *(void *)&v27[v42] = v43;
          unint64_t v41 = v13;
        }
        else
        {
          if (&a4[8 * a3] == v25)
          {
            uint64_t v62 = &v25[-8 * a3];
            uint64_t v63 = *(void *)v62;
            if (v62 == v27)
            {
              a4 = v25;
            }
            else
            {
              uint64_t v64 = 0;
              do
              {
                *(void *)&v62[v64] = *(void *)&v25[v64 + -16 * a3];
                v64 -= 8 * a3;
              }
              while (&v62[v64] != v27);
              a4 = &v25[v64];
            }
            *(void *)uint64_t v27 = v63;
          }
          else
          {
            unint64_t v44 = ((v25 - a4) >> 3) / a3;
            int v45 = v44;
            unint64_t v46 = ((a4 - v27) >> 3) / a3;
            int v47 = v46;
            if (v46 != v44)
            {
              do
              {
                int v52 = v47;
                int v47 = v45;
                int v45 = v52 % v45;
              }
              while (v45);
              unint64_t v53 = v39;
              unint64_t v54 = v13 * v47;
              if (v54)
              {
                char v55 = &v27[8 * v54];
                unint64_t v56 = (int)v46 * v13;
                do
                {
                  v55 -= 8 * v13;
                  uint64_t v57 = *(void *)v55;
                  unint64_t v58 = &v55[8 * v56];
                  unint64_t v59 = v55;
                  do
                  {
                    unsigned __int8 v60 = v58;
                    *(void *)unint64_t v59 = *(void *)v58;
                    unint64_t v61 = ((v25 - v58) >> 3) / a3;
                    if ((int)v46 >= (int)v61) {
                      unint64_t v58 = &v27[8 * ((int)v46 - (int)v61) * v13];
                    }
                    else {
                      unint64_t v58 = &v60[8 * v56];
                    }
                    unint64_t v59 = v60;
                  }
                  while (v58 != v55);
                  *(void *)unsigned __int8 v60 = v57;
                }
                while (v55 != v27);
              }
              a4 = &v27[8 * (int)v44 * v13];
              unint64_t v41 = v13;
              unint64_t v39 = v53;
              goto LABEL_74;
            }
            if (v27 != a4)
            {
              char v48 = a4;
              uint64_t v49 = (uint64_t *)v27;
              do
              {
                uint64_t v50 = *v49;
                *uint64_t v49 = *(void *)v48;
                *(void *)char v48 = v50;
                uint64_t v49 = (uint64_t *)((char *)v49 + v20);
                v48 += 8 * a3;
              }
              while (v49 != (uint64_t *)a4 && v48 != v25);
            }
          }
          unint64_t v41 = a3;
        }
LABEL_74:
        uint64_t v40 = a4;
      }
    }
    a7 = -(v39 + v19);
    int v65 = a8 - v38;
    uint64_t v92 = a10;
    uint64_t v90 = a10;
    if ((int)v39 + (int)v38 >= a8 - ((int)v39 + (int)v38) - v19)
    {
      ldiv_t v91 = v40;
      unint64_t v66 = a9;
      int v65 = v38;
      a7 = v39;
      a3 = v13;
      uint64_t v25 = v27;
      uint64_t v40 = v23;
      a5 = v41;
      a6 = v91;
    }
    else
    {
      unint64_t v66 = a9;
      unint64_t v67 = v13;
      unint64_t v68 = v13;
      uint64_t v69 = v27;
      uint64_t v70 = a6;
      unint64_t v71 = a5;
      a5 = v71;
      a6 = v70;
      unint64_t v13 = v41;
    }
    a8 = v65;
    a2 = v40;
    a4 = v25;
    a9 = v66;
    a10 = v92;
    uint64_t result = 0xFFFFFFFFLL;
    if (!v65) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v79 = 0;
      uint64_t v80 = 8 * v13;
      uint64_t v81 = a2;
      do
      {
        a9[v79++] = *v81;
        uint64_t v81 = (void *)((char *)v81 + v80);
      }
      while (v81 != (void *)a4);
      if (v79 * 8)
      {
        int v82 = &a9[v79];
        uint64_t v83 = (uint64_t)&a9[v79 - 1];
        while (a4 != a6 || a3 != a5)
        {
          uint64_t v84 = *(void *)a4;
          BOOL v85 = *(void *)a4 < *a9;
          if (*(void *)a4 >= *a9) {
            uint64_t v84 = *a9;
          }
          a9 += *(void *)a4 >= *a9;
          if (v85) {
            unint64_t v86 = a3;
          }
          else {
            unint64_t v86 = 0;
          }
          a4 += 8 * v86;
          *(void *)a2 = v84;
          a2 += v80;
          if (v82 == a9) {
            return result;
          }
        }
        uint64_t v88 = a9 - 1;
        do
        {
          uint64_t v89 = v88[1];
          ++v88;
          *(void *)a2 = v89;
          a2 += v80;
        }
        while ((void *)v83 != v88);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v72 = 0;
    uint64_t v73 = a4;
    do
    {
      a9[v72++] = *(void *)v73;
      v73 += 8 * a3;
    }
    while (v73 != a6);
    if (v72 * 8)
    {
      int v74 = &a9[v72];
      uint64_t v75 = -8 * a5;
      while (a4 != a2 || a3 != v13)
      {
        uint64_t v76 = *(v74 - 1);
        uint64_t v77 = *(void *)&a4[-8 * a3];
        a6 -= 8 * a5;
        BOOL v78 = v76 < v77;
        if (v76 <= v77) {
          uint64_t v76 = *(void *)&a4[-8 * a3];
        }
        if (v78) {
          a4 -= 8 * a3;
        }
        else {
          --v74;
        }
        *(void *)a6 = v76;
        if (v74 == a9) {
          return result;
        }
      }
      do
      {
        uint64_t v87 = *--v74;
        *(void *)&a6[v75] = v87;
        v75 -= 8 * a5;
      }
      while (v74 != a9);
    }
  }
  return result;
}

float std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<float,int>>(unint64_t a1, float *a2, unint64_t a3, float *a4, unsigned int a5, float *a6, uint64_t a7, float result)
{
  if (a5 >= 2)
  {
    uint64_t v10 = a2;
    if (a5 == 2)
    {
      uint64_t v11 = &a4[-a3];
      uint64_t result = *v11;
      float v12 = *a2;
      if (*v11 < *a2)
      {
        *a2 = result;
        a4[-a3] = v12;
      }
    }
    else if ((int)a5 > 128)
    {
      uint64_t v23 = a6;
      uint64_t v24 = a5 >> 1;
      uint64_t v25 = a5;
      uint64_t v26 = a5 - (a5 >> 1);
      uint64_t v27 = &a2[a1 * v24];
      if (a5 <= a7)
      {
        uint64_t v30 = &v23[v24];
        uint64_t v31 = 4 * a1;
        int v32 = v30;
        unint64_t v33 = &v23[v25];
        while (v32 != v33)
        {
          uint64_t result = *v32;
          BOOL v34 = *v32 < *v23;
          if (*v32 >= *v23) {
            uint64_t result = *v23;
          }
          v23 += *v32 >= *v23;
          v32 += v34;
          float *v10 = result;
          uint64_t v10 = (float *)((char *)v10 + v31);
          if (v23 == v30)
          {
            while (v32 != v33)
            {
              float v35 = *v32++;
              uint64_t result = v35;
              float *v10 = v35;
              uint64_t v10 = (float *)((char *)v10 + v31);
            }
            return result;
          }
        }
        while (v23 != v30)
        {
          float v36 = *v23++;
          uint64_t result = v36;
          float *v10 = v36;
          uint64_t v10 = (float *)((char *)v10 + v31);
        }
      }
      else
      {
      }
    }
    else if (a2 != a4 || a1 != a3)
    {
      uint64_t v14 = &a2[a1];
      if (v14 != a4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 4 * a1;
        uint64_t v17 = a2;
        uint64_t v18 = &a2[-a1];
        do
        {
          float v19 = *v17;
          uint64_t v17 = v14;
          uint64_t result = *v14;
          if (*v14 < v19)
          {
            uint64_t v20 = 0;
            while (1)
            {
              *(float *)((char *)v17 + v20) = v19;
              if (v15 == v20) {
                break;
              }
              float v19 = *(float *)((char *)v18 + v20);
              v20 -= v16;
              if (result >= v19)
              {
                uint64_t v21 = (float *)((char *)v17 + v20);
                goto LABEL_17;
              }
            }
            uint64_t v21 = a2;
LABEL_17:
            *uint64_t v21 = result;
          }
          uint64_t v14 = &v17[(unint64_t)v16 / 4];
          uint64_t v18 = (float *)((char *)v18 + v16);
          v15 -= v16;
        }
        while (&v17[(unint64_t)v16 / 4] != a4);
      }
    }
  }
  return result;
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<float,int>>(uint64_t a1, float *a2, uint64_t a3, float *a4, unsigned int a5, float *a6, float result)
{
  if (a5)
  {
    int v7 = a6;
    int v9 = a2;
    if (a5 == 1)
    {
LABEL_8:
      uint64_t result = *v9;
      *int v7 = *v9;
      return result;
    }
    if (a5 == 2)
    {
      float v12 = &a4[-a3];
      float v13 = *v12;
      BOOL v14 = *v12 < *a2;
      if (*v12 >= *a2) {
        float v13 = *a2;
      }
      *a6 = v13;
      int v7 = a6 + 1;
      if (!v14) {
        int v9 = &a4[-a3];
      }
      goto LABEL_8;
    }
    if ((int)a5 > 8)
    {
      uint64_t v24 = a5 >> 1;
      uint64_t v25 = &a2[a1 * v24];
      if (a1 * v24)
      {
        uint64_t v26 = &v9[a1 * v24];
        while (v26 != a4 || a1 != a3)
        {
          uint64_t result = *v26;
          BOOL v27 = *v26 < *v9;
          if (*v26 < *v9)
          {
            uint64_t v28 = a1;
          }
          else
          {
            uint64_t result = *v9;
            uint64_t v28 = 0;
          }
          v26 += v28;
          if (v27) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = a1;
          }
          v9 += v29;
          *v7++ = result;
          if (v9 == v25) {
            goto LABEL_37;
          }
        }
        for (; v9 != v25; v9 += a1)
        {
          uint64_t result = *v9;
          *v7++ = *v9;
        }
      }
      else
      {
        uint64_t v26 = &v9[a1 * v24];
LABEL_37:
        while (v26 != a4)
        {
          uint64_t result = *v26;
          *v7++ = *v26;
          v26 += a1;
        }
      }
    }
    else if (a2 != a4)
    {
      uint64_t result = *a2;
      *a6 = *a2;
      uint64_t v16 = &a2[a1];
      if (v16 != a4)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a6;
        float v19 = a6;
        do
        {
          float v20 = *v19++;
          uint64_t result = v20;
          if (*v16 >= v20)
          {
            *float v19 = *v16;
          }
          else
          {
            v18[1] = result;
            uint64_t v21 = a6;
            if (v18 != a6)
            {
              uint64_t v22 = v17;
              while (1)
              {
                uint64_t v21 = (float *)((char *)a6 + v22);
                float v23 = *(float *)((char *)a6 + v22 - 4);
                if (*v16 >= v23) {
                  break;
                }
                *uint64_t v21 = v23;
                v22 -= 4;
                if (!v22)
                {
                  uint64_t v21 = a6;
                  break;
                }
              }
            }
            uint64_t result = *v16;
            *uint64_t v21 = *v16;
          }
          v16 += a1;
          v17 += 4;
          uint64_t v18 = v19;
        }
        while (v16 != a4);
      }
    }
  }
  return result;
}

float std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<float,int>>(unint64_t a1, float *a2, unint64_t a3, float *a4, unint64_t a5, float *a6, int a7, int a8, float result, float *a10, uint64_t a11)
{
  if (!a8) {
    return result;
  }
  while (a8 > a11 && a7 > a11)
  {
    if (!a7) {
      return result;
    }
    uint64_t v17 = 0;
    uint64_t result = *a4;
    int v18 = -a7;
    uint64_t v19 = 4 * a1;
    while (1)
    {
      float v20 = *(float *)((char *)a2 + v17);
      if (result < v20) {
        break;
      }
      v17 += v19;
      if (__CFADD__(v18++, 1)) {
        return result;
      }
    }
    uint64_t v22 = (float *)((char *)a2 + v17);
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        *(float *)((char *)a2 + v17) = result;
        *a4 = v20;
        return result;
      }
      int v31 = (-v18 < 0) - v18;
      uint64_t v26 = (float *)((char *)&a2[a1 * ((uint64_t)v31 >> 1)] + v17);
      unint64_t v32 = (a6 - a4) / a5;
      if (v32)
      {
        uint64_t v24 = a4;
        do
        {
          uint64_t v33 = v32 >> 1;
          BOOL v34 = &v24[a3 * v33];
          float v35 = *v34;
          float v36 = &v34[a3];
          LODWORD(v32) = v32 + ~(v32 >> 1);
          if (v35 < *v26) {
            uint64_t v24 = v36;
          }
          else {
            LODWORD(v32) = v33;
          }
        }
        while (v32);
      }
      else
      {
        uint64_t v24 = a4;
      }
      unint64_t v38 = (v31 >> 1);
      unint64_t v37 = (v24 - a4) / a3;
    }
    else
    {
      if (a8 >= 0) {
        int v23 = a8;
      }
      else {
        int v23 = a8 + 1;
      }
      uint64_t v24 = &a4[a3 * ((uint64_t)v23 >> 1)];
      unint64_t v25 = (((char *)a4 - (char *)a2 - v17) >> 2) / a3;
      if (v25)
      {
        uint64_t v26 = (float *)((char *)a2 + v17);
        do
        {
          uint64_t v27 = v25 >> 1;
          uint64_t v28 = &v26[a1 * v27];
          float v29 = *v28;
          uint64_t v30 = &v28[a1];
          LODWORD(v25) = v25 + ~(v25 >> 1);
          if (*v24 < v29) {
            LODWORD(v25) = v27;
          }
          else {
            uint64_t v26 = v30;
          }
        }
        while (v25);
      }
      else
      {
        uint64_t v26 = (float *)((char *)a2 + v17);
      }
      unint64_t v37 = (v23 >> 1);
      unint64_t v38 = (((char *)v26 - (char *)a2 - v17) >> 2) / a1;
    }
    if (v26 != a4 || (unint64_t v39 = v24, v40 = a1, a1 != a3))
    {
      unint64_t v39 = v26;
      unint64_t v40 = a1;
      if (a4 != v24)
      {
        if (&v26[a1] == a4 && a1 == a3)
        {
          uint64_t v41 = 0;
          float v42 = *v26;
          do
          {
            *(float *)((char *)v26 + v41) = *(float *)((char *)a4 + v41);
            v41 += v19;
          }
          while ((float *)((char *)a4 + v41) != v24);
          a4 = (float *)((char *)v26 + v41);
          *(float *)((char *)v26 + v41) = v42;
          unint64_t v40 = a1;
        }
        else
        {
          if (&a4[a3] == v24)
          {
            unint64_t v61 = &v24[-a3];
            int v62 = *(_DWORD *)v61;
            if (v61 == v26)
            {
              a4 = v24;
            }
            else
            {
              uint64_t v63 = 0;
              do
              {
                v61[v63] = v24[v63 + -2 * a3];
                v63 -= a3;
              }
              while (&v61[v63] != v26);
              a4 = &v24[v63];
            }
            *(_DWORD *)uint64_t v26 = v62;
          }
          else
          {
            unint64_t v43 = (v24 - a4) / a3;
            int v44 = v43;
            unint64_t v45 = (a4 - v26) / a3;
            int v46 = v45;
            if (v45 != v43)
            {
              do
              {
                int v51 = v46;
                int v46 = v44;
                int v44 = v51 % v44;
              }
              while (v44);
              unint64_t v52 = v38;
              uint64_t v53 = a1 * v46;
              if (v53)
              {
                unint64_t v54 = &v26[v53];
                uint64_t v55 = (int)v45 * a1;
                do
                {
                  v54 -= a1;
                  int v56 = *(_DWORD *)v54;
                  uint64_t v57 = &v54[v55];
                  unint64_t v58 = v54;
                  do
                  {
                    unint64_t v59 = v57;
                    *unint64_t v58 = *v57;
                    unint64_t v60 = (v24 - v57) / a3;
                    if ((int)v45 >= (int)v60) {
                      uint64_t v57 = &v26[((int)v45 - (int)v60) * a1];
                    }
                    else {
                      uint64_t v57 = &v59[v55];
                    }
                    unint64_t v58 = v59;
                  }
                  while (v57 != v54);
                  *(_DWORD *)unint64_t v59 = v56;
                }
                while (v54 != v26);
              }
              a4 = &v26[(int)v43 * a1];
              unint64_t v40 = a1;
              unint64_t v38 = v52;
              goto LABEL_70;
            }
            if (v26 != a4)
            {
              int v47 = a4;
              char v48 = v26;
              do
              {
                int v49 = *(_DWORD *)v48;
                *char v48 = *v47;
                *(_DWORD *)int v47 = v49;
                char v48 = (float *)((char *)v48 + v19);
                v47 += a3;
              }
              while (v48 != a4 && v47 != v24);
            }
          }
          unint64_t v40 = a3;
        }
LABEL_70:
        unint64_t v39 = a4;
      }
    }
    a7 = -(v38 + v18);
    int v64 = a8 - v37;
    uint64_t v88 = a11;
    if ((int)v38 + (int)v37 >= a8 - ((int)v38 + (int)v37) - v18)
    {
      uint64_t v87 = v39;
      int v65 = a10;
      int v64 = v37;
      a7 = v38;
      a3 = a1;
      uint64_t v24 = v26;
      unint64_t v39 = v22;
      a5 = v40;
      a6 = v87;
    }
    else
    {
      unint64_t v86 = a10;
      int v65 = a10;
      unint64_t v66 = a1;
      unint64_t v67 = a1;
      unint64_t v68 = v26;
      unint64_t v69 = a5;
      uint64_t v70 = a6;
      a5 = v69;
      a6 = v70;
      a1 = v40;
    }
    a8 = v64;
    a2 = v39;
    a4 = v24;
    a10 = v65;
    a11 = v88;
    if (!v64) {
      return result;
    }
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      uint64_t v76 = 0;
      uint64_t v77 = 4 * a1;
      BOOL v78 = a2;
      do
      {
        uint64_t result = *v78;
        a10[v76++] = *v78;
        BOOL v78 = (float *)((char *)v78 + v77);
      }
      while (v78 != a4);
      if (v76 * 4)
      {
        uint64_t v79 = &a10[v76];
        uint64_t v80 = (uint64_t)&a10[v76 - 1];
        while (a4 != a6 || a3 != a5)
        {
          uint64_t result = *a4;
          BOOL v81 = *a4 < *a10;
          if (*a4 >= *a10) {
            uint64_t result = *a10;
          }
          a10 += *a4 >= *a10;
          if (v81) {
            unint64_t v82 = a3;
          }
          else {
            unint64_t v82 = 0;
          }
          a4 += v82;
          *a2 = result;
          a2 = (float *)((char *)a2 + v77);
          if (v79 == a10) {
            return result;
          }
        }
        uint64_t v84 = a10 - 1;
        do
        {
          float v85 = v84[1];
          ++v84;
          uint64_t result = v85;
          *a2 = v85;
          a2 = (float *)((char *)a2 + v77);
        }
        while ((float *)v80 != v84);
      }
    }
  }
  else if (a4 != a6)
  {
    uint64_t v71 = 0;
    uint64_t v72 = a4;
    do
    {
      uint64_t result = *v72;
      a10[v71++] = *v72;
      v72 += a3;
    }
    while (v72 != a6);
    if (v71 * 4)
    {
      uint64_t v73 = &a10[v71];
      uint64_t v74 = 0x3FFFFFFFFFFFFFFFLL * a5;
      while (a4 != a2 || a3 != a1)
      {
        uint64_t v75 = &a4[-a3];
        uint64_t result = *(v73 - 1);
        a6 -= a5;
        if (result >= *v75)
        {
          --v73;
        }
        else
        {
          uint64_t result = *v75;
          a4 -= a3;
        }
        *a6 = result;
        if (v73 == a10) {
          return result;
        }
      }
      do
      {
        float v83 = *--v73;
        uint64_t result = v83;
        a6[v74] = v83;
        v74 -= a5;
      }
      while (v73 != a10);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  unsigned int v11 = *(unsigned __int8 *)(*a7 + v10 * v7);
  unsigned int v12 = *(unsigned __int8 *)(*a7 + v10 * v8);
  if (v11 < v12 || (v7 < v8 ? (BOOL v13 = v11 == v12) : (BOOL v13 = 0), v13))
  {
    uint64_t v21 = *a6;
    unsigned int v22 = *(unsigned __int8 *)(v9 + v10 * v21);
    if (v22 < v11 || v21 < v7 && v22 == v11)
    {
      *a2 = v21;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v23 = *a6;
    unsigned int v24 = *(unsigned __int8 *)(v9 + v10 * v23);
    if (v24 < v12 || (uint64_t result = 1, v23 < v8) && v24 == v12)
    {
      *a4 = v23;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v14 = *a6;
    unsigned int v15 = *(unsigned __int8 *)(v9 + v10 * v14);
    if (v15 < v11 || (uint64_t result = 0, v14 < v7) && v15 == v11)
    {
      *a4 = v14;
      *a6 = v7;
      uint64_t v17 = *a4;
      uint64_t v18 = *a2;
      unsigned int v19 = *(unsigned __int8 *)(v9 + v10 * v17);
      unsigned int v20 = *(unsigned __int8 *)(v9 + v10 * v18);
      if (v19 < v20 || (uint64_t result = 1, v17 < v18) && v19 == v20)
      {
        *a2 = v17;
        *a4 = v18;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  unsigned int v11 = *(unsigned __int8 *)(*a7 + v10 * v7);
  uint64_t v12 = v10 * v8;
  unsigned int v13 = *(unsigned __int8 *)(*a7 + v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (BOOL v14 = v11 == v13) : (BOOL v14 = 0), v14))
  {
    uint64_t v22 = *a6;
    unsigned int v23 = *(unsigned __int8 *)(v9 + v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v24 = *a6;
    unsigned int v25 = *(unsigned __int8 *)(v9 + v10 * v24);
    unsigned int v26 = *(unsigned __int8 *)(v9 + v12);
    if (v25 < v26 || (uint64_t result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v15 = *a6;
    unsigned int v16 = *(unsigned __int8 *)(v9 + v10 * v15);
    if (v16 < v11 || (uint64_t result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      uint64_t v18 = *a4;
      uint64_t v19 = *a2;
      unsigned int v20 = *(unsigned __int8 *)(v9 + v10 * v18);
      unsigned int v21 = *(unsigned __int8 *)(v9 + v10 * v19);
      if (v20 < v21 || (uint64_t result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  unsigned int v11 = *(_DWORD *)(*a7 + 4 * v10 * v7);
  uint64_t v12 = v10 * v8;
  unsigned int v13 = *(_DWORD *)(*a7 + 4 * v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (BOOL v14 = v11 == v13) : (BOOL v14 = 0), v14))
  {
    uint64_t v22 = *a6;
    unsigned int v23 = *(_DWORD *)(v9 + 4 * v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v24 = *a6;
    unsigned int v25 = *(_DWORD *)(v9 + 4 * v10 * v24);
    unsigned int v26 = *(_DWORD *)(v9 + 4 * v12);
    if (v25 < v26 || (uint64_t result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v15 = *a6;
    unsigned int v16 = *(_DWORD *)(v9 + 4 * v10 * v15);
    if (v16 < v11 || (uint64_t result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      uint64_t v18 = *a4;
      uint64_t v19 = *a2;
      unsigned int v20 = *(_DWORD *)(v9 + 4 * v10 * v18);
      unsigned int v21 = *(_DWORD *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (uint64_t result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a7;
  uint64_t v9 = a7[1];
  uint64_t v10 = *a2;
  int v11 = *(unsigned __int8 *)(*a7 + v9 * v7);
  uint64_t v12 = v9 * v10;
  if (*(char *)(*a7 + v9 * v7) < *(char *)(*a7 + v9 * v10)
    || (v7 < v10 ? (BOOL v13 = v11 == *(unsigned __int8 *)(*a7 + v9 * v10)) : (BOOL v13 = 0), v13))
  {
    uint64_t v20 = *a6;
    if (*(char *)(v8 + v9 * v20) < (char)v11
      || v20 < v7 && *(unsigned __int8 *)(v8 + v9 * v20) == v11)
    {
      *a2 = v20;
      *a6 = v10;
      return 1;
    }
    *a2 = v7;
    *a4 = v10;
    uint64_t v21 = *a6;
    int v22 = *(char *)(v8 + v9 * v21);
    int v23 = *(char *)(v8 + v12);
    if (v22 < v23 || (uint64_t result = 1, v21 < v10) && v22 == v23)
    {
      *a4 = v21;
      *a6 = v10;
      return 2;
    }
  }
  else
  {
    uint64_t v14 = *a6;
    if (*(char *)(v8 + v9 * v14) < (char)v11
      || (uint64_t result = 0, v14 < v7) && *(unsigned __int8 *)(v8 + v9 * v14) == v11)
    {
      *a4 = v14;
      *a6 = v7;
      uint64_t v16 = *a4;
      uint64_t v17 = *a2;
      int v18 = *(char *)(v8 + v9 * v16);
      int v19 = *(char *)(v8 + v9 * v17);
      if (v18 < v19 || (uint64_t result = 1, v16 < v17) && v18 == v19)
      {
        *a2 = v16;
        *a4 = v17;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  int v11 = *(_DWORD *)(*a7 + 4 * v10 * v7);
  uint64_t v12 = v10 * v8;
  int v13 = *(_DWORD *)(*a7 + 4 * v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (BOOL v14 = v11 == v13) : (BOOL v14 = 0), v14))
  {
    uint64_t v22 = *a6;
    int v23 = *(_DWORD *)(v9 + 4 * v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v24 = *a6;
    int v25 = *(_DWORD *)(v9 + 4 * v10 * v24);
    int v26 = *(_DWORD *)(v9 + 4 * v12);
    if (v25 < v26 || (uint64_t result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v15 = *a6;
    int v16 = *(_DWORD *)(v9 + 4 * v10 * v15);
    if (v16 < v11 || (uint64_t result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      uint64_t v18 = *a4;
      uint64_t v19 = *a2;
      int v20 = *(_DWORD *)(v9 + 4 * v10 * v18);
      int v21 = *(_DWORD *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (uint64_t result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  uint64_t v11 = *(void *)(*a7 + 8 * v10 * v7);
  uint64_t v12 = *(void *)(*a7 + 8 * v10 * v8);
  if (v11 < v12 || (v7 < v8 ? (BOOL v13 = v11 == v12) : (BOOL v13 = 0), v13))
  {
    uint64_t v21 = *a6;
    uint64_t v22 = *(void *)(v9 + 8 * v10 * v21);
    if (v22 < v11 || v21 < v7 && v22 == v11)
    {
      *a2 = v21;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v23 = *a6;
    uint64_t v24 = *(void *)(v9 + 8 * v10 * v23);
    if (v24 < v12 || (uint64_t result = 1, v23 < v8) && v24 == v12)
    {
      *a4 = v23;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v14 = *a6;
    uint64_t v15 = *(void *)(v9 + 8 * v10 * v14);
    if (v15 < v11 || (uint64_t result = 0, v14 < v7) && v15 == v11)
    {
      *a4 = v14;
      *a6 = v7;
      uint64_t v17 = *a4;
      uint64_t v18 = *a2;
      uint64_t v19 = *(void *)(v9 + 8 * v10 * v17);
      uint64_t v20 = *(void *)(v9 + 8 * v10 * v18);
      if (v19 < v20 || (uint64_t result = 1, v17 < v18) && v19 == v20)
      {
        *a2 = v17;
        *a4 = v18;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::anonymous namespace'::argpartition<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  float v11 = *(float *)(*a7 + 4 * v10 * v7);
  float v12 = *(float *)(*a7 + 4 * v10 * v8);
  if (v11 < v12 || v7 < v8 && v11 == v12)
  {
    uint64_t v13 = *a6;
    float v14 = *(float *)(v9 + 4 * v10 * v13);
    if (v14 < v11 || v13 < v7 && v14 == v11)
    {
      *a2 = v13;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    uint64_t v22 = *a6;
    float v23 = *(float *)(v9 + 4 * v10 * v22);
    if (v23 < v12 || (uint64_t result = 1, v22 < v8) && v23 == v12)
    {
      *a4 = v22;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    uint64_t v16 = *a6;
    float v17 = *(float *)(v9 + 4 * v10 * v16);
    if (v17 < v11 || (uint64_t result = 0, v16 < v7) && v17 == v11)
    {
      *a4 = v16;
      *a6 = v7;
      uint64_t v18 = *a4;
      uint64_t v19 = *a2;
      float v20 = *(float *)(v9 + 4 * v10 * v18);
      float v21 = *(float *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (uint64_t result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6)
{
  unsigned int v6 = *a4;
  unsigned int v7 = *a2;
  if (v6 < v7)
  {
    *a2 = v6;
    *a4 = v7;
    unsigned int v8 = *a6;
    if (v8 < v7)
    {
      *a4 = v8;
      *a6 = v7;
      return 2;
    }
    return 1;
  }
  unsigned int v9 = *a6;
  if (v9 < v6)
  {
    *a4 = v9;
    *a6 = v6;
    unsigned int v10 = *a4;
    unsigned int v11 = *a2;
    if (v10 < v11)
    {
      *a2 = v10;
      *a4 = v11;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6)
{
  unsigned int v6 = *a4;
  unsigned int v7 = *a2;
  unsigned int v8 = *a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    unsigned int v11 = *a6;
    if (v11 >= v7) {
      return 1;
    }
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    unsigned int v9 = *a4;
    unsigned int v10 = *a2;
    if (v9 >= v10) {
      return 1;
    }
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, unsigned int *a6)
{
  unsigned int v6 = *a4;
  unsigned int v7 = *a2;
  unsigned int v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    unsigned int v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<signed char,int>>(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6)
{
  int v6 = (char)*a4;
  int v7 = (char)*a2;
  int v8 = (char)*a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    int v11 = (char)*a6;
    if (v11 >= v7) {
      return 1;
    }
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    int v9 = (char)*a4;
    int v10 = (char)*a2;
    if (v9 >= v10) {
      return 1;
    }
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<int,int>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6)
{
  int v6 = *a4;
  int v7 = *a2;
  int v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    int v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<long long,int>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = *a4;
  uint64_t v7 = *a2;
  uint64_t v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    uint64_t v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::anonymous namespace'::StridedIterator<float,int>>(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a4;
  float v7 = *a2;
  float v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    float v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

void mlx::core::Reduce::eval_cpu(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  uint64_t v207 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 16) {
    mlx::core::Reduce::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)v3 + 56) == 6)
  {
    int v6 = *(_DWORD *)(a1 + 20);
    switch(v6)
    {
      case 5:
        float v17 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                          * (void)(*a3)[6]));
        int v202 = &unk_27062AEC8;
        uint64_t v203 = mlx::core::allocator::free;
        unint64_t v204 = &v202;
        mlx::core::array::set_data(a3, (uint64_t)v17, (uint64_t)&v202);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v202);
        int v189 = 0;
        uint64_t v190 = 0;
        __n128 __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
        uint64_t v18 = (void *)(a1 + 24);
        if (__p)
        {
          int v189 = __p;
          operator delete(__p);
        }
        if (v191 == 1)
        {
          uint64_t v27 = v193;
          if (v193 - (unsigned char *)v192 == 4)
          {
            if ((*a3)[6])
            {
              unint64_t v28 = 0;
              float v29 = (*a3)[19];
              uint64_t v30 = *(const float **)(*(void *)v3 + 152);
              vDSP_Length v31 = *(int *)v192;
              do
              {
                v29[v28] = -8388608;
                LODWORD(__C) = 0;
                vDSP_maxv(v30, 1, (float *)&__C, v31);
                float v32 = *(float *)&v29[v28];
                if (v32 < *(float *)&__C) {
                  float v32 = *(float *)&__C;
                }
                *(float *)&v29[v28++] = v32;
                v30 += v31;
              }
              while ((unint64_t)(*a3)[6] > v28);
            }
            goto LABEL_216;
          }
        }
        else
        {
          if (!v191)
          {
            float v9 = (float *)(*a3)[19];
            float *v9 = -INFINITY;
            uint64_t v19 = *(const float **)(*(void *)v3 + 152);
            vDSP_Length v20 = *(int *)(*(void *)v3 + 48);
            LODWORD(__C) = 0;
            vDSP_maxv(v19, 1, (float *)&__C, v20);
            float v12 = *v9;
            if (*v9 < *(float *)&__C) {
              float v12 = *(float *)&__C;
            }
            goto LABEL_27;
          }
          if ((v191 & 0xFFFFFFFD) != 1)
          {
            switch(v191)
            {
              case 2:
                uint64_t v71 = v193;
                if (v193 - (unsigned char *)v192 == 4)
                {
                  uint64_t v137 = *((int *)v193 - 1);
                  unint64_t v138 = *((void *)v195 - 1);
                  v193 -= 4;
                  v195 -= 8;
                  if ((*a3)[6])
                  {
                    LODWORD(v139) = 0;
                    uint64_t v140 = (float32x4_t *)(*a3)[19];
                    int64_t v141 = *(_OWORD **)(*(void *)v3 + 152);
                    do
                    {
                      if (v138) {
                        memset_pattern16(v140, &unk_25704DBA0, 4 * v138);
                      }
                      _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(v141, v140, v137, v138);
                      unint64_t v139 = (int)v139 + (int)v138;
                      uint64_t v140 = (float32x4_t *)((char *)v140 + 4 * v138);
                      int64_t v141 = (_OWORD *)((char *)v141 + 4 * v138 * v137);
                    }
                    while (v139 < (unint64_t)(*a3)[6]);
                  }
                  goto LABEL_216;
                }
                break;
              case 5:
                unint64_t v187 = *(void *)(*(void *)v3 + 152);
                unsigned int v119 = (*a3)[19];
                unint64_t v39 = __C;
                unint64_t v40 = v201;
                if ((*a3)[6])
                {
                  unint64_t v120 = 0;
                  uint64_t v121 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
                  do
                  {
                    uint64_t v122 = 0;
                    if ((v121 & 0x80000000) == 0)
                    {
                      uint64_t v123 = v121;
                      int quot = v120;
                      do
                      {
                        ldiv_t v125 = ldiv(quot, v39[v123]);
                        int quot = v125.quot;
                        v122 += v40[v123--] * v125.rem;
                      }
                      while (v123 != -1);
                    }
                    LODWORD(v186) = v122;
                    LODWORD(__N) = -8388608;
                    uint64_t v198 = 0;
                    unint64_t v126 = operator new(0x28uLL);
                    *unint64_t v126 = &unk_27062B378;
                    v126[1] = &v185;
                    v126[2] = &__N;
                    v126[3] = &v187;
                    v126[4] = &v186;
                    uint64_t v198 = v126;
                    uint64_t v206 = 0;
                    unsigned __int8 v127 = operator new(0x28uLL);
                    *unsigned __int8 v127 = &unk_27062B018;
                    v127[1] = &v192;
                    v127[2] = &v194;
                    v127[3] = v205;
                    v127[4] = v197;
                    unint64_t v201 = v127;
                    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
                    std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
                    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
                    *v119++ = __N;
                    ++v120;
                  }
                  while ((unint64_t)(*a3)[6] > v120);
                }
                goto LABEL_212;
              case 4:
                uint64_t v71 = v193;
                break;
              default:
                goto LABEL_216;
            }
            int v185 = *((_DWORD *)v71 - 1);
            unint64_t v187 = *((void *)v195 - 1);
            int v193 = v71 - 4;
            v195 -= 8;
            uint64_t v186 = *(float **)(*(void *)v3 + 152);
            vDSP_Length __N = (vDSP_Length)(*a3)[19];
            unint64_t v39 = __C;
            unint64_t v40 = v201;
            unint64_t v142 = (*a3)[6];
            if (v193 == v192)
            {
              if (v142)
              {
                int v171 = 0;
                uint64_t v172 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
                do
                {
                  uint64_t v173 = 0;
                  if ((v172 & 0x80000000) == 0)
                  {
                    uint64_t v174 = v172;
                    int v175 = v171;
                    do
                    {
                      ldiv_t v176 = ldiv(v175, v39[v174]);
                      int v175 = v176.quot;
                      v173 += v40[v174--] * v176.rem;
                    }
                    while (v174 != -1);
                  }
                  if (v187) {
                    memset_pattern16((void *)__N, &unk_25704DBA0, 4 * v187);
                  }
                  _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(&v186[(int)v173], (float32x4_t *)__N, v185, v187);
                  __N += 4 * v187;
                  v171 += v187;
                }
                while ((unint64_t)(*a3)[6] > v171);
              }
            }
            else if (v142)
            {
              int v143 = 0;
              uint64_t v144 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
              do
              {
                uint64_t v145 = 0;
                if ((v144 & 0x80000000) == 0)
                {
                  uint64_t v146 = v144;
                  int v147 = v143;
                  do
                  {
                    ldiv_t v148 = ldiv(v147, v39[v146]);
                    int v147 = v148.quot;
                    v145 += v40[v146--] * v148.rem;
                  }
                  while (v146 != -1);
                }
                int v183 = v145;
                if (v187) {
                  memset_pattern16((void *)__N, &unk_25704DBA0, 4 * v187);
                }
                uint64_t v198 = 0;
                uint64_t v149 = operator new(0x38uLL);
                *uint64_t v149 = &unk_27062B2F8;
                v149[1] = &v196;
                v149[2] = &v186;
                v149[3] = &v183;
                v149[4] = &__N;
                v149[5] = &v185;
                v149[6] = &v187;
                uint64_t v198 = v149;
                uint64_t v206 = 0;
                uint64_t v150 = operator new(0x28uLL);
                void *v150 = &unk_27062B018;
                v150[1] = &v192;
                v150[2] = &v194;
                v150[3] = v205;
                v150[4] = v197;
                unint64_t v201 = v150;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
                std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
                __N += 4 * v187;
                v143 += v187;
              }
              while ((unint64_t)(*a3)[6] > v143);
            }
            goto LABEL_212;
          }
          uint64_t v27 = v193;
        }
        LODWORD(__N) = *((_DWORD *)v27 - 1);
        int v193 = v27 - 4;
        v195 -= 8;
        unint64_t v50 = *(void *)(*(void *)v3 + 152);
        uint64_t v186 = (float *)(*a3)[19];
        unint64_t v187 = v50;
        unint64_t v39 = __C;
        unint64_t v40 = v201;
        int v51 = (*a3)[6];
        if (v193 == v192)
        {
          if (v51)
          {
            unint64_t v81 = 0;
            uint64_t v82 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
            do
            {
              uint64_t v83 = 0;
              if ((v82 & 0x80000000) == 0)
              {
                uint64_t v84 = v82;
                int v85 = v81;
                do
                {
                  ldiv_t v86 = ldiv(v85, v39[v84]);
                  int v85 = v86.quot;
                  v83 += v40[v84--] * v86.rem;
                }
                while (v84 != -1);
              }
              uint64_t v87 = v186;
              *uint64_t v186 = -INFINITY;
              LODWORD(__C) = 0;
              vDSP_maxv((const float *)(v187 + 4 * (int)v83), 1, (float *)&__C, (int)__N);
              float v88 = *v87;
              if (*v87 < *(float *)&__C) {
                float v88 = *(float *)&__C;
              }
              *uint64_t v87 = v88;
              ++v81;
              ++v186;
            }
            while ((unint64_t)(*a3)[6] > v81);
          }
        }
        else if (v51)
        {
          unint64_t v52 = 0;
          uint64_t v53 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
          do
          {
            uint64_t v54 = 0;
            if ((v53 & 0x80000000) == 0)
            {
              uint64_t v55 = v53;
              int v56 = v52;
              do
              {
                ldiv_t v57 = ldiv(v56, v39[v55]);
                int v56 = v57.quot;
                v54 += v40[v55--] * v57.rem;
              }
              while (v55 != -1);
            }
            int v185 = v54;
            *uint64_t v186 = -INFINITY;
            uint64_t v198 = 0;
            unint64_t v58 = operator new(0x30uLL);
            *unint64_t v58 = &unk_27062B278;
            v58[1] = &v183;
            v58[2] = &v187;
            v58[3] = &v185;
            v58[4] = &v186;
            v58[5] = &__N;
            uint64_t v198 = v58;
            uint64_t v206 = 0;
            unint64_t v59 = operator new(0x28uLL);
            *unint64_t v59 = &unk_27062B018;
            v59[1] = &v192;
            v59[2] = &v194;
            v59[3] = v205;
            v59[4] = v197;
            unint64_t v201 = v59;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
            std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
            ++v52;
            ++v186;
          }
          while ((unint64_t)(*a3)[6] > v52);
        }
        goto LABEL_212;
      case 4:
        uint64_t v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                          * (void)(*a3)[6]));
        int v202 = &unk_27062AEC8;
        uint64_t v203 = mlx::core::allocator::free;
        unint64_t v204 = &v202;
        mlx::core::array::set_data(a3, (uint64_t)v13, (uint64_t)&v202);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v202);
        int v189 = 0;
        uint64_t v190 = 0;
        __n128 __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
        float v14 = (void *)(a1 + 24);
        if (__p)
        {
          int v189 = __p;
          operator delete(__p);
        }
        if (v191 == 1)
        {
          float v21 = v193;
          if (v193 - (unsigned char *)v192 == 4)
          {
            if ((*a3)[6])
            {
              unint64_t v22 = 0;
              float v23 = (*a3)[19];
              uint64_t v24 = *(const float **)(*(void *)v3 + 152);
              vDSP_Length v25 = *(int *)v192;
              do
              {
                v23[v22] = 2139095040;
                LODWORD(__C) = 0;
                vDSP_minv(v24, 1, (float *)&__C, v25);
                float v26 = *(float *)&v23[v22];
                if (v26 > *(float *)&__C) {
                  float v26 = *(float *)&__C;
                }
                *(float *)&v23[v22++] = v26;
                v24 += v25;
              }
              while ((unint64_t)(*a3)[6] > v22);
            }
            goto LABEL_216;
          }
        }
        else
        {
          if (!v191)
          {
            float v9 = (float *)(*a3)[19];
            float *v9 = INFINITY;
            uint64_t v15 = *(const float **)(*(void *)v3 + 152);
            vDSP_Length v16 = *(int *)(*(void *)v3 + 48);
            LODWORD(__C) = 0;
            vDSP_minv(v15, 1, (float *)&__C, v16);
            float v12 = *v9;
            if (*v9 > *(float *)&__C) {
              float v12 = *(float *)&__C;
            }
            goto LABEL_27;
          }
          if ((v191 & 0xFFFFFFFD) != 1)
          {
            switch(v191)
            {
              case 2:
                uint64_t v70 = v193;
                if (v193 - (unsigned char *)v192 == 4)
                {
                  uint64_t v105 = *((int *)v193 - 1);
                  unint64_t v106 = *((void *)v195 - 1);
                  v193 -= 4;
                  v195 -= 8;
                  if ((*a3)[6])
                  {
                    LODWORD(v107) = 0;
                    unsigned int v108 = (float32x4_t *)(*a3)[19];
                    unsigned int v109 = *(_OWORD **)(*(void *)v3 + 152);
                    do
                    {
                      if (v106) {
                        memset_pattern16(v108, &unk_25704DB90, 4 * v106);
                      }
                      _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(v109, v108, v105, v106);
                      unint64_t v107 = (int)v107 + (int)v106;
                      unsigned int v108 = (float32x4_t *)((char *)v108 + 4 * v106);
                      unsigned int v109 = (_OWORD *)((char *)v109 + 4 * v106 * v105);
                    }
                    while (v107 < (unint64_t)(*a3)[6]);
                  }
                  goto LABEL_216;
                }
                break;
              case 5:
                unint64_t v187 = *(void *)(*(void *)v3 + 152);
                unsigned int v96 = (*a3)[19];
                unint64_t v39 = __C;
                unint64_t v40 = v201;
                if ((*a3)[6])
                {
                  unint64_t v97 = 0;
                  uint64_t v98 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
                  do
                  {
                    uint64_t v99 = 0;
                    if ((v98 & 0x80000000) == 0)
                    {
                      uint64_t v100 = v98;
                      int v101 = v97;
                      do
                      {
                        ldiv_t v102 = ldiv(v101, v39[v100]);
                        int v101 = v102.quot;
                        v99 += v40[v100--] * v102.rem;
                      }
                      while (v100 != -1);
                    }
                    LODWORD(v186) = v99;
                    LODWORD(__N) = 2139095040;
                    uint64_t v198 = 0;
                    unint64_t v103 = operator new(0x28uLL);
                    *unint64_t v103 = &unk_27062B4F8;
                    v103[1] = &v185;
                    v103[2] = &__N;
                    v103[3] = &v187;
                    v103[4] = &v186;
                    uint64_t v198 = v103;
                    uint64_t v206 = 0;
                    unint64_t v104 = operator new(0x28uLL);
                    void *v104 = &unk_27062B018;
                    v104[1] = &v192;
                    v104[2] = &v194;
                    v104[3] = v205;
                    v104[4] = v197;
                    unint64_t v201 = v104;
                    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
                    std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
                    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
                    *v96++ = __N;
                    ++v97;
                  }
                  while ((unint64_t)(*a3)[6] > v97);
                }
                goto LABEL_212;
              case 4:
                uint64_t v70 = v193;
                break;
              default:
                goto LABEL_216;
            }
            int v185 = *((_DWORD *)v70 - 1);
            unint64_t v187 = *((void *)v195 - 1);
            int v193 = v70 - 4;
            v195 -= 8;
            uint64_t v186 = *(float **)(*(void *)v3 + 152);
            vDSP_Length __N = (vDSP_Length)(*a3)[19];
            unint64_t v39 = __C;
            unint64_t v40 = v201;
            int v110 = (*a3)[6];
            if (v193 == v192)
            {
              if (v110)
              {
                int v165 = 0;
                uint64_t v166 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
                do
                {
                  uint64_t v167 = 0;
                  if ((v166 & 0x80000000) == 0)
                  {
                    uint64_t v168 = v166;
                    int v169 = v165;
                    do
                    {
                      ldiv_t v170 = ldiv(v169, v39[v168]);
                      int v169 = v170.quot;
                      v167 += v40[v168--] * v170.rem;
                    }
                    while (v168 != -1);
                  }
                  if (v187) {
                    memset_pattern16((void *)__N, &unk_25704DB90, 4 * v187);
                  }
                  _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(&v186[(int)v167], (float32x4_t *)__N, v185, v187);
                  __N += 4 * v187;
                  v165 += v187;
                }
                while ((unint64_t)(*a3)[6] > v165);
              }
            }
            else if (v110)
            {
              int v111 = 0;
              uint64_t v112 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
              do
              {
                uint64_t v113 = 0;
                if ((v112 & 0x80000000) == 0)
                {
                  uint64_t v114 = v112;
                  int v115 = v111;
                  do
                  {
                    ldiv_t v116 = ldiv(v115, v39[v114]);
                    int v115 = v116.quot;
                    v113 += v40[v114--] * v116.rem;
                  }
                  while (v114 != -1);
                }
                int v183 = v113;
                if (v187) {
                  memset_pattern16((void *)__N, &unk_25704DB90, 4 * v187);
                }
                uint64_t v198 = 0;
                unsigned int v117 = operator new(0x38uLL);
                *unsigned int v117 = &unk_27062B478;
                v117[1] = &v196;
                v117[2] = &v186;
                v117[3] = &v183;
                v117[4] = &__N;
                v117[5] = &v185;
                v117[6] = &v187;
                uint64_t v198 = v117;
                uint64_t v206 = 0;
                unint64_t v118 = operator new(0x28uLL);
                *unint64_t v118 = &unk_27062B018;
                v118[1] = &v192;
                v118[2] = &v194;
                v118[3] = v205;
                v118[4] = v197;
                unint64_t v201 = v118;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
                std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
                __N += 4 * v187;
                v111 += v187;
              }
              while ((unint64_t)(*a3)[6] > v111);
            }
            goto LABEL_212;
          }
          float v21 = v193;
        }
        LODWORD(__N) = *((_DWORD *)v21 - 1);
        int v193 = v21 - 4;
        v195 -= 8;
        unint64_t v38 = *(void *)(*(void *)v3 + 152);
        uint64_t v186 = (float *)(*a3)[19];
        unint64_t v187 = v38;
        unint64_t v39 = __C;
        unint64_t v40 = v201;
        uint64_t v41 = (*a3)[6];
        if (v193 == v192)
        {
          if (v41)
          {
            unint64_t v73 = 0;
            uint64_t v74 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
            do
            {
              uint64_t v75 = 0;
              if ((v74 & 0x80000000) == 0)
              {
                uint64_t v76 = v74;
                int v77 = v73;
                do
                {
                  ldiv_t v78 = ldiv(v77, v39[v76]);
                  int v77 = v78.quot;
                  v75 += v40[v76--] * v78.rem;
                }
                while (v76 != -1);
              }
              uint64_t v79 = v186;
              *uint64_t v186 = INFINITY;
              LODWORD(__C) = 0;
              vDSP_minv((const float *)(v187 + 4 * (int)v75), 1, (float *)&__C, (int)__N);
              float v80 = *v79;
              if (*v79 > *(float *)&__C) {
                float v80 = *(float *)&__C;
              }
              *uint64_t v79 = v80;
              ++v73;
              ++v186;
            }
            while ((unint64_t)(*a3)[6] > v73);
          }
        }
        else if (v41)
        {
          unint64_t v42 = 0;
          uint64_t v43 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
          do
          {
            uint64_t v44 = 0;
            if ((v43 & 0x80000000) == 0)
            {
              uint64_t v45 = v43;
              int v46 = v42;
              do
              {
                ldiv_t v47 = ldiv(v46, v39[v45]);
                int v46 = v47.quot;
                v44 += v40[v45--] * v47.rem;
              }
              while (v45 != -1);
            }
            int v185 = v44;
            *uint64_t v186 = INFINITY;
            uint64_t v198 = 0;
            char v48 = operator new(0x30uLL);
            *char v48 = &unk_27062B3F8;
            v48[1] = &v183;
            v48[2] = &v187;
            v48[3] = &v185;
            v48[4] = &v186;
            v48[5] = &__N;
            uint64_t v198 = v48;
            uint64_t v206 = 0;
            int v49 = operator new(0x28uLL);
            *int v49 = &unk_27062B018;
            v49[1] = &v192;
            v49[2] = &v194;
            v49[3] = v205;
            v49[4] = v197;
            unint64_t v201 = v49;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
            std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
            ++v42;
            ++v186;
          }
          while ((unint64_t)(*a3)[6] > v42);
        }
        goto LABEL_212;
      case 2:
        float v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (void)(*a3)[6]));
        int v202 = &unk_27062AEC8;
        uint64_t v203 = mlx::core::allocator::free;
        unint64_t v204 = &v202;
        mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)&v202);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v202);
        int v189 = 0;
        uint64_t v190 = 0;
        __n128 __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
        float v8 = (void *)(a1 + 24);
        if (__p)
        {
          int v189 = __p;
          operator delete(__p);
        }
        if (v191 == 1)
        {
          uint64_t v33 = v193;
          if (v193 - (unsigned char *)v192 == 4)
          {
            if ((*a3)[6])
            {
              unint64_t v34 = 0;
              float v35 = (*a3)[19];
              float v36 = *(const float **)(*(void *)v3 + 152);
              vDSP_Length v37 = *(int *)v192;
              do
              {
                v35[v34] = 0;
                LODWORD(__C) = 0;
                vDSP_sve(v36, 1, (float *)&__C, v37);
                *(float *)&v35[v34] = *(float *)&__C + *(float *)&v35[v34];
                ++v34;
                v36 += v37;
              }
              while ((unint64_t)(*a3)[6] > v34);
            }
            goto LABEL_216;
          }
          goto LABEL_69;
        }
        if (!v191)
        {
          float v9 = (float *)(*a3)[19];
          float *v9 = 0.0;
          int v10 = *(const float **)(*(void *)v3 + 152);
          vDSP_Length v11 = *(int *)(*(void *)v3 + 48);
          LODWORD(__C) = 0;
          vDSP_sve(v10, 1, (float *)&__C, v11);
          float v12 = *(float *)&__C + *v9;
LABEL_27:
          float *v9 = v12;
LABEL_216:
          if (v194)
          {
            uint64_t v195 = (char *)v194;
            operator delete(v194);
          }
          if (v192)
          {
            int v193 = v192;
            operator delete(v192);
          }
          return;
        }
        if ((v191 & 0xFFFFFFFD) == 1)
        {
          uint64_t v33 = v193;
LABEL_69:
          LODWORD(__N) = *((_DWORD *)v33 - 1);
          int v193 = v33 - 4;
          v195 -= 8;
          unint64_t v60 = *(void *)(*(void *)v3 + 152);
          uint64_t v186 = (float *)(*a3)[19];
          unint64_t v187 = v60;
          unint64_t v39 = __C;
          unint64_t v40 = v201;
          unint64_t v61 = (*a3)[6];
          if (v193 == v192)
          {
            if (v61)
            {
              unint64_t v89 = 0;
              uint64_t v90 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
              do
              {
                uint64_t v91 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v92 = v90;
                  int v93 = v89;
                  do
                  {
                    ldiv_t v94 = ldiv(v93, v39[v92]);
                    int v93 = v94.quot;
                    v91 += v40[v92--] * v94.rem;
                  }
                  while (v92 != -1);
                }
                unint64_t v95 = v186;
                *uint64_t v186 = 0.0;
                LODWORD(__C) = 0;
                vDSP_sve((const float *)(v187 + 4 * (int)v91), 1, (float *)&__C, (int)__N);
                float *v95 = *(float *)&__C + *v95;
                ++v89;
                ++v186;
              }
              while ((unint64_t)(*a3)[6] > v89);
            }
          }
          else if (v61)
          {
            unint64_t v62 = 0;
            uint64_t v63 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
            do
            {
              uint64_t v64 = 0;
              if ((v63 & 0x80000000) == 0)
              {
                uint64_t v65 = v63;
                int v66 = v62;
                do
                {
                  ldiv_t v67 = ldiv(v66, v39[v65]);
                  int v66 = v67.quot;
                  v64 += v40[v65--] * v67.rem;
                }
                while (v65 != -1);
              }
              int v185 = v64;
              *uint64_t v186 = 0.0;
              uint64_t v198 = 0;
              unint64_t v68 = operator new(0x30uLL);
              *unint64_t v68 = &unk_27062B0E8;
              v68[1] = &v183;
              v68[2] = &v187;
              v68[3] = &v185;
              v68[4] = &v186;
              v68[5] = &__N;
              uint64_t v198 = v68;
              uint64_t v206 = 0;
              unint64_t v69 = operator new(0x28uLL);
              *unint64_t v69 = &unk_27062B018;
              v69[1] = &v192;
              v69[2] = &v194;
              void v69[3] = v205;
              v69[4] = v197;
              unint64_t v201 = v69;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
              std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
              ++v62;
              ++v186;
            }
            while ((unint64_t)(*a3)[6] > v62);
          }
          goto LABEL_212;
        }
        switch(v191)
        {
          case 2:
            uint64_t v72 = v193;
            if (v193 - (unsigned char *)v192 == 4)
            {
              uint64_t v151 = *((int *)v193 - 1);
              unint64_t v152 = *((void *)v195 - 1);
              v193 -= 4;
              v195 -= 8;
              if ((*a3)[6])
              {
                LODWORD(v153) = 0;
                unint64_t v154 = (float32x4_t *)(*a3)[19];
                uint64_t v155 = *(_OWORD **)(*(void *)v3 + 152);
                do
                {
                  if (v152) {
                    bzero(v154, 4 * v152);
                  }
                  _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(v155, v154, v151, v152);
                  unint64_t v153 = (int)v153 + (int)v152;
                  unint64_t v154 = (float32x4_t *)((char *)v154 + 4 * v152);
                  uint64_t v155 = (_OWORD *)((char *)v155 + 4 * v152 * v151);
                }
                while (v153 < (unint64_t)(*a3)[6]);
              }
              goto LABEL_216;
            }
            break;
          case 5:
            unint64_t v187 = *(void *)(*(void *)v3 + 152);
            unsigned __int8 v128 = (*a3)[19];
            unint64_t v39 = __C;
            unint64_t v40 = v201;
            if ((*a3)[6])
            {
              unint64_t v129 = 0;
              uint64_t v130 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
              do
              {
                uint64_t v131 = 0;
                if ((v130 & 0x80000000) == 0)
                {
                  uint64_t v132 = v130;
                  int v133 = v129;
                  do
                  {
                    ldiv_t v134 = ldiv(v133, v39[v132]);
                    int v133 = v134.quot;
                    v131 += v40[v132--] * v134.rem;
                  }
                  while (v132 != -1);
                }
                LODWORD(v186) = v131;
                LODWORD(__N) = 0;
                uint64_t v198 = 0;
                ldiv_t v135 = operator new(0x28uLL);
                *ldiv_t v135 = &unk_27062B1F8;
                v135[1] = &v185;
                v135[2] = &__N;
                v135[3] = &v187;
                v135[4] = &v186;
                uint64_t v198 = v135;
                uint64_t v206 = 0;
                uint64_t v136 = operator new(0x28uLL);
                *uint64_t v136 = &unk_27062B018;
                v136[1] = &v192;
                v136[2] = &v194;
                v136[3] = v205;
                v136[4] = v197;
                unint64_t v201 = v136;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
                std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
                *v128++ = __N;
                ++v129;
              }
              while ((unint64_t)(*a3)[6] > v129);
            }
            goto LABEL_212;
          case 4:
            uint64_t v72 = v193;
            break;
          default:
            goto LABEL_216;
        }
        int v185 = *((_DWORD *)v72 - 1);
        unint64_t v187 = *((void *)v195 - 1);
        int v193 = v72 - 4;
        v195 -= 8;
        uint64_t v186 = *(float **)(*(void *)v3 + 152);
        vDSP_Length __N = (vDSP_Length)(*a3)[19];
        unint64_t v39 = __C;
        unint64_t v40 = v201;
        int v156 = (*a3)[6];
        if (v193 == v192)
        {
          if (v156)
          {
            int v177 = 0;
            uint64_t v178 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
            do
            {
              uint64_t v179 = 0;
              if ((v178 & 0x80000000) == 0)
              {
                uint64_t v180 = v178;
                int v181 = v177;
                do
                {
                  ldiv_t v182 = ldiv(v181, v39[v180]);
                  int v181 = v182.quot;
                  v179 += v40[v180--] * v182.rem;
                }
                while (v180 != -1);
              }
              if (v187) {
                bzero((void *)__N, 4 * v187);
              }
              _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(&v186[(int)v179], (float32x4_t *)__N, v185, v187);
              __N += 4 * v187;
              v177 += v187;
            }
            while ((unint64_t)(*a3)[6] > v177);
          }
        }
        else if (v156)
        {
          int v157 = 0;
          uint64_t v158 = ((unint64_t)(v200 - (void)__C) >> 2) - 1;
          do
          {
            uint64_t v159 = 0;
            if ((v158 & 0x80000000) == 0)
            {
              uint64_t v160 = v158;
              int v161 = v157;
              do
              {
                ldiv_t v162 = ldiv(v161, v39[v160]);
                int v161 = v162.quot;
                v159 += v40[v160--] * v162.rem;
              }
              while (v160 != -1);
            }
            int v183 = v159;
            if (v187) {
              bzero((void *)__N, 4 * v187);
            }
            uint64_t v198 = 0;
            unsigned int v163 = operator new(0x38uLL);
            *unsigned int v163 = &unk_27062B178;
            v163[1] = &v196;
            v163[2] = &v186;
            v163[3] = &v183;
            v163[4] = &__N;
            v163[5] = &v185;
            v163[6] = &v187;
            uint64_t v198 = v163;
            uint64_t v206 = 0;
            int v164 = operator new(0x28uLL);
            *int v164 = &unk_27062B018;
            v164[1] = &v192;
            v164[2] = &v194;
            v164[3] = v205;
            v164[4] = v197;
            unint64_t v201 = v164;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v205);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&__C);
            std::function<void ()(int,int)>::operator()((uint64_t)v205, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v205);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v197);
            __N += 4 * v187;
            v157 += v187;
          }
          while ((unint64_t)(*a3)[6] > v157);
        }
LABEL_212:
        if (v40) {
          operator delete(v40);
        }
        if (v39) {
          operator delete(v39);
        }
        goto LABEL_216;
    }
  }
  mlx::core::Reduce::eval(a1, (uint64_t)a2, a3);
}

void sub_256D93F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t mlx::core::UnaryPrimitive::eval_cpu(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, *a3);
}

uint64_t mlx::core::UnaryPrimitive::eval_gpu(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 88))(a1, a2, *a3);
}

void *mlx::core::Reduce::print(void *result, void *a2)
{
  switch(*((_DWORD *)result + 5))
  {
    case 0:
      uint64_t v2 = "And";
      goto LABEL_9;
    case 1:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Or", 2);
    case 2:
      uint64_t v2 = "Sum";
      goto LABEL_9;
    case 3:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Prod", 4);
    case 4:
      uint64_t v2 = "Min";
      goto LABEL_9;
    case 5:
      uint64_t v2 = "Max";
LABEL_9:
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v2, 3);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Reduce::~Reduce(mlx::core::Reduce *this)
{
  *(void *)this = &unk_27062AF78;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_27062AF78;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void mlx::core::anonymous namespace'::get_reduction_plan(mlx::core::array *this@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)this;
  float v7 = *a2;
  if (*(void *)(*(void *)this + 48) == *(void *)(*(void *)this + 160)
    && (char *)a2[1] - (char *)v7 == *(void *)(v6 + 8) - *(void *)v6
    && (*(unsigned char *)(v6 + 168) & 1) != 0)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    return;
  }
  if ((*(unsigned char *)(v6 + 168) & 2) == 0)
  {
LABEL_56:
    uint64_t v137 = 0;
    unint64_t v138 = 0;
    v139[0] = 0;
    int v115 = a2;
    int v49 = a2[1];
    if (v7 == v49)
    {
      unint64_t v55 = 0;
      uint64_t v65 = 0;
    }
    else
    {
      do
      {
        int v50 = *v7;
        unsigned int v51 = mlx::core::array::shape(this, *v7);
        uint64_t v52 = *(void *)(*(void *)(*(void *)this + 24) + 8 * v50);
        uint64_t v53 = v51;
        uint64_t v54 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          uint64_t v56 = (v138 - v137) >> 4;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = v139[0] - (void)v137;
          if ((uint64_t)(v139[0] - (void)v137) >> 3 > v57) {
            unint64_t v57 = v58 >> 3;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59) {
            unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v139, v59);
          }
          else {
            unint64_t v60 = 0;
          }
          unint64_t v61 = &v60[16 * v56];
          *(void *)unint64_t v61 = v53;
          *((void *)v61 + 1) = v52;
          uint64_t v63 = v137;
          unint64_t v62 = v138;
          uint64_t v64 = v61;
          if (v138 != v137)
          {
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v62 - 1);
              v64 -= 16;
              v62 -= 16;
            }
            while (v62 != v63);
            unint64_t v62 = v137;
          }
          unint64_t v55 = (unint64_t)(v61 + 16);
          uint64_t v137 = v64;
          unint64_t v138 = v61 + 16;
          v139[0] = &v60[16 * v59];
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(void *)unint64_t v138 = v51;
          *((void *)v54 + 1) = v52;
          unint64_t v55 = (unint64_t)(v54 + 16);
        }
        unint64_t v138 = (char *)v55;
        ++v7;
      }
      while (v7 != v49);
      uint64_t v65 = (int *)v137;
    }
    unint64_t v66 = 126 - 2 * __clz((uint64_t)(v55 - (void)v65) >> 4);
    if ((int *)v55 == v65) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = v66;
    }
    unint64_t v68 = (int *)v137;
    unint64_t v69 = (int *)v138;
    unint64_t v70 = (unint64_t)(v138 - v137) >> 4;
    unint64_t v71 = (v70 - 1);
    if ((int)v71 >= 1)
    {
      uint64_t v72 = &v137[16 * v71];
      do
      {
        uint64_t v73 = (v70 - 2);
        unint64_t v70 = v71;
        uint64_t v74 = (char *)&v68[4 * v71];
        uint64_t v75 = *(int *)v74;
        uint64_t v76 = *((void *)v74 + 1);
        int v77 = (char *)&v68[4 * v73];
        if (*((void *)v77 + 1) == v76 * v75)
        {
          int v78 = *(_DWORD *)v77;
          uint64_t v79 = (int *)(v74 + 16);
          if (v74 + 16 != (char *)v69)
          {
            uint64_t v74 = v72;
            do
            {
              *(v79 - 4) = *v79;
              *((void *)v79 - 1) = *((void *)v79 + 1);
              v79 += 4;
              v74 += 16;
            }
            while (v79 != v69);
          }
          unint64_t v138 = v74;
          *(_DWORD *)int v77 = v78 * v75;
          *(void *)&v68[4 * v73 + 2] = v76;
          unint64_t v69 = (int *)v74;
        }
        unint64_t v71 = v70 - 1;
        v72 -= 16;
      }
      while ((int)v70 - 1 > 0);
    }
    ldiv_t v134 = 0;
    ldiv_t v135 = 0;
    unint64_t v136 = 0;
    __n128 __p = 0;
    unint64_t v126 = 0;
    unint64_t v127 = 0;
    do
    {
      int v80 = *v68;
      uint64_t v81 = *((void *)v68 + 1);
      uint64_t v82 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v84 = v134;
        uint64_t v85 = (v135 - v134) >> 2;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v87 = v136 - (void)v134;
        if ((uint64_t)(v136 - (void)v134) >> 1 > v86) {
          unint64_t v86 = v87 >> 1;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          unint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v88);
          uint64_t v84 = v134;
          uint64_t v82 = v135;
        }
        else
        {
          unint64_t v89 = 0;
        }
        uint64_t v90 = &v89[4 * v85];
        *(_DWORD *)uint64_t v90 = v80;
        uint64_t v83 = v90 + 4;
        while (v82 != v84)
        {
          int v91 = *((_DWORD *)v82 - 1);
          v82 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        ldiv_t v134 = v90;
        ldiv_t v135 = v83;
        unint64_t v136 = (unint64_t)&v89[4 * v88];
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        *(_DWORD *)ldiv_t v135 = v80;
        uint64_t v83 = v82 + 4;
      }
      ldiv_t v135 = v83;
      uint64_t v92 = v126;
      if ((unint64_t)v126 >= v127)
      {
        ldiv_t v94 = __p;
        uint64_t v95 = ((char *)v126 - (unsigned char *)__p) >> 3;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v97 = v127 - (void)__p;
        if ((uint64_t)(v127 - (void)__p) >> 2 > v96) {
          unint64_t v96 = v97 >> 2;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98)
        {
          uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v98);
          ldiv_t v94 = __p;
          uint64_t v92 = v126;
        }
        else
        {
          uint64_t v99 = 0;
        }
        uint64_t v100 = &v99[8 * v95];
        *(void *)uint64_t v100 = v81;
        int v93 = v100 + 8;
        while (v92 != v94)
        {
          uint64_t v101 = *--v92;
          *((void *)v100 - 1) = v101;
          v100 -= 8;
        }
        __n128 __p = v100;
        unint64_t v126 = v93;
        unint64_t v127 = (unint64_t)&v99[8 * v98];
        if (v94) {
          operator delete(v94);
        }
      }
      else
      {
        *unint64_t v126 = v81;
        int v93 = v92 + 1;
      }
      unint64_t v126 = v93;
      v68 += 4;
    }
    while (v68 != v69);
    unint64_t v102 = *(v93 - 1);
    if (v102 == 1)
    {
      long long v123 = 0uLL;
      uint64_t v124 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v123, v134, (uint64_t)v135, (v135 - v134) >> 2);
      uint64_t v103 = a3;
      memset(v122, 0, sizeof(v122));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v122, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
      *(_DWORD *)a3 = 3;
      *(_OWORD *)(a3 + 8) = v123;
      uint64_t v105 = v124;
      long long v123 = 0uLL;
      uint64_t v124 = 0;
      uint64_t v106 = v122[0];
      *(void *)(a3 + 24) = v105;
      *(void *)(a3 + 32) = v106;
      unint64_t v107 = v122;
    }
    else
    {
      uint64_t v103 = a3;
      if (v102)
      {
        uint64_t v108 = (*(void *)(*(void *)this + 8) - **(void **)this) >> 2;
        if ((int)v108 - 1 < 0)
        {
          int v110 = 1;
        }
        else
        {
          uint64_t v109 = 8 * (v108 - 1);
          int v110 = 1;
          do
          {
            LODWORD(v108) = v108 - 1;
            if (v108 != *(v115[1] - 1))
            {
              if (*(void *)(*(void *)(*(void *)this + 24) + v109) != v110) {
                break;
              }
              v110 *= mlx::core::array::shape(this, v108);
            }
            v109 -= 8;
          }
          while ((int)v108 > 0);
          unint64_t v102 = *(v126 - 1);
        }
        unint64_t v104 = v134;
        if (v102 <= v110)
        {
          long long v120 = 0uLL;
          uint64_t v121 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, v134, (uint64_t)v135, (v135 - v134) >> 2);
          memset(v119, 0, sizeof(v119));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v119, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
          *(_DWORD *)a3 = 4;
          *(_OWORD *)(a3 + 8) = v120;
          uint64_t v113 = v121;
          long long v120 = 0uLL;
          uint64_t v121 = 0;
          uint64_t v114 = v119[0];
          *(void *)(a3 + 24) = v113;
          *(void *)(a3 + 32) = v114;
          unint64_t v107 = v119;
          goto LABEL_137;
        }
      }
      else
      {
        unint64_t v104 = v134;
      }
      long long v117 = 0uLL;
      uint64_t v118 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v117, v104, (uint64_t)v135, (v135 - v104) >> 2);
      memset(v116, 0, sizeof(v116));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v116, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
      *(_DWORD *)a3 = 5;
      *(_OWORD *)(a3 + 8) = v117;
      uint64_t v111 = v118;
      long long v117 = 0uLL;
      uint64_t v118 = 0;
      uint64_t v112 = v116[0];
      *(void *)(a3 + 24) = v111;
      *(void *)(a3 + 32) = v112;
      unint64_t v107 = v116;
    }
LABEL_137:
    *(_OWORD *)(v103 + 40) = *(_OWORD *)(v107 + 1);
    v107[1] = 0;
    v107[2] = 0;
    *unint64_t v107 = 0;
    if (__p)
    {
      unint64_t v126 = __p;
      operator delete(__p);
    }
    if (v134)
    {
      ldiv_t v135 = v134;
      operator delete(v134);
    }
    if (v137)
    {
      unint64_t v138 = v137;
      operator delete(v137);
    }
    return;
  }
  int v8 = mlx::core::array::shape(this, *v7);
  float v9 = (char *)operator new(4uLL);
  uint64_t v137 = v9;
  *(_DWORD *)float v9 = v8;
  unint64_t v138 = v9 + 4;
  v139[0] = v9 + 4;
  int v10 = *a2;
  uint64_t v11 = *(void *)(*(void *)(*(void *)this + 24) + 8 * **a2);
  float v12 = (char *)operator new(8uLL);
  ldiv_t v134 = v12;
  *(void *)float v12 = v11;
  uint64_t v13 = v12 + 8;
  ldiv_t v135 = v13;
  unint64_t v136 = (unint64_t)v13;
  if ((unint64_t)((char *)a2[1] - (char *)v10) >= 5)
  {
    unint64_t v14 = 1;
    do
    {
      int v15 = v10[v14];
      if (v15 - 1 == v10[v14 - 1])
      {
        int v16 = mlx::core::array::shape(this, v15);
        *((_DWORD *)v138 - 1) *= v16;
        float v17 = a2;
        int v10 = *a2;
        *((void *)v135 - 1) = *(void *)(*(void *)(*(void *)this + 24) + 8 * (*a2)[v14]);
      }
      else
      {
        int v18 = mlx::core::array::shape(this, v15);
        int v19 = v18;
        vDSP_Length v20 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          unint64_t v22 = v137;
          uint64_t v23 = (v138 - v137) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v139[0] - (void)v137;
          if ((uint64_t)(v139[0] - (void)v137) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v139, v26);
            unint64_t v22 = v137;
            vDSP_Length v20 = v138;
          }
          else
          {
            uint64_t v27 = 0;
          }
          unint64_t v28 = &v27[4 * v23];
          *(_DWORD *)unint64_t v28 = v19;
          float v21 = v28 + 4;
          while (v20 != v22)
          {
            int v29 = *((_DWORD *)v20 - 1);
            vDSP_Length v20 = (void *)((char *)v20 - 4);
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          uint64_t v137 = v28;
          unint64_t v138 = v21;
          v139[0] = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v138 = v18;
          float v21 = (char *)v20 + 4;
        }
        unint64_t v138 = v21;
        uint64_t v30 = (*a2)[v14];
        uint64_t v31 = *(void *)(*(void *)this + 24);
        float v32 = v135;
        if ((unint64_t)v135 >= v136)
        {
          unint64_t v34 = v134;
          uint64_t v35 = (v135 - v134) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v136 - (void)v134;
          if ((uint64_t)(v136 - (void)v134) >> 2 > v36) {
            unint64_t v36 = v37 >> 2;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v38);
            unint64_t v34 = v134;
            float v32 = v135;
          }
          else
          {
            unint64_t v39 = 0;
          }
          unint64_t v40 = &v39[8 * v35];
          *(void *)unint64_t v40 = *(void *)(v31 + 8 * v30);
          uint64_t v33 = v40 + 8;
          while (v32 != v34)
          {
            uint64_t v41 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }
          ldiv_t v134 = v40;
          ldiv_t v135 = v33;
          unint64_t v136 = (unint64_t)&v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)ldiv_t v135 = *(void *)(v31 + 8 * v30);
          uint64_t v33 = v32 + 8;
        }
        ldiv_t v135 = v33;
        float v17 = a2;
        int v10 = *a2;
      }
      ++v14;
    }
    while (v14 < v17[1] - v10);
    uint64_t v13 = v135;
  }
  uint64_t v42 = *((void *)v13 - 1);
  if (v42)
  {
    if (v42 == 1)
    {
      long long v132 = 0uLL;
      uint64_t v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v132, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v131, 0, sizeof(v131));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v131, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v132;
      uint64_t v43 = v133;
      long long v132 = 0uLL;
      uint64_t v133 = 0;
      uint64_t v44 = v131[0];
      *(void *)(a3 + 24) = v43;
      *(void *)(a3 + 32) = v44;
      uint64_t v45 = v131;
    }
    else
    {
      long long v129 = 0uLL;
      uint64_t v130 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v129, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v128, 0, sizeof(v128));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v128, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 2;
      *(_OWORD *)(a3 + 8) = v129;
      uint64_t v47 = v130;
      long long v129 = 0uLL;
      uint64_t v130 = 0;
      uint64_t v48 = v128[0];
      *(void *)(a3 + 24) = v47;
      *(void *)(a3 + 32) = v48;
      uint64_t v45 = v128;
    }
    int v46 = 0;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v45 + 1);
    v45[1] = 0;
    v45[2] = 0;
    *uint64_t v45 = 0;
  }
  else
  {
    int v46 = 1;
  }
  if (v134)
  {
    ldiv_t v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    unint64_t v138 = v137;
    operator delete(v137);
  }
  if (v46)
  {
    float v7 = *a2;
    goto LABEL_56;
  }
}

{
  uint64_t v6;
  int *v7;
  int v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int v15;
  int v16;
  int **v17;
  int v18;
  int v19;
  void *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int *v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  int *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int **v115;
  void v116[3];
  long long v117;
  uint64_t v118;
  void v119[3];
  long long v120;
  uint64_t v121;
  void v122[3];
  long long v123;
  uint64_t v124;
  void *__p;
  void *v126;
  unint64_t v127;
  void v128[3];
  long long v129;
  uint64_t v130;
  void v131[3];
  long long v132;
  uint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  void v139[3];

  uint64_t v6 = *(void *)this;
  float v7 = *a2;
  if (*(void *)(*(void *)this + 48) == *(void *)(*(void *)this + 160)
    && (char *)a2[1] - (char *)v7 == *(void *)(v6 + 8) - *(void *)v6
    && (*(unsigned char *)(v6 + 168) & 1) != 0)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    return;
  }
  if ((*(unsigned char *)(v6 + 168) & 2) == 0)
  {
LABEL_56:
    uint64_t v137 = 0;
    unint64_t v138 = 0;
    v139[0] = 0;
    int v115 = a2;
    int v49 = a2[1];
    if (v7 == v49)
    {
      unint64_t v55 = 0;
      uint64_t v65 = 0;
    }
    else
    {
      do
      {
        int v50 = *v7;
        unsigned int v51 = mlx::core::array::shape(this, *v7);
        uint64_t v52 = *(void *)(*(void *)(*(void *)this + 24) + 8 * v50);
        uint64_t v53 = v51;
        uint64_t v54 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          uint64_t v56 = (v138 - v137) >> 4;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = v139[0] - (void)v137;
          if ((uint64_t)(v139[0] - (void)v137) >> 3 > v57) {
            unint64_t v57 = v58 >> 3;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59) {
            unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v139, v59);
          }
          else {
            unint64_t v60 = 0;
          }
          unint64_t v61 = &v60[16 * v56];
          *(void *)unint64_t v61 = v53;
          *((void *)v61 + 1) = v52;
          uint64_t v63 = v137;
          unint64_t v62 = v138;
          uint64_t v64 = v61;
          if (v138 != v137)
          {
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v62 - 1);
              v64 -= 16;
              v62 -= 16;
            }
            while (v62 != v63);
            unint64_t v62 = v137;
          }
          unint64_t v55 = (unint64_t)(v61 + 16);
          uint64_t v137 = v64;
          unint64_t v138 = v61 + 16;
          v139[0] = &v60[16 * v59];
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(void *)unint64_t v138 = v51;
          *((void *)v54 + 1) = v52;
          unint64_t v55 = (unint64_t)(v54 + 16);
        }
        unint64_t v138 = (char *)v55;
        ++v7;
      }
      while (v7 != v49);
      uint64_t v65 = (int *)v137;
    }
    unint64_t v66 = 126 - 2 * __clz((uint64_t)(v55 - (void)v65) >> 4);
    if ((int *)v55 == v65) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = v66;
    }
    unint64_t v68 = (int *)v137;
    unint64_t v69 = (int *)v138;
    unint64_t v70 = (unint64_t)(v138 - v137) >> 4;
    unint64_t v71 = (v70 - 1);
    if ((int)v71 >= 1)
    {
      uint64_t v72 = &v137[16 * v71];
      do
      {
        uint64_t v73 = (v70 - 2);
        unint64_t v70 = v71;
        uint64_t v74 = (char *)&v68[4 * v71];
        uint64_t v75 = *(int *)v74;
        uint64_t v76 = *((void *)v74 + 1);
        int v77 = (char *)&v68[4 * v73];
        if (*((void *)v77 + 1) == v76 * v75)
        {
          int v78 = *(_DWORD *)v77;
          uint64_t v79 = (int *)(v74 + 16);
          if (v74 + 16 != (char *)v69)
          {
            uint64_t v74 = v72;
            do
            {
              *(v79 - 4) = *v79;
              *((void *)v79 - 1) = *((void *)v79 + 1);
              v79 += 4;
              v74 += 16;
            }
            while (v79 != v69);
          }
          unint64_t v138 = v74;
          *(_DWORD *)int v77 = v78 * v75;
          *(void *)&v68[4 * v73 + 2] = v76;
          unint64_t v69 = (int *)v74;
        }
        unint64_t v71 = v70 - 1;
        v72 -= 16;
      }
      while ((int)v70 - 1 > 0);
    }
    ldiv_t v134 = 0;
    ldiv_t v135 = 0;
    unint64_t v136 = 0;
    __n128 __p = 0;
    unint64_t v126 = 0;
    unint64_t v127 = 0;
    do
    {
      int v80 = *v68;
      uint64_t v81 = *((void *)v68 + 1);
      uint64_t v82 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v84 = v134;
        uint64_t v85 = (v135 - v134) >> 2;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v87 = v136 - (void)v134;
        if ((uint64_t)(v136 - (void)v134) >> 1 > v86) {
          unint64_t v86 = v87 >> 1;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          unint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v88);
          uint64_t v84 = v134;
          uint64_t v82 = v135;
        }
        else
        {
          unint64_t v89 = 0;
        }
        uint64_t v90 = &v89[4 * v85];
        *(_DWORD *)uint64_t v90 = v80;
        uint64_t v83 = v90 + 4;
        while (v82 != v84)
        {
          int v91 = *((_DWORD *)v82 - 1);
          v82 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        ldiv_t v134 = v90;
        ldiv_t v135 = v83;
        unint64_t v136 = (unint64_t)&v89[4 * v88];
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        *(_DWORD *)ldiv_t v135 = v80;
        uint64_t v83 = v82 + 4;
      }
      ldiv_t v135 = v83;
      uint64_t v92 = v126;
      if ((unint64_t)v126 >= v127)
      {
        ldiv_t v94 = __p;
        uint64_t v95 = ((char *)v126 - (unsigned char *)__p) >> 3;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v97 = v127 - (void)__p;
        if ((uint64_t)(v127 - (void)__p) >> 2 > v96) {
          unint64_t v96 = v97 >> 2;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98)
        {
          uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v98);
          ldiv_t v94 = __p;
          uint64_t v92 = v126;
        }
        else
        {
          uint64_t v99 = 0;
        }
        uint64_t v100 = &v99[8 * v95];
        *(void *)uint64_t v100 = v81;
        int v93 = v100 + 8;
        while (v92 != v94)
        {
          uint64_t v101 = *--v92;
          *((void *)v100 - 1) = v101;
          v100 -= 8;
        }
        __n128 __p = v100;
        unint64_t v126 = v93;
        unint64_t v127 = (unint64_t)&v99[8 * v98];
        if (v94) {
          operator delete(v94);
        }
      }
      else
      {
        *unint64_t v126 = v81;
        int v93 = v92 + 1;
      }
      unint64_t v126 = v93;
      v68 += 4;
    }
    while (v68 != v69);
    unint64_t v102 = *(v93 - 1);
    if (v102 == 1)
    {
      long long v123 = 0uLL;
      uint64_t v124 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v123, v134, (uint64_t)v135, (v135 - v134) >> 2);
      uint64_t v103 = a3;
      memset(v122, 0, sizeof(v122));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v122, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
      *(_DWORD *)a3 = 3;
      *(_OWORD *)(a3 + 8) = v123;
      uint64_t v105 = v124;
      long long v123 = 0uLL;
      uint64_t v124 = 0;
      uint64_t v106 = v122[0];
      *(void *)(a3 + 24) = v105;
      *(void *)(a3 + 32) = v106;
      unint64_t v107 = v122;
    }
    else
    {
      uint64_t v103 = a3;
      if (v102)
      {
        uint64_t v108 = (*(void *)(*(void *)this + 8) - **(void **)this) >> 2;
        if ((int)v108 - 1 < 0)
        {
          int v110 = 1;
        }
        else
        {
          uint64_t v109 = 8 * (v108 - 1);
          int v110 = 1;
          do
          {
            LODWORD(v108) = v108 - 1;
            if (v108 != *(v115[1] - 1))
            {
              if (*(void *)(*(void *)(*(void *)this + 24) + v109) != v110) {
                break;
              }
              v110 *= mlx::core::array::shape(this, v108);
            }
            v109 -= 8;
          }
          while ((int)v108 > 0);
          unint64_t v102 = *(v126 - 1);
        }
        unint64_t v104 = v134;
        if (v102 <= v110)
        {
          long long v120 = 0uLL;
          uint64_t v121 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, v134, (uint64_t)v135, (v135 - v134) >> 2);
          memset(v119, 0, sizeof(v119));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v119, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
          *(_DWORD *)a3 = 4;
          *(_OWORD *)(a3 + 8) = v120;
          uint64_t v113 = v121;
          long long v120 = 0uLL;
          uint64_t v121 = 0;
          uint64_t v114 = v119[0];
          *(void *)(a3 + 24) = v113;
          *(void *)(a3 + 32) = v114;
          unint64_t v107 = v119;
          goto LABEL_137;
        }
      }
      else
      {
        unint64_t v104 = v134;
      }
      long long v117 = 0uLL;
      uint64_t v118 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v117, v104, (uint64_t)v135, (v135 - v104) >> 2);
      memset(v116, 0, sizeof(v116));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v116, __p, (uint64_t)v126, ((char *)v126 - (unsigned char *)__p) >> 3);
      *(_DWORD *)a3 = 5;
      *(_OWORD *)(a3 + 8) = v117;
      uint64_t v111 = v118;
      long long v117 = 0uLL;
      uint64_t v118 = 0;
      uint64_t v112 = v116[0];
      *(void *)(a3 + 24) = v111;
      *(void *)(a3 + 32) = v112;
      unint64_t v107 = v116;
    }
LABEL_137:
    *(_OWORD *)(v103 + 40) = *(_OWORD *)(v107 + 1);
    v107[1] = 0;
    v107[2] = 0;
    *unint64_t v107 = 0;
    if (__p)
    {
      unint64_t v126 = __p;
      operator delete(__p);
    }
    if (v134)
    {
      ldiv_t v135 = v134;
      operator delete(v134);
    }
    if (v137)
    {
      unint64_t v138 = v137;
      operator delete(v137);
    }
    return;
  }
  int v8 = mlx::core::array::shape(this, *v7);
  float v9 = (char *)operator new(4uLL);
  uint64_t v137 = v9;
  *(_DWORD *)float v9 = v8;
  unint64_t v138 = v9 + 4;
  v139[0] = v9 + 4;
  int v10 = *a2;
  uint64_t v11 = *(void *)(*(void *)(*(void *)this + 24) + 8 * **a2);
  float v12 = (char *)operator new(8uLL);
  ldiv_t v134 = v12;
  *(void *)float v12 = v11;
  uint64_t v13 = v12 + 8;
  ldiv_t v135 = v13;
  unint64_t v136 = (unint64_t)v13;
  if ((unint64_t)((char *)a2[1] - (char *)v10) >= 5)
  {
    unint64_t v14 = 1;
    do
    {
      int v15 = v10[v14];
      if (v15 - 1 == v10[v14 - 1])
      {
        int v16 = mlx::core::array::shape(this, v15);
        *((_DWORD *)v138 - 1) *= v16;
        float v17 = a2;
        int v10 = *a2;
        *((void *)v135 - 1) = *(void *)(*(void *)(*(void *)this + 24) + 8 * (*a2)[v14]);
      }
      else
      {
        int v18 = mlx::core::array::shape(this, v15);
        int v19 = v18;
        vDSP_Length v20 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          unint64_t v22 = v137;
          uint64_t v23 = (v138 - v137) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v139[0] - (void)v137;
          if ((uint64_t)(v139[0] - (void)v137) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v139, v26);
            unint64_t v22 = v137;
            vDSP_Length v20 = v138;
          }
          else
          {
            uint64_t v27 = 0;
          }
          unint64_t v28 = &v27[4 * v23];
          *(_DWORD *)unint64_t v28 = v19;
          float v21 = v28 + 4;
          while (v20 != v22)
          {
            int v29 = *((_DWORD *)v20 - 1);
            vDSP_Length v20 = (void *)((char *)v20 - 4);
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          uint64_t v137 = v28;
          unint64_t v138 = v21;
          v139[0] = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v138 = v18;
          float v21 = (char *)v20 + 4;
        }
        unint64_t v138 = v21;
        uint64_t v30 = (*a2)[v14];
        uint64_t v31 = *(void *)(*(void *)this + 24);
        float v32 = v135;
        if ((unint64_t)v135 >= v136)
        {
          unint64_t v34 = v134;
          uint64_t v35 = (v135 - v134) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v136 - (void)v134;
          if ((uint64_t)(v136 - (void)v134) >> 2 > v36) {
            unint64_t v36 = v37 >> 2;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v38);
            unint64_t v34 = v134;
            float v32 = v135;
          }
          else
          {
            unint64_t v39 = 0;
          }
          unint64_t v40 = &v39[8 * v35];
          *(void *)unint64_t v40 = *(void *)(v31 + 8 * v30);
          uint64_t v33 = v40 + 8;
          while (v32 != v34)
          {
            uint64_t v41 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }
          ldiv_t v134 = v40;
          ldiv_t v135 = v33;
          unint64_t v136 = (unint64_t)&v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)ldiv_t v135 = *(void *)(v31 + 8 * v30);
          uint64_t v33 = v32 + 8;
        }
        ldiv_t v135 = v33;
        float v17 = a2;
        int v10 = *a2;
      }
      ++v14;
    }
    while (v14 < v17[1] - v10);
    uint64_t v13 = v135;
  }
  uint64_t v42 = *((void *)v13 - 1);
  if (v42)
  {
    if (v42 == 1)
    {
      long long v132 = 0uLL;
      uint64_t v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v132, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v131, 0, sizeof(v131));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v131, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v132;
      uint64_t v43 = v133;
      long long v132 = 0uLL;
      uint64_t v133 = 0;
      uint64_t v44 = v131[0];
      *(void *)(a3 + 24) = v43;
      *(void *)(a3 + 32) = v44;
      uint64_t v45 = v131;
    }
    else
    {
      long long v129 = 0uLL;
      uint64_t v130 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v129, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v128, 0, sizeof(v128));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v128, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 2;
      *(_OWORD *)(a3 + 8) = v129;
      uint64_t v47 = v130;
      long long v129 = 0uLL;
      uint64_t v130 = 0;
      uint64_t v48 = v128[0];
      *(void *)(a3 + 24) = v47;
      *(void *)(a3 + 32) = v48;
      uint64_t v45 = v128;
    }
    int v46 = 0;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v45 + 1);
    v45[1] = 0;
    v45[2] = 0;
    *uint64_t v45 = 0;
  }
  else
  {
    int v46 = 1;
  }
  if (v134)
  {
    ldiv_t v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    unint64_t v138 = v137;
    operator delete(v137);
  }
  if (v46)
  {
    float v7 = *a2;
    goto LABEL_56;
  }
}

void sub_256D94BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  unint64_t v40 = *(void **)(v38 - 144);
  if (v40)
  {
    *(void *)(v38 - 136) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(v38 - 120);
  if (v41)
  {
    *(void *)(v38 - 112) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::anonymous namespace'::shapes_without_reduction_axes(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  int v19 = 0;
  uint64_t v20 = 0;
  int v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
  uint64_t v7 = *a1;
  int v16 = 0;
  uint64_t v17 = 0;
  __n128 __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 24), *(void *)(v7 + 32), (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3);
  uint64_t v8 = (a2[1] - *a2) >> 2;
  if ((int)v8 - 1 >= 0)
  {
    uint64_t v9 = 4 * (v8 - 1);
    do
    {
      uint64_t v10 = *(int *)(*a2 + v9);
      uint64_t v11 = (char *)v18 + 4 * v10;
      int64_t v12 = v19 - (v11 + 4);
      if (v19 != v11 + 4) {
        memmove((char *)v18 + 4 * v10, v11 + 4, v19 - (v11 + 4));
      }
      int v19 = &v11[v12];
      uint64_t v13 = (char *)__p + 8 * v10;
      int64_t v14 = v16 - (v13 + 8);
      if (v16 != v13 + 8) {
        memmove((char *)__p + 8 * v10, v13 + 8, v16 - (v13 + 8));
      }
      int v16 = &v13[v14];
      LODWORD(v8) = v8 - 1;
      v9 -= 4;
    }
    while ((int)v8 > 0);
  }
  std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(a3, (uint64_t)&v18, (uint64_t)&__p);
  if (__p)
  {
    int v16 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
  {
    int v19 = (char *)v18;
    operator delete(v18);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  void *__p;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;

  uint64_t v6 = *a1;
  int v19 = 0;
  uint64_t v20 = 0;
  int v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
  uint64_t v7 = *a1;
  int v16 = 0;
  uint64_t v17 = 0;
  __n128 __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 24), *(void *)(v7 + 32), (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3);
  uint64_t v8 = (a2[1] - *a2) >> 2;
  if ((int)v8 - 1 >= 0)
  {
    uint64_t v9 = 4 * (v8 - 1);
    do
    {
      uint64_t v10 = *(int *)(*a2 + v9);
      uint64_t v11 = (char *)v18 + 4 * v10;
      int64_t v12 = v19 - (v11 + 4);
      if (v19 != v11 + 4) {
        memmove((char *)v18 + 4 * v10, v11 + 4, v19 - (v11 + 4));
      }
      int v19 = &v11[v12];
      uint64_t v13 = (char *)__p + 8 * v10;
      int64_t v14 = v16 - (v13 + 8);
      if (v16 != v13 + 8) {
        memmove((char *)__p + 8 * v10, v13 + 8, v16 - (v13 + 8));
      }
      int v16 = &v13[v14];
      LODWORD(v8) = v8 - 1;
      v9 -= 4;
    }
    while ((int)v8 > 0);
  }
  std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(a3, (uint64_t)&v18, (uint64_t)&__p);
  if (__p)
  {
    int v16 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
  {
    int v19 = (char *)v18;
    operator delete(v18);
  }
}

void sub_256D94DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  if (a3 >= 1)
  {
    for (int i = 0; i != a3; ++i)
    {
      unint64_t v5 = a4;
      uint64_t v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          float32x4_t v7 = *((float32x4_t *)result + 2);
          float32x4_t v8 = *((float32x4_t *)result + 3);
          float32x4_t v9 = *(float32x4_t *)result;
          float32x4_t v10 = *((float32x4_t *)result + 1);
          result += 4;
          float32x4_t v11 = vaddq_f32(v10, v6[1]);
          float32x4_t v12 = vaddq_f32(v9, *v6);
          float32x4_t v13 = vaddq_f32(v8, v6[3]);
          v6[2] = vaddq_f32(v7, v6[2]);
          v6[3] = v13;
          *uint64_t v6 = v12;
          v6[1] = v11;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        float v14 = *(float *)result;
        uint64_t result = (_OWORD *)((char *)result + 4);
        v6->f32[0] = v6->f32[0] + v14;
        uint64_t v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void mlx::core::ReductionPlan::~ReductionPlan(mlx::core::ReductionPlan *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

int *std::__introsort<std::_ClassicAlgPolicy,mlx::core::anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *,false>(int *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v44 = *(void *)(a2 - 8);
                unint64_t v45 = *(void *)(v10 + 8);
                if (v44 > v45)
                {
                  int v46 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(a2 - 16) = v46;
                  *(void *)(v10 + 8) = v44;
                  *(void *)(a2 - 8) = v45;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                unint64_t v47 = *(void *)(a2 - 8);
                unint64_t v48 = *(void *)(v10 + 56);
                if (v47 > v48)
                {
                  int v49 = *(_DWORD *)(v10 + 48);
                  *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(a2 - 16) = v49;
                  *(void *)(v10 + 56) = v47;
                  *(void *)(a2 - 8) = v48;
                  unint64_t v50 = *(void *)(v10 + 56);
                  unint64_t v51 = *(void *)(v10 + 40);
                  if (v50 > v51)
                  {
                    int v52 = *(_DWORD *)(v10 + 32);
                    int v53 = *(_DWORD *)(v10 + 48);
                    *(_DWORD *)(v10 + 32) = v53;
                    *(_DWORD *)(v10 + 48) = v52;
                    *(void *)(v10 + 40) = v50;
                    *(void *)(v10 + 56) = v51;
                    unint64_t v54 = *(void *)(v10 + 24);
                    if (v50 > v54)
                    {
                      int v55 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v53;
                      *(_DWORD *)(v10 + 32) = v55;
                      *(void *)(v10 + 24) = v50;
                      *(void *)(v10 + 40) = v54;
                      unint64_t v56 = *(void *)(v10 + 8);
                      if (v50 > v56)
                      {
                        int v57 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v53;
                        *(_DWORD *)(v10 + 16) = v57;
                        *(void *)(v10 + 8) = v50;
                        *(void *)(v10 + 24) = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v58 = (_DWORD *)(v10 + 16);
            BOOL v60 = v10 == a2 || v58 == (_DWORD *)a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = (_DWORD *)v10;
                do
                {
                  unint64_t v63 = *((void *)v62 + 3);
                  unint64_t v64 = *((void *)v62 + 1);
                  unint64_t v62 = v58;
                  if (v63 > v64)
                  {
                    int v65 = *v58;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      uint64_t v67 = v10 + v66;
                      *(_DWORD *)(v67 + 16) = *(_DWORD *)(v10 + v66);
                      *(void *)(v67 + 24) = *(void *)(v10 + v66 + 8);
                      if (!v66) {
                        break;
                      }
                      v66 -= 16;
                      if (v63 <= *(void *)(v67 - 8))
                      {
                        uint64_t v68 = v10 + v66 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v68 = v10;
LABEL_84:
                    *(_DWORD *)uint64_t v68 = v65;
                    *(void *)(v68 + 8) = v63;
                  }
                  uint64_t v58 = v62 + 4;
                  v61 += 16;
                }
                while (v62 + 4 != (_DWORD *)a2);
              }
            }
            else if (!v60)
            {
              uint64_t v97 = (unint64_t *)(v10 + 24);
              do
              {
                unint64_t v98 = *(void *)(v9 + 24);
                unint64_t v99 = *(void *)(v9 + 8);
                unint64_t v9 = (unint64_t)v58;
                if (v98 > v99)
                {
                  uint64_t v100 = *(void *)v58;
                  uint64_t v101 = v97;
                  do
                  {
                    unint64_t v102 = v101;
                    *((_DWORD *)v101 - 2) = *((_DWORD *)v101 - 6);
                    unint64_t v103 = *(v101 - 2);
                    v101 -= 2;
                    *unint64_t v102 = v103;
                  }
                  while (v98 > *(v102 - 4));
                  *((_DWORD *)v101 - 2) = v100;
                  *uint64_t v101 = v98;
                }
                uint64_t v58 = (_DWORD *)(v9 + 16);
                v97 += 2;
              }
              while (v9 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v10 + 16 * v72;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    BOOL v74 = *(void *)(v73 + 8) > *(void *)(v73 + 24);
                    v73 += 16 * v74;
                    if (v74) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unint64_t v75 = v10 + 16 * v71;
                  unint64_t v76 = *(void *)(v75 + 8);
                  if (*(void *)(v73 + 8) <= v76)
                  {
                    int v77 = *(_DWORD *)v75;
                    do
                    {
                      unint64_t v78 = v75;
                      unint64_t v75 = v73;
                      *(_DWORD *)unint64_t v78 = *(_DWORD *)v73;
                      *(void *)(v78 + 8) = *(void *)(v73 + 8);
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v79 = (2 * v72) | 1;
                      unint64_t v73 = v10 + 16 * v79;
                      uint64_t v80 = 2 * v72 + 2;
                      if (v80 < (uint64_t)v12)
                      {
                        BOOL v74 = *(void *)(v73 + 8) > *(void *)(v73 + 24);
                        v73 += 16 * v74;
                        if (v74) {
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t result = *(int **)(v73 + 8);
                      uint64_t v72 = v79;
                    }
                    while ((unint64_t)result <= v76);
                    *(_DWORD *)unint64_t v75 = v77;
                    *(void *)(v75 + 8) = v76;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v81 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v82 = 0;
                int v83 = *(_DWORD *)v10;
                uint64_t v84 = *(void *)(v10 + 8);
                unint64_t v85 = v10;
                do
                {
                  uint64_t v86 = v85 + 16 * v82 + 16;
                  uint64_t v87 = (2 * v82) | 1;
                  uint64_t v88 = 2 * v82 + 2;
                  if (v88 < v81)
                  {
                    unint64_t v89 = *(void *)(v86 + 8);
                    unint64_t v90 = *(void *)(v86 + 24);
                    v86 += 16 * (v89 > v90);
                    if (v89 > v90) {
                      uint64_t v87 = v88;
                    }
                  }
                  *(_DWORD *)unint64_t v85 = *(_DWORD *)v86;
                  *(void *)(v85 + 8) = *(void *)(v86 + 8);
                  unint64_t v85 = v86;
                  uint64_t v82 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v86 == a2 - 16)
                {
                  *(_DWORD *)uint64_t v86 = v83;
                  *(void *)(v86 + 8) = v84;
                }
                else
                {
                  *(_DWORD *)uint64_t v86 = *(_DWORD *)(a2 - 16);
                  *(void *)(v86 + 8) = *(void *)(a2 - 8);
                  *(_DWORD *)(a2 - 16) = v83;
                  *(void *)(a2 - 8) = v84;
                  uint64_t v91 = v86 - v10 + 16;
                  if (v91 >= 17)
                  {
                    unint64_t v92 = (((unint64_t)v91 >> 4) - 2) >> 1;
                    uint64_t v93 = v10 + 16 * v92;
                    unint64_t v94 = *(void *)(v86 + 8);
                    if (*(void *)(v93 + 8) > v94)
                    {
                      int v95 = *(_DWORD *)v86;
                      do
                      {
                        uint64_t v96 = v86;
                        uint64_t v86 = v93;
                        *(_DWORD *)uint64_t v96 = *(_DWORD *)v93;
                        *(void *)(v96 + 8) = *(void *)(v93 + 8);
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                        uint64_t v93 = v10 + 16 * v92;
                      }
                      while (*(void *)(v93 + 8) > v94);
                      *(_DWORD *)uint64_t v86 = v95;
                      *(void *)(v86 + 8) = v94;
                    }
                  }
                }
                a2 -= 16;
                BOOL v74 = v81-- <= 2;
              }
              while (!v74);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 16 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            int v15 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
            *(_DWORD *)unint64_t v14 = v15;
            uint64_t v16 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(v14 + 8);
            *(void *)(v14 + 8) = v16;
          }
          else
          {
          }
          --a3;
          uint64_t v17 = *(void *)v9;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 8);
          if (*(void *)(v9 - 8) > v18) {
            goto LABEL_13;
          }
          if (v18 <= *(void *)(a2 - 8))
          {
            unint64_t v35 = v9 + 16;
            do
            {
              unint64_t v10 = v35;
              if (v35 >= a2) {
                break;
              }
              unint64_t v36 = *(void *)(v35 + 8);
              v35 += 16;
            }
            while (v18 <= v36);
          }
          else
          {
            unint64_t v33 = v9;
            do
            {
              unint64_t v10 = v33 + 16;
              unint64_t v34 = *(void *)(v33 + 24);
              v33 += 16;
            }
            while (v18 <= v34);
          }
          unint64_t v37 = a2;
          if (v10 < a2)
          {
            unint64_t v38 = a2;
            do
            {
              unint64_t v37 = v38 - 16;
              unint64_t v39 = *(void *)(v38 - 8);
              v38 -= 16;
            }
            while (v18 > v39);
          }
          while (v10 < v37)
          {
            int v40 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)v37;
            *(_DWORD *)unint64_t v37 = v40;
            uint64_t v41 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(v37 + 8);
            *(void *)(v37 + 8) = v41;
            do
            {
              unint64_t v42 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v18 <= v42);
            do
            {
              unint64_t v43 = *(void *)(v37 - 8);
              v37 -= 16;
            }
            while (v18 > v43);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v17;
          *(void *)(v10 - 8) = v18;
        }
        unint64_t v18 = *(void *)(v9 + 8);
LABEL_13:
        uint64_t v19 = 0;
        do
        {
          unint64_t v20 = *(void *)(v9 + v19 + 24);
          v19 += 16;
        }
        while (v20 > v18);
        unint64_t v21 = v9 + v19;
        unint64_t v22 = a2;
        if (v19 == 16)
        {
          unint64_t v25 = a2;
          while (v21 < v25)
          {
            unint64_t v23 = v25 - 16;
            unint64_t v26 = *(void *)(v25 - 8);
            v25 -= 16;
            if (v26 > v18) {
              goto LABEL_23;
            }
          }
          unint64_t v23 = v25;
        }
        else
        {
          do
          {
            unint64_t v23 = v22 - 16;
            unint64_t v24 = *(void *)(v22 - 8);
            v22 -= 16;
          }
          while (v24 <= v18);
        }
LABEL_23:
        unint64_t v10 = v21;
        if (v21 < v23)
        {
          unint64_t v27 = v23;
          do
          {
            int v28 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)v27;
            *(_DWORD *)unint64_t v27 = v28;
            uint64_t v29 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(v27 + 8);
            *(void *)(v27 + 8) = v29;
            do
            {
              unint64_t v30 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v30 > v18);
            do
            {
              unint64_t v31 = *(void *)(v27 - 8);
              v27 -= 16;
            }
            while (v31 <= v18);
          }
          while (v10 < v27);
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v17;
        *(void *)(v10 - 8) = v18;
        if (v21 >= v23) {
          break;
        }
LABEL_34:
        a4 = 0;
      }
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 16;
    if (!v32) {
      continue;
    }
    return result;
  }
}

{
  BOOL v4;
  BOOL v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  _DWORD *v58;
  BOOL v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t vars8;

  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v44 = *(void *)(a2 - 8);
                unint64_t v45 = *(void *)(v10 + 8);
                if (v44 > v45)
                {
                  int v46 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(a2 - 16) = v46;
                  *(void *)(v10 + 8) = v44;
                  *(void *)(a2 - 8) = v45;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                unint64_t v47 = *(void *)(a2 - 8);
                unint64_t v48 = *(void *)(v10 + 56);
                if (v47 > v48)
                {
                  int v49 = *(_DWORD *)(v10 + 48);
                  *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(a2 - 16) = v49;
                  *(void *)(v10 + 56) = v47;
                  *(void *)(a2 - 8) = v48;
                  unint64_t v50 = *(void *)(v10 + 56);
                  unint64_t v51 = *(void *)(v10 + 40);
                  if (v50 > v51)
                  {
                    int v52 = *(_DWORD *)(v10 + 32);
                    int v53 = *(_DWORD *)(v10 + 48);
                    *(_DWORD *)(v10 + 32) = v53;
                    *(_DWORD *)(v10 + 48) = v52;
                    *(void *)(v10 + 40) = v50;
                    *(void *)(v10 + 56) = v51;
                    unint64_t v54 = *(void *)(v10 + 24);
                    if (v50 > v54)
                    {
                      int v55 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v53;
                      *(_DWORD *)(v10 + 32) = v55;
                      *(void *)(v10 + 24) = v50;
                      *(void *)(v10 + 40) = v54;
                      unint64_t v56 = *(void *)(v10 + 8);
                      if (v50 > v56)
                      {
                        int v57 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v53;
                        *(_DWORD *)(v10 + 16) = v57;
                        *(void *)(v10 + 8) = v50;
                        *(void *)(v10 + 24) = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v58 = (_DWORD *)(v10 + 16);
            BOOL v60 = v10 == a2 || v58 == (_DWORD *)a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = (_DWORD *)v10;
                do
                {
                  unint64_t v63 = *((void *)v62 + 3);
                  unint64_t v64 = *((void *)v62 + 1);
                  unint64_t v62 = v58;
                  if (v63 > v64)
                  {
                    int v65 = *v58;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      uint64_t v67 = v10 + v66;
                      *(_DWORD *)(v67 + 16) = *(_DWORD *)(v10 + v66);
                      *(void *)(v67 + 24) = *(void *)(v10 + v66 + 8);
                      if (!v66) {
                        break;
                      }
                      v66 -= 16;
                      if (v63 <= *(void *)(v67 - 8))
                      {
                        uint64_t v68 = v10 + v66 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v68 = v10;
LABEL_84:
                    *(_DWORD *)uint64_t v68 = v65;
                    *(void *)(v68 + 8) = v63;
                  }
                  uint64_t v58 = v62 + 4;
                  v61 += 16;
                }
                while (v62 + 4 != (_DWORD *)a2);
              }
            }
            else if (!v60)
            {
              uint64_t v97 = (unint64_t *)(v10 + 24);
              do
              {
                unint64_t v98 = *(void *)(v9 + 24);
                unint64_t v99 = *(void *)(v9 + 8);
                unint64_t v9 = (unint64_t)v58;
                if (v98 > v99)
                {
                  uint64_t v100 = *(void *)v58;
                  uint64_t v101 = v97;
                  do
                  {
                    unint64_t v102 = v101;
                    *((_DWORD *)v101 - 2) = *((_DWORD *)v101 - 6);
                    unint64_t v103 = *(v101 - 2);
                    v101 -= 2;
                    *unint64_t v102 = v103;
                  }
                  while (v98 > *(v102 - 4));
                  *((_DWORD *)v101 - 2) = v100;
                  *uint64_t v101 = v98;
                }
                uint64_t v58 = (_DWORD *)(v9 + 16);
                v97 += 2;
              }
              while (v9 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v10 + 16 * v72;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    BOOL v74 = *(void *)(v73 + 8) > *(void *)(v73 + 24);
                    v73 += 16 * v74;
                    if (v74) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unint64_t v75 = v10 + 16 * v71;
                  unint64_t v76 = *(void *)(v75 + 8);
                  if (*(void *)(v73 + 8) <= v76)
                  {
                    int v77 = *(_DWORD *)v75;
                    do
                    {
                      unint64_t v78 = v75;
                      unint64_t v75 = v73;
                      *(_DWORD *)unint64_t v78 = *(_DWORD *)v73;
                      *(void *)(v78 + 8) = *(void *)(v73 + 8);
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v79 = (2 * v72) | 1;
                      unint64_t v73 = v10 + 16 * v79;
                      uint64_t v80 = 2 * v72 + 2;
                      if (v80 < (uint64_t)v12)
                      {
                        BOOL v74 = *(void *)(v73 + 8) > *(void *)(v73 + 24);
                        v73 += 16 * v74;
                        if (v74) {
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t result = *(int **)(v73 + 8);
                      uint64_t v72 = v79;
                    }
                    while ((unint64_t)result <= v76);
                    *(_DWORD *)unint64_t v75 = v77;
                    *(void *)(v75 + 8) = v76;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v81 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v82 = 0;
                int v83 = *(_DWORD *)v10;
                uint64_t v84 = *(void *)(v10 + 8);
                unint64_t v85 = v10;
                do
                {
                  uint64_t v86 = v85 + 16 * v82 + 16;
                  uint64_t v87 = (2 * v82) | 1;
                  uint64_t v88 = 2 * v82 + 2;
                  if (v88 < v81)
                  {
                    unint64_t v89 = *(void *)(v86 + 8);
                    unint64_t v90 = *(void *)(v86 + 24);
                    v86 += 16 * (v89 > v90);
                    if (v89 > v90) {
                      uint64_t v87 = v88;
                    }
                  }
                  *(_DWORD *)unint64_t v85 = *(_DWORD *)v86;
                  *(void *)(v85 + 8) = *(void *)(v86 + 8);
                  unint64_t v85 = v86;
                  uint64_t v82 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v86 == a2 - 16)
                {
                  *(_DWORD *)uint64_t v86 = v83;
                  *(void *)(v86 + 8) = v84;
                }
                else
                {
                  *(_DWORD *)uint64_t v86 = *(_DWORD *)(a2 - 16);
                  *(void *)(v86 + 8) = *(void *)(a2 - 8);
                  *(_DWORD *)(a2 - 16) = v83;
                  *(void *)(a2 - 8) = v84;
                  uint64_t v91 = v86 - v10 + 16;
                  if (v91 >= 17)
                  {
                    unint64_t v92 = (((unint64_t)v91 >> 4) - 2) >> 1;
                    uint64_t v93 = v10 + 16 * v92;
                    unint64_t v94 = *(void *)(v86 + 8);
                    if (*(void *)(v93 + 8) > v94)
                    {
                      int v95 = *(_DWORD *)v86;
                      do
                      {
                        uint64_t v96 = v86;
                        uint64_t v86 = v93;
                        *(_DWORD *)uint64_t v96 = *(_DWORD *)v93;
                        *(void *)(v96 + 8) = *(void *)(v93 + 8);
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                        uint64_t v93 = v10 + 16 * v92;
                      }
                      while (*(void *)(v93 + 8) > v94);
                      *(_DWORD *)uint64_t v86 = v95;
                      *(void *)(v86 + 8) = v94;
                    }
                  }
                }
                a2 -= 16;
                BOOL v74 = v81-- <= 2;
              }
              while (!v74);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 16 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            int v15 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
            *(_DWORD *)unint64_t v14 = v15;
            uint64_t v16 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(v14 + 8);
            *(void *)(v14 + 8) = v16;
          }
          else
          {
          }
          --a3;
          uint64_t v17 = *(void *)v9;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 8);
          if (*(void *)(v9 - 8) > v18) {
            goto LABEL_13;
          }
          if (v18 <= *(void *)(a2 - 8))
          {
            unint64_t v35 = v9 + 16;
            do
            {
              unint64_t v10 = v35;
              if (v35 >= a2) {
                break;
              }
              unint64_t v36 = *(void *)(v35 + 8);
              v35 += 16;
            }
            while (v18 <= v36);
          }
          else
          {
            unint64_t v33 = v9;
            do
            {
              unint64_t v10 = v33 + 16;
              unint64_t v34 = *(void *)(v33 + 24);
              v33 += 16;
            }
            while (v18 <= v34);
          }
          unint64_t v37 = a2;
          if (v10 < a2)
          {
            unint64_t v38 = a2;
            do
            {
              unint64_t v37 = v38 - 16;
              unint64_t v39 = *(void *)(v38 - 8);
              v38 -= 16;
            }
            while (v18 > v39);
          }
          while (v10 < v37)
          {
            int v40 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)v37;
            *(_DWORD *)unint64_t v37 = v40;
            uint64_t v41 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(v37 + 8);
            *(void *)(v37 + 8) = v41;
            do
            {
              unint64_t v42 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v18 <= v42);
            do
            {
              unint64_t v43 = *(void *)(v37 - 8);
              v37 -= 16;
            }
            while (v18 > v43);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v17;
          *(void *)(v10 - 8) = v18;
        }
        unint64_t v18 = *(void *)(v9 + 8);
LABEL_13:
        uint64_t v19 = 0;
        do
        {
          unint64_t v20 = *(void *)(v9 + v19 + 24);
          v19 += 16;
        }
        while (v20 > v18);
        unint64_t v21 = v9 + v19;
        unint64_t v22 = a2;
        if (v19 == 16)
        {
          unint64_t v25 = a2;
          while (v21 < v25)
          {
            unint64_t v23 = v25 - 16;
            unint64_t v26 = *(void *)(v25 - 8);
            v25 -= 16;
            if (v26 > v18) {
              goto LABEL_23;
            }
          }
          unint64_t v23 = v25;
        }
        else
        {
          do
          {
            unint64_t v23 = v22 - 16;
            unint64_t v24 = *(void *)(v22 - 8);
            v22 -= 16;
          }
          while (v24 <= v18);
        }
LABEL_23:
        unint64_t v10 = v21;
        if (v21 < v23)
        {
          unint64_t v27 = v23;
          do
          {
            int v28 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)v27;
            *(_DWORD *)unint64_t v27 = v28;
            uint64_t v29 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(v27 + 8);
            *(void *)(v27 + 8) = v29;
            do
            {
              unint64_t v30 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v30 > v18);
            do
            {
              unint64_t v31 = *(void *)(v27 - 8);
              v27 -= 16;
            }
            while (v31 <= v18);
          }
          while (v10 < v27);
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v17;
        *(void *)(v10 - 8) = v18;
        if (v21 >= v23) {
          break;
        }
LABEL_34:
        a4 = 0;
      }
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 16;
    if (!v32) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(int *result, int *a2, int *a3)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)a3 + 1);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      int v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      *((void *)a2 + 1) = v5;
      *((void *)a3 + 1) = v3;
      unint64_t v8 = *((void *)a2 + 1);
      unint64_t v9 = *((void *)result + 1);
      if (v8 > v9)
      {
        int v10 = *result;
        void *result = *a2;
        *a2 = v10;
        *((void *)result + 1) = v8;
        *((void *)a2 + 1) = v9;
      }
    }
  }
  else
  {
    int v6 = *result;
    if (v5 <= v3)
    {
      void *result = *a2;
      *a2 = v6;
      *((void *)result + 1) = v3;
      *((void *)a2 + 1) = v4;
      unint64_t v11 = *((void *)a3 + 1);
      if (v11 <= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      *((void *)a2 + 1) = v11;
    }
    else
    {
      void *result = *a3;
      *a3 = v6;
      *((void *)result + 1) = v5;
    }
    *((void *)a3 + 1) = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 8);
      unint64_t v7 = *(void *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(void *)(a1 + 8) = v6;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      unint64_t v18 = *(void *)(a2 - 8);
      unint64_t v19 = *(void *)(a1 + 56);
      if (v18 > v19)
      {
        int v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(void *)(a1 + 56) = v18;
        *(void *)(a2 - 8) = v19;
        unint64_t v21 = *(void *)(a1 + 56);
        unint64_t v22 = *(void *)(a1 + 40);
        if (v21 > v22)
        {
          int v23 = *(_DWORD *)(a1 + 32);
          int v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 56) = v22;
          unint64_t v25 = *(void *)(a1 + 24);
          if (v21 > v25)
          {
            int v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(void *)(a1 + 24) = v21;
            *(void *)(a1 + 40) = v25;
            unint64_t v27 = *(void *)(a1 + 8);
            if (v21 > v27)
            {
              int v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(void *)(a1 + 8) = v21;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 8);
    if (v13 > *(void *)(v9 + 8))
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 56) = *(void *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

{
  uint64_t v4;
  BOOL result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;

  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 8);
      unint64_t v7 = *(void *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(void *)(a1 + 8) = v6;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      unint64_t v18 = *(void *)(a2 - 8);
      unint64_t v19 = *(void *)(a1 + 56);
      if (v18 > v19)
      {
        int v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(void *)(a1 + 56) = v18;
        *(void *)(a2 - 8) = v19;
        unint64_t v21 = *(void *)(a1 + 56);
        unint64_t v22 = *(void *)(a1 + 40);
        if (v21 > v22)
        {
          int v23 = *(_DWORD *)(a1 + 32);
          int v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 56) = v22;
          unint64_t v25 = *(void *)(a1 + 24);
          if (v21 > v25)
          {
            int v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(void *)(a1 + 24) = v21;
            *(void *)(a1 + 40) = v25;
            unint64_t v27 = *(void *)(a1 + 8);
            if (v21 > v27)
            {
              int v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(void *)(a1 + 8) = v21;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 8);
    if (v13 > *(void *)(v9 + 8))
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 56) = *(void *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v10 = *(void *)(a3 + 8);
  if (v9 > v10)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    *(void *)(a3 + 8) = v9;
    *(void *)(a4 + 8) = v10;
    unint64_t v12 = *(void *)(a3 + 8);
    unint64_t v13 = *(void *)(a2 + 8);
    if (v12 > v13)
    {
      int v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      *(void *)(a2 + 8) = v12;
      *(void *)(a3 + 8) = v13;
      unint64_t v15 = *(void *)(a2 + 8);
      unint64_t v16 = *(void *)(a1 + 8);
      if (v15 > v16)
      {
        int v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        *(void *)(a1 + 8) = v15;
        *(void *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

void *std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return a1;
}

void sub_256D95AF0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::~__func()
{
}

{
  JUMPOUT(0x25A2B1780);
}

__n128 std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_27062B018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

{
  char *v2;
  __n128 result;

  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_27062B578;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

{
  __n128 result;

  *(void *)a2 = &unk_27062B578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::operator()(uint64_t result, int *a2, int *a3)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **(void **)(result + 8);
  int v7 = *(_DWORD *)(v6 + 4 * v4);
  if (((*(void *)(*(void *)(result + 8) + 8) - v6) >> 2) - 1 <= v4)
  {
    if (v7 >= 1)
    {
      uint64_t v10 = *(void *)(**(void **)(result + 16) + 8 * v4);
      do
      {
        __n128 result = std::function<void ()(int)>::operator()(*(void *)(v3 + 32), v5);
        v5 += v10;
        --v7;
      }
      while (v7);
    }
  }
  else if (v7 >= 1)
  {
    uint64_t v8 = *(void *)(**(void **)(result + 16) + 8 * v4);
    int v9 = v4 + 1;
    do
    {
      __n128 result = std::function<void ()(int,int)>::operator()(*(void *)(v3 + 24), v9, v5);
      v5 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  uint64_t v3 = result;
  unint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **(void **)(result + 8);
  int v7 = *(_DWORD *)(v6 + 4 * v4);
  if (((*(void *)(*(void *)(result + 8) + 8) - v6) >> 2) - 1 <= v4)
  {
    if (v7 >= 1)
    {
      uint64_t v10 = *(void *)(**(void **)(result + 16) + 8 * v4);
      do
      {
        __n128 result = std::function<void ()(int)>::operator()(*(void *)(v3 + 32), v5);
        v5 += v10;
        --v7;
      }
      while (v7);
    }
  }
  else if (v7 >= 1)
  {
    uint64_t v8 = *(void *)(**(void **)(result + 16) + 8 * v4);
    int v9 = v4 + 1;
    do
    {
      __n128 result = std::function<void ()(int,int)>::operator()(*(void *)(v3 + 24), v9, v5);
      v5 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::target_type()
{
}

{
}

uint64_t std::function<void ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiounint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_256D96050(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_27062B0E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B0E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  uint64_t v2 = (const float *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  long long v3 = **(float ***)(a1 + 32);
  vDSP_Length v4 = **(int **)(a1 + 40);
  float __C = 0.0;
  vDSP_sve(v2, 1, &__C, v4);
  float result = __C + *v3;
  float *v3 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void *std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_27062B178;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B178;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(void **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_27062B1F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B1F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  uint64_t v2 = *(float **)(a1 + 16);
  float result = *(float *)(**(void **)(a1 + 24) + 4 * **(int **)(a1 + 32) + 4 * *a2) + *v2;
  float *v2 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  if (a3 >= 1)
  {
    for (int i = 0; i != a3; ++i)
    {
      unint64_t v5 = a4;
      uint64_t v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          float32x4_t v8 = *((float32x4_t *)result + 2);
          float32x4_t v7 = *((float32x4_t *)result + 3);
          float32x4_t v10 = *(float32x4_t *)result;
          float32x4_t v9 = *((float32x4_t *)result + 1);
          result += 4;
          float32x4_t v11 = vmaxnmq_f32(v10, *v6);
          float32x4_t v12 = vmaxnmq_f32(v9, v6[1]);
          float32x4_t v13 = vmaxnmq_f32(v7, v6[3]);
          v6[2] = vmaxnmq_f32(v8, v6[2]);
          v6[3] = v13;
          *uint64_t v6 = v11;
          v6[1] = v12;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        float v14 = *(float *)result;
        float result = (_OWORD *)((char *)result + 4);
        __int32 v15 = LODWORD(v14);
        if (v6->f32[0] >= v14) {
          __int32 v15 = v6->i32[0];
        }
        v6->i32[0] = v15;
        uint64_t v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_27062B278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B278;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  uint64_t v2 = (const float *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  long long v3 = **(float ***)(a1 + 32);
  vDSP_Length v4 = **(int **)(a1 + 40);
  float __C = 0.0;
  vDSP_maxv(v2, 1, &__C, v4);
  float v5 = *v3;
  if (*v3 < __C) {
    float v5 = __C;
  }
  float *v3 = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_27062B2F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B2F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(void **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_27062B378;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t result, int *a2)
{
  uint64_t v2 = *(float **)(result + 16);
  float v3 = *(float *)(**(void **)(result + 24) + 4 * **(int **)(result + 32) + 4 * *a2);
  if (*v2 >= v3) {
    float v3 = *v2;
  }
  float *v2 = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  if (a3 >= 1)
  {
    for (int i = 0; i != a3; ++i)
    {
      unint64_t v5 = a4;
      uint64_t v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          float32x4_t v8 = *((float32x4_t *)result + 2);
          float32x4_t v7 = *((float32x4_t *)result + 3);
          float32x4_t v10 = *(float32x4_t *)result;
          float32x4_t v9 = *((float32x4_t *)result + 1);
          result += 4;
          float32x4_t v11 = vminnmq_f32(v10, *v6);
          float32x4_t v12 = vminnmq_f32(v9, v6[1]);
          float32x4_t v13 = vminnmq_f32(v7, v6[3]);
          v6[2] = vminnmq_f32(v8, v6[2]);
          v6[3] = v13;
          *uint64_t v6 = v11;
          v6[1] = v12;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        float v14 = *(float *)result;
        __n128 result = (_OWORD *)((char *)result + 4);
        __int32 v15 = LODWORD(v14);
        if (v14 >= v6->f32[0]) {
          __int32 v15 = v6->i32[0];
        }
        v6->i32[0] = v15;
        uint64_t v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_27062B3F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B3F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  uint64_t v2 = (const float *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  long long v3 = **(float ***)(a1 + 32);
  vDSP_Length v4 = **(int **)(a1 + 40);
  float __C = 0.0;
  vDSP_minv(v2, 1, &__C, v4);
  float v5 = *v3;
  if (*v3 > __C) {
    float v5 = __C;
  }
  float *v3 = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_27062B478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B478;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(void **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(void **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_27062B4F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_27062B4F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t result, int *a2)
{
  uint64_t v2 = *(float **)(result + 16);
  float v3 = *(float *)(**(void **)(result + 24) + 4 * **(int **)(result + 32) + 4 * *a2);
  if (*v2 <= v3) {
    float v3 = *v2;
  }
  float *v2 = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

void mlx::core::inverse_impl(mlx::core *this, int ***a2, mlx::core::array *a3, float a4)
{
  v21[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*(void *)this + 168) & 2) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  mlx::core::copy(this, a2, v5, a4);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *(void *)(*(void *)this + 8);
  if (v7 == **(void **)this) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v8 = *(int *)(v7 - 4);
  int v14 = 0;
  int v15 = v8;
  unint64_t v9 = *(void *)(v6 + 48);
  v19[0] = &unk_27062AEC8;
  v19[1] = mlx::core::allocator::free;
  v19[3] = v19;
  int v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * v8));
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v19);
  unint64_t v10 = (v8 * v8);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v19);
  if (v9 >= v10)
  {
    uint64_t v11 = 0;
    if (v9 / v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9 / v10;
    }
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v20);
      sgetrf_NEWLAPACK();
      sgetri_NEWLAPACK();
      float32x4_t v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)0.0));
      v16[0] = &unk_27062AEC8;
      v16[1] = mlx::core::allocator::free;
      v16[3] = v16;
      int v17 = v13;
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)&v18, (uint64_t)v16);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v16);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v20);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v17);
      sgetri_NEWLAPACK();
      mlx::core::array::Data::~Data((mlx::core::array::Data *)&v17);
      ++v11;
    }
    while (v12 != v11);
  }
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v20);
}

void sub_256D9718C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (*(char *)(v18 - 177) < 0)
  {
    operator delete(*(void **)(v18 - 200));
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
      mlx::core::array::Data::~Data((mlx::core::array::Data *)(v18 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  int v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_256D97528(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x25A2B1740](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2B1740](a1 + 128);
  return a1;
}

void mlx::core::Inverse::eval(int a1, mlx::core **a2, int ***a3, float a4)
{
  uint64_t v4 = *a2;
  if (*(_DWORD *)(*(void *)*a2 + 56) != 6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[Inverse::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mlx::core::inverse_impl(v4, a3, (mlx::core::array *)a3, a4);
}

void sub_256D97704(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void mlx::core::array::Data::~Data(mlx::core::array::Data *this)
{
  uint64_t v1 = (void *)((char *)this + 8);
  std::function<void ()(mlx::core::allocator::Buffer)>::operator()((uint64_t)this + 8, *(void *)this);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::function<void ()(mlx::core::allocator::Buffer)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void mlx::core::Scan::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t v1779 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(int ****)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Scan::eval();
  }
  uint64_t v6 = *v3;
  uint64_t v7 = (std::__shared_weak_count *)v3[1];
  uint64_t v1773 = v6;
  uint64_t v1774 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (((_BYTE)v6[21] & 2) == 0)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v6, (uint64_t)v6[1], v6[1] - *v6);
    uint64_t v8 = (uint64_t)v1773[7];
    long long v1771 = 0uLL;
    uint64_t v1770 = 0;
    long long v1769 = 0uLL;
    mlx::core::array::array(&v1776, (long long *)__p, v8, &v1771, &v1769);
    unsigned int v1775 = (void **)&v1769;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v1775);
    if (*((void *)&v1771 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1771 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    mlx::core::copy((mlx::core::array *)&v1773, &v1776, 2, v9);
    uint64_t v10 = v1776;
    if (v1773 != v1776)
    {
      uint64_t v11 = v1777;
      if (v1777) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v1777 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = v1774;
      uint64_t v1773 = v10;
      uint64_t v1774 = (std::__shared_weak_count *)v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    mlx::core::array::~array((mlx::core::array *)&v1776);
    uint64_t v6 = v1773;
  }
  float32x4_t v13 = (int **)v6[7];
  switch((int)v13)
  {
    case 0:
      int v14 = *(_DWORD *)(a1 + 20);
      if (v14 == 2)
      {
        int v15 = *a3;
        unint64_t v16 = (*a3)[7];
        if (v16 == 4)
        {
          uint64_t v17 = *(int *)(a1 + 24);
          int v18 = *(unsigned __int8 *)(a1 + 28);
          int v19 = *(unsigned __int8 *)(a1 + 29);
          int v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v15[6] * BYTE4(v16)));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v20, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) != 0)
          {
            uint64_t v21 = *(void *)&v1773[3][2 * v17];
            unint64_t v22 = (unsigned __int8 *)v1773[19];
            int v23 = (*a3)[19];
            int v24 = v1773[6];
            unint64_t v25 = (unint64_t)v24 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v17);
            if (v21 == 1)
            {
              int v26 = mlx::core::array::shape((mlx::core::array *)&v1773, v17);
              if (v18)
              {
                if (v19)
                {
                  if ((int)v25 >= 1)
                  {
                    int v27 = 0;
                    uint64_t v28 = v26 - 1;
                    do
                    {
                      uint64_t v29 = &v23[v28];
                      unint64_t v30 = &v22[v28];
                      int v31 = v22[v28];
                      *uint64_t v29 = v31;
                      int v32 = v26 - 1;
                      if (v26 >= 2)
                      {
                        do
                        {
                          int v33 = *--v30;
                          v31 += v33;
                          *--uint64_t v29 = v31;
                          --v32;
                        }
                        while (v32);
                      }
                      int v23 = &v29[v26];
                      unint64_t v22 = &v30[v26];
                      ++v27;
                    }
                    while (v27 != v25);
                  }
                }
                else if ((int)v25 >= 1)
                {
                  int v1109 = 0;
                  uint64_t v1110 = v26 - 1;
                  do
                  {
                    uint64_t v1111 = &v23[v1110];
                    uint64_t v1112 = &v22[v1110];
                    *uint64_t v1111 = 0;
                    if (v26 >= 2)
                    {
                      int v1113 = 0;
                      int v1114 = v26 - 1;
                      do
                      {
                        int v1115 = *v1112--;
                        v1113 += v1115;
                        *--uint64_t v1111 = v1113;
                        --v1114;
                      }
                      while (v1114);
                    }
                    int v23 = &v1111[v26];
                    unint64_t v22 = &v1112[v26];
                    ++v1109;
                  }
                  while (v1109 != v25);
                }
              }
              else if (v19)
              {
                if ((int)v25 >= 1)
                {
                  int v873 = 0;
                  do
                  {
                    int v874 = *v22;
                    int *v23 = v874;
                    int v875 = v26 - 1;
                    if (v26 >= 2)
                    {
                      do
                      {
                        int v876 = *++v22;
                        v874 += v876;
                        v23[1] = v874;
                        ++v23;
                        --v875;
                      }
                      while (v875);
                    }
                    ++v23;
                    ++v22;
                    ++v873;
                  }
                  while (v873 != v25);
                }
              }
              else if ((int)v25 >= 1)
              {
                int v1517 = 0;
                do
                {
                  int *v23 = 0;
                  if (v26 >= 2)
                  {
                    int v1518 = 0;
                    int v1519 = v26 - 1;
                    do
                    {
                      int v1520 = *v22++;
                      v1518 += v1520;
                      v23[1] = v1518;
                      ++v23;
                      --v1519;
                    }
                    while (v1519);
                  }
                  ++v23;
                  ++v22;
                  ++v1517;
                }
                while (v1517 != v25);
              }
            }
            else
            {
              unint64_t v471 = *(void *)&v1773[3][2 * v17];
              int v472 = mlx::core::array::shape((mlx::core::array *)&v1773, v17);
              int v473 = v472;
              uint64_t v474 = *(void *)&v1773[3][2 * v17];
              unint64_t v475 = v25 / v471;
              if (v18)
              {
                if (v19)
                {
                  if ((int)v475 >= 1)
                  {
                    int v476 = 0;
                    uint64_t v477 = (v472 - 1) * (int)v474;
                    uint64_t v478 = v472 * (uint64_t)(int)v474;
                    do
                    {
                      uint64_t v479 = &v23[v477];
                      uint64_t v480 = &v22[v477];
                      if (v474)
                      {
                        uint64_t v481 = (int)v474;
                        uint64_t v482 = &v23[v477];
                        uint64_t v483 = &v22[v477];
                        do
                        {
                          int v484 = *v483++;
                          *v482++ = v484;
                          --v481;
                        }
                        while (v481);
                      }
                      if (v472 >= 2)
                      {
                        for (int i = 1; i != v472; ++i)
                        {
                          int v486 = v474;
                          if ((int)v474 >= 1)
                          {
                            do
                            {
                              int v487 = *--v480;
                              *(v479 - 1) = v479[(int)v474 - 1] + v487;
                              --v479;
                              --v486;
                            }
                            while (v486);
                          }
                        }
                      }
                      int v23 = &v479[v478];
                      unint64_t v22 = &v480[v478];
                      ++v476;
                    }
                    while (v476 != v475);
                  }
                }
                else if ((int)v475 >= 1)
                {
                  int v1123 = 0;
                  uint64_t v1124 = (v472 - 1) * (int)v474;
                  uint64_t v1125 = v472 * (uint64_t)(int)v474;
                  do
                  {
                    uint64_t v1126 = &v23[v1124];
                    if ((int)v474 >= 1) {
                      bzero(v1126, 4 * ((int)v474 - (unint64_t)(((int)v474 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                    }
                    uint64_t v1127 = &v22[v1124];
                    if (v473 > 1)
                    {
                      for (int j = 1; j != v473; ++j)
                      {
                        int v1129 = v474;
                        if ((int)v474 >= 1)
                        {
                          do
                          {
                            *(v1126 - 1) = v1126[(int)v474 - 1] + v1127[(int)v474 - 1];
                            --v1126;
                            --v1127;
                            --v1129;
                          }
                          while (v1129);
                        }
                      }
                    }
                    int v23 = &v1126[v1125];
                    unint64_t v22 = &v1127[v1125];
                    ++v1123;
                  }
                  while (v1123 != v475);
                }
              }
              else if (v19)
              {
                if ((int)v475 >= 1)
                {
                  int v881 = 0;
                  do
                  {
                    if (v474)
                    {
                      uint64_t v882 = (int)v474;
                      uint64_t v883 = v23;
                      unint64_t v884 = v22;
                      do
                      {
                        int v885 = *v884++;
                        *v883++ = v885;
                        --v882;
                      }
                      while (v882);
                    }
                    v22 += (int)v474;
                    v23 += (int)v474;
                    if (v472 >= 2)
                    {
                      for (int k = 1; k != v472; ++k)
                      {
                        int v887 = v474;
                        if ((int)v474 >= 1)
                        {
                          do
                          {
                            int v888 = *v22++;
                            int *v23 = v23[-(int)v474] + v888;
                            ++v23;
                            --v887;
                          }
                          while (v887);
                        }
                      }
                    }
                    ++v881;
                  }
                  while (v881 != v475);
                }
              }
              else if ((int)v475 >= 1)
              {
                int v1525 = 0;
                do
                {
                  if ((int)v474 >= 1) {
                    bzero(v23, 4 * ((int)v474 - (unint64_t)(((int)v474 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  v23 += (int)v474;
                  v22 += (int)v474;
                  if (v473 > 1)
                  {
                    for (int m = 1; m != v473; ++m)
                    {
                      int v1527 = v474;
                      if ((int)v474 >= 1)
                      {
                        do
                        {
                          int *v23 = v23[-(int)v474] + v22[-(int)v474];
                          ++v23;
                          ++v22;
                          --v1527;
                        }
                        while (v1527);
                      }
                    }
                  }
                  ++v1525;
                }
                while (v1525 != v475);
              }
            }
            goto LABEL_2472;
          }
LABEL_2474:
          exceptioint n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x25A2B1470](exception, "Scan op supports only contiguous inputs");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v165 = *(int *)(a1 + 24);
        int v166 = *(unsigned __int8 *)(a1 + 28);
        int v167 = *(unsigned __int8 *)(a1 + 29);
        uint64_t v168 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(BYTE4(v16) * (void)v15[6]));
        uint64_t v1776 = (int **)&unk_27062AEC8;
        uint64_t v1777 = mlx::core::allocator::free;
        uint64_t v1778 = &v1776;
        mlx::core::array::set_data(a3, (uint64_t)v168, (uint64_t)&v1776);
        std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
        if (((_BYTE)v1773[21] & 2) == 0) {
          goto LABEL_2474;
        }
        uint64_t v169 = *(void *)&v1773[3][2 * v165];
        ldiv_t v170 = (BOOL *)v1773[19];
        int v171 = (BOOL *)(*a3)[19];
        uint64_t v172 = v1773[6];
        unint64_t v173 = (unint64_t)v172 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v165);
        if (v169 == 1)
        {
          int v174 = mlx::core::array::shape((mlx::core::array *)&v1773, v165);
          if (v166)
          {
            if (v167)
            {
              if ((int)v173 >= 1)
              {
                int v175 = 0;
                uint64_t v176 = v174 - 1;
                do
                {
                  int v177 = &v171[v176];
                  uint64_t v178 = &v170[v176];
                  BOOL v179 = v170[v176];
                  v171[v176] = v179;
                  int v180 = v174 - 1;
                  if (v174 >= 2)
                  {
                    do
                    {
                      char v181 = *--v178;
                      BOOL v179 = v179 != -v181;
                      *--int v177 = v179;
                      --v180;
                    }
                    while (v180);
                  }
                  int v171 = &v177[v174];
                  ldiv_t v170 = &v178[v174];
                  ++v175;
                }
                while (v175 != v173);
              }
            }
            else if ((int)v173 >= 1)
            {
              int v1116 = 0;
              uint64_t v1117 = v174 - 1;
              do
              {
                unsigned int v1118 = &v171[v1117];
                BOOL v1119 = &v170[v1117];
                v171[v1117] = 0;
                if (v174 >= 2)
                {
                  BOOL v1120 = 0;
                  int v1121 = v174 - 1;
                  do
                  {
                    char v1122 = *v1119--;
                    BOOL v1120 = v1120 != -v1122;
                    *--unsigned int v1118 = v1120;
                    --v1121;
                  }
                  while (v1121);
                }
                int v171 = &v1118[v174];
                ldiv_t v170 = &v1119[v174];
                ++v1116;
              }
              while (v1116 != v173);
            }
          }
          else if (v167)
          {
            if ((int)v173 >= 1)
            {
              int v877 = 0;
              do
              {
                BOOL v878 = *v170;
                BOOL *v171 = *v170;
                int v879 = v174 - 1;
                if (v174 >= 2)
                {
                  do
                  {
                    char v880 = *++v170;
                    BOOL v878 = v878 != -v880;
                    *++int v171 = v878;
                    --v879;
                  }
                  while (v879);
                }
                ++v171;
                ++v170;
                ++v877;
              }
              while (v877 != v173);
            }
          }
          else if ((int)v173 >= 1)
          {
            int v1521 = 0;
            do
            {
              BOOL *v171 = 0;
              if (v174 >= 2)
              {
                BOOL v1522 = 0;
                int v1523 = v174 - 1;
                do
                {
                  char v1524 = *v170++;
                  BOOL v1522 = v1522 != -v1524;
                  *++int v171 = v1522;
                  --v1523;
                }
                while (v1523);
              }
              ++v171;
              ++v170;
              ++v1521;
            }
            while (v1521 != v173);
          }
        }
        else
        {
          unint64_t v488 = *(void *)&v1773[3][2 * v165];
          int v489 = mlx::core::array::shape((mlx::core::array *)&v1773, v165);
          int v490 = v489;
          uint64_t v491 = *(void *)&v1773[3][2 * v165];
          unint64_t v492 = v173 / v488;
          if (v166)
          {
            if (v167)
            {
              if ((int)v492 >= 1)
              {
                int v493 = 0;
                uint64_t v494 = (v489 - 1) * (int)v491;
                uint64_t v495 = v489 * (uint64_t)(int)v491;
                do
                {
                  uint64_t v496 = &v171[v494];
                  unsigned int v497 = &v170[v494];
                  if (v491) {
                    memmove(v496, v497, (int)v491);
                  }
                  if (v490 >= 2)
                  {
                    for (int n = 1; n != v490; ++n)
                    {
                      int v499 = v491;
                      if ((int)v491 >= 1)
                      {
                        do
                        {
                          char v500 = *--v497;
                          *(v496 - 1) = v496[(int)v491 - 1] != -v500;
                          --v496;
                          --v499;
                        }
                        while (v499);
                      }
                    }
                  }
                  int v171 = &v496[v495];
                  ldiv_t v170 = &v497[v495];
                  ++v493;
                }
                while (v493 != v492);
              }
            }
            else if ((int)v492 >= 1)
            {
              int v1130 = 0;
              uint64_t v1131 = (v489 - 1) * (int)v491;
              uint64_t v1132 = v489 * (uint64_t)(int)v491;
              do
              {
                uint64_t v1133 = &v171[v1131];
                if ((int)v491 >= 1) {
                  bzero(v1133, (int)v491);
                }
                uint64_t v1134 = &v170[v1131];
                if (v490 > 1)
                {
                  for (iint i = 1; ii != v490; ++ii)
                  {
                    int v1136 = v491;
                    if ((int)v491 >= 1)
                    {
                      do
                      {
                        *(v1133 - 1) = v1133[(int)v491 - 1] != -v1134[(int)v491 - 1];
                        --v1133;
                        --v1134;
                        --v1136;
                      }
                      while (v1136);
                    }
                  }
                }
                int v171 = &v1133[v1132];
                ldiv_t v170 = &v1134[v1132];
                ++v1130;
              }
              while (v1130 != v492);
            }
          }
          else if (v167)
          {
            if ((int)v492 >= 1)
            {
              int v889 = 0;
              do
              {
                if (v491) {
                  memmove(v171, v170, (int)v491);
                }
                v170 += (int)v491;
                v171 += (int)v491;
                if (v490 >= 2)
                {
                  for (jint j = 1; jj != v490; ++jj)
                  {
                    int v891 = v491;
                    if ((int)v491 >= 1)
                    {
                      do
                      {
                        char v892 = *v170++;
                        BOOL *v171 = v171[-(int)v491] != -v892;
                        ++v171;
                        --v891;
                      }
                      while (v891);
                    }
                  }
                }
                ++v889;
              }
              while (v889 != v492);
            }
          }
          else if ((int)v492 >= 1)
          {
            int v1528 = 0;
            do
            {
              if ((int)v491 >= 1) {
                bzero(v171, (int)v491);
              }
              v171 += (int)v491;
              v170 += (int)v491;
              if (v490 > 1)
              {
                for (kint k = 1; kk != v490; ++kk)
                {
                  int v1530 = v491;
                  if ((int)v491 >= 1)
                  {
                    do
                    {
                      BOOL *v171 = v171[-(int)v491] != -v170[-(int)v491];
                      ++v171;
                      ++v170;
                      --v1530;
                    }
                    while (v1530);
                  }
                }
              }
              ++v1528;
            }
            while (v1528 != v492);
          }
        }
      }
      else
      {
        uint64_t v148 = *(int *)(a1 + 24);
        int v149 = *(unsigned __int8 *)(a1 + 28);
        int v150 = *(unsigned __int8 *)(a1 + 29);
        if (v14)
        {
          if (v14 == 1)
          {
            uint64_t v1776 = v13;
            mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
            unint64_t v441 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                               * (void)(*a3)[6]));
            uint64_t v1776 = (int **)&unk_27062AEC8;
            uint64_t v1777 = mlx::core::allocator::free;
            uint64_t v1778 = &v1776;
            mlx::core::array::set_data(a3, (uint64_t)v441, (uint64_t)&v1776);
            std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
            if (((_BYTE)v1773[21] & 2) == 0) {
              goto LABEL_2474;
            }
            uint64_t v442 = *(void *)&v1773[3][2 * v148];
            unint64_t v443 = (unsigned __int8 *)v1773[19];
            unint64_t v444 = (*a3)[19];
            uint64_t v445 = v1773[6];
            unint64_t v446 = (unint64_t)v445 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v148);
            if (v442 == 1)
            {
              int v447 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
              if (v149)
              {
                if (v150)
                {
                  if ((int)v446 >= 1)
                  {
                    int v448 = 0;
                    uint64_t v449 = v447 - 1;
                    do
                    {
                      uint64_t v450 = (char *)v444 + v449;
                      uint64_t v451 = &v443[v449];
                      unsigned __int8 v452 = v443[v449];
                      *((unsigned char *)v444 + v449) = v452;
                      int v453 = v447 - 1;
                      if (v447 >= 2)
                      {
                        do
                        {
                          unsigned int v455 = *--v451;
                          unsigned __int8 v454 = v455;
                          if (v455 < v452) {
                            unsigned __int8 v452 = v454;
                          }
                          *--uint64_t v450 = v452;
                          --v453;
                        }
                        while (v453);
                      }
                      unint64_t v444 = (int *)&v450[v447];
                      unint64_t v443 = &v451[v447];
                      ++v448;
                    }
                    while (v448 != v446);
                  }
                }
                else if ((int)v446 >= 1)
                {
                  int v1545 = 0;
                  uint64_t v1546 = v447 - 1;
                  do
                  {
                    uint64_t v1547 = (char *)v444 + v1546;
                    int v1548 = &v443[v1546];
                    *((unsigned char *)v444 + v1546) = 1;
                    if (v447 >= 2)
                    {
                      unsigned __int8 v1549 = 1;
                      int v1550 = v447 - 1;
                      do
                      {
                        unsigned int v1552 = *v1548--;
                        unsigned __int8 v1551 = v1552;
                        if (v1552 < v1549) {
                          unsigned __int8 v1549 = v1551;
                        }
                        *--uint64_t v1547 = v1549;
                        --v1550;
                      }
                      while (v1550);
                    }
                    unint64_t v444 = (int *)&v1547[v447];
                    unint64_t v443 = &v1548[v447];
                    ++v1545;
                  }
                  while (v1545 != v446);
                }
              }
              else if (v150)
              {
                if ((int)v446 >= 1)
                {
                  int v1431 = 0;
                  do
                  {
                    unsigned __int8 v1432 = *v443;
                    *(unsigned char *)unint64_t v444 = *v443;
                    int v1433 = v447 - 1;
                    if (v447 >= 2)
                    {
                      do
                      {
                        unsigned int v1435 = *++v443;
                        unsigned __int8 v1434 = v1435;
                        if (v1435 < v1432) {
                          unsigned __int8 v1432 = v1434;
                        }
                        *((unsigned char *)v444 + 1) = v1432;
                        unint64_t v444 = (int *)((char *)v444 + 1);
                        --v1433;
                      }
                      while (v1433);
                    }
                    unint64_t v444 = (int *)((char *)v444 + 1);
                    ++v443;
                    ++v1431;
                  }
                  while (v1431 != v446);
                }
              }
              else if ((int)v446 >= 1)
              {
                int v1755 = 0;
                do
                {
                  *(unsigned char *)unint64_t v444 = 1;
                  if (v447 >= 2)
                  {
                    unsigned __int8 v1756 = 1;
                    int v1757 = v447 - 1;
                    do
                    {
                      unsigned int v1759 = *v443++;
                      unsigned __int8 v1758 = v1759;
                      if (v1759 < v1756) {
                        unsigned __int8 v1756 = v1758;
                      }
                      *((unsigned char *)v444 + 1) = v1756;
                      unint64_t v444 = (int *)((char *)v444 + 1);
                      --v1757;
                    }
                    while (v1757);
                  }
                  unint64_t v444 = (int *)((char *)v444 + 1);
                  ++v443;
                  ++v1755;
                }
                while (v1755 != v446);
              }
            }
            else
            {
              unint64_t v846 = *(void *)&v1773[3][2 * v148];
              int v847 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
              int v848 = v847;
              uint64_t v849 = *(void *)&v1773[3][2 * v148];
              unint64_t v850 = v446 / v846;
              if (v149)
              {
                if (v150)
                {
                  if ((int)v850 >= 1)
                  {
                    int v851 = 0;
                    uint64_t v852 = (v847 - 1) * (int)v849;
                    uint64_t v853 = v847 * (uint64_t)(int)v849;
                    do
                    {
                      uint64_t v854 = (char *)v444 + v852;
                      uint64_t v855 = &v443[v852];
                      if (v849) {
                        memmove(v854, v855, (int)v849);
                      }
                      if (v848 >= 2)
                      {
                        for (mint m = 1; mm != v848; ++mm)
                        {
                          int v857 = v849;
                          if ((int)v849 >= 1)
                          {
                            do
                            {
                              unsigned int v859 = *--v855;
                              char v858 = v859;
                              if (v859 >= v854[(int)v849 - 1]) {
                                char v858 = v854[(int)v849 - 1];
                              }
                              *--uint64_t v854 = v858;
                              --v857;
                            }
                            while (v857);
                          }
                        }
                      }
                      unint64_t v444 = (int *)&v854[v853];
                      unint64_t v443 = &v855[v853];
                      ++v851;
                    }
                    while (v851 != v850);
                  }
                }
                else if ((int)v850 >= 1)
                {
                  int v1553 = 0;
                  uint64_t v1554 = (v847 - 1) * (int)v849;
                  uint64_t v1555 = v847 * (uint64_t)(int)v849;
                  uint64_t v1556 = (int)v849 - 1;
                  do
                  {
                    uint64_t v1557 = (char *)v444 + v1554;
                    if ((int)v849 >= 1) {
                      memset(v1557, 1, (int)v849);
                    }
                    uint64_t v1558 = &v443[v1554];
                    if (v848 > 1)
                    {
                      for (nint n = 1; nn != v848; ++nn)
                      {
                        int v1560 = v849;
                        if ((int)v849 >= 1)
                        {
                          do
                          {
                            unsigned int v1561 = v1558[v1556];
                            if (v1561 >= v1557[v1556]) {
                              LOBYTE(v1561) = v1557[v1556];
                            }
                            *--uint64_t v1557 = v1561;
                            --v1558;
                            --v1560;
                          }
                          while (v1560);
                        }
                      }
                    }
                    unint64_t v444 = (int *)&v1557[v1555];
                    unint64_t v443 = &v1558[v1555];
                    ++v1553;
                  }
                  while (v1553 != v850);
                }
              }
              else if (v150)
              {
                if ((int)v850 >= 1)
                {
                  int v1436 = 0;
                  do
                  {
                    if (v849) {
                      memmove(v444, v443, (int)v849);
                    }
                    v443 += (int)v849;
                    unint64_t v444 = (int *)((char *)v444 + (int)v849);
                    if (v848 >= 2)
                    {
                      for (int i1 = 1; i1 != v848; ++i1)
                      {
                        int v1438 = v849;
                        if ((int)v849 >= 1)
                        {
                          do
                          {
                            unsigned int v1440 = *v443++;
                            char v1439 = v1440;
                            if (v1440 >= *((unsigned __int8 *)v444 - (int)v849)) {
                              char v1439 = *((unsigned char *)v444 - (int)v849);
                            }
                            *(unsigned char *)unint64_t v444 = v1439;
                            unint64_t v444 = (int *)((char *)v444 + 1);
                            --v1438;
                          }
                          while (v1438);
                        }
                      }
                    }
                    ++v1436;
                  }
                  while (v1436 != v850);
                }
              }
              else if ((int)v850 >= 1)
              {
                int v1760 = 0;
                do
                {
                  if ((int)v849 >= 1) {
                    memset(v444, 1, (int)v849);
                  }
                  unint64_t v444 = (int *)((char *)v444 + (int)v849);
                  v443 += (int)v849;
                  if (v848 > 1)
                  {
                    for (int i2 = 1; i2 != v848; ++i2)
                    {
                      int v1762 = v849;
                      if ((int)v849 >= 1)
                      {
                        do
                        {
                          unsigned int v1763 = v443[-(int)v849];
                          if (v1763 >= *((unsigned __int8 *)v444 - (int)v849)) {
                            LOBYTE(v1763) = *((unsigned char *)v444 - (int)v849);
                          }
                          *(unsigned char *)unint64_t v444 = v1763;
                          unint64_t v444 = (int *)((char *)v444 + 1);
                          ++v443;
                          --v1762;
                        }
                        while (v1762);
                      }
                    }
                  }
                  ++v1760;
                }
                while (v1760 != v850);
              }
            }
          }
          else
          {
            if (v14 != 3) {
              goto LABEL_2472;
            }
            uint64_t v151 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                               * (void)(*a3)[6]));
            uint64_t v1776 = (int **)&unk_27062AEC8;
            uint64_t v1777 = mlx::core::allocator::free;
            uint64_t v1778 = &v1776;
            mlx::core::array::set_data(a3, (uint64_t)v151, (uint64_t)&v1776);
            std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
            if (((_BYTE)v1773[21] & 2) == 0) {
              goto LABEL_2474;
            }
            uint64_t v152 = *(void *)&v1773[3][2 * v148];
            unint64_t v153 = (unsigned __int8 *)v1773[19];
            unint64_t v154 = (*a3)[19];
            uint64_t v155 = v1773[6];
            unint64_t v156 = (unint64_t)v155 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v148);
            if (v152 == 1)
            {
              int v157 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
              if (v149)
              {
                if (v150)
                {
                  if ((int)v156 >= 1)
                  {
                    int v158 = 0;
                    uint64_t v159 = v157 - 1;
                    do
                    {
                      uint64_t v160 = (char *)v154 + v159;
                      int v161 = &v153[v159];
                      int v162 = v153[v159];
                      *((unsigned char *)v154 + v159) = v162;
                      int v163 = v157 - 1;
                      if (v157 >= 2)
                      {
                        do
                        {
                          int v164 = *--v161;
                          v162 *= v164;
                          *--uint64_t v160 = v162;
                          --v163;
                        }
                        while (v163);
                      }
                      unint64_t v154 = (int *)&v160[v157];
                      unint64_t v153 = &v161[v157];
                      ++v158;
                    }
                    while (v158 != v156);
                  }
                }
                else if ((int)v156 >= 1)
                {
                  int v1531 = 0;
                  uint64_t v1532 = v157 - 1;
                  do
                  {
                    int v1533 = (char *)v154 + v1532;
                    unsigned int v1534 = &v153[v1532];
                    *((unsigned char *)v154 + v1532) = 1;
                    if (v157 >= 2)
                    {
                      int v1535 = 1;
                      int v1536 = v157 - 1;
                      do
                      {
                        int v1537 = *v1534--;
                        v1535 *= v1537;
                        *--int v1533 = v1535;
                        --v1536;
                      }
                      while (v1536);
                    }
                    unint64_t v154 = (int *)&v1533[v157];
                    unint64_t v153 = &v1534[v157];
                    ++v1531;
                  }
                  while (v1531 != v156);
                }
              }
              else if (v150)
              {
                if ((int)v156 >= 1)
                {
                  int v1305 = 0;
                  do
                  {
                    int v1306 = *v153;
                    *(unsigned char *)unint64_t v154 = v1306;
                    int v1307 = v157 - 1;
                    if (v157 >= 2)
                    {
                      do
                      {
                        int v1308 = *++v153;
                        v1306 *= v1308;
                        *((unsigned char *)v154 + 1) = v1306;
                        unint64_t v154 = (int *)((char *)v154 + 1);
                        --v1307;
                      }
                      while (v1307);
                    }
                    unint64_t v154 = (int *)((char *)v154 + 1);
                    ++v153;
                    ++v1305;
                  }
                  while (v1305 != v156);
                }
              }
              else if ((int)v156 >= 1)
              {
                int v1748 = 0;
                do
                {
                  *(unsigned char *)unint64_t v154 = 1;
                  if (v157 >= 2)
                  {
                    int v1749 = 1;
                    int v1750 = v157 - 1;
                    do
                    {
                      int v1751 = *v153++;
                      v1749 *= v1751;
                      *((unsigned char *)v154 + 1) = v1749;
                      unint64_t v154 = (int *)((char *)v154 + 1);
                      --v1750;
                    }
                    while (v1750);
                  }
                  unint64_t v154 = (int *)((char *)v154 + 1);
                  ++v153;
                  ++v1748;
                }
                while (v1748 != v156);
              }
            }
            else
            {
              unint64_t v833 = *(void *)&v1773[3][2 * v148];
              int v834 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
              int v835 = v834;
              uint64_t v836 = *(void *)&v1773[3][2 * v148];
              unint64_t v837 = v156 / v833;
              if (v149)
              {
                if (v150)
                {
                  if ((int)v837 >= 1)
                  {
                    int v838 = 0;
                    uint64_t v839 = (v834 - 1) * (int)v836;
                    uint64_t v840 = v834 * (uint64_t)(int)v836;
                    do
                    {
                      uint64_t v841 = (char *)v154 + v839;
                      uint64_t v842 = &v153[v839];
                      if (v836) {
                        memmove(v841, v842, (int)v836);
                      }
                      if (v835 >= 2)
                      {
                        for (int i3 = 1; i3 != v835; ++i3)
                        {
                          int v844 = v836;
                          if ((int)v836 >= 1)
                          {
                            do
                            {
                              char v845 = *--v842;
                              *(v841 - 1) = v845 * v841[(int)v836 - 1];
                              --v841;
                              --v844;
                            }
                            while (v844);
                          }
                        }
                      }
                      unint64_t v154 = (int *)&v841[v840];
                      unint64_t v153 = &v842[v840];
                      ++v838;
                    }
                    while (v838 != v837);
                  }
                }
                else if ((int)v837 >= 1)
                {
                  int v1538 = 0;
                  uint64_t v1539 = (v834 - 1) * (int)v836;
                  uint64_t v1540 = v834 * (uint64_t)(int)v836;
                  do
                  {
                    uint64_t v1541 = (char *)v154 + v1539;
                    if ((int)v836 >= 1) {
                      memset(v1541, 1, (int)v836);
                    }
                    unsigned int v1542 = &v153[v1539];
                    if (v835 > 1)
                    {
                      for (int i4 = 1; i4 != v835; ++i4)
                      {
                        int v1544 = v836;
                        if ((int)v836 >= 1)
                        {
                          do
                          {
                            *(v1541 - 1) = v1542[(int)v836 - 1] * v1541[(int)v836 - 1];
                            --v1541;
                            --v1542;
                            --v1544;
                          }
                          while (v1544);
                        }
                      }
                    }
                    unint64_t v154 = (int *)&v1541[v1540];
                    unint64_t v153 = &v1542[v1540];
                    ++v1538;
                  }
                  while (v1538 != v837);
                }
              }
              else if (v150)
              {
                if ((int)v837 >= 1)
                {
                  int v1309 = 0;
                  do
                  {
                    if (v836) {
                      memmove(v154, v153, (int)v836);
                    }
                    v153 += (int)v836;
                    unint64_t v154 = (int *)((char *)v154 + (int)v836);
                    if (v835 >= 2)
                    {
                      for (int i5 = 1; i5 != v835; ++i5)
                      {
                        int v1311 = v836;
                        if ((int)v836 >= 1)
                        {
                          do
                          {
                            char v1312 = *v153++;
                            *(unsigned char *)unint64_t v154 = v1312 * *((unsigned char *)v154 - (int)v836);
                            unint64_t v154 = (int *)((char *)v154 + 1);
                            --v1311;
                          }
                          while (v1311);
                        }
                      }
                    }
                    ++v1309;
                  }
                  while (v1309 != v837);
                }
              }
              else if ((int)v837 >= 1)
              {
                int v1752 = 0;
                do
                {
                  if ((int)v836 >= 1) {
                    memset(v154, 1, (int)v836);
                  }
                  unint64_t v154 = (int *)((char *)v154 + (int)v836);
                  v153 += (int)v836;
                  if (v835 > 1)
                  {
                    for (int i6 = 1; i6 != v835; ++i6)
                    {
                      int v1754 = v836;
                      if ((int)v836 >= 1)
                      {
                        do
                        {
                          *(unsigned char *)unint64_t v154 = v153[-(int)v836] * *((unsigned char *)v154 - (int)v836);
                          unint64_t v154 = (int *)((char *)v154 + 1);
                          ++v153;
                          --v1754;
                        }
                        while (v1754);
                      }
                    }
                  }
                  ++v1752;
                }
                while (v1752 != v837);
              }
            }
          }
        }
        else
        {
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v456 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v456, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v457 = *(void *)&v1773[3][2 * v148];
          unint64_t v458 = (unsigned __int8 *)v1773[19];
          uint64_t v459 = (*a3)[19];
          uint64_t v460 = v1773[6];
          unint64_t v461 = (unint64_t)v460 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v148);
          if (v457 == 1)
          {
            int v462 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
            int v463 = v462;
            if (v149)
            {
              if (v150)
              {
                if ((int)v461 >= 1)
                {
                  int v464 = 0;
                  uint64_t v465 = v462 - 1;
                  do
                  {
                    BOOL v466 = (char *)v459 + v465;
                    uint64_t v467 = &v458[v465];
                    int v468 = v458[v465];
                    *((unsigned char *)v459 + v465) = v468;
                    int v469 = v462 - 1;
                    if (v462 >= 2)
                    {
                      do
                      {
                        int v470 = *--v467;
                        v468 |= v470;
                        *--BOOL v466 = v468;
                        --v469;
                      }
                      while (v469);
                    }
                    uint64_t v459 = (int *)&v466[v462];
                    unint64_t v458 = &v467[v462];
                    ++v464;
                  }
                  while (v464 != v461);
                }
              }
              else if ((int)v461 >= 1)
              {
                uint64_t v1562 = v462 - 1;
                unint64_t v1563 = ~(unint64_t)(v462 - 2) + v1562;
                do
                {
                  *((unsigned char *)v459 + v1562) = 1;
                  uint64_t v1564 = v463 - 1;
                  if (v463 >= 2)
                  {
                    memset((char *)v459 + v1563, 1, (v463 - 1));
                    uint64_t v1564 = ~(unint64_t)(v463 - 2) + v1562;
                  }
                  uint64_t v459 = (int *)((char *)v459 + v1564 + v463);
                  LODWORD(v461) = v461 - 1;
                }
                while (v461);
              }
            }
            else if (v150)
            {
              if ((int)v461 >= 1)
              {
                int v1471 = 0;
                do
                {
                  int v1472 = *v458;
                  *(unsigned char *)uint64_t v459 = v1472;
                  int v1473 = v462 - 1;
                  if (v462 >= 2)
                  {
                    do
                    {
                      int v1474 = *++v458;
                      v1472 |= v1474;
                      *((unsigned char *)v459 + 1) = v1472;
                      uint64_t v459 = (int *)((char *)v459 + 1);
                      --v1473;
                    }
                    while (v1473);
                  }
                  uint64_t v459 = (int *)((char *)v459 + 1);
                  ++v458;
                  ++v1471;
                }
                while (v1471 != v461);
              }
            }
            else if ((int)v461 >= 1)
            {
              uint64_t v1764 = (v462 - 2) + 1;
              do
              {
                *(unsigned char *)uint64_t v459 = 1;
                if (v463 >= 2)
                {
                  memset((char *)v459 + 1, 1, (v463 - 1));
                  uint64_t v459 = (int *)((char *)v459 + v1764);
                }
                uint64_t v459 = (int *)((char *)v459 + 1);
                LODWORD(v461) = v461 - 1;
              }
              while (v461);
            }
          }
          else
          {
            unint64_t v860 = *(void *)&v1773[3][2 * v148];
            int v861 = mlx::core::array::shape((mlx::core::array *)&v1773, v148);
            int v862 = v861;
            uint64_t v863 = *(void *)&v1773[3][2 * v148];
            unint64_t v864 = v461 / v860;
            if (v149)
            {
              if (v150)
              {
                if ((int)v864 >= 1)
                {
                  int v865 = 0;
                  uint64_t v866 = (v861 - 1) * (int)v863;
                  uint64_t v867 = v861 * (uint64_t)(int)v863;
                  do
                  {
                    uint64_t v868 = (char *)v459 + v866;
                    uint64_t v869 = &v458[v866];
                    if (v863) {
                      memmove(v868, v869, (int)v863);
                    }
                    if (v862 >= 2)
                    {
                      for (int i7 = 1; i7 != v862; ++i7)
                      {
                        int v871 = v863;
                        if ((int)v863 >= 1)
                        {
                          do
                          {
                            char v872 = *--v869;
                            *(v868 - 1) = v868[(int)v863 - 1] | v872;
                            --v868;
                            --v871;
                          }
                          while (v871);
                        }
                      }
                    }
                    uint64_t v459 = (int *)&v868[v867];
                    unint64_t v458 = &v869[v867];
                    ++v865;
                  }
                  while (v865 != v864);
                }
              }
              else if ((int)v864 >= 1)
              {
                int v1565 = 0;
                uint64_t v1566 = (v861 - 1) * (int)v863;
                uint64_t v1567 = v861 * (uint64_t)(int)v863;
                do
                {
                  int v1568 = (char *)v459 + v1566;
                  if ((int)v863 >= 1) {
                    memset(v1568, 1, (int)v863);
                  }
                  unsigned int v1569 = &v458[v1566];
                  if (v862 > 1)
                  {
                    for (int i8 = 1; i8 != v862; ++i8)
                    {
                      int v1571 = v863;
                      if ((int)v863 >= 1)
                      {
                        do
                        {
                          *(v1568 - 1) = v1568[(int)v863 - 1] | v1569[(int)v863 - 1];
                          --v1568;
                          --v1569;
                          --v1571;
                        }
                        while (v1571);
                      }
                    }
                  }
                  uint64_t v459 = (int *)&v1568[v1567];
                  unint64_t v458 = &v1569[v1567];
                  ++v1565;
                }
                while (v1565 != v864);
              }
            }
            else if (v150)
            {
              if ((int)v864 >= 1)
              {
                int v1475 = 0;
                do
                {
                  if (v863) {
                    memmove(v459, v458, (int)v863);
                  }
                  v458 += (int)v863;
                  uint64_t v459 = (int *)((char *)v459 + (int)v863);
                  if (v862 >= 2)
                  {
                    for (int i9 = 1; i9 != v862; ++i9)
                    {
                      int v1477 = v863;
                      if ((int)v863 >= 1)
                      {
                        do
                        {
                          char v1478 = *v458++;
                          *(unsigned char *)uint64_t v459 = *((unsigned char *)v459 - (int)v863) | v1478;
                          uint64_t v459 = (int *)((char *)v459 + 1);
                          --v1477;
                        }
                        while (v1477);
                      }
                    }
                  }
                  ++v1475;
                }
                while (v1475 != v864);
              }
            }
            else if ((int)v864 >= 1)
            {
              int v1765 = 0;
              do
              {
                if ((int)v863 >= 1) {
                  memset(v459, 1, (int)v863);
                }
                uint64_t v459 = (int *)((char *)v459 + (int)v863);
                v458 += (int)v863;
                if (v862 > 1)
                {
                  for (int i10 = 1; i10 != v862; ++i10)
                  {
                    int v1767 = v863;
                    if ((int)v863 >= 1)
                    {
                      do
                      {
                        *(unsigned char *)uint64_t v459 = *((unsigned char *)v459 - (int)v863) | v458[-(int)v863];
                        uint64_t v459 = (int *)((char *)v459 + 1);
                        ++v458;
                        --v1767;
                      }
                      while (v1767);
                    }
                  }
                }
                ++v1765;
              }
              while (v1765 != v864);
            }
          }
        }
      }
LABEL_2472:
      mlx::core::array::~array((mlx::core::array *)&v1773);
      return;
    case 1:
      uint64_t v91 = *(int *)(a1 + 24);
      int v92 = *(unsigned __int8 *)(a1 + 28);
      int v93 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v94 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v94, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v95 = *(void *)&v1773[3][2 * v91];
          uint64_t v96 = (char *)v1773[19];
          uint64_t v97 = (*a3)[19];
          unint64_t v98 = v1773[6];
          unint64_t v99 = (unint64_t)v98 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v91);
          if (v95 == 1)
          {
            int v100 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            int v101 = v100;
            if (v92)
            {
              if (v93)
              {
                if ((int)v99 >= 1)
                {
                  int v102 = 0;
                  uint64_t v103 = v100 - 1;
                  do
                  {
                    unint64_t v104 = (char *)v97 + v103;
                    uint64_t v105 = &v96[v103];
                    unsigned __int8 v106 = v96[v103];
                    *((unsigned char *)v97 + v103) = v106;
                    int v107 = v100 - 1;
                    if (v100 >= 2)
                    {
                      do
                      {
                        unsigned int v109 = *--v105;
                        unsigned __int8 v108 = v109;
                        if (v109 > v106) {
                          unsigned __int8 v106 = v108;
                        }
                        *--unint64_t v104 = v106;
                        --v107;
                      }
                      while (v107);
                    }
                    uint64_t v97 = (int *)&v104[v100];
                    uint64_t v96 = &v105[v100];
                    ++v102;
                  }
                  while (v102 != v99);
                }
              }
              else if ((int)v99 >= 1)
              {
                uint64_t v1402 = v100 - 1;
                unint64_t v1403 = ~(unint64_t)(v100 - 2) + v1402;
                do
                {
                  *((unsigned char *)v97 + v1402) = -1;
                  uint64_t v1404 = v101 - 1;
                  if (v101 >= 2)
                  {
                    memset((char *)v97 + v1403, 255, (v101 - 1));
                    uint64_t v1404 = ~(unint64_t)(v101 - 2) + v1402;
                  }
                  uint64_t v97 = (int *)((char *)v97 + v1404 + v101);
                  LODWORD(v99) = v99 - 1;
                }
                while (v99);
              }
            }
            else if (v93)
            {
              if ((int)v99 >= 1)
              {
                int v1049 = 0;
                do
                {
                  unsigned __int8 v1050 = *v96;
                  *(unsigned char *)uint64_t v97 = *v96;
                  int v1051 = v100 - 1;
                  if (v100 >= 2)
                  {
                    do
                    {
                      unsigned int v1053 = *++v96;
                      unsigned __int8 v1052 = v1053;
                      if (v1053 > v1050) {
                        unsigned __int8 v1050 = v1052;
                      }
                      *((unsigned char *)v97 + 1) = v1050;
                      uint64_t v97 = (int *)((char *)v97 + 1);
                      --v1051;
                    }
                    while (v1051);
                  }
                  uint64_t v97 = (int *)((char *)v97 + 1);
                  ++v96;
                  ++v1049;
                }
                while (v1049 != v99);
              }
            }
            else if ((int)v99 >= 1)
            {
              uint64_t v1698 = (v100 - 2) + 1;
              do
              {
                *(unsigned char *)uint64_t v97 = -1;
                if (v101 >= 2)
                {
                  memset((char *)v97 + 1, 255, (v101 - 1));
                  uint64_t v97 = (int *)((char *)v97 + v1698);
                }
                uint64_t v97 = (int *)((char *)v97 + 1);
                LODWORD(v99) = v99 - 1;
              }
              while (v99);
            }
          }
          else
          {
            unint64_t v745 = *(void *)&v1773[3][2 * v91];
            int v746 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            int v747 = v746;
            uint64_t v748 = *(void *)&v1773[3][2 * v91];
            unint64_t v749 = v99 / v745;
            if (v92)
            {
              if (v93)
              {
                if ((int)v749 >= 1)
                {
                  int v750 = 0;
                  uint64_t v751 = (v746 - 1) * (int)v748;
                  uint64_t v752 = v746 * (uint64_t)(int)v748;
                  do
                  {
                    unint64_t v753 = (char *)v97 + v751;
                    unint64_t v754 = &v96[v751];
                    if (v748) {
                      memmove(v753, v754, (int)v748);
                    }
                    if (v747 >= 2)
                    {
                      for (int i11 = 1; i11 != v747; ++i11)
                      {
                        int v756 = v748;
                        if ((int)v748 >= 1)
                        {
                          do
                          {
                            unsigned int v758 = *--v754;
                            char v757 = v758;
                            if (v758 <= v753[(int)v748 - 1]) {
                              char v757 = v753[(int)v748 - 1];
                            }
                            *--unint64_t v753 = v757;
                            --v756;
                          }
                          while (v756);
                        }
                      }
                    }
                    uint64_t v97 = (int *)&v753[v752];
                    uint64_t v96 = &v754[v752];
                    ++v750;
                  }
                  while (v750 != v749);
                }
              }
              else if ((int)v749 >= 1)
              {
                int v1413 = 0;
                uint64_t v1414 = (v746 - 1) * (int)v748;
                uint64_t v1415 = v746 * (uint64_t)(int)v748;
                uint64_t v1416 = (int)v748 - 1;
                do
                {
                  uint64_t v1417 = (char *)v97 + v1414;
                  if ((int)v748 >= 1) {
                    memset(v1417, 255, (int)v748);
                  }
                  uint64_t v1418 = &v96[v1414];
                  if (v747 > 1)
                  {
                    for (int i12 = 1; i12 != v747; ++i12)
                    {
                      int v1420 = v748;
                      if ((int)v748 >= 1)
                      {
                        do
                        {
                          unsigned int v1421 = v1418[v1416];
                          if (v1421 <= v1417[v1416]) {
                            LOBYTE(v1421) = v1417[v1416];
                          }
                          *--uint64_t v1417 = v1421;
                          --v1418;
                          --v1420;
                        }
                        while (v1420);
                      }
                    }
                  }
                  uint64_t v97 = (int *)&v1417[v1415];
                  uint64_t v96 = &v1418[v1415];
                  ++v1413;
                }
                while (v1413 != v749);
              }
            }
            else if (v93)
            {
              if ((int)v749 >= 1)
              {
                int v1059 = 0;
                do
                {
                  if (v748) {
                    memmove(v97, v96, (int)v748);
                  }
                  v96 += (int)v748;
                  uint64_t v97 = (int *)((char *)v97 + (int)v748);
                  if (v747 >= 2)
                  {
                    for (int i13 = 1; i13 != v747; ++i13)
                    {
                      int v1061 = v748;
                      if ((int)v748 >= 1)
                      {
                        do
                        {
                          unsigned int v1063 = *v96++;
                          char v1062 = v1063;
                          if (v1063 <= *((unsigned __int8 *)v97 - (int)v748)) {
                            char v1062 = *((unsigned char *)v97 - (int)v748);
                          }
                          *(unsigned char *)uint64_t v97 = v1062;
                          uint64_t v97 = (int *)((char *)v97 + 1);
                          --v1061;
                        }
                        while (v1061);
                      }
                    }
                  }
                  ++v1059;
                }
                while (v1059 != v749);
              }
            }
            else if ((int)v749 >= 1)
            {
              int v1704 = 0;
              do
              {
                if ((int)v748 >= 1) {
                  memset(v97, 255, (int)v748);
                }
                uint64_t v97 = (int *)((char *)v97 + (int)v748);
                v96 += (int)v748;
                if (v747 > 1)
                {
                  for (int i14 = 1; i14 != v747; ++i14)
                  {
                    int v1706 = v748;
                    if ((int)v748 >= 1)
                    {
                      do
                      {
                        unsigned int v1707 = v96[-(int)v748];
                        if (v1707 <= *((unsigned __int8 *)v97 - (int)v748)) {
                          LOBYTE(v1707) = *((unsigned char *)v97 - (int)v748);
                        }
                        *(unsigned char *)uint64_t v97 = v1707;
                        uint64_t v97 = (int *)((char *)v97 + 1);
                        ++v96;
                        --v1706;
                      }
                      while (v1706);
                    }
                  }
                }
                ++v1704;
              }
              while (v1704 != v749);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          int v353 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v353, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v354 = *(void *)&v1773[3][2 * v91];
          uint64_t v355 = (unsigned __int8 *)v1773[19];
          uint64_t v356 = (*a3)[19];
          int v357 = v1773[6];
          unint64_t v358 = (unint64_t)v357 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v91);
          if (v354 == 1)
          {
            int v359 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            if (v92)
            {
              if (v93)
              {
                if ((int)v358 >= 1)
                {
                  int v360 = 0;
                  uint64_t v361 = v359 - 1;
                  do
                  {
                    uint64_t v362 = (char *)v356 + v361;
                    uint64_t v363 = &v355[v361];
                    unsigned __int8 v364 = v355[v361];
                    *((unsigned char *)v356 + v361) = v364;
                    int v365 = v359 - 1;
                    if (v359 >= 2)
                    {
                      do
                      {
                        unsigned int v367 = *--v363;
                        unsigned __int8 v366 = v367;
                        if (v367 < v364) {
                          unsigned __int8 v364 = v366;
                        }
                        *--uint64_t v362 = v364;
                        --v365;
                      }
                      while (v365);
                    }
                    uint64_t v356 = (int *)&v362[v359];
                    uint64_t v355 = &v363[v359];
                    ++v360;
                  }
                  while (v360 != v358);
                }
              }
              else if ((int)v358 >= 1)
              {
                int v1405 = 0;
                uint64_t v1406 = v359 - 1;
                do
                {
                  uint64_t v1407 = (char *)v356 + v1406;
                  unint64_t v1408 = &v355[v1406];
                  *((unsigned char *)v356 + v1406) = -1;
                  if (v359 >= 2)
                  {
                    unsigned __int8 v1409 = -1;
                    int v1410 = v359 - 1;
                    do
                    {
                      unsigned int v1412 = *v1408--;
                      unsigned __int8 v1411 = v1412;
                      if (v1412 < v1409) {
                        unsigned __int8 v1409 = v1411;
                      }
                      *--uint64_t v1407 = v1409;
                      --v1410;
                    }
                    while (v1410);
                  }
                  uint64_t v356 = (int *)&v1407[v359];
                  uint64_t v355 = &v1408[v359];
                  ++v1405;
                }
                while (v1405 != v358);
              }
            }
            else if (v93)
            {
              if ((int)v358 >= 1)
              {
                int v1054 = 0;
                do
                {
                  unsigned __int8 v1055 = *v355;
                  *(unsigned char *)uint64_t v356 = *v355;
                  int v1056 = v359 - 1;
                  if (v359 >= 2)
                  {
                    do
                    {
                      unsigned int v1058 = *++v355;
                      unsigned __int8 v1057 = v1058;
                      if (v1058 < v1055) {
                        unsigned __int8 v1055 = v1057;
                      }
                      *((unsigned char *)v356 + 1) = v1055;
                      uint64_t v356 = (int *)((char *)v356 + 1);
                      --v1056;
                    }
                    while (v1056);
                  }
                  uint64_t v356 = (int *)((char *)v356 + 1);
                  ++v355;
                  ++v1054;
                }
                while (v1054 != v358);
              }
            }
            else if ((int)v358 >= 1)
            {
              int v1699 = 0;
              do
              {
                *(unsigned char *)uint64_t v356 = -1;
                if (v359 >= 2)
                {
                  unsigned __int8 v1700 = -1;
                  int v1701 = v359 - 1;
                  do
                  {
                    unsigned int v1703 = *v355++;
                    unsigned __int8 v1702 = v1703;
                    if (v1703 < v1700) {
                      unsigned __int8 v1700 = v1702;
                    }
                    *((unsigned char *)v356 + 1) = v1700;
                    uint64_t v356 = (int *)((char *)v356 + 1);
                    --v1701;
                  }
                  while (v1701);
                }
                uint64_t v356 = (int *)((char *)v356 + 1);
                ++v355;
                ++v1699;
              }
              while (v1699 != v358);
            }
          }
          else
          {
            unint64_t v759 = *(void *)&v1773[3][2 * v91];
            int v760 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            int v761 = v760;
            uint64_t v762 = *(void *)&v1773[3][2 * v91];
            unint64_t v763 = v358 / v759;
            if (v92)
            {
              if (v93)
              {
                if ((int)v763 >= 1)
                {
                  int v764 = 0;
                  uint64_t v765 = (v760 - 1) * (int)v762;
                  uint64_t v766 = v760 * (uint64_t)(int)v762;
                  do
                  {
                    unint64_t v767 = (char *)v356 + v765;
                    uint64_t v768 = &v355[v765];
                    if (v762) {
                      memmove(v767, v768, (int)v762);
                    }
                    if (v761 >= 2)
                    {
                      for (int i15 = 1; i15 != v761; ++i15)
                      {
                        int v770 = v762;
                        if ((int)v762 >= 1)
                        {
                          do
                          {
                            unsigned int v772 = *--v768;
                            char v771 = v772;
                            if (v772 >= v767[(int)v762 - 1]) {
                              char v771 = v767[(int)v762 - 1];
                            }
                            *--unint64_t v767 = v771;
                            --v770;
                          }
                          while (v770);
                        }
                      }
                    }
                    uint64_t v356 = (int *)&v767[v766];
                    uint64_t v355 = &v768[v766];
                    ++v764;
                  }
                  while (v764 != v763);
                }
              }
              else if ((int)v763 >= 1)
              {
                int v1422 = 0;
                uint64_t v1423 = (v760 - 1) * (int)v762;
                uint64_t v1424 = v760 * (uint64_t)(int)v762;
                uint64_t v1425 = (int)v762 - 1;
                do
                {
                  int v1426 = (char *)v356 + v1423;
                  if ((int)v762 >= 1) {
                    memset(v1426, 255, (int)v762);
                  }
                  ldiv_t v1427 = &v355[v1423];
                  if (v761 > 1)
                  {
                    for (int i16 = 1; i16 != v761; ++i16)
                    {
                      int v1429 = v762;
                      if ((int)v762 >= 1)
                      {
                        do
                        {
                          unsigned int v1430 = v1427[v1425];
                          if (v1430 >= v1426[v1425]) {
                            LOBYTE(v1430) = v1426[v1425];
                          }
                          *--int v1426 = v1430;
                          --v1427;
                          --v1429;
                        }
                        while (v1429);
                      }
                    }
                  }
                  uint64_t v356 = (int *)&v1426[v1424];
                  uint64_t v355 = &v1427[v1424];
                  ++v1422;
                }
                while (v1422 != v763);
              }
            }
            else if (v93)
            {
              if ((int)v763 >= 1)
              {
                int v1064 = 0;
                do
                {
                  if (v762) {
                    memmove(v356, v355, (int)v762);
                  }
                  v355 += (int)v762;
                  uint64_t v356 = (int *)((char *)v356 + (int)v762);
                  if (v761 >= 2)
                  {
                    for (int i17 = 1; i17 != v761; ++i17)
                    {
                      int v1066 = v762;
                      if ((int)v762 >= 1)
                      {
                        do
                        {
                          unsigned int v1068 = *v355++;
                          char v1067 = v1068;
                          if (v1068 >= *((unsigned __int8 *)v356 - (int)v762)) {
                            char v1067 = *((unsigned char *)v356 - (int)v762);
                          }
                          *(unsigned char *)uint64_t v356 = v1067;
                          uint64_t v356 = (int *)((char *)v356 + 1);
                          --v1066;
                        }
                        while (v1066);
                      }
                    }
                  }
                  ++v1064;
                }
                while (v1064 != v763);
              }
            }
            else if ((int)v763 >= 1)
            {
              int v1708 = 0;
              do
              {
                if ((int)v762 >= 1) {
                  memset(v356, 255, (int)v762);
                }
                uint64_t v356 = (int *)((char *)v356 + (int)v762);
                v355 += (int)v762;
                if (v761 > 1)
                {
                  for (int i18 = 1; i18 != v761; ++i18)
                  {
                    int v1710 = v762;
                    if ((int)v762 >= 1)
                    {
                      do
                      {
                        unsigned int v1711 = v355[-(int)v762];
                        if (v1711 >= *((unsigned __int8 *)v356 - (int)v762)) {
                          LOBYTE(v1711) = *((unsigned char *)v356 - (int)v762);
                        }
                        *(unsigned char *)uint64_t v356 = v1711;
                        uint64_t v356 = (int *)((char *)v356 + 1);
                        ++v355;
                        --v1710;
                      }
                      while (v1710);
                    }
                  }
                }
                ++v1708;
              }
              while (v1708 != v763);
            }
          }
          break;
        case 2:
          int v282 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v282, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v283 = *(void *)&v1773[3][2 * v91];
          uint64_t v284 = (unsigned __int8 *)v1773[19];
          int v285 = (*a3)[19];
          unsigned int v286 = v1773[6];
          unint64_t v287 = (unint64_t)v286 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v91);
          if (v283 == 1)
          {
            int v288 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            if (v92)
            {
              if (v93)
              {
                if ((int)v287 >= 1)
                {
                  int v289 = 0;
                  uint64_t v290 = v288 - 1;
                  do
                  {
                    unsigned int v291 = (char *)v285 + v290;
                    unsigned int v292 = &v284[v290];
                    int v293 = v284[v290];
                    *((unsigned char *)v285 + v290) = v293;
                    int v294 = v288 - 1;
                    if (v288 >= 2)
                    {
                      do
                      {
                        int v295 = *--v292;
                        v293 += v295;
                        *--unsigned int v291 = v293;
                        --v294;
                      }
                      while (v294);
                    }
                    int v285 = (int *)&v291[v288];
                    uint64_t v284 = &v292[v288];
                    ++v289;
                  }
                  while (v289 != v287);
                }
              }
              else if ((int)v287 >= 1)
              {
                int v1207 = 0;
                uint64_t v1208 = v288 - 1;
                do
                {
                  int v1209 = (char *)v285 + v1208;
                  int v1210 = &v284[v1208];
                  *((unsigned char *)v285 + v1208) = 0;
                  if (v288 >= 2)
                  {
                    int v1211 = 0;
                    int v1212 = v288 - 1;
                    do
                    {
                      int v1213 = *v1210--;
                      v1211 += v1213;
                      *--int v1209 = v1211;
                      --v1212;
                    }
                    while (v1212);
                  }
                  int v285 = (int *)&v1209[v288];
                  uint64_t v284 = &v1210[v288];
                  ++v1207;
                }
                while (v1207 != v287);
              }
            }
            else if (v93)
            {
              if ((int)v287 >= 1)
              {
                int v933 = 0;
                do
                {
                  int v934 = *v284;
                  *(unsigned char *)int v285 = v934;
                  int v935 = v288 - 1;
                  if (v288 >= 2)
                  {
                    do
                    {
                      int v936 = *++v284;
                      v934 += v936;
                      *((unsigned char *)v285 + 1) = v934;
                      int v285 = (int *)((char *)v285 + 1);
                      --v935;
                    }
                    while (v935);
                  }
                  int v285 = (int *)((char *)v285 + 1);
                  ++v284;
                  ++v933;
                }
                while (v933 != v287);
              }
            }
            else if ((int)v287 >= 1)
            {
              int v1607 = 0;
              do
              {
                *(unsigned char *)int v285 = 0;
                if (v288 >= 2)
                {
                  int v1608 = 0;
                  int v1609 = v288 - 1;
                  do
                  {
                    int v1610 = *v284++;
                    v1608 += v1610;
                    *((unsigned char *)v285 + 1) = v1608;
                    int v285 = (int *)((char *)v285 + 1);
                    --v1609;
                  }
                  while (v1609);
                }
                int v285 = (int *)((char *)v285 + 1);
                ++v284;
                ++v1607;
              }
              while (v1607 != v287);
            }
          }
          else
          {
            unint64_t v566 = *(void *)&v1773[3][2 * v91];
            int v567 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            int v568 = v567;
            uint64_t v569 = *(void *)&v1773[3][2 * v91];
            unint64_t v570 = v287 / v566;
            if (v92)
            {
              if (v93)
              {
                if ((int)v570 >= 1)
                {
                  int v571 = 0;
                  uint64_t v572 = (v567 - 1) * (int)v569;
                  uint64_t v573 = v567 * (uint64_t)(int)v569;
                  do
                  {
                    uint64_t v574 = (char *)v285 + v572;
                    uint64_t v575 = &v284[v572];
                    if (v569) {
                      memmove(v574, v575, (int)v569);
                    }
                    if (v568 >= 2)
                    {
                      for (int i19 = 1; i19 != v568; ++i19)
                      {
                        int v577 = v569;
                        if ((int)v569 >= 1)
                        {
                          do
                          {
                            char v578 = *--v575;
                            *(v574 - 1) = v578 + v574[(int)v569 - 1];
                            --v574;
                            --v577;
                          }
                          while (v577);
                        }
                      }
                    }
                    int v285 = (int *)&v574[v573];
                    uint64_t v284 = &v575[v573];
                    ++v571;
                  }
                  while (v571 != v570);
                }
              }
              else if ((int)v570 >= 1)
              {
                int v1214 = 0;
                uint64_t v1215 = (v567 - 1) * (int)v569;
                uint64_t v1216 = v567 * (uint64_t)(int)v569;
                do
                {
                  uint64_t v1217 = (char *)v285 + v1215;
                  if ((int)v569 >= 1) {
                    bzero(v1217, (int)v569);
                  }
                  uint64_t v1218 = &v284[v1215];
                  if (v568 > 1)
                  {
                    for (int i20 = 1; i20 != v568; ++i20)
                    {
                      int v1220 = v569;
                      if ((int)v569 >= 1)
                      {
                        do
                        {
                          *(v1217 - 1) = v1218[(int)v569 - 1] + v1217[(int)v569 - 1];
                          --v1217;
                          --v1218;
                          --v1220;
                        }
                        while (v1220);
                      }
                    }
                  }
                  int v285 = (int *)&v1217[v1216];
                  uint64_t v284 = &v1218[v1216];
                  ++v1214;
                }
                while (v1214 != v570);
              }
            }
            else if (v93)
            {
              if ((int)v570 >= 1)
              {
                int v937 = 0;
                do
                {
                  if (v569) {
                    memmove(v285, v284, (int)v569);
                  }
                  v284 += (int)v569;
                  int v285 = (int *)((char *)v285 + (int)v569);
                  if (v568 >= 2)
                  {
                    for (int i21 = 1; i21 != v568; ++i21)
                    {
                      int v939 = v569;
                      if ((int)v569 >= 1)
                      {
                        do
                        {
                          char v940 = *v284++;
                          *(unsigned char *)int v285 = v940 + *((unsigned char *)v285 - (int)v569);
                          int v285 = (int *)((char *)v285 + 1);
                          --v939;
                        }
                        while (v939);
                      }
                    }
                  }
                  ++v937;
                }
                while (v937 != v570);
              }
            }
            else if ((int)v570 >= 1)
            {
              int v1611 = 0;
              do
              {
                if ((int)v569 >= 1) {
                  bzero(v285, (int)v569);
                }
                int v285 = (int *)((char *)v285 + (int)v569);
                v284 += (int)v569;
                if (v568 > 1)
                {
                  for (int i22 = 1; i22 != v568; ++i22)
                  {
                    int v1613 = v569;
                    if ((int)v569 >= 1)
                    {
                      do
                      {
                        *(unsigned char *)int v285 = v284[-(int)v569] + *((unsigned char *)v285 - (int)v569);
                        int v285 = (int *)((char *)v285 + 1);
                        ++v284;
                        --v1613;
                      }
                      while (v1613);
                    }
                  }
                }
                ++v1611;
              }
              while (v1611 != v570);
            }
          }
          break;
        case 3:
          uint64_t v325 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v325, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v326 = *(void *)&v1773[3][2 * v91];
          uint64_t v327 = (unsigned __int8 *)v1773[19];
          uint64_t v328 = (*a3)[19];
          unint64_t v329 = v1773[6];
          unint64_t v330 = (unint64_t)v329 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v91);
          if (v326 == 1)
          {
            int v331 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            if (v92)
            {
              if (v93)
              {
                if ((int)v330 >= 1)
                {
                  int v332 = 0;
                  uint64_t v333 = v331 - 1;
                  do
                  {
                    ldiv_t v334 = (char *)v328 + v333;
                    unint64_t v335 = &v327[v333];
                    int v336 = v327[v333];
                    *((unsigned char *)v328 + v333) = v336;
                    int v337 = v331 - 1;
                    if (v331 >= 2)
                    {
                      do
                      {
                        int v338 = *--v335;
                        v336 *= v338;
                        *--ldiv_t v334 = v336;
                        --v337;
                      }
                      while (v337);
                    }
                    uint64_t v328 = (int *)&v334[v331];
                    uint64_t v327 = &v335[v331];
                    ++v332;
                  }
                  while (v332 != v330);
                }
              }
              else if ((int)v330 >= 1)
              {
                int v1235 = 0;
                uint64_t v1236 = v331 - 1;
                do
                {
                  unint64_t v1237 = (char *)v328 + v1236;
                  uint64_t v1238 = &v327[v1236];
                  *((unsigned char *)v328 + v1236) = 1;
                  if (v331 >= 2)
                  {
                    int v1239 = 1;
                    int v1240 = v331 - 1;
                    do
                    {
                      int v1241 = *v1238--;
                      v1239 *= v1241;
                      *--unint64_t v1237 = v1239;
                      --v1240;
                    }
                    while (v1240);
                  }
                  uint64_t v328 = (int *)&v1237[v331];
                  uint64_t v327 = &v1238[v331];
                  ++v1235;
                }
                while (v1235 != v330);
              }
            }
            else if (v93)
            {
              if ((int)v330 >= 1)
              {
                int v949 = 0;
                do
                {
                  int v950 = *v327;
                  *(unsigned char *)uint64_t v328 = v950;
                  int v951 = v331 - 1;
                  if (v331 >= 2)
                  {
                    do
                    {
                      int v952 = *++v327;
                      v950 *= v952;
                      *((unsigned char *)v328 + 1) = v950;
                      uint64_t v328 = (int *)((char *)v328 + 1);
                      --v951;
                    }
                    while (v951);
                  }
                  uint64_t v328 = (int *)((char *)v328 + 1);
                  ++v327;
                  ++v949;
                }
                while (v949 != v330);
              }
            }
            else if ((int)v330 >= 1)
            {
              int v1621 = 0;
              do
              {
                *(unsigned char *)uint64_t v328 = 1;
                if (v331 >= 2)
                {
                  int v1622 = 1;
                  int v1623 = v331 - 1;
                  do
                  {
                    int v1624 = *v327++;
                    v1622 *= v1624;
                    *((unsigned char *)v328 + 1) = v1622;
                    uint64_t v328 = (int *)((char *)v328 + 1);
                    --v1623;
                  }
                  while (v1623);
                }
                uint64_t v328 = (int *)((char *)v328 + 1);
                ++v327;
                ++v1621;
              }
              while (v1621 != v330);
            }
          }
          else
          {
            unint64_t v592 = *(void *)&v1773[3][2 * v91];
            int v593 = mlx::core::array::shape((mlx::core::array *)&v1773, v91);
            int v594 = v593;
            uint64_t v595 = *(void *)&v1773[3][2 * v91];
            unint64_t v596 = v330 / v592;
            if (v92)
            {
              if (v93)
              {
                if ((int)v596 >= 1)
                {
                  int v597 = 0;
                  uint64_t v598 = (v593 - 1) * (int)v595;
                  uint64_t v599 = v593 * (uint64_t)(int)v595;
                  do
                  {
                    uint64_t v600 = (char *)v328 + v598;
                    unint64_t v601 = &v327[v598];
                    if (v595) {
                      memmove(v600, v601, (int)v595);
                    }
                    if (v594 >= 2)
                    {
                      for (int i23 = 1; i23 != v594; ++i23)
                      {
                        int v603 = v595;
                        if ((int)v595 >= 1)
                        {
                          do
                          {
                            char v604 = *--v601;
                            *(v600 - 1) = v604 * v600[(int)v595 - 1];
                            --v600;
                            --v603;
                          }
                          while (v603);
                        }
                      }
                    }
                    uint64_t v328 = (int *)&v600[v599];
                    uint64_t v327 = &v601[v599];
                    ++v597;
                  }
                  while (v597 != v596);
                }
              }
              else if ((int)v596 >= 1)
              {
                int v1242 = 0;
                uint64_t v1243 = (v593 - 1) * (int)v595;
                uint64_t v1244 = v593 * (uint64_t)(int)v595;
                do
                {
                  unint64_t v1245 = (char *)v328 + v1243;
                  if ((int)v595 >= 1) {
                    memset(v1245, 1, (int)v595);
                  }
                  uint64_t v1246 = &v327[v1243];
                  if (v594 > 1)
                  {
                    for (int i24 = 1; i24 != v594; ++i24)
                    {
                      int v1248 = v595;
                      if ((int)v595 >= 1)
                      {
                        do
                        {
                          *(v1245 - 1) = v1246[(int)v595 - 1] * v1245[(int)v595 - 1];
                          --v1245;
                          --v1246;
                          --v1248;
                        }
                        while (v1248);
                      }
                    }
                  }
                  uint64_t v328 = (int *)&v1245[v1244];
                  uint64_t v327 = &v1246[v1244];
                  ++v1242;
                }
                while (v1242 != v596);
              }
            }
            else if (v93)
            {
              if ((int)v596 >= 1)
              {
                int v953 = 0;
                do
                {
                  if (v595) {
                    memmove(v328, v327, (int)v595);
                  }
                  v327 += (int)v595;
                  uint64_t v328 = (int *)((char *)v328 + (int)v595);
                  if (v594 >= 2)
                  {
                    for (int i25 = 1; i25 != v594; ++i25)
                    {
                      int v955 = v595;
                      if ((int)v595 >= 1)
                      {
                        do
                        {
                          char v956 = *v327++;
                          *(unsigned char *)uint64_t v328 = v956 * *((unsigned char *)v328 - (int)v595);
                          uint64_t v328 = (int *)((char *)v328 + 1);
                          --v955;
                        }
                        while (v955);
                      }
                    }
                  }
                  ++v953;
                }
                while (v953 != v596);
              }
            }
            else if ((int)v596 >= 1)
            {
              int v1625 = 0;
              do
              {
                if ((int)v595 >= 1) {
                  memset(v328, 1, (int)v595);
                }
                uint64_t v328 = (int *)((char *)v328 + (int)v595);
                v327 += (int)v595;
                if (v594 > 1)
                {
                  for (int i26 = 1; i26 != v594; ++i26)
                  {
                    int v1627 = v595;
                    if ((int)v595 >= 1)
                    {
                      do
                      {
                        *(unsigned char *)uint64_t v328 = v327[-(int)v595] * *((unsigned char *)v328 - (int)v595);
                        uint64_t v328 = (int *)((char *)v328 + 1);
                        ++v327;
                        --v1627;
                      }
                      while (v1627);
                    }
                  }
                }
                ++v1625;
              }
              while (v1625 != v596);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    case 2:
      uint64_t v53 = *(int *)(a1 + 24);
      int v54 = *(unsigned __int8 *)(a1 + 28);
      int v55 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v56 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v56, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v57 = *(void *)&v1773[3][2 * v53];
          uint64_t v58 = v1773[19];
          unint64_t v59 = (*a3)[19];
          BOOL v60 = v1773[6];
          unint64_t v61 = (unint64_t)v60 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v53);
          if (v57 == 1)
          {
            int v62 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            int v63 = v62;
            if (v54)
            {
              if (v55)
              {
                if ((int)v61 >= 1)
                {
                  int v64 = 0;
                  uint64_t v65 = v62 - 1;
                  do
                  {
                    uint64_t v66 = &v59[v65];
                    uint64_t v67 = &v58[v65];
                    unsigned int v68 = *v67;
                    *uint64_t v66 = *v67;
                    int v69 = v62 - 1;
                    if (v62 >= 2)
                    {
                      do
                      {
                        unsigned int v71 = *--v67;
                        unsigned int v70 = v71;
                        if (v71 > v68) {
                          unsigned int v68 = v70;
                        }
                        *--uint64_t v66 = v68;
                        --v69;
                      }
                      while (v69);
                    }
                    unint64_t v59 = &v66[v62];
                    uint64_t v58 = &v67[v62];
                    ++v64;
                  }
                  while (v64 != v61);
                }
              }
              else if ((int)v61 >= 1)
              {
                uint64_t v1343 = v62 - 1;
                uint64_t v1344 = 4 * v1343 - 4 * (v62 - 2) - 4;
                size_t v1345 = 4 * (v62 - 1);
                do
                {
                  uint64_t v1346 = &v59[v1343];
                  *uint64_t v1346 = -1;
                  if (v63 >= 2)
                  {
                    uint64_t v1346 = (int *)((char *)v59 + v1344);
                    memset((char *)v59 + v1344, 255, v1345);
                  }
                  unint64_t v59 = &v1346[v63];
                  LODWORD(v61) = v61 - 1;
                }
                while (v61);
              }
            }
            else if (v55)
            {
              if ((int)v61 >= 1)
              {
                int v1009 = 0;
                do
                {
                  unsigned int v1010 = *v58;
                  *unint64_t v59 = *v58;
                  int v1011 = v62 - 1;
                  if (v62 >= 2)
                  {
                    do
                    {
                      unsigned int v1013 = v58[1];
                      ++v58;
                      unsigned int v1012 = v1013;
                      if (v1013 > v1010) {
                        unsigned int v1010 = v1012;
                      }
                      v59[1] = v1010;
                      ++v59;
                      --v1011;
                    }
                    while (v1011);
                  }
                  ++v59;
                  ++v58;
                  ++v1009;
                }
                while (v1009 != v61);
              }
            }
            else if ((int)v61 >= 1)
            {
              uint64_t v1670 = 4 * (v62 - 2) + 4;
              do
              {
                *unint64_t v59 = -1;
                if (v63 >= 2)
                {
                  memset(v59 + 1, 255, 4 * (v63 - 1));
                  unint64_t v59 = (int *)((char *)v59 + v1670);
                }
                ++v59;
                LODWORD(v61) = v61 - 1;
              }
              while (v61);
            }
          }
          else
          {
            unint64_t v687 = *(void *)&v1773[3][2 * v53];
            int v688 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            int v689 = v688;
            uint64_t v690 = *(void *)&v1773[3][2 * v53];
            unint64_t v691 = v61 / v687;
            if (v54)
            {
              if (v55)
              {
                if ((int)v691 >= 1)
                {
                  int v692 = 0;
                  uint64_t v693 = (v688 - 1) * (int)v690;
                  uint64_t v694 = v688 * (int)v690;
                  do
                  {
                    int v696 = &v59[v693];
                    uint64_t v697 = (char *)&v58[v693];
                    if (v690) {
                      memmove(v696, v697, 4 * (int)v690);
                    }
                    if (v689 >= 2)
                    {
                      for (int i27 = 1; i27 != v689; ++i27)
                      {
                        int v699 = v690;
                        if ((int)v690 >= 1)
                        {
                          do
                          {
                            unsigned int v701 = *((_DWORD *)v697 - 1);
                            v697 -= 4;
                            int v700 = v701;
                            uint64_t v695 = 4 * (int)v690 - 4;
                            if (v701 <= *(int *)((char *)v696 + v695)) {
                              int v700 = *(int *)((char *)v696 + v695);
                            }
                            *--int v696 = v700;
                            --v699;
                          }
                          while (v699);
                        }
                      }
                    }
                    unint64_t v59 = &v696[v694];
                    uint64_t v58 = (int *)&v697[4 * v694];
                    ++v692;
                  }
                  while (v692 != v691);
                }
              }
              else if ((int)v691 >= 1)
              {
                int v1355 = 0;
                uint64_t v1356 = (v688 - 1) * (int)v690;
                uint64_t v1357 = v688 * (int)v690;
                uint64_t v1358 = 4 * (int)v690 - 4;
                do
                {
                  uint64_t v1359 = &v59[v1356];
                  if ((int)v690 >= 1) {
                    memset(v1359, 255, 4 * ((int)v690 - (unint64_t)(((int)v690 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1360 = &v58[v1356];
                  if (v689 > 1)
                  {
                    for (int i28 = 1; i28 != v689; ++i28)
                    {
                      int v1362 = v690;
                      if ((int)v690 >= 1)
                      {
                        do
                        {
                          unsigned int v1363 = *(int *)((char *)v1360 + v1358);
                          if (v1363 <= *(int *)((char *)v1359 + v1358)) {
                            unsigned int v1363 = *(int *)((char *)v1359 + v1358);
                          }
                          *--uint64_t v1359 = v1363;
                          --v1360;
                          --v1362;
                        }
                        while (v1362);
                      }
                    }
                  }
                  unint64_t v59 = &v1359[v1357];
                  uint64_t v58 = &v1360[v1357];
                  ++v1355;
                }
                while (v1355 != v691);
              }
            }
            else if (v55)
            {
              if ((int)v691 >= 1)
              {
                int v1019 = 0;
                do
                {
                  if (v690) {
                    memmove(v59, v58, 4 * (int)v690);
                  }
                  v58 += (int)v690;
                  v59 += (int)v690;
                  if (v689 >= 2)
                  {
                    for (int i29 = 1; i29 != v689; ++i29)
                    {
                      int v1021 = v690;
                      if ((int)v690 >= 1)
                      {
                        do
                        {
                          unsigned int v1023 = *v58++;
                          int v1022 = v1023;
                          if (v1023 <= v59[-(int)v690]) {
                            int v1022 = v59[-(int)v690];
                          }
                          *v59++ = v1022;
                          --v1021;
                        }
                        while (v1021);
                      }
                    }
                  }
                  ++v1019;
                }
                while (v1019 != v691);
              }
            }
            else if ((int)v691 >= 1)
            {
              int v1676 = 0;
              do
              {
                if ((int)v690 >= 1) {
                  memset(v59, 255, 4 * ((int)v690 - (unint64_t)(((int)v690 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v59 += (int)v690;
                v58 += (int)v690;
                if (v689 > 1)
                {
                  for (int i30 = 1; i30 != v689; ++i30)
                  {
                    int v1678 = v690;
                    if ((int)v690 >= 1)
                    {
                      do
                      {
                        unsigned int v1679 = v58[-(int)v690];
                        if (v1679 <= v59[-(int)v690]) {
                          unsigned int v1679 = v59[-(int)v690];
                        }
                        *v59++ = v1679;
                        ++v58;
                        --v1678;
                      }
                      while (v1678);
                    }
                  }
                }
                ++v1676;
              }
              while (v1676 != v691);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v267 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v267, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v268 = *(void *)&v1773[3][2 * v53];
          uint64_t v269 = v1773[19];
          unint64_t v270 = (*a3)[19];
          uint64_t v271 = v1773[6];
          unint64_t v272 = (unint64_t)v271 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v53);
          if (v268 == 1)
          {
            int v273 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            if (v54)
            {
              if (v55)
              {
                if ((int)v272 >= 1)
                {
                  int v274 = 0;
                  uint64_t v275 = v273 - 1;
                  do
                  {
                    uint64_t v276 = &v270[v275];
                    uint64_t v277 = &v269[v275];
                    unsigned int v278 = *v277;
                    *uint64_t v276 = *v277;
                    int v279 = v273 - 1;
                    if (v273 >= 2)
                    {
                      do
                      {
                        unsigned int v281 = *--v277;
                        unsigned int v280 = v281;
                        if (v281 < v278) {
                          unsigned int v278 = v280;
                        }
                        *--uint64_t v276 = v278;
                        --v279;
                      }
                      while (v279);
                    }
                    unint64_t v270 = &v276[v273];
                    uint64_t v269 = &v277[v273];
                    ++v274;
                  }
                  while (v274 != v272);
                }
              }
              else if ((int)v272 >= 1)
              {
                int v1347 = 0;
                uint64_t v1348 = v273 - 1;
                do
                {
                  uint64_t v1349 = &v270[v1348];
                  unsigned int v1350 = (unsigned int *)&v269[v1348];
                  *uint64_t v1349 = -1;
                  if (v273 >= 2)
                  {
                    unsigned int v1351 = -1;
                    int v1352 = v273 - 1;
                    do
                    {
                      unsigned int v1354 = *v1350--;
                      unsigned int v1353 = v1354;
                      if (v1354 < v1351) {
                        unsigned int v1351 = v1353;
                      }
                      *--uint64_t v1349 = v1351;
                      --v1352;
                    }
                    while (v1352);
                  }
                  unint64_t v270 = &v1349[v273];
                  uint64_t v269 = (int *)&v1350[v273];
                  ++v1347;
                }
                while (v1347 != v272);
              }
            }
            else if (v55)
            {
              if ((int)v272 >= 1)
              {
                int v1014 = 0;
                do
                {
                  unsigned int v1015 = *v269;
                  int *v270 = *v269;
                  int v1016 = v273 - 1;
                  if (v273 >= 2)
                  {
                    do
                    {
                      unsigned int v1018 = v269[1];
                      ++v269;
                      unsigned int v1017 = v1018;
                      if (v1018 < v1015) {
                        unsigned int v1015 = v1017;
                      }
                      v270[1] = v1015;
                      ++v270;
                      --v1016;
                    }
                    while (v1016);
                  }
                  ++v270;
                  ++v269;
                  ++v1014;
                }
                while (v1014 != v272);
              }
            }
            else if ((int)v272 >= 1)
            {
              int v1671 = 0;
              do
              {
                int *v270 = -1;
                if (v273 >= 2)
                {
                  unsigned int v1672 = -1;
                  int v1673 = v273 - 1;
                  do
                  {
                    unsigned int v1675 = *v269++;
                    unsigned int v1674 = v1675;
                    if (v1675 < v1672) {
                      unsigned int v1672 = v1674;
                    }
                    v270[1] = v1672;
                    ++v270;
                    --v1673;
                  }
                  while (v1673);
                }
                ++v270;
                ++v269;
                ++v1671;
              }
              while (v1671 != v272);
            }
          }
          else
          {
            unint64_t v702 = *(void *)&v1773[3][2 * v53];
            int v703 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            int v704 = v703;
            uint64_t v705 = *(void *)&v1773[3][2 * v53];
            unint64_t v706 = v272 / v702;
            if (v54)
            {
              if (v55)
              {
                if ((int)v706 >= 1)
                {
                  int v707 = 0;
                  uint64_t v708 = (v703 - 1) * (int)v705;
                  uint64_t v709 = v703 * (int)v705;
                  do
                  {
                    uint64_t v711 = &v270[v708];
                    float v712 = (char *)&v269[v708];
                    if (v705) {
                      memmove(v711, v712, 4 * (int)v705);
                    }
                    if (v704 >= 2)
                    {
                      for (int i31 = 1; i31 != v704; ++i31)
                      {
                        int v714 = v705;
                        if ((int)v705 >= 1)
                        {
                          do
                          {
                            unsigned int v716 = *((_DWORD *)v712 - 1);
                            v712 -= 4;
                            int v715 = v716;
                            uint64_t v710 = 4 * (int)v705 - 4;
                            if (v716 >= *(int *)((char *)v711 + v710)) {
                              int v715 = *(int *)((char *)v711 + v710);
                            }
                            *--uint64_t v711 = v715;
                            --v714;
                          }
                          while (v714);
                        }
                      }
                    }
                    unint64_t v270 = &v711[v709];
                    uint64_t v269 = (int *)&v712[4 * v709];
                    ++v707;
                  }
                  while (v707 != v706);
                }
              }
              else if ((int)v706 >= 1)
              {
                int v1364 = 0;
                uint64_t v1365 = (v703 - 1) * (int)v705;
                uint64_t v1366 = v703 * (int)v705;
                uint64_t v1367 = 4 * (int)v705 - 4;
                do
                {
                  uint64_t v1368 = &v270[v1365];
                  if ((int)v705 >= 1) {
                    memset(v1368, 255, 4 * ((int)v705 - (unint64_t)(((int)v705 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1369 = &v269[v1365];
                  if (v704 > 1)
                  {
                    for (int i32 = 1; i32 != v704; ++i32)
                    {
                      int v1371 = v705;
                      if ((int)v705 >= 1)
                      {
                        do
                        {
                          unsigned int v1372 = *(int *)((char *)v1369 + v1367);
                          if (v1372 >= *(int *)((char *)v1368 + v1367)) {
                            unsigned int v1372 = *(int *)((char *)v1368 + v1367);
                          }
                          *--uint64_t v1368 = v1372;
                          --v1369;
                          --v1371;
                        }
                        while (v1371);
                      }
                    }
                  }
                  unint64_t v270 = &v1368[v1366];
                  uint64_t v269 = &v1369[v1366];
                  ++v1364;
                }
                while (v1364 != v706);
              }
            }
            else if (v55)
            {
              if ((int)v706 >= 1)
              {
                int v1024 = 0;
                do
                {
                  if (v705) {
                    memmove(v270, v269, 4 * (int)v705);
                  }
                  v269 += (int)v705;
                  v270 += (int)v705;
                  if (v704 >= 2)
                  {
                    for (int i33 = 1; i33 != v704; ++i33)
                    {
                      int v1026 = v705;
                      if ((int)v705 >= 1)
                      {
                        do
                        {
                          unsigned int v1028 = *v269++;
                          int v1027 = v1028;
                          if (v1028 >= v270[-(int)v705]) {
                            int v1027 = v270[-(int)v705];
                          }
                          *v270++ = v1027;
                          --v1026;
                        }
                        while (v1026);
                      }
                    }
                  }
                  ++v1024;
                }
                while (v1024 != v706);
              }
            }
            else if ((int)v706 >= 1)
            {
              int v1680 = 0;
              do
              {
                if ((int)v705 >= 1) {
                  memset(v270, 255, 4 * ((int)v705 - (unint64_t)(((int)v705 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v270 += (int)v705;
                v269 += (int)v705;
                if (v704 > 1)
                {
                  for (int i34 = 1; i34 != v704; ++i34)
                  {
                    int v1682 = v705;
                    if ((int)v705 >= 1)
                    {
                      do
                      {
                        unsigned int v1683 = v269[-(int)v705];
                        if (v1683 >= v270[-(int)v705]) {
                          unsigned int v1683 = v270[-(int)v705];
                        }
                        *v270++ = v1683;
                        ++v269;
                        --v1682;
                      }
                      while (v1682);
                    }
                  }
                }
                ++v1680;
              }
              while (v1680 != v706);
            }
          }
          break;
        case 2:
          uint64_t v225 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v225, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v226 = *(void *)&v1773[3][2 * v53];
          int v227 = v1773[19];
          int v228 = (*a3)[19];
          int v229 = v1773[6];
          unint64_t v230 = (unint64_t)v229 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v53);
          if (v226 == 1)
          {
            int v231 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            if (v54)
            {
              if (v55)
              {
                if ((int)v230 >= 1)
                {
                  int v232 = 0;
                  uint64_t v233 = v231 - 1;
                  do
                  {
                    unint64_t v234 = &v228[v233];
                    int v235 = &v227[v233];
                    int v236 = *v235;
                    *unint64_t v234 = *v235;
                    int v237 = v231 - 1;
                    if (v231 >= 2)
                    {
                      do
                      {
                        int v238 = *--v235;
                        v236 += v238;
                        *--unint64_t v234 = v236;
                        --v237;
                      }
                      while (v237);
                    }
                    int v228 = &v234[v231];
                    int v227 = &v235[v231];
                    ++v232;
                  }
                  while (v232 != v230);
                }
              }
              else if ((int)v230 >= 1)
              {
                int v1165 = 0;
                uint64_t v1166 = v231 - 1;
                do
                {
                  unint64_t v1167 = &v228[v1166];
                  uint64_t v1168 = &v227[v1166];
                  *unint64_t v1167 = 0;
                  if (v231 >= 2)
                  {
                    int v1169 = 0;
                    int v1170 = v231 - 1;
                    do
                    {
                      int v1171 = *v1168--;
                      v1169 += v1171;
                      *--unint64_t v1167 = v1169;
                      --v1170;
                    }
                    while (v1170);
                  }
                  int v228 = &v1167[v231];
                  int v227 = &v1168[v231];
                  ++v1165;
                }
                while (v1165 != v230);
              }
            }
            else if (v55)
            {
              if ((int)v230 >= 1)
              {
                int v909 = 0;
                do
                {
                  int v910 = *v227;
                  *int v228 = *v227;
                  int v911 = v231 - 1;
                  if (v231 >= 2)
                  {
                    do
                    {
                      int v912 = v227[1];
                      ++v227;
                      v910 += v912;
                      v228[1] = v910;
                      ++v228;
                      --v911;
                    }
                    while (v911);
                  }
                  ++v228;
                  ++v227;
                  ++v909;
                }
                while (v909 != v230);
              }
            }
            else if ((int)v230 >= 1)
            {
              int v1586 = 0;
              do
              {
                *int v228 = 0;
                if (v231 >= 2)
                {
                  int v1587 = 0;
                  int v1588 = v231 - 1;
                  do
                  {
                    int v1589 = *v227++;
                    v1587 += v1589;
                    v228[1] = v1587;
                    ++v228;
                    --v1588;
                  }
                  while (v1588);
                }
                ++v228;
                ++v227;
                ++v1586;
              }
              while (v1586 != v230);
            }
          }
          else
          {
            unint64_t v527 = *(void *)&v1773[3][2 * v53];
            int v528 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            int v529 = v528;
            uint64_t v530 = *(void *)&v1773[3][2 * v53];
            unint64_t v531 = v230 / v527;
            if (v54)
            {
              if (v55)
              {
                if ((int)v531 >= 1)
                {
                  int v532 = 0;
                  uint64_t v533 = (v528 - 1) * (int)v530;
                  uint64_t v534 = v528 * (int)v530;
                  do
                  {
                    uint64_t v535 = &v228[v533];
                    unint64_t v536 = (char *)&v227[v533];
                    if (v530) {
                      memmove(v535, v536, 4 * (int)v530);
                    }
                    if (v529 >= 2)
                    {
                      for (int i35 = 1; i35 != v529; ++i35)
                      {
                        int v538 = v530;
                        if ((int)v530 >= 1)
                        {
                          do
                          {
                            int v539 = *((_DWORD *)v536 - 1);
                            v536 -= 4;
                            *(v535 - 1) = v539 + v535[(int)v530 - 1];
                            --v535;
                            --v538;
                          }
                          while (v538);
                        }
                      }
                    }
                    int v228 = &v535[v534];
                    int v227 = (int *)&v536[4 * v534];
                    ++v532;
                  }
                  while (v532 != v531);
                }
              }
              else if ((int)v531 >= 1)
              {
                int v1172 = 0;
                uint64_t v1173 = (v528 - 1) * (int)v530;
                uint64_t v1174 = v528 * (int)v530;
                do
                {
                  unsigned int v1175 = &v228[v1173];
                  if ((int)v530 >= 1) {
                    bzero(v1175, 4 * ((int)v530 - (unint64_t)(((int)v530 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1176 = &v227[v1173];
                  if (v529 > 1)
                  {
                    for (int i36 = 1; i36 != v529; ++i36)
                    {
                      int v1178 = v530;
                      if ((int)v530 >= 1)
                      {
                        do
                        {
                          *(v1175 - 1) = v1176[(int)v530 - 1] + v1175[(int)v530 - 1];
                          --v1175;
                          --v1176;
                          --v1178;
                        }
                        while (v1178);
                      }
                    }
                  }
                  int v228 = &v1175[v1174];
                  int v227 = &v1176[v1174];
                  ++v1172;
                }
                while (v1172 != v531);
              }
            }
            else if (v55)
            {
              if ((int)v531 >= 1)
              {
                int v913 = 0;
                do
                {
                  if (v530) {
                    memmove(v228, v227, 4 * (int)v530);
                  }
                  v227 += (int)v530;
                  v228 += (int)v530;
                  if (v529 >= 2)
                  {
                    for (int i37 = 1; i37 != v529; ++i37)
                    {
                      int v915 = v530;
                      if ((int)v530 >= 1)
                      {
                        do
                        {
                          int v916 = *v227++;
                          *int v228 = v916 + v228[-(int)v530];
                          ++v228;
                          --v915;
                        }
                        while (v915);
                      }
                    }
                  }
                  ++v913;
                }
                while (v913 != v531);
              }
            }
            else if ((int)v531 >= 1)
            {
              int v1590 = 0;
              do
              {
                if ((int)v530 >= 1) {
                  bzero(v228, 4 * ((int)v530 - (unint64_t)(((int)v530 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v228 += (int)v530;
                v227 += (int)v530;
                if (v529 > 1)
                {
                  for (int i38 = 1; i38 != v529; ++i38)
                  {
                    int v1592 = v530;
                    if ((int)v530 >= 1)
                    {
                      do
                      {
                        *int v228 = v227[-(int)v530] + v228[-(int)v530];
                        ++v228;
                        ++v227;
                        --v1592;
                      }
                      while (v1592);
                    }
                  }
                }
                ++v1590;
              }
              while (v1590 != v531);
            }
          }
          break;
        case 3:
          int v239 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v239, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v240 = *(void *)&v1773[3][2 * v53];
          int v241 = v1773[19];
          int v242 = (*a3)[19];
          int v243 = v1773[6];
          unint64_t v244 = (unint64_t)v243 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v53);
          if (v240 == 1)
          {
            int v245 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            if (v54)
            {
              if (v55)
              {
                if ((int)v244 >= 1)
                {
                  int v246 = 0;
                  uint64_t v247 = v245 - 1;
                  do
                  {
                    unsigned int v248 = &v242[v247];
                    char v249 = &v241[v247];
                    int v250 = *v249;
                    *unsigned int v248 = *v249;
                    int v251 = v245 - 1;
                    if (v245 >= 2)
                    {
                      do
                      {
                        int v252 = *--v249;
                        v250 *= v252;
                        *--unsigned int v248 = v250;
                        --v251;
                      }
                      while (v251);
                    }
                    int v242 = &v248[v245];
                    int v241 = &v249[v245];
                    ++v246;
                  }
                  while (v246 != v244);
                }
              }
              else if ((int)v244 >= 1)
              {
                int v1179 = 0;
                uint64_t v1180 = v245 - 1;
                do
                {
                  unint64_t v1181 = &v242[v1180];
                  uint64_t v1182 = &v241[v1180];
                  *unint64_t v1181 = 1;
                  if (v245 >= 2)
                  {
                    int v1183 = 1;
                    int v1184 = v245 - 1;
                    do
                    {
                      int v1185 = *v1182--;
                      v1183 *= v1185;
                      *--unint64_t v1181 = v1183;
                      --v1184;
                    }
                    while (v1184);
                  }
                  int v242 = &v1181[v245];
                  int v241 = &v1182[v245];
                  ++v1179;
                }
                while (v1179 != v244);
              }
            }
            else if (v55)
            {
              if ((int)v244 >= 1)
              {
                int v917 = 0;
                do
                {
                  int v918 = *v241;
                  *int v242 = *v241;
                  int v919 = v245 - 1;
                  if (v245 >= 2)
                  {
                    do
                    {
                      int v920 = v241[1];
                      ++v241;
                      v918 *= v920;
                      v242[1] = v918;
                      ++v242;
                      --v919;
                    }
                    while (v919);
                  }
                  ++v242;
                  ++v241;
                  ++v917;
                }
                while (v917 != v244);
              }
            }
            else if ((int)v244 >= 1)
            {
              int v1593 = 0;
              do
              {
                *int v242 = 1;
                if (v245 >= 2)
                {
                  int v1594 = 1;
                  int v1595 = v245 - 1;
                  do
                  {
                    int v1596 = *v241++;
                    v1594 *= v1596;
                    v242[1] = v1594;
                    ++v242;
                    --v1595;
                  }
                  while (v1595);
                }
                ++v242;
                ++v241;
                ++v1593;
              }
              while (v1593 != v244);
            }
          }
          else
          {
            unint64_t v540 = *(void *)&v1773[3][2 * v53];
            int v541 = mlx::core::array::shape((mlx::core::array *)&v1773, v53);
            int v542 = v541;
            uint64_t v543 = *(void *)&v1773[3][2 * v53];
            unint64_t v544 = v244 / v540;
            if (v54)
            {
              if (v55)
              {
                if ((int)v544 >= 1)
                {
                  int v545 = 0;
                  uint64_t v546 = (v541 - 1) * (int)v543;
                  uint64_t v547 = v541 * (int)v543;
                  do
                  {
                    unint64_t v548 = &v242[v546];
                    uint64_t v549 = (char *)&v241[v546];
                    if (v543) {
                      memmove(v548, v549, 4 * (int)v543);
                    }
                    if (v542 >= 2)
                    {
                      for (int i39 = 1; i39 != v542; ++i39)
                      {
                        int v551 = v543;
                        if ((int)v543 >= 1)
                        {
                          do
                          {
                            int v552 = *((_DWORD *)v549 - 1);
                            v549 -= 4;
                            *(v548 - 1) = v552 * v548[(int)v543 - 1];
                            --v548;
                            --v551;
                          }
                          while (v551);
                        }
                      }
                    }
                    int v242 = &v548[v547];
                    int v241 = (int *)&v549[4 * v547];
                    ++v545;
                  }
                  while (v545 != v544);
                }
              }
              else if ((int)v544 >= 1)
              {
                int v1193 = 0;
                uint64_t v1194 = (v541 - 1) * (int)v543;
                uint64_t v1195 = v541 * (int)v543;
                do
                {
                  int v1196 = &v242[v1194];
                  if ((int)v543 >= 1) {
                    memset_pattern16(v1196, &unk_25704DBE0, 4 * ((int)v543 - (unint64_t)(((int)v543 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  unint64_t v1197 = &v241[v1194];
                  if (v542 > 1)
                  {
                    for (int i40 = 1; i40 != v542; ++i40)
                    {
                      int v1199 = v543;
                      if ((int)v543 >= 1)
                      {
                        do
                        {
                          *(v1196 - 1) = v1197[(int)v543 - 1] * v1196[(int)v543 - 1];
                          --v1196;
                          --v1197;
                          --v1199;
                        }
                        while (v1199);
                      }
                    }
                  }
                  int v242 = &v1196[v1195];
                  int v241 = &v1197[v1195];
                  ++v1193;
                }
                while (v1193 != v544);
              }
            }
            else if (v55)
            {
              if ((int)v544 >= 1)
              {
                int v925 = 0;
                do
                {
                  if (v543) {
                    memmove(v242, v241, 4 * (int)v543);
                  }
                  v241 += (int)v543;
                  v242 += (int)v543;
                  if (v542 >= 2)
                  {
                    for (int i41 = 1; i41 != v542; ++i41)
                    {
                      int v927 = v543;
                      if ((int)v543 >= 1)
                      {
                        do
                        {
                          int v928 = *v241++;
                          *int v242 = v928 * v242[-(int)v543];
                          ++v242;
                          --v927;
                        }
                        while (v927);
                      }
                    }
                  }
                  ++v925;
                }
                while (v925 != v544);
              }
            }
            else if ((int)v544 >= 1)
            {
              int v1601 = 0;
              do
              {
                if ((int)v543 >= 1) {
                  memset_pattern16(v242, &unk_25704DBE0, 4 * ((int)v543 - (unint64_t)(((int)v543 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v242 += (int)v543;
                v241 += (int)v543;
                if (v542 > 1)
                {
                  for (int i42 = 1; i42 != v542; ++i42)
                  {
                    int v1603 = v543;
                    if ((int)v543 >= 1)
                    {
                      do
                      {
                        *int v242 = v241[-(int)v543] * v242[-(int)v543];
                        ++v242;
                        ++v241;
                        --v1603;
                      }
                      while (v1603);
                    }
                  }
                }
                ++v1601;
              }
              while (v1601 != v544);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    case 3:
      uint64_t v72 = *(int *)(a1 + 24);
      int v73 = *(unsigned __int8 *)(a1 + 28);
      int v74 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v75 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v75, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v76 = *(void *)&v1773[3][2 * v72];
          int v77 = (char *)v1773[19];
          unint64_t v78 = (*a3)[19];
          uint64_t v79 = v1773[6];
          unint64_t v80 = (unint64_t)v79 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v72);
          if (v76 == 1)
          {
            int v81 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            int v82 = v81;
            if (v73)
            {
              if (v74)
              {
                if ((int)v80 >= 1)
                {
                  int v83 = 0;
                  uint64_t v84 = v81 - 1;
                  do
                  {
                    unint64_t v85 = (char *)v78 + v84;
                    uint64_t v86 = &v77[v84];
                    char v87 = v77[v84];
                    *((unsigned char *)v78 + v84) = v87;
                    int v88 = v81 - 1;
                    if (v81 >= 2)
                    {
                      do
                      {
                        int v90 = *--v86;
                        char v89 = v90;
                        if (v90 > v87) {
                          char v87 = v89;
                        }
                        *--unint64_t v85 = v87;
                        --v88;
                      }
                      while (v88);
                    }
                    unint64_t v78 = (int *)&v85[v81];
                    int v77 = &v86[v81];
                    ++v83;
                  }
                  while (v83 != v80);
                }
              }
              else if ((int)v80 >= 1)
              {
                uint64_t v1373 = v81 - 1;
                unint64_t v1374 = ~(unint64_t)(v81 - 2) + v1373;
                do
                {
                  *((unsigned char *)v78 + v1373) = 127;
                  uint64_t v1375 = v82 - 1;
                  if (v82 >= 2)
                  {
                    memset((char *)v78 + v1374, 127, (v82 - 1));
                    uint64_t v1375 = ~(unint64_t)(v82 - 2) + v1373;
                  }
                  unint64_t v78 = (int *)((char *)v78 + v1375 + v82);
                  LODWORD(v80) = v80 - 1;
                }
                while (v80);
              }
            }
            else if (v74)
            {
              if ((int)v80 >= 1)
              {
                int v1029 = 0;
                do
                {
                  char v1030 = *v77;
                  *(unsigned char *)unint64_t v78 = *v77;
                  int v1031 = v81 - 1;
                  if (v81 >= 2)
                  {
                    do
                    {
                      int v1033 = *++v77;
                      char v1032 = v1033;
                      if (v1033 > v1030) {
                        char v1030 = v1032;
                      }
                      *((unsigned char *)v78 + 1) = v1030;
                      unint64_t v78 = (int *)((char *)v78 + 1);
                      --v1031;
                    }
                    while (v1031);
                  }
                  unint64_t v78 = (int *)((char *)v78 + 1);
                  ++v77;
                  ++v1029;
                }
                while (v1029 != v80);
              }
            }
            else if ((int)v80 >= 1)
            {
              uint64_t v1684 = (v81 - 2) + 1;
              do
              {
                *(unsigned char *)unint64_t v78 = 127;
                if (v82 >= 2)
                {
                  memset((char *)v78 + 1, 127, (v82 - 1));
                  unint64_t v78 = (int *)((char *)v78 + v1684);
                }
                unint64_t v78 = (int *)((char *)v78 + 1);
                LODWORD(v80) = v80 - 1;
              }
              while (v80);
            }
          }
          else
          {
            unint64_t v717 = *(void *)&v1773[3][2 * v72];
            int v718 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            int v719 = v718;
            uint64_t v720 = *(void *)&v1773[3][2 * v72];
            unint64_t v721 = v80 / v717;
            if (v73)
            {
              if (v74)
              {
                if ((int)v721 >= 1)
                {
                  int v722 = 0;
                  uint64_t v723 = (v718 - 1) * (int)v720;
                  uint64_t v724 = v718 * (uint64_t)(int)v720;
                  do
                  {
                    unint64_t v725 = (char *)v78 + v723;
                    uint64_t v726 = &v77[v723];
                    if (v720) {
                      memmove(v725, v726, (int)v720);
                    }
                    if (v719 >= 2)
                    {
                      for (int i43 = 1; i43 != v719; ++i43)
                      {
                        int v728 = v720;
                        if ((int)v720 >= 1)
                        {
                          do
                          {
                            int v730 = *--v726;
                            char v729 = v730;
                            if (v730 <= v725[(int)v720 - 1]) {
                              char v729 = v725[(int)v720 - 1];
                            }
                            *--unint64_t v725 = v729;
                            --v728;
                          }
                          while (v728);
                        }
                      }
                    }
                    unint64_t v78 = (int *)&v725[v724];
                    int v77 = &v726[v724];
                    ++v722;
                  }
                  while (v722 != v721);
                }
              }
              else if ((int)v721 >= 1)
              {
                int v1384 = 0;
                uint64_t v1385 = (v718 - 1) * (int)v720;
                uint64_t v1386 = v718 * (uint64_t)(int)v720;
                uint64_t v1387 = (int)v720 - 1;
                do
                {
                  uint64_t v1388 = (char *)v78 + v1385;
                  if ((int)v720 >= 1) {
                    memset(v1388, 127, (int)v720);
                  }
                  uint64_t v1389 = &v77[v1385];
                  if (v719 > 1)
                  {
                    for (int i44 = 1; i44 != v719; ++i44)
                    {
                      int v1391 = v720;
                      if ((int)v720 >= 1)
                      {
                        do
                        {
                          int v1392 = v1389[v1387];
                          if (v1392 <= v1388[v1387]) {
                            LOBYTE(v1392) = v1388[v1387];
                          }
                          *--uint64_t v1388 = v1392;
                          --v1389;
                          --v1391;
                        }
                        while (v1391);
                      }
                    }
                  }
                  unint64_t v78 = (int *)&v1388[v1386];
                  int v77 = &v1389[v1386];
                  ++v1384;
                }
                while (v1384 != v721);
              }
            }
            else if (v74)
            {
              if ((int)v721 >= 1)
              {
                int v1039 = 0;
                do
                {
                  if (v720) {
                    memmove(v78, v77, (int)v720);
                  }
                  v77 += (int)v720;
                  unint64_t v78 = (int *)((char *)v78 + (int)v720);
                  if (v719 >= 2)
                  {
                    for (int i45 = 1; i45 != v719; ++i45)
                    {
                      int v1041 = v720;
                      if ((int)v720 >= 1)
                      {
                        do
                        {
                          int v1043 = *v77++;
                          char v1042 = v1043;
                          if (v1043 <= *((char *)v78 - (int)v720)) {
                            char v1042 = *((unsigned char *)v78 - (int)v720);
                          }
                          *(unsigned char *)unint64_t v78 = v1042;
                          unint64_t v78 = (int *)((char *)v78 + 1);
                          --v1041;
                        }
                        while (v1041);
                      }
                    }
                  }
                  ++v1039;
                }
                while (v1039 != v721);
              }
            }
            else if ((int)v721 >= 1)
            {
              int v1690 = 0;
              do
              {
                if ((int)v720 >= 1) {
                  memset(v78, 127, (int)v720);
                }
                unint64_t v78 = (int *)((char *)v78 + (int)v720);
                v77 += (int)v720;
                if (v719 > 1)
                {
                  for (int i46 = 1; i46 != v719; ++i46)
                  {
                    int v1692 = v720;
                    if ((int)v720 >= 1)
                    {
                      do
                      {
                        int v1693 = v77[-(int)v720];
                        if (v1693 <= *((char *)v78 - (int)v720)) {
                          LOBYTE(v1693) = *((unsigned char *)v78 - (int)v720);
                        }
                        *(unsigned char *)unint64_t v78 = v1693;
                        unint64_t v78 = (int *)((char *)v78 + 1);
                        ++v77;
                        --v1692;
                      }
                      while (v1692);
                    }
                  }
                }
                ++v1690;
              }
              while (v1690 != v721);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          int v310 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v310, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v311 = *(void *)&v1773[3][2 * v72];
          int v312 = (char *)v1773[19];
          uint64_t v313 = (*a3)[19];
          unint64_t v314 = v1773[6];
          unint64_t v315 = (unint64_t)v314 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v72);
          if (v311 == 1)
          {
            int v316 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            if (v73)
            {
              if (v74)
              {
                if ((int)v315 >= 1)
                {
                  int v317 = 0;
                  uint64_t v318 = v316 - 1;
                  do
                  {
                    uint64_t v319 = (char *)v313 + v318;
                    uint64_t v320 = &v312[v318];
                    char v321 = v312[v318];
                    *((unsigned char *)v313 + v318) = v321;
                    int v322 = v316 - 1;
                    if (v316 >= 2)
                    {
                      do
                      {
                        int v324 = *--v320;
                        char v323 = v324;
                        if (v324 < v321) {
                          char v321 = v323;
                        }
                        *--uint64_t v319 = v321;
                        --v322;
                      }
                      while (v322);
                    }
                    uint64_t v313 = (int *)&v319[v316];
                    int v312 = &v320[v316];
                    ++v317;
                  }
                  while (v317 != v315);
                }
              }
              else if ((int)v315 >= 1)
              {
                int v1376 = 0;
                uint64_t v1377 = v316 - 1;
                do
                {
                  uint64_t v1378 = (char *)v313 + v1377;
                  uint64_t v1379 = &v312[v1377];
                  *((unsigned char *)v313 + v1377) = 127;
                  if (v316 >= 2)
                  {
                    char v1380 = 127;
                    int v1381 = v316 - 1;
                    do
                    {
                      int v1383 = *v1379--;
                      char v1382 = v1383;
                      if (v1383 < v1380) {
                        char v1380 = v1382;
                      }
                      *--uint64_t v1378 = v1380;
                      --v1381;
                    }
                    while (v1381);
                  }
                  uint64_t v313 = (int *)&v1378[v316];
                  int v312 = &v1379[v316];
                  ++v1376;
                }
                while (v1376 != v315);
              }
            }
            else if (v74)
            {
              if ((int)v315 >= 1)
              {
                int v1034 = 0;
                do
                {
                  char v1035 = *v312;
                  *(unsigned char *)uint64_t v313 = *v312;
                  int v1036 = v316 - 1;
                  if (v316 >= 2)
                  {
                    do
                    {
                      int v1038 = *++v312;
                      char v1037 = v1038;
                      if (v1038 < v1035) {
                        char v1035 = v1037;
                      }
                      *((unsigned char *)v313 + 1) = v1035;
                      uint64_t v313 = (int *)((char *)v313 + 1);
                      --v1036;
                    }
                    while (v1036);
                  }
                  uint64_t v313 = (int *)((char *)v313 + 1);
                  ++v312;
                  ++v1034;
                }
                while (v1034 != v315);
              }
            }
            else if ((int)v315 >= 1)
            {
              int v1685 = 0;
              do
              {
                *(unsigned char *)uint64_t v313 = 127;
                if (v316 >= 2)
                {
                  char v1686 = 127;
                  int v1687 = v316 - 1;
                  do
                  {
                    int v1689 = *v312++;
                    char v1688 = v1689;
                    if (v1689 < v1686) {
                      char v1686 = v1688;
                    }
                    *((unsigned char *)v313 + 1) = v1686;
                    uint64_t v313 = (int *)((char *)v313 + 1);
                    --v1687;
                  }
                  while (v1687);
                }
                uint64_t v313 = (int *)((char *)v313 + 1);
                ++v312;
                ++v1685;
              }
              while (v1685 != v315);
            }
          }
          else
          {
            unint64_t v731 = *(void *)&v1773[3][2 * v72];
            int v732 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            int v733 = v732;
            uint64_t v734 = *(void *)&v1773[3][2 * v72];
            unint64_t v735 = v315 / v731;
            if (v73)
            {
              if (v74)
              {
                if ((int)v735 >= 1)
                {
                  int v736 = 0;
                  uint64_t v737 = (v732 - 1) * (int)v734;
                  uint64_t v738 = v732 * (uint64_t)(int)v734;
                  do
                  {
                    unint64_t v739 = (char *)v313 + v737;
                    unint64_t v740 = &v312[v737];
                    if (v734) {
                      memmove(v739, v740, (int)v734);
                    }
                    if (v733 >= 2)
                    {
                      for (int i47 = 1; i47 != v733; ++i47)
                      {
                        int v742 = v734;
                        if ((int)v734 >= 1)
                        {
                          do
                          {
                            int v744 = *--v740;
                            char v743 = v744;
                            if (v744 >= v739[(int)v734 - 1]) {
                              char v743 = v739[(int)v734 - 1];
                            }
                            *--unint64_t v739 = v743;
                            --v742;
                          }
                          while (v742);
                        }
                      }
                    }
                    uint64_t v313 = (int *)&v739[v738];
                    int v312 = &v740[v738];
                    ++v736;
                  }
                  while (v736 != v735);
                }
              }
              else if ((int)v735 >= 1)
              {
                int v1393 = 0;
                uint64_t v1394 = (v732 - 1) * (int)v734;
                uint64_t v1395 = v732 * (uint64_t)(int)v734;
                uint64_t v1396 = (int)v734 - 1;
                do
                {
                  ldiv_t v1397 = (char *)v313 + v1394;
                  if ((int)v734 >= 1) {
                    memset(v1397, 127, (int)v734);
                  }
                  uint64_t v1398 = &v312[v1394];
                  if (v733 > 1)
                  {
                    for (int i48 = 1; i48 != v733; ++i48)
                    {
                      int v1400 = v734;
                      if ((int)v734 >= 1)
                      {
                        do
                        {
                          int v1401 = v1398[v1396];
                          if (v1401 >= v1397[v1396]) {
                            LOBYTE(v1401) = v1397[v1396];
                          }
                          *--ldiv_t v1397 = v1401;
                          --v1398;
                          --v1400;
                        }
                        while (v1400);
                      }
                    }
                  }
                  uint64_t v313 = (int *)&v1397[v1395];
                  int v312 = &v1398[v1395];
                  ++v1393;
                }
                while (v1393 != v735);
              }
            }
            else if (v74)
            {
              if ((int)v735 >= 1)
              {
                int v1044 = 0;
                do
                {
                  if (v734) {
                    memmove(v313, v312, (int)v734);
                  }
                  v312 += (int)v734;
                  uint64_t v313 = (int *)((char *)v313 + (int)v734);
                  if (v733 >= 2)
                  {
                    for (int i49 = 1; i49 != v733; ++i49)
                    {
                      int v1046 = v734;
                      if ((int)v734 >= 1)
                      {
                        do
                        {
                          int v1048 = *v312++;
                          char v1047 = v1048;
                          if (v1048 >= *((char *)v313 - (int)v734)) {
                            char v1047 = *((unsigned char *)v313 - (int)v734);
                          }
                          *(unsigned char *)uint64_t v313 = v1047;
                          uint64_t v313 = (int *)((char *)v313 + 1);
                          --v1046;
                        }
                        while (v1046);
                      }
                    }
                  }
                  ++v1044;
                }
                while (v1044 != v735);
              }
            }
            else if ((int)v735 >= 1)
            {
              int v1694 = 0;
              do
              {
                if ((int)v734 >= 1) {
                  memset(v313, 127, (int)v734);
                }
                uint64_t v313 = (int *)((char *)v313 + (int)v734);
                v312 += (int)v734;
                if (v733 > 1)
                {
                  for (int i50 = 1; i50 != v733; ++i50)
                  {
                    int v1696 = v734;
                    if ((int)v734 >= 1)
                    {
                      do
                      {
                        int v1697 = v312[-(int)v734];
                        if (v1697 >= *((char *)v313 - (int)v734)) {
                          LOBYTE(v1697) = *((unsigned char *)v313 - (int)v734);
                        }
                        *(unsigned char *)uint64_t v313 = v1697;
                        uint64_t v313 = (int *)((char *)v313 + 1);
                        ++v312;
                        --v1696;
                      }
                      while (v1696);
                    }
                  }
                }
                ++v1694;
              }
              while (v1694 != v735);
            }
          }
          break;
        case 2:
          int v253 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v253, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v254 = *(void *)&v1773[3][2 * v72];
          unint64_t v255 = (unsigned __int8 *)v1773[19];
          int v256 = (*a3)[19];
          unsigned int v257 = v1773[6];
          unint64_t v258 = (unint64_t)v257 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v72);
          if (v254 == 1)
          {
            int v259 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            if (v73)
            {
              if (v74)
              {
                if ((int)v258 >= 1)
                {
                  int v260 = 0;
                  uint64_t v261 = v259 - 1;
                  do
                  {
                    uint64_t v262 = (char *)v256 + v261;
                    int64_t v263 = &v255[v261];
                    int v264 = v255[v261];
                    *((unsigned char *)v256 + v261) = v264;
                    int v265 = v259 - 1;
                    if (v259 >= 2)
                    {
                      do
                      {
                        int v266 = *--v263;
                        v264 += v266;
                        *--uint64_t v262 = v264;
                        --v265;
                      }
                      while (v265);
                    }
                    int v256 = (int *)&v262[v259];
                    unint64_t v255 = &v263[v259];
                    ++v260;
                  }
                  while (v260 != v258);
                }
              }
              else if ((int)v258 >= 1)
              {
                int v1186 = 0;
                uint64_t v1187 = v259 - 1;
                do
                {
                  unint64_t v1188 = (char *)v256 + v1187;
                  uint64_t v1189 = &v255[v1187];
                  *((unsigned char *)v256 + v1187) = 0;
                  if (v259 >= 2)
                  {
                    int v1190 = 0;
                    int v1191 = v259 - 1;
                    do
                    {
                      int v1192 = *v1189--;
                      v1190 += v1192;
                      *--unint64_t v1188 = v1190;
                      --v1191;
                    }
                    while (v1191);
                  }
                  int v256 = (int *)&v1188[v259];
                  unint64_t v255 = &v1189[v259];
                  ++v1186;
                }
                while (v1186 != v258);
              }
            }
            else if (v74)
            {
              if ((int)v258 >= 1)
              {
                int v921 = 0;
                do
                {
                  int v922 = *v255;
                  *(unsigned char *)int v256 = v922;
                  int v923 = v259 - 1;
                  if (v259 >= 2)
                  {
                    do
                    {
                      int v924 = *++v255;
                      v922 += v924;
                      *((unsigned char *)v256 + 1) = v922;
                      int v256 = (int *)((char *)v256 + 1);
                      --v923;
                    }
                    while (v923);
                  }
                  int v256 = (int *)((char *)v256 + 1);
                  ++v255;
                  ++v921;
                }
                while (v921 != v258);
              }
            }
            else if ((int)v258 >= 1)
            {
              int v1597 = 0;
              do
              {
                *(unsigned char *)int v256 = 0;
                if (v259 >= 2)
                {
                  int v1598 = 0;
                  int v1599 = v259 - 1;
                  do
                  {
                    int v1600 = *v255++;
                    v1598 += v1600;
                    *((unsigned char *)v256 + 1) = v1598;
                    int v256 = (int *)((char *)v256 + 1);
                    --v1599;
                  }
                  while (v1599);
                }
                int v256 = (int *)((char *)v256 + 1);
                ++v255;
                ++v1597;
              }
              while (v1597 != v258);
            }
          }
          else
          {
            unint64_t v553 = *(void *)&v1773[3][2 * v72];
            int v554 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            int v555 = v554;
            uint64_t v556 = *(void *)&v1773[3][2 * v72];
            unint64_t v557 = v258 / v553;
            if (v73)
            {
              if (v74)
              {
                if ((int)v557 >= 1)
                {
                  int v558 = 0;
                  uint64_t v559 = (v554 - 1) * (int)v556;
                  uint64_t v560 = v554 * (uint64_t)(int)v556;
                  do
                  {
                    uint64_t v561 = (char *)v256 + v559;
                    uint64_t v562 = &v255[v559];
                    if (v556) {
                      memmove(v561, v562, (int)v556);
                    }
                    if (v555 >= 2)
                    {
                      for (int i51 = 1; i51 != v555; ++i51)
                      {
                        int v564 = v556;
                        if ((int)v556 >= 1)
                        {
                          do
                          {
                            char v565 = *--v562;
                            *(v561 - 1) = v565 + v561[(int)v556 - 1];
                            --v561;
                            --v564;
                          }
                          while (v564);
                        }
                      }
                    }
                    int v256 = (int *)&v561[v560];
                    unint64_t v255 = &v562[v560];
                    ++v558;
                  }
                  while (v558 != v557);
                }
              }
              else if ((int)v557 >= 1)
              {
                int v1200 = 0;
                uint64_t v1201 = (v554 - 1) * (int)v556;
                uint64_t v1202 = v554 * (uint64_t)(int)v556;
                do
                {
                  v1203 = (char *)v256 + v1201;
                  if ((int)v556 >= 1) {
                    bzero(v1203, (int)v556);
                  }
                  uint64_t v1204 = &v255[v1201];
                  if (v555 > 1)
                  {
                    for (int i52 = 1; i52 != v555; ++i52)
                    {
                      int v1206 = v556;
                      if ((int)v556 >= 1)
                      {
                        do
                        {
                          *(v1203 - 1) = v1204[(int)v556 - 1] + v1203[(int)v556 - 1];
                          --v1203;
                          --v1204;
                          --v1206;
                        }
                        while (v1206);
                      }
                    }
                  }
                  int v256 = (int *)&v1203[v1202];
                  unint64_t v255 = &v1204[v1202];
                  ++v1200;
                }
                while (v1200 != v557);
              }
            }
            else if (v74)
            {
              if ((int)v557 >= 1)
              {
                int v929 = 0;
                do
                {
                  if (v556) {
                    memmove(v256, v255, (int)v556);
                  }
                  v255 += (int)v556;
                  int v256 = (int *)((char *)v256 + (int)v556);
                  if (v555 >= 2)
                  {
                    for (int i53 = 1; i53 != v555; ++i53)
                    {
                      int v931 = v556;
                      if ((int)v556 >= 1)
                      {
                        do
                        {
                          char v932 = *v255++;
                          *(unsigned char *)int v256 = v932 + *((unsigned char *)v256 - (int)v556);
                          int v256 = (int *)((char *)v256 + 1);
                          --v931;
                        }
                        while (v931);
                      }
                    }
                  }
                  ++v929;
                }
                while (v929 != v557);
              }
            }
            else if ((int)v557 >= 1)
            {
              int v1604 = 0;
              do
              {
                if ((int)v556 >= 1) {
                  bzero(v256, (int)v556);
                }
                int v256 = (int *)((char *)v256 + (int)v556);
                v255 += (int)v556;
                if (v555 > 1)
                {
                  for (int i54 = 1; i54 != v555; ++i54)
                  {
                    int v1606 = v556;
                    if ((int)v556 >= 1)
                    {
                      do
                      {
                        *(unsigned char *)int v256 = v255[-(int)v556] + *((unsigned char *)v256 - (int)v556);
                        int v256 = (int *)((char *)v256 + 1);
                        ++v255;
                        --v1606;
                      }
                      while (v1606);
                    }
                  }
                }
                ++v1604;
              }
              while (v1604 != v557);
            }
          }
          break;
        case 3:
          int v296 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v296, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v297 = *(void *)&v1773[3][2 * v72];
          unsigned int v298 = (unsigned __int8 *)v1773[19];
          int v299 = (*a3)[19];
          int v300 = v1773[6];
          unint64_t v301 = (unint64_t)v300 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v72);
          if (v297 == 1)
          {
            int v302 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            if (v73)
            {
              if (v74)
              {
                if ((int)v301 >= 1)
                {
                  int v303 = 0;
                  uint64_t v304 = v302 - 1;
                  do
                  {
                    uint64_t v305 = (char *)v299 + v304;
                    unsigned int v306 = &v298[v304];
                    int v307 = v298[v304];
                    *((unsigned char *)v299 + v304) = v307;
                    int v308 = v302 - 1;
                    if (v302 >= 2)
                    {
                      do
                      {
                        int v309 = *--v306;
                        v307 *= v309;
                        *--uint64_t v305 = v307;
                        --v308;
                      }
                      while (v308);
                    }
                    int v299 = (int *)&v305[v302];
                    unsigned int v298 = &v306[v302];
                    ++v303;
                  }
                  while (v303 != v301);
                }
              }
              else if ((int)v301 >= 1)
              {
                int v1221 = 0;
                uint64_t v1222 = v302 - 1;
                do
                {
                  uint64_t v1223 = (char *)v299 + v1222;
                  uint64_t v1224 = &v298[v1222];
                  *((unsigned char *)v299 + v1222) = 1;
                  if (v302 >= 2)
                  {
                    int v1225 = 1;
                    int v1226 = v302 - 1;
                    do
                    {
                      int v1227 = *v1224--;
                      v1225 *= v1227;
                      *--uint64_t v1223 = v1225;
                      --v1226;
                    }
                    while (v1226);
                  }
                  int v299 = (int *)&v1223[v302];
                  unsigned int v298 = &v1224[v302];
                  ++v1221;
                }
                while (v1221 != v301);
              }
            }
            else if (v74)
            {
              if ((int)v301 >= 1)
              {
                int v941 = 0;
                do
                {
                  int v942 = *v298;
                  *(unsigned char *)int v299 = v942;
                  int v943 = v302 - 1;
                  if (v302 >= 2)
                  {
                    do
                    {
                      int v944 = *++v298;
                      v942 *= v944;
                      *((unsigned char *)v299 + 1) = v942;
                      int v299 = (int *)((char *)v299 + 1);
                      --v943;
                    }
                    while (v943);
                  }
                  int v299 = (int *)((char *)v299 + 1);
                  ++v298;
                  ++v941;
                }
                while (v941 != v301);
              }
            }
            else if ((int)v301 >= 1)
            {
              int v1614 = 0;
              do
              {
                *(unsigned char *)int v299 = 1;
                if (v302 >= 2)
                {
                  int v1615 = 1;
                  int v1616 = v302 - 1;
                  do
                  {
                    int v1617 = *v298++;
                    v1615 *= v1617;
                    *((unsigned char *)v299 + 1) = v1615;
                    int v299 = (int *)((char *)v299 + 1);
                    --v1616;
                  }
                  while (v1616);
                }
                int v299 = (int *)((char *)v299 + 1);
                ++v298;
                ++v1614;
              }
              while (v1614 != v301);
            }
          }
          else
          {
            unint64_t v579 = *(void *)&v1773[3][2 * v72];
            int v580 = mlx::core::array::shape((mlx::core::array *)&v1773, v72);
            int v581 = v580;
            uint64_t v582 = *(void *)&v1773[3][2 * v72];
            unint64_t v583 = v301 / v579;
            if (v73)
            {
              if (v74)
              {
                if ((int)v583 >= 1)
                {
                  int v584 = 0;
                  uint64_t v585 = (v580 - 1) * (int)v582;
                  uint64_t v586 = v580 * (uint64_t)(int)v582;
                  do
                  {
                    uint64_t v587 = (char *)v299 + v585;
                    uint64_t v588 = &v298[v585];
                    if (v582) {
                      memmove(v587, v588, (int)v582);
                    }
                    if (v581 >= 2)
                    {
                      for (int i55 = 1; i55 != v581; ++i55)
                      {
                        int v590 = v582;
                        if ((int)v582 >= 1)
                        {
                          do
                          {
                            char v591 = *--v588;
                            *(v587 - 1) = v591 * v587[(int)v582 - 1];
                            --v587;
                            --v590;
                          }
                          while (v590);
                        }
                      }
                    }
                    int v299 = (int *)&v587[v586];
                    unsigned int v298 = &v588[v586];
                    ++v584;
                  }
                  while (v584 != v583);
                }
              }
              else if ((int)v583 >= 1)
              {
                int v1228 = 0;
                uint64_t v1229 = (v580 - 1) * (int)v582;
                uint64_t v1230 = v580 * (uint64_t)(int)v582;
                do
                {
                  unint64_t v1231 = (char *)v299 + v1229;
                  if ((int)v582 >= 1) {
                    memset(v1231, 1, (int)v582);
                  }
                  uint64_t v1232 = &v298[v1229];
                  if (v581 > 1)
                  {
                    for (int i56 = 1; i56 != v581; ++i56)
                    {
                      int v1234 = v582;
                      if ((int)v582 >= 1)
                      {
                        do
                        {
                          *(v1231 - 1) = v1232[(int)v582 - 1] * v1231[(int)v582 - 1];
                          --v1231;
                          --v1232;
                          --v1234;
                        }
                        while (v1234);
                      }
                    }
                  }
                  int v299 = (int *)&v1231[v1230];
                  unsigned int v298 = &v1232[v1230];
                  ++v1228;
                }
                while (v1228 != v583);
              }
            }
            else if (v74)
            {
              if ((int)v583 >= 1)
              {
                int v945 = 0;
                do
                {
                  if (v582) {
                    memmove(v299, v298, (int)v582);
                  }
                  v298 += (int)v582;
                  int v299 = (int *)((char *)v299 + (int)v582);
                  if (v581 >= 2)
                  {
                    for (int i57 = 1; i57 != v581; ++i57)
                    {
                      int v947 = v582;
                      if ((int)v582 >= 1)
                      {
                        do
                        {
                          char v948 = *v298++;
                          *(unsigned char *)int v299 = v948 * *((unsigned char *)v299 - (int)v582);
                          int v299 = (int *)((char *)v299 + 1);
                          --v947;
                        }
                        while (v947);
                      }
                    }
                  }
                  ++v945;
                }
                while (v945 != v583);
              }
            }
            else if ((int)v583 >= 1)
            {
              int v1618 = 0;
              do
              {
                if ((int)v582 >= 1) {
                  memset(v299, 1, (int)v582);
                }
                int v299 = (int *)((char *)v299 + (int)v582);
                v298 += (int)v582;
                if (v581 > 1)
                {
                  for (int i58 = 1; i58 != v581; ++i58)
                  {
                    int v1620 = v582;
                    if ((int)v582 >= 1)
                    {
                      do
                      {
                        *(unsigned char *)int v299 = v298[-(int)v582] * *((unsigned char *)v299 - (int)v582);
                        int v299 = (int *)((char *)v299 + 1);
                        ++v298;
                        --v1620;
                      }
                      while (v1620);
                    }
                  }
                }
                ++v1618;
              }
              while (v1618 != v583);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    case 4:
      uint64_t v34 = *(int *)(a1 + 24);
      int v35 = *(unsigned __int8 *)(a1 + 28);
      int v36 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          unint64_t v37 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v37, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v38 = *(void *)&v1773[3][2 * v34];
          unint64_t v39 = v1773[19];
          int v40 = (*a3)[19];
          uint64_t v41 = v1773[6];
          unint64_t v42 = (unint64_t)v41 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v34);
          if (v38 == 1)
          {
            int v43 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            int v44 = v43;
            if (v35)
            {
              if (v36)
              {
                if ((int)v42 >= 1)
                {
                  int v45 = 0;
                  uint64_t v46 = v43 - 1;
                  do
                  {
                    unint64_t v47 = &v40[v46];
                    unint64_t v48 = &v39[v46];
                    int v49 = *v48;
                    *unint64_t v47 = *v48;
                    int v50 = v43 - 1;
                    if (v43 >= 2)
                    {
                      do
                      {
                        int v52 = *--v48;
                        int v51 = v52;
                        if (v52 > v49) {
                          int v49 = v51;
                        }
                        *--unint64_t v47 = v49;
                        --v50;
                      }
                      while (v50);
                    }
                    int v40 = &v47[v43];
                    unint64_t v39 = &v48[v43];
                    ++v45;
                  }
                  while (v45 != v42);
                }
              }
              else if ((int)v42 >= 1)
              {
                uint64_t v1313 = v43 - 1;
                uint64_t v1314 = 4 * v1313 - 4 * (v43 - 2) - 4;
                size_t v1315 = 4 * (v43 - 1);
                do
                {
                  uint64_t v1316 = &v40[v1313];
                  *uint64_t v1316 = 0x7FFFFFFF;
                  if (v44 >= 2)
                  {
                    uint64_t v1316 = (int *)((char *)v40 + v1314);
                    memset_pattern16((char *)v40 + v1314, &unk_25704DC20, v1315);
                  }
                  int v40 = &v1316[v44];
                  LODWORD(v42) = v42 - 1;
                }
                while (v42);
              }
            }
            else if (v36)
            {
              if ((int)v42 >= 1)
              {
                int v989 = 0;
                do
                {
                  int v990 = *v39;
                  *int v40 = *v39;
                  int v991 = v43 - 1;
                  if (v43 >= 2)
                  {
                    do
                    {
                      int v993 = v39[1];
                      ++v39;
                      int v992 = v993;
                      if (v993 > v990) {
                        int v990 = v992;
                      }
                      v40[1] = v990;
                      ++v40;
                      --v991;
                    }
                    while (v991);
                  }
                  ++v40;
                  ++v39;
                  ++v989;
                }
                while (v989 != v42);
              }
            }
            else if ((int)v42 >= 1)
            {
              uint64_t v1656 = 4 * (v43 - 2) + 4;
              do
              {
                *int v40 = 0x7FFFFFFF;
                if (v44 >= 2)
                {
                  memset_pattern16(v40 + 1, &unk_25704DC20, 4 * (v44 - 1));
                  int v40 = (int *)((char *)v40 + v1656);
                }
                ++v40;
                LODWORD(v42) = v42 - 1;
              }
              while (v42);
            }
          }
          else
          {
            unint64_t v657 = *(void *)&v1773[3][2 * v34];
            int v658 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            int v659 = v658;
            uint64_t v660 = *(void *)&v1773[3][2 * v34];
            unint64_t v661 = v42 / v657;
            if (v35)
            {
              if (v36)
              {
                if ((int)v661 >= 1)
                {
                  int v662 = 0;
                  uint64_t v663 = (v658 - 1) * (int)v660;
                  uint64_t v664 = v658 * (int)v660;
                  do
                  {
                    uint64_t v666 = &v40[v663];
                    int v667 = (char *)&v39[v663];
                    if (v660) {
                      memmove(v666, v667, 4 * (int)v660);
                    }
                    if (v659 >= 2)
                    {
                      for (int i59 = 1; i59 != v659; ++i59)
                      {
                        int v669 = v660;
                        if ((int)v660 >= 1)
                        {
                          do
                          {
                            int v671 = *((_DWORD *)v667 - 1);
                            v667 -= 4;
                            int v670 = v671;
                            uint64_t v665 = 4 * (int)v660 - 4;
                            if (v671 <= *(int *)((char *)v666 + v665)) {
                              int v670 = *(int *)((char *)v666 + v665);
                            }
                            *--uint64_t v666 = v670;
                            --v669;
                          }
                          while (v669);
                        }
                      }
                    }
                    int v40 = &v666[v664];
                    unint64_t v39 = (int *)&v667[4 * v664];
                    ++v662;
                  }
                  while (v662 != v661);
                }
              }
              else if ((int)v661 >= 1)
              {
                int v1325 = 0;
                uint64_t v1326 = (v658 - 1) * (int)v660;
                uint64_t v1327 = v658 * (int)v660;
                uint64_t v1328 = 4 * (int)v660 - 4;
                do
                {
                  uint64_t v1329 = &v40[v1326];
                  if ((int)v660 >= 1) {
                    memset_pattern16(v1329, &unk_25704DC20, 4 * ((int)v660 - (unint64_t)(((int)v660 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1330 = &v39[v1326];
                  if (v659 > 1)
                  {
                    for (int i60 = 1; i60 != v659; ++i60)
                    {
                      int v1332 = v660;
                      if ((int)v660 >= 1)
                      {
                        do
                        {
                          int v1333 = *(int *)((char *)v1330 + v1328);
                          if (v1333 <= *(int *)((char *)v1329 + v1328)) {
                            int v1333 = *(int *)((char *)v1329 + v1328);
                          }
                          *--uint64_t v1329 = v1333;
                          --v1330;
                          --v1332;
                        }
                        while (v1332);
                      }
                    }
                  }
                  int v40 = &v1329[v1327];
                  unint64_t v39 = &v1330[v1327];
                  ++v1325;
                }
                while (v1325 != v661);
              }
            }
            else if (v36)
            {
              if ((int)v661 >= 1)
              {
                int v999 = 0;
                do
                {
                  if (v660) {
                    memmove(v40, v39, 4 * (int)v660);
                  }
                  v39 += (int)v660;
                  v40 += (int)v660;
                  if (v659 >= 2)
                  {
                    for (int i61 = 1; i61 != v659; ++i61)
                    {
                      int v1001 = v660;
                      if ((int)v660 >= 1)
                      {
                        do
                        {
                          int v1003 = *v39++;
                          int v1002 = v1003;
                          if (v1003 <= v40[-(int)v660]) {
                            int v1002 = v40[-(int)v660];
                          }
                          *v40++ = v1002;
                          --v1001;
                        }
                        while (v1001);
                      }
                    }
                  }
                  ++v999;
                }
                while (v999 != v661);
              }
            }
            else if ((int)v661 >= 1)
            {
              int v1662 = 0;
              do
              {
                if ((int)v660 >= 1) {
                  memset_pattern16(v40, &unk_25704DC20, 4 * ((int)v660 - (unint64_t)(((int)v660 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v40 += (int)v660;
                v39 += (int)v660;
                if (v659 > 1)
                {
                  for (int i62 = 1; i62 != v659; ++i62)
                  {
                    int v1664 = v660;
                    if ((int)v660 >= 1)
                    {
                      do
                      {
                        int v1665 = v39[-(int)v660];
                        if (v1665 <= v40[-(int)v660]) {
                          int v1665 = v40[-(int)v660];
                        }
                        *v40++ = v1665;
                        ++v39;
                        --v1664;
                      }
                      while (v1664);
                    }
                  }
                }
                ++v1662;
              }
              while (v1662 != v661);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          uint64_t v210 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v210, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v211 = *(void *)&v1773[3][2 * v34];
          int v212 = v1773[19];
          ldiv_t v213 = (*a3)[19];
          int v214 = v1773[6];
          unint64_t v215 = (unint64_t)v214 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v34);
          if (v211 == 1)
          {
            int v216 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            if (v35)
            {
              if (v36)
              {
                if ((int)v215 >= 1)
                {
                  int v217 = 0;
                  uint64_t v218 = v216 - 1;
                  do
                  {
                    uint64_t v219 = &v213[v218];
                    int v220 = &v212[v218];
                    int v221 = *v220;
                    *uint64_t v219 = *v220;
                    int v222 = v216 - 1;
                    if (v216 >= 2)
                    {
                      do
                      {
                        int v224 = *--v220;
                        int v223 = v224;
                        if (v224 < v221) {
                          int v221 = v223;
                        }
                        *--uint64_t v219 = v221;
                        --v222;
                      }
                      while (v222);
                    }
                    ldiv_t v213 = &v219[v216];
                    int v212 = &v220[v216];
                    ++v217;
                  }
                  while (v217 != v215);
                }
              }
              else if ((int)v215 >= 1)
              {
                int v1317 = 0;
                uint64_t v1318 = v216 - 1;
                do
                {
                  uint64_t v1319 = &v213[v1318];
                  int v1320 = &v212[v1318];
                  *uint64_t v1319 = 0x7FFFFFFF;
                  if (v216 >= 2)
                  {
                    int v1321 = 0x7FFFFFFF;
                    int v1322 = v216 - 1;
                    do
                    {
                      int v1324 = *v1320--;
                      int v1323 = v1324;
                      if (v1324 < v1321) {
                        int v1321 = v1323;
                      }
                      *--uint64_t v1319 = v1321;
                      --v1322;
                    }
                    while (v1322);
                  }
                  ldiv_t v213 = &v1319[v216];
                  int v212 = &v1320[v216];
                  ++v1317;
                }
                while (v1317 != v215);
              }
            }
            else if (v36)
            {
              if ((int)v215 >= 1)
              {
                int v994 = 0;
                do
                {
                  int v995 = *v212;
                  *ldiv_t v213 = *v212;
                  int v996 = v216 - 1;
                  if (v216 >= 2)
                  {
                    do
                    {
                      int v998 = v212[1];
                      ++v212;
                      int v997 = v998;
                      if (v998 < v995) {
                        int v995 = v997;
                      }
                      v213[1] = v995;
                      ++v213;
                      --v996;
                    }
                    while (v996);
                  }
                  ++v213;
                  ++v212;
                  ++v994;
                }
                while (v994 != v215);
              }
            }
            else if ((int)v215 >= 1)
            {
              int v1657 = 0;
              do
              {
                *ldiv_t v213 = 0x7FFFFFFF;
                if (v216 >= 2)
                {
                  int v1658 = 0x7FFFFFFF;
                  int v1659 = v216 - 1;
                  do
                  {
                    int v1661 = *v212++;
                    int v1660 = v1661;
                    if (v1661 < v1658) {
                      int v1658 = v1660;
                    }
                    v213[1] = v1658;
                    ++v213;
                    --v1659;
                  }
                  while (v1659);
                }
                ++v213;
                ++v212;
                ++v1657;
              }
              while (v1657 != v215);
            }
          }
          else
          {
            unint64_t v672 = *(void *)&v1773[3][2 * v34];
            int v673 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            int v674 = v673;
            uint64_t v675 = *(void *)&v1773[3][2 * v34];
            unint64_t v676 = v215 / v672;
            if (v35)
            {
              if (v36)
              {
                if ((int)v676 >= 1)
                {
                  int v677 = 0;
                  uint64_t v678 = (v673 - 1) * (int)v675;
                  uint64_t v679 = v673 * (int)v675;
                  do
                  {
                    uint64_t v681 = &v213[v678];
                    unint64_t v682 = (char *)&v212[v678];
                    if (v675) {
                      memmove(v681, v682, 4 * (int)v675);
                    }
                    if (v674 >= 2)
                    {
                      for (int i63 = 1; i63 != v674; ++i63)
                      {
                        int v684 = v675;
                        if ((int)v675 >= 1)
                        {
                          do
                          {
                            int v686 = *((_DWORD *)v682 - 1);
                            v682 -= 4;
                            int v685 = v686;
                            uint64_t v680 = 4 * (int)v675 - 4;
                            if (v686 >= *(int *)((char *)v681 + v680)) {
                              int v685 = *(int *)((char *)v681 + v680);
                            }
                            *--uint64_t v681 = v685;
                            --v684;
                          }
                          while (v684);
                        }
                      }
                    }
                    ldiv_t v213 = &v681[v679];
                    int v212 = (int *)&v682[4 * v679];
                    ++v677;
                  }
                  while (v677 != v676);
                }
              }
              else if ((int)v676 >= 1)
              {
                int v1334 = 0;
                uint64_t v1335 = (v673 - 1) * (int)v675;
                uint64_t v1336 = v673 * (int)v675;
                uint64_t v1337 = 4 * (int)v675 - 4;
                do
                {
                  uint64_t v1338 = &v213[v1335];
                  if ((int)v675 >= 1) {
                    memset_pattern16(v1338, &unk_25704DC20, 4 * ((int)v675 - (unint64_t)(((int)v675 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1339 = &v212[v1335];
                  if (v674 > 1)
                  {
                    for (int i64 = 1; i64 != v674; ++i64)
                    {
                      int v1341 = v675;
                      if ((int)v675 >= 1)
                      {
                        do
                        {
                          int v1342 = *(int *)((char *)v1339 + v1337);
                          if (v1342 >= *(int *)((char *)v1338 + v1337)) {
                            int v1342 = *(int *)((char *)v1338 + v1337);
                          }
                          *--uint64_t v1338 = v1342;
                          --v1339;
                          --v1341;
                        }
                        while (v1341);
                      }
                    }
                  }
                  ldiv_t v213 = &v1338[v1336];
                  int v212 = &v1339[v1336];
                  ++v1334;
                }
                while (v1334 != v676);
              }
            }
            else if (v36)
            {
              if ((int)v676 >= 1)
              {
                int v1004 = 0;
                do
                {
                  if (v675) {
                    memmove(v213, v212, 4 * (int)v675);
                  }
                  v212 += (int)v675;
                  v213 += (int)v675;
                  if (v674 >= 2)
                  {
                    for (int i65 = 1; i65 != v674; ++i65)
                    {
                      int v1006 = v675;
                      if ((int)v675 >= 1)
                      {
                        do
                        {
                          int v1008 = *v212++;
                          int v1007 = v1008;
                          if (v1008 >= v213[-(int)v675]) {
                            int v1007 = v213[-(int)v675];
                          }
                          *v213++ = v1007;
                          --v1006;
                        }
                        while (v1006);
                      }
                    }
                  }
                  ++v1004;
                }
                while (v1004 != v676);
              }
            }
            else if ((int)v676 >= 1)
            {
              int v1666 = 0;
              do
              {
                if ((int)v675 >= 1) {
                  memset_pattern16(v213, &unk_25704DC20, 4 * ((int)v675 - (unint64_t)(((int)v675 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v213 += (int)v675;
                v212 += (int)v675;
                if (v674 > 1)
                {
                  for (int i66 = 1; i66 != v674; ++i66)
                  {
                    int v1668 = v675;
                    if ((int)v675 >= 1)
                    {
                      do
                      {
                        int v1669 = v212[-(int)v675];
                        if (v1669 >= v213[-(int)v675]) {
                          int v1669 = v213[-(int)v675];
                        }
                        *v213++ = v1669;
                        ++v212;
                        --v1668;
                      }
                      while (v1668);
                    }
                  }
                }
                ++v1666;
              }
              while (v1666 != v676);
            }
          }
          break;
        case 2:
          ldiv_t v182 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v182, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v183 = *(void *)&v1773[3][2 * v34];
          int v184 = v1773[19];
          int v185 = (*a3)[19];
          uint64_t v186 = v1773[6];
          unint64_t v187 = (unint64_t)v186 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v34);
          if (v183 == 1)
          {
            int v188 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            if (v35)
            {
              if (v36)
              {
                if ((int)v187 >= 1)
                {
                  int v189 = 0;
                  uint64_t v190 = v188 - 1;
                  do
                  {
                    int v191 = &v185[v190];
                    unint64_t v192 = &v184[v190];
                    int v193 = *v192;
                    *int v191 = *v192;
                    int v194 = v188 - 1;
                    if (v188 >= 2)
                    {
                      do
                      {
                        int v195 = *--v192;
                        v193 += v195;
                        *--int v191 = v193;
                        --v194;
                      }
                      while (v194);
                    }
                    int v185 = &v191[v188];
                    int v184 = &v192[v188];
                    ++v189;
                  }
                  while (v189 != v187);
                }
              }
              else if ((int)v187 >= 1)
              {
                int v1137 = 0;
                uint64_t v1138 = v188 - 1;
                do
                {
                  unint64_t v1139 = &v185[v1138];
                  uint64_t v1140 = &v184[v1138];
                  *unint64_t v1139 = 0;
                  if (v188 >= 2)
                  {
                    int v1141 = 0;
                    int v1142 = v188 - 1;
                    do
                    {
                      int v1143 = *v1140--;
                      v1141 += v1143;
                      *--unint64_t v1139 = v1141;
                      --v1142;
                    }
                    while (v1142);
                  }
                  int v185 = &v1139[v188];
                  int v184 = &v1140[v188];
                  ++v1137;
                }
                while (v1137 != v187);
              }
            }
            else if (v36)
            {
              if ((int)v187 >= 1)
              {
                int v893 = 0;
                do
                {
                  int v894 = *v184;
                  *int v185 = *v184;
                  int v895 = v188 - 1;
                  if (v188 >= 2)
                  {
                    do
                    {
                      int v896 = v184[1];
                      ++v184;
                      v894 += v896;
                      v185[1] = v894;
                      ++v185;
                      --v895;
                    }
                    while (v895);
                  }
                  ++v185;
                  ++v184;
                  ++v893;
                }
                while (v893 != v187);
              }
            }
            else if ((int)v187 >= 1)
            {
              int v1572 = 0;
              do
              {
                *int v185 = 0;
                if (v188 >= 2)
                {
                  int v1573 = 0;
                  int v1574 = v188 - 1;
                  do
                  {
                    int v1575 = *v184++;
                    v1573 += v1575;
                    v185[1] = v1573;
                    ++v185;
                    --v1574;
                  }
                  while (v1574);
                }
                ++v185;
                ++v184;
                ++v1572;
              }
              while (v1572 != v187);
            }
          }
          else
          {
            unint64_t v501 = *(void *)&v1773[3][2 * v34];
            int v502 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            int v503 = v502;
            uint64_t v504 = *(void *)&v1773[3][2 * v34];
            unint64_t v505 = v187 / v501;
            if (v35)
            {
              if (v36)
              {
                if ((int)v505 >= 1)
                {
                  int v506 = 0;
                  uint64_t v507 = (v502 - 1) * (int)v504;
                  uint64_t v508 = v502 * (int)v504;
                  do
                  {
                    uint64_t v509 = &v185[v507];
                    unsigned int v510 = (char *)&v184[v507];
                    if (v504) {
                      memmove(v509, v510, 4 * (int)v504);
                    }
                    if (v503 >= 2)
                    {
                      for (int i67 = 1; i67 != v503; ++i67)
                      {
                        int v512 = v504;
                        if ((int)v504 >= 1)
                        {
                          do
                          {
                            int v513 = *((_DWORD *)v510 - 1);
                            v510 -= 4;
                            *(v509 - 1) = v513 + v509[(int)v504 - 1];
                            --v509;
                            --v512;
                          }
                          while (v512);
                        }
                      }
                    }
                    int v185 = &v509[v508];
                    int v184 = (int *)&v510[4 * v508];
                    ++v506;
                  }
                  while (v506 != v505);
                }
              }
              else if ((int)v505 >= 1)
              {
                int v1144 = 0;
                uint64_t v1145 = (v502 - 1) * (int)v504;
                uint64_t v1146 = v502 * (int)v504;
                do
                {
                  uint64_t v1147 = &v185[v1145];
                  if ((int)v504 >= 1) {
                    bzero(v1147, 4 * ((int)v504 - (unint64_t)(((int)v504 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1148 = &v184[v1145];
                  if (v503 > 1)
                  {
                    for (int i68 = 1; i68 != v503; ++i68)
                    {
                      int v1150 = v504;
                      if ((int)v504 >= 1)
                      {
                        do
                        {
                          *(v1147 - 1) = v1148[(int)v504 - 1] + v1147[(int)v504 - 1];
                          --v1147;
                          --v1148;
                          --v1150;
                        }
                        while (v1150);
                      }
                    }
                  }
                  int v185 = &v1147[v1146];
                  int v184 = &v1148[v1146];
                  ++v1144;
                }
                while (v1144 != v505);
              }
            }
            else if (v36)
            {
              if ((int)v505 >= 1)
              {
                int v897 = 0;
                do
                {
                  if (v504) {
                    memmove(v185, v184, 4 * (int)v504);
                  }
                  v184 += (int)v504;
                  v185 += (int)v504;
                  if (v503 >= 2)
                  {
                    for (int i69 = 1; i69 != v503; ++i69)
                    {
                      int v899 = v504;
                      if ((int)v504 >= 1)
                      {
                        do
                        {
                          int v900 = *v184++;
                          *int v185 = v900 + v185[-(int)v504];
                          ++v185;
                          --v899;
                        }
                        while (v899);
                      }
                    }
                  }
                  ++v897;
                }
                while (v897 != v505);
              }
            }
            else if ((int)v505 >= 1)
            {
              int v1576 = 0;
              do
              {
                if ((int)v504 >= 1) {
                  bzero(v185, 4 * ((int)v504 - (unint64_t)(((int)v504 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v185 += (int)v504;
                v184 += (int)v504;
                if (v503 > 1)
                {
                  for (int i70 = 1; i70 != v503; ++i70)
                  {
                    int v1578 = v504;
                    if ((int)v504 >= 1)
                    {
                      do
                      {
                        *int v185 = v184[-(int)v504] + v185[-(int)v504];
                        ++v185;
                        ++v184;
                        --v1578;
                      }
                      while (v1578);
                    }
                  }
                }
                ++v1576;
              }
              while (v1576 != v505);
            }
          }
          break;
        case 3:
          char v196 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v196, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v197 = *(void *)&v1773[3][2 * v34];
          uint64_t v198 = v1773[19];
          int v199 = (*a3)[19];
          uint64_t v200 = v1773[6];
          unint64_t v201 = (unint64_t)v200 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v34);
          if (v197 == 1)
          {
            int v202 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            if (v35)
            {
              if (v36)
              {
                if ((int)v201 >= 1)
                {
                  int v203 = 0;
                  uint64_t v204 = v202 - 1;
                  do
                  {
                    unint64_t v205 = &v199[v204];
                    uint64_t v206 = &v198[v204];
                    int v207 = *v206;
                    *unint64_t v205 = *v206;
                    int v208 = v202 - 1;
                    if (v202 >= 2)
                    {
                      do
                      {
                        int v209 = *--v206;
                        v207 *= v209;
                        *--unint64_t v205 = v207;
                        --v208;
                      }
                      while (v208);
                    }
                    int v199 = &v205[v202];
                    uint64_t v198 = &v206[v202];
                    ++v203;
                  }
                  while (v203 != v201);
                }
              }
              else if ((int)v201 >= 1)
              {
                int v1151 = 0;
                uint64_t v1152 = v202 - 1;
                do
                {
                  unsigned int v1153 = &v199[v1152];
                  uint64_t v1154 = &v198[v1152];
                  int *v1153 = 1;
                  if (v202 >= 2)
                  {
                    int v1155 = 1;
                    int v1156 = v202 - 1;
                    do
                    {
                      int v1157 = *v1154--;
                      v1155 *= v1157;
                      *--unsigned int v1153 = v1155;
                      --v1156;
                    }
                    while (v1156);
                  }
                  int v199 = &v1153[v202];
                  uint64_t v198 = &v1154[v202];
                  ++v1151;
                }
                while (v1151 != v201);
              }
            }
            else if (v36)
            {
              if ((int)v201 >= 1)
              {
                int v901 = 0;
                do
                {
                  int v902 = *v198;
                  int *v199 = *v198;
                  int v903 = v202 - 1;
                  if (v202 >= 2)
                  {
                    do
                    {
                      int v904 = v198[1];
                      ++v198;
                      v902 *= v904;
                      v199[1] = v902;
                      ++v199;
                      --v903;
                    }
                    while (v903);
                  }
                  ++v199;
                  ++v198;
                  ++v901;
                }
                while (v901 != v201);
              }
            }
            else if ((int)v201 >= 1)
            {
              int v1579 = 0;
              do
              {
                int *v199 = 1;
                if (v202 >= 2)
                {
                  int v1580 = 1;
                  int v1581 = v202 - 1;
                  do
                  {
                    int v1582 = *v198++;
                    v1580 *= v1582;
                    v199[1] = v1580;
                    ++v199;
                    --v1581;
                  }
                  while (v1581);
                }
                ++v199;
                ++v198;
                ++v1579;
              }
              while (v1579 != v201);
            }
          }
          else
          {
            unint64_t v514 = *(void *)&v1773[3][2 * v34];
            int v515 = mlx::core::array::shape((mlx::core::array *)&v1773, v34);
            int v516 = v515;
            uint64_t v517 = *(void *)&v1773[3][2 * v34];
            unint64_t v518 = v201 / v514;
            if (v35)
            {
              if (v36)
              {
                if ((int)v518 >= 1)
                {
                  int v519 = 0;
                  uint64_t v520 = (v515 - 1) * (int)v517;
                  uint64_t v521 = v515 * (int)v517;
                  do
                  {
                    unint64_t v522 = &v199[v520];
                    uint64_t v523 = (char *)&v198[v520];
                    if (v517) {
                      memmove(v522, v523, 4 * (int)v517);
                    }
                    if (v516 >= 2)
                    {
                      for (int i71 = 1; i71 != v516; ++i71)
                      {
                        int v525 = v517;
                        if ((int)v517 >= 1)
                        {
                          do
                          {
                            int v526 = *((_DWORD *)v523 - 1);
                            v523 -= 4;
                            *(v522 - 1) = v526 * v522[(int)v517 - 1];
                            --v522;
                            --v525;
                          }
                          while (v525);
                        }
                      }
                    }
                    int v199 = &v522[v521];
                    uint64_t v198 = (int *)&v523[4 * v521];
                    ++v519;
                  }
                  while (v519 != v518);
                }
              }
              else if ((int)v518 >= 1)
              {
                int v1158 = 0;
                uint64_t v1159 = (v515 - 1) * (int)v517;
                uint64_t v1160 = v515 * (int)v517;
                do
                {
                  uint64_t v1161 = &v199[v1159];
                  if ((int)v517 >= 1) {
                    memset_pattern16(v1161, &unk_25704DBE0, 4 * ((int)v517 - (unint64_t)(((int)v517 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  int v1162 = &v198[v1159];
                  if (v516 > 1)
                  {
                    for (int i72 = 1; i72 != v516; ++i72)
                    {
                      int v1164 = v517;
                      if ((int)v517 >= 1)
                      {
                        do
                        {
                          *(v1161 - 1) = v1162[(int)v517 - 1] * v1161[(int)v517 - 1];
                          --v1161;
                          --v1162;
                          --v1164;
                        }
                        while (v1164);
                      }
                    }
                  }
                  int v199 = &v1161[v1160];
                  uint64_t v198 = &v1162[v1160];
                  ++v1158;
                }
                while (v1158 != v518);
              }
            }
            else if (v36)
            {
              if ((int)v518 >= 1)
              {
                int v905 = 0;
                do
                {
                  if (v517) {
                    memmove(v199, v198, 4 * (int)v517);
                  }
                  v198 += (int)v517;
                  v199 += (int)v517;
                  if (v516 >= 2)
                  {
                    for (int i73 = 1; i73 != v516; ++i73)
                    {
                      int v907 = v517;
                      if ((int)v517 >= 1)
                      {
                        do
                        {
                          int v908 = *v198++;
                          int *v199 = v908 * v199[-(int)v517];
                          ++v199;
                          --v907;
                        }
                        while (v907);
                      }
                    }
                  }
                  ++v905;
                }
                while (v905 != v518);
              }
            }
            else if ((int)v518 >= 1)
            {
              int v1583 = 0;
              do
              {
                if ((int)v517 >= 1) {
                  memset_pattern16(v199, &unk_25704DBE0, 4 * ((int)v517 - (unint64_t)(((int)v517 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v199 += (int)v517;
                v198 += (int)v517;
                if (v516 > 1)
                {
                  for (int i74 = 1; i74 != v516; ++i74)
                  {
                    int v1585 = v517;
                    if ((int)v517 >= 1)
                    {
                      do
                      {
                        int *v199 = v198[-(int)v517] * v199[-(int)v517];
                        ++v199;
                        ++v198;
                        --v1585;
                      }
                      while (v1585);
                    }
                  }
                }
                ++v1583;
              }
              while (v1583 != v518);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    case 5:
      uint64_t v110 = *(int *)(a1 + 24);
      int v111 = *(unsigned __int8 *)(a1 + 28);
      int v112 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          uint64_t v113 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v113, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v114 = *(void *)&v1773[3][2 * v110];
          int v115 = (char *)v1773[19];
          ldiv_t v116 = (*a3)[19];
          long long v117 = v1773[6];
          unint64_t v118 = (unint64_t)v117 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v110);
          if (v114 == 1)
          {
            int v119 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            int v120 = v119;
            if (v111)
            {
              if (v112)
              {
                if ((int)v118 >= 1)
                {
                  int v121 = 0;
                  uint64_t v122 = v119 - 1;
                  do
                  {
                    long long v123 = &v116[2 * v122];
                    uint64_t v124 = &v115[8 * v122];
                    uint64_t v125 = *(void *)v124;
                    *(void *)long long v123 = *(void *)v124;
                    int v126 = v119 - 1;
                    if (v119 >= 2)
                    {
                      do
                      {
                        uint64_t v128 = *((void *)v124 - 1);
                        v124 -= 8;
                        uint64_t v127 = v128;
                        if (v128 > v125) {
                          uint64_t v125 = v127;
                        }
                        *((void *)v123 - 1) = v125;
                        v123 -= 2;
                        --v126;
                      }
                      while (v126);
                    }
                    ldiv_t v116 = &v123[2 * v119];
                    int v115 = &v124[8 * v119];
                    ++v121;
                  }
                  while (v121 != v118);
                }
              }
              else if ((int)v118 >= 1)
              {
                uint64_t v1441 = v119 - 1;
                uint64_t v1442 = 8 * v1441 - 8 * (v119 - 2) - 8;
                size_t v1443 = 8 * (v119 - 1);
                do
                {
                  uint64_t v1444 = &v116[2 * v1441];
                  *(void *)uint64_t v1444 = 0x7FFFFFFFFFFFFFFFLL;
                  if (v120 >= 2)
                  {
                    uint64_t v1444 = (int *)((char *)v116 + v1442);
                    memset_pattern16((char *)v116 + v1442, &unk_25704DC10, v1443);
                  }
                  ldiv_t v116 = &v1444[2 * v120];
                  LODWORD(v118) = v118 - 1;
                }
                while (v118);
              }
            }
            else if (v112)
            {
              if ((int)v118 >= 1)
              {
                int v1069 = 0;
                do
                {
                  uint64_t v1070 = *(void *)v115;
                  *(void *)ldiv_t v116 = *(void *)v115;
                  int v1071 = v119 - 1;
                  if (v119 >= 2)
                  {
                    do
                    {
                      uint64_t v1073 = *((void *)v115 + 1);
                      v115 += 8;
                      uint64_t v1072 = v1073;
                      if (v1073 > v1070) {
                        uint64_t v1070 = v1072;
                      }
                      *((void *)v116 + 1) = v1070;
                      v116 += 2;
                      --v1071;
                    }
                    while (v1071);
                  }
                  v116 += 2;
                  v115 += 8;
                  ++v1069;
                }
                while (v1069 != v118);
              }
            }
            else if ((int)v118 >= 1)
            {
              uint64_t v1712 = 8 * (v119 - 2) + 8;
              do
              {
                *(void *)ldiv_t v116 = 0x7FFFFFFFFFFFFFFFLL;
                if (v120 >= 2)
                {
                  memset_pattern16(v116 + 2, &unk_25704DC10, 8 * (v120 - 1));
                  ldiv_t v116 = (int *)((char *)v116 + v1712);
                }
                v116 += 2;
                LODWORD(v118) = v118 - 1;
              }
              while (v118);
            }
          }
          else
          {
            unint64_t v773 = *(void *)&v1773[3][2 * v110];
            int v774 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            int v775 = v774;
            uint64_t v776 = *(void *)&v1773[3][2 * v110];
            unint64_t v777 = v118 / v773;
            if (v111)
            {
              if (v112)
              {
                if ((int)v777 >= 1)
                {
                  int v778 = 0;
                  uint64_t v779 = (v774 - 1) * (int)v776;
                  uint64_t v780 = v774 * (int)v776;
                  uint64_t v781 = 8 * (int)v776 - 8;
                  do
                  {
                    uint64_t v782 = &v116[2 * v779];
                    int v783 = &v115[8 * v779];
                    if (v776) {
                      memmove(v782, v783, 8 * (int)v776);
                    }
                    if (v775 >= 2)
                    {
                      for (int i75 = 1; i75 != v775; ++i75)
                      {
                        int v785 = v776;
                        if ((int)v776 >= 1)
                        {
                          do
                          {
                            uint64_t v787 = *((void *)v783 - 1);
                            v783 -= 8;
                            uint64_t v786 = v787;
                            if (v787 <= *(void *)((char *)v782 + v781)) {
                              uint64_t v786 = *(void *)((char *)v782 + v781);
                            }
                            *((void *)v782 - 1) = v786;
                            v782 -= 2;
                            --v785;
                          }
                          while (v785);
                        }
                      }
                    }
                    ldiv_t v116 = &v782[2 * v780];
                    int v115 = &v783[8 * v780];
                    ++v778;
                  }
                  while (v778 != v777);
                }
              }
              else if ((int)v777 >= 1)
              {
                int v1453 = 0;
                uint64_t v1454 = (v774 - 1) * (int)v776;
                uint64_t v1455 = v774 * (int)v776;
                uint64_t v1456 = 8 * (int)v776 - 8;
                do
                {
                  ldiv_t v1457 = &v116[2 * v1454];
                  if ((int)v776 >= 1) {
                    memset_pattern16(v1457, &unk_25704DC10, 8 * ((int)v776 - (unint64_t)(((int)v776 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  }
                  uint64_t v1458 = &v115[8 * v1454];
                  if (v775 > 1)
                  {
                    for (int i76 = 1; i76 != v775; ++i76)
                    {
                      int v1460 = v776;
                      if ((int)v776 >= 1)
                      {
                        do
                        {
                          uint64_t v1461 = *(void *)&v1458[v1456];
                          if (v1461 <= *(void *)((char *)v1457 + v1456)) {
                            uint64_t v1461 = *(void *)((char *)v1457 + v1456);
                          }
                          *((void *)v1457 - 1) = v1461;
                          v1457 -= 2;
                          v1458 -= 8;
                          --v1460;
                        }
                        while (v1460);
                      }
                    }
                  }
                  ldiv_t v116 = &v1457[2 * v1455];
                  int v115 = &v1458[8 * v1455];
                  ++v1453;
                }
                while (v1453 != v777);
              }
            }
            else if (v112)
            {
              if ((int)v777 >= 1)
              {
                int v1079 = 0;
                do
                {
                  if (v776) {
                    memmove(v116, v115, 8 * (int)v776);
                  }
                  v115 += 8 * (int)v776;
                  v116 += 2 * (int)v776;
                  if (v775 >= 2)
                  {
                    for (int i77 = 1; i77 != v775; ++i77)
                    {
                      int v1081 = v776;
                      if ((int)v776 >= 1)
                      {
                        do
                        {
                          uint64_t v1083 = *(void *)v115;
                          v115 += 8;
                          uint64_t v1082 = v1083;
                          if (v1083 <= *(void *)&v116[-2 * (int)v776]) {
                            uint64_t v1082 = *(void *)&v116[-2 * (int)v776];
                          }
                          *(void *)ldiv_t v116 = v1082;
                          v116 += 2;
                          --v1081;
                        }
                        while (v1081);
                      }
                    }
                  }
                  ++v1079;
                }
                while (v1079 != v777);
              }
            }
            else if ((int)v777 >= 1)
            {
              int v1718 = 0;
              do
              {
                if ((int)v776 >= 1) {
                  memset_pattern16(v116, &unk_25704DC10, 8 * ((int)v776 - (unint64_t)(((int)v776 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                }
                v116 += 2 * (int)v776;
                v115 += 8 * (int)v776;
                if (v775 > 1)
                {
                  for (int i78 = 1; i78 != v775; ++i78)
                  {
                    int v1720 = v776;
                    if ((int)v776 >= 1)
                    {
                      do
                      {
                        uint64_t v1721 = *(void *)&v115[-8 * (int)v776];
                        if (v1721 <= *(void *)&v116[-2 * (int)v776]) {
                          uint64_t v1721 = *(void *)&v116[-2 * (int)v776];
                        }
                        *(void *)ldiv_t v116 = v1721;
                        v116 += 2;
                        v115 += 8;
                        --v1720;
                      }
                      while (v1720);
                    }
                  }
                }
                ++v1718;
              }
              while (v1718 != v777);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating);
          int v410 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v410, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v411 = *(void *)&v1773[3][2 * v110];
          BOOL v412 = (uint64_t *)v1773[19];
          uint64_t v413 = (*a3)[19];
          float v414 = v1773[6];
          unint64_t v415 = (unint64_t)v414 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v110);
          if (v411 == 1)
          {
            int v416 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            if (v111)
            {
              if (v112)
              {
                if ((int)v415 >= 1)
                {
                  int v417 = 0;
                  uint64_t v418 = v416 - 1;
                  do
                  {
                    uint64_t v419 = &v413[2 * v418];
                    uint64_t v420 = &v412[v418];
                    uint64_t v421 = *v420;
                    *(void *)uint64_t v419 = *v420;
                    int v422 = v416 - 1;
                    if (v416 >= 2)
                    {
                      do
                      {
                        uint64_t v424 = *--v420;
                        uint64_t v423 = v424;
                        if (v424 < v421) {
                          uint64_t v421 = v423;
                        }
                        *((void *)v419 - 1) = v421;
                        v419 -= 2;
                        --v422;
                      }
                      while (v422);
                    }
                    uint64_t v413 = &v419[2 * v416];
                    BOOL v412 = &v420[v416];
                    ++v417;
                  }
                  while (v417 != v415);
                }
              }
              else if ((int)v415 >= 1)
              {
                int v1445 = 0;
                uint64_t v1446 = v416 - 1;
                do
                {
                  uint64_t v1447 = &v413[2 * v1446];
                  uint64_t v1448 = &v412[v1446];
                  *(void *)uint64_t v1447 = 0x7FFFFFFFFFFFFFFFLL;
                  if (v416 >= 2)
                  {
                    uint64_t v1449 = 0x7FFFFFFFFFFFFFFFLL;
                    int v1450 = v416 - 1;
                    do
                    {
                      uint64_t v1452 = *v1448--;
                      uint64_t v1451 = v1452;
                      if (v1452 < v1449) {
                        uint64_t v1449 = v1451;
                      }
                      *((void *)v1447 - 1) = v1449;
                      v1447 -= 2;
                      --v1450;
                    }
                    while (v1450);
                  }
                  uint64_t v413 = &v1447[2 * v416];
                  BOOL v412 = &v1448[v416];
                  ++v1445;
                }
                while (v1445 != v415);
              }
            }
            else if (v112)
            {
              if ((int)v415 >= 1)
              {
                int v1074 = 0;
                do
                {
                  uint64_t v1075 = *v412;
                  *(void *)uint64_t v413 = *v412;
                  int v1076 = v416 - 1;
                  if (v416 >= 2)
                  {
                    do
                    {
                      uint64_t v1078 = v412[1];
                      ++v412;
                      uint64_t v1077 = v1078;
                      if (v1078 < v1075) {
                        uint64_t v1075 = v1077;
                      }
                      *((void *)v413 + 1) = v1075;
                      v413 += 2;
                      --v1076;
                    }
                    while (v1076);
                  }
                  v413 += 2;
                  ++v412;
                  ++v1074;
                }
                while (v1074 != v415);
              }
            }
            else if ((int)v415 >= 1)
            {
              int v1713 = 0;
              do
              {
                *(void *)uint64_t v413 = 0x7FFFFFFFFFFFFFFFLL;
                if (v416 >= 2)
                {
                  uint64_t v1714 = 0x7FFFFFFFFFFFFFFFLL;
                  int v1715 = v416 - 1;
                  do
                  {
                    uint64_t v1717 = *v412++;
                    uint64_t v1716 = v1717;
                    if (v1717 < v1714) {
                      uint64_t v1714 = v1716;
                    }
                    *((void *)v413 + 1) = v1714;
                    v413 += 2;
                    --v1715;
                  }
                  while (v1715);
                }
                v413 += 2;
                ++v412;
                ++v1713;
              }
              while (v1713 != v415);
            }
          }
          else
          {
            unint64_t v788 = *(void *)&v1773[3][2 * v110];
            int v789 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            int v790 = v789;
            uint64_t v791 = *(void *)&v1773[3][2 * v110];
            unint64_t v792 = v415 / v788;
            if (v111)
            {
              if (v112)
              {
                if ((int)v792 >= 1)
                {
                  int v793 = 0;
                  uint64_t v794 = (v789 - 1) * (int)v791;
                  uint64_t v795 = v789 * (int)v791;
                  uint64_t v796 = 8 * (int)v791 - 8;
                  do
                  {
                    uint64_t v797 = &v413[2 * v794];
                    uint64_t v798 = (char *)&v412[v794];
                    if (v791) {
                      memmove(v797, v798, 8 * (int)v791);
                    }
                    if (v790 >= 2)
                    {
                      for (int i79 = 1; i79 != v790; ++i79)
                      {
                        int v800 = v791;
                        if ((int)v791 >= 1)
                        {
                          do
                          {
                            uint64_t v802 = *((void *)v798 - 1);
                            v798 -= 8;
                            uint64_t v801 = v802;
                            if (v802 >= *(void *)((char *)v797 + v796)) {
                              uint64_t v801 = *(void *)((char *)v797 + v796);
                            }
                            *((void *)v797 - 1) = v801;
                            v797 -= 2;
                            --v800;
                          }
                          while (v800);
                        }
                      }
                    }
                    uint64_t v413 = &v797[2 * v795];
                    BOOL v412 = (uint64_t *)&v798[8 * v795];
                    ++v793;
                  }
                  while (v793 != v792);
                }
              }
              else if ((int)v792 >= 1)
              {
                int v1462 = 0;
                uint64_t v1463 = (v789 - 1) * (int)v791;
                uint64_t v1464 = v789 * (int)v791;
                uint64_t v1465 = 8 * (int)v791 - 8;
                do
                {
                  int v1466 = &v413[2 * v1463];
                  if ((int)v791 >= 1) {
                    memset_pattern16(v1466, &unk_25704DC10, 8 * ((int)v791 - (unint64_t)(((int)v791 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  }
                  unsigned int v1467 = &v412[v1463];
                  if (v790 > 1)
                  {
                    for (int i80 = 1; i80 != v790; ++i80)
                    {
                      int v1469 = v791;
                      if ((int)v791 >= 1)
                      {
                        do
                        {
                          uint64_t v1470 = *(uint64_t *)((char *)v1467 + v1465);
                          if (v1470 >= *(void *)((char *)v1466 + v1465)) {
                            uint64_t v1470 = *(void *)((char *)v1466 + v1465);
                          }
                          *((void *)v1466 - 1) = v1470;
                          v1466 -= 2;
                          --v1467;
                          --v1469;
                        }
                        while (v1469);
                      }
                    }
                  }
                  uint64_t v413 = &v1466[2 * v1464];
                  BOOL v412 = &v1467[v1464];
                  ++v1462;
                }
                while (v1462 != v792);
              }
            }
            else if (v112)
            {
              if ((int)v792 >= 1)
              {
                int v1084 = 0;
                do
                {
                  if (v791) {
                    memmove(v413, v412, 8 * (int)v791);
                  }
                  v412 += (int)v791;
                  v413 += 2 * (int)v791;
                  if (v790 >= 2)
                  {
                    for (int i81 = 1; i81 != v790; ++i81)
                    {
                      int v1086 = v791;
                      if ((int)v791 >= 1)
                      {
                        do
                        {
                          uint64_t v1088 = *v412++;
                          uint64_t v1087 = v1088;
                          if (v1088 >= *(void *)&v413[-2 * (int)v791]) {
                            uint64_t v1087 = *(void *)&v413[-2 * (int)v791];
                          }
                          *(void *)uint64_t v413 = v1087;
                          v413 += 2;
                          --v1086;
                        }
                        while (v1086);
                      }
                    }
                  }
                  ++v1084;
                }
                while (v1084 != v792);
              }
            }
            else if ((int)v792 >= 1)
            {
              int v1722 = 0;
              do
              {
                if ((int)v791 >= 1) {
                  memset_pattern16(v413, &unk_25704DC10, 8 * ((int)v791 - (unint64_t)(((int)v791 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                }
                v413 += 2 * (int)v791;
                v412 += (int)v791;
                if (v790 > 1)
                {
                  for (int i82 = 1; i82 != v790; ++i82)
                  {
                    int v1724 = v791;
                    if ((int)v791 >= 1)
                    {
                      do
                      {
                        uint64_t v1725 = v412[-(int)v791];
                        if (v1725 >= *(void *)&v413[-2 * (int)v791]) {
                          uint64_t v1725 = *(void *)&v413[-2 * (int)v791];
                        }
                        *(void *)uint64_t v413 = v1725;
                        v413 += 2;
                        ++v412;
                        --v1724;
                      }
                      while (v1724);
                    }
                  }
                }
                ++v1722;
              }
              while (v1722 != v792);
            }
          }
          break;
        case 2:
          uint64_t v339 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v339, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v340 = *(void *)&v1773[3][2 * v110];
          int v341 = (char *)v1773[19];
          uint64_t v342 = (*a3)[19];
          int v343 = v1773[6];
          unint64_t v344 = (unint64_t)v343 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v110);
          if (v340 == 1)
          {
            int v345 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            if (v111)
            {
              if (v112)
              {
                if ((int)v344 >= 1)
                {
                  int v346 = 0;
                  uint64_t v347 = v345 - 1;
                  do
                  {
                    uint64_t v348 = &v342[2 * v347];
                    uint64_t v349 = &v341[8 * v347];
                    uint64_t v350 = *(void *)v349;
                    *(void *)uint64_t v348 = *(void *)v349;
                    int v351 = v345 - 1;
                    if (v345 >= 2)
                    {
                      do
                      {
                        uint64_t v352 = *((void *)v349 - 1);
                        v349 -= 8;
                        v350 += v352;
                        *((void *)v348 - 1) = v350;
                        v348 -= 2;
                        --v351;
                      }
                      while (v351);
                    }
                    uint64_t v342 = &v348[2 * v345];
                    int v341 = &v349[8 * v345];
                    ++v346;
                  }
                  while (v346 != v344);
                }
              }
              else if ((int)v344 >= 1)
              {
                int v1249 = 0;
                uint64_t v1250 = v345 - 1;
                do
                {
                  uint64_t v1251 = &v342[2 * v1250];
                  unint64_t v1252 = &v341[8 * v1250];
                  *(void *)uint64_t v1251 = 0;
                  if (v345 >= 2)
                  {
                    uint64_t v1253 = 0;
                    int v1254 = v345 - 1;
                    do
                    {
                      uint64_t v1255 = *(void *)v1252;
                      v1252 -= 8;
                      v1253 += v1255;
                      *((void *)v1251 - 1) = v1253;
                      v1251 -= 2;
                      --v1254;
                    }
                    while (v1254);
                  }
                  uint64_t v342 = &v1251[2 * v345];
                  int v341 = &v1252[8 * v345];
                  ++v1249;
                }
                while (v1249 != v344);
              }
            }
            else if (v112)
            {
              if ((int)v344 >= 1)
              {
                int v957 = 0;
                do
                {
                  uint64_t v958 = *(void *)v341;
                  *(void *)uint64_t v342 = *(void *)v341;
                  int v959 = v345 - 1;
                  if (v345 >= 2)
                  {
                    do
                    {
                      uint64_t v960 = *((void *)v341 + 1);
                      v341 += 8;
                      v958 += v960;
                      *((void *)v342 + 1) = v958;
                      v342 += 2;
                      --v959;
                    }
                    while (v959);
                  }
                  v342 += 2;
                  v341 += 8;
                  ++v957;
                }
                while (v957 != v344);
              }
            }
            else if ((int)v344 >= 1)
            {
              int v1628 = 0;
              do
              {
                *(void *)uint64_t v342 = 0;
                if (v345 >= 2)
                {
                  uint64_t v1629 = 0;
                  int v1630 = v345 - 1;
                  do
                  {
                    uint64_t v1631 = *(void *)v341;
                    v341 += 8;
                    v1629 += v1631;
                    *((void *)v342 + 1) = v1629;
                    v342 += 2;
                    --v1630;
                  }
                  while (v1630);
                }
                v342 += 2;
                v341 += 8;
                ++v1628;
              }
              while (v1628 != v344);
            }
          }
          else
          {
            unint64_t v605 = *(void *)&v1773[3][2 * v110];
            int v606 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            int v607 = v606;
            uint64_t v608 = *(void *)&v1773[3][2 * v110];
            unint64_t v609 = v344 / v605;
            if (v111)
            {
              if (v112)
              {
                if ((int)v609 >= 1)
                {
                  int v610 = 0;
                  uint64_t v611 = (v606 - 1) * (int)v608;
                  uint64_t v612 = v606 * (int)v608;
                  do
                  {
                    uint64_t v613 = &v342[2 * v611];
                    uint64_t v614 = &v341[8 * v611];
                    if (v608) {
                      memmove(v613, v614, 8 * (int)v608);
                    }
                    if (v607 >= 2)
                    {
                      for (int i83 = 1; i83 != v607; ++i83)
                      {
                        int v616 = v608;
                        if ((int)v608 >= 1)
                        {
                          do
                          {
                            uint64_t v617 = *((void *)v614 - 1);
                            v614 -= 8;
                            *((void *)v613 - 1) = v617 + *(void *)&v613[2 * (int)v608 - 2];
                            v613 -= 2;
                            --v616;
                          }
                          while (v616);
                        }
                      }
                    }
                    uint64_t v342 = &v613[2 * v612];
                    int v341 = &v614[8 * v612];
                    ++v610;
                  }
                  while (v610 != v609);
                }
              }
              else if ((int)v609 >= 1)
              {
                int v1256 = 0;
                uint64_t v1257 = (v606 - 1) * (int)v608;
                uint64_t v1258 = v606 * (int)v608;
                do
                {
                  unsigned int v1259 = &v342[2 * v1257];
                  if ((int)v608 >= 1) {
                    bzero(v1259, 8 * ((int)v608 - (unint64_t)(((int)v608 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  }
                  int v1260 = &v341[8 * v1257];
                  if (v607 > 1)
                  {
                    for (int i84 = 1; i84 != v607; ++i84)
                    {
                      int v1262 = v608;
                      if ((int)v608 >= 1)
                      {
                        do
                        {
                          *((void *)v1259 - 1) = *(void *)&v1260[8 * (int)v608 - 8]
                                                 + *(void *)&v1259[2 * (int)v608 - 2];
                          v1259 -= 2;
                          v1260 -= 8;
                          --v1262;
                        }
                        while (v1262);
                      }
                    }
                  }
                  uint64_t v342 = &v1259[2 * v1258];
                  int v341 = &v1260[8 * v1258];
                  ++v1256;
                }
                while (v1256 != v609);
              }
            }
            else if (v112)
            {
              if ((int)v609 >= 1)
              {
                int v961 = 0;
                do
                {
                  if (v608) {
                    memmove(v342, v341, 8 * (int)v608);
                  }
                  v341 += 8 * (int)v608;
                  v342 += 2 * (int)v608;
                  if (v607 >= 2)
                  {
                    for (int i85 = 1; i85 != v607; ++i85)
                    {
                      int v963 = v608;
                      if ((int)v608 >= 1)
                      {
                        do
                        {
                          uint64_t v964 = *(void *)v341;
                          v341 += 8;
                          *(void *)uint64_t v342 = v964 + *(void *)&v342[-2 * (int)v608];
                          v342 += 2;
                          --v963;
                        }
                        while (v963);
                      }
                    }
                  }
                  ++v961;
                }
                while (v961 != v609);
              }
            }
            else if ((int)v609 >= 1)
            {
              int v1632 = 0;
              do
              {
                if ((int)v608 >= 1) {
                  bzero(v342, 8 * ((int)v608 - (unint64_t)(((int)v608 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                }
                v342 += 2 * (int)v608;
                v341 += 8 * (int)v608;
                if (v607 > 1)
                {
                  for (int i86 = 1; i86 != v607; ++i86)
                  {
                    int v1634 = v608;
                    if ((int)v608 >= 1)
                    {
                      do
                      {
                        *(void *)uint64_t v342 = *(void *)&v341[-8 * (int)v608] + *(void *)&v342[-2 * (int)v608];
                        v342 += 2;
                        v341 += 8;
                        --v1634;
                      }
                      while (v1634);
                    }
                  }
                }
                ++v1632;
              }
              while (v1632 != v609);
            }
          }
          break;
        case 3:
          unint64_t v382 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v382, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v383 = *(void *)&v1773[3][2 * v110];
          uint64_t v384 = (char *)v1773[19];
          unint64_t v385 = (*a3)[19];
          uint64_t v386 = v1773[6];
          unint64_t v387 = (unint64_t)v386 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v110);
          if (v383 == 1)
          {
            int v388 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            if (v111)
            {
              if (v112)
              {
                if ((int)v387 >= 1)
                {
                  int v389 = 0;
                  uint64_t v390 = v388 - 1;
                  do
                  {
                    uint64_t v391 = &v385[2 * v390];
                    int v392 = &v384[8 * v390];
                    uint64_t v393 = *(void *)v392;
                    *(void *)uint64_t v391 = *(void *)v392;
                    int v394 = v388 - 1;
                    if (v388 >= 2)
                    {
                      do
                      {
                        uint64_t v395 = *((void *)v392 - 1);
                        v392 -= 8;
                        v393 *= v395;
                        *((void *)v391 - 1) = v393;
                        v391 -= 2;
                        --v394;
                      }
                      while (v394);
                    }
                    unint64_t v385 = &v391[2 * v388];
                    uint64_t v384 = &v392[8 * v388];
                    ++v389;
                  }
                  while (v389 != v387);
                }
              }
              else if ((int)v387 >= 1)
              {
                int v1277 = 0;
                uint64_t v1278 = v388 - 1;
                do
                {
                  unsigned int v1279 = &v385[2 * v1278];
                  uint64_t v1280 = &v384[8 * v1278];
                  *(void *)unsigned int v1279 = 1;
                  if (v388 >= 2)
                  {
                    int v1281 = v388 - 1;
                    uint64_t v1282 = 1;
                    do
                    {
                      uint64_t v1283 = *(void *)v1280;
                      v1280 -= 8;
                      v1282 *= v1283;
                      *((void *)v1279 - 1) = v1282;
                      v1279 -= 2;
                      --v1281;
                    }
                    while (v1281);
                  }
                  unint64_t v385 = &v1279[2 * v388];
                  uint64_t v384 = &v1280[8 * v388];
                  ++v1277;
                }
                while (v1277 != v387);
              }
            }
            else if (v112)
            {
              if ((int)v387 >= 1)
              {
                int v973 = 0;
                do
                {
                  uint64_t v974 = *(void *)v384;
                  *(void *)unint64_t v385 = *(void *)v384;
                  int v975 = v388 - 1;
                  if (v388 >= 2)
                  {
                    do
                    {
                      uint64_t v976 = *((void *)v384 + 1);
                      v384 += 8;
                      v974 *= v976;
                      *((void *)v385 + 1) = v974;
                      v385 += 2;
                      --v975;
                    }
                    while (v975);
                  }
                  v385 += 2;
                  v384 += 8;
                  ++v973;
                }
                while (v973 != v387);
              }
            }
            else if ((int)v387 >= 1)
            {
              int v1642 = 0;
              do
              {
                *(void *)unint64_t v385 = 1;
                if (v388 >= 2)
                {
                  int v1643 = v388 - 1;
                  uint64_t v1644 = 1;
                  do
                  {
                    uint64_t v1645 = *(void *)v384;
                    v384 += 8;
                    v1644 *= v1645;
                    *((void *)v385 + 1) = v1644;
                    v385 += 2;
                    --v1643;
                  }
                  while (v1643);
                }
                v385 += 2;
                v384 += 8;
                ++v1642;
              }
              while (v1642 != v387);
            }
          }
          else
          {
            unint64_t v631 = *(void *)&v1773[3][2 * v110];
            int v632 = mlx::core::array::shape((mlx::core::array *)&v1773, v110);
            int v633 = v632;
            uint64_t v634 = *(void *)&v1773[3][2 * v110];
            unint64_t v635 = v387 / v631;
            if (v111)
            {
              if (v112)
              {
                if ((int)v635 >= 1)
                {
                  int v636 = 0;
                  uint64_t v637 = (v632 - 1) * (int)v634;
                  uint64_t v638 = v632 * (int)v634;
                  do
                  {
                    int v639 = &v385[2 * v637];
                    uint64_t v640 = &v384[8 * v637];
                    if (v634) {
                      memmove(v639, v640, 8 * (int)v634);
                    }
                    if (v633 >= 2)
                    {
                      for (int i87 = 1; i87 != v633; ++i87)
                      {
                        int v642 = v634;
                        if ((int)v634 >= 1)
                        {
                          do
                          {
                            uint64_t v643 = *((void *)v640 - 1);
                            v640 -= 8;
                            *((void *)v639 - 1) = v643 * *(void *)&v639[2 * (int)v634 - 2];
                            v639 -= 2;
                            --v642;
                          }
                          while (v642);
                        }
                      }
                    }
                    unint64_t v385 = &v639[2 * v638];
                    uint64_t v384 = &v640[8 * v638];
                    ++v636;
                  }
                  while (v636 != v635);
                }
              }
              else if ((int)v635 >= 1)
              {
                int v1284 = 0;
                uint64_t v1285 = (v632 - 1) * (int)v634;
                uint64_t v1286 = v632 * (int)v634;
                do
                {
                  uint64_t v1287 = &v385[2 * v1285];
                  if ((int)v634 >= 1) {
                    memset_pattern16(v1287, &unk_25704DBF0, 8 * ((int)v634 - (unint64_t)(((int)v634 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  }
                  uint64_t v1288 = &v384[8 * v1285];
                  if (v633 > 1)
                  {
                    for (int i88 = 1; i88 != v633; ++i88)
                    {
                      int v1290 = v634;
                      if ((int)v634 >= 1)
                      {
                        do
                        {
                          *((void *)v1287 - 1) = *(void *)&v1288[8 * (int)v634 - 8]
                                                 * *(void *)&v1287[2 * (int)v634 - 2];
                          v1287 -= 2;
                          v1288 -= 8;
                          --v1290;
                        }
                        while (v1290);
                      }
                    }
                  }
                  unint64_t v385 = &v1287[2 * v1286];
                  uint64_t v384 = &v1288[8 * v1286];
                  ++v1284;
                }
                while (v1284 != v635);
              }
            }
            else if (v112)
            {
              if ((int)v635 >= 1)
              {
                int v977 = 0;
                do
                {
                  if (v634) {
                    memmove(v385, v384, 8 * (int)v634);
                  }
                  v384 += 8 * (int)v634;
                  v385 += 2 * (int)v634;
                  if (v633 >= 2)
                  {
                    for (int i89 = 1; i89 != v633; ++i89)
                    {
                      int v979 = v634;
                      if ((int)v634 >= 1)
                      {
                        do
                        {
                          uint64_t v980 = *(void *)v384;
                          v384 += 8;
                          *(void *)unint64_t v385 = v980 * *(void *)&v385[-2 * (int)v634];
                          v385 += 2;
                          --v979;
                        }
                        while (v979);
                      }
                    }
                  }
                  ++v977;
                }
                while (v977 != v635);
              }
            }
            else if ((int)v635 >= 1)
            {
              int v1646 = 0;
              do
              {
                if ((int)v634 >= 1) {
                  memset_pattern16(v385, &unk_25704DBF0, 8 * ((int)v634 - (unint64_t)(((int)v634 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                }
                v385 += 2 * (int)v634;
                v384 += 8 * (int)v634;
                if (v633 > 1)
                {
                  for (int i90 = 1; i90 != v633; ++i90)
                  {
                    int v1648 = v634;
                    if ((int)v634 >= 1)
                    {
                      do
                      {
                        *(void *)unint64_t v385 = *(void *)&v384[-8 * (int)v634] * *(void *)&v385[-2 * (int)v634];
                        v385 += 2;
                        v384 += 8;
                        --v1648;
                      }
                      while (v1648);
                    }
                  }
                }
                ++v1646;
              }
              while (v1646 != v635);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    case 6:
      uint64_t v129 = *(int *)(a1 + 24);
      int v130 = *(unsigned __int8 *)(a1 + 28);
      int v131 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          uint64_t v1776 = v13;
          if (mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating)) {
            *(float *)&int v132 = -INFINITY;
          }
          else {
            *(float *)&int v132 = 3.4028e38;
          }
          uint64_t v133 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v133, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v134 = *(void *)&v1773[3][2 * v129];
          ldiv_t v135 = (float *)v1773[19];
          unint64_t v136 = (float *)(*a3)[19];
          uint64_t v137 = v1773[6];
          unint64_t v138 = (unint64_t)v137 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v129);
          if (v134 == 1)
          {
            int v139 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            if (v130)
            {
              if (v131)
              {
                if ((int)v138 >= 1)
                {
                  int v140 = 0;
                  uint64_t v141 = v139 - 1;
                  do
                  {
                    unint64_t v142 = &v136[v141];
                    int v143 = &v135[v141];
                    float v144 = *v143;
                    float *v142 = *v143;
                    int v145 = v139 - 1;
                    if (v139 >= 2)
                    {
                      do
                      {
                        float v146 = *--v143;
                        float v147 = v146;
                        if (v146 >= v144) {
                          float v144 = v147;
                        }
                        *--unint64_t v142 = v144;
                        --v145;
                      }
                      while (v145);
                    }
                    unint64_t v136 = &v142[v139];
                    ldiv_t v135 = &v143[v139];
                    ++v140;
                  }
                  while (v140 != v138);
                }
              }
              else if ((int)v138 >= 1)
              {
                int v1479 = 0;
                uint64_t v1480 = v139 - 1;
                do
                {
                  unint64_t v1481 = &v136[v1480];
                  uint64_t v1482 = &v135[v1480];
                  *unint64_t v1481 = *(float *)&v132;
                  int v1483 = v139 - 1;
                  float v1484 = *(float *)&v132;
                  if (v139 >= 2)
                  {
                    do
                    {
                      float v1485 = *v1482--;
                      float v1486 = v1485;
                      if (v1485 >= v1484) {
                        float v1484 = v1486;
                      }
                      *--unint64_t v1481 = v1484;
                      --v1483;
                    }
                    while (v1483);
                  }
                  unint64_t v136 = &v1481[v139];
                  ldiv_t v135 = &v1482[v139];
                  ++v1479;
                }
                while (v1479 != v138);
              }
            }
            else if (v131)
            {
              if ((int)v138 >= 1)
              {
                int v1089 = 0;
                do
                {
                  float v1090 = *v135;
                  *unint64_t v136 = *v135;
                  int v1091 = v139 - 1;
                  if (v139 >= 2)
                  {
                    do
                    {
                      float v1092 = v135[1];
                      ++v135;
                      float v1093 = v1092;
                      if (v1092 >= v1090) {
                        float v1090 = v1093;
                      }
                      v136[1] = v1090;
                      ++v136;
                      --v1091;
                    }
                    while (v1091);
                  }
                  ++v136;
                  ++v135;
                  ++v1089;
                }
                while (v1089 != v138);
              }
            }
            else if ((int)v138 >= 1)
            {
              int v1726 = 0;
              do
              {
                *unint64_t v136 = *(float *)&v132;
                int v1727 = v139 - 1;
                float v1728 = *(float *)&v132;
                if (v139 >= 2)
                {
                  do
                  {
                    float v1729 = *v135++;
                    float v1730 = v1729;
                    if (v1729 >= v1728) {
                      float v1728 = v1730;
                    }
                    v136[1] = v1728;
                    ++v136;
                    --v1727;
                  }
                  while (v1727);
                }
                ++v136;
                ++v135;
                ++v1726;
              }
              while (v1726 != v138);
            }
          }
          else
          {
            unint64_t v803 = *(void *)&v1773[3][2 * v129];
            int v804 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            int v805 = v804;
            uint64_t v806 = *(void *)&v1773[3][2 * v129];
            unint64_t v807 = v138 / v803;
            if (v130)
            {
              if (v131)
              {
                if ((int)v807 >= 1)
                {
                  int v808 = 0;
                  uint64_t v809 = (v804 - 1) * (int)v806;
                  uint64_t v810 = v804 * (int)v806;
                  uint64_t v811 = 4 * (int)v806 - 4;
                  do
                  {
                    uint64_t v812 = &v136[v809];
                    uint64_t v813 = &v135[v809];
                    if (v806) {
                      memmove(v812, v813, 4 * (int)v806);
                    }
                    if (v805 >= 2)
                    {
                      for (int i91 = 1; i91 != v805; ++i91)
                      {
                        int v815 = v806;
                        if ((int)v806 >= 1)
                        {
                          do
                          {
                            float v816 = *--v813;
                            float v817 = v816;
                            if (v816 < *(float *)((char *)v812 + v811)) {
                              float v817 = *(float *)((char *)v812 + v811);
                            }
                            *--uint64_t v812 = v817;
                            --v815;
                          }
                          while (v815);
                        }
                      }
                    }
                    unint64_t v136 = &v812[v810];
                    ldiv_t v135 = &v813[v810];
                    ++v808;
                  }
                  while (v808 != v807);
                }
              }
              else if ((int)v807 >= 1)
              {
                int v1495 = 0;
                uint64_t v1496 = (v804 - 1) * (int)v806;
                uint64_t v1497 = v804 * (int)v806;
                uint64_t v1498 = 4 * (int)v806 - 4;
                do
                {
                  unsigned int v1499 = &v136[v1496];
                  if ((int)v806 >= 1)
                  {
                    unint64_t v1500 = ((int)v806 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                    unint64_t v1501 = &v136[v1496];
                    do
                    {
                      *v1501++ = *(float *)&v132;
                      --v1500;
                    }
                    while (v1500 > 1);
                  }
                  uint64_t v1502 = &v135[v1496];
                  if (v804 > 1)
                  {
                    for (int i92 = 1; i92 != v804; ++i92)
                    {
                      int v1504 = v806;
                      if ((int)v806 >= 1)
                      {
                        do
                        {
                          float v1505 = *(float *)((char *)v1502 + v1498);
                          if (v1505 < *(float *)((char *)v1499 + v1498)) {
                            float v1505 = *(float *)((char *)v1499 + v1498);
                          }
                          *--unsigned int v1499 = v1505;
                          --v1502;
                          --v1504;
                        }
                        while (v1504);
                      }
                    }
                  }
                  unint64_t v136 = &v1499[v1497];
                  ldiv_t v135 = &v1502[v1497];
                  ++v1495;
                }
                while (v1495 != v807);
              }
            }
            else if (v131)
            {
              if ((int)v807 >= 1)
              {
                int v1099 = 0;
                do
                {
                  if (v806) {
                    memmove(v136, v135, 4 * (int)v806);
                  }
                  v135 += (int)v806;
                  v136 += (int)v806;
                  if (v805 >= 2)
                  {
                    for (int i93 = 1; i93 != v805; ++i93)
                    {
                      int v1101 = v806;
                      if ((int)v806 >= 1)
                      {
                        do
                        {
                          float v1102 = *v135++;
                          float v1103 = v1102;
                          if (v1102 < v136[-(int)v806]) {
                            float v1103 = v136[-(int)v806];
                          }
                          *v136++ = v1103;
                          --v1101;
                        }
                        while (v1101);
                      }
                    }
                  }
                  ++v1099;
                }
                while (v1099 != v807);
              }
            }
            else if ((int)v807 >= 1)
            {
              int v1736 = 0;
              do
              {
                if ((int)v806 >= 1)
                {
                  unint64_t v1737 = ((int)v806 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                  uint64_t v1738 = v136;
                  do
                  {
                    *v1738++ = *(float *)&v132;
                    --v1737;
                  }
                  while (v1737 > 1);
                }
                v136 += (int)v806;
                v135 += (int)v806;
                if (v804 > 1)
                {
                  for (int i94 = 1; i94 != v804; ++i94)
                  {
                    int v1740 = v806;
                    if ((int)v806 >= 1)
                    {
                      do
                      {
                        float v1741 = v135[-(int)v806];
                        if (v1741 < v136[-(int)v806]) {
                          float v1741 = v136[-(int)v806];
                        }
                        *v136++ = v1741;
                        ++v135;
                        --v1740;
                      }
                      while (v1740);
                    }
                  }
                }
                ++v1736;
              }
              while (v1736 != v807);
            }
          }
          break;
        case 1:
          uint64_t v1776 = v13;
          if (mlx::core::issubdtype((unsigned int *)&v1776, mlx::core::floating)) {
            *(float *)&int v425 = INFINITY;
          }
          else {
            *(float *)&int v425 = 3.4028e38;
          }
          unint64_t v426 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v426, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v427 = *(void *)&v1773[3][2 * v129];
          unint64_t v428 = (float *)v1773[19];
          unint64_t v429 = (float *)(*a3)[19];
          unint64_t v430 = v1773[6];
          unint64_t v431 = (unint64_t)v430 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v129);
          if (v427 == 1)
          {
            int v432 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            if (v130)
            {
              if (v131)
              {
                if ((int)v431 >= 1)
                {
                  int v433 = 0;
                  uint64_t v434 = v432 - 1;
                  do
                  {
                    unint64_t v435 = &v429[v434];
                    unint64_t v436 = &v428[v434];
                    float v437 = *v436;
                    *unint64_t v435 = *v436;
                    int v438 = v432 - 1;
                    if (v432 >= 2)
                    {
                      do
                      {
                        float v439 = *--v436;
                        float v440 = v439;
                        if (v439 < v437) {
                          float v437 = v440;
                        }
                        *--unint64_t v435 = v437;
                        --v438;
                      }
                      while (v438);
                    }
                    unint64_t v429 = &v435[v432];
                    unint64_t v428 = &v436[v432];
                    ++v433;
                  }
                  while (v433 != v431);
                }
              }
              else if ((int)v431 >= 1)
              {
                int v1487 = 0;
                uint64_t v1488 = v432 - 1;
                do
                {
                  ldiv_t v1489 = &v429[v1488];
                  uint64_t v1490 = &v428[v1488];
                  *ldiv_t v1489 = *(float *)&v425;
                  int v1491 = v432 - 1;
                  float v1492 = *(float *)&v425;
                  if (v432 >= 2)
                  {
                    do
                    {
                      float v1493 = *v1490--;
                      float v1494 = v1493;
                      if (v1493 < v1492) {
                        float v1492 = v1494;
                      }
                      *--ldiv_t v1489 = v1492;
                      --v1491;
                    }
                    while (v1491);
                  }
                  unint64_t v429 = &v1489[v432];
                  unint64_t v428 = &v1490[v432];
                  ++v1487;
                }
                while (v1487 != v431);
              }
            }
            else if (v131)
            {
              if ((int)v431 >= 1)
              {
                int v1094 = 0;
                do
                {
                  float v1095 = *v428;
                  *unint64_t v429 = *v428;
                  int v1096 = v432 - 1;
                  if (v432 >= 2)
                  {
                    do
                    {
                      float v1097 = v428[1];
                      ++v428;
                      float v1098 = v1097;
                      if (v1097 < v1095) {
                        float v1095 = v1098;
                      }
                      v429[1] = v1095;
                      ++v429;
                      --v1096;
                    }
                    while (v1096);
                  }
                  ++v429;
                  ++v428;
                  ++v1094;
                }
                while (v1094 != v431);
              }
            }
            else if ((int)v431 >= 1)
            {
              int v1731 = 0;
              do
              {
                *unint64_t v429 = *(float *)&v425;
                int v1732 = v432 - 1;
                float v1733 = *(float *)&v425;
                if (v432 >= 2)
                {
                  do
                  {
                    float v1734 = *v428++;
                    float v1735 = v1734;
                    if (v1734 < v1733) {
                      float v1733 = v1735;
                    }
                    v429[1] = v1733;
                    ++v429;
                    --v1732;
                  }
                  while (v1732);
                }
                ++v429;
                ++v428;
                ++v1731;
              }
              while (v1731 != v431);
            }
          }
          else
          {
            unint64_t v818 = *(void *)&v1773[3][2 * v129];
            int v819 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            int v820 = v819;
            uint64_t v821 = *(void *)&v1773[3][2 * v129];
            unint64_t v822 = v431 / v818;
            if (v130)
            {
              if (v131)
              {
                if ((int)v822 >= 1)
                {
                  int v823 = 0;
                  uint64_t v824 = (v819 - 1) * (int)v821;
                  uint64_t v825 = v819 * (int)v821;
                  uint64_t v826 = 4 * (int)v821 - 4;
                  do
                  {
                    ldiv_t v827 = &v429[v824];
                    uint64_t v828 = &v428[v824];
                    if (v821) {
                      memmove(v827, v828, 4 * (int)v821);
                    }
                    if (v820 >= 2)
                    {
                      for (int i95 = 1; i95 != v820; ++i95)
                      {
                        int v830 = v821;
                        if ((int)v821 >= 1)
                        {
                          do
                          {
                            float v831 = *--v828;
                            float v832 = v831;
                            if (v831 >= *(float *)((char *)v827 + v826)) {
                              float v832 = *(float *)((char *)v827 + v826);
                            }
                            *--ldiv_t v827 = v832;
                            --v830;
                          }
                          while (v830);
                        }
                      }
                    }
                    unint64_t v429 = &v827[v825];
                    unint64_t v428 = &v828[v825];
                    ++v823;
                  }
                  while (v823 != v822);
                }
              }
              else if ((int)v822 >= 1)
              {
                int v1506 = 0;
                uint64_t v1507 = (v819 - 1) * (int)v821;
                uint64_t v1508 = v819 * (int)v821;
                uint64_t v1509 = 4 * (int)v821 - 4;
                do
                {
                  uint64_t v1510 = &v429[v1507];
                  if ((int)v821 >= 1)
                  {
                    unint64_t v1511 = ((int)v821 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                    uint64_t v1512 = &v429[v1507];
                    do
                    {
                      *v1512++ = *(float *)&v425;
                      --v1511;
                    }
                    while (v1511 > 1);
                  }
                  int v1513 = &v428[v1507];
                  if (v819 > 1)
                  {
                    for (int i96 = 1; i96 != v819; ++i96)
                    {
                      int v1515 = v821;
                      if ((int)v821 >= 1)
                      {
                        do
                        {
                          float v1516 = *(float *)((char *)v1513 + v1509);
                          if (v1516 >= *(float *)((char *)v1510 + v1509)) {
                            float v1516 = *(float *)((char *)v1510 + v1509);
                          }
                          *--uint64_t v1510 = v1516;
                          --v1513;
                          --v1515;
                        }
                        while (v1515);
                      }
                    }
                  }
                  unint64_t v429 = &v1510[v1508];
                  unint64_t v428 = &v1513[v1508];
                  ++v1506;
                }
                while (v1506 != v822);
              }
            }
            else if (v131)
            {
              if ((int)v822 >= 1)
              {
                int v1104 = 0;
                do
                {
                  if (v821) {
                    memmove(v429, v428, 4 * (int)v821);
                  }
                  v428 += (int)v821;
                  v429 += (int)v821;
                  if (v820 >= 2)
                  {
                    for (int i97 = 1; i97 != v820; ++i97)
                    {
                      int v1106 = v821;
                      if ((int)v821 >= 1)
                      {
                        do
                        {
                          float v1107 = *v428++;
                          float v1108 = v1107;
                          if (v1107 >= v429[-(int)v821]) {
                            float v1108 = v429[-(int)v821];
                          }
                          *v429++ = v1108;
                          --v1106;
                        }
                        while (v1106);
                      }
                    }
                  }
                  ++v1104;
                }
                while (v1104 != v822);
              }
            }
            else if ((int)v822 >= 1)
            {
              int v1742 = 0;
              do
              {
                if ((int)v821 >= 1)
                {
                  unint64_t v1743 = ((int)v821 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                  uint64_t v1744 = v429;
                  do
                  {
                    *v1744++ = *(float *)&v425;
                    --v1743;
                  }
                  while (v1743 > 1);
                }
                v429 += (int)v821;
                v428 += (int)v821;
                if (v819 > 1)
                {
                  for (int i98 = 1; i98 != v819; ++i98)
                  {
                    int v1746 = v821;
                    if ((int)v821 >= 1)
                    {
                      do
                      {
                        float v1747 = v428[-(int)v821];
                        if (v1747 >= v429[-(int)v821]) {
                          float v1747 = v429[-(int)v821];
                        }
                        *v429++ = v1747;
                        ++v428;
                        --v1746;
                      }
                      while (v1746);
                    }
                  }
                }
                ++v1742;
              }
              while (v1742 != v822);
            }
          }
          break;
        case 2:
          uint64_t v368 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v368, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v369 = *(void *)&v1773[3][2 * v129];
          int v370 = (float *)v1773[19];
          int v371 = (float *)(*a3)[19];
          unint64_t v372 = v1773[6];
          unint64_t v373 = (unint64_t)v372 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v129);
          if (v369 == 1)
          {
            int v374 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            if (v130)
            {
              if (v131)
              {
                if ((int)v373 >= 1)
                {
                  int v375 = 0;
                  uint64_t v376 = v374 - 1;
                  do
                  {
                    int64_t v377 = &v371[v376];
                    uint64_t v378 = &v370[v376];
                    float v379 = *v378;
                    float *v377 = *v378;
                    int v380 = v374 - 1;
                    if (v374 >= 2)
                    {
                      do
                      {
                        float v381 = *--v378;
                        float v379 = v379 + v381;
                        *--int64_t v377 = v379;
                        --v380;
                      }
                      while (v380);
                    }
                    int v371 = &v377[v374];
                    int v370 = &v378[v374];
                    ++v375;
                  }
                  while (v375 != v373);
                }
              }
              else if ((int)v373 >= 1)
              {
                int v1263 = 0;
                uint64_t v1264 = v374 - 1;
                do
                {
                  uint64_t v1265 = &v371[v1264];
                  uint64_t v1266 = &v370[v1264];
                  *uint64_t v1265 = 0.0;
                  if (v374 >= 2)
                  {
                    float v1267 = 0.0;
                    int v1268 = v374 - 1;
                    do
                    {
                      float v1269 = *v1266--;
                      float v1267 = v1267 + v1269;
                      *--uint64_t v1265 = v1267;
                      --v1268;
                    }
                    while (v1268);
                  }
                  int v371 = &v1265[v374];
                  int v370 = &v1266[v374];
                  ++v1263;
                }
                while (v1263 != v373);
              }
            }
            else if (v131)
            {
              if ((int)v373 >= 1)
              {
                int v965 = 0;
                do
                {
                  float v966 = *v370;
                  *int v371 = *v370;
                  int v967 = v374 - 1;
                  if (v374 >= 2)
                  {
                    do
                    {
                      float v968 = v370[1];
                      ++v370;
                      float v966 = v966 + v968;
                      v371[1] = v966;
                      ++v371;
                      --v967;
                    }
                    while (v967);
                  }
                  ++v371;
                  ++v370;
                  ++v965;
                }
                while (v965 != v373);
              }
            }
            else if ((int)v373 >= 1)
            {
              int v1635 = 0;
              do
              {
                *int v371 = 0.0;
                if (v374 >= 2)
                {
                  float v1636 = 0.0;
                  int v1637 = v374 - 1;
                  do
                  {
                    float v1638 = *v370++;
                    float v1636 = v1636 + v1638;
                    v371[1] = v1636;
                    ++v371;
                    --v1637;
                  }
                  while (v1637);
                }
                ++v371;
                ++v370;
                ++v1635;
              }
              while (v1635 != v373);
            }
          }
          else
          {
            unint64_t v618 = *(void *)&v1773[3][2 * v129];
            int v619 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            int v620 = v619;
            uint64_t v621 = *(void *)&v1773[3][2 * v129];
            unint64_t v622 = v373 / v618;
            if (v130)
            {
              if (v131)
              {
                if ((int)v622 >= 1)
                {
                  int v623 = 0;
                  uint64_t v624 = (v619 - 1) * (int)v621;
                  uint64_t v625 = v619 * (int)v621;
                  do
                  {
                    uint64_t v626 = &v371[v624];
                    uint64_t v627 = &v370[v624];
                    if (v621) {
                      memmove(v626, v627, 4 * (int)v621);
                    }
                    if (v620 >= 2)
                    {
                      for (int i99 = 1; i99 != v620; ++i99)
                      {
                        int v629 = v621;
                        if ((int)v621 >= 1)
                        {
                          do
                          {
                            float v630 = *--v627;
                            *(v626 - 1) = v626[(int)v621 - 1] + v630;
                            --v626;
                            --v629;
                          }
                          while (v629);
                        }
                      }
                    }
                    int v371 = &v626[v625];
                    int v370 = &v627[v625];
                    ++v623;
                  }
                  while (v623 != v622);
                }
              }
              else if ((int)v622 >= 1)
              {
                int v1270 = 0;
                uint64_t v1271 = (v619 - 1) * (int)v621;
                uint64_t v1272 = v619 * (int)v621;
                do
                {
                  int v1273 = &v371[v1271];
                  if ((int)v621 >= 1) {
                    bzero(v1273, 4 * ((int)v621 - (unint64_t)(((int)v621 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  int v1274 = &v370[v1271];
                  if (v620 > 1)
                  {
                    for (int i100 = 1; i100 != v620; ++i100)
                    {
                      int v1276 = v621;
                      if ((int)v621 >= 1)
                      {
                        do
                        {
                          *(v1273 - 1) = v1273[(int)v621 - 1] + v1274[(int)v621 - 1];
                          --v1273;
                          --v1274;
                          --v1276;
                        }
                        while (v1276);
                      }
                    }
                  }
                  int v371 = &v1273[v1272];
                  int v370 = &v1274[v1272];
                  ++v1270;
                }
                while (v1270 != v622);
              }
            }
            else if (v131)
            {
              if ((int)v622 >= 1)
              {
                int v969 = 0;
                do
                {
                  if (v621) {
                    memmove(v371, v370, 4 * (int)v621);
                  }
                  v370 += (int)v621;
                  v371 += (int)v621;
                  if (v620 >= 2)
                  {
                    for (int i101 = 1; i101 != v620; ++i101)
                    {
                      int v971 = v621;
                      if ((int)v621 >= 1)
                      {
                        do
                        {
                          float v972 = *v370++;
                          *int v371 = v371[-(int)v621] + v972;
                          ++v371;
                          --v971;
                        }
                        while (v971);
                      }
                    }
                  }
                  ++v969;
                }
                while (v969 != v622);
              }
            }
            else if ((int)v622 >= 1)
            {
              int v1639 = 0;
              do
              {
                if ((int)v621 >= 1) {
                  bzero(v371, 4 * ((int)v621 - (unint64_t)(((int)v621 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v371 += (int)v621;
                v370 += (int)v621;
                if (v620 > 1)
                {
                  for (int i102 = 1; i102 != v620; ++i102)
                  {
                    int v1641 = v621;
                    if ((int)v621 >= 1)
                    {
                      do
                      {
                        *int v371 = v371[-(int)v621] + v370[-(int)v621];
                        ++v371;
                        ++v370;
                        --v1641;
                      }
                      while (v1641);
                    }
                  }
                }
                ++v1639;
              }
              while (v1639 != v622);
            }
          }
          break;
        case 3:
          unsigned int v396 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (void)(*a3)[6]));
          uint64_t v1776 = (int **)&unk_27062AEC8;
          uint64_t v1777 = mlx::core::allocator::free;
          uint64_t v1778 = &v1776;
          mlx::core::array::set_data(a3, (uint64_t)v396, (uint64_t)&v1776);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1776);
          if (((_BYTE)v1773[21] & 2) == 0) {
            goto LABEL_2474;
          }
          uint64_t v397 = *(void *)&v1773[3][2 * v129];
          char v398 = (float *)v1773[19];
          uint64_t v399 = (float *)(*a3)[19];
          int v400 = v1773[6];
          unint64_t v401 = (unint64_t)v400 / (int)mlx::core::array::shape((mlx::core::array *)&v1773, v129);
          if (v397 == 1)
          {
            int v402 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            if (v130)
            {
              if (v131)
              {
                if ((int)v401 >= 1)
                {
                  int v403 = 0;
                  uint64_t v404 = v402 - 1;
                  do
                  {
                    unint64_t v405 = &v399[v404];
                    float v406 = &v398[v404];
                    float v407 = *v406;
                    *unint64_t v405 = *v406;
                    int v408 = v402 - 1;
                    if (v402 >= 2)
                    {
                      do
                      {
                        float v409 = *--v406;
                        float v407 = v407 * v409;
                        *--unint64_t v405 = v407;
                        --v408;
                      }
                      while (v408);
                    }
                    uint64_t v399 = &v405[v402];
                    char v398 = &v406[v402];
                    ++v403;
                  }
                  while (v403 != v401);
                }
              }
              else if ((int)v401 >= 1)
              {
                int v1291 = 0;
                uint64_t v1292 = v402 - 1;
                do
                {
                  unsigned int v1293 = &v399[v1292];
                  uint64_t v1294 = &v398[v1292];
                  *unsigned int v1293 = 1.0;
                  if (v402 >= 2)
                  {
                    float v1295 = 1.0;
                    int v1296 = v402 - 1;
                    do
                    {
                      float v1297 = *v1294--;
                      float v1295 = v1295 * v1297;
                      *--unsigned int v1293 = v1295;
                      --v1296;
                    }
                    while (v1296);
                  }
                  uint64_t v399 = &v1293[v402];
                  char v398 = &v1294[v402];
                  ++v1291;
                }
                while (v1291 != v401);
              }
            }
            else if (v131)
            {
              if ((int)v401 >= 1)
              {
                int v981 = 0;
                do
                {
                  float v982 = *v398;
                  *uint64_t v399 = *v398;
                  int v983 = v402 - 1;
                  if (v402 >= 2)
                  {
                    do
                    {
                      float v984 = v398[1];
                      ++v398;
                      float v982 = v982 * v984;
                      v399[1] = v982;
                      ++v399;
                      --v983;
                    }
                    while (v983);
                  }
                  ++v399;
                  ++v398;
                  ++v981;
                }
                while (v981 != v401);
              }
            }
            else if ((int)v401 >= 1)
            {
              int v1649 = 0;
              do
              {
                *uint64_t v399 = 1.0;
                if (v402 >= 2)
                {
                  float v1650 = 1.0;
                  int v1651 = v402 - 1;
                  do
                  {
                    float v1652 = *v398++;
                    float v1650 = v1650 * v1652;
                    v399[1] = v1650;
                    ++v399;
                    --v1651;
                  }
                  while (v1651);
                }
                ++v399;
                ++v398;
                ++v1649;
              }
              while (v1649 != v401);
            }
          }
          else
          {
            unint64_t v644 = *(void *)&v1773[3][2 * v129];
            int v645 = mlx::core::array::shape((mlx::core::array *)&v1773, v129);
            int v646 = v645;
            uint64_t v647 = *(void *)&v1773[3][2 * v129];
            unint64_t v648 = v401 / v644;
            if (v130)
            {
              if (v131)
              {
                if ((int)v648 >= 1)
                {
                  int v649 = 0;
                  uint64_t v650 = (v645 - 1) * (int)v647;
                  uint64_t v651 = v645 * (int)v647;
                  do
                  {
                    int v652 = &v399[v650];
                    uint64_t v653 = &v398[v650];
                    if (v647) {
                      memmove(v652, v653, 4 * (int)v647);
                    }
                    if (v646 >= 2)
                    {
                      for (int i103 = 1; i103 != v646; ++i103)
                      {
                        int v655 = v647;
                        if ((int)v647 >= 1)
                        {
                          do
                          {
                            float v656 = *--v653;
                            *(v652 - 1) = v652[(int)v647 - 1] * v656;
                            --v652;
                            --v655;
                          }
                          while (v655);
                        }
                      }
                    }
                    uint64_t v399 = &v652[v651];
                    char v398 = &v653[v651];
                    ++v649;
                  }
                  while (v649 != v648);
                }
              }
              else if ((int)v648 >= 1)
              {
                int v1298 = 0;
                uint64_t v1299 = (v645 - 1) * (int)v647;
                uint64_t v1300 = v645 * (int)v647;
                do
                {
                  unint64_t v1301 = &v399[v1299];
                  if ((int)v647 >= 1) {
                    memset_pattern16(v1301, &unk_25704DC00, 4 * ((int)v647 - (unint64_t)(((int)v647 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  }
                  uint64_t v1302 = &v398[v1299];
                  if (v646 > 1)
                  {
                    for (int i104 = 1; i104 != v646; ++i104)
                    {
                      int v1304 = v647;
                      if ((int)v647 >= 1)
                      {
                        do
                        {
                          *(v1301 - 1) = v1301[(int)v647 - 1] * v1302[(int)v647 - 1];
                          --v1301;
                          --v1302;
                          --v1304;
                        }
                        while (v1304);
                      }
                    }
                  }
                  uint64_t v399 = &v1301[v1300];
                  char v398 = &v1302[v1300];
                  ++v1298;
                }
                while (v1298 != v648);
              }
            }
            else if (v131)
            {
              if ((int)v648 >= 1)
              {
                int v985 = 0;
                do
                {
                  if (v647) {
                    memmove(v399, v398, 4 * (int)v647);
                  }
                  v398 += (int)v647;
                  v399 += (int)v647;
                  if (v646 >= 2)
                  {
                    for (int i105 = 1; i105 != v646; ++i105)
                    {
                      int v987 = v647;
                      if ((int)v647 >= 1)
                      {
                        do
                        {
                          float v988 = *v398++;
                          *uint64_t v399 = v399[-(int)v647] * v988;
                          ++v399;
                          --v987;
                        }
                        while (v987);
                      }
                    }
                  }
                  ++v985;
                }
                while (v985 != v648);
              }
            }
            else if ((int)v648 >= 1)
            {
              int v1653 = 0;
              do
              {
                if ((int)v647 >= 1) {
                  memset_pattern16(v399, &unk_25704DC00, 4 * ((int)v647 - (unint64_t)(((int)v647 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                }
                v399 += (int)v647;
                v398 += (int)v647;
                if (v646 > 1)
                {
                  for (int i106 = 1; i106 != v646; ++i106)
                  {
                    int v1655 = v647;
                    if ((int)v647 >= 1)
                    {
                      do
                      {
                        *uint64_t v399 = v399[-(int)v647] * v398[-(int)v647];
                        ++v399;
                        ++v398;
                        --v1655;
                      }
                      while (v1655);
                    }
                  }
                }
                ++v1653;
              }
              while (v1653 != v648);
            }
          }
          break;
        default:
          goto LABEL_2472;
      }
      goto LABEL_2472;
    default:
      goto LABEL_2472;
  }
}

void sub_256DA0870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  __cxa_free_exception(v22);
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t v4 = *(mlx::core::array **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Reduce::eval();
  }
  switch(*(_DWORD *)(*(void *)v4 + 56))
  {
    case 0:
      int v8 = *(_DWORD *)(a1 + 20);
      break;
    case 1:
    case 3:
      int v6 = *(_DWORD *)(a1 + 20);
      break;
    case 2:
      int v10 = *(_DWORD *)(a1 + 20);
      break;
    case 4:
      int v12 = *(_DWORD *)(a1 + 20);
      break;
    case 5:
      int v14 = *(_DWORD *)(a1 + 20);
      break;
    case 6:
      int v16 = *(_DWORD *)(a1 + 20);
      break;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::reduce_dispatch_out<BOOL>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  uint64_t v1041 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (void)(*a2)[6]));
      int v1036 = &unk_27062AEC8;
      char v1037 = mlx::core::allocator::free;
      int v1038 = &v1036;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1036);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
      unsigned int v1023 = 0;
      uint64_t v1024 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        unsigned int v1023 = __p;
        operator delete(__p);
      }
      if (v1025 == 1)
      {
        unint64_t v61 = v1027;
        if (v1027 - (unsigned char *)v1026 != 4) {
          goto LABEL_103;
        }
        int v62 = (*a2)[6];
        if (v62)
        {
          int v63 = 0;
          uint64_t v64 = *(int *)v1026;
          uint64_t v65 = (char *)(*a2)[19];
          uint64_t v66 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *uint64_t v65 = 1;
            if ((int)v64 >= 1)
            {
              char v67 = 1;
              unsigned int v68 = v64 + 1;
              int v69 = v66;
              do
              {
                int v70 = *v69++;
                v67 &= v70 != 0;
                *uint64_t v65 = v67;
                --v68;
              }
              while (v68 > 1);
            }
            int v63 = (int *)((char *)v63 + 1);
            ++v65;
            v66 += v64;
          }
          while (v63 != v62);
        }
        goto LABEL_1115;
      }
      if (!v1025)
      {
        int v8 = (char *)(*a2)[19];
        char *v8 = 1;
        int v9 = *(_DWORD *)(*(void *)a1 + 48);
        if (v9 >= 1)
        {
          int v10 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v11 = v9 + 1;
          char v12 = 1;
          do
          {
            int v13 = *v10++;
            v12 &= v13 != 0;
            char *v8 = v12;
            --v11;
          }
          while (v11 > 1);
        }
        goto LABEL_1115;
      }
      if ((v1025 & 0xFFFFFFFD) == 1)
      {
        unint64_t v61 = v1027;
LABEL_103:
        LODWORD(__b) = *((_DWORD *)v61 - 1);
        int v1027 = v61 - 4;
        v1029 -= 8;
        size_t v113 = *(void *)(*(void *)a1 + 152);
        int v1020 = (*a2)[19];
        __leuint64_t n = v113;
        uint64_t v72 = v1033;
        int v73 = v1035;
        uint64_t v114 = (*a2)[6];
        if (v1027 == v1026)
        {
          if (v114)
          {
            int v212 = 0;
            uint64_t v213 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            int v214 = (char *)v1020;
            size_t v1000 = __len;
            int v215 = (int)__b;
            int v216 = __b + 1;
            do
            {
              uint64_t v217 = 0;
              if ((v213 & 0x80000000) == 0)
              {
                uint64_t v218 = v213;
                int quot = (int)v212;
                do
                {
                  ldiv_t v220 = ldiv(quot, v72[v218]);
                  int quot = v220.quot;
                  v217 += v73[v218--] * v220.rem;
                }
                while (v218 != -1);
              }
              *int v214 = 1;
              if (v215 >= 1)
              {
                int v221 = (unsigned __int8 *)(v1000 + (int)v217);
                char v222 = 1;
                unsigned int v223 = v216;
                do
                {
                  int v224 = *v221++;
                  v222 &= v224 != 0;
                  *int v214 = v222;
                  --v223;
                }
                while (v223 > 1);
              }
              int v212 = (int *)((char *)v212 + 1);
              ++v214;
            }
            while (v212 != v114);
          }
        }
        else if (v114)
        {
          unint64_t v115 = 0;
          uint64_t v116 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v117 = 0;
            if ((v116 & 0x80000000) == 0)
            {
              uint64_t v118 = v116;
              int v119 = v115;
              do
              {
                ldiv_t v120 = ldiv(v119, v72[v118]);
                int v119 = v120.quot;
                v117 += v73[v118--] * v120.rem;
              }
              while (v118 != -1);
            }
            int v1019 = v117;
            *(unsigned char *)int v1020 = 1;
            char v1032 = 0;
            int v121 = operator new(0x30uLL);
            *int v121 = &unk_27062B5F8;
            v121[1] = &v1017;
            v121[2] = &__len;
            v121[3] = &v1019;
            v121[4] = &v1020;
            v121[5] = &__b;
            char v1032 = v121;
            uint64_t v1040 = 0;
            uint64_t v122 = operator new(0x28uLL);
            *uint64_t v122 = &unk_27062B578;
            v122[1] = &v1026;
            v122[2] = &v1028;
            void v122[3] = v1039;
            v122[4] = v1031;
            char v1035 = v122;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            ++v115;
            int v1020 = (int *)((char *)v1020 + 1);
          }
          while ((unint64_t)(*a2)[6] > v115);
        }
        goto LABEL_1111;
      }
      if (v1025 != 2)
      {
        if (v1025 != 5)
        {
          if (v1025 != 4) {
            goto LABEL_1115;
          }
          unint64_t v154 = v1027;
          goto LABEL_453;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        unint64_t v314 = (*a2)[19];
        uint64_t v72 = v1033;
        int v73 = v1035;
        if ((*a2)[6])
        {
          unint64_t v315 = 0;
          uint64_t v316 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v317 = 0;
            if ((v316 & 0x80000000) == 0)
            {
              uint64_t v318 = v316;
              int v319 = v315;
              do
              {
                ldiv_t v320 = ldiv(v319, v72[v318]);
                int v319 = v320.quot;
                v317 += v73[v318--] * v320.rem;
              }
              while (v318 != -1);
            }
            LODWORD(v1020) = v317;
            LOBYTE(v1019) = 1;
            char v1032 = 0;
            char v321 = operator new(0x28uLL);
            *char v321 = &unk_27062B6F8;
            v321[1] = &__b;
            v321[2] = &v1019;
            v321[3] = &__len;
            v321[4] = &v1020;
            char v1032 = v321;
            uint64_t v1040 = 0;
            int v322 = operator new(0x28uLL);
            *int v322 = &unk_27062B578;
            v322[1] = &v1026;
            v322[2] = &v1028;
            v322[3] = v1039;
            v322[4] = v1031;
            char v1035 = v322;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            *(unsigned char *)unint64_t v314 = v1019;
            unint64_t v314 = (int *)((char *)v314 + 1);
            ++v315;
          }
          while ((unint64_t)(*a2)[6] > v315);
        }
        goto LABEL_1111;
      }
      unint64_t v154 = v1027;
      if (v1027 - (unsigned char *)v1026 != 4)
      {
LABEL_453:
        int v1019 = *((_DWORD *)v154 - 1);
        size_t v451 = *((void *)v1029 - 1);
        int v1027 = v154 - 4;
        v1029 -= 8;
        int v1020 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v451;
        __b = (*a2)[19];
        uint64_t v72 = v1033;
        int v73 = v1035;
        unint64_t v452 = (unint64_t)(*a2)[6];
        if (v1027 == v1026)
        {
          if (v452)
          {
            int v563 = 0;
            int v564 = (char *)__b;
            uint64_t v565 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            size_t v566 = __len;
            uint64_t v1005 = v1020;
            int v567 = v1019;
            do
            {
              uint64_t v568 = 0;
              if ((v565 & 0x80000000) == 0)
              {
                uint64_t v569 = v565;
                int v570 = v563;
                do
                {
                  ldiv_t v571 = ldiv(v570, v72[v569]);
                  int v570 = v571.quot;
                  v568 += v73[v569--] * v571.rem;
                }
                while (v569 != -1);
              }
              if (v566) {
                memset(v564, 1, v566);
              }
              if (v567 >= 1)
              {
                int v572 = 0;
                uint64_t v573 = (char *)v1005 + (int)v568;
                do
                {
                  if (v566)
                  {
                    for (uint64_t i = 0; i != v566; ++i)
                    {
                      if (v573[i]) {
                        BOOL v575 = v564[i] == 0;
                      }
                      else {
                        BOOL v575 = 1;
                      }
                      char v576 = !v575;
                      v564[i] = v576;
                    }
                    v573 += i;
                  }
                  ++v572;
                }
                while (v572 != v567);
              }
              v564 += v566;
              v563 += v566;
            }
            while (v452 > v563);
          }
        }
        else if (v452)
        {
          int v453 = 0;
          uint64_t v454 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v455 = 0;
            if ((v454 & 0x80000000) == 0)
            {
              uint64_t v456 = v454;
              int v457 = v453;
              do
              {
                ldiv_t v458 = ldiv(v457, v72[v456]);
                int v457 = v458.quot;
                v455 += v73[v456--] * v458.rem;
              }
              while (v456 != -1);
            }
            int v1017 = v455;
            if (__len) {
              memset(__b, 1, __len);
            }
            char v1032 = 0;
            uint64_t v459 = operator new(0x38uLL);
            *uint64_t v459 = &unk_27062B678;
            v459[1] = &v1030;
            v459[2] = &v1020;
            v459[3] = &v1017;
            v459[4] = &__b;
            v459[5] = &v1019;
            v459[6] = &__len;
            char v1032 = v459;
            uint64_t v1040 = 0;
            uint64_t v460 = operator new(0x28uLL);
            *uint64_t v460 = &unk_27062B578;
            v460[1] = &v1026;
            v460[2] = &v1028;
            v460[3] = v1039;
            v460[4] = v1031;
            char v1035 = v460;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            __b = (char *)__b + __len;
            v453 += __len;
          }
          while ((unint64_t)(*a2)[6] > v453);
        }
        goto LABEL_1111;
      }
      uint64_t v440 = *((int *)v1027 - 1);
      size_t v441 = *((void *)v1029 - 1);
      v1027 -= 4;
      v1029 -= 8;
      uint64_t v442 = (*a2)[6];
      if (v442)
      {
        LODWORD(v443) = 0;
        unint64_t v444 = (*a2)[19];
        uint64_t v445 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v441) {
            memset(v444, 1, v441);
          }
          if ((int)v440 >= 1)
          {
            int v446 = 0;
            uint64_t v447 = v445;
            do
            {
              if (v441)
              {
                for (uint64_t j = 0; j != v441; ++j)
                {
                  if (*(unsigned char *)(v447 + j)) {
                    BOOL v449 = *((unsigned char *)v444 + j) == 0;
                  }
                  else {
                    BOOL v449 = 1;
                  }
                  char v450 = !v449;
                  *((unsigned char *)v444 + j) = v450;
                }
                v447 += j;
              }
              ++v446;
            }
            while (v446 != v440);
          }
          v445 += v441 * v440;
          unint64_t v444 = (int *)((char *)v444 + v441);
          unint64_t v443 = (int)v443 + (int)v441;
        }
        while (v443 < (unint64_t)v442);
      }
      goto LABEL_1115;
    case 1:
      unint64_t v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1036 = &unk_27062AEC8;
      char v1037 = mlx::core::allocator::free;
      int v1038 = &v1036;
      mlx::core::array::set_data(a2, (uint64_t)v30, (uint64_t)&v1036);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
      unsigned int v1023 = 0;
      uint64_t v1024 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        unsigned int v1023 = __p;
        operator delete(__p);
      }
      if (v1025 == 1)
      {
        int v83 = v1027;
        if (v1027 - (unsigned char *)v1026 != 4) {
          goto LABEL_113;
        }
        uint64_t v84 = (*a2)[6];
        if (v84)
        {
          unint64_t v85 = 0;
          uint64_t v86 = *(int *)v1026;
          char v87 = (*a2)[19];
          int v88 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *(unsigned char *)char v87 = 0;
            if ((int)v86 >= 1)
            {
              int v89 = 0;
              unsigned int v90 = v86 + 1;
              uint64_t v91 = v88;
              do
              {
                int v92 = *v91++;
                v89 |= v92;
                *(unsigned char *)char v87 = v89;
                --v90;
              }
              while (v90 > 1);
            }
            unint64_t v85 = (int *)((char *)v85 + 1);
            char v87 = (int *)((char *)v87 + 1);
            v88 += v86;
          }
          while (v85 != v84);
        }
        goto LABEL_1115;
      }
      if (!v1025)
      {
        int v31 = (*a2)[19];
        *(unsigned char *)int v31 = 0;
        int v32 = *(_DWORD *)(*(void *)a1 + 48);
        if (v32 >= 1)
        {
          int v33 = 0;
          uint64_t v34 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v35 = v32 + 1;
          do
          {
            int v36 = *v34++;
            v33 |= v36;
            *(unsigned char *)int v31 = v33;
            --v35;
          }
          while (v35 > 1);
        }
        goto LABEL_1115;
      }
      if ((v1025 & 0xFFFFFFFD) == 1)
      {
        int v83 = v1027;
LABEL_113:
        LODWORD(__b) = *((_DWORD *)v83 - 1);
        int v1027 = v83 - 4;
        v1029 -= 8;
        size_t v123 = *(void *)(*(void *)a1 + 152);
        int v1020 = (*a2)[19];
        __leuint64_t n = v123;
        uint64_t v72 = v1033;
        int v73 = v1035;
        uint64_t v124 = (*a2)[6];
        if (v1027 == v1026)
        {
          if (v124)
          {
            uint64_t v225 = 0;
            uint64_t v226 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            int v227 = v1020;
            size_t v1001 = __len;
            int v228 = (int)__b;
            int v229 = __b + 1;
            do
            {
              uint64_t v230 = 0;
              if ((v226 & 0x80000000) == 0)
              {
                uint64_t v231 = v226;
                int v232 = (int)v225;
                do
                {
                  ldiv_t v233 = ldiv(v232, v72[v231]);
                  int v232 = v233.quot;
                  v230 += v73[v231--] * v233.rem;
                }
                while (v231 != -1);
              }
              *(unsigned char *)int v227 = 0;
              if (v228 >= 1)
              {
                int v234 = 0;
                int v235 = (unsigned __int8 *)(v1001 + (int)v230);
                unsigned int v236 = v229;
                do
                {
                  int v237 = *v235++;
                  v234 |= v237;
                  *(unsigned char *)int v227 = v234;
                  --v236;
                }
                while (v236 > 1);
              }
              uint64_t v225 = (int *)((char *)v225 + 1);
              int v227 = (int *)((char *)v227 + 1);
            }
            while (v225 != v124);
          }
        }
        else if (v124)
        {
          unint64_t v125 = 0;
          uint64_t v126 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v127 = 0;
            if ((v126 & 0x80000000) == 0)
            {
              uint64_t v128 = v126;
              int v129 = v125;
              do
              {
                ldiv_t v130 = ldiv(v129, v72[v128]);
                int v129 = v130.quot;
                v127 += v73[v128--] * v130.rem;
              }
              while (v128 != -1);
            }
            int v1019 = v127;
            *(unsigned char *)int v1020 = 0;
            char v1032 = 0;
            int v131 = operator new(0x30uLL);
            *int v131 = &unk_27062B778;
            v131[1] = &v1017;
            v131[2] = &__len;
            void v131[3] = &v1019;
            v131[4] = &v1020;
            v131[5] = &__b;
            char v1032 = v131;
            uint64_t v1040 = 0;
            int v132 = operator new(0x28uLL);
            void *v132 = &unk_27062B578;
            v132[1] = &v1026;
            v132[2] = &v1028;
            v132[3] = v1039;
            v132[4] = v1031;
            char v1035 = v132;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            ++v125;
            int v1020 = (int *)((char *)v1020 + 1);
          }
          while ((unint64_t)(*a2)[6] > v125);
        }
        goto LABEL_1111;
      }
      if (v1025 != 2)
      {
        if (v1025 != 5)
        {
          if (v1025 != 4) {
            goto LABEL_1115;
          }
          uint64_t v155 = v1027;
          goto LABEL_477;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        char v323 = (*a2)[19];
        uint64_t v72 = v1033;
        int v73 = v1035;
        if ((*a2)[6])
        {
          unint64_t v324 = 0;
          uint64_t v325 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v326 = 0;
            if ((v325 & 0x80000000) == 0)
            {
              uint64_t v327 = v325;
              int v328 = v324;
              do
              {
                ldiv_t v329 = ldiv(v328, v72[v327]);
                int v328 = v329.quot;
                v326 += v73[v327--] * v329.rem;
              }
              while (v327 != -1);
            }
            LODWORD(v1020) = v326;
            LOBYTE(v1019) = 0;
            char v1032 = 0;
            unint64_t v330 = operator new(0x28uLL);
            *unint64_t v330 = &unk_27062B878;
            v330[1] = &__b;
            v330[2] = &v1019;
            v330[3] = &__len;
            v330[4] = &v1020;
            char v1032 = v330;
            uint64_t v1040 = 0;
            int v331 = operator new(0x28uLL);
            *int v331 = &unk_27062B578;
            v331[1] = &v1026;
            v331[2] = &v1028;
            v331[3] = v1039;
            v331[4] = v1031;
            char v1035 = v331;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            *(unsigned char *)char v323 = v1019;
            char v323 = (int *)((char *)v323 + 1);
            ++v324;
          }
          while ((unint64_t)(*a2)[6] > v324);
        }
        goto LABEL_1111;
      }
      uint64_t v155 = v1027;
      if (v1027 - (unsigned char *)v1026 != 4)
      {
LABEL_477:
        int v1019 = *((_DWORD *)v155 - 1);
        size_t v470 = *((void *)v1029 - 1);
        int v1027 = v155 - 4;
        v1029 -= 8;
        int v1020 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v470;
        __b = (*a2)[19];
        uint64_t v72 = v1033;
        int v73 = v1035;
        unint64_t v471 = (unint64_t)(*a2)[6];
        if (v1027 == v1026)
        {
          if (v471)
          {
            int v577 = 0;
            char v578 = (char *)__b;
            uint64_t v579 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            size_t v580 = __len;
            int v1006 = v1020;
            int v581 = v1019;
            do
            {
              uint64_t v582 = 0;
              if ((v579 & 0x80000000) == 0)
              {
                uint64_t v583 = v579;
                int v584 = v577;
                do
                {
                  ldiv_t v585 = ldiv(v584, v72[v583]);
                  int v584 = v585.quot;
                  v582 += v73[v583--] * v585.rem;
                }
                while (v583 != -1);
              }
              if (v580) {
                bzero(v578, v580);
              }
              if (v581 >= 1)
              {
                int v586 = 0;
                uint64_t v587 = (char *)v1006 + (int)v582;
                do
                {
                  if (v580)
                  {
                    for (uint64_t k = 0; k != v580; ++k)
                      v578[k] |= v587[k];
                    v587 += k;
                  }
                  ++v586;
                }
                while (v586 != v581);
              }
              v578 += v580;
              v577 += v580;
            }
            while (v471 > v577);
          }
        }
        else if (v471)
        {
          int v472 = 0;
          uint64_t v473 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          do
          {
            uint64_t v474 = 0;
            if ((v473 & 0x80000000) == 0)
            {
              uint64_t v475 = v473;
              int v476 = v472;
              do
              {
                ldiv_t v477 = ldiv(v476, v72[v475]);
                int v476 = v477.quot;
                v474 += v73[v475--] * v477.rem;
              }
              while (v475 != -1);
            }
            int v1017 = v474;
            if (__len) {
              bzero(__b, __len);
            }
            char v1032 = 0;
            uint64_t v478 = operator new(0x38uLL);
            *uint64_t v478 = &unk_27062B7F8;
            v478[1] = &v1030;
            v478[2] = &v1020;
            v478[3] = &v1017;
            v478[4] = &__b;
            v478[5] = &v1019;
            v478[6] = &__len;
            char v1032 = v478;
            uint64_t v1040 = 0;
            uint64_t v479 = operator new(0x28uLL);
            *uint64_t v479 = &unk_27062B578;
            v479[1] = &v1026;
            v479[2] = &v1028;
            v479[3] = v1039;
            v479[4] = v1031;
            char v1035 = v479;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
            std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
            __b = (char *)__b + __len;
            v472 += __len;
          }
          while ((unint64_t)(*a2)[6] > v472);
        }
        goto LABEL_1111;
      }
      uint64_t v461 = *((int *)v1027 - 1);
      size_t v462 = *((void *)v1029 - 1);
      v1027 -= 4;
      v1029 -= 8;
      int v463 = (*a2)[6];
      if (v463)
      {
        LODWORD(v464) = 0;
        uint64_t v465 = (*a2)[19];
        uint64_t v466 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v462) {
            bzero(v465, v462);
          }
          if ((int)v461 >= 1)
          {
            int v467 = 0;
            uint64_t v468 = v466;
            do
            {
              if (v462)
              {
                for (uint64_t m = 0; m != v462; ++m)
                  *((unsigned char *)v465 + m) |= *(unsigned char *)(v468 + m);
                v468 += m;
              }
              ++v467;
            }
            while (v467 != v461);
          }
          v466 += v462 * v461;
          uint64_t v465 = (int *)((char *)v465 + v462);
          unint64_t v464 = (int)v464 + (int)v462;
        }
        while (v464 < (unint64_t)v463);
      }
      goto LABEL_1115;
    case 2:
      uint64_t v21 = *a2;
      unint64_t v22 = (*a2)[7];
      switch((int)v22)
      {
        case 0:
          int v23 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v23, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            int v264 = v1027;
            if (v1027 - (unsigned char *)v1026 != 4) {
              goto LABEL_272;
            }
            int v265 = (*a2)[6];
            if (v265)
            {
              int v266 = 0;
              uint64_t v267 = *(int *)v1026;
              uint64_t v268 = (BOOL *)(*a2)[19];
              uint64_t v269 = *(char **)(*(void *)a1 + 152);
              do
              {
                *uint64_t v268 = 0;
                if ((int)v267 >= 1)
                {
                  BOOL v270 = 0;
                  unsigned int v271 = v267 + 1;
                  unint64_t v272 = v269;
                  do
                  {
                    char v273 = *v272++;
                    BOOL v270 = v270 != -v273;
                    *uint64_t v268 = v270;
                    --v271;
                  }
                  while (v271 > 1);
                }
                int v266 = (int *)((char *)v266 + 1);
                ++v268;
                v269 += v267;
              }
              while (v266 != v265);
            }
            goto LABEL_1115;
          }
          if (!v1025)
          {
            int v24 = (BOOL *)(*a2)[19];
            *int v24 = 0;
            int v25 = *(_DWORD *)(*(void *)a1 + 48);
            if (v25 >= 1)
            {
              BOOL v26 = 0;
              int v27 = *(char **)(*(void *)a1 + 152);
              unsigned int v28 = v25 + 1;
              do
              {
                char v29 = *v27++;
                BOOL v26 = v26 != -v29;
                *int v24 = v26;
                --v28;
              }
              while (v28 > 1);
            }
            goto LABEL_1115;
          }
          if ((v1025 & 0xFFFFFFFD) == 1)
          {
            int v264 = v1027;
LABEL_272:
            LODWORD(__b) = *((_DWORD *)v264 - 1);
            int v1027 = v264 - 4;
            v1029 -= 8;
            size_t v274 = *(void *)(*(void *)a1 + 152);
            int v1020 = (*a2)[19];
            __leuint64_t n = v274;
            uint64_t v72 = v1033;
            int v73 = v1035;
            uint64_t v275 = (*a2)[6];
            if (v1027 == v1026)
            {
              if (v275)
              {
                unint64_t v622 = 0;
                uint64_t v623 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                uint64_t v624 = (BOOL *)v1020;
                size_t v1009 = __len;
                int v625 = (int)__b;
                int v626 = __b + 1;
                do
                {
                  uint64_t v627 = 0;
                  if ((v623 & 0x80000000) == 0)
                  {
                    uint64_t v628 = v623;
                    int v629 = (int)v622;
                    do
                    {
                      ldiv_t v630 = ldiv(v629, v72[v628]);
                      int v629 = v630.quot;
                      v627 += v73[v628--] * v630.rem;
                    }
                    while (v628 != -1);
                  }
                  *uint64_t v624 = 0;
                  if (v625 >= 1)
                  {
                    BOOL v631 = 0;
                    int v632 = (char *)(v1009 + (int)v627);
                    unsigned int v633 = v626;
                    do
                    {
                      char v634 = *v632++;
                      BOOL v631 = v631 != -v634;
                      *uint64_t v624 = v631;
                      --v633;
                    }
                    while (v633 > 1);
                  }
                  unint64_t v622 = (int *)((char *)v622 + 1);
                  ++v624;
                }
                while (v622 != v275);
              }
            }
            else if (v275)
            {
              unint64_t v276 = 0;
              uint64_t v277 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v278 = 0;
                if ((v277 & 0x80000000) == 0)
                {
                  uint64_t v279 = v277;
                  int v280 = v276;
                  do
                  {
                    ldiv_t v281 = ldiv(v280, v72[v279]);
                    int v280 = v281.quot;
                    v278 += v73[v279--] * v281.rem;
                  }
                  while (v279 != -1);
                }
                int v1019 = v278;
                *(unsigned char *)int v1020 = 0;
                char v1032 = 0;
                int v282 = operator new(0x30uLL);
                *int v282 = &unk_27062B8F8;
                v282[1] = &v1017;
                v282[2] = &__len;
                v282[3] = &v1019;
                v282[4] = &v1020;
                v282[5] = &__b;
                char v1032 = v282;
                uint64_t v1040 = 0;
                uint64_t v283 = operator new(0x28uLL);
                *uint64_t v283 = &unk_27062B578;
                v283[1] = &v1026;
                v283[2] = &v1028;
                v283[3] = v1039;
                v283[4] = v1031;
                char v1035 = v283;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                ++v276;
                int v1020 = (int *)((char *)v1020 + 1);
              }
              while ((unint64_t)(*a2)[6] > v276);
            }
            goto LABEL_1111;
          }
          if (v1025 != 2)
          {
            if (v1025 != 5)
            {
              if (v1025 != 4) {
                goto LABEL_1115;
              }
              uint64_t v615 = v1027;
              goto LABEL_787;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            unint64_t v727 = (*a2)[19];
            uint64_t v72 = v1033;
            int v73 = v1035;
            if ((*a2)[6])
            {
              unint64_t v728 = 0;
              uint64_t v729 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v730 = 0;
                if ((v729 & 0x80000000) == 0)
                {
                  uint64_t v731 = v729;
                  int v732 = v728;
                  do
                  {
                    ldiv_t v733 = ldiv(v732, v72[v731]);
                    int v732 = v733.quot;
                    v730 += v73[v731--] * v733.rem;
                  }
                  while (v731 != -1);
                }
                LODWORD(v1020) = v730;
                LOBYTE(v1019) = 0;
                char v1032 = 0;
                uint64_t v734 = operator new(0x28uLL);
                *uint64_t v734 = &unk_27062B9F8;
                v734[1] = &__b;
                v734[2] = &v1019;
                v734[3] = &__len;
                v734[4] = &v1020;
                char v1032 = v734;
                uint64_t v1040 = 0;
                unint64_t v735 = operator new(0x28uLL);
                *unint64_t v735 = &unk_27062B578;
                v735[1] = &v1026;
                v735[2] = &v1028;
                v735[3] = v1039;
                v735[4] = v1031;
                char v1035 = v735;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                *(unsigned char *)unint64_t v727 = v1019;
                unint64_t v727 = (int *)((char *)v727 + 1);
                ++v728;
              }
              while ((unint64_t)(*a2)[6] > v728);
            }
            goto LABEL_1111;
          }
          uint64_t v615 = v1027;
          if (v1027 - (unsigned char *)v1026 != 4)
          {
LABEL_787:
            int v1019 = *((_DWORD *)v615 - 1);
            size_t v717 = *((void *)v1029 - 1);
            int v1027 = v615 - 4;
            v1029 -= 8;
            int v1020 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v717;
            __b = (*a2)[19];
            uint64_t v72 = v1033;
            int v73 = v1035;
            unint64_t v718 = (unint64_t)(*a2)[6];
            if (v1027 == v1026)
            {
              if (v718)
              {
                int v903 = 0;
                int v904 = (unsigned __int8 *)__b;
                uint64_t v905 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                size_t v906 = __len;
                unsigned int v1012 = v1020;
                int v907 = v1019;
                do
                {
                  uint64_t v908 = 0;
                  if ((v905 & 0x80000000) == 0)
                  {
                    uint64_t v909 = v905;
                    int v910 = v903;
                    do
                    {
                      ldiv_t v911 = ldiv(v910, v72[v909]);
                      int v910 = v911.quot;
                      v908 += v73[v909--] * v911.rem;
                    }
                    while (v909 != -1);
                  }
                  if (v906) {
                    bzero(v904, v906);
                  }
                  if (v907 >= 1)
                  {
                    int v912 = 0;
                    int v913 = (char *)v1012 + (int)v908;
                    do
                    {
                      if (v906)
                      {
                        for (uint64_t n = 0; n != v906; ++n)
                          v904[n] = v904[n] != -v913[n];
                        v913 += n;
                      }
                      ++v912;
                    }
                    while (v912 != v907);
                  }
                  v904 += v906;
                  v903 += v906;
                }
                while (v718 > v903);
              }
            }
            else if (v718)
            {
              int v719 = 0;
              uint64_t v720 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v721 = 0;
                if ((v720 & 0x80000000) == 0)
                {
                  uint64_t v722 = v720;
                  int v723 = v719;
                  do
                  {
                    ldiv_t v724 = ldiv(v723, v72[v722]);
                    int v723 = v724.quot;
                    v721 += v73[v722--] * v724.rem;
                  }
                  while (v722 != -1);
                }
                int v1017 = v721;
                if (__len) {
                  bzero(__b, __len);
                }
                char v1032 = 0;
                unint64_t v725 = operator new(0x38uLL);
                *unint64_t v725 = &unk_27062B978;
                v725[1] = &v1030;
                v725[2] = &v1020;
                v725[3] = &v1017;
                v725[4] = &__b;
                v725[5] = &v1019;
                v725[6] = &__len;
                char v1032 = v725;
                uint64_t v1040 = 0;
                uint64_t v726 = operator new(0x28uLL);
                *uint64_t v726 = &unk_27062B578;
                v726[1] = &v1026;
                v726[2] = &v1028;
                v726[3] = v1039;
                v726[4] = v1031;
                char v1035 = v726;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                __b = (char *)__b + __len;
                v719 += __len;
              }
              while ((unint64_t)(*a2)[6] > v719);
            }
            goto LABEL_1111;
          }
          uint64_t v708 = *((int *)v1027 - 1);
          size_t v709 = *((void *)v1029 - 1);
          v1027 -= 4;
          v1029 -= 8;
          uint64_t v710 = (*a2)[6];
          if (v710)
          {
            LODWORD(v711) = 0;
            float v712 = (*a2)[19];
            uint64_t v713 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v709) {
                bzero(v712, v709);
              }
              if ((int)v708 >= 1)
              {
                int v714 = 0;
                uint64_t v715 = v713;
                do
                {
                  if (v709)
                  {
                    for (iuint64_t i = 0; ii != v709; ++ii)
                      *((unsigned char *)v712 + ii) = *((unsigned __int8 *)v712 + ii) != -*(unsigned char *)(v715 + ii);
                    v715 += ii;
                  }
                  ++v714;
                }
                while (v714 != v708);
              }
              v713 += v709 * v708;
              float v712 = (int *)((char *)v712 + v709);
              unint64_t v711 = (int)v711 + (int)v709;
            }
            while (v711 < (unint64_t)v710);
          }
          goto LABEL_1115;
        case 1:
          int v158 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v158, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            int v341 = v1027;
            if (v1027 - (unsigned char *)v1026 != 4) {
              goto LABEL_348;
            }
            if ((*a2)[6])
            {
              unint64_t v342 = 0;
              uint64_t v343 = *(int *)v1026;
              unint64_t v344 = (*a2)[19];
              int v345 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *(unsigned char *)unint64_t v344 = 0;
                if ((int)v343 >= 1)
                {
                  int v346 = 0;
                  unsigned int v347 = v343 + 1;
                  uint64_t v348 = v345;
                  do
                  {
                    int v349 = *v348++;
                    v346 += v349;
                    *(unsigned char *)unint64_t v344 = v346;
                    --v347;
                  }
                  while (v347 > 1);
                }
                ++v342;
                unint64_t v344 = (int *)((char *)v344 + 1);
                v345 += v343;
              }
              while ((unint64_t)(*a2)[6] > v342);
            }
            goto LABEL_1115;
          }
          if (!v1025)
          {
            uint64_t v159 = (*a2)[19];
            *(unsigned char *)uint64_t v159 = 0;
            int v160 = *(_DWORD *)(*(void *)a1 + 48);
            if (v160 >= 1)
            {
              int v161 = 0;
              int v162 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v163 = v160 + 1;
              do
              {
                int v164 = *v162++;
                v161 += v164;
                *(unsigned char *)uint64_t v159 = v161;
                --v163;
              }
              while (v163 > 1);
            }
            goto LABEL_1115;
          }
          if ((v1025 & 0xFFFFFFFD) == 1)
          {
            int v341 = v1027;
LABEL_348:
            LODWORD(__b) = *((_DWORD *)v341 - 1);
            int v1027 = v341 - 4;
            v1029 -= 8;
            size_t v350 = *(void *)(*(void *)a1 + 152);
            int v1020 = (*a2)[19];
            __leuint64_t n = v350;
            uint64_t v72 = v1033;
            int v73 = v1035;
            int v351 = (*a2)[6];
            if (v1027 == v1026)
            {
              if (v351)
              {
                unint64_t v635 = 0;
                uint64_t v636 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v637 = 0;
                  if ((v636 & 0x80000000) == 0)
                  {
                    uint64_t v638 = v636;
                    int v639 = v635;
                    do
                    {
                      ldiv_t v640 = ldiv(v639, v72[v638]);
                      int v639 = v640.quot;
                      v637 += v73[v638--] * v640.rem;
                    }
                    while (v638 != -1);
                  }
                  *(unsigned char *)int v1020 = 0;
                  unint64_t v641 = v1020;
                  if ((int)__b >= 1)
                  {
                    int v642 = (unsigned __int8 *)(__len + (int)v637);
                    int v643 = *(unsigned __int8 *)v1020;
                    unsigned int v644 = __b + 1;
                    do
                    {
                      int v645 = *v642++;
                      v643 += v645;
                      *(unsigned char *)unint64_t v641 = v643;
                      --v644;
                    }
                    while (v644 > 1);
                    unint64_t v641 = v1020;
                  }
                  ++v635;
                  int v1020 = (int *)((char *)v641 + 1);
                }
                while ((unint64_t)(*a2)[6] > v635);
              }
            }
            else if (v351)
            {
              unint64_t v352 = 0;
              uint64_t v353 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v354 = 0;
                if ((v353 & 0x80000000) == 0)
                {
                  uint64_t v355 = v353;
                  int v356 = v352;
                  do
                  {
                    ldiv_t v357 = ldiv(v356, v72[v355]);
                    int v356 = v357.quot;
                    v354 += v73[v355--] * v357.rem;
                  }
                  while (v355 != -1);
                }
                int v1019 = v354;
                *(unsigned char *)int v1020 = 0;
                char v1032 = 0;
                unint64_t v358 = operator new(0x30uLL);
                *unint64_t v358 = &unk_27062BA78;
                v358[1] = &v1017;
                v358[2] = &__len;
                v358[3] = &v1019;
                v358[4] = &v1020;
                v358[5] = &__b;
                char v1032 = v358;
                uint64_t v1040 = 0;
                int v359 = operator new(0x28uLL);
                *int v359 = &unk_27062B578;
                v359[1] = &v1026;
                v359[2] = &v1028;
                v359[3] = v1039;
                v359[4] = v1031;
                char v1035 = v359;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                ++v352;
                int v1020 = (int *)((char *)v1020 + 1);
              }
              while ((unint64_t)(*a2)[6] > v352);
            }
            goto LABEL_1111;
          }
          if (v1025 != 2)
          {
            if (v1025 != 5)
            {
              if (v1025 != 4) {
                goto LABEL_1115;
              }
              int v616 = v1027;
              goto LABEL_818;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            unint64_t v754 = (*a2)[19];
            uint64_t v72 = v1033;
            int v73 = v1035;
            if ((*a2)[6])
            {
              unint64_t v755 = 0;
              uint64_t v756 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v757 = 0;
                if ((v756 & 0x80000000) == 0)
                {
                  uint64_t v758 = v756;
                  int v759 = v755;
                  do
                  {
                    ldiv_t v760 = ldiv(v759, v72[v758]);
                    int v759 = v760.quot;
                    v757 += v73[v758--] * v760.rem;
                  }
                  while (v758 != -1);
                }
                LODWORD(v1020) = v757;
                LOBYTE(v1019) = 0;
                char v1032 = 0;
                int v761 = operator new(0x28uLL);
                *int v761 = &unk_27062BB78;
                v761[1] = &__b;
                v761[2] = &v1019;
                v761[3] = &__len;
                v761[4] = &v1020;
                char v1032 = v761;
                uint64_t v1040 = 0;
                uint64_t v762 = operator new(0x28uLL);
                *uint64_t v762 = &unk_27062B578;
                v762[1] = &v1026;
                v762[2] = &v1028;
                v762[3] = v1039;
                v762[4] = v1031;
                char v1035 = v762;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                *(unsigned char *)unint64_t v754 = v1019;
                unint64_t v754 = (int *)((char *)v754 + 1);
                ++v755;
              }
              while ((unint64_t)(*a2)[6] > v755);
            }
            goto LABEL_1111;
          }
          int v616 = v1027;
          if (v1027 - (unsigned char *)v1026 != 4)
          {
LABEL_818:
            int v1019 = *((_DWORD *)v616 - 1);
            size_t v744 = *((void *)v1029 - 1);
            int v1027 = v616 - 4;
            v1029 -= 8;
            int v1020 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v744;
            __b = (*a2)[19];
            uint64_t v72 = v1033;
            int v73 = v1035;
            unint64_t v745 = (*a2)[6];
            if (v1027 == v1026)
            {
              if (v745)
              {
                int v915 = 0;
                uint64_t v916 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v917 = 0;
                  if ((v916 & 0x80000000) != 0)
                  {
                    int v920 = a2;
                  }
                  else
                  {
                    uint64_t v918 = v916;
                    int v919 = v915;
                    int v920 = a2;
                    do
                    {
                      ldiv_t v921 = ldiv(v919, v72[v918]);
                      int v919 = v921.quot;
                      v917 += v73[v918--] * v921.rem;
                    }
                    while (v918 != -1);
                  }
                  int v922 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    size_t v923 = __len;
                    int v922 = __b;
                  }
                  else
                  {
                    size_t v923 = 0;
                  }
                  int v924 = v1019;
                  if (v1019 >= 1)
                  {
                    int v925 = 0;
                    uint64_t v926 = (char *)v1020 + (int)v917;
                    do
                    {
                      size_t v927 = v923;
                      for (juint64_t j = v922; v927; --v927)
                      {
                        char v929 = *v926++;
                        *jj++ += v929;
                      }
                      ++v925;
                    }
                    while (v925 != v924);
                    size_t v923 = __len;
                    int v922 = __b;
                  }
                  __b = &v922[v923];
                  v915 += v923;
                }
                while ((unint64_t)(*v920)[6] > v915);
              }
            }
            else if (v745)
            {
              int v746 = 0;
              uint64_t v747 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v748 = 0;
                if ((v747 & 0x80000000) == 0)
                {
                  uint64_t v749 = v747;
                  int v750 = v746;
                  do
                  {
                    ldiv_t v751 = ldiv(v750, v72[v749]);
                    int v750 = v751.quot;
                    v748 += v73[v749--] * v751.rem;
                  }
                  while (v749 != -1);
                }
                int v1017 = v748;
                if (__len) {
                  bzero(__b, __len);
                }
                char v1032 = 0;
                uint64_t v752 = operator new(0x38uLL);
                void *v752 = &unk_27062BAF8;
                v752[1] = &v1030;
                v752[2] = &v1020;
                v752[3] = &v1017;
                v752[4] = &__b;
                v752[5] = &v1019;
                v752[6] = &__len;
                char v1032 = v752;
                uint64_t v1040 = 0;
                unint64_t v753 = operator new(0x28uLL);
                *unint64_t v753 = &unk_27062B578;
                v753[1] = &v1026;
                v753[2] = &v1028;
                v753[3] = v1039;
                v753[4] = v1031;
                char v1035 = v753;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                __b = (char *)__b + __len;
                v746 += __len;
              }
              while ((unint64_t)(*a2)[6] > v746);
            }
            goto LABEL_1111;
          }
          uint64_t v736 = *((int *)v1027 - 1);
          size_t v737 = *((void *)v1029 - 1);
          v1027 -= 4;
          v1029 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v738) = 0;
            unint64_t v739 = (*a2)[19];
            uint64_t v740 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v737) {
                bzero(v739, v737);
              }
              if ((int)v736 >= 1)
              {
                int v741 = 0;
                uint64_t v742 = v740;
                do
                {
                  if (v737)
                  {
                    for (kuint64_t k = 0; kk != v737; ++kk)
                      *((unsigned char *)v739 + kk) += *(unsigned char *)(v742 + kk);
                    v742 += kk;
                  }
                  ++v741;
                }
                while (v741 != v736);
              }
              v740 += v737 * v736;
              unint64_t v739 = (int *)((char *)v739 + v737);
              unint64_t v738 = (int)v738 + (int)v737;
            }
            while (v738 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1115;
        case 2:
          uint64_t v165 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v165, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            int v360 = v1027;
            if (v1027 - (unsigned char *)v1026 == 4)
            {
              uint64_t v361 = (*a2)[6];
              if (v361)
              {
                uint64_t v362 = 0;
                uint64_t v363 = *(int *)v1026;
                unsigned __int8 v364 = (*a2)[19];
                int v365 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *unsigned __int8 v364 = 0;
                  if ((int)v363 >= 1)
                  {
                    int v366 = 0;
                    unsigned int v367 = v363 + 1;
                    uint64_t v368 = v365;
                    do
                    {
                      int v369 = *v368++;
                      v366 += v369;
                      --v367;
                    }
                    while (v367 > 1);
                    *unsigned __int8 v364 = v366;
                  }
                  uint64_t v362 = (int *)((char *)v362 + 1);
                  ++v364;
                  v365 += v363;
                }
                while (v362 != v361);
              }
              goto LABEL_1115;
            }
LABEL_367:
            LODWORD(__b) = *((_DWORD *)v360 - 1);
            int v1027 = v360 - 4;
            v1029 -= 8;
            size_t v370 = *(void *)(*(void *)a1 + 152);
            int v1020 = (*a2)[19];
            __leuint64_t n = v370;
            uint64_t v72 = v1033;
            int v73 = v1035;
            int v371 = (*a2)[6];
            if (v1027 == v1026)
            {
              if (v371)
              {
                int v646 = 0;
                uint64_t v647 = v1020;
                size_t v648 = __len;
                uint64_t v649 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v650 = 0;
                  if ((v649 & 0x80000000) == 0)
                  {
                    uint64_t v651 = v649;
                    int v652 = (int)v646;
                    do
                    {
                      ldiv_t v653 = ldiv(v652, v72[v651]);
                      int v652 = v653.quot;
                      v650 += v73[v651--] * v653.rem;
                    }
                    while (v651 != -1);
                  }
                  *uint64_t v647 = 0;
                  if ((int)__b >= 1)
                  {
                    int v654 = 0;
                    int v655 = (unsigned __int8 *)(v648 + (int)v650);
                    unsigned int v656 = __b + 1;
                    do
                    {
                      int v657 = *v655++;
                      v654 += v657;
                      --v656;
                    }
                    while (v656 > 1);
                    *uint64_t v647 = v654;
                  }
                  int v646 = (int *)((char *)v646 + 1);
                  ++v647;
                }
                while (v646 != v371);
              }
            }
            else if (v371)
            {
              unint64_t v372 = 0;
              uint64_t v373 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v374 = 0;
                if ((v373 & 0x80000000) == 0)
                {
                  uint64_t v375 = v373;
                  int v376 = v372;
                  do
                  {
                    ldiv_t v377 = ldiv(v376, v72[v375]);
                    int v376 = v377.quot;
                    v374 += v73[v375--] * v377.rem;
                  }
                  while (v375 != -1);
                }
                int v1019 = v374;
                *int v1020 = 0;
                char v1032 = 0;
                uint64_t v378 = operator new(0x30uLL);
                void *v378 = &unk_27062BBF8;
                v378[1] = &v1017;
                v378[2] = &__len;
                v378[3] = &v1019;
                v378[4] = &v1020;
                v378[5] = &__b;
                char v1032 = v378;
                uint64_t v1040 = 0;
                float v379 = operator new(0x28uLL);
                *float v379 = &unk_27062B578;
                v379[1] = &v1026;
                v379[2] = &v1028;
                v379[3] = v1039;
                v379[4] = v1031;
                char v1035 = v379;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                ++v372;
                ++v1020;
              }
              while ((unint64_t)(*a2)[6] > v372);
            }
            goto LABEL_1111;
          }
          if (v1025)
          {
            if ((v1025 & 0xFFFFFFFD) == 1)
            {
              int v360 = v1027;
              goto LABEL_367;
            }
            switch(v1025)
            {
              case 2:
                uint64_t v617 = v1027;
                if (v1027 - (unsigned char *)v1026 == 4)
                {
                  uint64_t v763 = *((int *)v1027 - 1);
                  uint64_t v764 = *((void *)v1029 - 1);
                  v1027 -= 4;
                  v1029 -= 8;
                  uint64_t v765 = (*a2)[6];
                  if (v765)
                  {
                    LODWORD(v766) = 0;
                    unint64_t v767 = (*a2)[19];
                    uint64_t v768 = *(void *)(*(void *)a1 + 152);
                    do
                    {
                      if (v764) {
                        bzero(v767, 4 * v764);
                      }
                      if ((int)v763 >= 1)
                      {
                        int v769 = 0;
                        uint64_t v770 = v768;
                        do
                        {
                          if (v764)
                          {
                            for (muint64_t m = 0; mm != v764; ++mm)
                              v767[mm] += *(unsigned __int8 *)(v770 + mm);
                            v770 += mm;
                          }
                          ++v769;
                        }
                        while (v769 != v763);
                      }
                      v768 += v764 * v763;
                      v767 += v764;
                      unint64_t v766 = (int)v766 + (int)v764;
                    }
                    while (v766 < (unint64_t)v765);
                  }
                  goto LABEL_1115;
                }
                break;
              case 5:
                __leuint64_t n = *(void *)(*(void *)a1 + 152);
                uint64_t v782 = (*a2)[19];
                uint64_t v72 = v1033;
                int v73 = v1035;
                if ((*a2)[6])
                {
                  unint64_t v783 = 0;
                  uint64_t v784 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                  do
                  {
                    uint64_t v785 = 0;
                    if ((v784 & 0x80000000) == 0)
                    {
                      uint64_t v786 = v784;
                      int v787 = v783;
                      do
                      {
                        ldiv_t v788 = ldiv(v787, v72[v786]);
                        int v787 = v788.quot;
                        v785 += v73[v786--] * v788.rem;
                      }
                      while (v786 != -1);
                    }
                    LODWORD(v1020) = v785;
                    LODWORD(__b) = 0;
                    char v1032 = 0;
                    int v789 = operator new(0x28uLL);
                    *int v789 = &unk_27062BCF8;
                    v789[1] = &v1019;
                    v789[2] = &__b;
                    v789[3] = &__len;
                    v789[4] = &v1020;
                    char v1032 = v789;
                    uint64_t v1040 = 0;
                    int v790 = operator new(0x28uLL);
                    *int v790 = &unk_27062B578;
                    v790[1] = &v1026;
                    v790[2] = &v1028;
                    v790[3] = v1039;
                    v790[4] = v1031;
                    char v1035 = v790;
                    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                    std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                    *v782++ = (int)__b;
                    ++v783;
                  }
                  while ((unint64_t)(*a2)[6] > v783);
                }
                goto LABEL_1111;
              case 4:
                uint64_t v617 = v1027;
                break;
              default:
                goto LABEL_1115;
            }
            int v1019 = *((_DWORD *)v617 - 1);
            size_t v772 = *((void *)v1029 - 1);
            int v1027 = v617 - 4;
            v1029 -= 8;
            int v1020 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v772;
            __b = (*a2)[19];
            uint64_t v72 = v1033;
            int v73 = v1035;
            unint64_t v773 = (unint64_t)(*a2)[6];
            if (v1027 == v1026)
            {
              if (v773)
              {
                int v930 = 0;
                int v931 = (char *)__b;
                uint64_t v932 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                size_t v933 = __len;
                unsigned int v1013 = v1020;
                size_t v934 = 4 * __len;
                do
                {
                  uint64_t v935 = 0;
                  if ((v932 & 0x80000000) == 0)
                  {
                    uint64_t v936 = v932;
                    int v937 = v930;
                    do
                    {
                      ldiv_t v938 = ldiv(v937, v72[v936]);
                      int v937 = v938.quot;
                      v935 += v73[v936--] * v938.rem;
                    }
                    while (v936 != -1);
                  }
                  if (v933) {
                    bzero(v931, v934);
                  }
                  int v939 = v1019;
                  if (v1019 >= 1)
                  {
                    int v940 = 0;
                    int v941 = (char *)v1013 + (int)v935;
                    do
                    {
                      if (v933)
                      {
                        for (nuint64_t n = 0; nn != v933; ++nn)
                          *(_DWORD *)&v931[4 * nn] += v941[nn];
                        v941 += nn;
                      }
                      ++v940;
                    }
                    while (v940 != v939);
                  }
                  v931 += v934;
                  v930 += v933;
                }
                while (v773 > v930);
              }
            }
            else if (v773)
            {
              int v774 = 0;
              uint64_t v775 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v776 = 0;
                if ((v775 & 0x80000000) == 0)
                {
                  uint64_t v777 = v775;
                  int v778 = v774;
                  do
                  {
                    ldiv_t v779 = ldiv(v778, v72[v777]);
                    int v778 = v779.quot;
                    v776 += v73[v777--] * v779.rem;
                  }
                  while (v777 != -1);
                }
                int v1017 = v776;
                if (__len) {
                  bzero(__b, 4 * __len);
                }
                char v1032 = 0;
                uint64_t v780 = operator new(0x38uLL);
                *uint64_t v780 = &unk_27062BC78;
                v780[1] = &v1030;
                v780[2] = &v1020;
                v780[3] = &v1017;
                v780[4] = &__b;
                v780[5] = &v1019;
                v780[6] = &__len;
                char v1032 = v780;
                uint64_t v1040 = 0;
                uint64_t v781 = operator new(0x28uLL);
                *uint64_t v781 = &unk_27062B578;
                v781[1] = &v1026;
                v781[2] = &v1028;
                v781[3] = v1039;
                v781[4] = v1031;
                char v1035 = v781;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                __b = (char *)__b + 4 * __len;
                v774 += __len;
              }
              while ((unint64_t)(*a2)[6] > v774);
            }
LABEL_1111:
            if (v73) {
              operator delete(v73);
            }
            if (v72) {
              operator delete(v72);
            }
            goto LABEL_1115;
          }
          int v166 = (*a2)[19];
          *int v166 = 0;
          int v167 = *(_DWORD *)(*(void *)a1 + 48);
          if (v167 < 1) {
            goto LABEL_1115;
          }
          int v168 = 0;
          uint64_t v169 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v170 = v167 + 1;
          do
          {
            int v171 = *v169++;
            v168 += v171;
            --v170;
          }
          while (v170 > 1);
LABEL_192:
          *int v166 = v168;
LABEL_1115:
          if (v1028)
          {
            int v1029 = (char *)v1028;
            operator delete(v1028);
          }
          if (v1026)
          {
            int v1027 = v1026;
            operator delete(v1026);
          }
          return;
        case 3:
          uint64_t v172 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v172, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            int v380 = v1027;
            if (v1027 - (unsigned char *)v1026 == 4)
            {
              if ((*a2)[6])
              {
                unint64_t v381 = 0;
                uint64_t v382 = *(int *)v1026;
                uint64_t v383 = (*a2)[19];
                uint64_t v384 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(unsigned char *)uint64_t v383 = 0;
                  if ((int)v382 >= 1)
                  {
                    int v385 = 0;
                    unsigned int v386 = v382 + 1;
                    unint64_t v387 = v384;
                    do
                    {
                      int v388 = *v387++;
                      v385 += v388;
                      *(unsigned char *)uint64_t v383 = v385;
                      --v386;
                    }
                    while (v386 > 1);
                  }
                  ++v381;
                  uint64_t v383 = (int *)((char *)v383 + 1);
                  v384 += v382;
                }
                while ((unint64_t)(*a2)[6] > v381);
              }
              goto LABEL_1115;
            }
          }
          else
          {
            if (!v1025)
            {
              unint64_t v173 = (*a2)[19];
              *(unsigned char *)unint64_t v173 = 0;
              int v174 = *(_DWORD *)(*(void *)a1 + 48);
              if (v174 >= 1)
              {
                int v175 = 0;
                uint64_t v176 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v177 = v174 + 1;
                do
                {
                  int v178 = *v176++;
                  v175 += v178;
                  *(unsigned char *)unint64_t v173 = v175;
                  --v177;
                }
                while (v177 > 1);
              }
              goto LABEL_1115;
            }
            if ((v1025 & 0xFFFFFFFD) != 1)
            {
              switch(v1025)
              {
                case 2:
                  unint64_t v618 = v1027;
                  if (v1027 - (unsigned char *)v1026 == 4)
                  {
                    uint64_t v791 = *((int *)v1027 - 1);
                    size_t v792 = *((void *)v1029 - 1);
                    v1027 -= 4;
                    v1029 -= 8;
                    if ((*a2)[6])
                    {
                      LODWORD(v793) = 0;
                      uint64_t v794 = (*a2)[19];
                      uint64_t v795 = *(void *)(*(void *)a1 + 152);
                      do
                      {
                        if (v792) {
                          bzero(v794, v792);
                        }
                        if ((int)v791 >= 1)
                        {
                          int v796 = 0;
                          uint64_t v797 = v795;
                          do
                          {
                            if (v792)
                            {
                              for (uint64_t i1 = 0; i1 != v792; ++i1)
                                *((unsigned char *)v794 + i1) += *(unsigned char *)(v797 + i1);
                              v797 += i1;
                            }
                            ++v796;
                          }
                          while (v796 != v791);
                        }
                        v795 += v792 * v791;
                        uint64_t v794 = (int *)((char *)v794 + v792);
                        unint64_t v793 = (int)v793 + (int)v792;
                      }
                      while (v793 < (unint64_t)(*a2)[6]);
                    }
                    goto LABEL_1115;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v809 = (*a2)[19];
                  uint64_t v72 = v1033;
                  int v73 = v1035;
                  if ((*a2)[6])
                  {
                    unint64_t v810 = 0;
                    uint64_t v811 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                    do
                    {
                      uint64_t v812 = 0;
                      if ((v811 & 0x80000000) == 0)
                      {
                        uint64_t v813 = v811;
                        int v814 = v810;
                        do
                        {
                          ldiv_t v815 = ldiv(v814, v72[v813]);
                          int v814 = v815.quot;
                          v812 += v73[v813--] * v815.rem;
                        }
                        while (v813 != -1);
                      }
                      LODWORD(v1020) = v812;
                      LOBYTE(v1019) = 0;
                      char v1032 = 0;
                      float v816 = operator new(0x28uLL);
                      *float v816 = &unk_27062BE78;
                      v816[1] = &__b;
                      v816[2] = &v1019;
                      v816[3] = &__len;
                      v816[4] = &v1020;
                      char v1032 = v816;
                      uint64_t v1040 = 0;
                      float v817 = operator new(0x28uLL);
                      *float v817 = &unk_27062B578;
                      v817[1] = &v1026;
                      v817[2] = &v1028;
                      v817[3] = v1039;
                      v817[4] = v1031;
                      char v1035 = v817;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                      *(unsigned char *)uint64_t v809 = v1019;
                      uint64_t v809 = (int *)((char *)v809 + 1);
                      ++v810;
                    }
                    while ((unint64_t)(*a2)[6] > v810);
                  }
                  goto LABEL_1111;
                case 4:
                  unint64_t v618 = v1027;
                  break;
                default:
                  goto LABEL_1115;
              }
              int v1019 = *((_DWORD *)v618 - 1);
              size_t v799 = *((void *)v1029 - 1);
              int v1027 = v618 - 4;
              v1029 -= 8;
              int v1020 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v799;
              __b = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              int v800 = (*a2)[6];
              if (v1027 == v1026)
              {
                if (v800)
                {
                  int v943 = 0;
                  uint64_t v944 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                  do
                  {
                    uint64_t v945 = 0;
                    if ((v944 & 0x80000000) != 0)
                    {
                      char v948 = a2;
                    }
                    else
                    {
                      uint64_t v946 = v944;
                      int v947 = v943;
                      char v948 = a2;
                      do
                      {
                        ldiv_t v949 = ldiv(v947, v72[v946]);
                        int v947 = v949.quot;
                        v945 += v73[v946--] * v949.rem;
                      }
                      while (v946 != -1);
                    }
                    int v950 = __b;
                    if (__len)
                    {
                      bzero(__b, __len);
                      size_t v951 = __len;
                      int v950 = __b;
                    }
                    else
                    {
                      size_t v951 = 0;
                    }
                    int v952 = v1019;
                    if (v1019 >= 1)
                    {
                      int v953 = 0;
                      BOOL v954 = (char *)v1020 + (int)v945;
                      do
                      {
                        size_t v955 = v951;
                        for (int i2 = v950; v955; --v955)
                        {
                          char v957 = *v954++;
                          *i2++ += v957;
                        }
                        ++v953;
                      }
                      while (v953 != v952);
                      size_t v951 = __len;
                      int v950 = __b;
                    }
                    __b = &v950[v951];
                    v943 += v951;
                  }
                  while ((unint64_t)(*v948)[6] > v943);
                }
              }
              else if (v800)
              {
                int v801 = 0;
                uint64_t v802 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v803 = 0;
                  if ((v802 & 0x80000000) == 0)
                  {
                    uint64_t v804 = v802;
                    int v805 = v801;
                    do
                    {
                      ldiv_t v806 = ldiv(v805, v72[v804]);
                      int v805 = v806.quot;
                      v803 += v73[v804--] * v806.rem;
                    }
                    while (v804 != -1);
                  }
                  int v1017 = v803;
                  if (__len) {
                    bzero(__b, __len);
                  }
                  char v1032 = 0;
                  unint64_t v807 = operator new(0x38uLL);
                  *unint64_t v807 = &unk_27062BDF8;
                  v807[1] = &v1030;
                  v807[2] = &v1020;
                  v807[3] = &v1017;
                  v807[4] = &__b;
                  v807[5] = &v1019;
                  v807[6] = &__len;
                  char v1032 = v807;
                  uint64_t v1040 = 0;
                  int v808 = operator new(0x28uLL);
                  *int v808 = &unk_27062B578;
                  v808[1] = &v1026;
                  v808[2] = &v1028;
                  v808[3] = v1039;
                  v808[4] = v1031;
                  char v1035 = v808;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  __b = (char *)__b + __len;
                  v801 += __len;
                }
                while ((unint64_t)(*a2)[6] > v801);
              }
              goto LABEL_1111;
            }
            int v380 = v1027;
          }
          LODWORD(__b) = *((_DWORD *)v380 - 1);
          int v1027 = v380 - 4;
          v1029 -= 8;
          size_t v389 = *(void *)(*(void *)a1 + 152);
          int v1020 = (*a2)[19];
          __leuint64_t n = v389;
          uint64_t v72 = v1033;
          int v73 = v1035;
          uint64_t v390 = (*a2)[6];
          if (v1027 == v1026)
          {
            if (v390)
            {
              unint64_t v658 = 0;
              uint64_t v659 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v660 = 0;
                if ((v659 & 0x80000000) == 0)
                {
                  uint64_t v661 = v659;
                  int v662 = v658;
                  do
                  {
                    ldiv_t v663 = ldiv(v662, v72[v661]);
                    int v662 = v663.quot;
                    v660 += v73[v661--] * v663.rem;
                  }
                  while (v661 != -1);
                }
                *(unsigned char *)int v1020 = 0;
                uint64_t v664 = v1020;
                if ((int)__b >= 1)
                {
                  uint64_t v665 = (unsigned __int8 *)(__len + (int)v660);
                  int v666 = *(unsigned __int8 *)v1020;
                  unsigned int v667 = __b + 1;
                  do
                  {
                    int v668 = *v665++;
                    v666 += v668;
                    *(unsigned char *)uint64_t v664 = v666;
                    --v667;
                  }
                  while (v667 > 1);
                  uint64_t v664 = v1020;
                }
                ++v658;
                int v1020 = (int *)((char *)v664 + 1);
              }
              while ((unint64_t)(*a2)[6] > v658);
            }
          }
          else if (v390)
          {
            unint64_t v391 = 0;
            uint64_t v392 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v393 = 0;
              if ((v392 & 0x80000000) == 0)
              {
                uint64_t v394 = v392;
                int v395 = v391;
                do
                {
                  ldiv_t v396 = ldiv(v395, v72[v394]);
                  int v395 = v396.quot;
                  v393 += v73[v394--] * v396.rem;
                }
                while (v394 != -1);
              }
              int v1019 = v393;
              *(unsigned char *)int v1020 = 0;
              char v1032 = 0;
              uint64_t v397 = operator new(0x30uLL);
              *uint64_t v397 = &unk_27062BD78;
              v397[1] = &v1017;
              v397[2] = &__len;
              v397[3] = &v1019;
              v397[4] = &v1020;
              v397[5] = &__b;
              char v1032 = v397;
              uint64_t v1040 = 0;
              char v398 = operator new(0x28uLL);
              *char v398 = &unk_27062B578;
              v398[1] = &v1026;
              v398[2] = &v1028;
              v398[3] = v1039;
              v398[4] = v1031;
              char v1035 = v398;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              ++v391;
              int v1020 = (int *)((char *)v1020 + 1);
            }
            while ((unint64_t)(*a2)[6] > v391);
          }
          goto LABEL_1111;
        case 4:
          BOOL v179 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v179, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            uint64_t v399 = v1027;
            if (v1027 - (unsigned char *)v1026 == 4)
            {
              int v400 = (*a2)[6];
              if (v400)
              {
                unint64_t v401 = 0;
                uint64_t v402 = *(int *)v1026;
                int v403 = (*a2)[19];
                uint64_t v404 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  int *v403 = 0;
                  if ((int)v402 >= 1)
                  {
                    int v405 = 0;
                    unsigned int v406 = v402 + 1;
                    float v407 = v404;
                    do
                    {
                      int v408 = *v407++;
                      v405 += v408;
                      --v406;
                    }
                    while (v406 > 1);
                    int *v403 = v405;
                  }
                  unint64_t v401 = (int *)((char *)v401 + 1);
                  ++v403;
                  v404 += v402;
                }
                while (v401 != v400);
              }
              goto LABEL_1115;
            }
          }
          else
          {
            if (!v1025)
            {
              int v166 = (*a2)[19];
              *int v166 = 0;
              int v180 = *(_DWORD *)(*(void *)a1 + 48);
              if (v180 < 1) {
                goto LABEL_1115;
              }
              int v168 = 0;
              char v181 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v182 = v180 + 1;
              do
              {
                int v183 = *v181++;
                v168 += v183;
                --v182;
              }
              while (v182 > 1);
              goto LABEL_192;
            }
            if ((v1025 & 0xFFFFFFFD) != 1)
            {
              switch(v1025)
              {
                case 2:
                  int v619 = v1027;
                  if (v1027 - (unsigned char *)v1026 == 4)
                  {
                    uint64_t v818 = *((int *)v1027 - 1);
                    uint64_t v819 = *((void *)v1029 - 1);
                    v1027 -= 4;
                    v1029 -= 8;
                    int v820 = (*a2)[6];
                    if (v820)
                    {
                      LODWORD(v821) = 0;
                      unint64_t v822 = (*a2)[19];
                      uint64_t v823 = *(void *)(*(void *)a1 + 152);
                      do
                      {
                        if (v819) {
                          bzero(v822, 4 * v819);
                        }
                        if ((int)v818 >= 1)
                        {
                          int v824 = 0;
                          uint64_t v825 = v823;
                          do
                          {
                            if (v819)
                            {
                              for (uint64_t i3 = 0; i3 != v819; ++i3)
                                v822[i3] += *(unsigned __int8 *)(v825 + i3);
                              v825 += i3;
                            }
                            ++v824;
                          }
                          while (v824 != v818);
                        }
                        v823 += v819 * v818;
                        v822 += v819;
                        unint64_t v821 = (int)v821 + (int)v819;
                      }
                      while (v821 < (unint64_t)v820);
                    }
                    goto LABEL_1115;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  unint64_t v837 = (*a2)[19];
                  uint64_t v72 = v1033;
                  int v73 = v1035;
                  if ((*a2)[6])
                  {
                    unint64_t v838 = 0;
                    uint64_t v839 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                    do
                    {
                      uint64_t v840 = 0;
                      if ((v839 & 0x80000000) == 0)
                      {
                        uint64_t v841 = v839;
                        int v842 = v838;
                        do
                        {
                          ldiv_t v843 = ldiv(v842, v72[v841]);
                          int v842 = v843.quot;
                          v840 += v73[v841--] * v843.rem;
                        }
                        while (v841 != -1);
                      }
                      LODWORD(v1020) = v840;
                      LODWORD(__b) = 0;
                      char v1032 = 0;
                      int v844 = operator new(0x28uLL);
                      *int v844 = &unk_27062BFF8;
                      v844[1] = &v1019;
                      v844[2] = &__b;
                      v844[3] = &__len;
                      v844[4] = &v1020;
                      char v1032 = v844;
                      uint64_t v1040 = 0;
                      char v845 = operator new(0x28uLL);
                      *char v845 = &unk_27062B578;
                      v845[1] = &v1026;
                      v845[2] = &v1028;
                      v845[3] = v1039;
                      v845[4] = v1031;
                      char v1035 = v845;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                      *v837++ = (int)__b;
                      ++v838;
                    }
                    while ((unint64_t)(*a2)[6] > v838);
                  }
                  goto LABEL_1111;
                case 4:
                  int v619 = v1027;
                  break;
                default:
                  goto LABEL_1115;
              }
              int v1019 = *((_DWORD *)v619 - 1);
              size_t v827 = *((void *)v1029 - 1);
              int v1027 = v619 - 4;
              v1029 -= 8;
              int v1020 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v827;
              __b = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              unint64_t v828 = (unint64_t)(*a2)[6];
              if (v1027 == v1026)
              {
                if (v828)
                {
                  int v958 = 0;
                  int v959 = (char *)__b;
                  uint64_t v960 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                  size_t v961 = __len;
                  int v1014 = v1020;
                  size_t v962 = 4 * __len;
                  do
                  {
                    uint64_t v963 = 0;
                    if ((v960 & 0x80000000) == 0)
                    {
                      uint64_t v964 = v960;
                      int v965 = v958;
                      do
                      {
                        ldiv_t v966 = ldiv(v965, v72[v964]);
                        int v965 = v966.quot;
                        v963 += v73[v964--] * v966.rem;
                      }
                      while (v964 != -1);
                    }
                    if (v961) {
                      bzero(v959, v962);
                    }
                    int v967 = v1019;
                    if (v1019 >= 1)
                    {
                      int v968 = 0;
                      int v969 = (char *)v1014 + (int)v963;
                      do
                      {
                        if (v961)
                        {
                          for (uint64_t i4 = 0; i4 != v961; ++i4)
                            *(_DWORD *)&v959[4 * i4] += v969[i4];
                          v969 += i4;
                        }
                        ++v968;
                      }
                      while (v968 != v967);
                    }
                    v959 += v962;
                    v958 += v961;
                  }
                  while (v828 > v958);
                }
              }
              else if (v828)
              {
                int v829 = 0;
                uint64_t v830 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v831 = 0;
                  if ((v830 & 0x80000000) == 0)
                  {
                    uint64_t v832 = v830;
                    int v833 = v829;
                    do
                    {
                      ldiv_t v834 = ldiv(v833, v72[v832]);
                      int v833 = v834.quot;
                      v831 += v73[v832--] * v834.rem;
                    }
                    while (v832 != -1);
                  }
                  int v1017 = v831;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  char v1032 = 0;
                  int v835 = operator new(0x38uLL);
                  *int v835 = &unk_27062BF78;
                  v835[1] = &v1030;
                  v835[2] = &v1020;
                  v835[3] = &v1017;
                  v835[4] = &__b;
                  v835[5] = &v1019;
                  v835[6] = &__len;
                  char v1032 = v835;
                  uint64_t v1040 = 0;
                  uint64_t v836 = operator new(0x28uLL);
                  *uint64_t v836 = &unk_27062B578;
                  v836[1] = &v1026;
                  v836[2] = &v1028;
                  v836[3] = v1039;
                  v836[4] = v1031;
                  char v1035 = v836;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  __b = (char *)__b + 4 * __len;
                  v829 += __len;
                }
                while ((unint64_t)(*a2)[6] > v829);
              }
              goto LABEL_1111;
            }
            uint64_t v399 = v1027;
          }
          LODWORD(__b) = *((_DWORD *)v399 - 1);
          int v1027 = v399 - 4;
          v1029 -= 8;
          size_t v409 = *(void *)(*(void *)a1 + 152);
          int v1020 = (*a2)[19];
          __leuint64_t n = v409;
          uint64_t v72 = v1033;
          int v73 = v1035;
          int v410 = (*a2)[6];
          if (v1027 == v1026)
          {
            if (v410)
            {
              int v669 = 0;
              int v670 = v1020;
              size_t v671 = __len;
              uint64_t v672 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              do
              {
                uint64_t v673 = 0;
                if ((v672 & 0x80000000) == 0)
                {
                  uint64_t v674 = v672;
                  int v675 = (int)v669;
                  do
                  {
                    ldiv_t v676 = ldiv(v675, v72[v674]);
                    int v675 = v676.quot;
                    v673 += v73[v674--] * v676.rem;
                  }
                  while (v674 != -1);
                }
                *int v670 = 0;
                if ((int)__b >= 1)
                {
                  int v677 = 0;
                  uint64_t v678 = (unsigned __int8 *)(v671 + (int)v673);
                  unsigned int v679 = __b + 1;
                  do
                  {
                    int v680 = *v678++;
                    v677 += v680;
                    --v679;
                  }
                  while (v679 > 1);
                  *int v670 = v677;
                }
                int v669 = (int *)((char *)v669 + 1);
                ++v670;
              }
              while (v669 != v410);
            }
          }
          else if (v410)
          {
            unint64_t v411 = 0;
            uint64_t v412 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v413 = 0;
              if ((v412 & 0x80000000) == 0)
              {
                uint64_t v414 = v412;
                int v415 = v411;
                do
                {
                  ldiv_t v416 = ldiv(v415, v72[v414]);
                  int v415 = v416.quot;
                  v413 += v73[v414--] * v416.rem;
                }
                while (v414 != -1);
              }
              int v1019 = v413;
              *int v1020 = 0;
              char v1032 = 0;
              int v417 = operator new(0x30uLL);
              *int v417 = &unk_27062BEF8;
              v417[1] = &v1017;
              v417[2] = &__len;
              v417[3] = &v1019;
              v417[4] = &v1020;
              v417[5] = &__b;
              char v1032 = v417;
              uint64_t v1040 = 0;
              uint64_t v418 = operator new(0x28uLL);
              *uint64_t v418 = &unk_27062B578;
              v418[1] = &v1026;
              v418[2] = &v1028;
              v418[3] = v1039;
              v418[4] = v1031;
              char v1035 = v418;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              ++v411;
              ++v1020;
            }
            while ((unint64_t)(*a2)[6] > v411);
          }
          goto LABEL_1111;
        case 5:
          int v184 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v184, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            uint64_t v419 = v1027;
            if (v1027 - (unsigned char *)v1026 == 4)
            {
              uint64_t v420 = (*a2)[6];
              if (v420)
              {
                uint64_t v421 = 0;
                uint64_t v422 = *(int *)v1026;
                uint64_t v423 = (*a2)[19];
                uint64_t v424 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(void *)uint64_t v423 = 0;
                  if ((int)v422 >= 1)
                  {
                    uint64_t v425 = 0;
                    unsigned int v426 = v422 + 1;
                    uint64_t v427 = v424;
                    do
                    {
                      unsigned int v428 = *v427++;
                      v425 += v428;
                      --v426;
                    }
                    while (v426 > 1);
                    *(void *)uint64_t v423 = v425;
                  }
                  uint64_t v421 = (int *)((char *)v421 + 1);
                  v423 += 2;
                  v424 += v422;
                }
                while (v421 != v420);
              }
              goto LABEL_1115;
            }
          }
          else
          {
            if (!v1025)
            {
              int v185 = (*a2)[19];
              *(void *)int v185 = 0;
              int v186 = *(_DWORD *)(*(void *)a1 + 48);
              if (v186 >= 1)
              {
                uint64_t v187 = 0;
                int v188 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v189 = v186 + 1;
                do
                {
                  unsigned int v190 = *v188++;
                  v187 += v190;
                  --v189;
                }
                while (v189 > 1);
                *(void *)int v185 = v187;
              }
              goto LABEL_1115;
            }
            if ((v1025 & 0xFFFFFFFD) != 1)
            {
              switch(v1025)
              {
                case 2:
                  int v620 = v1027;
                  if (v1027 - (unsigned char *)v1026 == 4)
                  {
                    uint64_t v855 = *((int *)v1027 - 1);
                    uint64_t v856 = *((void *)v1029 - 1);
                    v1027 -= 4;
                    v1029 -= 8;
                    int v857 = (*a2)[6];
                    if (v857)
                    {
                      LODWORD(v858) = 0;
                      unsigned int v859 = (*a2)[19];
                      uint64_t v860 = *(void *)(*(void *)a1 + 152);
                      do
                      {
                        if (v856) {
                          bzero(v859, 8 * v856);
                        }
                        if ((int)v855 >= 1)
                        {
                          int v861 = 0;
                          uint64_t v862 = v860;
                          do
                          {
                            if (v856)
                            {
                              for (uint64_t i5 = 0; i5 != v856; ++i5)
                                *(void *)&v859[2 * i5] += *(unsigned __int8 *)(v862 + i5);
                              v862 += i5;
                            }
                            ++v861;
                          }
                          while (v861 != v855);
                        }
                        v860 += v856 * v855;
                        v859 += 2 * v856;
                        unint64_t v858 = (int)v858 + (int)v856;
                      }
                      while (v858 < (unint64_t)v857);
                    }
                    goto LABEL_1115;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  unint64_t v846 = (*a2)[19];
                  uint64_t v72 = v1033;
                  int v73 = v1035;
                  if ((*a2)[6])
                  {
                    unint64_t v847 = 0;
                    uint64_t v848 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                    do
                    {
                      uint64_t v849 = 0;
                      if ((v848 & 0x80000000) == 0)
                      {
                        uint64_t v850 = v848;
                        int v851 = v847;
                        do
                        {
                          ldiv_t v852 = ldiv(v851, v72[v850]);
                          int v851 = v852.quot;
                          v849 += v73[v850--] * v852.rem;
                        }
                        while (v850 != -1);
                      }
                      LODWORD(__b) = v849;
                      int v1020 = 0;
                      char v1032 = 0;
                      uint64_t v853 = operator new(0x28uLL);
                      *uint64_t v853 = &unk_27062C178;
                      v853[1] = &v1019;
                      v853[2] = &v1020;
                      v853[3] = &__len;
                      v853[4] = &__b;
                      char v1032 = v853;
                      uint64_t v1040 = 0;
                      uint64_t v854 = operator new(0x28uLL);
                      *uint64_t v854 = &unk_27062B578;
                      v854[1] = &v1026;
                      v854[2] = &v1028;
                      v854[3] = v1039;
                      v854[4] = v1031;
                      char v1035 = v854;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                      *(void *)unint64_t v846 = v1020;
                      v846 += 2;
                      ++v847;
                    }
                    while ((unint64_t)(*a2)[6] > v847);
                  }
                  goto LABEL_1111;
                case 4:
                  int v620 = v1027;
                  break;
                default:
                  goto LABEL_1115;
              }
              int v1019 = *((_DWORD *)v620 - 1);
              size_t v864 = *((void *)v1029 - 1);
              int v1027 = v620 - 4;
              v1029 -= 8;
              int v1020 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v864;
              __b = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              unint64_t v865 = (unint64_t)(*a2)[6];
              if (v1027 == v1026)
              {
                if (v865)
                {
                  int v971 = 0;
                  float v972 = (char *)__b;
                  uint64_t v973 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                  size_t v974 = __len;
                  int v996 = v1020;
                  uint64_t v1015 = v973;
                  int v975 = v1019;
                  size_t v976 = 8 * __len;
                  do
                  {
                    uint64_t v977 = 0;
                    if ((v973 & 0x80000000) == 0)
                    {
                      int v978 = v971;
                      do
                      {
                        ldiv_t v979 = ldiv(v978, v72[v973]);
                        int v978 = v979.quot;
                        v977 += v73[v973--] * v979.rem;
                      }
                      while (v973 != -1);
                    }
                    if (v974) {
                      bzero(v972, v976);
                    }
                    uint64_t v973 = v1015;
                    if (v975 >= 1)
                    {
                      int v980 = 0;
                      int v981 = (char *)v996 + (int)v977;
                      do
                      {
                        if (v974)
                        {
                          for (uint64_t i6 = 0; i6 != v974; ++i6)
                            *(void *)&v972[8 * i6] += v981[i6];
                          v981 += i6;
                        }
                        ++v980;
                      }
                      while (v980 != v975);
                    }
                    v972 += v976;
                    v971 += v974;
                  }
                  while (v865 > v971);
                }
              }
              else if (v865)
              {
                int v866 = 0;
                uint64_t v867 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v868 = 0;
                  if ((v867 & 0x80000000) == 0)
                  {
                    uint64_t v869 = v867;
                    int v870 = v866;
                    do
                    {
                      ldiv_t v871 = ldiv(v870, v72[v869]);
                      int v870 = v871.quot;
                      v868 += v73[v869--] * v871.rem;
                    }
                    while (v869 != -1);
                  }
                  int v1017 = v868;
                  if (__len) {
                    bzero(__b, 8 * __len);
                  }
                  char v1032 = 0;
                  char v872 = operator new(0x38uLL);
                  *char v872 = &unk_27062C0F8;
                  v872[1] = &v1030;
                  v872[2] = &v1020;
                  v872[3] = &v1017;
                  v872[4] = &__b;
                  v872[5] = &v1019;
                  v872[6] = &__len;
                  char v1032 = v872;
                  uint64_t v1040 = 0;
                  int v873 = operator new(0x28uLL);
                  *int v873 = &unk_27062B578;
                  v873[1] = &v1026;
                  v873[2] = &v1028;
                  v873[3] = v1039;
                  v873[4] = v1031;
                  char v1035 = v873;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  __b = (char *)__b + 8 * __len;
                  v866 += __len;
                }
                while ((unint64_t)(*a2)[6] > v866);
              }
              goto LABEL_1111;
            }
            uint64_t v419 = v1027;
          }
          LODWORD(__b) = *((_DWORD *)v419 - 1);
          int v1027 = v419 - 4;
          v1029 -= 8;
          size_t v529 = *(void *)(*(void *)a1 + 152);
          int v1020 = (*a2)[19];
          __leuint64_t n = v529;
          uint64_t v72 = v1033;
          int v73 = v1035;
          uint64_t v530 = (*a2)[6];
          if (v1027 == v1026)
          {
            if (v530)
            {
              uint64_t v681 = 0;
              uint64_t v682 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              uint64_t v683 = v1020;
              size_t v1010 = __len;
              int v684 = (int)__b;
              int v685 = __b + 1;
              do
              {
                uint64_t v686 = 0;
                if ((v682 & 0x80000000) == 0)
                {
                  uint64_t v687 = v682;
                  int v688 = (int)v681;
                  do
                  {
                    ldiv_t v689 = ldiv(v688, v72[v687]);
                    int v688 = v689.quot;
                    v686 += v73[v687--] * v689.rem;
                  }
                  while (v687 != -1);
                }
                *(void *)uint64_t v683 = 0;
                if (v684 >= 1)
                {
                  uint64_t v690 = 0;
                  unint64_t v691 = (unsigned __int8 *)(v1010 + (int)v686);
                  unsigned int v692 = v685;
                  do
                  {
                    unsigned int v693 = *v691++;
                    v690 += v693;
                    --v692;
                  }
                  while (v692 > 1);
                  *(void *)uint64_t v683 = v690;
                }
                uint64_t v681 = (int *)((char *)v681 + 1);
                v683 += 2;
              }
              while (v681 != v530);
            }
          }
          else if (v530)
          {
            unint64_t v531 = 0;
            uint64_t v532 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v533 = 0;
              if ((v532 & 0x80000000) == 0)
              {
                uint64_t v534 = v532;
                int v535 = v531;
                do
                {
                  ldiv_t v536 = ldiv(v535, v72[v534]);
                  int v535 = v536.quot;
                  v533 += v73[v534--] * v536.rem;
                }
                while (v534 != -1);
              }
              int v1019 = v533;
              *(void *)int v1020 = 0;
              char v1032 = 0;
              int v537 = operator new(0x30uLL);
              *int v537 = &unk_27062C078;
              v537[1] = &v1017;
              v537[2] = &__len;
              v537[3] = &v1019;
              v537[4] = &v1020;
              v537[5] = &__b;
              char v1032 = v537;
              uint64_t v1040 = 0;
              int v538 = operator new(0x28uLL);
              *int v538 = &unk_27062B578;
              v538[1] = &v1026;
              v538[2] = &v1028;
              v538[3] = v1039;
              v538[4] = v1031;
              char v1035 = v538;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              ++v531;
              v1020 += 2;
            }
            while ((unint64_t)(*a2)[6] > v531);
          }
          goto LABEL_1111;
        case 6:
          int v191 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v21[6] * BYTE4(v22)));
          int v1036 = &unk_27062AEC8;
          char v1037 = mlx::core::allocator::free;
          int v1038 = &v1036;
          mlx::core::array::set_data(a2, (uint64_t)v191, (uint64_t)&v1036);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
          unsigned int v1023 = 0;
          uint64_t v1024 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            unsigned int v1023 = __p;
            operator delete(__p);
          }
          if (v1025 == 1)
          {
            unint64_t v429 = v1027;
            if (v1027 - (unsigned char *)v1026 == 4)
            {
              unint64_t v430 = (*a2)[6];
              if (v430)
              {
                unint64_t v431 = 0;
                uint64_t v432 = *(int *)v1026;
                int v433 = (float *)(*a2)[19];
                uint64_t v434 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *int v433 = 0.0;
                  if ((int)v432 >= 1)
                  {
                    float v435 = 0.0;
                    unsigned int v436 = v432 + 1;
                    float v437 = v434;
                    do
                    {
                      if (*v437++) {
                        float v439 = 1.0;
                      }
                      else {
                        float v439 = 0.0;
                      }
                      float v435 = v435 + v439;
                      --v436;
                    }
                    while (v436 > 1);
                    *int v433 = v435;
                  }
                  unint64_t v431 = (int *)((char *)v431 + 1);
                  ++v433;
                  v434 += v432;
                }
                while (v431 != v430);
              }
              goto LABEL_1115;
            }
          }
          else
          {
            if (!v1025)
            {
              unint64_t v192 = (float *)(*a2)[19];
              *unint64_t v192 = 0.0;
              int v193 = *(_DWORD *)(*(void *)a1 + 48);
              if (v193 >= 1)
              {
                int v194 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v195 = v193 + 1;
                float v196 = 0.0;
                do
                {
                  if (*v194++) {
                    float v198 = 1.0;
                  }
                  else {
                    float v198 = 0.0;
                  }
                  float v196 = v196 + v198;
                  --v195;
                }
                while (v195 > 1);
                *unint64_t v192 = v196;
              }
              goto LABEL_1115;
            }
            if ((v1025 & 0xFFFFFFFD) != 1)
            {
              switch(v1025)
              {
                case 2:
                  uint64_t v621 = v1027;
                  if (v1027 - (unsigned char *)v1026 == 4)
                  {
                    uint64_t v874 = *((int *)v1027 - 1);
                    uint64_t v875 = *((void *)v1029 - 1);
                    v1027 -= 4;
                    v1029 -= 8;
                    int v876 = (*a2)[6];
                    if (v876)
                    {
                      LODWORD(v877) = 0;
                      BOOL v878 = (*a2)[19];
                      uint64_t v879 = *(void *)(*(void *)a1 + 152);
                      do
                      {
                        if (v875) {
                          bzero(v878, 4 * v875);
                        }
                        if ((int)v874 >= 1)
                        {
                          int v880 = 0;
                          uint64_t v881 = v879;
                          do
                          {
                            if (v875)
                            {
                              for (uint64_t i7 = 0; i7 != v875; ++i7)
                              {
                                if (*(unsigned char *)(v881 + i7)) {
                                  float v883 = 1.0;
                                }
                                else {
                                  float v883 = 0.0;
                                }
                                *(float *)&v878[i7] = *(float *)&v878[i7] + v883;
                              }
                              v881 += i7;
                            }
                            ++v880;
                          }
                          while (v880 != v874);
                        }
                        v879 += v875 * v874;
                        v878 += v875;
                        unint64_t v877 = (int)v877 + (int)v875;
                      }
                      while (v877 < (unint64_t)v876);
                    }
                    goto LABEL_1115;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  int v894 = (*a2)[19];
                  uint64_t v72 = v1033;
                  int v73 = v1035;
                  if ((*a2)[6])
                  {
                    unint64_t v895 = 0;
                    uint64_t v896 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                    do
                    {
                      uint64_t v897 = 0;
                      if ((v896 & 0x80000000) == 0)
                      {
                        uint64_t v898 = v896;
                        int v899 = v895;
                        do
                        {
                          ldiv_t v900 = ldiv(v899, v72[v898]);
                          int v899 = v900.quot;
                          v897 += v73[v898--] * v900.rem;
                        }
                        while (v898 != -1);
                      }
                      LODWORD(v1020) = v897;
                      LODWORD(__b) = 0;
                      char v1032 = 0;
                      int v901 = operator new(0x28uLL);
                      *int v901 = &unk_27062C2F8;
                      v901[1] = &v1019;
                      v901[2] = &__b;
                      v901[3] = &__len;
                      v901[4] = &v1020;
                      char v1032 = v901;
                      uint64_t v1040 = 0;
                      int v902 = operator new(0x28uLL);
                      *int v902 = &unk_27062B578;
                      v902[1] = &v1026;
                      v902[2] = &v1028;
                      v902[3] = v1039;
                      v902[4] = v1031;
                      char v1035 = v902;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                      *v894++ = (int)__b;
                      ++v895;
                    }
                    while ((unint64_t)(*a2)[6] > v895);
                  }
                  goto LABEL_1111;
                case 4:
                  uint64_t v621 = v1027;
                  break;
                default:
                  goto LABEL_1115;
              }
              int v1019 = *((_DWORD *)v621 - 1);
              size_t v884 = *((void *)v1029 - 1);
              int v1027 = v621 - 4;
              v1029 -= 8;
              int v1020 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v884;
              __b = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              unint64_t v885 = (unint64_t)(*a2)[6];
              if (v1027 == v1026)
              {
                if (v885)
                {
                  int v983 = 0;
                  float v984 = (char *)__b;
                  uint64_t v985 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                  size_t v986 = __len;
                  int v997 = v1020;
                  uint64_t v1016 = v985;
                  int v987 = v1019;
                  size_t v988 = 4 * __len;
                  do
                  {
                    uint64_t v989 = 0;
                    if ((v985 & 0x80000000) == 0)
                    {
                      int v990 = v983;
                      do
                      {
                        ldiv_t v991 = ldiv(v990, v72[v985]);
                        int v990 = v991.quot;
                        v989 += v73[v985--] * v991.rem;
                      }
                      while (v985 != -1);
                    }
                    if (v986) {
                      bzero(v984, v988);
                    }
                    uint64_t v985 = v1016;
                    if (v987 >= 1)
                    {
                      int v992 = 0;
                      int v993 = (char *)v997 + (int)v989;
                      do
                      {
                        if (v986)
                        {
                          for (uint64_t i8 = 0; i8 != v986; ++i8)
                          {
                            if (v993[i8]) {
                              float v995 = 1.0;
                            }
                            else {
                              float v995 = 0.0;
                            }
                            *(float *)&v984[4 * i8] = *(float *)&v984[4 * i8] + v995;
                          }
                          v993 += i8;
                        }
                        ++v992;
                      }
                      while (v992 != v987);
                    }
                    v984 += v988;
                    v983 += v986;
                  }
                  while (v885 > v983);
                }
              }
              else if (v885)
              {
                int v886 = 0;
                uint64_t v887 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v888 = 0;
                  if ((v887 & 0x80000000) == 0)
                  {
                    uint64_t v889 = v887;
                    int v890 = v886;
                    do
                    {
                      ldiv_t v891 = ldiv(v890, v72[v889]);
                      int v890 = v891.quot;
                      v888 += v73[v889--] * v891.rem;
                    }
                    while (v889 != -1);
                  }
                  int v1017 = v888;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  char v1032 = 0;
                  char v892 = operator new(0x38uLL);
                  *char v892 = &unk_27062C278;
                  v892[1] = &v1030;
                  v892[2] = &v1020;
                  v892[3] = &v1017;
                  v892[4] = &__b;
                  v892[5] = &v1019;
                  v892[6] = &__len;
                  char v1032 = v892;
                  uint64_t v1040 = 0;
                  int v893 = operator new(0x28uLL);
                  void *v893 = &unk_27062B578;
                  v893[1] = &v1026;
                  v893[2] = &v1028;
                  v893[3] = v1039;
                  v893[4] = v1031;
                  char v1035 = v893;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  __b = (char *)__b + 4 * __len;
                  v886 += __len;
                }
                while ((unint64_t)(*a2)[6] > v886);
              }
              goto LABEL_1111;
            }
            unint64_t v429 = v1027;
          }
          LODWORD(__b) = *((_DWORD *)v429 - 1);
          int v1027 = v429 - 4;
          v1029 -= 8;
          size_t v539 = *(void *)(*(void *)a1 + 152);
          int v1020 = (*a2)[19];
          __leuint64_t n = v539;
          uint64_t v72 = v1033;
          int v73 = v1035;
          unint64_t v540 = (*a2)[6];
          if (v1027 == v1026)
          {
            if (v540)
            {
              uint64_t v694 = 0;
              uint64_t v695 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              int v696 = (float *)v1020;
              size_t v1011 = __len;
              int v697 = (int)__b;
              int v698 = __b + 1;
              do
              {
                uint64_t v699 = 0;
                if ((v695 & 0x80000000) == 0)
                {
                  uint64_t v700 = v695;
                  int v701 = (int)v694;
                  do
                  {
                    ldiv_t v702 = ldiv(v701, v72[v700]);
                    int v701 = v702.quot;
                    v699 += v73[v700--] * v702.rem;
                  }
                  while (v700 != -1);
                }
                *int v696 = 0.0;
                if (v697 >= 1)
                {
                  int v703 = (unsigned __int8 *)(v1011 + (int)v699);
                  float v704 = 0.0;
                  unsigned int v705 = v698;
                  do
                  {
                    if (*v703++) {
                      float v707 = 1.0;
                    }
                    else {
                      float v707 = 0.0;
                    }
                    float v704 = v704 + v707;
                    --v705;
                  }
                  while (v705 > 1);
                  *int v696 = v704;
                }
                uint64_t v694 = (int *)((char *)v694 + 1);
                ++v696;
              }
              while (v694 != v540);
            }
          }
          else if (v540)
          {
            unint64_t v541 = 0;
            uint64_t v542 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v543 = 0;
              if ((v542 & 0x80000000) == 0)
              {
                uint64_t v544 = v542;
                int v545 = v541;
                do
                {
                  ldiv_t v546 = ldiv(v545, v72[v544]);
                  int v545 = v546.quot;
                  v543 += v73[v544--] * v546.rem;
                }
                while (v544 != -1);
              }
              int v1019 = v543;
              *int v1020 = 0;
              char v1032 = 0;
              uint64_t v547 = operator new(0x30uLL);
              void *v547 = &unk_27062C1F8;
              v547[1] = &v1017;
              v547[2] = &__len;
              v547[3] = &v1019;
              v547[4] = &v1020;
              v547[5] = &__b;
              char v1032 = v547;
              uint64_t v1040 = 0;
              unint64_t v548 = operator new(0x28uLL);
              *unint64_t v548 = &unk_27062B578;
              v548[1] = &v1026;
              v548[2] = &v1028;
              v548[3] = v1039;
              v548[4] = v1031;
              char v1035 = v548;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              ++v541;
              ++v1020;
            }
            while ((unint64_t)(*a2)[6] > v541);
          }
          goto LABEL_1111;
        default:
          return;
      }
    case 3:
      unint64_t v37 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1036 = &unk_27062AEC8;
      char v1037 = mlx::core::allocator::free;
      int v1038 = &v1036;
      mlx::core::array::set_data(a2, (uint64_t)v37, (uint64_t)&v1036);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
      unsigned int v1023 = 0;
      uint64_t v1024 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        unsigned int v1023 = __p;
        operator delete(__p);
      }
      if (v1025 == 1)
      {
        int v93 = v1027;
        if (v1027 - (unsigned char *)v1026 == 4)
        {
          unint64_t v94 = (*a2)[6];
          if (v94)
          {
            uint64_t v95 = 0;
            uint64_t v96 = *(int *)v1026;
            uint64_t v97 = (char *)(*a2)[19];
            unint64_t v98 = *(unsigned __int8 **)(*(void *)a1 + 152);
            do
            {
              *uint64_t v97 = 1;
              if ((int)v96 >= 1)
              {
                char v99 = 1;
                unsigned int v100 = v96 + 1;
                int v101 = v98;
                do
                {
                  int v102 = *v101++;
                  v99 &= v102 != 0;
                  *uint64_t v97 = v99;
                  --v100;
                }
                while (v100 > 1);
              }
              uint64_t v95 = (int *)((char *)v95 + 1);
              ++v97;
              v98 += v96;
            }
            while (v95 != v94);
          }
          goto LABEL_1115;
        }
      }
      else
      {
        if (!v1025)
        {
          uint64_t v38 = (char *)(*a2)[19];
          char *v38 = 1;
          int v39 = *(_DWORD *)(*(void *)a1 + 48);
          if (v39 >= 1)
          {
            int v40 = *(unsigned __int8 **)(*(void *)a1 + 152);
            unsigned int v41 = v39 + 1;
            char v42 = 1;
            do
            {
              int v43 = *v40++;
              v42 &= v43 != 0;
              char *v38 = v42;
              --v41;
            }
            while (v41 > 1);
          }
          goto LABEL_1115;
        }
        if ((v1025 & 0xFFFFFFFD) != 1)
        {
          switch(v1025)
          {
            case 2:
              unint64_t v156 = v1027;
              if (v1027 - (unsigned char *)v1026 == 4)
              {
                uint64_t v480 = *((int *)v1027 - 1);
                size_t v481 = *((void *)v1029 - 1);
                v1027 -= 4;
                v1029 -= 8;
                uint64_t v482 = (*a2)[6];
                if (v482)
                {
                  LODWORD(v483) = 0;
                  int v484 = (*a2)[19];
                  uint64_t v485 = *(void *)(*(void *)a1 + 152);
                  do
                  {
                    if (v481) {
                      memset(v484, 1, v481);
                    }
                    if ((int)v480 >= 1)
                    {
                      int v486 = 0;
                      uint64_t v487 = v485;
                      do
                      {
                        if (v481)
                        {
                          for (uint64_t i9 = 0; i9 != v481; ++i9)
                          {
                            if (*(unsigned char *)(v487 + i9)) {
                              BOOL v489 = *((unsigned char *)v484 + i9) == 0;
                            }
                            else {
                              BOOL v489 = 1;
                            }
                            char v490 = !v489;
                            *((unsigned char *)v484 + i9) = v490;
                          }
                          v487 += i9;
                        }
                        ++v486;
                      }
                      while (v486 != v480);
                    }
                    v485 += v481 * v480;
                    int v484 = (int *)((char *)v484 + v481);
                    unint64_t v483 = (int)v483 + (int)v481;
                  }
                  while (v483 < (unint64_t)v482);
                }
                goto LABEL_1115;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              int v332 = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              if ((*a2)[6])
              {
                unint64_t v333 = 0;
                uint64_t v334 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v335 = 0;
                  if ((v334 & 0x80000000) == 0)
                  {
                    uint64_t v336 = v334;
                    int v337 = v333;
                    do
                    {
                      ldiv_t v338 = ldiv(v337, v72[v336]);
                      int v337 = v338.quot;
                      v335 += v73[v336--] * v338.rem;
                    }
                    while (v336 != -1);
                  }
                  LODWORD(v1020) = v335;
                  LOBYTE(v1019) = 1;
                  char v1032 = 0;
                  uint64_t v339 = operator new(0x28uLL);
                  *uint64_t v339 = &unk_27062C478;
                  v339[1] = &__b;
                  v339[2] = &v1019;
                  v339[3] = &__len;
                  v339[4] = &v1020;
                  char v1032 = v339;
                  uint64_t v1040 = 0;
                  uint64_t v340 = operator new(0x28uLL);
                  *uint64_t v340 = &unk_27062B578;
                  v340[1] = &v1026;
                  v340[2] = &v1028;
                  v340[3] = v1039;
                  v340[4] = v1031;
                  char v1035 = v340;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  *(unsigned char *)int v332 = v1019;
                  int v332 = (int *)((char *)v332 + 1);
                  ++v333;
                }
                while ((unint64_t)(*a2)[6] > v333);
              }
              goto LABEL_1111;
            case 4:
              unint64_t v156 = v1027;
              break;
            default:
              goto LABEL_1115;
          }
          int v1019 = *((_DWORD *)v156 - 1);
          size_t v491 = *((void *)v1029 - 1);
          int v1027 = v156 - 4;
          v1029 -= 8;
          int v1020 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v491;
          __b = (*a2)[19];
          uint64_t v72 = v1033;
          int v73 = v1035;
          unint64_t v492 = (unint64_t)(*a2)[6];
          if (v1027 == v1026)
          {
            if (v492)
            {
              int v589 = 0;
              int v590 = (char *)__b;
              uint64_t v591 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              size_t v592 = __len;
              int v1007 = v1020;
              int v593 = v1019;
              do
              {
                uint64_t v594 = 0;
                if ((v591 & 0x80000000) == 0)
                {
                  uint64_t v595 = v591;
                  int v596 = v589;
                  do
                  {
                    ldiv_t v597 = ldiv(v596, v72[v595]);
                    int v596 = v597.quot;
                    v594 += v73[v595--] * v597.rem;
                  }
                  while (v595 != -1);
                }
                if (v592) {
                  memset(v590, 1, v592);
                }
                if (v593 >= 1)
                {
                  int v598 = 0;
                  uint64_t v599 = (char *)v1007 + (int)v594;
                  do
                  {
                    if (v592)
                    {
                      for (uint64_t i10 = 0; i10 != v592; ++i10)
                      {
                        if (v599[i10]) {
                          BOOL v601 = v590[i10] == 0;
                        }
                        else {
                          BOOL v601 = 1;
                        }
                        char v602 = !v601;
                        v590[i10] = v602;
                      }
                      v599 += i10;
                    }
                    ++v598;
                  }
                  while (v598 != v593);
                }
                v590 += v592;
                v589 += v592;
              }
              while (v492 > v589);
            }
          }
          else if (v492)
          {
            int v493 = 0;
            uint64_t v494 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v495 = 0;
              if ((v494 & 0x80000000) == 0)
              {
                uint64_t v496 = v494;
                int v497 = v493;
                do
                {
                  ldiv_t v498 = ldiv(v497, v72[v496]);
                  int v497 = v498.quot;
                  v495 += v73[v496--] * v498.rem;
                }
                while (v496 != -1);
              }
              int v1017 = v495;
              if (__len) {
                memset(__b, 1, __len);
              }
              char v1032 = 0;
              int v499 = operator new(0x38uLL);
              *int v499 = &unk_27062C3F8;
              v499[1] = &v1030;
              v499[2] = &v1020;
              v499[3] = &v1017;
              v499[4] = &__b;
              v499[5] = &v1019;
              v499[6] = &__len;
              char v1032 = v499;
              uint64_t v1040 = 0;
              char v500 = operator new(0x28uLL);
              *char v500 = &unk_27062B578;
              v500[1] = &v1026;
              v500[2] = &v1028;
              v500[3] = v1039;
              v500[4] = v1031;
              char v1035 = v500;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              __b = (char *)__b + __len;
              v493 += __len;
            }
            while ((unint64_t)(*a2)[6] > v493);
          }
          goto LABEL_1111;
        }
        int v93 = v1027;
      }
      LODWORD(__b) = *((_DWORD *)v93 - 1);
      int v1027 = v93 - 4;
      v1029 -= 8;
      size_t v133 = *(void *)(*(void *)a1 + 152);
      int v1020 = (*a2)[19];
      __leuint64_t n = v133;
      uint64_t v72 = v1033;
      int v73 = v1035;
      uint64_t v134 = (*a2)[6];
      if (v1027 == v1026)
      {
        if (v134)
        {
          int v238 = 0;
          uint64_t v239 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          uint64_t v240 = (char *)v1020;
          size_t v1002 = __len;
          int v241 = (int)__b;
          int v242 = __b + 1;
          do
          {
            uint64_t v243 = 0;
            if ((v239 & 0x80000000) == 0)
            {
              uint64_t v244 = v239;
              int v245 = (int)v238;
              do
              {
                ldiv_t v246 = ldiv(v245, v72[v244]);
                int v245 = v246.quot;
                v243 += v73[v244--] * v246.rem;
              }
              while (v244 != -1);
            }
            *uint64_t v240 = 1;
            if (v241 >= 1)
            {
              uint64_t v247 = (unsigned __int8 *)(v1002 + (int)v243);
              char v248 = 1;
              unsigned int v249 = v242;
              do
              {
                int v250 = *v247++;
                v248 &= v250 != 0;
                *uint64_t v240 = v248;
                --v249;
              }
              while (v249 > 1);
            }
            int v238 = (int *)((char *)v238 + 1);
            ++v240;
          }
          while (v238 != v134);
        }
      }
      else if (v134)
      {
        unint64_t v135 = 0;
        uint64_t v136 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
        do
        {
          uint64_t v137 = 0;
          if ((v136 & 0x80000000) == 0)
          {
            uint64_t v138 = v136;
            int v139 = v135;
            do
            {
              ldiv_t v140 = ldiv(v139, v72[v138]);
              int v139 = v140.quot;
              v137 += v73[v138--] * v140.rem;
            }
            while (v138 != -1);
          }
          int v1019 = v137;
          *(unsigned char *)int v1020 = 1;
          char v1032 = 0;
          uint64_t v141 = operator new(0x30uLL);
          void *v141 = &unk_27062C378;
          v141[1] = &v1017;
          v141[2] = &__len;
          v141[3] = &v1019;
          v141[4] = &v1020;
          v141[5] = &__b;
          char v1032 = v141;
          uint64_t v1040 = 0;
          unint64_t v142 = operator new(0x28uLL);
          void *v142 = &unk_27062B578;
          v142[1] = &v1026;
          v142[2] = &v1028;
          v142[3] = v1039;
          v142[4] = v1031;
          char v1035 = v142;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
          std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
          ++v135;
          int v1020 = (int *)((char *)v1020 + 1);
        }
        while ((unint64_t)(*a2)[6] > v135);
      }
      goto LABEL_1111;
    case 4:
      int v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1036 = &unk_27062AEC8;
      char v1037 = mlx::core::allocator::free;
      int v1038 = &v1036;
      mlx::core::array::set_data(a2, (uint64_t)v14, (uint64_t)&v1036);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
      unsigned int v1023 = 0;
      uint64_t v1024 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        unsigned int v1023 = __p;
        operator delete(__p);
      }
      if (v1025 == 1)
      {
        int v51 = v1027;
        if (v1027 - (unsigned char *)v1026 == 4)
        {
          int v52 = (*a2)[6];
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v54 = *(int *)v1026;
            int v55 = (char *)(*a2)[19];
            unint64_t v56 = *(unsigned __int8 **)(*(void *)a1 + 152);
            do
            {
              *int v55 = 1;
              if ((int)v54 >= 1)
              {
                char v57 = 1;
                unsigned int v58 = v54 + 1;
                unint64_t v59 = v56;
                do
                {
                  int v60 = *v59++;
                  v57 &= v60 != 0;
                  *int v55 = v57;
                  --v58;
                }
                while (v58 > 1);
              }
              uint64_t v53 = (int *)((char *)v53 + 1);
              ++v55;
              v56 += v54;
            }
            while (v53 != v52);
          }
          goto LABEL_1115;
        }
      }
      else
      {
        if (!v1025)
        {
          int v15 = (char *)(*a2)[19];
          *int v15 = 1;
          int v16 = *(_DWORD *)(*(void *)a1 + 48);
          if (v16 >= 1)
          {
            uint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 152);
            unsigned int v18 = v16 + 1;
            char v19 = 1;
            do
            {
              int v20 = *v17++;
              v19 &= v20 != 0;
              *int v15 = v19;
              --v18;
            }
            while (v18 > 1);
          }
          goto LABEL_1115;
        }
        if ((v1025 & 0xFFFFFFFD) != 1)
        {
          switch(v1025)
          {
            case 2:
              unint64_t v153 = v1027;
              if (v1027 - (unsigned char *)v1026 == 4)
              {
                uint64_t v284 = *((int *)v1027 - 1);
                size_t v285 = *((void *)v1029 - 1);
                v1027 -= 4;
                v1029 -= 8;
                unsigned int v286 = (*a2)[6];
                if (v286)
                {
                  LODWORD(v287) = 0;
                  int v288 = (*a2)[19];
                  uint64_t v289 = *(void *)(*(void *)a1 + 152);
                  do
                  {
                    if (v285) {
                      memset(v288, 1, v285);
                    }
                    if ((int)v284 >= 1)
                    {
                      int v290 = 0;
                      uint64_t v291 = v289;
                      do
                      {
                        if (v285)
                        {
                          for (uint64_t i11 = 0; i11 != v285; ++i11)
                          {
                            if (*(unsigned char *)(v291 + i11)) {
                              BOOL v293 = *((unsigned char *)v288 + i11) == 0;
                            }
                            else {
                              BOOL v293 = 1;
                            }
                            char v294 = !v293;
                            *((unsigned char *)v288 + i11) = v294;
                          }
                          v291 += i11;
                        }
                        ++v290;
                      }
                      while (v290 != v284);
                    }
                    v289 += v285 * v284;
                    int v288 = (int *)((char *)v288 + v285);
                    unint64_t v287 = (int)v287 + (int)v285;
                  }
                  while (v287 < (unint64_t)v286);
                }
                goto LABEL_1115;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              uint64_t v305 = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              if ((*a2)[6])
              {
                unint64_t v306 = 0;
                uint64_t v307 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v308 = 0;
                  if ((v307 & 0x80000000) == 0)
                  {
                    uint64_t v309 = v307;
                    int v310 = v306;
                    do
                    {
                      ldiv_t v311 = ldiv(v310, v72[v309]);
                      int v310 = v311.quot;
                      v308 += v73[v309--] * v311.rem;
                    }
                    while (v309 != -1);
                  }
                  LODWORD(v1020) = v308;
                  LOBYTE(v1019) = 1;
                  char v1032 = 0;
                  int v312 = operator new(0x28uLL);
                  *int v312 = &unk_27062C778;
                  v312[1] = &__b;
                  v312[2] = &v1019;
                  v312[3] = &__len;
                  v312[4] = &v1020;
                  char v1032 = v312;
                  uint64_t v1040 = 0;
                  uint64_t v313 = operator new(0x28uLL);
                  *uint64_t v313 = &unk_27062B578;
                  v313[1] = &v1026;
                  v313[2] = &v1028;
                  v313[3] = v1039;
                  v313[4] = v1031;
                  char v1035 = v313;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  *(unsigned char *)uint64_t v305 = v1019;
                  uint64_t v305 = (int *)((char *)v305 + 1);
                  ++v306;
                }
                while ((unint64_t)(*a2)[6] > v306);
              }
              goto LABEL_1111;
            case 4:
              unint64_t v153 = v1027;
              break;
            default:
              goto LABEL_1115;
          }
          int v1019 = *((_DWORD *)v153 - 1);
          size_t v295 = *((void *)v1029 - 1);
          int v1027 = v153 - 4;
          v1029 -= 8;
          int v1020 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v295;
          __b = (*a2)[19];
          uint64_t v72 = v1033;
          int v73 = v1035;
          unint64_t v296 = (unint64_t)(*a2)[6];
          if (v1027 == v1026)
          {
            if (v296)
            {
              int v549 = 0;
              uint64_t v550 = (char *)__b;
              uint64_t v551 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              size_t v552 = __len;
              int v1004 = v1020;
              int v553 = v1019;
              do
              {
                uint64_t v554 = 0;
                if ((v551 & 0x80000000) == 0)
                {
                  uint64_t v555 = v551;
                  int v556 = v549;
                  do
                  {
                    ldiv_t v557 = ldiv(v556, v72[v555]);
                    int v556 = v557.quot;
                    v554 += v73[v555--] * v557.rem;
                  }
                  while (v555 != -1);
                }
                if (v552) {
                  memset(v550, 1, v552);
                }
                if (v553 >= 1)
                {
                  int v558 = 0;
                  uint64_t v559 = (char *)v1004 + (int)v554;
                  do
                  {
                    if (v552)
                    {
                      for (uint64_t i12 = 0; i12 != v552; ++i12)
                      {
                        if (v559[i12]) {
                          BOOL v561 = v550[i12] == 0;
                        }
                        else {
                          BOOL v561 = 1;
                        }
                        char v562 = !v561;
                        v550[i12] = v562;
                      }
                      v559 += i12;
                    }
                    ++v558;
                  }
                  while (v558 != v553);
                }
                v550 += v552;
                v549 += v552;
              }
              while (v296 > v549);
            }
          }
          else if (v296)
          {
            int v297 = 0;
            uint64_t v298 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v299 = 0;
              if ((v298 & 0x80000000) == 0)
              {
                uint64_t v300 = v298;
                int v301 = v297;
                do
                {
                  ldiv_t v302 = ldiv(v301, v72[v300]);
                  int v301 = v302.quot;
                  v299 += v73[v300--] * v302.rem;
                }
                while (v300 != -1);
              }
              int v1017 = v299;
              if (__len) {
                memset(__b, 1, __len);
              }
              char v1032 = 0;
              int v303 = operator new(0x38uLL);
              *int v303 = &unk_27062C6F8;
              v303[1] = &v1030;
              v303[2] = &v1020;
              v303[3] = &v1017;
              v303[4] = &__b;
              v303[5] = &v1019;
              v303[6] = &__len;
              char v1032 = v303;
              uint64_t v1040 = 0;
              uint64_t v304 = operator new(0x28uLL);
              *uint64_t v304 = &unk_27062B578;
              v304[1] = &v1026;
              v304[2] = &v1028;
              v304[3] = v1039;
              v304[4] = v1031;
              char v1035 = v304;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              __b = (char *)__b + __len;
              v297 += __len;
            }
            while ((unint64_t)(*a2)[6] > v297);
          }
          goto LABEL_1111;
        }
        int v51 = v1027;
      }
      LODWORD(__b) = *((_DWORD *)v51 - 1);
      int v1027 = v51 - 4;
      v1029 -= 8;
      size_t v71 = *(void *)(*(void *)a1 + 152);
      int v1020 = (*a2)[19];
      __leuint64_t n = v71;
      uint64_t v72 = v1033;
      int v73 = v1035;
      int v74 = (*a2)[6];
      if (v1027 == v1026)
      {
        if (v74)
        {
          int v199 = 0;
          uint64_t v200 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          unint64_t v201 = (char *)v1020;
          size_t v999 = __len;
          int v202 = (int)__b;
          int v203 = __b + 1;
          do
          {
            uint64_t v204 = 0;
            if ((v200 & 0x80000000) == 0)
            {
              uint64_t v205 = v200;
              int v206 = (int)v199;
              do
              {
                ldiv_t v207 = ldiv(v206, v72[v205]);
                int v206 = v207.quot;
                v204 += v73[v205--] * v207.rem;
              }
              while (v205 != -1);
            }
            *unint64_t v201 = 1;
            if (v202 >= 1)
            {
              int v208 = (unsigned __int8 *)(v999 + (int)v204);
              char v209 = 1;
              unsigned int v210 = v203;
              do
              {
                int v211 = *v208++;
                v209 &= v211 != 0;
                *unint64_t v201 = v209;
                --v210;
              }
              while (v210 > 1);
            }
            int v199 = (int *)((char *)v199 + 1);
            ++v201;
          }
          while (v199 != v74);
        }
      }
      else if (v74)
      {
        unint64_t v75 = 0;
        uint64_t v76 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
        do
        {
          uint64_t v77 = 0;
          if ((v76 & 0x80000000) == 0)
          {
            uint64_t v78 = v76;
            int v79 = v75;
            do
            {
              ldiv_t v80 = ldiv(v79, v72[v78]);
              int v79 = v80.quot;
              v77 += v73[v78--] * v80.rem;
            }
            while (v78 != -1);
          }
          int v1019 = v77;
          *(unsigned char *)int v1020 = 1;
          char v1032 = 0;
          int v81 = operator new(0x30uLL);
          *int v81 = &unk_27062C678;
          v81[1] = &v1017;
          v81[2] = &__len;
          v81[3] = &v1019;
          v81[4] = &v1020;
          v81[5] = &__b;
          char v1032 = v81;
          uint64_t v1040 = 0;
          int v82 = operator new(0x28uLL);
          *int v82 = &unk_27062B578;
          v82[1] = &v1026;
          v82[2] = &v1028;
          v82[3] = v1039;
          v82[4] = v1031;
          char v1035 = v82;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
          std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
          ++v75;
          int v1020 = (int *)((char *)v1020 + 1);
        }
        while ((unint64_t)(*a2)[6] > v75);
      }
      goto LABEL_1111;
    case 5:
      int v44 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1036 = &unk_27062AEC8;
      char v1037 = mlx::core::allocator::free;
      int v1038 = &v1036;
      mlx::core::array::set_data(a2, (uint64_t)v44, (uint64_t)&v1036);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1036);
      unsigned int v1023 = 0;
      uint64_t v1024 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        unsigned int v1023 = __p;
        operator delete(__p);
      }
      if (v1025 == 1)
      {
        uint64_t v103 = v1027;
        if (v1027 - (unsigned char *)v1026 == 4)
        {
          unint64_t v104 = (*a2)[6];
          if (v104)
          {
            uint64_t v105 = 0;
            uint64_t v106 = *(int *)v1026;
            int v107 = (*a2)[19];
            unsigned __int8 v108 = *(unsigned __int8 **)(*(void *)a1 + 152);
            do
            {
              *(unsigned char *)int v107 = 0;
              if ((int)v106 >= 1)
              {
                int v109 = 0;
                unsigned int v110 = v106 + 1;
                int v111 = v108;
                do
                {
                  int v112 = *v111++;
                  v109 |= v112;
                  *(unsigned char *)int v107 = v109;
                  --v110;
                }
                while (v110 > 1);
              }
              uint64_t v105 = (int *)((char *)v105 + 1);
              int v107 = (int *)((char *)v107 + 1);
              v108 += v106;
            }
            while (v105 != v104);
          }
          goto LABEL_1115;
        }
      }
      else
      {
        if (!v1025)
        {
          int v45 = (*a2)[19];
          *(unsigned char *)int v45 = 0;
          int v46 = *(_DWORD *)(*(void *)a1 + 48);
          if (v46 >= 1)
          {
            int v47 = 0;
            unint64_t v48 = *(unsigned __int8 **)(*(void *)a1 + 152);
            unsigned int v49 = v46 + 1;
            do
            {
              int v50 = *v48++;
              v47 |= v50;
              *(unsigned char *)int v45 = v47;
              --v49;
            }
            while (v49 > 1);
          }
          goto LABEL_1115;
        }
        if ((v1025 & 0xFFFFFFFD) != 1)
        {
          switch(v1025)
          {
            case 2:
              int v157 = v1027;
              if (v1027 - (unsigned char *)v1026 == 4)
              {
                uint64_t v501 = *((int *)v1027 - 1);
                size_t v502 = *((void *)v1029 - 1);
                v1027 -= 4;
                v1029 -= 8;
                int v503 = (*a2)[6];
                if (v503)
                {
                  LODWORD(v504) = 0;
                  unint64_t v505 = (*a2)[19];
                  uint64_t v506 = *(void *)(*(void *)a1 + 152);
                  do
                  {
                    if (v502) {
                      bzero(v505, v502);
                    }
                    if ((int)v501 >= 1)
                    {
                      int v507 = 0;
                      uint64_t v508 = v506;
                      do
                      {
                        if (v502)
                        {
                          for (uint64_t i13 = 0; i13 != v502; ++i13)
                            *((unsigned char *)v505 + i13) |= *(unsigned char *)(v508 + i13);
                          v508 += i13;
                        }
                        ++v507;
                      }
                      while (v507 != v501);
                    }
                    v506 += v502 * v501;
                    unint64_t v505 = (int *)((char *)v505 + v502);
                    unint64_t v504 = (int)v504 + (int)v502;
                  }
                  while (v504 < (unint64_t)v503);
                }
                goto LABEL_1115;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              uint64_t v520 = (*a2)[19];
              uint64_t v72 = v1033;
              int v73 = v1035;
              if ((*a2)[6])
              {
                unint64_t v521 = 0;
                uint64_t v522 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
                do
                {
                  uint64_t v523 = 0;
                  if ((v522 & 0x80000000) == 0)
                  {
                    uint64_t v524 = v522;
                    int v525 = v521;
                    do
                    {
                      ldiv_t v526 = ldiv(v525, v72[v524]);
                      int v525 = v526.quot;
                      v523 += v73[v524--] * v526.rem;
                    }
                    while (v524 != -1);
                  }
                  LODWORD(v1020) = v523;
                  LOBYTE(v1019) = 0;
                  char v1032 = 0;
                  unint64_t v527 = operator new(0x28uLL);
                  *unint64_t v527 = &unk_27062C5F8;
                  v527[1] = &__b;
                  v527[2] = &v1019;
                  v527[3] = &__len;
                  v527[4] = &v1020;
                  char v1032 = v527;
                  uint64_t v1040 = 0;
                  int v528 = operator new(0x28uLL);
                  *int v528 = &unk_27062B578;
                  v528[1] = &v1026;
                  v528[2] = &v1028;
                  v528[3] = v1039;
                  v528[4] = v1031;
                  char v1035 = v528;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
                  *(unsigned char *)uint64_t v520 = v1019;
                  uint64_t v520 = (int *)((char *)v520 + 1);
                  ++v521;
                }
                while ((unint64_t)(*a2)[6] > v521);
              }
              goto LABEL_1111;
            case 4:
              int v157 = v1027;
              break;
            default:
              goto LABEL_1115;
          }
          int v1019 = *((_DWORD *)v157 - 1);
          size_t v510 = *((void *)v1029 - 1);
          int v1027 = v157 - 4;
          v1029 -= 8;
          int v1020 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v510;
          __b = (*a2)[19];
          uint64_t v72 = v1033;
          int v73 = v1035;
          unint64_t v511 = (unint64_t)(*a2)[6];
          if (v1027 == v1026)
          {
            if (v511)
            {
              int v603 = 0;
              char v604 = (char *)__b;
              uint64_t v605 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
              size_t v606 = __len;
              int v1008 = v1020;
              int v607 = v1019;
              do
              {
                uint64_t v608 = 0;
                if ((v605 & 0x80000000) == 0)
                {
                  uint64_t v609 = v605;
                  int v610 = v603;
                  do
                  {
                    ldiv_t v611 = ldiv(v610, v72[v609]);
                    int v610 = v611.quot;
                    v608 += v73[v609--] * v611.rem;
                  }
                  while (v609 != -1);
                }
                if (v606) {
                  bzero(v604, v606);
                }
                if (v607 >= 1)
                {
                  int v612 = 0;
                  uint64_t v613 = (char *)v1008 + (int)v608;
                  do
                  {
                    if (v606)
                    {
                      for (uint64_t i14 = 0; i14 != v606; ++i14)
                        v604[i14] |= v613[i14];
                      v613 += i14;
                    }
                    ++v612;
                  }
                  while (v612 != v607);
                }
                v604 += v606;
                v603 += v606;
              }
              while (v511 > v603);
            }
          }
          else if (v511)
          {
            int v512 = 0;
            uint64_t v513 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
            do
            {
              uint64_t v514 = 0;
              if ((v513 & 0x80000000) == 0)
              {
                uint64_t v515 = v513;
                int v516 = v512;
                do
                {
                  ldiv_t v517 = ldiv(v516, v72[v515]);
                  int v516 = v517.quot;
                  v514 += v73[v515--] * v517.rem;
                }
                while (v515 != -1);
              }
              int v1017 = v514;
              if (__len) {
                bzero(__b, __len);
              }
              char v1032 = 0;
              unint64_t v518 = operator new(0x38uLL);
              *unint64_t v518 = &unk_27062C578;
              v518[1] = &v1030;
              v518[2] = &v1020;
              v518[3] = &v1017;
              v518[4] = &__b;
              v518[5] = &v1019;
              v518[6] = &__len;
              char v1032 = v518;
              uint64_t v1040 = 0;
              int v519 = operator new(0x28uLL);
              void *v519 = &unk_27062B578;
              v519[1] = &v1026;
              v519[2] = &v1028;
              v519[3] = v1039;
              v519[4] = v1031;
              char v1035 = v519;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
              std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
              __b = (char *)__b + __len;
              v512 += __len;
            }
            while ((unint64_t)(*a2)[6] > v512);
          }
          goto LABEL_1111;
        }
        uint64_t v103 = v1027;
      }
      LODWORD(__b) = *((_DWORD *)v103 - 1);
      int v1027 = v103 - 4;
      v1029 -= 8;
      size_t v143 = *(void *)(*(void *)a1 + 152);
      int v1020 = (*a2)[19];
      __leuint64_t n = v143;
      uint64_t v72 = v1033;
      int v73 = v1035;
      float v144 = (*a2)[6];
      if (v1027 == v1026)
      {
        if (v144)
        {
          int v251 = 0;
          uint64_t v252 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
          int v253 = v1020;
          size_t v1003 = __len;
          int v254 = (int)__b;
          int v255 = __b + 1;
          do
          {
            uint64_t v256 = 0;
            if ((v252 & 0x80000000) == 0)
            {
              uint64_t v257 = v252;
              int v258 = (int)v251;
              do
              {
                ldiv_t v259 = ldiv(v258, v72[v257]);
                int v258 = v259.quot;
                v256 += v73[v257--] * v259.rem;
              }
              while (v257 != -1);
            }
            *(unsigned char *)int v253 = 0;
            if (v254 >= 1)
            {
              int v260 = 0;
              uint64_t v261 = (unsigned __int8 *)(v1003 + (int)v256);
              unsigned int v262 = v255;
              do
              {
                int v263 = *v261++;
                v260 |= v263;
                *(unsigned char *)int v253 = v260;
                --v262;
              }
              while (v262 > 1);
            }
            int v251 = (int *)((char *)v251 + 1);
            int v253 = (int *)((char *)v253 + 1);
          }
          while (v251 != v144);
        }
      }
      else if (v144)
      {
        unint64_t v145 = 0;
        uint64_t v146 = ((unint64_t)(v1034 - (void)v1033) >> 2) - 1;
        do
        {
          uint64_t v147 = 0;
          if ((v146 & 0x80000000) == 0)
          {
            uint64_t v148 = v146;
            int v149 = v145;
            do
            {
              ldiv_t v150 = ldiv(v149, v72[v148]);
              int v149 = v150.quot;
              v147 += v73[v148--] * v150.rem;
            }
            while (v148 != -1);
          }
          int v1019 = v147;
          *(unsigned char *)int v1020 = 0;
          char v1032 = 0;
          uint64_t v151 = operator new(0x30uLL);
          void *v151 = &unk_27062C4F8;
          v151[1] = &v1017;
          v151[2] = &__len;
          v151[3] = &v1019;
          v151[4] = &v1020;
          v151[5] = &__b;
          char v1032 = v151;
          uint64_t v1040 = 0;
          uint64_t v152 = operator new(0x28uLL);
          *uint64_t v152 = &unk_27062B578;
          v152[1] = &v1026;
          v152[2] = &v1028;
          v152[3] = v1039;
          v152[4] = v1031;
          char v1035 = v152;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1033, v1039);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1033);
          std::function<void ()(int,int)>::operator()((uint64_t)v1039, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1039);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1031);
          ++v145;
          int v1020 = (int *)((char *)v1020 + 1);
        }
        while ((unint64_t)(*a2)[6] > v145);
      }
      goto LABEL_1111;
    default:
      return;
  }
}

void sub_256DA7450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::anonymous namespace'::reduce_dispatch_out<unsigned char>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  uint64_t v1033 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (void)(*a2)[6]));
      unsigned int v1028 = &unk_27062AEC8;
      int v1029 = mlx::core::allocator::free;
      char v1030 = &v1028;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1028);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
      uint64_t v1015 = 0;
      uint64_t v1016 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1015 = __p;
        operator delete(__p);
      }
      if (v1017 == 1)
      {
        int v63 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_111;
        }
        uint64_t v64 = (*a2)[6];
        if (v64)
        {
          uint64_t v65 = 0;
          uint64_t v66 = *(int *)v1018;
          char v67 = (char *)(*a2)[19];
          unsigned int v68 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *char v67 = 1;
            if ((int)v66 >= 1)
            {
              char v69 = 1;
              unsigned int v70 = v66 + 1;
              size_t v71 = v68;
              do
              {
                int v72 = *v71++;
                v69 &= v72 != 0;
                *char v67 = v69;
                --v70;
              }
              while (v70 > 1);
            }
            uint64_t v65 = (int *)((char *)v65 + 1);
            ++v67;
            v68 += v66;
          }
          while (v65 != v64);
        }
        goto LABEL_1097;
      }
      if (!v1017)
      {
        int v8 = (char *)(*a2)[19];
        char *v8 = 1;
        int v9 = *(_DWORD *)(*(void *)a1 + 48);
        if (v9 >= 1)
        {
          int v10 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v11 = v9 + 1;
          char v12 = 1;
          do
          {
            int v13 = *v10++;
            v12 &= v13 != 0;
            char *v8 = v12;
            --v11;
          }
          while (v11 > 1);
        }
        goto LABEL_1097;
      }
      if ((v1017 & 0xFFFFFFFD) == 1)
      {
        int v63 = v1019;
LABEL_111:
        LODWORD(__b) = *((_DWORD *)v63 - 1);
        int v1019 = v63 - 4;
        v1021 -= 8;
        size_t v114 = *(void *)(*(void *)a1 + 152);
        unsigned int v1012 = (*a2)[19];
        __leuint64_t n = v114;
        int v74 = v1025;
        unint64_t v75 = v1027;
        unint64_t v115 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v115)
          {
            int v214 = 0;
            uint64_t v215 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            int v216 = (char *)v1012;
            size_t v997 = __len;
            int v217 = (int)__b;
            int v218 = __b + 1;
            do
            {
              uint64_t v219 = 0;
              if ((v215 & 0x80000000) == 0)
              {
                uint64_t v220 = v215;
                int quot = (int)v214;
                do
                {
                  ldiv_t v222 = ldiv(quot, v74[v220]);
                  int quot = v222.quot;
                  v219 += v75[v220--] * v222.rem;
                }
                while (v220 != -1);
              }
              *int v216 = 1;
              if (v217 >= 1)
              {
                unsigned int v223 = (unsigned __int8 *)(v997 + (int)v219);
                char v224 = 1;
                unsigned int v225 = v218;
                do
                {
                  int v226 = *v223++;
                  v224 &= v226 != 0;
                  *int v216 = v224;
                  --v225;
                }
                while (v225 > 1);
              }
              int v214 = (int *)((char *)v214 + 1);
              ++v216;
            }
            while (v214 != v115);
          }
        }
        else if (v115)
        {
          unint64_t v116 = 0;
          uint64_t v117 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v118 = 0;
            if ((v117 & 0x80000000) == 0)
            {
              uint64_t v119 = v117;
              int v120 = v116;
              do
              {
                ldiv_t v121 = ldiv(v120, v74[v119]);
                int v120 = v121.quot;
                v118 += v75[v119--] * v121.rem;
              }
              while (v119 != -1);
            }
            int v1011 = v118;
            *(unsigned char *)unsigned int v1012 = 1;
            uint64_t v1024 = 0;
            uint64_t v122 = operator new(0x30uLL);
            *uint64_t v122 = &unk_27062C7F8;
            v122[1] = &v1009;
            v122[2] = &__len;
            void v122[3] = &v1011;
            v122[4] = &v1012;
            v122[5] = &__b;
            uint64_t v1024 = v122;
            uint64_t v1032 = 0;
            size_t v123 = operator new(0x28uLL);
            void *v123 = &unk_27062B578;
            v123[1] = &v1018;
            v123[2] = &v1020;
            v123[3] = v1031;
            v123[4] = v1023;
            int v1027 = v123;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            ++v116;
            unsigned int v1012 = (int *)((char *)v1012 + 1);
          }
          while ((unint64_t)(*a2)[6] > v116);
        }
        goto LABEL_1093;
      }
      if (v1017 != 2)
      {
        if (v1017 != 5)
        {
          if (v1017 != 4) {
            goto LABEL_1097;
          }
          uint64_t v155 = v1019;
          goto LABEL_454;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        ldiv_t v311 = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        if ((*a2)[6])
        {
          unint64_t v312 = 0;
          uint64_t v313 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v314 = 0;
            if ((v313 & 0x80000000) == 0)
            {
              uint64_t v315 = v313;
              int v316 = v312;
              do
              {
                ldiv_t v317 = ldiv(v316, v74[v315]);
                int v316 = v317.quot;
                v314 += v75[v315--] * v317.rem;
              }
              while (v315 != -1);
            }
            LODWORD(v1012) = v314;
            LOBYTE(v1011) = 1;
            uint64_t v1024 = 0;
            uint64_t v318 = operator new(0x28uLL);
            *uint64_t v318 = &unk_27062C8F8;
            v318[1] = &__b;
            v318[2] = &v1011;
            v318[3] = &__len;
            v318[4] = &v1012;
            uint64_t v1024 = v318;
            uint64_t v1032 = 0;
            int v319 = operator new(0x28uLL);
            *int v319 = &unk_27062B578;
            v319[1] = &v1018;
            v319[2] = &v1020;
            v319[3] = v1031;
            v319[4] = v1023;
            int v1027 = v319;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            *(unsigned char *)ldiv_t v311 = v1011;
            ldiv_t v311 = (int *)((char *)v311 + 1);
            ++v312;
          }
          while ((unint64_t)(*a2)[6] > v312);
        }
        goto LABEL_1093;
      }
      uint64_t v155 = v1019;
      if (v1019 - (unsigned char *)v1018 != 4)
      {
LABEL_454:
        int v1011 = *((_DWORD *)v155 - 1);
        size_t v447 = *((void *)v1021 - 1);
        int v1019 = v155 - 4;
        v1021 -= 8;
        unsigned int v1012 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v447;
        __b = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        unint64_t v448 = (unint64_t)(*a2)[6];
        if (v1019 == v1018)
        {
          if (v448)
          {
            int v558 = 0;
            uint64_t v559 = (char *)__b;
            uint64_t v560 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            size_t v561 = __len;
            size_t v999 = v1012;
            int v562 = v1011;
            do
            {
              uint64_t v563 = 0;
              if ((v560 & 0x80000000) == 0)
              {
                uint64_t v564 = v560;
                int v565 = v558;
                do
                {
                  ldiv_t v566 = ldiv(v565, v74[v564]);
                  int v565 = v566.quot;
                  v563 += v75[v564--] * v566.rem;
                }
                while (v564 != -1);
              }
              if (v561) {
                memset(v559, 1, v561);
              }
              if (v562 >= 1)
              {
                int v567 = 0;
                uint64_t v568 = (char *)v999 + (int)v563;
                do
                {
                  if (v561)
                  {
                    for (uint64_t i = 0; i != v561; ++i)
                    {
                      if (v568[i]) {
                        BOOL v570 = v559[i] == 0;
                      }
                      else {
                        BOOL v570 = 1;
                      }
                      char v571 = !v570;
                      v559[i] = v571;
                    }
                    v568 += i;
                  }
                  ++v567;
                }
                while (v567 != v562);
              }
              v559 += v561;
              __b = v559;
              v558 += v561;
            }
            while (v448 > v558);
          }
        }
        else if (v448)
        {
          int v449 = 0;
          uint64_t v450 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v451 = 0;
            if ((v450 & 0x80000000) == 0)
            {
              uint64_t v452 = v450;
              int v453 = v449;
              do
              {
                ldiv_t v454 = ldiv(v453, v74[v452]);
                int v453 = v454.quot;
                v451 += v75[v452--] * v454.rem;
              }
              while (v452 != -1);
            }
            int v1009 = v451;
            if (__len) {
              memset(__b, 1, __len);
            }
            uint64_t v1024 = 0;
            uint64_t v455 = operator new(0x38uLL);
            *uint64_t v455 = &unk_27062C878;
            v455[1] = &v1022;
            v455[2] = &v1012;
            v455[3] = &v1009;
            v455[4] = &__b;
            v455[5] = &v1011;
            v455[6] = &__len;
            uint64_t v1024 = v455;
            uint64_t v1032 = 0;
            uint64_t v456 = operator new(0x28uLL);
            *uint64_t v456 = &unk_27062B578;
            v456[1] = &v1018;
            v456[2] = &v1020;
            v456[3] = v1031;
            v456[4] = v1023;
            int v1027 = v456;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            __b = (char *)__b + __len;
            v449 += __len;
          }
          while ((unint64_t)(*a2)[6] > v449);
        }
        goto LABEL_1093;
      }
      uint64_t v436 = *((int *)v1019 - 1);
      size_t v437 = *((void *)v1021 - 1);
      v1019 -= 4;
      v1021 -= 8;
      int v438 = (*a2)[6];
      if (v438)
      {
        LODWORD(v439) = 0;
        uint64_t v440 = (*a2)[19];
        uint64_t v441 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v437) {
            memset(v440, 1, v437);
          }
          if ((int)v436 >= 1)
          {
            int v442 = 0;
            uint64_t v443 = v441;
            do
            {
              if (v437)
              {
                for (uint64_t j = 0; j != v437; ++j)
                {
                  if (*(unsigned char *)(v443 + j)) {
                    BOOL v445 = *((unsigned char *)v440 + j) == 0;
                  }
                  else {
                    BOOL v445 = 1;
                  }
                  char v446 = !v445;
                  *((unsigned char *)v440 + j) = v446;
                }
                v443 += j;
              }
              ++v442;
            }
            while (v442 != v436);
          }
          v441 += v437 * v436;
          uint64_t v440 = (int *)((char *)v440 + v437);
          unint64_t v439 = (int)v439 + (int)v437;
        }
        while (v439 < (unint64_t)v438);
      }
      goto LABEL_1097;
    case 1:
      int v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      unsigned int v1028 = &unk_27062AEC8;
      int v1029 = mlx::core::allocator::free;
      char v1030 = &v1028;
      mlx::core::array::set_data(a2, (uint64_t)v31, (uint64_t)&v1028);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
      uint64_t v1015 = 0;
      uint64_t v1016 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1015 = __p;
        operator delete(__p);
      }
      if (v1017 == 1)
      {
        unint64_t v85 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_121;
        }
        uint64_t v86 = (*a2)[6];
        if (v86)
        {
          char v87 = 0;
          uint64_t v88 = *(int *)v1018;
          int v89 = (*a2)[19];
          unsigned int v90 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *(unsigned char *)int v89 = 0;
            if ((int)v88 >= 1)
            {
              int v91 = 0;
              unsigned int v92 = v88 + 1;
              int v93 = v90;
              do
              {
                int v94 = *v93++;
                v91 |= v94 != 0;
                *(unsigned char *)int v89 = v91;
                --v92;
              }
              while (v92 > 1);
            }
            char v87 = (int *)((char *)v87 + 1);
            int v89 = (int *)((char *)v89 + 1);
            v90 += v88;
          }
          while (v87 != v86);
        }
        goto LABEL_1097;
      }
      if (!v1017)
      {
        int v32 = (*a2)[19];
        *(unsigned char *)int v32 = 0;
        int v33 = *(_DWORD *)(*(void *)a1 + 48);
        if (v33 >= 1)
        {
          int v34 = 0;
          unsigned int v35 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v36 = v33 + 1;
          do
          {
            int v37 = *v35++;
            v34 |= v37 != 0;
            *(unsigned char *)int v32 = v34;
            --v36;
          }
          while (v36 > 1);
        }
        goto LABEL_1097;
      }
      if ((v1017 & 0xFFFFFFFD) == 1)
      {
        unint64_t v85 = v1019;
LABEL_121:
        LODWORD(__b) = *((_DWORD *)v85 - 1);
        int v1019 = v85 - 4;
        v1021 -= 8;
        size_t v124 = *(void *)(*(void *)a1 + 152);
        unsigned int v1012 = (*a2)[19];
        __leuint64_t n = v124;
        int v74 = v1025;
        unint64_t v75 = v1027;
        unint64_t v125 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v125)
          {
            int v227 = 0;
            uint64_t v228 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            int v229 = v1012;
            size_t v998 = __len;
            int v230 = (int)__b;
            int v231 = __b + 1;
            do
            {
              uint64_t v232 = 0;
              if ((v228 & 0x80000000) == 0)
              {
                uint64_t v233 = v228;
                int v234 = (int)v227;
                do
                {
                  ldiv_t v235 = ldiv(v234, v74[v233]);
                  int v234 = v235.quot;
                  v232 += v75[v233--] * v235.rem;
                }
                while (v233 != -1);
              }
              *(unsigned char *)int v229 = 0;
              if (v230 >= 1)
              {
                int v236 = 0;
                int v237 = (unsigned __int8 *)(v998 + (int)v232);
                unsigned int v238 = v231;
                do
                {
                  int v239 = *v237++;
                  v236 |= v239 != 0;
                  *(unsigned char *)int v229 = v236;
                  --v238;
                }
                while (v238 > 1);
              }
              int v227 = (int *)((char *)v227 + 1);
              int v229 = (int *)((char *)v229 + 1);
            }
            while (v227 != v125);
          }
        }
        else if (v125)
        {
          unint64_t v126 = 0;
          uint64_t v127 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v128 = 0;
            if ((v127 & 0x80000000) == 0)
            {
              uint64_t v129 = v127;
              int v130 = v126;
              do
              {
                ldiv_t v131 = ldiv(v130, v74[v129]);
                int v130 = v131.quot;
                v128 += v75[v129--] * v131.rem;
              }
              while (v129 != -1);
            }
            int v1011 = v128;
            *(unsigned char *)unsigned int v1012 = 0;
            uint64_t v1024 = 0;
            int v132 = operator new(0x30uLL);
            void *v132 = &unk_27062C978;
            v132[1] = &v1009;
            v132[2] = &__len;
            v132[3] = &v1011;
            v132[4] = &v1012;
            v132[5] = &__b;
            uint64_t v1024 = v132;
            uint64_t v1032 = 0;
            size_t v133 = operator new(0x28uLL);
            *size_t v133 = &unk_27062B578;
            v133[1] = &v1018;
            v133[2] = &v1020;
            v133[3] = v1031;
            v133[4] = v1023;
            int v1027 = v133;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            ++v126;
            unsigned int v1012 = (int *)((char *)v1012 + 1);
          }
          while ((unint64_t)(*a2)[6] > v126);
        }
        goto LABEL_1093;
      }
      if (v1017 != 2)
      {
        if (v1017 != 5)
        {
          if (v1017 != 4) {
            goto LABEL_1097;
          }
          unint64_t v156 = v1019;
          goto LABEL_478;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        ldiv_t v320 = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        if ((*a2)[6])
        {
          unint64_t v321 = 0;
          uint64_t v322 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v323 = 0;
            if ((v322 & 0x80000000) == 0)
            {
              uint64_t v324 = v322;
              int v325 = v321;
              do
              {
                ldiv_t v326 = ldiv(v325, v74[v324]);
                int v325 = v326.quot;
                v323 += v75[v324--] * v326.rem;
              }
              while (v324 != -1);
            }
            LODWORD(v1012) = v323;
            LOBYTE(v1011) = 0;
            uint64_t v1024 = 0;
            uint64_t v327 = operator new(0x28uLL);
            *uint64_t v327 = &unk_27062CA78;
            v327[1] = &__b;
            v327[2] = &v1011;
            v327[3] = &__len;
            v327[4] = &v1012;
            uint64_t v1024 = v327;
            uint64_t v1032 = 0;
            int v328 = operator new(0x28uLL);
            *int v328 = &unk_27062B578;
            v328[1] = &v1018;
            v328[2] = &v1020;
            v328[3] = v1031;
            v328[4] = v1023;
            int v1027 = v328;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            *(unsigned char *)ldiv_t v320 = v1011;
            ldiv_t v320 = (int *)((char *)v320 + 1);
            ++v321;
          }
          while ((unint64_t)(*a2)[6] > v321);
        }
        goto LABEL_1093;
      }
      unint64_t v156 = v1019;
      if (v1019 - (unsigned char *)v1018 != 4)
      {
LABEL_478:
        int v1011 = *((_DWORD *)v156 - 1);
        size_t v466 = *((void *)v1021 - 1);
        int v1019 = v156 - 4;
        v1021 -= 8;
        unsigned int v1012 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v466;
        __b = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        unint64_t v467 = (unint64_t)(*a2)[6];
        if (v1019 == v1018)
        {
          if (v467)
          {
            int v572 = 0;
            uint64_t v573 = (char *)__b;
            uint64_t v574 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            size_t v575 = __len;
            size_t v1000 = v1012;
            int v576 = v1011;
            do
            {
              uint64_t v577 = 0;
              if ((v574 & 0x80000000) == 0)
              {
                uint64_t v578 = v574;
                int v579 = v572;
                do
                {
                  ldiv_t v580 = ldiv(v579, v74[v578]);
                  int v579 = v580.quot;
                  v577 += v75[v578--] * v580.rem;
                }
                while (v578 != -1);
              }
              if (v575) {
                bzero(v573, v575);
              }
              if (v576 >= 1)
              {
                int v581 = 0;
                uint64_t v582 = (char *)v1000 + (int)v577;
                do
                {
                  if (v575)
                  {
                    for (uint64_t k = 0; k != v575; ++k)
                      v573[k] |= v582[k] != 0;
                    v582 += k;
                  }
                  ++v581;
                }
                while (v581 != v576);
              }
              v573 += v575;
              __b = v573;
              v572 += v575;
            }
            while (v467 > v572);
          }
        }
        else if (v467)
        {
          int v468 = 0;
          uint64_t v469 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v470 = 0;
            if ((v469 & 0x80000000) == 0)
            {
              uint64_t v471 = v469;
              int v472 = v468;
              do
              {
                ldiv_t v473 = ldiv(v472, v74[v471]);
                int v472 = v473.quot;
                v470 += v75[v471--] * v473.rem;
              }
              while (v471 != -1);
            }
            int v1009 = v470;
            if (__len) {
              bzero(__b, __len);
            }
            uint64_t v1024 = 0;
            uint64_t v474 = operator new(0x38uLL);
            void *v474 = &unk_27062C9F8;
            v474[1] = &v1022;
            v474[2] = &v1012;
            v474[3] = &v1009;
            v474[4] = &__b;
            v474[5] = &v1011;
            v474[6] = &__len;
            uint64_t v1024 = v474;
            uint64_t v1032 = 0;
            uint64_t v475 = operator new(0x28uLL);
            *uint64_t v475 = &unk_27062B578;
            v475[1] = &v1018;
            v475[2] = &v1020;
            v475[3] = v1031;
            v475[4] = v1023;
            int v1027 = v475;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            __b = (char *)__b + __len;
            v468 += __len;
          }
          while ((unint64_t)(*a2)[6] > v468);
        }
        goto LABEL_1093;
      }
      uint64_t v457 = *((int *)v1019 - 1);
      size_t v458 = *((void *)v1021 - 1);
      v1019 -= 4;
      v1021 -= 8;
      uint64_t v459 = (*a2)[6];
      if (v459)
      {
        LODWORD(v460) = 0;
        uint64_t v461 = (*a2)[19];
        uint64_t v462 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v458) {
            bzero(v461, v458);
          }
          if ((int)v457 >= 1)
          {
            int v463 = 0;
            uint64_t v464 = v462;
            do
            {
              if (v458)
              {
                for (uint64_t m = 0; m != v458; ++m)
                  *((unsigned char *)v461 + m) |= *(unsigned char *)(v464 + m) != 0;
                v464 += m;
              }
              ++v463;
            }
            while (v463 != v457);
          }
          v462 += v458 * v457;
          uint64_t v461 = (int *)((char *)v461 + v458);
          unint64_t v460 = (int)v460 + (int)v458;
        }
        while (v460 < (unint64_t)v459);
      }
      goto LABEL_1097;
    case 2:
      unint64_t v22 = *a2;
      int v23 = (*a2)[7];
      switch((int)v23)
      {
        case 0:
          int v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            int v263 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_284;
            }
            int v264 = (*a2)[6];
            if (v264)
            {
              int v265 = 0;
              uint64_t v266 = *(int *)v1018;
              uint64_t v267 = (BOOL *)(*a2)[19];
              uint64_t v268 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *uint64_t v267 = 0;
                if ((int)v266 >= 1)
                {
                  BOOL v269 = 0;
                  unsigned int v270 = v266 + 1;
                  unsigned int v271 = v268;
                  do
                  {
                    int v272 = *v271++;
                    BOOL v269 = v272 + v269 != 0;
                    *uint64_t v267 = v269;
                    --v270;
                  }
                  while (v270 > 1);
                }
                int v265 = (int *)((char *)v265 + 1);
                ++v267;
                v268 += v266;
              }
              while (v265 != v264);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            int v25 = (BOOL *)(*a2)[19];
            *int v25 = 0;
            int v26 = *(_DWORD *)(*(void *)a1 + 48);
            if (v26 >= 1)
            {
              BOOL v27 = 0;
              unsigned int v28 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v29 = v26 + 1;
              do
              {
                int v30 = *v28++;
                BOOL v27 = v30 + v27 != 0;
                *int v25 = v27;
                --v29;
              }
              while (v29 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            int v263 = v1019;
LABEL_284:
            LODWORD(__b) = *((_DWORD *)v263 - 1);
            int v1019 = v263 - 4;
            v1021 -= 8;
            size_t v273 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v273;
            int v74 = v1025;
            unint64_t v75 = v1027;
            size_t v274 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v274)
              {
                unint64_t v622 = 0;
                uint64_t v623 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                uint64_t v624 = (BOOL *)v1012;
                size_t v1001 = __len;
                int v625 = (int)__b;
                int v626 = __b + 1;
                do
                {
                  uint64_t v627 = 0;
                  if ((v623 & 0x80000000) == 0)
                  {
                    uint64_t v628 = v623;
                    int v629 = (int)v622;
                    do
                    {
                      ldiv_t v630 = ldiv(v629, v74[v628]);
                      int v629 = v630.quot;
                      v627 += v75[v628--] * v630.rem;
                    }
                    while (v628 != -1);
                  }
                  *uint64_t v624 = 0;
                  if (v625 >= 1)
                  {
                    BOOL v631 = 0;
                    int v632 = (unsigned __int8 *)(v1001 + (int)v627);
                    unsigned int v633 = v626;
                    do
                    {
                      int v634 = *v632++;
                      BOOL v631 = v634 + v631 != 0;
                      *uint64_t v624 = v631;
                      --v633;
                    }
                    while (v633 > 1);
                  }
                  unint64_t v622 = (int *)((char *)v622 + 1);
                  ++v624;
                }
                while (v622 != v274);
              }
            }
            else if (v274)
            {
              unint64_t v275 = 0;
              uint64_t v276 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v277 = 0;
                if ((v276 & 0x80000000) == 0)
                {
                  uint64_t v278 = v276;
                  int v279 = v275;
                  do
                  {
                    ldiv_t v280 = ldiv(v279, v74[v278]);
                    int v279 = v280.quot;
                    v277 += v75[v278--] * v280.rem;
                  }
                  while (v278 != -1);
                }
                int v1011 = v277;
                *(unsigned char *)unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                ldiv_t v281 = operator new(0x30uLL);
                *ldiv_t v281 = &unk_27062CAF8;
                v281[1] = &v1009;
                v281[2] = &__len;
                v281[3] = &v1011;
                v281[4] = &v1012;
                v281[5] = &__b;
                uint64_t v1024 = v281;
                uint64_t v1032 = 0;
                int v282 = operator new(0x28uLL);
                *int v282 = &unk_27062B578;
                v282[1] = &v1018;
                v282[2] = &v1020;
                v282[3] = v1031;
                v282[4] = v1023;
                int v1027 = v282;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v275;
                unsigned int v1012 = (int *)((char *)v1012 + 1);
              }
              while ((unint64_t)(*a2)[6] > v275);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              uint64_t v615 = v1019;
              goto LABEL_775;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            uint64_t v726 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v727 = 0;
              uint64_t v728 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v729 = 0;
                if ((v728 & 0x80000000) == 0)
                {
                  uint64_t v730 = v728;
                  int v731 = v727;
                  do
                  {
                    ldiv_t v732 = ldiv(v731, v74[v730]);
                    int v731 = v732.quot;
                    v729 += v75[v730--] * v732.rem;
                  }
                  while (v730 != -1);
                }
                LODWORD(v1012) = v729;
                LOBYTE(v1011) = 0;
                uint64_t v1024 = 0;
                ldiv_t v733 = operator new(0x28uLL);
                *ldiv_t v733 = &unk_27062CBF8;
                v733[1] = &__b;
                v733[2] = &v1011;
                v733[3] = &__len;
                v733[4] = &v1012;
                uint64_t v1024 = v733;
                uint64_t v1032 = 0;
                uint64_t v734 = operator new(0x28uLL);
                *uint64_t v734 = &unk_27062B578;
                v734[1] = &v1018;
                v734[2] = &v1020;
                v734[3] = v1031;
                v734[4] = v1023;
                int v1027 = v734;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *(unsigned char *)uint64_t v726 = v1011;
                uint64_t v726 = (int *)((char *)v726 + 1);
                ++v727;
              }
              while ((unint64_t)(*a2)[6] > v727);
            }
            goto LABEL_1093;
          }
          uint64_t v615 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_775:
            int v1011 = *((_DWORD *)v615 - 1);
            size_t v716 = *((void *)v1021 - 1);
            int v1019 = v615 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v716;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v717 = (unint64_t)(*a2)[6];
            if (v1019 == v1018)
            {
              if (v717)
              {
                int v902 = 0;
                int v903 = (unsigned __int8 *)__b;
                uint64_t v904 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                size_t v905 = __len;
                int v1004 = v1012;
                int v906 = v1011;
                do
                {
                  uint64_t v907 = 0;
                  if ((v904 & 0x80000000) == 0)
                  {
                    uint64_t v908 = v904;
                    int v909 = v902;
                    do
                    {
                      ldiv_t v910 = ldiv(v909, v74[v908]);
                      int v909 = v910.quot;
                      v907 += v75[v908--] * v910.rem;
                    }
                    while (v908 != -1);
                  }
                  if (v905) {
                    bzero(v903, v905);
                  }
                  if (v906 >= 1)
                  {
                    int v911 = 0;
                    int v912 = (char *)v1004 + (int)v907;
                    do
                    {
                      if (v905)
                      {
                        for (uint64_t n = 0; n != v905; ++n)
                          v903[n] = v903[n] + v912[n] != 0;
                        v912 += n;
                      }
                      ++v911;
                    }
                    while (v911 != v906);
                  }
                  v903 += v905;
                  __b = v903;
                  v902 += v905;
                }
                while (v717 > v902);
              }
            }
            else if (v717)
            {
              int v718 = 0;
              uint64_t v719 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v720 = 0;
                if ((v719 & 0x80000000) == 0)
                {
                  uint64_t v721 = v719;
                  int v722 = v718;
                  do
                  {
                    ldiv_t v723 = ldiv(v722, v74[v721]);
                    int v722 = v723.quot;
                    v720 += v75[v721--] * v723.rem;
                  }
                  while (v721 != -1);
                }
                int v1009 = v720;
                if (__len) {
                  bzero(__b, __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v724 = operator new(0x38uLL);
                *ldiv_t v724 = &unk_27062CB78;
                v724[1] = &v1022;
                v724[2] = &v1012;
                v724[3] = &v1009;
                v724[4] = &__b;
                v724[5] = &v1011;
                v724[6] = &__len;
                uint64_t v1024 = v724;
                uint64_t v1032 = 0;
                unint64_t v725 = operator new(0x28uLL);
                *unint64_t v725 = &unk_27062B578;
                v725[1] = &v1018;
                v725[2] = &v1020;
                v725[3] = v1031;
                v725[4] = v1023;
                int v1027 = v725;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + __len;
                v718 += __len;
              }
              while ((unint64_t)(*a2)[6] > v718);
            }
            goto LABEL_1093;
          }
          uint64_t v707 = *((int *)v1019 - 1);
          size_t v708 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          size_t v709 = (*a2)[6];
          if (v709)
          {
            LODWORD(v710) = 0;
            unint64_t v711 = (*a2)[19];
            uint64_t v712 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v708) {
                bzero(v711, v708);
              }
              if ((int)v707 >= 1)
              {
                int v713 = 0;
                uint64_t v714 = v712;
                do
                {
                  if (v708)
                  {
                    for (iuint64_t i = 0; ii != v708; ++ii)
                      *((unsigned char *)v711 + ii) = *((unsigned __int8 *)v711 + ii) + *(unsigned __int8 *)(v714 + ii) != 0;
                    v714 += ii;
                  }
                  ++v713;
                }
                while (v713 != v707);
              }
              v712 += v708 * v707;
              unint64_t v711 = (int *)((char *)v711 + v708);
              unint64_t v710 = (int)v710 + (int)v708;
            }
            while (v710 < (unint64_t)v709);
          }
          goto LABEL_1097;
        case 1:
          uint64_t v159 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v159, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            ldiv_t v338 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_356;
            }
            if ((*a2)[6])
            {
              unint64_t v339 = 0;
              uint64_t v340 = *(int *)v1018;
              int v341 = (*a2)[19];
              unint64_t v342 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *(unsigned char *)int v341 = 0;
                if ((int)v340 >= 1)
                {
                  int v343 = 0;
                  unsigned int v344 = v340 + 1;
                  int v345 = v342;
                  do
                  {
                    int v346 = *v345++;
                    v343 += v346;
                    *(unsigned char *)int v341 = v343;
                    --v344;
                  }
                  while (v344 > 1);
                }
                ++v339;
                int v341 = (int *)((char *)v341 + 1);
                v342 += v340;
              }
              while ((unint64_t)(*a2)[6] > v339);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            int v160 = (*a2)[19];
            *(unsigned char *)int v160 = 0;
            int v161 = *(_DWORD *)(*(void *)a1 + 48);
            if (v161 >= 1)
            {
              int v162 = 0;
              unsigned int v163 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v164 = v161 + 1;
              do
              {
                int v165 = *v163++;
                v162 += v165;
                *(unsigned char *)int v160 = v162;
                --v164;
              }
              while (v164 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            ldiv_t v338 = v1019;
LABEL_356:
            LODWORD(__b) = *((_DWORD *)v338 - 1);
            int v1019 = v338 - 4;
            v1021 -= 8;
            size_t v347 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v347;
            int v74 = v1025;
            unint64_t v75 = v1027;
            uint64_t v348 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v348)
              {
                unint64_t v635 = 0;
                uint64_t v636 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v637 = 0;
                  if ((v636 & 0x80000000) == 0)
                  {
                    uint64_t v638 = v636;
                    int v639 = v635;
                    do
                    {
                      ldiv_t v640 = ldiv(v639, v74[v638]);
                      int v639 = v640.quot;
                      v637 += v75[v638--] * v640.rem;
                    }
                    while (v638 != -1);
                  }
                  *(unsigned char *)unsigned int v1012 = 0;
                  unint64_t v641 = v1012;
                  if ((int)__b >= 1)
                  {
                    int v642 = (unsigned __int8 *)(__len + (int)v637);
                    int v643 = *(unsigned __int8 *)v1012;
                    unsigned int v644 = __b + 1;
                    do
                    {
                      int v645 = *v642++;
                      v643 += v645;
                      *(unsigned char *)unint64_t v641 = v643;
                      --v644;
                    }
                    while (v644 > 1);
                    unint64_t v641 = v1012;
                  }
                  ++v635;
                  unsigned int v1012 = (int *)((char *)v641 + 1);
                }
                while ((unint64_t)(*a2)[6] > v635);
              }
            }
            else if (v348)
            {
              unint64_t v349 = 0;
              uint64_t v350 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v351 = 0;
                if ((v350 & 0x80000000) == 0)
                {
                  uint64_t v352 = v350;
                  int v353 = v349;
                  do
                  {
                    ldiv_t v354 = ldiv(v353, v74[v352]);
                    int v353 = v354.quot;
                    v351 += v75[v352--] * v354.rem;
                  }
                  while (v352 != -1);
                }
                int v1011 = v351;
                *(unsigned char *)unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                uint64_t v355 = operator new(0x30uLL);
                *uint64_t v355 = &unk_27062CC78;
                v355[1] = &v1009;
                v355[2] = &__len;
                v355[3] = &v1011;
                v355[4] = &v1012;
                v355[5] = &__b;
                uint64_t v1024 = v355;
                uint64_t v1032 = 0;
                int v356 = operator new(0x28uLL);
                *int v356 = &unk_27062B578;
                v356[1] = &v1018;
                v356[2] = &v1020;
                v356[3] = v1031;
                v356[4] = v1023;
                int v1027 = v356;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v349;
                unsigned int v1012 = (int *)((char *)v1012 + 1);
              }
              while ((unint64_t)(*a2)[6] > v349);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              int v616 = v1019;
              goto LABEL_806;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            unint64_t v753 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v754 = 0;
              uint64_t v755 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v756 = 0;
                if ((v755 & 0x80000000) == 0)
                {
                  uint64_t v757 = v755;
                  int v758 = v754;
                  do
                  {
                    ldiv_t v759 = ldiv(v758, v74[v757]);
                    int v758 = v759.quot;
                    v756 += v75[v757--] * v759.rem;
                  }
                  while (v757 != -1);
                }
                LODWORD(v1012) = v756;
                LOBYTE(v1011) = 0;
                uint64_t v1024 = 0;
                ldiv_t v760 = operator new(0x28uLL);
                *ldiv_t v760 = &unk_27062CD78;
                v760[1] = &__b;
                v760[2] = &v1011;
                v760[3] = &__len;
                v760[4] = &v1012;
                uint64_t v1024 = v760;
                uint64_t v1032 = 0;
                int v761 = operator new(0x28uLL);
                *int v761 = &unk_27062B578;
                v761[1] = &v1018;
                v761[2] = &v1020;
                v761[3] = v1031;
                v761[4] = v1023;
                int v1027 = v761;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *(unsigned char *)unint64_t v753 = v1011;
                unint64_t v753 = (int *)((char *)v753 + 1);
                ++v754;
              }
              while ((unint64_t)(*a2)[6] > v754);
            }
            goto LABEL_1093;
          }
          int v616 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_806:
            int v1011 = *((_DWORD *)v616 - 1);
            size_t v743 = *((void *)v1021 - 1);
            int v1019 = v616 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v743;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            size_t v744 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v744)
              {
                int v914 = 0;
                uint64_t v915 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v916 = 0;
                  if ((v915 & 0x80000000) != 0)
                  {
                    int v919 = a2;
                  }
                  else
                  {
                    uint64_t v917 = v915;
                    int v918 = v914;
                    int v919 = a2;
                    do
                    {
                      ldiv_t v920 = ldiv(v918, v74[v917]);
                      int v918 = v920.quot;
                      v916 += v75[v917--] * v920.rem;
                    }
                    while (v917 != -1);
                  }
                  ldiv_t v921 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    size_t v922 = __len;
                    ldiv_t v921 = __b;
                  }
                  else
                  {
                    size_t v922 = 0;
                  }
                  int v923 = v1011;
                  if (v1011 >= 1)
                  {
                    int v924 = 0;
                    int v925 = (char *)v1012 + (int)v916;
                    do
                    {
                      size_t v926 = v922;
                      for (juint64_t j = v921; v926; --v926)
                      {
                        char v928 = *v925++;
                        *jj++ += v928;
                      }
                      ++v924;
                    }
                    while (v924 != v923);
                    size_t v922 = __len;
                    ldiv_t v921 = __b;
                  }
                  __b = &v921[v922];
                  v914 += v922;
                }
                while ((unint64_t)(*v919)[6] > v914);
              }
            }
            else if (v744)
            {
              int v745 = 0;
              uint64_t v746 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v747 = 0;
                if ((v746 & 0x80000000) == 0)
                {
                  uint64_t v748 = v746;
                  int v749 = v745;
                  do
                  {
                    ldiv_t v750 = ldiv(v749, v74[v748]);
                    int v749 = v750.quot;
                    v747 += v75[v748--] * v750.rem;
                  }
                  while (v748 != -1);
                }
                int v1009 = v747;
                if (__len) {
                  bzero(__b, __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v751 = operator new(0x38uLL);
                *ldiv_t v751 = &unk_27062CCF8;
                v751[1] = &v1022;
                v751[2] = &v1012;
                v751[3] = &v1009;
                v751[4] = &__b;
                v751[5] = &v1011;
                v751[6] = &__len;
                uint64_t v1024 = v751;
                uint64_t v1032 = 0;
                uint64_t v752 = operator new(0x28uLL);
                void *v752 = &unk_27062B578;
                v752[1] = &v1018;
                v752[2] = &v1020;
                v752[3] = v1031;
                v752[4] = v1023;
                int v1027 = v752;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + __len;
                v745 += __len;
              }
              while ((unint64_t)(*a2)[6] > v745);
            }
            goto LABEL_1093;
          }
          uint64_t v735 = *((int *)v1019 - 1);
          size_t v736 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v737) = 0;
            unint64_t v738 = (*a2)[19];
            uint64_t v739 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v736) {
                bzero(v738, v736);
              }
              if ((int)v735 >= 1)
              {
                int v740 = 0;
                uint64_t v741 = v739;
                do
                {
                  if (v736)
                  {
                    for (kuint64_t k = 0; kk != v736; ++kk)
                      *((unsigned char *)v738 + kk) += *(unsigned char *)(v741 + kk);
                    v741 += kk;
                  }
                  ++v740;
                }
                while (v740 != v735);
              }
              v739 += v736 * v735;
              unint64_t v738 = (int *)((char *)v738 + v736);
              unint64_t v737 = (int)v737 + (int)v736;
            }
            while (v737 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1097;
        case 2:
          int v166 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v166, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            ldiv_t v357 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_374;
            }
            unint64_t v358 = (*a2)[6];
            if (v358)
            {
              int v359 = 0;
              uint64_t v360 = *(int *)v1018;
              uint64_t v361 = (*a2)[19];
              uint64_t v362 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *uint64_t v361 = 0;
                if ((int)v360 >= 1)
                {
                  int v363 = 0;
                  unsigned int v364 = v360 + 1;
                  int v365 = v362;
                  do
                  {
                    int v366 = *v365++;
                    v363 += v366;
                    *uint64_t v361 = v363;
                    --v364;
                  }
                  while (v364 > 1);
                }
                int v359 = (int *)((char *)v359 + 1);
                ++v361;
                v362 += v360;
              }
              while (v359 != v358);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            int v167 = (*a2)[19];
            *int v167 = 0;
            int v168 = *(_DWORD *)(*(void *)a1 + 48);
            if (v168 >= 1)
            {
              int v169 = 0;
              unsigned int v170 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v171 = v168 + 1;
              do
              {
                int v172 = *v170++;
                v169 += v172;
                *int v167 = v169;
                --v171;
              }
              while (v171 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            ldiv_t v357 = v1019;
LABEL_374:
            LODWORD(__b) = *((_DWORD *)v357 - 1);
            int v1019 = v357 - 4;
            v1021 -= 8;
            size_t v367 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v367;
            int v74 = v1025;
            unint64_t v75 = v1027;
            uint64_t v368 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v368)
              {
                int v646 = 0;
                uint64_t v647 = v1012;
                size_t v648 = __len;
                uint64_t v649 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v650 = 0;
                  if ((v649 & 0x80000000) == 0)
                  {
                    uint64_t v651 = v649;
                    int v652 = (int)v646;
                    do
                    {
                      ldiv_t v653 = ldiv(v652, v74[v651]);
                      int v652 = v653.quot;
                      v650 += v75[v651--] * v653.rem;
                    }
                    while (v651 != -1);
                  }
                  *uint64_t v647 = 0;
                  if ((int)__b >= 1)
                  {
                    int v654 = 0;
                    int v655 = (unsigned __int8 *)(v648 + (int)v650);
                    unsigned int v656 = __b + 1;
                    do
                    {
                      int v657 = *v655++;
                      v654 += v657;
                      *uint64_t v647 = v654;
                      --v656;
                    }
                    while (v656 > 1);
                  }
                  int v646 = (int *)((char *)v646 + 1);
                  ++v647;
                }
                while (v646 != v368);
              }
            }
            else if (v368)
            {
              unint64_t v369 = 0;
              uint64_t v370 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v371 = 0;
                if ((v370 & 0x80000000) == 0)
                {
                  uint64_t v372 = v370;
                  int v373 = v369;
                  do
                  {
                    ldiv_t v374 = ldiv(v373, v74[v372]);
                    int v373 = v374.quot;
                    v371 += v75[v372--] * v374.rem;
                  }
                  while (v372 != -1);
                }
                int v1011 = v371;
                *unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                uint64_t v375 = operator new(0x30uLL);
                *uint64_t v375 = &unk_27062CDF8;
                v375[1] = &v1009;
                v375[2] = &__len;
                v375[3] = &v1011;
                v375[4] = &v1012;
                v375[5] = &__b;
                uint64_t v1024 = v375;
                uint64_t v1032 = 0;
                int v376 = operator new(0x28uLL);
                void *v376 = &unk_27062B578;
                v376[1] = &v1018;
                v376[2] = &v1020;
                v376[3] = v1031;
                v376[4] = v1023;
                int v1027 = v376;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v369;
                ++v1012;
              }
              while ((unint64_t)(*a2)[6] > v369);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              uint64_t v617 = v1019;
              goto LABEL_837;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            uint64_t v781 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v782 = 0;
              uint64_t v783 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v784 = 0;
                if ((v783 & 0x80000000) == 0)
                {
                  uint64_t v785 = v783;
                  int v786 = v782;
                  do
                  {
                    ldiv_t v787 = ldiv(v786, v74[v785]);
                    int v786 = v787.quot;
                    v784 += v75[v785--] * v787.rem;
                  }
                  while (v785 != -1);
                }
                LODWORD(v1012) = v784;
                LODWORD(__b) = 0;
                uint64_t v1024 = 0;
                ldiv_t v788 = operator new(0x28uLL);
                *ldiv_t v788 = &unk_27062CEF8;
                v788[1] = &v1011;
                v788[2] = &__b;
                v788[3] = &__len;
                v788[4] = &v1012;
                uint64_t v1024 = v788;
                uint64_t v1032 = 0;
                int v789 = operator new(0x28uLL);
                *int v789 = &unk_27062B578;
                v789[1] = &v1018;
                v789[2] = &v1020;
                v789[3] = v1031;
                v789[4] = v1023;
                int v1027 = v789;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *v781++ = (int)__b;
                ++v782;
              }
              while ((unint64_t)(*a2)[6] > v782);
            }
            goto LABEL_1093;
          }
          uint64_t v617 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_837:
            int v1011 = *((_DWORD *)v617 - 1);
            size_t v771 = *((void *)v1021 - 1);
            int v1019 = v617 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v771;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v772 = (unint64_t)(*a2)[6];
            if (v1019 == v1018)
            {
              if (v772)
              {
                int v929 = 0;
                int v930 = (char *)__b;
                uint64_t v931 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                size_t v932 = __len;
                uint64_t v1005 = v1012;
                size_t v933 = 4 * __len;
                do
                {
                  uint64_t v934 = 0;
                  if ((v931 & 0x80000000) == 0)
                  {
                    uint64_t v935 = v931;
                    int v936 = v929;
                    do
                    {
                      ldiv_t v937 = ldiv(v936, v74[v935]);
                      int v936 = v937.quot;
                      v934 += v75[v935--] * v937.rem;
                    }
                    while (v935 != -1);
                  }
                  if (v932) {
                    bzero(v930, v933);
                  }
                  int v938 = v1011;
                  if (v1011 >= 1)
                  {
                    int v939 = 0;
                    int v940 = (char *)v1005 + (int)v934;
                    do
                    {
                      if (v932)
                      {
                        for (muint64_t m = 0; mm != v932; ++mm)
                          *(_DWORD *)&v930[4 * mm] += v940[mm];
                        v940 += mm;
                      }
                      ++v939;
                    }
                    while (v939 != v938);
                  }
                  v930 += v933;
                  __b = v930;
                  v929 += v932;
                }
                while (v772 > v929);
              }
            }
            else if (v772)
            {
              int v773 = 0;
              uint64_t v774 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v775 = 0;
                if ((v774 & 0x80000000) == 0)
                {
                  uint64_t v776 = v774;
                  int v777 = v773;
                  do
                  {
                    ldiv_t v778 = ldiv(v777, v74[v776]);
                    int v777 = v778.quot;
                    v775 += v75[v776--] * v778.rem;
                  }
                  while (v776 != -1);
                }
                int v1009 = v775;
                if (__len) {
                  bzero(__b, 4 * __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v779 = operator new(0x38uLL);
                *ldiv_t v779 = &unk_27062CE78;
                v779[1] = &v1022;
                v779[2] = &v1012;
                v779[3] = &v1009;
                v779[4] = &__b;
                v779[5] = &v1011;
                v779[6] = &__len;
                uint64_t v1024 = v779;
                uint64_t v1032 = 0;
                uint64_t v780 = operator new(0x28uLL);
                *uint64_t v780 = &unk_27062B578;
                v780[1] = &v1018;
                v780[2] = &v1020;
                v780[3] = v1031;
                v780[4] = v1023;
                int v1027 = v780;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + 4 * __len;
                v773 += __len;
              }
              while ((unint64_t)(*a2)[6] > v773);
            }
            goto LABEL_1093;
          }
          uint64_t v762 = *((int *)v1019 - 1);
          uint64_t v763 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          uint64_t v764 = (*a2)[6];
          if (v764)
          {
            LODWORD(v765) = 0;
            unint64_t v766 = (*a2)[19];
            uint64_t v767 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v763) {
                bzero(v766, 4 * v763);
              }
              if ((int)v762 >= 1)
              {
                int v768 = 0;
                uint64_t v769 = v767;
                do
                {
                  if (v763)
                  {
                    for (nuint64_t n = 0; nn != v763; ++nn)
                      v766[nn] += *(unsigned __int8 *)(v769 + nn);
                    v769 += nn;
                  }
                  ++v768;
                }
                while (v768 != v762);
              }
              v767 += v763 * v762;
              v766 += v763;
              unint64_t v765 = (int)v765 + (int)v763;
            }
            while (v765 < (unint64_t)v764);
          }
          goto LABEL_1097;
        case 3:
          unint64_t v173 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v173, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            ldiv_t v377 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_392;
            }
            if ((*a2)[6])
            {
              unint64_t v378 = 0;
              uint64_t v379 = *(int *)v1018;
              int v380 = (*a2)[19];
              unint64_t v381 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *(unsigned char *)int v380 = 0;
                if ((int)v379 >= 1)
                {
                  int v382 = 0;
                  unsigned int v383 = v379 + 1;
                  uint64_t v384 = v381;
                  do
                  {
                    int v385 = *v384++;
                    v382 += v385;
                    *(unsigned char *)int v380 = v382;
                    --v383;
                  }
                  while (v383 > 1);
                }
                ++v378;
                int v380 = (int *)((char *)v380 + 1);
                v381 += v379;
              }
              while ((unint64_t)(*a2)[6] > v378);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            int v174 = (*a2)[19];
            *(unsigned char *)int v174 = 0;
            int v175 = *(_DWORD *)(*(void *)a1 + 48);
            if (v175 >= 1)
            {
              int v176 = 0;
              unsigned int v177 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v178 = v175 + 1;
              do
              {
                int v179 = *v177++;
                v176 += v179;
                *(unsigned char *)int v174 = v176;
                --v178;
              }
              while (v178 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            ldiv_t v377 = v1019;
LABEL_392:
            LODWORD(__b) = *((_DWORD *)v377 - 1);
            int v1019 = v377 - 4;
            v1021 -= 8;
            size_t v386 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v386;
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v387 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v387)
              {
                unint64_t v658 = 0;
                uint64_t v659 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v660 = 0;
                  if ((v659 & 0x80000000) == 0)
                  {
                    uint64_t v661 = v659;
                    int v662 = v658;
                    do
                    {
                      ldiv_t v663 = ldiv(v662, v74[v661]);
                      int v662 = v663.quot;
                      v660 += v75[v661--] * v663.rem;
                    }
                    while (v661 != -1);
                  }
                  *(unsigned char *)unsigned int v1012 = 0;
                  uint64_t v664 = v1012;
                  if ((int)__b >= 1)
                  {
                    uint64_t v665 = (unsigned __int8 *)(__len + (int)v660);
                    int v666 = *(unsigned __int8 *)v1012;
                    unsigned int v667 = __b + 1;
                    do
                    {
                      int v668 = *v665++;
                      v666 += v668;
                      *(unsigned char *)uint64_t v664 = v666;
                      --v667;
                    }
                    while (v667 > 1);
                    uint64_t v664 = v1012;
                  }
                  ++v658;
                  unsigned int v1012 = (int *)((char *)v664 + 1);
                }
                while ((unint64_t)(*a2)[6] > v658);
              }
            }
            else if (v387)
            {
              unint64_t v388 = 0;
              uint64_t v389 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v390 = 0;
                if ((v389 & 0x80000000) == 0)
                {
                  uint64_t v391 = v389;
                  int v392 = v388;
                  do
                  {
                    ldiv_t v393 = ldiv(v392, v74[v391]);
                    int v392 = v393.quot;
                    v390 += v75[v391--] * v393.rem;
                  }
                  while (v391 != -1);
                }
                int v1011 = v390;
                *(unsigned char *)unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                uint64_t v394 = operator new(0x30uLL);
                *uint64_t v394 = &unk_27062CF78;
                v394[1] = &v1009;
                v394[2] = &__len;
                v394[3] = &v1011;
                v394[4] = &v1012;
                v394[5] = &__b;
                uint64_t v1024 = v394;
                uint64_t v1032 = 0;
                int v395 = operator new(0x28uLL);
                *int v395 = &unk_27062B578;
                v395[1] = &v1018;
                v395[2] = &v1020;
                v395[3] = v1031;
                v395[4] = v1023;
                int v1027 = v395;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v388;
                unsigned int v1012 = (int *)((char *)v1012 + 1);
              }
              while ((unint64_t)(*a2)[6] > v388);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              unint64_t v618 = v1019;
              goto LABEL_868;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            int v808 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v809 = 0;
              uint64_t v810 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v811 = 0;
                if ((v810 & 0x80000000) == 0)
                {
                  uint64_t v812 = v810;
                  int v813 = v809;
                  do
                  {
                    ldiv_t v814 = ldiv(v813, v74[v812]);
                    int v813 = v814.quot;
                    v811 += v75[v812--] * v814.rem;
                  }
                  while (v812 != -1);
                }
                LODWORD(v1012) = v811;
                LOBYTE(v1011) = 0;
                uint64_t v1024 = 0;
                ldiv_t v815 = operator new(0x28uLL);
                void *v815 = &unk_27062D078;
                v815[1] = &__b;
                v815[2] = &v1011;
                v815[3] = &__len;
                v815[4] = &v1012;
                uint64_t v1024 = v815;
                uint64_t v1032 = 0;
                float v816 = operator new(0x28uLL);
                *float v816 = &unk_27062B578;
                v816[1] = &v1018;
                v816[2] = &v1020;
                v816[3] = v1031;
                v816[4] = v1023;
                int v1027 = v816;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *(unsigned char *)int v808 = v1011;
                int v808 = (int *)((char *)v808 + 1);
                ++v809;
              }
              while ((unint64_t)(*a2)[6] > v809);
            }
            goto LABEL_1093;
          }
          unint64_t v618 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_868:
            int v1011 = *((_DWORD *)v618 - 1);
            size_t v798 = *((void *)v1021 - 1);
            int v1019 = v618 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v798;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            size_t v799 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v799)
              {
                int v942 = 0;
                uint64_t v943 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v944 = 0;
                  if ((v943 & 0x80000000) != 0)
                  {
                    int v947 = a2;
                  }
                  else
                  {
                    uint64_t v945 = v943;
                    int v946 = v942;
                    int v947 = a2;
                    do
                    {
                      ldiv_t v948 = ldiv(v946, v74[v945]);
                      int v946 = v948.quot;
                      v944 += v75[v945--] * v948.rem;
                    }
                    while (v945 != -1);
                  }
                  ldiv_t v949 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    size_t v950 = __len;
                    ldiv_t v949 = __b;
                  }
                  else
                  {
                    size_t v950 = 0;
                  }
                  int v951 = v1011;
                  if (v1011 >= 1)
                  {
                    int v952 = 0;
                    int v953 = (char *)v1012 + (int)v944;
                    do
                    {
                      size_t v954 = v950;
                      for (uint64_t i1 = v949; v954; --v954)
                      {
                        char v956 = *v953++;
                        *i1++ += v956;
                      }
                      ++v952;
                    }
                    while (v952 != v951);
                    size_t v950 = __len;
                    ldiv_t v949 = __b;
                  }
                  __b = &v949[v950];
                  v942 += v950;
                }
                while ((unint64_t)(*v947)[6] > v942);
              }
            }
            else if (v799)
            {
              int v800 = 0;
              uint64_t v801 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v802 = 0;
                if ((v801 & 0x80000000) == 0)
                {
                  uint64_t v803 = v801;
                  int v804 = v800;
                  do
                  {
                    ldiv_t v805 = ldiv(v804, v74[v803]);
                    int v804 = v805.quot;
                    v802 += v75[v803--] * v805.rem;
                  }
                  while (v803 != -1);
                }
                int v1009 = v802;
                if (__len) {
                  bzero(__b, __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v806 = operator new(0x38uLL);
                void *v806 = &unk_27062CFF8;
                v806[1] = &v1022;
                v806[2] = &v1012;
                v806[3] = &v1009;
                v806[4] = &__b;
                v806[5] = &v1011;
                v806[6] = &__len;
                uint64_t v1024 = v806;
                uint64_t v1032 = 0;
                unint64_t v807 = operator new(0x28uLL);
                *unint64_t v807 = &unk_27062B578;
                v807[1] = &v1018;
                v807[2] = &v1020;
                v807[3] = v1031;
                v807[4] = v1023;
                int v1027 = v807;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + __len;
                v800 += __len;
              }
              while ((unint64_t)(*a2)[6] > v800);
            }
            goto LABEL_1093;
          }
          uint64_t v790 = *((int *)v1019 - 1);
          size_t v791 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v792) = 0;
            unint64_t v793 = (*a2)[19];
            uint64_t v794 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v791) {
                bzero(v793, v791);
              }
              if ((int)v790 >= 1)
              {
                int v795 = 0;
                uint64_t v796 = v794;
                do
                {
                  if (v791)
                  {
                    for (uint64_t i2 = 0; i2 != v791; ++i2)
                      *((unsigned char *)v793 + i2) += *(unsigned char *)(v796 + i2);
                    v796 += i2;
                  }
                  ++v795;
                }
                while (v795 != v790);
              }
              v794 += v791 * v790;
              unint64_t v793 = (int *)((char *)v793 + v791);
              unint64_t v792 = (int)v792 + (int)v791;
            }
            while (v792 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1097;
        case 4:
          int v180 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v180, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            ldiv_t v396 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_410;
            }
            uint64_t v397 = (*a2)[6];
            if (v397)
            {
              char v398 = 0;
              uint64_t v399 = *(int *)v1018;
              int v400 = (*a2)[19];
              unint64_t v401 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *int v400 = 0;
                if ((int)v399 >= 1)
                {
                  int v402 = 0;
                  unsigned int v403 = v399 + 1;
                  uint64_t v404 = v401;
                  do
                  {
                    int v405 = *v404++;
                    v402 += v405;
                    *int v400 = v402;
                    --v403;
                  }
                  while (v403 > 1);
                }
                char v398 = (int *)((char *)v398 + 1);
                ++v400;
                v401 += v399;
              }
              while (v398 != v397);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            char v181 = (*a2)[19];
            *char v181 = 0;
            int v182 = *(_DWORD *)(*(void *)a1 + 48);
            if (v182 >= 1)
            {
              int v183 = 0;
              int v184 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v185 = v182 + 1;
              do
              {
                int v186 = *v184++;
                v183 += v186;
                *char v181 = v183;
                --v185;
              }
              while (v185 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            ldiv_t v396 = v1019;
LABEL_410:
            LODWORD(__b) = *((_DWORD *)v396 - 1);
            int v1019 = v396 - 4;
            v1021 -= 8;
            size_t v406 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v406;
            int v74 = v1025;
            unint64_t v75 = v1027;
            float v407 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v407)
              {
                int v669 = 0;
                int v670 = v1012;
                size_t v671 = __len;
                uint64_t v672 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                do
                {
                  uint64_t v673 = 0;
                  if ((v672 & 0x80000000) == 0)
                  {
                    uint64_t v674 = v672;
                    int v675 = (int)v669;
                    do
                    {
                      ldiv_t v676 = ldiv(v675, v74[v674]);
                      int v675 = v676.quot;
                      v673 += v75[v674--] * v676.rem;
                    }
                    while (v674 != -1);
                  }
                  *int v670 = 0;
                  if ((int)__b >= 1)
                  {
                    int v677 = 0;
                    uint64_t v678 = (unsigned __int8 *)(v671 + (int)v673);
                    unsigned int v679 = __b + 1;
                    do
                    {
                      int v680 = *v678++;
                      v677 += v680;
                      *int v670 = v677;
                      --v679;
                    }
                    while (v679 > 1);
                  }
                  int v669 = (int *)((char *)v669 + 1);
                  ++v670;
                }
                while (v669 != v407);
              }
            }
            else if (v407)
            {
              unint64_t v408 = 0;
              uint64_t v409 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v410 = 0;
                if ((v409 & 0x80000000) == 0)
                {
                  uint64_t v411 = v409;
                  int v412 = v408;
                  do
                  {
                    ldiv_t v413 = ldiv(v412, v74[v411]);
                    int v412 = v413.quot;
                    v410 += v75[v411--] * v413.rem;
                  }
                  while (v411 != -1);
                }
                int v1011 = v410;
                *unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                uint64_t v414 = operator new(0x30uLL);
                *uint64_t v414 = &unk_27062D0F8;
                v414[1] = &v1009;
                v414[2] = &__len;
                v414[3] = &v1011;
                v414[4] = &v1012;
                v414[5] = &__b;
                uint64_t v1024 = v414;
                uint64_t v1032 = 0;
                int v415 = operator new(0x28uLL);
                *int v415 = &unk_27062B578;
                v415[1] = &v1018;
                v415[2] = &v1020;
                v415[3] = v1031;
                v415[4] = v1023;
                int v1027 = v415;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v408;
                ++v1012;
              }
              while ((unint64_t)(*a2)[6] > v408);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              int v619 = v1019;
              goto LABEL_899;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            uint64_t v836 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v837 = 0;
              uint64_t v838 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v839 = 0;
                if ((v838 & 0x80000000) == 0)
                {
                  uint64_t v840 = v838;
                  int v841 = v837;
                  do
                  {
                    ldiv_t v842 = ldiv(v841, v74[v840]);
                    int v841 = v842.quot;
                    v839 += v75[v840--] * v842.rem;
                  }
                  while (v840 != -1);
                }
                LODWORD(v1012) = v839;
                LODWORD(__b) = 0;
                uint64_t v1024 = 0;
                ldiv_t v843 = operator new(0x28uLL);
                void *v843 = &unk_27062D1F8;
                v843[1] = &v1011;
                v843[2] = &__b;
                v843[3] = &__len;
                v843[4] = &v1012;
                uint64_t v1024 = v843;
                uint64_t v1032 = 0;
                int v844 = operator new(0x28uLL);
                *int v844 = &unk_27062B578;
                v844[1] = &v1018;
                v844[2] = &v1020;
                v844[3] = v1031;
                v844[4] = v1023;
                int v1027 = v844;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *v836++ = (int)__b;
                ++v837;
              }
              while ((unint64_t)(*a2)[6] > v837);
            }
            goto LABEL_1093;
          }
          int v619 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_899:
            int v1011 = *((_DWORD *)v619 - 1);
            size_t v826 = *((void *)v1021 - 1);
            int v1019 = v619 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v826;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v827 = (unint64_t)(*a2)[6];
            if (v1019 == v1018)
            {
              if (v827)
              {
                int v957 = 0;
                int v958 = (char *)__b;
                uint64_t v959 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                size_t v960 = __len;
                int v1006 = v1012;
                size_t v961 = 4 * __len;
                do
                {
                  uint64_t v962 = 0;
                  if ((v959 & 0x80000000) == 0)
                  {
                    uint64_t v963 = v959;
                    int v964 = v957;
                    do
                    {
                      ldiv_t v965 = ldiv(v964, v74[v963]);
                      int v964 = v965.quot;
                      v962 += v75[v963--] * v965.rem;
                    }
                    while (v963 != -1);
                  }
                  if (v960) {
                    bzero(v958, v961);
                  }
                  int v966 = v1011;
                  if (v1011 >= 1)
                  {
                    int v967 = 0;
                    int v968 = (char *)v1006 + (int)v962;
                    do
                    {
                      if (v960)
                      {
                        for (uint64_t i3 = 0; i3 != v960; ++i3)
                          *(_DWORD *)&v958[4 * i3] += v968[i3];
                        v968 += i3;
                      }
                      ++v967;
                    }
                    while (v967 != v966);
                  }
                  v958 += v961;
                  __b = v958;
                  v957 += v960;
                }
                while (v827 > v957);
              }
            }
            else if (v827)
            {
              int v828 = 0;
              uint64_t v829 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v830 = 0;
                if ((v829 & 0x80000000) == 0)
                {
                  uint64_t v831 = v829;
                  int v832 = v828;
                  do
                  {
                    ldiv_t v833 = ldiv(v832, v74[v831]);
                    int v832 = v833.quot;
                    v830 += v75[v831--] * v833.rem;
                  }
                  while (v831 != -1);
                }
                int v1009 = v830;
                if (__len) {
                  bzero(__b, 4 * __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v834 = operator new(0x38uLL);
                void *v834 = &unk_27062D178;
                v834[1] = &v1022;
                v834[2] = &v1012;
                v834[3] = &v1009;
                v834[4] = &__b;
                v834[5] = &v1011;
                v834[6] = &__len;
                uint64_t v1024 = v834;
                uint64_t v1032 = 0;
                int v835 = operator new(0x28uLL);
                *int v835 = &unk_27062B578;
                v835[1] = &v1018;
                v835[2] = &v1020;
                v835[3] = v1031;
                v835[4] = v1023;
                int v1027 = v835;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + 4 * __len;
                v828 += __len;
              }
              while ((unint64_t)(*a2)[6] > v828);
            }
            goto LABEL_1093;
          }
          uint64_t v817 = *((int *)v1019 - 1);
          uint64_t v818 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          uint64_t v819 = (*a2)[6];
          if (v819)
          {
            LODWORD(v820) = 0;
            unint64_t v821 = (*a2)[19];
            uint64_t v822 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v818) {
                bzero(v821, 4 * v818);
              }
              if ((int)v817 >= 1)
              {
                int v823 = 0;
                uint64_t v824 = v822;
                do
                {
                  if (v818)
                  {
                    for (uint64_t i4 = 0; i4 != v818; ++i4)
                      v821[i4] += *(unsigned __int8 *)(v824 + i4);
                    v824 += i4;
                  }
                  ++v823;
                }
                while (v823 != v817);
              }
              v822 += v818 * v817;
              v821 += v818;
              unint64_t v820 = (int)v820 + (int)v818;
            }
            while (v820 < (unint64_t)v819);
          }
          goto LABEL_1097;
        case 5:
          uint64_t v187 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v187, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            ldiv_t v416 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_547;
            }
            int v417 = (*a2)[6];
            if (v417)
            {
              uint64_t v418 = 0;
              uint64_t v419 = *(int *)v1018;
              uint64_t v420 = (*a2)[19];
              uint64_t v421 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *(void *)uint64_t v420 = 0;
                if ((int)v419 >= 1)
                {
                  uint64_t v422 = 0;
                  unsigned int v423 = v419 + 1;
                  uint64_t v424 = v421;
                  do
                  {
                    unsigned int v425 = *v424++;
                    v422 += v425;
                    *(void *)uint64_t v420 = v422;
                    --v423;
                  }
                  while (v423 > 1);
                }
                uint64_t v418 = (int *)((char *)v418 + 1);
                v420 += 2;
                v421 += v419;
              }
              while (v418 != v417);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            int v188 = (*a2)[19];
            *(void *)int v188 = 0;
            int v189 = *(_DWORD *)(*(void *)a1 + 48);
            if (v189 >= 1)
            {
              uint64_t v190 = 0;
              int v191 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v192 = v189 + 1;
              do
              {
                unsigned int v193 = *v191++;
                v190 += v193;
                *(void *)int v188 = v190;
                --v192;
              }
              while (v192 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            ldiv_t v416 = v1019;
LABEL_547:
            LODWORD(__b) = *((_DWORD *)v416 - 1);
            int v1019 = v416 - 4;
            v1021 -= 8;
            size_t v522 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v522;
            int v74 = v1025;
            unint64_t v75 = v1027;
            uint64_t v523 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v523)
              {
                uint64_t v681 = 0;
                uint64_t v682 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                uint64_t v683 = v1012;
                size_t v1002 = __len;
                int v684 = (int)__b;
                int v685 = __b + 1;
                do
                {
                  uint64_t v686 = 0;
                  if ((v682 & 0x80000000) == 0)
                  {
                    uint64_t v687 = v682;
                    int v688 = (int)v681;
                    do
                    {
                      ldiv_t v689 = ldiv(v688, v74[v687]);
                      int v688 = v689.quot;
                      v686 += v75[v687--] * v689.rem;
                    }
                    while (v687 != -1);
                  }
                  *(void *)uint64_t v683 = 0;
                  if (v684 >= 1)
                  {
                    uint64_t v690 = 0;
                    unint64_t v691 = (unsigned __int8 *)(v1002 + (int)v686);
                    unsigned int v692 = v685;
                    do
                    {
                      unsigned int v693 = *v691++;
                      v690 += v693;
                      *(void *)uint64_t v683 = v690;
                      --v692;
                    }
                    while (v692 > 1);
                  }
                  uint64_t v681 = (int *)((char *)v681 + 1);
                  v683 += 2;
                }
                while (v681 != v523);
              }
            }
            else if (v523)
            {
              unint64_t v524 = 0;
              uint64_t v525 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v526 = 0;
                if ((v525 & 0x80000000) == 0)
                {
                  uint64_t v527 = v525;
                  int v528 = v524;
                  do
                  {
                    ldiv_t v529 = ldiv(v528, v74[v527]);
                    int v528 = v529.quot;
                    v526 += v75[v527--] * v529.rem;
                  }
                  while (v527 != -1);
                }
                int v1011 = v526;
                *(void *)unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                uint64_t v530 = operator new(0x30uLL);
                *uint64_t v530 = &unk_27062D278;
                v530[1] = &v1009;
                v530[2] = &__len;
                v530[3] = &v1011;
                v530[4] = &v1012;
                v530[5] = &__b;
                uint64_t v1024 = v530;
                uint64_t v1032 = 0;
                unint64_t v531 = operator new(0x28uLL);
                *unint64_t v531 = &unk_27062B578;
                v531[1] = &v1018;
                v531[2] = &v1020;
                v531[3] = v1031;
                v531[4] = v1023;
                int v1027 = v531;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v524;
                v1012 += 2;
              }
              while ((unint64_t)(*a2)[6] > v524);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              int v620 = v1019;
              goto LABEL_937;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            char v845 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v846 = 0;
              uint64_t v847 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v848 = 0;
                if ((v847 & 0x80000000) == 0)
                {
                  uint64_t v849 = v847;
                  int v850 = v846;
                  do
                  {
                    ldiv_t v851 = ldiv(v850, v74[v849]);
                    int v850 = v851.quot;
                    v848 += v75[v849--] * v851.rem;
                  }
                  while (v849 != -1);
                }
                LODWORD(__b) = v848;
                unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                ldiv_t v852 = operator new(0x28uLL);
                *ldiv_t v852 = &unk_27062D378;
                v852[1] = &v1011;
                v852[2] = &v1012;
                v852[3] = &__len;
                v852[4] = &__b;
                uint64_t v1024 = v852;
                uint64_t v1032 = 0;
                uint64_t v853 = operator new(0x28uLL);
                *uint64_t v853 = &unk_27062B578;
                v853[1] = &v1018;
                v853[2] = &v1020;
                v853[3] = v1031;
                v853[4] = v1023;
                int v1027 = v853;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *(void *)char v845 = v1012;
                v845 += 2;
                ++v846;
              }
              while ((unint64_t)(*a2)[6] > v846);
            }
            goto LABEL_1093;
          }
          int v620 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_937:
            int v1011 = *((_DWORD *)v620 - 1);
            size_t v863 = *((void *)v1021 - 1);
            int v1019 = v620 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v863;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v864 = (unint64_t)(*a2)[6];
            if (v1019 == v1018)
            {
              if (v864)
              {
                int v970 = 0;
                int v971 = (char *)__b;
                uint64_t v972 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                size_t v973 = __len;
                int v994 = v1012;
                uint64_t v1007 = v972;
                int v974 = v1011;
                size_t v975 = 8 * __len;
                do
                {
                  uint64_t v976 = 0;
                  if ((v972 & 0x80000000) == 0)
                  {
                    int v977 = v970;
                    do
                    {
                      ldiv_t v978 = ldiv(v977, v74[v972]);
                      int v977 = v978.quot;
                      v976 += v75[v972--] * v978.rem;
                    }
                    while (v972 != -1);
                  }
                  if (v973) {
                    bzero(v971, v975);
                  }
                  uint64_t v972 = v1007;
                  if (v974 >= 1)
                  {
                    int v979 = 0;
                    int v980 = (char *)v994 + (int)v976;
                    do
                    {
                      if (v973)
                      {
                        for (uint64_t i5 = 0; i5 != v973; ++i5)
                          *(void *)&v971[8 * i5] += v980[i5];
                        v980 += i5;
                      }
                      ++v979;
                    }
                    while (v979 != v974);
                  }
                  v971 += v975;
                  __b = v971;
                  v970 += v973;
                }
                while (v864 > v970);
              }
            }
            else if (v864)
            {
              int v865 = 0;
              uint64_t v866 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v867 = 0;
                if ((v866 & 0x80000000) == 0)
                {
                  uint64_t v868 = v866;
                  int v869 = v865;
                  do
                  {
                    ldiv_t v870 = ldiv(v869, v74[v868]);
                    int v869 = v870.quot;
                    v867 += v75[v868--] * v870.rem;
                  }
                  while (v868 != -1);
                }
                int v1009 = v867;
                if (__len) {
                  bzero(__b, 8 * __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v871 = operator new(0x38uLL);
                void *v871 = &unk_27062D2F8;
                v871[1] = &v1022;
                v871[2] = &v1012;
                v871[3] = &v1009;
                v871[4] = &__b;
                v871[5] = &v1011;
                v871[6] = &__len;
                uint64_t v1024 = v871;
                uint64_t v1032 = 0;
                char v872 = operator new(0x28uLL);
                *char v872 = &unk_27062B578;
                v872[1] = &v1018;
                v872[2] = &v1020;
                v872[3] = v1031;
                v872[4] = v1023;
                int v1027 = v872;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + 8 * __len;
                v865 += __len;
              }
              while ((unint64_t)(*a2)[6] > v865);
            }
            goto LABEL_1093;
          }
          uint64_t v854 = *((int *)v1019 - 1);
          uint64_t v855 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          uint64_t v856 = (*a2)[6];
          if (v856)
          {
            LODWORD(v857) = 0;
            unint64_t v858 = (*a2)[19];
            uint64_t v859 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v855) {
                bzero(v858, 8 * v855);
              }
              if ((int)v854 >= 1)
              {
                int v860 = 0;
                uint64_t v861 = v859;
                do
                {
                  if (v855)
                  {
                    for (uint64_t i6 = 0; i6 != v855; ++i6)
                      *(void *)&v858[2 * i6] += *(unsigned __int8 *)(v861 + i6);
                    v861 += i6;
                  }
                  ++v860;
                }
                while (v860 != v854);
              }
              v859 += v855 * v854;
              v858 += 2 * v855;
              unint64_t v857 = (int)v857 + (int)v855;
            }
            while (v857 < (unint64_t)v856);
          }
          goto LABEL_1097;
        case 6:
          int v194 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          unsigned int v1028 = &unk_27062AEC8;
          int v1029 = mlx::core::allocator::free;
          char v1030 = &v1028;
          mlx::core::array::set_data(a2, (uint64_t)v194, (uint64_t)&v1028);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
          uint64_t v1015 = 0;
          uint64_t v1016 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1015 = __p;
            operator delete(__p);
          }
          if (v1017 == 1)
          {
            unsigned int v426 = v1019;
            if (v1019 - (unsigned char *)v1018 != 4) {
              goto LABEL_557;
            }
            uint64_t v427 = (*a2)[6];
            if (v427)
            {
              unsigned int v428 = 0;
              uint64_t v429 = *(int *)v1018;
              unint64_t v430 = (float *)(*a2)[19];
              unint64_t v431 = *(unsigned __int8 **)(*(void *)a1 + 152);
              do
              {
                *unint64_t v430 = 0.0;
                if ((int)v429 >= 1)
                {
                  float v432 = 0.0;
                  unsigned int v433 = v429 + 1;
                  uint64_t v434 = v431;
                  do
                  {
                    unsigned int v435 = *v434++;
                    float v432 = v432 + (float)v435;
                    *unint64_t v430 = v432;
                    --v433;
                  }
                  while (v433 > 1);
                }
                unsigned int v428 = (int *)((char *)v428 + 1);
                ++v430;
                v431 += v429;
              }
              while (v428 != v427);
            }
            goto LABEL_1097;
          }
          if (!v1017)
          {
            float v196 = (float *)(*a2)[19];
            *float v196 = 0.0;
            int v197 = *(_DWORD *)(*(void *)a1 + 48);
            if (v197 >= 1)
            {
              float v198 = *(unsigned __int8 **)(*(void *)a1 + 152);
              unsigned int v199 = v197 + 1;
              float v200 = 0.0;
              do
              {
                unsigned int v201 = *v198++;
                float v200 = v200 + (float)v201;
                *float v196 = v200;
                --v199;
              }
              while (v199 > 1);
            }
            goto LABEL_1097;
          }
          if ((v1017 & 0xFFFFFFFD) == 1)
          {
            unsigned int v426 = v1019;
LABEL_557:
            LODWORD(__b) = *((_DWORD *)v426 - 1);
            int v1019 = v426 - 4;
            v1021 -= 8;
            size_t v532 = *(void *)(*(void *)a1 + 152);
            unsigned int v1012 = (*a2)[19];
            __leuint64_t n = v532;
            int v74 = v1025;
            unint64_t v75 = v1027;
            uint64_t v533 = (*a2)[6];
            if (v1019 == v1018)
            {
              if (v533)
              {
                uint64_t v694 = 0;
                uint64_t v695 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                int v696 = (float *)v1012;
                size_t v1003 = __len;
                int v697 = (int)__b;
                int v698 = __b + 1;
                do
                {
                  uint64_t v699 = 0;
                  if ((v695 & 0x80000000) == 0)
                  {
                    uint64_t v700 = v695;
                    int v701 = (int)v694;
                    do
                    {
                      ldiv_t v702 = ldiv(v701, v74[v700]);
                      int v701 = v702.quot;
                      v699 += v75[v700--] * v702.rem;
                    }
                    while (v700 != -1);
                  }
                  *int v696 = 0.0;
                  if (v697 >= 1)
                  {
                    int v703 = (unsigned __int8 *)(v1003 + (int)v699);
                    float v704 = 0.0;
                    unsigned int v705 = v698;
                    do
                    {
                      unsigned int v706 = *v703++;
                      float v704 = v704 + (float)v706;
                      *int v696 = v704;
                      --v705;
                    }
                    while (v705 > 1);
                  }
                  uint64_t v694 = (int *)((char *)v694 + 1);
                  ++v696;
                }
                while (v694 != v533);
              }
            }
            else if (v533)
            {
              unint64_t v534 = 0;
              uint64_t v535 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v536 = 0;
                if ((v535 & 0x80000000) == 0)
                {
                  uint64_t v537 = v535;
                  int v538 = v534;
                  do
                  {
                    ldiv_t v539 = ldiv(v538, v74[v537]);
                    int v538 = v539.quot;
                    v536 += v75[v537--] * v539.rem;
                  }
                  while (v537 != -1);
                }
                int v1011 = v536;
                *unsigned int v1012 = 0;
                uint64_t v1024 = 0;
                unint64_t v540 = operator new(0x30uLL);
                *unint64_t v540 = &unk_27062D3F8;
                v540[1] = &v1009;
                v540[2] = &__len;
                v540[3] = &v1011;
                v540[4] = &v1012;
                v540[5] = &__b;
                uint64_t v1024 = v540;
                uint64_t v1032 = 0;
                unint64_t v541 = operator new(0x28uLL);
                *unint64_t v541 = &unk_27062B578;
                v541[1] = &v1018;
                v541[2] = &v1020;
                v541[3] = v1031;
                v541[4] = v1023;
                int v1027 = v541;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                ++v534;
                ++v1012;
              }
              while ((unint64_t)(*a2)[6] > v534);
            }
            goto LABEL_1093;
          }
          if (v1017 != 2)
          {
            if (v1017 != 5)
            {
              if (v1017 != 4) {
                goto LABEL_1097;
              }
              uint64_t v621 = v1019;
              goto LABEL_961;
            }
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            int v893 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v894 = 0;
              uint64_t v895 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v896 = 0;
                if ((v895 & 0x80000000) == 0)
                {
                  uint64_t v897 = v895;
                  int v898 = v894;
                  do
                  {
                    ldiv_t v899 = ldiv(v898, v74[v897]);
                    int v898 = v899.quot;
                    v896 += v75[v897--] * v899.rem;
                  }
                  while (v897 != -1);
                }
                LODWORD(v1012) = v896;
                LODWORD(__b) = 0;
                uint64_t v1024 = 0;
                ldiv_t v900 = operator new(0x28uLL);
                *ldiv_t v900 = &unk_27062D4F8;
                v900[1] = &v1011;
                v900[2] = &__b;
                v900[3] = &__len;
                v900[4] = &v1012;
                uint64_t v1024 = v900;
                uint64_t v1032 = 0;
                int v901 = operator new(0x28uLL);
                *int v901 = &unk_27062B578;
                v901[1] = &v1018;
                v901[2] = &v1020;
                v901[3] = v1031;
                v901[4] = v1023;
                int v1027 = v901;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *v893++ = (int)__b;
                ++v894;
              }
              while ((unint64_t)(*a2)[6] > v894);
            }
            goto LABEL_1093;
          }
          uint64_t v621 = v1019;
          if (v1019 - (unsigned char *)v1018 != 4)
          {
LABEL_961:
            int v1011 = *((_DWORD *)v621 - 1);
            size_t v882 = *((void *)v1021 - 1);
            int v1019 = v621 - 4;
            v1021 -= 8;
            unsigned int v1012 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v882;
            __b = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            unint64_t v884 = (unint64_t)(*a2)[6];
            if (v1019 == v1018)
            {
              if (v884)
              {
                int v982 = 0;
                int v983 = (char *)__b;
                uint64_t v984 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
                size_t v985 = __len;
                float v995 = v1012;
                uint64_t v1008 = v984;
                int v986 = v1011;
                size_t v987 = 4 * __len;
                do
                {
                  uint64_t v988 = 0;
                  if ((v984 & 0x80000000) == 0)
                  {
                    int v989 = v982;
                    do
                    {
                      ldiv_t v990 = ldiv(v989, v74[v984]);
                      int v989 = v990.quot;
                      v988 += v75[v984--] * v990.rem;
                    }
                    while (v984 != -1);
                  }
                  if (v985) {
                    bzero(v983, v987);
                  }
                  uint64_t v984 = v1008;
                  if (v986 >= 1)
                  {
                    int v991 = 0;
                    int v992 = (char *)v995 + (int)v988;
                    do
                    {
                      if (v985)
                      {
                        for (uint64_t i7 = 0; i7 != v985; ++i7)
                        {
                          LOBYTE(v883) = v992[i7];
                          float v883 = (float)LODWORD(v883);
                          *(float *)&v983[4 * i7] = *(float *)&v983[4 * i7] + v883;
                        }
                        v992 += i7;
                      }
                      ++v991;
                    }
                    while (v991 != v986);
                  }
                  v983 += v987;
                  __b = v983;
                  v982 += v985;
                }
                while (v884 > v982);
              }
            }
            else if (v884)
            {
              int v885 = 0;
              uint64_t v886 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v887 = 0;
                if ((v886 & 0x80000000) == 0)
                {
                  uint64_t v888 = v886;
                  int v889 = v885;
                  do
                  {
                    ldiv_t v890 = ldiv(v889, v74[v888]);
                    int v889 = v890.quot;
                    v887 += v75[v888--] * v890.rem;
                  }
                  while (v888 != -1);
                }
                int v1009 = v887;
                if (__len) {
                  bzero(__b, 4 * __len);
                }
                uint64_t v1024 = 0;
                ldiv_t v891 = operator new(0x38uLL);
                *ldiv_t v891 = &unk_27062D478;
                v891[1] = &v1022;
                v891[2] = &v1012;
                v891[3] = &v1009;
                v891[4] = &__b;
                v891[5] = &v1011;
                v891[6] = &__len;
                uint64_t v1024 = v891;
                uint64_t v1032 = 0;
                char v892 = operator new(0x28uLL);
                *char v892 = &unk_27062B578;
                v892[1] = &v1018;
                v892[2] = &v1020;
                v892[3] = v1031;
                v892[4] = v1023;
                int v1027 = v892;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                __b = (char *)__b + 4 * __len;
                v885 += __len;
              }
              while ((unint64_t)(*a2)[6] > v885);
            }
            goto LABEL_1093;
          }
          uint64_t v873 = *((int *)v1019 - 1);
          uint64_t v874 = *((void *)v1021 - 1);
          v1019 -= 4;
          v1021 -= 8;
          uint64_t v875 = (*a2)[6];
          if (v875)
          {
            LODWORD(v876) = 0;
            unint64_t v877 = (*a2)[19];
            uint64_t v878 = *(void *)(*(void *)a1 + 152);
            do
            {
              if (v874) {
                bzero(v877, 4 * v874);
              }
              if ((int)v873 >= 1)
              {
                int v879 = 0;
                uint64_t v880 = v878;
                do
                {
                  if (v874)
                  {
                    for (uint64_t i8 = 0; i8 != v874; ++i8)
                    {
                      LOBYTE(v195) = *(unsigned char *)(v880 + i8);
                      float v195 = (float)LODWORD(v195);
                      *(float *)&v877[i8] = *(float *)&v877[i8] + v195;
                    }
                    v880 += i8;
                  }
                  ++v879;
                }
                while (v879 != v873);
              }
              v878 += v874 * v873;
              v877 += v874;
              unint64_t v876 = (int)v876 + (int)v874;
            }
            while (v876 < (unint64_t)v875);
          }
          break;
        default:
          return;
      }
      goto LABEL_1097;
    case 3:
      uint64_t v38 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      unsigned int v1028 = &unk_27062AEC8;
      int v1029 = mlx::core::allocator::free;
      char v1030 = &v1028;
      mlx::core::array::set_data(a2, (uint64_t)v38, (uint64_t)&v1028);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
      uint64_t v1015 = 0;
      uint64_t v1016 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1015 = __p;
        operator delete(__p);
      }
      if (v1017 == 1)
      {
        uint64_t v95 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_131;
        }
        if ((*a2)[6])
        {
          unint64_t v96 = 0;
          uint64_t v97 = *(int *)v1018;
          unint64_t v98 = (*a2)[19];
          char v99 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *(unsigned char *)unint64_t v98 = 1;
            if ((int)v97 >= 1)
            {
              int v100 = 1;
              unsigned int v101 = v97 + 1;
              int v102 = v99;
              do
              {
                int v103 = *v102++;
                v100 *= v103;
                *(unsigned char *)unint64_t v98 = v100;
                --v101;
              }
              while (v101 > 1);
            }
            ++v96;
            unint64_t v98 = (int *)((char *)v98 + 1);
            v99 += v97;
          }
          while ((unint64_t)(*a2)[6] > v96);
        }
        goto LABEL_1097;
      }
      if (!v1017)
      {
        int v39 = (*a2)[19];
        *(unsigned char *)int v39 = 1;
        int v40 = *(_DWORD *)(*(void *)a1 + 48);
        if (v40 >= 1)
        {
          unsigned int v41 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v42 = v40 + 1;
          int v43 = 1;
          do
          {
            int v44 = *v41++;
            v43 *= v44;
            *(unsigned char *)int v39 = v43;
            --v42;
          }
          while (v42 > 1);
        }
        goto LABEL_1097;
      }
      if ((v1017 & 0xFFFFFFFD) == 1)
      {
        uint64_t v95 = v1019;
LABEL_131:
        LODWORD(__b) = *((_DWORD *)v95 - 1);
        int v1019 = v95 - 4;
        v1021 -= 8;
        size_t v134 = *(void *)(*(void *)a1 + 152);
        unsigned int v1012 = (*a2)[19];
        __leuint64_t n = v134;
        int v74 = v1025;
        unint64_t v75 = v1027;
        unint64_t v135 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v135)
          {
            unint64_t v240 = 0;
            uint64_t v241 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v242 = 0;
              if ((v241 & 0x80000000) == 0)
              {
                uint64_t v243 = v241;
                int v244 = v240;
                do
                {
                  ldiv_t v245 = ldiv(v244, v74[v243]);
                  int v244 = v245.quot;
                  v242 += v75[v243--] * v245.rem;
                }
                while (v243 != -1);
              }
              *(unsigned char *)unsigned int v1012 = 1;
              ldiv_t v246 = v1012;
              if ((int)__b >= 1)
              {
                uint64_t v247 = (unsigned __int8 *)(__len + (int)v242);
                int v248 = *(unsigned __int8 *)v1012;
                unsigned int v249 = __b + 1;
                do
                {
                  int v250 = *v247++;
                  v248 *= v250;
                  *(unsigned char *)ldiv_t v246 = v248;
                  --v249;
                }
                while (v249 > 1);
                ldiv_t v246 = v1012;
              }
              ++v240;
              unsigned int v1012 = (int *)((char *)v246 + 1);
            }
            while ((unint64_t)(*a2)[6] > v240);
          }
        }
        else if (v135)
        {
          unint64_t v136 = 0;
          uint64_t v137 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v138 = 0;
            if ((v137 & 0x80000000) == 0)
            {
              uint64_t v139 = v137;
              int v140 = v136;
              do
              {
                ldiv_t v141 = ldiv(v140, v74[v139]);
                int v140 = v141.quot;
                v138 += v75[v139--] * v141.rem;
              }
              while (v139 != -1);
            }
            int v1011 = v138;
            *(unsigned char *)unsigned int v1012 = 1;
            uint64_t v1024 = 0;
            unint64_t v142 = operator new(0x30uLL);
            void *v142 = &unk_27062D578;
            v142[1] = &v1009;
            v142[2] = &__len;
            v142[3] = &v1011;
            v142[4] = &v1012;
            v142[5] = &__b;
            uint64_t v1024 = v142;
            uint64_t v1032 = 0;
            size_t v143 = operator new(0x28uLL);
            *size_t v143 = &unk_27062B578;
            v143[1] = &v1018;
            v143[2] = &v1020;
            v143[3] = v1031;
            v143[4] = v1023;
            int v1027 = v143;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            ++v136;
            unsigned int v1012 = (int *)((char *)v1012 + 1);
          }
          while ((unint64_t)(*a2)[6] > v136);
        }
        goto LABEL_1093;
      }
      if (v1017 != 2)
      {
        if (v1017 != 5)
        {
          if (v1017 != 4) {
            goto LABEL_1097;
          }
          int v157 = v1019;
          goto LABEL_502;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        ldiv_t v329 = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        if ((*a2)[6])
        {
          unint64_t v330 = 0;
          uint64_t v331 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v332 = 0;
            if ((v331 & 0x80000000) == 0)
            {
              uint64_t v333 = v331;
              int v334 = v330;
              do
              {
                ldiv_t v335 = ldiv(v334, v74[v333]);
                int v334 = v335.quot;
                v332 += v75[v333--] * v335.rem;
              }
              while (v333 != -1);
            }
            LODWORD(v1012) = v332;
            LOBYTE(v1011) = 1;
            uint64_t v1024 = 0;
            uint64_t v336 = operator new(0x28uLL);
            *uint64_t v336 = &unk_27062D678;
            v336[1] = &__b;
            v336[2] = &v1011;
            v336[3] = &__len;
            v336[4] = &v1012;
            uint64_t v1024 = v336;
            uint64_t v1032 = 0;
            int v337 = operator new(0x28uLL);
            *int v337 = &unk_27062B578;
            v337[1] = &v1018;
            v337[2] = &v1020;
            v337[3] = v1031;
            v337[4] = v1023;
            int v1027 = v337;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            *(unsigned char *)ldiv_t v329 = v1011;
            ldiv_t v329 = (int *)((char *)v329 + 1);
            ++v330;
          }
          while ((unint64_t)(*a2)[6] > v330);
        }
        goto LABEL_1093;
      }
      int v157 = v1019;
      if (v1019 - (unsigned char *)v1018 != 4)
      {
LABEL_502:
        int v1011 = *((_DWORD *)v157 - 1);
        size_t v484 = *((void *)v1021 - 1);
        int v1019 = v157 - 4;
        v1021 -= 8;
        unsigned int v1012 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v484;
        __b = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        uint64_t v485 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v485)
          {
            int v584 = 0;
            uint64_t v585 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v586 = 0;
              if ((v585 & 0x80000000) != 0)
              {
                int v589 = a2;
              }
              else
              {
                uint64_t v587 = v585;
                int v588 = v584;
                int v589 = a2;
                do
                {
                  ldiv_t v590 = ldiv(v588, v74[v587]);
                  int v588 = v590.quot;
                  v586 += v75[v587--] * v590.rem;
                }
                while (v587 != -1);
              }
              uint64_t v591 = __b;
              if (__len)
              {
                memset(__b, 1, __len);
                size_t v592 = __len;
                uint64_t v591 = __b;
              }
              else
              {
                size_t v592 = 0;
              }
              int v593 = v1011;
              if (v1011 >= 1)
              {
                int v594 = 0;
                uint64_t v595 = (char *)v1012 + (int)v586;
                do
                {
                  size_t v596 = v592;
                  for (uint64_t i9 = v591; v596; --v596)
                  {
                    char v598 = *v595++;
                    *i9++ *= v598;
                  }
                  ++v594;
                }
                while (v594 != v593);
                size_t v592 = __len;
                uint64_t v591 = __b;
              }
              __b = &v591[v592];
              v584 += v592;
            }
            while ((unint64_t)(*v589)[6] > v584);
          }
        }
        else if (v485)
        {
          int v486 = 0;
          uint64_t v487 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v488 = 0;
            if ((v487 & 0x80000000) == 0)
            {
              uint64_t v489 = v487;
              int v490 = v486;
              do
              {
                ldiv_t v491 = ldiv(v490, v74[v489]);
                int v490 = v491.quot;
                v488 += v75[v489--] * v491.rem;
              }
              while (v489 != -1);
            }
            int v1009 = v488;
            if (__len) {
              memset(__b, 1, __len);
            }
            uint64_t v1024 = 0;
            unint64_t v492 = operator new(0x38uLL);
            *unint64_t v492 = &unk_27062D5F8;
            v492[1] = &v1022;
            v492[2] = &v1012;
            v492[3] = &v1009;
            v492[4] = &__b;
            v492[5] = &v1011;
            v492[6] = &__len;
            uint64_t v1024 = v492;
            uint64_t v1032 = 0;
            int v493 = operator new(0x28uLL);
            *int v493 = &unk_27062B578;
            v493[1] = &v1018;
            v493[2] = &v1020;
            v493[3] = v1031;
            v493[4] = v1023;
            int v1027 = v493;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            __b = (char *)__b + __len;
            v486 += __len;
          }
          while ((unint64_t)(*a2)[6] > v486);
        }
        goto LABEL_1093;
      }
      uint64_t v476 = *((int *)v1019 - 1);
      size_t v477 = *((void *)v1021 - 1);
      v1019 -= 4;
      v1021 -= 8;
      if ((*a2)[6])
      {
        LODWORD(v478) = 0;
        uint64_t v479 = (*a2)[19];
        uint64_t v480 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v477) {
            memset(v479, 1, v477);
          }
          if ((int)v476 >= 1)
          {
            int v481 = 0;
            uint64_t v482 = v480;
            do
            {
              if (v477)
              {
                for (uint64_t i10 = 0; i10 != v477; ++i10)
                  *((unsigned char *)v479 + i10) *= *(unsigned char *)(v482 + i10);
                v482 += i10;
              }
              ++v481;
            }
            while (v481 != v476);
          }
          v480 += v477 * v476;
          uint64_t v479 = (int *)((char *)v479 + v477);
          unint64_t v478 = (int)v478 + (int)v477;
        }
        while (v478 < (unint64_t)(*a2)[6]);
      }
      goto LABEL_1097;
    case 4:
      int v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      unsigned int v1028 = &unk_27062AEC8;
      int v1029 = mlx::core::allocator::free;
      char v1030 = &v1028;
      mlx::core::array::set_data(a2, (uint64_t)v14, (uint64_t)&v1028);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
      uint64_t v1015 = 0;
      uint64_t v1016 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1015 = __p;
        operator delete(__p);
      }
      if (v1017 == 1)
      {
        uint64_t v53 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_75;
        }
        if ((*a2)[6])
        {
          unint64_t v54 = 0;
          uint64_t v55 = *(int *)v1018;
          unint64_t v56 = (unsigned __int8 *)(*a2)[19];
          char v57 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *unint64_t v56 = -1;
            if ((int)v55 >= 1)
            {
              unsigned __int8 v58 = -1;
              unsigned int v59 = v55 + 1;
              int v60 = v57;
              do
              {
                unsigned int v62 = *v60++;
                unsigned __int8 v61 = v62;
                if (v58 >= v62) {
                  unsigned __int8 v58 = v61;
                }
                *unint64_t v56 = v58;
                --v59;
              }
              while (v59 > 1);
            }
            ++v54;
            ++v56;
            v57 += v55;
          }
          while ((unint64_t)(*a2)[6] > v54);
        }
        goto LABEL_1097;
      }
      if (!v1017)
      {
        int v15 = (unsigned __int8 *)(*a2)[19];
        *int v15 = -1;
        int v16 = *(_DWORD *)(*(void *)a1 + 48);
        if (v16 >= 1)
        {
          uint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 152);
          unsigned int v18 = v16 + 1;
          unsigned __int8 v19 = -1;
          do
          {
            unsigned int v21 = *v17++;
            unsigned __int8 v20 = v21;
            if (v19 >= v21) {
              unsigned __int8 v19 = v20;
            }
            *int v15 = v19;
            --v18;
          }
          while (v18 > 1);
        }
        goto LABEL_1097;
      }
      if ((v1017 & 0xFFFFFFFD) == 1)
      {
        uint64_t v53 = v1019;
LABEL_75:
        LODWORD(__b) = *((_DWORD *)v53 - 1);
        int v1019 = v53 - 4;
        v1021 -= 8;
        size_t v73 = *(void *)(*(void *)a1 + 152);
        unsigned int v1012 = (*a2)[19];
        __leuint64_t n = v73;
        int v74 = v1025;
        unint64_t v75 = v1027;
        uint64_t v76 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v76)
          {
            unint64_t v202 = 0;
            uint64_t v203 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v204 = 0;
              if ((v203 & 0x80000000) == 0)
              {
                uint64_t v205 = v203;
                int v206 = v202;
                do
                {
                  ldiv_t v207 = ldiv(v206, v74[v205]);
                  int v206 = v207.quot;
                  v204 += v75[v205--] * v207.rem;
                }
                while (v205 != -1);
              }
              *(unsigned char *)unsigned int v1012 = -1;
              int v208 = v1012;
              if ((int)__b >= 1)
              {
                char v209 = (unsigned __int8 *)(__len + (int)v204);
                unsigned __int8 v210 = *(unsigned char *)v1012;
                unsigned int v211 = __b + 1;
                do
                {
                  unsigned int v213 = *v209++;
                  unsigned __int8 v212 = v213;
                  if (v210 >= v213) {
                    unsigned __int8 v210 = v212;
                  }
                  *(unsigned char *)int v208 = v210;
                  --v211;
                }
                while (v211 > 1);
                int v208 = v1012;
              }
              ++v202;
              unsigned int v1012 = (int *)((char *)v208 + 1);
            }
            while ((unint64_t)(*a2)[6] > v202);
          }
        }
        else if (v76)
        {
          unint64_t v77 = 0;
          uint64_t v78 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v79 = 0;
            if ((v78 & 0x80000000) == 0)
            {
              uint64_t v80 = v78;
              int v81 = v77;
              do
              {
                ldiv_t v82 = ldiv(v81, v74[v80]);
                int v81 = v82.quot;
                v79 += v75[v80--] * v82.rem;
              }
              while (v80 != -1);
            }
            int v1011 = v79;
            *(unsigned char *)unsigned int v1012 = -1;
            uint64_t v1024 = 0;
            int v83 = operator new(0x30uLL);
            *int v83 = &unk_27062D878;
            v83[1] = &v1009;
            v83[2] = &__len;
            v83[3] = &v1011;
            v83[4] = &v1012;
            v83[5] = &__b;
            uint64_t v1024 = v83;
            uint64_t v1032 = 0;
            uint64_t v84 = operator new(0x28uLL);
            *uint64_t v84 = &unk_27062B578;
            v84[1] = &v1018;
            v84[2] = &v1020;
            v84[3] = v1031;
            v84[4] = v1023;
            int v1027 = v84;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            ++v77;
            unsigned int v1012 = (int *)((char *)v1012 + 1);
          }
          while ((unint64_t)(*a2)[6] > v77);
        }
        goto LABEL_1093;
      }
      if (v1017 != 2)
      {
        if (v1017 != 5)
        {
          if (v1017 != 4) {
            goto LABEL_1097;
          }
          unint64_t v154 = v1019;
          goto LABEL_308;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        ldiv_t v302 = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        if ((*a2)[6])
        {
          unint64_t v303 = 0;
          uint64_t v304 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v305 = 0;
            if ((v304 & 0x80000000) == 0)
            {
              uint64_t v306 = v304;
              int v307 = v303;
              do
              {
                ldiv_t v308 = ldiv(v307, v74[v306]);
                int v307 = v308.quot;
                v305 += v75[v306--] * v308.rem;
              }
              while (v306 != -1);
            }
            LODWORD(v1012) = v305;
            LOBYTE(v1011) = -1;
            uint64_t v1024 = 0;
            uint64_t v309 = operator new(0x28uLL);
            *uint64_t v309 = &unk_27062D978;
            v309[1] = &__b;
            v309[2] = &v1011;
            v309[3] = &__len;
            v309[4] = &v1012;
            uint64_t v1024 = v309;
            uint64_t v1032 = 0;
            int v310 = operator new(0x28uLL);
            *int v310 = &unk_27062B578;
            v310[1] = &v1018;
            v310[2] = &v1020;
            v310[3] = v1031;
            v310[4] = v1023;
            int v1027 = v310;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            *(unsigned char *)ldiv_t v302 = v1011;
            ldiv_t v302 = (int *)((char *)v302 + 1);
            ++v303;
          }
          while ((unint64_t)(*a2)[6] > v303);
        }
        goto LABEL_1093;
      }
      unint64_t v154 = v1019;
      if (v1019 - (unsigned char *)v1018 != 4)
      {
LABEL_308:
        int v1011 = *((_DWORD *)v154 - 1);
        size_t v292 = *((void *)v1021 - 1);
        int v1019 = v154 - 4;
        v1021 -= 8;
        unsigned int v1012 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v292;
        __b = (*a2)[19];
        int v74 = v1025;
        unint64_t v75 = v1027;
        BOOL v293 = (*a2)[6];
        if (v1019 == v1018)
        {
          if (v293)
          {
            int v542 = 0;
            uint64_t v543 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v544 = 0;
              if ((v543 & 0x80000000) != 0)
              {
                uint64_t v547 = a2;
              }
              else
              {
                uint64_t v545 = v543;
                int v546 = v542;
                uint64_t v547 = a2;
                do
                {
                  ldiv_t v548 = ldiv(v546, v74[v545]);
                  int v546 = v548.quot;
                  v544 += v75[v545--] * v548.rem;
                }
                while (v545 != -1);
              }
              int v549 = (unsigned __int8 *)__b;
              if (__len)
              {
                memset(__b, 255, __len);
                size_t v550 = __len;
                int v549 = (unsigned __int8 *)__b;
              }
              else
              {
                size_t v550 = 0;
              }
              int v551 = v1011;
              if (v1011 >= 1)
              {
                int v552 = 0;
                int v553 = (unsigned __int8 *)v1012 + (int)v544;
                do
                {
                  size_t v554 = v550;
                  for (uint64_t i11 = v549; v554; --v554)
                  {
                    unsigned int v557 = *v553++;
                    unsigned __int8 v556 = v557;
                    if (*i11 < v557) {
                      unsigned __int8 v556 = *i11;
                    }
                    *i11++ = v556;
                  }
                  ++v552;
                }
                while (v552 != v551);
                size_t v550 = __len;
                int v549 = (unsigned __int8 *)__b;
              }
              __b = &v549[v550];
              v542 += v550;
            }
            while ((unint64_t)(*v547)[6] > v542);
          }
        }
        else if (v293)
        {
          int v294 = 0;
          uint64_t v295 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
          do
          {
            uint64_t v296 = 0;
            if ((v295 & 0x80000000) == 0)
            {
              uint64_t v297 = v295;
              int v298 = v294;
              do
              {
                ldiv_t v299 = ldiv(v298, v74[v297]);
                int v298 = v299.quot;
                v296 += v75[v297--] * v299.rem;
              }
              while (v297 != -1);
            }
            int v1009 = v296;
            if (__len) {
              memset(__b, 255, __len);
            }
            uint64_t v1024 = 0;
            uint64_t v300 = operator new(0x38uLL);
            *uint64_t v300 = &unk_27062D8F8;
            v300[1] = &v1022;
            v300[2] = &v1012;
            v300[3] = &v1009;
            v300[4] = &__b;
            v300[5] = &v1011;
            v300[6] = &__len;
            uint64_t v1024 = v300;
            uint64_t v1032 = 0;
            int v301 = operator new(0x28uLL);
            void *v301 = &unk_27062B578;
            v301[1] = &v1018;
            v301[2] = &v1020;
            v301[3] = v1031;
            v301[4] = v1023;
            int v1027 = v301;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
            std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
            __b = (char *)__b + __len;
            v294 += __len;
          }
          while ((unint64_t)(*a2)[6] > v294);
        }
        goto LABEL_1093;
      }
      uint64_t v283 = *((int *)v1019 - 1);
      size_t v284 = *((void *)v1021 - 1);
      v1019 -= 4;
      v1021 -= 8;
      if ((*a2)[6])
      {
        LODWORD(v285) = 0;
        unsigned int v286 = (*a2)[19];
        uint64_t v287 = *(void *)(*(void *)a1 + 152);
        do
        {
          if (v284) {
            memset(v286, 255, v284);
          }
          if ((int)v283 >= 1)
          {
            int v288 = 0;
            uint64_t v289 = v287;
            do
            {
              if (v284)
              {
                for (uint64_t i12 = 0; i12 != v284; ++i12)
                {
                  unsigned int v291 = *(unsigned __int8 *)(v289 + i12);
                  if (*((unsigned __int8 *)v286 + i12) < v291) {
                    LOBYTE(v291) = *((unsigned char *)v286 + i12);
                  }
                  *((unsigned char *)v286 + i12) = v291;
                }
                v289 += i12;
              }
              ++v288;
            }
            while (v288 != v283);
          }
          v287 += v284 * v283;
          unsigned int v286 = (int *)((char *)v286 + v284);
          unint64_t v285 = (int)v285 + (int)v284;
        }
        while (v285 < (unint64_t)(*a2)[6]);
      }
      goto LABEL_1097;
    case 5:
      int v45 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      unsigned int v1028 = &unk_27062AEC8;
      int v1029 = mlx::core::allocator::free;
      char v1030 = &v1028;
      mlx::core::array::set_data(a2, (uint64_t)v45, (uint64_t)&v1028);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1028);
      uint64_t v1015 = 0;
      uint64_t v1016 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1015 = __p;
        operator delete(__p);
      }
      if (v1017 == 1)
      {
        unint64_t v104 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_141;
        }
        if ((*a2)[6])
        {
          unint64_t v105 = 0;
          uint64_t v106 = *(int *)v1018;
          int v107 = (*a2)[19];
          unsigned __int8 v108 = *(unsigned __int8 **)(*(void *)a1 + 152);
          do
          {
            *(unsigned char *)int v107 = 0;
            if ((int)v106 >= 1)
            {
              unsigned __int8 v109 = 0;
              unsigned int v110 = v106 + 1;
              int v111 = v108;
              do
              {
                unsigned int v113 = *v111++;
                unsigned __int8 v112 = v113;
                if (v109 <= v113) {
                  unsigned __int8 v109 = v112;
                }
                *(unsigned char *)int v107 = v109;
                --v110;
              }
              while (v110 > 1);
            }
            ++v105;
            int v107 = (int *)((char *)v107 + 1);
            v108 += v106;
          }
          while ((unint64_t)(*a2)[6] > v105);
        }
      }
      else
      {
        if (!v1017)
        {
          int v46 = (*a2)[19];
          *(unsigned char *)int v46 = 0;
          int v47 = *(_DWORD *)(*(void *)a1 + 48);
          if (v47 >= 1)
          {
            unsigned __int8 v48 = 0;
            unsigned int v49 = *(unsigned __int8 **)(*(void *)a1 + 152);
            unsigned int v50 = v47 + 1;
            do
            {
              unsigned int v52 = *v49++;
              unsigned __int8 v51 = v52;
              if (v48 <= v52) {
                unsigned __int8 v48 = v51;
              }
              *(unsigned char *)int v46 = v48;
              --v50;
            }
            while (v50 > 1);
          }
          goto LABEL_1097;
        }
        if ((v1017 & 0xFFFFFFFD) == 1)
        {
          unint64_t v104 = v1019;
LABEL_141:
          LODWORD(__b) = *((_DWORD *)v104 - 1);
          int v1019 = v104 - 4;
          v1021 -= 8;
          size_t v144 = *(void *)(*(void *)a1 + 152);
          unsigned int v1012 = (*a2)[19];
          __leuint64_t n = v144;
          int v74 = v1025;
          unint64_t v75 = v1027;
          unint64_t v145 = (*a2)[6];
          if (v1019 == v1018)
          {
            if (v145)
            {
              unint64_t v251 = 0;
              uint64_t v252 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v253 = 0;
                if ((v252 & 0x80000000) == 0)
                {
                  uint64_t v254 = v252;
                  int v255 = v251;
                  do
                  {
                    ldiv_t v256 = ldiv(v255, v74[v254]);
                    int v255 = v256.quot;
                    v253 += v75[v254--] * v256.rem;
                  }
                  while (v254 != -1);
                }
                *(unsigned char *)unsigned int v1012 = 0;
                uint64_t v257 = v1012;
                if ((int)__b >= 1)
                {
                  int v258 = (unsigned __int8 *)(__len + (int)v253);
                  unsigned __int8 v259 = *(unsigned char *)v1012;
                  unsigned int v260 = __b + 1;
                  do
                  {
                    unsigned int v262 = *v258++;
                    unsigned __int8 v261 = v262;
                    if (v259 <= v262) {
                      unsigned __int8 v259 = v261;
                    }
                    *(unsigned char *)uint64_t v257 = v259;
                    --v260;
                  }
                  while (v260 > 1);
                  uint64_t v257 = v1012;
                }
                ++v251;
                unsigned int v1012 = (int *)((char *)v257 + 1);
              }
              while ((unint64_t)(*a2)[6] > v251);
            }
          }
          else if (v145)
          {
            unint64_t v146 = 0;
            uint64_t v147 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v148 = 0;
              if ((v147 & 0x80000000) == 0)
              {
                uint64_t v149 = v147;
                int v150 = v146;
                do
                {
                  ldiv_t v151 = ldiv(v150, v74[v149]);
                  int v150 = v151.quot;
                  v148 += v75[v149--] * v151.rem;
                }
                while (v149 != -1);
              }
              int v1011 = v148;
              *(unsigned char *)unsigned int v1012 = 0;
              uint64_t v1024 = 0;
              uint64_t v152 = operator new(0x30uLL);
              *uint64_t v152 = &unk_27062D6F8;
              v152[1] = &v1009;
              v152[2] = &__len;
              v152[3] = &v1011;
              v152[4] = &v1012;
              v152[5] = &__b;
              uint64_t v1024 = v152;
              uint64_t v1032 = 0;
              unint64_t v153 = operator new(0x28uLL);
              *unint64_t v153 = &unk_27062B578;
              v153[1] = &v1018;
              v153[2] = &v1020;
              v153[3] = v1031;
              v153[4] = v1023;
              int v1027 = v153;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
              std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
              ++v146;
              unsigned int v1012 = (int *)((char *)v1012 + 1);
            }
            while ((unint64_t)(*a2)[6] > v146);
          }
          goto LABEL_1093;
        }
        if (v1017 != 2)
        {
          if (v1017 == 5)
          {
            __leuint64_t n = *(void *)(*(void *)a1 + 152);
            uint64_t v513 = (*a2)[19];
            int v74 = v1025;
            unint64_t v75 = v1027;
            if ((*a2)[6])
            {
              unint64_t v514 = 0;
              uint64_t v515 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v516 = 0;
                if ((v515 & 0x80000000) == 0)
                {
                  uint64_t v517 = v515;
                  int v518 = v514;
                  do
                  {
                    ldiv_t v519 = ldiv(v518, v74[v517]);
                    int v518 = v519.quot;
                    v516 += v75[v517--] * v519.rem;
                  }
                  while (v517 != -1);
                }
                LODWORD(v1012) = v516;
                LOBYTE(v1011) = 0;
                uint64_t v1024 = 0;
                uint64_t v520 = operator new(0x28uLL);
                void *v520 = &unk_27062D7F8;
                v520[1] = &__b;
                v520[2] = &v1011;
                v520[3] = &__len;
                v520[4] = &v1012;
                uint64_t v1024 = v520;
                uint64_t v1032 = 0;
                unint64_t v521 = operator new(0x28uLL);
                void *v521 = &unk_27062B578;
                v521[1] = &v1018;
                v521[2] = &v1020;
                v521[3] = v1031;
                v521[4] = v1023;
                int v1027 = v521;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
                std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
                *(unsigned char *)uint64_t v513 = v1011;
                uint64_t v513 = (int *)((char *)v513 + 1);
                ++v514;
              }
              while ((unint64_t)(*a2)[6] > v514);
            }
            goto LABEL_1093;
          }
          if (v1017 != 4) {
            goto LABEL_1097;
          }
          int v158 = v1019;
LABEL_528:
          int v1011 = *((_DWORD *)v158 - 1);
          size_t v503 = *((void *)v1021 - 1);
          int v1019 = v158 - 4;
          v1021 -= 8;
          unsigned int v1012 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v503;
          __b = (*a2)[19];
          int v74 = v1025;
          unint64_t v75 = v1027;
          unint64_t v504 = (*a2)[6];
          if (v1019 == v1018)
          {
            if (v504)
            {
              int v599 = 0;
              uint64_t v600 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
              do
              {
                uint64_t v601 = 0;
                if ((v600 & 0x80000000) != 0)
                {
                  char v604 = a2;
                }
                else
                {
                  uint64_t v602 = v600;
                  int v603 = v599;
                  char v604 = a2;
                  do
                  {
                    ldiv_t v605 = ldiv(v603, v74[v602]);
                    int v603 = v605.quot;
                    v601 += v75[v602--] * v605.rem;
                  }
                  while (v602 != -1);
                }
                size_t v606 = (unsigned __int8 *)__b;
                if (__len)
                {
                  bzero(__b, __len);
                  size_t v607 = __len;
                  size_t v606 = (unsigned __int8 *)__b;
                }
                else
                {
                  size_t v607 = 0;
                }
                int v608 = v1011;
                if (v1011 >= 1)
                {
                  int v609 = 0;
                  int v610 = (unsigned __int8 *)v1012 + (int)v601;
                  do
                  {
                    size_t v611 = v607;
                    for (uint64_t i13 = v606; v611; --v611)
                    {
                      unsigned int v614 = *v610++;
                      unsigned __int8 v613 = v614;
                      if (*i13 > v614) {
                        unsigned __int8 v613 = *i13;
                      }
                      *i13++ = v613;
                    }
                    ++v609;
                  }
                  while (v609 != v608);
                  size_t v607 = __len;
                  size_t v606 = (unsigned __int8 *)__b;
                }
                __b = &v606[v607];
                v599 += v607;
              }
              while ((unint64_t)(*v604)[6] > v599);
            }
          }
          else if (v504)
          {
            int v505 = 0;
            uint64_t v506 = ((unint64_t)(v1026 - (void)v1025) >> 2) - 1;
            do
            {
              uint64_t v507 = 0;
              if ((v506 & 0x80000000) == 0)
              {
                uint64_t v508 = v506;
                int v509 = v505;
                do
                {
                  ldiv_t v510 = ldiv(v509, v74[v508]);
                  int v509 = v510.quot;
                  v507 += v75[v508--] * v510.rem;
                }
                while (v508 != -1);
              }
              int v1009 = v507;
              if (__len) {
                bzero(__b, __len);
              }
              uint64_t v1024 = 0;
              unint64_t v511 = operator new(0x38uLL);
              *unint64_t v511 = &unk_27062D778;
              v511[1] = &v1022;
              v511[2] = &v1012;
              v511[3] = &v1009;
              v511[4] = &__b;
              v511[5] = &v1011;
              v511[6] = &__len;
              uint64_t v1024 = v511;
              uint64_t v1032 = 0;
              int v512 = operator new(0x28uLL);
              *int v512 = &unk_27062B578;
              v512[1] = &v1018;
              v512[2] = &v1020;
              v512[3] = v1031;
              v512[4] = v1023;
              int v1027 = v512;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1025, v1031);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1025);
              std::function<void ()(int,int)>::operator()((uint64_t)v1031, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1031);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1023);
              __b = (char *)__b + __len;
              v505 += __len;
            }
            while ((unint64_t)(*a2)[6] > v505);
          }
LABEL_1093:
          if (v75) {
            operator delete(v75);
          }
          if (v74) {
            operator delete(v74);
          }
          goto LABEL_1097;
        }
        int v158 = v1019;
        if (v1019 - (unsigned char *)v1018 != 4) {
          goto LABEL_528;
        }
        uint64_t v494 = *((int *)v1019 - 1);
        size_t v495 = *((void *)v1021 - 1);
        v1019 -= 4;
        v1021 -= 8;
        if ((*a2)[6])
        {
          LODWORD(v496) = 0;
          int v497 = (*a2)[19];
          uint64_t v498 = *(void *)(*(void *)a1 + 152);
          do
          {
            if (v495) {
              bzero(v497, v495);
            }
            if ((int)v494 >= 1)
            {
              int v499 = 0;
              uint64_t v500 = v498;
              do
              {
                if (v495)
                {
                  for (uint64_t i14 = 0; i14 != v495; ++i14)
                  {
                    unsigned int v502 = *(unsigned __int8 *)(v500 + i14);
                    if (*((unsigned __int8 *)v497 + i14) > v502) {
                      LOBYTE(v502) = *((unsigned char *)v497 + i14);
                    }
                    *((unsigned char *)v497 + i14) = v502;
                  }
                  v500 += i14;
                }
                ++v499;
              }
              while (v499 != v494);
            }
            v498 += v495 * v494;
            int v497 = (int *)((char *)v497 + v495);
            unint64_t v496 = (int)v496 + (int)v495;
          }
          while (v496 < (unint64_t)(*a2)[6]);
        }
      }
LABEL_1097:
      if (v1020)
      {
        int v1021 = (char *)v1020;
        operator delete(v1020);
      }
      if (v1018)
      {
        int v1019 = v1018;
        operator delete(v1018);
      }
      return;
    default:
      return;
  }
}

void sub_256DAE0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::anonymous namespace'::reduce_dispatch_out<unsigned int>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  uint64_t v1059 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (void)(*a2)[6]));
      int v1054 = &unk_27062AEC8;
      unsigned __int8 v1055 = mlx::core::allocator::free;
      int v1056 = &v1054;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1054);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
      uint64_t v1041 = 0;
      uint64_t v1042 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1041 = __p;
        operator delete(__p);
      }
      if (v1043 == 1)
      {
        unsigned int v62 = v1045;
        if (v1045 - (unsigned char *)v1044 != 4) {
          goto LABEL_113;
        }
        int v63 = (*a2)[6];
        if (v63)
        {
          uint64_t v64 = 0;
          uint64_t v65 = *(int *)v1044;
          uint64_t v66 = (char *)(*a2)[19];
          char v67 = *(int **)(*(void *)a1 + 152);
          do
          {
            *uint64_t v66 = 1;
            if ((int)v65 >= 1)
            {
              char v68 = 1;
              unsigned int v69 = v65 + 1;
              unsigned int v70 = v67;
              do
              {
                int v71 = *v70++;
                v68 &= v71 != 0;
                --v69;
              }
              while (v69 > 1);
              *uint64_t v66 = v68;
            }
            uint64_t v64 = (int *)((char *)v64 + 1);
            ++v66;
            v67 += v65;
          }
          while (v64 != v63);
        }
        goto LABEL_1076;
      }
      if (!v1043)
      {
        int v8 = (char *)(*a2)[19];
        char *v8 = 1;
        int v9 = *(_DWORD *)(*(void *)a1 + 48);
        if (v9 >= 1)
        {
          int v10 = *(int **)(*(void *)a1 + 152);
          unsigned int v11 = v9 + 1;
          char v12 = 1;
          do
          {
            int v13 = *v10++;
            v12 &= v13 != 0;
            --v11;
          }
          while (v11 > 1);
          char *v8 = v12;
        }
        goto LABEL_1076;
      }
      if ((v1043 & 0xFFFFFFFD) == 1)
      {
        unsigned int v62 = v1045;
LABEL_113:
        LODWORD(__b) = *((_DWORD *)v62 - 1);
        unint64_t v1045 = v62 - 4;
        v1047 -= 8;
        size_t v115 = *(void *)(*(void *)a1 + 152);
        int v1038 = (*a2)[19];
        __leuint64_t n = v115;
        size_t v73 = v1051;
        int v74 = v1053;
        unint64_t v116 = (*a2)[6];
        if (v1045 == v1044)
        {
          if (v116)
          {
            uint64_t v215 = 0;
            uint64_t v216 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            int v217 = (char *)v1038;
            size_t v1020 = __len;
            int v218 = (int)__b;
            int v219 = __b + 1;
            do
            {
              uint64_t v220 = 0;
              if ((v216 & 0x80000000) == 0)
              {
                uint64_t v221 = v216;
                int quot = (int)v215;
                do
                {
                  ldiv_t v223 = ldiv(quot, v73[v221]);
                  int quot = v223.quot;
                  v220 += v74[v221--] * v223.rem;
                }
                while (v221 != -1);
              }
              char *v217 = 1;
              if (v218 >= 1)
              {
                char v224 = (int *)(v1020 + 4 * (int)v220);
                char v225 = 1;
                unsigned int v226 = v219;
                do
                {
                  int v227 = *v224++;
                  v225 &= v227 != 0;
                  --v226;
                }
                while (v226 > 1);
                char *v217 = v225;
              }
              uint64_t v215 = (int *)((char *)v215 + 1);
              ++v217;
            }
            while (v215 != v116);
          }
        }
        else if (v116)
        {
          unint64_t v117 = 0;
          uint64_t v118 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v119 = 0;
            if ((v118 & 0x80000000) == 0)
            {
              uint64_t v120 = v118;
              int v121 = v117;
              do
              {
                ldiv_t v122 = ldiv(v121, v73[v120]);
                int v121 = v122.quot;
                v119 += v74[v120--] * v122.rem;
              }
              while (v120 != -1);
            }
            int v1037 = v119;
            *(unsigned char *)int v1038 = 1;
            unsigned __int8 v1050 = 0;
            size_t v123 = operator new(0x30uLL);
            void *v123 = &unk_27062D9F8;
            v123[1] = &v1035;
            v123[2] = &__len;
            v123[3] = &v1037;
            v123[4] = &v1038;
            v123[5] = &__b;
            unsigned __int8 v1050 = v123;
            uint64_t v1058 = 0;
            size_t v124 = operator new(0x28uLL);
            *size_t v124 = &unk_27062B578;
            v124[1] = &v1044;
            v124[2] = &v1046;
            v124[3] = v1057;
            v124[4] = v1049;
            unsigned int v1053 = v124;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
            std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
            ++v117;
            int v1038 = (int *)((char *)v1038 + 1);
          }
          while ((unint64_t)(*a2)[6] > v117);
        }
        goto LABEL_1072;
      }
      if (v1043 != 2)
      {
        if (v1043 != 5)
        {
          if (v1043 != 4) {
            goto LABEL_1076;
          }
          unint64_t v156 = v1045;
          goto LABEL_456;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        int v316 = (*a2)[19];
        size_t v73 = v1051;
        int v74 = v1053;
        if ((*a2)[6])
        {
          unint64_t v317 = 0;
          uint64_t v318 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v319 = 0;
            if ((v318 & 0x80000000) == 0)
            {
              uint64_t v320 = v318;
              int v321 = v317;
              do
              {
                ldiv_t v322 = ldiv(v321, v73[v320]);
                int v321 = v322.quot;
                v319 += v74[v320--] * v322.rem;
              }
              while (v320 != -1);
            }
            LODWORD(v1038) = v319;
            LOBYTE(v1037) = 1;
            unsigned __int8 v1050 = 0;
            uint64_t v323 = operator new(0x28uLL);
            void *v323 = &unk_27062DAF8;
            v323[1] = &__b;
            v323[2] = &v1037;
            v323[3] = &__len;
            v323[4] = &v1038;
            unsigned __int8 v1050 = v323;
            uint64_t v1058 = 0;
            uint64_t v324 = operator new(0x28uLL);
            void *v324 = &unk_27062B578;
            v324[1] = &v1044;
            v324[2] = &v1046;
            v324[3] = v1057;
            v324[4] = v1049;
            unsigned int v1053 = v324;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
            std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
            *(unsigned char *)int v316 = v1037;
            int v316 = (int *)((char *)v316 + 1);
            ++v317;
          }
          while ((unint64_t)(*a2)[6] > v317);
        }
        goto LABEL_1072;
      }
      unint64_t v156 = v1045;
      if (v1045 - (unsigned char *)v1044 != 4)
      {
LABEL_456:
        int v1037 = *((_DWORD *)v156 - 1);
        size_t v453 = *((void *)v1047 - 1);
        unint64_t v1045 = v156 - 4;
        v1047 -= 8;
        int v1038 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v453;
        __b = (*a2)[19];
        size_t v73 = v1051;
        int v74 = v1053;
        unint64_t v454 = (unint64_t)(*a2)[6];
        if (v1045 == v1044)
        {
          if (v454)
          {
            int v569 = 0;
            BOOL v570 = (char *)__b;
            uint64_t v571 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            size_t v572 = __len;
            unsigned int v1023 = v1038;
            int v573 = v1037;
            do
            {
              uint64_t v574 = 0;
              if ((v571 & 0x80000000) == 0)
              {
                uint64_t v575 = v571;
                int v576 = v569;
                do
                {
                  ldiv_t v577 = ldiv(v576, v73[v575]);
                  int v576 = v577.quot;
                  v574 += v74[v575--] * v577.rem;
                }
                while (v575 != -1);
              }
              if (v572) {
                memset(v570, 1, v572);
              }
              if (v573 >= 1)
              {
                int v578 = 0;
                int v579 = &v1023[(int)v574];
                do
                {
                  if (v572)
                  {
                    for (uint64_t i = 0; i != v572; ++i)
                    {
                      if (*v579++) {
                        BOOL v582 = v570[i] == 0;
                      }
                      else {
                        BOOL v582 = 1;
                      }
                      char v583 = !v582;
                      v570[i] = v583;
                    }
                  }
                  ++v578;
                }
                while (v578 != v573);
              }
              v570 += v572;
              v569 += v572;
            }
            while (v454 > v569);
          }
        }
        else if (v454)
        {
          int v455 = 0;
          uint64_t v456 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v457 = 0;
            if ((v456 & 0x80000000) == 0)
            {
              uint64_t v458 = v456;
              int v459 = v455;
              do
              {
                ldiv_t v460 = ldiv(v459, v73[v458]);
                int v459 = v460.quot;
                v457 += v74[v458--] * v460.rem;
              }
              while (v458 != -1);
            }
            int v1035 = v457;
            if (__len) {
              memset(__b, 1, __len);
            }
            unsigned __int8 v1050 = 0;
            uint64_t v461 = operator new(0x38uLL);
            *uint64_t v461 = &unk_27062DA78;
            v461[1] = &v1048;
            v461[2] = &v1038;
            v461[3] = &v1035;
            v461[4] = &__b;
            v461[5] = &v1037;
            v461[6] = &__len;
            unsigned __int8 v1050 = v461;
            uint64_t v1058 = 0;
            uint64_t v462 = operator new(0x28uLL);
            *uint64_t v462 = &unk_27062B578;
            v462[1] = &v1044;
            v462[2] = &v1046;
            v462[3] = v1057;
            v462[4] = v1049;
            unsigned int v1053 = v462;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
            std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
            __b = (char *)__b + __len;
            v455 += __len;
          }
          while ((unint64_t)(*a2)[6] > v455);
        }
        goto LABEL_1072;
      }
      uint64_t v441 = *((int *)v1045 - 1);
      size_t v442 = *((void *)v1047 - 1);
      v1045 -= 4;
      v1047 -= 8;
      uint64_t v443 = (*a2)[6];
      if (v443)
      {
        LODWORD(v444) = 0;
        BOOL v445 = (*a2)[19];
        char v446 = *(_DWORD **)(*(void *)a1 + 152);
        do
        {
          if (v442) {
            memset(v445, 1, v442);
          }
          if ((int)v441 >= 1)
          {
            int v447 = 0;
            unint64_t v448 = v446;
            do
            {
              if (v442)
              {
                for (uint64_t j = 0; j != v442; ++j)
                {
                  if (*v448++) {
                    BOOL v451 = *((unsigned char *)v445 + j) == 0;
                  }
                  else {
                    BOOL v451 = 1;
                  }
                  char v452 = !v451;
                  *((unsigned char *)v445 + j) = v452;
                }
              }
              ++v447;
            }
            while (v447 != v441);
          }
          v446 += v442 * v441;
          BOOL v445 = (int *)((char *)v445 + v442);
          unint64_t v444 = (int)v444 + (int)v442;
        }
        while (v444 < (unint64_t)v443);
      }
      goto LABEL_1076;
    case 1:
      int v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1054 = &unk_27062AEC8;
      unsigned __int8 v1055 = mlx::core::allocator::free;
      int v1056 = &v1054;
      mlx::core::array::set_data(a2, (uint64_t)v31, (uint64_t)&v1054);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
      uint64_t v1041 = 0;
      uint64_t v1042 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1041 = __p;
        operator delete(__p);
      }
      if (v1043 == 1)
      {
        uint64_t v84 = v1045;
        if (v1045 - (unsigned char *)v1044 == 4)
        {
          unint64_t v85 = (*a2)[6];
          if (v85)
          {
            uint64_t v86 = 0;
            uint64_t v87 = *(int *)v1044;
            uint64_t v88 = (*a2)[19];
            int v89 = *(int **)(*(void *)a1 + 152);
            do
            {
              *(unsigned char *)uint64_t v88 = 0;
              if ((int)v87 >= 1)
              {
                char v90 = 0;
                unsigned int v91 = v87 + 1;
                unsigned int v92 = v89;
                do
                {
                  int v93 = *v92++;
                  v90 |= v93 != 0;
                  --v91;
                }
                while (v91 > 1);
                *(unsigned char *)uint64_t v88 = v90;
              }
              uint64_t v86 = (int *)((char *)v86 + 1);
              uint64_t v88 = (int *)((char *)v88 + 1);
              v89 += v87;
            }
            while (v86 != v85);
          }
          goto LABEL_1076;
        }
LABEL_123:
        LODWORD(__b) = *((_DWORD *)v84 - 1);
        unint64_t v1045 = v84 - 4;
        v1047 -= 8;
        size_t v125 = *(void *)(*(void *)a1 + 152);
        int v1038 = (*a2)[19];
        __leuint64_t n = v125;
        size_t v73 = v1051;
        int v74 = v1053;
        unint64_t v126 = (*a2)[6];
        if (v1045 == v1044)
        {
          if (v126)
          {
            uint64_t v228 = 0;
            uint64_t v229 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            int v230 = v1038;
            size_t v1021 = __len;
            int v231 = (int)__b;
            int v232 = __b + 1;
            do
            {
              uint64_t v233 = 0;
              if ((v229 & 0x80000000) == 0)
              {
                uint64_t v234 = v229;
                int v235 = (int)v228;
                do
                {
                  ldiv_t v236 = ldiv(v235, v73[v234]);
                  int v235 = v236.quot;
                  v233 += v74[v234--] * v236.rem;
                }
                while (v234 != -1);
              }
              *(unsigned char *)int v230 = 0;
              if (v231 >= 1)
              {
                char v237 = 0;
                unsigned int v238 = (int *)(v1021 + 4 * (int)v233);
                unsigned int v239 = v232;
                do
                {
                  int v240 = *v238++;
                  v237 |= v240 != 0;
                  --v239;
                }
                while (v239 > 1);
                *(unsigned char *)int v230 = v237;
              }
              uint64_t v228 = (int *)((char *)v228 + 1);
              int v230 = (int *)((char *)v230 + 1);
            }
            while (v228 != v126);
          }
        }
        else if (v126)
        {
          unint64_t v127 = 0;
          uint64_t v128 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v129 = 0;
            if ((v128 & 0x80000000) == 0)
            {
              uint64_t v130 = v128;
              int v131 = v127;
              do
              {
                ldiv_t v132 = ldiv(v131, v73[v130]);
                int v131 = v132.quot;
                v129 += v74[v130--] * v132.rem;
              }
              while (v130 != -1);
            }
            int v1037 = v129;
            *(unsigned char *)int v1038 = 0;
            unsigned __int8 v1050 = 0;
            size_t v133 = operator new(0x30uLL);
            *size_t v133 = &unk_27062DB78;
            v133[1] = &v1035;
            v133[2] = &__len;
            v133[3] = &v1037;
            v133[4] = &v1038;
            v133[5] = &__b;
            unsigned __int8 v1050 = v133;
            uint64_t v1058 = 0;
            size_t v134 = operator new(0x28uLL);
            void *v134 = &unk_27062B578;
            v134[1] = &v1044;
            v134[2] = &v1046;
            v134[3] = v1057;
            v134[4] = v1049;
            unsigned int v1053 = v134;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
            std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
            ++v127;
            int v1038 = (int *)((char *)v1038 + 1);
          }
          while ((unint64_t)(*a2)[6] > v127);
        }
        goto LABEL_1072;
      }
      if (!v1043)
      {
        int v25 = (*a2)[19];
        *(unsigned char *)int v25 = 0;
        int v32 = *(_DWORD *)(*(void *)a1 + 48);
        if (v32 < 1) {
          goto LABEL_1076;
        }
        unsigned __int8 v27 = 0;
        int v33 = *(int **)(*(void *)a1 + 152);
        unsigned int v34 = v32 + 1;
        do
        {
          int v35 = *v33++;
          v27 |= v35 != 0;
          --v34;
        }
        while (v34 > 1);
        goto LABEL_36;
      }
      if ((v1043 & 0xFFFFFFFD) == 1)
      {
        uint64_t v84 = v1045;
        goto LABEL_123;
      }
      switch(v1043)
      {
        case 2:
          int v157 = v1045;
          if (v1045 - (unsigned char *)v1044 == 4)
          {
            uint64_t v463 = *((int *)v1045 - 1);
            size_t v464 = *((void *)v1047 - 1);
            v1045 -= 4;
            v1047 -= 8;
            uint64_t v465 = (*a2)[6];
            if (v465)
            {
              LODWORD(v466) = 0;
              unint64_t v467 = (*a2)[19];
              int v468 = *(int **)(*(void *)a1 + 152);
              do
              {
                if (v464) {
                  bzero(v467, v464);
                }
                if ((int)v463 >= 1)
                {
                  int v469 = 0;
                  uint64_t v470 = v468;
                  do
                  {
                    if (v464)
                    {
                      for (uint64_t k = 0; k != v464; ++k)
                      {
                        int v472 = *v470++;
                        *((unsigned char *)v467 + k) |= v472 != 0;
                      }
                    }
                    ++v469;
                  }
                  while (v469 != v463);
                }
                v468 += v464 * v463;
                unint64_t v467 = (int *)((char *)v467 + v464);
                unint64_t v466 = (int)v466 + (int)v464;
              }
              while (v466 < (unint64_t)v465);
            }
            goto LABEL_1076;
          }
          break;
        case 5:
          __leuint64_t n = *(void *)(*(void *)a1 + 152);
          int v325 = (*a2)[19];
          size_t v73 = v1051;
          int v74 = v1053;
          if ((*a2)[6])
          {
            unint64_t v326 = 0;
            uint64_t v327 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v328 = 0;
              if ((v327 & 0x80000000) == 0)
              {
                uint64_t v329 = v327;
                int v330 = v326;
                do
                {
                  ldiv_t v331 = ldiv(v330, v73[v329]);
                  int v330 = v331.quot;
                  v328 += v74[v329--] * v331.rem;
                }
                while (v329 != -1);
              }
              LODWORD(v1038) = v328;
              LOBYTE(v1037) = 0;
              unsigned __int8 v1050 = 0;
              uint64_t v332 = operator new(0x28uLL);
              *uint64_t v332 = &unk_27062DC78;
              v332[1] = &__b;
              v332[2] = &v1037;
              v332[3] = &__len;
              v332[4] = &v1038;
              unsigned __int8 v1050 = v332;
              uint64_t v1058 = 0;
              uint64_t v333 = operator new(0x28uLL);
              *uint64_t v333 = &unk_27062B578;
              v333[1] = &v1044;
              v333[2] = &v1046;
              v333[3] = v1057;
              v333[4] = v1049;
              unsigned int v1053 = v333;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              *(unsigned char *)int v325 = v1037;
              int v325 = (int *)((char *)v325 + 1);
              ++v326;
            }
            while ((unint64_t)(*a2)[6] > v326);
          }
          goto LABEL_1072;
        case 4:
          int v157 = v1045;
          break;
        default:
          goto LABEL_1076;
      }
      int v1037 = *((_DWORD *)v157 - 1);
      size_t v473 = *((void *)v1047 - 1);
      unint64_t v1045 = v157 - 4;
      v1047 -= 8;
      int v1038 = *(int **)(*(void *)a1 + 152);
      __leuint64_t n = v473;
      __b = (*a2)[19];
      size_t v73 = v1051;
      int v74 = v1053;
      unint64_t v474 = (unint64_t)(*a2)[6];
      if (v1045 == v1044)
      {
        if (v474)
        {
          int v584 = 0;
          uint64_t v585 = (char *)__b;
          uint64_t v586 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          size_t v587 = __len;
          uint64_t v1024 = v1038;
          int v588 = v1037;
          do
          {
            uint64_t v589 = 0;
            if ((v586 & 0x80000000) == 0)
            {
              uint64_t v590 = v586;
              int v591 = v584;
              do
              {
                ldiv_t v592 = ldiv(v591, v73[v590]);
                int v591 = v592.quot;
                v589 += v74[v590--] * v592.rem;
              }
              while (v590 != -1);
            }
            if (v587) {
              bzero(v585, v587);
            }
            if (v588 >= 1)
            {
              int v593 = 0;
              int v594 = &v1024[(int)v589];
              do
              {
                if (v587)
                {
                  for (uint64_t m = 0; m != v587; ++m)
                  {
                    int v596 = *v594++;
                    v585[m] |= v596 != 0;
                  }
                }
                ++v593;
              }
              while (v593 != v588);
            }
            v585 += v587;
            v584 += v587;
          }
          while (v474 > v584);
        }
      }
      else if (v474)
      {
        int v475 = 0;
        uint64_t v476 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
        do
        {
          uint64_t v477 = 0;
          if ((v476 & 0x80000000) == 0)
          {
            uint64_t v478 = v476;
            int v479 = v475;
            do
            {
              ldiv_t v480 = ldiv(v479, v73[v478]);
              int v479 = v480.quot;
              v477 += v74[v478--] * v480.rem;
            }
            while (v478 != -1);
          }
          int v1035 = v477;
          if (__len) {
            bzero(__b, __len);
          }
          unsigned __int8 v1050 = 0;
          int v481 = operator new(0x38uLL);
          *int v481 = &unk_27062DBF8;
          v481[1] = &v1048;
          v481[2] = &v1038;
          v481[3] = &v1035;
          v481[4] = &__b;
          v481[5] = &v1037;
          v481[6] = &__len;
          unsigned __int8 v1050 = v481;
          uint64_t v1058 = 0;
          uint64_t v482 = operator new(0x28uLL);
          *uint64_t v482 = &unk_27062B578;
          v482[1] = &v1044;
          v482[2] = &v1046;
          v482[3] = v1057;
          v482[4] = v1049;
          unsigned int v1053 = v482;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
          std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
          __b = (char *)__b + __len;
          v475 += __len;
        }
        while ((unint64_t)(*a2)[6] > v475);
      }
      goto LABEL_1072;
    case 2:
      unint64_t v22 = *a2;
      int v23 = (*a2)[7];
      switch((int)v23)
      {
        case 0:
          int v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            uint64_t v266 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              uint64_t v267 = (*a2)[6];
              if (v267)
              {
                uint64_t v268 = 0;
                uint64_t v269 = *(int *)v1044;
                unsigned int v270 = (BOOL *)(*a2)[19];
                unsigned int v271 = *(int **)(*(void *)a1 + 152);
                do
                {
                  BOOL *v270 = 0;
                  if ((int)v269 >= 1)
                  {
                    BOOL v272 = 0;
                    unsigned int v273 = v269 + 1;
                    size_t v274 = v271;
                    do
                    {
                      int v275 = *v274++;
                      BOOL v272 = v275 + v272 != 0;
                      --v273;
                    }
                    while (v273 > 1);
                    BOOL *v270 = v272;
                  }
                  uint64_t v268 = (int *)((char *)v268 + 1);
                  ++v270;
                  v271 += v269;
                }
                while (v268 != v267);
              }
              goto LABEL_1076;
            }
LABEL_286:
            LODWORD(__b) = *((_DWORD *)v266 - 1);
            unint64_t v1045 = v266 - 4;
            v1047 -= 8;
            size_t v276 = *(void *)(*(void *)a1 + 152);
            int v1038 = (*a2)[19];
            __leuint64_t n = v276;
            size_t v73 = v1051;
            int v74 = v1053;
            uint64_t v277 = (*a2)[6];
            if (v1045 == v1044)
            {
              if (v277)
              {
                unsigned int v633 = 0;
                uint64_t v634 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                unint64_t v635 = (BOOL *)v1038;
                size_t v1027 = __len;
                int v636 = (int)__b;
                int v637 = __b + 1;
                do
                {
                  uint64_t v638 = 0;
                  if ((v634 & 0x80000000) == 0)
                  {
                    uint64_t v639 = v634;
                    int v640 = (int)v633;
                    do
                    {
                      ldiv_t v641 = ldiv(v640, v73[v639]);
                      int v640 = v641.quot;
                      v638 += v74[v639--] * v641.rem;
                    }
                    while (v639 != -1);
                  }
                  *unint64_t v635 = 0;
                  if (v636 >= 1)
                  {
                    BOOL v642 = 0;
                    int v643 = (int *)(v1027 + 4 * (int)v638);
                    unsigned int v644 = v637;
                    do
                    {
                      int v645 = *v643++;
                      BOOL v642 = v645 + v642 != 0;
                      --v644;
                    }
                    while (v644 > 1);
                    *unint64_t v635 = v642;
                  }
                  unsigned int v633 = (int *)((char *)v633 + 1);
                  ++v635;
                }
                while (v633 != v277);
              }
            }
            else if (v277)
            {
              unint64_t v278 = 0;
              uint64_t v279 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v280 = 0;
                if ((v279 & 0x80000000) == 0)
                {
                  uint64_t v281 = v279;
                  int v282 = v278;
                  do
                  {
                    ldiv_t v283 = ldiv(v282, v73[v281]);
                    int v282 = v283.quot;
                    v280 += v74[v281--] * v283.rem;
                  }
                  while (v281 != -1);
                }
                int v1037 = v280;
                *(unsigned char *)int v1038 = 0;
                unsigned __int8 v1050 = 0;
                size_t v284 = operator new(0x30uLL);
                *size_t v284 = &unk_27062DCF8;
                v284[1] = &v1035;
                v284[2] = &__len;
                v284[3] = &v1037;
                v284[4] = &v1038;
                v284[5] = &__b;
                unsigned __int8 v1050 = v284;
                uint64_t v1058 = 0;
                unint64_t v285 = operator new(0x28uLL);
                *unint64_t v285 = &unk_27062B578;
                v285[1] = &v1044;
                v285[2] = &v1046;
                v285[3] = v1057;
                v285[4] = v1049;
                unsigned int v1053 = v285;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                ++v278;
                int v1038 = (int *)((char *)v1038 + 1);
              }
              while ((unint64_t)(*a2)[6] > v278);
            }
            goto LABEL_1072;
          }
          if (v1043)
          {
            if ((v1043 & 0xFFFFFFFD) == 1)
            {
              uint64_t v266 = v1045;
              goto LABEL_286;
            }
            switch(v1043)
            {
              case 2:
                int v626 = v1045;
                if (v1045 - (unsigned char *)v1044 == 4)
                {
                  uint64_t v718 = *((int *)v1045 - 1);
                  size_t v719 = *((void *)v1047 - 1);
                  v1045 -= 4;
                  v1047 -= 8;
                  uint64_t v720 = (*a2)[6];
                  if (v720)
                  {
                    LODWORD(v721) = 0;
                    int v722 = (*a2)[19];
                    ldiv_t v723 = *(int **)(*(void *)a1 + 152);
                    do
                    {
                      if (v719) {
                        bzero(v722, v719);
                      }
                      if ((int)v718 >= 1)
                      {
                        int v724 = 0;
                        unint64_t v725 = v723;
                        do
                        {
                          if (v719)
                          {
                            for (uint64_t n = 0; n != v719; ++n)
                            {
                              int v727 = *v725++;
                              *((unsigned char *)v722 + n) = *((unsigned __int8 *)v722 + n) + v727 != 0;
                            }
                          }
                          ++v724;
                        }
                        while (v724 != v718);
                      }
                      v723 += v719 * v718;
                      int v722 = (int *)((char *)v722 + v719);
                      unint64_t v721 = (int)v721 + (int)v719;
                    }
                    while (v721 < (unint64_t)v720);
                  }
                  goto LABEL_1076;
                }
                break;
              case 5:
                __leuint64_t n = *(void *)(*(void *)a1 + 152);
                unint64_t v738 = (*a2)[19];
                size_t v73 = v1051;
                int v74 = v1053;
                if ((*a2)[6])
                {
                  unint64_t v739 = 0;
                  uint64_t v740 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  do
                  {
                    uint64_t v741 = 0;
                    if ((v740 & 0x80000000) == 0)
                    {
                      uint64_t v742 = v740;
                      int v743 = v739;
                      do
                      {
                        ldiv_t v744 = ldiv(v743, v73[v742]);
                        int v743 = v744.quot;
                        v741 += v74[v742--] * v744.rem;
                      }
                      while (v742 != -1);
                    }
                    LODWORD(v1038) = v741;
                    LOBYTE(v1037) = 0;
                    unsigned __int8 v1050 = 0;
                    int v745 = operator new(0x28uLL);
                    *int v745 = &unk_27062DDF8;
                    v745[1] = &__b;
                    v745[2] = &v1037;
                    v745[3] = &__len;
                    v745[4] = &v1038;
                    unsigned __int8 v1050 = v745;
                    uint64_t v1058 = 0;
                    uint64_t v746 = operator new(0x28uLL);
                    *uint64_t v746 = &unk_27062B578;
                    v746[1] = &v1044;
                    v746[2] = &v1046;
                    v746[3] = v1057;
                    v746[4] = v1049;
                    unsigned int v1053 = v746;
                    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                    std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                    *(unsigned char *)unint64_t v738 = v1037;
                    unint64_t v738 = (int *)((char *)v738 + 1);
                    ++v739;
                  }
                  while ((unint64_t)(*a2)[6] > v739);
                }
                goto LABEL_1072;
              case 4:
                int v626 = v1045;
                break;
              default:
                goto LABEL_1076;
            }
            int v1037 = *((_DWORD *)v626 - 1);
            size_t v728 = *((void *)v1047 - 1);
            unint64_t v1045 = v626 - 4;
            v1047 -= 8;
            int v1038 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v728;
            __b = (*a2)[19];
            size_t v73 = v1051;
            int v74 = v1053;
            unint64_t v729 = (unint64_t)(*a2)[6];
            if (v1045 == v1044)
            {
              if (v729)
              {
                int v919 = 0;
                ldiv_t v920 = (unsigned __int8 *)__b;
                uint64_t v921 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                size_t v922 = __len;
                char v1030 = v1038;
                int v923 = v1037;
                do
                {
                  uint64_t v924 = 0;
                  if ((v921 & 0x80000000) == 0)
                  {
                    uint64_t v925 = v921;
                    int v926 = v919;
                    do
                    {
                      ldiv_t v927 = ldiv(v926, v73[v925]);
                      int v926 = v927.quot;
                      v924 += v74[v925--] * v927.rem;
                    }
                    while (v925 != -1);
                  }
                  if (v922) {
                    bzero(v920, v922);
                  }
                  if (v923 >= 1)
                  {
                    int v928 = 0;
                    int v929 = &v1030[(int)v924];
                    do
                    {
                      if (v922)
                      {
                        for (iuint64_t i = 0; ii != v922; ++ii)
                        {
                          int v931 = *v929++;
                          v920[ii] = v920[ii] + v931 != 0;
                        }
                      }
                      ++v928;
                    }
                    while (v928 != v923);
                  }
                  v920 += v922;
                  v919 += v922;
                }
                while (v729 > v919);
              }
            }
            else if (v729)
            {
              int v730 = 0;
              uint64_t v731 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v732 = 0;
                if ((v731 & 0x80000000) == 0)
                {
                  uint64_t v733 = v731;
                  int v734 = v730;
                  do
                  {
                    ldiv_t v735 = ldiv(v734, v73[v733]);
                    int v734 = v735.quot;
                    v732 += v74[v733--] * v735.rem;
                  }
                  while (v733 != -1);
                }
                int v1035 = v732;
                if (__len) {
                  bzero(__b, __len);
                }
                unsigned __int8 v1050 = 0;
                size_t v736 = operator new(0x38uLL);
                *size_t v736 = &unk_27062DD78;
                v736[1] = &v1048;
                v736[2] = &v1038;
                v736[3] = &v1035;
                v736[4] = &__b;
                v736[5] = &v1037;
                v736[6] = &__len;
                unsigned __int8 v1050 = v736;
                uint64_t v1058 = 0;
                unint64_t v737 = operator new(0x28uLL);
                *unint64_t v737 = &unk_27062B578;
                v737[1] = &v1044;
                v737[2] = &v1046;
                v737[3] = v1057;
                v737[4] = v1049;
                unsigned int v1053 = v737;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                __b = (char *)__b + __len;
                v730 += __len;
              }
              while ((unint64_t)(*a2)[6] > v730);
            }
LABEL_1072:
            if (v74) {
              operator delete(v74);
            }
            if (v73) {
              operator delete(v73);
            }
            goto LABEL_1076;
          }
          int v25 = (*a2)[19];
          *(unsigned char *)int v25 = 0;
          int v26 = *(_DWORD *)(*(void *)a1 + 48);
          if (v26 < 1) {
            goto LABEL_1076;
          }
          unsigned __int8 v27 = 0;
          unsigned int v28 = *(int **)(*(void *)a1 + 152);
          unsigned int v29 = v26 + 1;
          do
          {
            int v30 = *v28++;
            unsigned __int8 v27 = v30 + v27 != 0;
            --v29;
          }
          while (v29 > 1);
LABEL_36:
          *(unsigned char *)int v25 = v27;
LABEL_1076:
          if (v1046)
          {
            char v1047 = (char *)v1046;
            operator delete(v1046);
          }
          if (v1044)
          {
            unint64_t v1045 = v1044;
            operator delete(v1044);
          }
          return;
        case 1:
          int v160 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v160, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            int v343 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              if ((*a2)[6])
              {
                unint64_t v344 = 0;
                uint64_t v345 = *(int *)v1044;
                int v346 = (*a2)[19];
                size_t v347 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(unsigned char *)int v346 = 0;
                  if ((int)v345 >= 1)
                  {
                    int v348 = 0;
                    unsigned int v349 = v345 + 1;
                    uint64_t v350 = v347;
                    do
                    {
                      int v351 = *v350;
                      v350 += 4;
                      v348 += v351;
                      *(unsigned char *)int v346 = v348;
                      --v349;
                    }
                    while (v349 > 1);
                  }
                  ++v344;
                  int v346 = (int *)((char *)v346 + 1);
                  v347 += 4 * v345;
                }
                while ((unint64_t)(*a2)[6] > v344);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              int v161 = (*a2)[19];
              *(unsigned char *)int v161 = 0;
              int v162 = *(_DWORD *)(*(void *)a1 + 48);
              if (v162 >= 1)
              {
                int v163 = 0;
                unsigned int v164 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v165 = v162 + 1;
                do
                {
                  int v166 = *v164;
                  v164 += 4;
                  v163 += v166;
                  *(unsigned char *)int v161 = v163;
                  --v165;
                }
                while (v165 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  uint64_t v627 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v747 = *((int *)v1045 - 1);
                    size_t v748 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    if ((*a2)[6])
                    {
                      LODWORD(v749) = 0;
                      ldiv_t v750 = (*a2)[19];
                      ldiv_t v751 = *(char **)(*(void *)a1 + 152);
                      do
                      {
                        if (v748) {
                          bzero(v750, v748);
                        }
                        if ((int)v747 >= 1)
                        {
                          int v752 = 0;
                          unint64_t v753 = v751;
                          do
                          {
                            if (v748)
                            {
                              for (juint64_t j = 0; jj != v748; ++jj)
                              {
                                char v755 = *v753;
                                v753 += 4;
                                *((unsigned char *)v750 + jj) += v755;
                              }
                            }
                            ++v752;
                          }
                          while (v752 != v747);
                        }
                        v751 += 4 * v748 * v747;
                        ldiv_t v750 = (int *)((char *)v750 + v748);
                        unint64_t v749 = (int)v749 + (int)v748;
                      }
                      while (v749 < (unint64_t)(*a2)[6]);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  unint64_t v766 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v767 = 0;
                    uint64_t v768 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v769 = 0;
                      if ((v768 & 0x80000000) == 0)
                      {
                        uint64_t v770 = v768;
                        int v771 = v767;
                        do
                        {
                          ldiv_t v772 = ldiv(v771, v73[v770]);
                          int v771 = v772.quot;
                          v769 += v74[v770--] * v772.rem;
                        }
                        while (v770 != -1);
                      }
                      LODWORD(v1038) = v769;
                      LOBYTE(v1037) = 0;
                      unsigned __int8 v1050 = 0;
                      int v773 = operator new(0x28uLL);
                      *int v773 = &unk_27062DF78;
                      v773[1] = &__b;
                      v773[2] = &v1037;
                      v773[3] = &__len;
                      v773[4] = &v1038;
                      unsigned __int8 v1050 = v773;
                      uint64_t v1058 = 0;
                      uint64_t v774 = operator new(0x28uLL);
                      *uint64_t v774 = &unk_27062B578;
                      v774[1] = &v1044;
                      v774[2] = &v1046;
                      v774[3] = v1057;
                      v774[4] = v1049;
                      unsigned int v1053 = v774;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *(unsigned char *)unint64_t v766 = v1037;
                      unint64_t v766 = (int *)((char *)v766 + 1);
                      ++v767;
                    }
                    while ((unint64_t)(*a2)[6] > v767);
                  }
                  goto LABEL_1072;
                case 4:
                  uint64_t v627 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v627 - 1);
              size_t v756 = *((void *)v1047 - 1);
              unint64_t v1045 = v627 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v756;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              uint64_t v757 = (*a2)[6];
              if (v1045 == v1044)
              {
                if (v757)
                {
                  int v932 = 0;
                  uint64_t v933 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  do
                  {
                    uint64_t v934 = 0;
                    if ((v933 & 0x80000000) != 0)
                    {
                      ldiv_t v937 = a2;
                    }
                    else
                    {
                      uint64_t v935 = v933;
                      int v936 = v932;
                      ldiv_t v937 = a2;
                      do
                      {
                        ldiv_t v938 = ldiv(v936, v73[v935]);
                        int v936 = v938.quot;
                        v934 += v74[v935--] * v938.rem;
                      }
                      while (v935 != -1);
                    }
                    int v939 = __b;
                    if (__len)
                    {
                      bzero(__b, __len);
                      size_t v940 = __len;
                      int v939 = __b;
                    }
                    else
                    {
                      size_t v940 = 0;
                    }
                    int v941 = v1037;
                    if (v1037 >= 1)
                    {
                      int v942 = 0;
                      uint64_t v943 = &v1038[(int)v934];
                      do
                      {
                        size_t v944 = v940;
                        for (kuint64_t k = v939; v944; --v944)
                        {
                          char v946 = *(unsigned char *)v943++;
                          *kk++ += v946;
                        }
                        ++v942;
                      }
                      while (v942 != v941);
                      size_t v940 = __len;
                      int v939 = __b;
                    }
                    __b = &v939[v940];
                    v932 += v940;
                  }
                  while ((unint64_t)(*v937)[6] > v932);
                }
              }
              else if (v757)
              {
                int v758 = 0;
                uint64_t v759 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v760 = 0;
                  if ((v759 & 0x80000000) == 0)
                  {
                    uint64_t v761 = v759;
                    int v762 = v758;
                    do
                    {
                      ldiv_t v763 = ldiv(v762, v73[v761]);
                      int v762 = v763.quot;
                      v760 += v74[v761--] * v763.rem;
                    }
                    while (v761 != -1);
                  }
                  int v1035 = v760;
                  if (__len) {
                    bzero(__b, __len);
                  }
                  unsigned __int8 v1050 = 0;
                  uint64_t v764 = operator new(0x38uLL);
                  *uint64_t v764 = &unk_27062DEF8;
                  v764[1] = &v1048;
                  v764[2] = &v1038;
                  v764[3] = &v1035;
                  v764[4] = &__b;
                  v764[5] = &v1037;
                  v764[6] = &__len;
                  unsigned __int8 v1050 = v764;
                  uint64_t v1058 = 0;
                  unint64_t v765 = operator new(0x28uLL);
                  *unint64_t v765 = &unk_27062B578;
                  v765[1] = &v1044;
                  v765[2] = &v1046;
                  v765[3] = v1057;
                  v765[4] = v1049;
                  unsigned int v1053 = v765;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + __len;
                  v758 += __len;
                }
                while ((unint64_t)(*a2)[6] > v758);
              }
              goto LABEL_1072;
            }
            int v343 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v343 - 1);
          unint64_t v1045 = v343 - 4;
          v1047 -= 8;
          size_t v352 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v352;
          size_t v73 = v1051;
          int v74 = v1053;
          int v353 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v353)
            {
              unint64_t v646 = 0;
              uint64_t v647 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v648 = 0;
                if ((v647 & 0x80000000) == 0)
                {
                  uint64_t v649 = v647;
                  int v650 = v646;
                  do
                  {
                    ldiv_t v651 = ldiv(v650, v73[v649]);
                    int v650 = v651.quot;
                    v648 += v74[v649--] * v651.rem;
                  }
                  while (v649 != -1);
                }
                *(unsigned char *)int v1038 = 0;
                int v652 = v1038;
                if ((int)__b >= 1)
                {
                  ldiv_t v653 = (unsigned __int8 *)(__len + 4 * (int)v648);
                  int v654 = *(unsigned __int8 *)v1038;
                  unsigned int v655 = __b + 1;
                  do
                  {
                    int v656 = *v653;
                    v653 += 4;
                    v654 += v656;
                    *(unsigned char *)int v652 = v654;
                    --v655;
                  }
                  while (v655 > 1);
                  int v652 = v1038;
                }
                ++v646;
                int v1038 = (int *)((char *)v652 + 1);
              }
              while ((unint64_t)(*a2)[6] > v646);
            }
          }
          else if (v353)
          {
            unint64_t v354 = 0;
            uint64_t v355 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v356 = 0;
              if ((v355 & 0x80000000) == 0)
              {
                uint64_t v357 = v355;
                int v358 = v354;
                do
                {
                  ldiv_t v359 = ldiv(v358, v73[v357]);
                  int v358 = v359.quot;
                  v356 += v74[v357--] * v359.rem;
                }
                while (v357 != -1);
              }
              int v1037 = v356;
              *(unsigned char *)int v1038 = 0;
              unsigned __int8 v1050 = 0;
              uint64_t v360 = operator new(0x30uLL);
              *uint64_t v360 = &unk_27062DE78;
              v360[1] = &v1035;
              v360[2] = &__len;
              v360[3] = &v1037;
              v360[4] = &v1038;
              v360[5] = &__b;
              unsigned __int8 v1050 = v360;
              uint64_t v1058 = 0;
              uint64_t v361 = operator new(0x28uLL);
              *uint64_t v361 = &unk_27062B578;
              v361[1] = &v1044;
              v361[2] = &v1046;
              v361[3] = v1057;
              v361[4] = v1049;
              unsigned int v1053 = v361;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v354;
              int v1038 = (int *)((char *)v1038 + 1);
            }
            while ((unint64_t)(*a2)[6] > v354);
          }
          goto LABEL_1072;
        case 2:
          int v167 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v167, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            uint64_t v362 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              int v363 = (*a2)[6];
              if (v363)
              {
                unsigned int v364 = 0;
                uint64_t v365 = *(int *)v1044;
                int v366 = (*a2)[19];
                size_t v367 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *int v366 = 0;
                  if ((int)v365 >= 1)
                  {
                    int v368 = 0;
                    unsigned int v369 = v365 + 1;
                    uint64_t v370 = v367;
                    do
                    {
                      int v371 = *v370++;
                      v368 += v371;
                      *int v366 = v368;
                      --v369;
                    }
                    while (v369 > 1);
                  }
                  unsigned int v364 = (int *)((char *)v364 + 1);
                  ++v366;
                  v367 += v365;
                }
                while (v364 != v363);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              int v168 = (*a2)[19];
              *int v168 = 0;
              int v169 = *(_DWORD *)(*(void *)a1 + 48);
              if (v169 >= 1)
              {
                int v170 = 0;
                unsigned int v171 = *(int **)(*(void *)a1 + 152);
                unsigned int v172 = v169 + 1;
                do
                {
                  int v173 = *v171++;
                  v170 += v173;
                  *int v168 = v170;
                  --v172;
                }
                while (v172 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  uint64_t v628 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v775 = *((int *)v1045 - 1);
                    uint64_t v776 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    int v777 = (*a2)[6];
                    if (v777)
                    {
                      LODWORD(v778) = 0;
                      ldiv_t v779 = (*a2)[19];
                      uint64_t v780 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v776) {
                          bzero(v779, 4 * v776);
                        }
                        if ((int)v775 >= 1)
                        {
                          int v781 = 0;
                          unint64_t v782 = v780;
                          do
                          {
                            if (v776)
                            {
                              for (muint64_t m = 0; mm != v776; ++mm)
                              {
                                int v784 = *v782++;
                                v779[mm] += v784;
                              }
                            }
                            ++v781;
                          }
                          while (v781 != v775);
                        }
                        v780 += v776 * v775;
                        v779 += v776;
                        unint64_t v778 = (int)v778 + (int)v776;
                      }
                      while (v778 < (unint64_t)v777);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  int v795 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v796 = 0;
                    uint64_t v797 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v798 = 0;
                      if ((v797 & 0x80000000) == 0)
                      {
                        uint64_t v799 = v797;
                        int v800 = v796;
                        do
                        {
                          ldiv_t v801 = ldiv(v800, v73[v799]);
                          int v800 = v801.quot;
                          v798 += v74[v799--] * v801.rem;
                        }
                        while (v799 != -1);
                      }
                      LODWORD(v1038) = v798;
                      LODWORD(__b) = 0;
                      unsigned __int8 v1050 = 0;
                      uint64_t v802 = operator new(0x28uLL);
                      *uint64_t v802 = &unk_27062E0F8;
                      v802[1] = &v1037;
                      v802[2] = &__b;
                      v802[3] = &__len;
                      v802[4] = &v1038;
                      unsigned __int8 v1050 = v802;
                      uint64_t v1058 = 0;
                      uint64_t v803 = operator new(0x28uLL);
                      *uint64_t v803 = &unk_27062B578;
                      v803[1] = &v1044;
                      v803[2] = &v1046;
                      v803[3] = v1057;
                      v803[4] = v1049;
                      unsigned int v1053 = v803;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *v795++ = (int)__b;
                      ++v796;
                    }
                    while ((unint64_t)(*a2)[6] > v796);
                  }
                  goto LABEL_1072;
                case 4:
                  uint64_t v628 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v628 - 1);
              size_t v785 = *((void *)v1047 - 1);
              unint64_t v1045 = v628 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v785;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              unint64_t v786 = (unint64_t)(*a2)[6];
              if (v1045 == v1044)
              {
                if (v786)
                {
                  int v947 = 0;
                  ldiv_t v948 = (char *)__b;
                  uint64_t v949 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  size_t v950 = __len;
                  int v1031 = v1038;
                  size_t v951 = 4 * __len;
                  do
                  {
                    uint64_t v952 = 0;
                    if ((v949 & 0x80000000) == 0)
                    {
                      uint64_t v953 = v949;
                      int v954 = v947;
                      do
                      {
                        ldiv_t v955 = ldiv(v954, v73[v953]);
                        int v954 = v955.quot;
                        v952 += v74[v953--] * v955.rem;
                      }
                      while (v953 != -1);
                    }
                    if (v950) {
                      bzero(v948, v951);
                    }
                    int v956 = v1037;
                    if (v1037 >= 1)
                    {
                      int v957 = 0;
                      int v958 = &v1031[(int)v952];
                      do
                      {
                        if (v950)
                        {
                          for (nuint64_t n = 0; nn != v950; ++nn)
                          {
                            int v960 = *v958++;
                            *(_DWORD *)&v948[4 * nn] += v960;
                          }
                        }
                        ++v957;
                      }
                      while (v957 != v956);
                    }
                    v948 += v951;
                    v947 += v950;
                  }
                  while (v786 > v947);
                }
              }
              else if (v786)
              {
                int v787 = 0;
                uint64_t v788 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v789 = 0;
                  if ((v788 & 0x80000000) == 0)
                  {
                    uint64_t v790 = v788;
                    int v791 = v787;
                    do
                    {
                      ldiv_t v792 = ldiv(v791, v73[v790]);
                      int v791 = v792.quot;
                      v789 += v74[v790--] * v792.rem;
                    }
                    while (v790 != -1);
                  }
                  int v1035 = v789;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  unsigned __int8 v1050 = 0;
                  unint64_t v793 = operator new(0x38uLL);
                  *unint64_t v793 = &unk_27062E078;
                  v793[1] = &v1048;
                  v793[2] = &v1038;
                  v793[3] = &v1035;
                  v793[4] = &__b;
                  v793[5] = &v1037;
                  v793[6] = &__len;
                  unsigned __int8 v1050 = v793;
                  uint64_t v1058 = 0;
                  uint64_t v794 = operator new(0x28uLL);
                  *uint64_t v794 = &unk_27062B578;
                  v794[1] = &v1044;
                  v794[2] = &v1046;
                  v794[3] = v1057;
                  v794[4] = v1049;
                  unsigned int v1053 = v794;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + 4 * __len;
                  v787 += __len;
                }
                while ((unint64_t)(*a2)[6] > v787);
              }
              goto LABEL_1072;
            }
            uint64_t v362 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v362 - 1);
          unint64_t v1045 = v362 - 4;
          v1047 -= 8;
          size_t v372 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v372;
          size_t v73 = v1051;
          int v74 = v1053;
          int v373 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v373)
            {
              int v657 = 0;
              unint64_t v658 = v1038;
              size_t v659 = __len;
              uint64_t v660 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v661 = 0;
                if ((v660 & 0x80000000) == 0)
                {
                  uint64_t v662 = v660;
                  int v663 = (int)v657;
                  do
                  {
                    ldiv_t v664 = ldiv(v663, v73[v662]);
                    int v663 = v664.quot;
                    v661 += v74[v662--] * v664.rem;
                  }
                  while (v662 != -1);
                }
                int *v658 = 0;
                if ((int)__b >= 1)
                {
                  int v665 = 0;
                  int v666 = (int *)(v659 + 4 * (int)v661);
                  unsigned int v667 = __b + 1;
                  do
                  {
                    int v668 = *v666++;
                    v665 += v668;
                    int *v658 = v665;
                    --v667;
                  }
                  while (v667 > 1);
                }
                int v657 = (int *)((char *)v657 + 1);
                ++v658;
              }
              while (v657 != v373);
            }
          }
          else if (v373)
          {
            unint64_t v374 = 0;
            uint64_t v375 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v376 = 0;
              if ((v375 & 0x80000000) == 0)
              {
                uint64_t v377 = v375;
                int v378 = v374;
                do
                {
                  ldiv_t v379 = ldiv(v378, v73[v377]);
                  int v378 = v379.quot;
                  v376 += v74[v377--] * v379.rem;
                }
                while (v377 != -1);
              }
              int v1037 = v376;
              *int v1038 = 0;
              unsigned __int8 v1050 = 0;
              int v380 = operator new(0x30uLL);
              *int v380 = &unk_27062DFF8;
              v380[1] = &v1035;
              v380[2] = &__len;
              v380[3] = &v1037;
              v380[4] = &v1038;
              v380[5] = &__b;
              unsigned __int8 v1050 = v380;
              uint64_t v1058 = 0;
              unint64_t v381 = operator new(0x28uLL);
              *unint64_t v381 = &unk_27062B578;
              v381[1] = &v1044;
              v381[2] = &v1046;
              v381[3] = v1057;
              v381[4] = v1049;
              unsigned int v1053 = v381;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v374;
              ++v1038;
            }
            while ((unint64_t)(*a2)[6] > v374);
          }
          goto LABEL_1072;
        case 3:
          int v174 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v174, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            int v382 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              if ((*a2)[6])
              {
                unint64_t v383 = 0;
                uint64_t v384 = *(int *)v1044;
                int v385 = (*a2)[19];
                size_t v386 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(unsigned char *)int v385 = 0;
                  if ((int)v384 >= 1)
                  {
                    int v387 = 0;
                    unsigned int v388 = v384 + 1;
                    uint64_t v389 = v386;
                    do
                    {
                      int v390 = *v389;
                      v389 += 4;
                      v387 += v390;
                      *(unsigned char *)int v385 = v387;
                      --v388;
                    }
                    while (v388 > 1);
                  }
                  ++v383;
                  int v385 = (int *)((char *)v385 + 1);
                  v386 += 4 * v384;
                }
                while ((unint64_t)(*a2)[6] > v383);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              int v175 = (*a2)[19];
              *(unsigned char *)int v175 = 0;
              int v176 = *(_DWORD *)(*(void *)a1 + 48);
              if (v176 >= 1)
              {
                int v177 = 0;
                unsigned int v178 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v179 = v176 + 1;
                do
                {
                  int v180 = *v178;
                  v178 += 4;
                  v177 += v180;
                  *(unsigned char *)int v175 = v177;
                  --v179;
                }
                while (v179 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  int v629 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v804 = *((int *)v1045 - 1);
                    size_t v805 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    if ((*a2)[6])
                    {
                      LODWORD(v806) = 0;
                      unint64_t v807 = (*a2)[19];
                      int v808 = *(char **)(*(void *)a1 + 152);
                      do
                      {
                        if (v805) {
                          bzero(v807, v805);
                        }
                        if ((int)v804 >= 1)
                        {
                          int v809 = 0;
                          uint64_t v810 = v808;
                          do
                          {
                            if (v805)
                            {
                              for (uint64_t i1 = 0; i1 != v805; ++i1)
                              {
                                char v812 = *v810;
                                v810 += 4;
                                *((unsigned char *)v807 + i1) += v812;
                              }
                            }
                            ++v809;
                          }
                          while (v809 != v804);
                        }
                        v808 += 4 * v805 * v804;
                        unint64_t v807 = (int *)((char *)v807 + v805);
                        unint64_t v806 = (int)v806 + (int)v805;
                      }
                      while (v806 < (unint64_t)(*a2)[6]);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  int v823 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v824 = 0;
                    uint64_t v825 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v826 = 0;
                      if ((v825 & 0x80000000) == 0)
                      {
                        uint64_t v827 = v825;
                        int v828 = v824;
                        do
                        {
                          ldiv_t v829 = ldiv(v828, v73[v827]);
                          int v828 = v829.quot;
                          v826 += v74[v827--] * v829.rem;
                        }
                        while (v827 != -1);
                      }
                      LODWORD(v1038) = v826;
                      LOBYTE(v1037) = 0;
                      unsigned __int8 v1050 = 0;
                      uint64_t v830 = operator new(0x28uLL);
                      *uint64_t v830 = &unk_27062E278;
                      v830[1] = &__b;
                      v830[2] = &v1037;
                      v830[3] = &__len;
                      v830[4] = &v1038;
                      unsigned __int8 v1050 = v830;
                      uint64_t v1058 = 0;
                      uint64_t v831 = operator new(0x28uLL);
                      *uint64_t v831 = &unk_27062B578;
                      v831[1] = &v1044;
                      v831[2] = &v1046;
                      v831[3] = v1057;
                      v831[4] = v1049;
                      unsigned int v1053 = v831;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *(unsigned char *)int v823 = v1037;
                      int v823 = (int *)((char *)v823 + 1);
                      ++v824;
                    }
                    while ((unint64_t)(*a2)[6] > v824);
                  }
                  goto LABEL_1072;
                case 4:
                  int v629 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v629 - 1);
              size_t v813 = *((void *)v1047 - 1);
              unint64_t v1045 = v629 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v813;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              ldiv_t v814 = (*a2)[6];
              if (v1045 == v1044)
              {
                if (v814)
                {
                  int v961 = 0;
                  uint64_t v962 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  do
                  {
                    uint64_t v963 = 0;
                    if ((v962 & 0x80000000) != 0)
                    {
                      int v966 = a2;
                    }
                    else
                    {
                      uint64_t v964 = v962;
                      int v965 = v961;
                      int v966 = a2;
                      do
                      {
                        ldiv_t v967 = ldiv(v965, v73[v964]);
                        int v965 = v967.quot;
                        v963 += v74[v964--] * v967.rem;
                      }
                      while (v964 != -1);
                    }
                    int v968 = __b;
                    if (__len)
                    {
                      bzero(__b, __len);
                      size_t v969 = __len;
                      int v968 = __b;
                    }
                    else
                    {
                      size_t v969 = 0;
                    }
                    int v970 = v1037;
                    if (v1037 >= 1)
                    {
                      int v971 = 0;
                      uint64_t v972 = &v1038[(int)v963];
                      do
                      {
                        size_t v973 = v969;
                        for (uint64_t i2 = v968; v973; --v973)
                        {
                          char v975 = *(unsigned char *)v972++;
                          *i2++ += v975;
                        }
                        ++v971;
                      }
                      while (v971 != v970);
                      size_t v969 = __len;
                      int v968 = __b;
                    }
                    __b = &v968[v969];
                    v961 += v969;
                  }
                  while ((unint64_t)(*v966)[6] > v961);
                }
              }
              else if (v814)
              {
                int v815 = 0;
                uint64_t v816 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v817 = 0;
                  if ((v816 & 0x80000000) == 0)
                  {
                    uint64_t v818 = v816;
                    int v819 = v815;
                    do
                    {
                      ldiv_t v820 = ldiv(v819, v73[v818]);
                      int v819 = v820.quot;
                      v817 += v74[v818--] * v820.rem;
                    }
                    while (v818 != -1);
                  }
                  int v1035 = v817;
                  if (__len) {
                    bzero(__b, __len);
                  }
                  unsigned __int8 v1050 = 0;
                  unint64_t v821 = operator new(0x38uLL);
                  void *v821 = &unk_27062E1F8;
                  v821[1] = &v1048;
                  v821[2] = &v1038;
                  v821[3] = &v1035;
                  v821[4] = &__b;
                  v821[5] = &v1037;
                  v821[6] = &__len;
                  unsigned __int8 v1050 = v821;
                  uint64_t v1058 = 0;
                  uint64_t v822 = operator new(0x28uLL);
                  *uint64_t v822 = &unk_27062B578;
                  v822[1] = &v1044;
                  v822[2] = &v1046;
                  v822[3] = v1057;
                  v822[4] = v1049;
                  unsigned int v1053 = v822;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + __len;
                  v815 += __len;
                }
                while ((unint64_t)(*a2)[6] > v815);
              }
              goto LABEL_1072;
            }
            int v382 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v382 - 1);
          unint64_t v1045 = v382 - 4;
          v1047 -= 8;
          size_t v391 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v391;
          size_t v73 = v1051;
          int v74 = v1053;
          int v392 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v392)
            {
              unint64_t v669 = 0;
              uint64_t v670 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v671 = 0;
                if ((v670 & 0x80000000) == 0)
                {
                  uint64_t v672 = v670;
                  int v673 = v669;
                  do
                  {
                    ldiv_t v674 = ldiv(v673, v73[v672]);
                    int v673 = v674.quot;
                    v671 += v74[v672--] * v674.rem;
                  }
                  while (v672 != -1);
                }
                *(unsigned char *)int v1038 = 0;
                int v675 = v1038;
                if ((int)__b >= 1)
                {
                  ldiv_t v676 = (unsigned __int8 *)(__len + 4 * (int)v671);
                  int v677 = *(unsigned __int8 *)v1038;
                  unsigned int v678 = __b + 1;
                  do
                  {
                    int v679 = *v676;
                    v676 += 4;
                    v677 += v679;
                    *(unsigned char *)int v675 = v677;
                    --v678;
                  }
                  while (v678 > 1);
                  int v675 = v1038;
                }
                ++v669;
                int v1038 = (int *)((char *)v675 + 1);
              }
              while ((unint64_t)(*a2)[6] > v669);
            }
          }
          else if (v392)
          {
            unint64_t v393 = 0;
            uint64_t v394 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v395 = 0;
              if ((v394 & 0x80000000) == 0)
              {
                uint64_t v396 = v394;
                int v397 = v393;
                do
                {
                  ldiv_t v398 = ldiv(v397, v73[v396]);
                  int v397 = v398.quot;
                  v395 += v74[v396--] * v398.rem;
                }
                while (v396 != -1);
              }
              int v1037 = v395;
              *(unsigned char *)int v1038 = 0;
              unsigned __int8 v1050 = 0;
              uint64_t v399 = operator new(0x30uLL);
              *uint64_t v399 = &unk_27062E178;
              v399[1] = &v1035;
              v399[2] = &__len;
              v399[3] = &v1037;
              v399[4] = &v1038;
              v399[5] = &__b;
              unsigned __int8 v1050 = v399;
              uint64_t v1058 = 0;
              int v400 = operator new(0x28uLL);
              *int v400 = &unk_27062B578;
              v400[1] = &v1044;
              v400[2] = &v1046;
              v400[3] = v1057;
              v400[4] = v1049;
              unsigned int v1053 = v400;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v393;
              int v1038 = (int *)((char *)v1038 + 1);
            }
            while ((unint64_t)(*a2)[6] > v393);
          }
          goto LABEL_1072;
        case 4:
          char v181 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v181, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            unint64_t v401 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              int v402 = (*a2)[6];
              if (v402)
              {
                unsigned int v403 = 0;
                uint64_t v404 = *(int *)v1044;
                int v405 = (*a2)[19];
                size_t v406 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *int v405 = 0;
                  if ((int)v404 >= 1)
                  {
                    int v407 = 0;
                    unsigned int v408 = v404 + 1;
                    uint64_t v409 = v406;
                    do
                    {
                      int v410 = *v409++;
                      v407 += v410;
                      *int v405 = v407;
                      --v408;
                    }
                    while (v408 > 1);
                  }
                  unsigned int v403 = (int *)((char *)v403 + 1);
                  ++v405;
                  v406 += v404;
                }
                while (v403 != v402);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              int v182 = (*a2)[19];
              *int v182 = 0;
              int v183 = *(_DWORD *)(*(void *)a1 + 48);
              if (v183 >= 1)
              {
                int v184 = 0;
                unsigned int v185 = *(int **)(*(void *)a1 + 152);
                unsigned int v186 = v183 + 1;
                do
                {
                  int v187 = *v185++;
                  v184 += v187;
                  *int v182 = v184;
                  --v186;
                }
                while (v186 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  ldiv_t v630 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v832 = *((int *)v1045 - 1);
                    uint64_t v833 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    ldiv_t v834 = (*a2)[6];
                    if (v834)
                    {
                      LODWORD(v835) = 0;
                      uint64_t v836 = (*a2)[19];
                      unint64_t v837 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v833) {
                          bzero(v836, 4 * v833);
                        }
                        if ((int)v832 >= 1)
                        {
                          int v838 = 0;
                          uint64_t v839 = v837;
                          do
                          {
                            if (v833)
                            {
                              for (uint64_t i3 = 0; i3 != v833; ++i3)
                              {
                                int v841 = *v839++;
                                v836[i3] += v841;
                              }
                            }
                            ++v838;
                          }
                          while (v838 != v832);
                        }
                        v837 += v833 * v832;
                        v836 += v833;
                        unint64_t v835 = (int)v835 + (int)v833;
                      }
                      while (v835 < (unint64_t)v834);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  ldiv_t v852 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v853 = 0;
                    uint64_t v854 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v855 = 0;
                      if ((v854 & 0x80000000) == 0)
                      {
                        uint64_t v856 = v854;
                        int v857 = v853;
                        do
                        {
                          ldiv_t v858 = ldiv(v857, v73[v856]);
                          int v857 = v858.quot;
                          v855 += v74[v856--] * v858.rem;
                        }
                        while (v856 != -1);
                      }
                      LODWORD(v1038) = v855;
                      LODWORD(__b) = 0;
                      unsigned __int8 v1050 = 0;
                      uint64_t v859 = operator new(0x28uLL);
                      *uint64_t v859 = &unk_27062E3F8;
                      v859[1] = &v1037;
                      v859[2] = &__b;
                      v859[3] = &__len;
                      v859[4] = &v1038;
                      unsigned __int8 v1050 = v859;
                      uint64_t v1058 = 0;
                      int v860 = operator new(0x28uLL);
                      *int v860 = &unk_27062B578;
                      v860[1] = &v1044;
                      v860[2] = &v1046;
                      v860[3] = v1057;
                      v860[4] = v1049;
                      unsigned int v1053 = v860;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *v852++ = (int)__b;
                      ++v853;
                    }
                    while ((unint64_t)(*a2)[6] > v853);
                  }
                  goto LABEL_1072;
                case 4:
                  ldiv_t v630 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v630 - 1);
              size_t v842 = *((void *)v1047 - 1);
              unint64_t v1045 = v630 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v842;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              unint64_t v843 = (unint64_t)(*a2)[6];
              if (v1045 == v1044)
              {
                if (v843)
                {
                  int v976 = 0;
                  int v977 = (char *)__b;
                  uint64_t v978 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  size_t v979 = __len;
                  uint64_t v1032 = v1038;
                  size_t v980 = 4 * __len;
                  do
                  {
                    uint64_t v981 = 0;
                    if ((v978 & 0x80000000) == 0)
                    {
                      uint64_t v982 = v978;
                      int v983 = v976;
                      do
                      {
                        ldiv_t v984 = ldiv(v983, v73[v982]);
                        int v983 = v984.quot;
                        v981 += v74[v982--] * v984.rem;
                      }
                      while (v982 != -1);
                    }
                    if (v979) {
                      bzero(v977, v980);
                    }
                    int v985 = v1037;
                    if (v1037 >= 1)
                    {
                      int v986 = 0;
                      size_t v987 = &v1032[(int)v981];
                      do
                      {
                        if (v979)
                        {
                          for (uint64_t i4 = 0; i4 != v979; ++i4)
                          {
                            int v989 = *v987++;
                            *(_DWORD *)&v977[4 * i4] += v989;
                          }
                        }
                        ++v986;
                      }
                      while (v986 != v985);
                    }
                    v977 += v980;
                    v976 += v979;
                  }
                  while (v843 > v976);
                }
              }
              else if (v843)
              {
                int v844 = 0;
                uint64_t v845 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v846 = 0;
                  if ((v845 & 0x80000000) == 0)
                  {
                    uint64_t v847 = v845;
                    int v848 = v844;
                    do
                    {
                      ldiv_t v849 = ldiv(v848, v73[v847]);
                      int v848 = v849.quot;
                      v846 += v74[v847--] * v849.rem;
                    }
                    while (v847 != -1);
                  }
                  int v1035 = v846;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  unsigned __int8 v1050 = 0;
                  int v850 = operator new(0x38uLL);
                  *int v850 = &unk_27062E378;
                  v850[1] = &v1048;
                  v850[2] = &v1038;
                  v850[3] = &v1035;
                  v850[4] = &__b;
                  v850[5] = &v1037;
                  v850[6] = &__len;
                  unsigned __int8 v1050 = v850;
                  uint64_t v1058 = 0;
                  ldiv_t v851 = operator new(0x28uLL);
                  *ldiv_t v851 = &unk_27062B578;
                  v851[1] = &v1044;
                  v851[2] = &v1046;
                  v851[3] = v1057;
                  v851[4] = v1049;
                  unsigned int v1053 = v851;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + 4 * __len;
                  v844 += __len;
                }
                while ((unint64_t)(*a2)[6] > v844);
              }
              goto LABEL_1072;
            }
            unint64_t v401 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v401 - 1);
          unint64_t v1045 = v401 - 4;
          v1047 -= 8;
          size_t v411 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v411;
          size_t v73 = v1051;
          int v74 = v1053;
          int v412 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v412)
            {
              int v680 = 0;
              uint64_t v681 = v1038;
              size_t v682 = __len;
              uint64_t v683 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              do
              {
                uint64_t v684 = 0;
                if ((v683 & 0x80000000) == 0)
                {
                  uint64_t v685 = v683;
                  int v686 = (int)v680;
                  do
                  {
                    ldiv_t v687 = ldiv(v686, v73[v685]);
                    int v686 = v687.quot;
                    v684 += v74[v685--] * v687.rem;
                  }
                  while (v685 != -1);
                }
                *uint64_t v681 = 0;
                if ((int)__b >= 1)
                {
                  int v688 = 0;
                  ldiv_t v689 = (int *)(v682 + 4 * (int)v684);
                  unsigned int v690 = __b + 1;
                  do
                  {
                    int v691 = *v689++;
                    v688 += v691;
                    *uint64_t v681 = v688;
                    --v690;
                  }
                  while (v690 > 1);
                }
                int v680 = (int *)((char *)v680 + 1);
                ++v681;
              }
              while (v680 != v412);
            }
          }
          else if (v412)
          {
            unint64_t v413 = 0;
            uint64_t v414 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v415 = 0;
              if ((v414 & 0x80000000) == 0)
              {
                uint64_t v416 = v414;
                int v417 = v413;
                do
                {
                  ldiv_t v418 = ldiv(v417, v73[v416]);
                  int v417 = v418.quot;
                  v415 += v74[v416--] * v418.rem;
                }
                while (v416 != -1);
              }
              int v1037 = v415;
              *int v1038 = 0;
              unsigned __int8 v1050 = 0;
              uint64_t v419 = operator new(0x30uLL);
              *uint64_t v419 = &unk_27062E2F8;
              v419[1] = &v1035;
              v419[2] = &__len;
              v419[3] = &v1037;
              v419[4] = &v1038;
              v419[5] = &__b;
              unsigned __int8 v1050 = v419;
              uint64_t v1058 = 0;
              uint64_t v420 = operator new(0x28uLL);
              *uint64_t v420 = &unk_27062B578;
              v420[1] = &v1044;
              v420[2] = &v1046;
              v420[3] = v1057;
              v420[4] = v1049;
              unsigned int v1053 = v420;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v413;
              ++v1038;
            }
            while ((unint64_t)(*a2)[6] > v413);
          }
          goto LABEL_1072;
        case 5:
          int v188 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v188, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            uint64_t v421 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              uint64_t v422 = (*a2)[6];
              if (v422)
              {
                unsigned int v423 = 0;
                uint64_t v424 = *(int *)v1044;
                unsigned int v425 = (*a2)[19];
                unsigned int v426 = *(unsigned int **)(*(void *)a1 + 152);
                do
                {
                  *(void *)unsigned int v425 = 0;
                  if ((int)v424 >= 1)
                  {
                    uint64_t v427 = 0;
                    unsigned int v428 = v424 + 1;
                    uint64_t v429 = v426;
                    do
                    {
                      unsigned int v430 = *v429++;
                      v427 += v430;
                      --v428;
                    }
                    while (v428 > 1);
                    *(void *)unsigned int v425 = v427;
                  }
                  unsigned int v423 = (int *)((char *)v423 + 1);
                  v425 += 2;
                  v426 += v424;
                }
                while (v423 != v422);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              int v189 = (*a2)[19];
              *(void *)int v189 = 0;
              int v190 = *(_DWORD *)(*(void *)a1 + 48);
              if (v190 >= 1)
              {
                uint64_t v191 = 0;
                unsigned int v192 = *(unsigned int **)(*(void *)a1 + 152);
                unsigned int v193 = v190 + 1;
                do
                {
                  unsigned int v194 = *v192++;
                  v191 += v194;
                  --v193;
                }
                while (v193 > 1);
                *(void *)int v189 = v191;
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  BOOL v631 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v870 = *((int *)v1045 - 1);
                    uint64_t v871 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    char v872 = (*a2)[6];
                    if (v872)
                    {
                      LODWORD(v873) = 0;
                      uint64_t v874 = (*a2)[19];
                      uint64_t v875 = *(unsigned int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v871) {
                          bzero(v874, 8 * v871);
                        }
                        if ((int)v870 >= 1)
                        {
                          int v876 = 0;
                          unint64_t v877 = v875;
                          do
                          {
                            if (v871)
                            {
                              for (uint64_t i5 = 0; i5 != v871; ++i5)
                              {
                                unsigned int v879 = *v877++;
                                *(void *)&v874[2 * i5] += v879;
                              }
                            }
                            ++v876;
                          }
                          while (v876 != v870);
                        }
                        v875 += v871 * v870;
                        v874 += 2 * v871;
                        unint64_t v873 = (int)v873 + (int)v871;
                      }
                      while (v873 < (unint64_t)v872);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v861 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v862 = 0;
                    uint64_t v863 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v864 = 0;
                      if ((v863 & 0x80000000) == 0)
                      {
                        uint64_t v865 = v863;
                        int v866 = v862;
                        do
                        {
                          ldiv_t v867 = ldiv(v866, v73[v865]);
                          int v866 = v867.quot;
                          v864 += v74[v865--] * v867.rem;
                        }
                        while (v865 != -1);
                      }
                      LODWORD(__b) = v864;
                      int v1038 = 0;
                      unsigned __int8 v1050 = 0;
                      uint64_t v868 = operator new(0x28uLL);
                      *uint64_t v868 = &unk_27062E578;
                      v868[1] = &v1037;
                      v868[2] = &v1038;
                      v868[3] = &__len;
                      v868[4] = &__b;
                      unsigned __int8 v1050 = v868;
                      uint64_t v1058 = 0;
                      int v869 = operator new(0x28uLL);
                      *int v869 = &unk_27062B578;
                      v869[1] = &v1044;
                      v869[2] = &v1046;
                      v869[3] = v1057;
                      v869[4] = v1049;
                      unsigned int v1053 = v869;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *(void *)uint64_t v861 = v1038;
                      v861 += 2;
                      ++v862;
                    }
                    while ((unint64_t)(*a2)[6] > v862);
                  }
                  goto LABEL_1072;
                case 4:
                  BOOL v631 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v631 - 1);
              size_t v880 = *((void *)v1047 - 1);
              unint64_t v1045 = v631 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v880;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              uint64_t v881 = (*a2)[6];
              if (v1045 == v1044)
              {
                if (v881)
                {
                  int v990 = 0;
                  int v991 = (char *)__b;
                  uint64_t v992 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  size_t v993 = __len;
                  int v1017 = v1038;
                  unint64_t v1033 = (unint64_t)(*a2)[6];
                  int v994 = v1037;
                  size_t v995 = 8 * __len;
                  do
                  {
                    uint64_t v996 = 0;
                    if ((v992 & 0x80000000) == 0)
                    {
                      uint64_t v997 = v992;
                      int v998 = v990;
                      do
                      {
                        ldiv_t v999 = ldiv(v998, v73[v997]);
                        int v998 = v999.quot;
                        v996 += v74[v997--] * v999.rem;
                      }
                      while (v997 != -1);
                    }
                    if (v993) {
                      bzero(v991, v995);
                    }
                    if (v994 >= 1)
                    {
                      int v1000 = 0;
                      size_t v1001 = &v1017[(int)v996];
                      do
                      {
                        if (v993)
                        {
                          for (uint64_t i6 = 0; i6 != v993; ++i6)
                          {
                            unsigned int v1003 = *v1001++;
                            *(void *)&v991[8 * i6] += v1003;
                          }
                        }
                        ++v1000;
                      }
                      while (v1000 != v994);
                    }
                    v991 += v995;
                    v990 += v993;
                  }
                  while (v1033 > v990);
                }
              }
              else if (v881)
              {
                int v882 = 0;
                uint64_t v883 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v884 = 0;
                  if ((v883 & 0x80000000) == 0)
                  {
                    uint64_t v885 = v883;
                    int v886 = v882;
                    do
                    {
                      ldiv_t v887 = ldiv(v886, v73[v885]);
                      int v886 = v887.quot;
                      v884 += v74[v885--] * v887.rem;
                    }
                    while (v885 != -1);
                  }
                  int v1035 = v884;
                  if (__len) {
                    bzero(__b, 8 * __len);
                  }
                  unsigned __int8 v1050 = 0;
                  uint64_t v888 = operator new(0x38uLL);
                  *uint64_t v888 = &unk_27062E4F8;
                  v888[1] = &v1048;
                  v888[2] = &v1038;
                  v888[3] = &v1035;
                  v888[4] = &__b;
                  v888[5] = &v1037;
                  v888[6] = &__len;
                  unsigned __int8 v1050 = v888;
                  uint64_t v1058 = 0;
                  int v889 = operator new(0x28uLL);
                  *int v889 = &unk_27062B578;
                  v889[1] = &v1044;
                  v889[2] = &v1046;
                  v889[3] = v1057;
                  v889[4] = v1049;
                  unsigned int v1053 = v889;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + 8 * __len;
                  v882 += __len;
                }
                while ((unint64_t)(*a2)[6] > v882);
              }
              goto LABEL_1072;
            }
            uint64_t v421 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v421 - 1);
          unint64_t v1045 = v421 - 4;
          v1047 -= 8;
          size_t v534 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v534;
          size_t v73 = v1051;
          int v74 = v1053;
          uint64_t v535 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v535)
            {
              unsigned int v692 = 0;
              uint64_t v693 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              uint64_t v694 = v1038;
              size_t v1028 = __len;
              int v695 = (int)__b;
              int v696 = __b + 1;
              do
              {
                uint64_t v697 = 0;
                if ((v693 & 0x80000000) == 0)
                {
                  uint64_t v698 = v693;
                  int v699 = (int)v692;
                  do
                  {
                    ldiv_t v700 = ldiv(v699, v73[v698]);
                    int v699 = v700.quot;
                    v697 += v74[v698--] * v700.rem;
                  }
                  while (v698 != -1);
                }
                *(void *)uint64_t v694 = 0;
                if (v695 >= 1)
                {
                  uint64_t v701 = 0;
                  ldiv_t v702 = (unsigned int *)(v1028 + 4 * (int)v697);
                  unsigned int v703 = v696;
                  do
                  {
                    unsigned int v704 = *v702++;
                    v701 += v704;
                    --v703;
                  }
                  while (v703 > 1);
                  *(void *)uint64_t v694 = v701;
                }
                unsigned int v692 = (int *)((char *)v692 + 1);
                v694 += 2;
              }
              while (v692 != v535);
            }
          }
          else if (v535)
          {
            unint64_t v536 = 0;
            uint64_t v537 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v538 = 0;
              if ((v537 & 0x80000000) == 0)
              {
                uint64_t v539 = v537;
                int v540 = v536;
                do
                {
                  ldiv_t v541 = ldiv(v540, v73[v539]);
                  int v540 = v541.quot;
                  v538 += v74[v539--] * v541.rem;
                }
                while (v539 != -1);
              }
              int v1037 = v538;
              *(void *)int v1038 = 0;
              unsigned __int8 v1050 = 0;
              int v542 = operator new(0x30uLL);
              *int v542 = &unk_27062E478;
              v542[1] = &v1035;
              v542[2] = &__len;
              v542[3] = &v1037;
              v542[4] = &v1038;
              v542[5] = &__b;
              unsigned __int8 v1050 = v542;
              uint64_t v1058 = 0;
              uint64_t v543 = operator new(0x28uLL);
              *uint64_t v543 = &unk_27062B578;
              v543[1] = &v1044;
              v543[2] = &v1046;
              v543[3] = v1057;
              v543[4] = v1049;
              unsigned int v1053 = v543;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v536;
              v1038 += 2;
            }
            while ((unint64_t)(*a2)[6] > v536);
          }
          goto LABEL_1072;
        case 6:
          float v195 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1054 = &unk_27062AEC8;
          unsigned __int8 v1055 = mlx::core::allocator::free;
          int v1056 = &v1054;
          mlx::core::array::set_data(a2, (uint64_t)v195, (uint64_t)&v1054);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
          uint64_t v1041 = 0;
          uint64_t v1042 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            uint64_t v1041 = __p;
            operator delete(__p);
          }
          if (v1043 == 1)
          {
            unint64_t v431 = v1045;
            if (v1045 - (unsigned char *)v1044 == 4)
            {
              float v432 = (*a2)[6];
              if (v432)
              {
                unsigned int v433 = 0;
                uint64_t v434 = *(int *)v1044;
                unsigned int v435 = (float *)(*a2)[19];
                uint64_t v436 = *(unsigned int **)(*(void *)a1 + 152);
                do
                {
                  *unsigned int v435 = 0.0;
                  if ((int)v434 >= 1)
                  {
                    float v437 = 0.0;
                    unsigned int v438 = v434 + 1;
                    unint64_t v439 = v436;
                    do
                    {
                      unsigned int v440 = *v439++;
                      float v437 = v437 + (float)v440;
                      --v438;
                    }
                    while (v438 > 1);
                    *unsigned int v435 = v437;
                  }
                  unsigned int v433 = (int *)((char *)v433 + 1);
                  ++v435;
                  v436 += v434;
                }
                while (v433 != v432);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1043)
            {
              float v196 = (float *)(*a2)[19];
              *float v196 = 0.0;
              int v197 = *(_DWORD *)(*(void *)a1 + 48);
              if (v197 >= 1)
              {
                float v198 = *(unsigned int **)(*(void *)a1 + 152);
                unsigned int v199 = v197 + 1;
                float v200 = 0.0;
                do
                {
                  unsigned int v201 = *v198++;
                  float v200 = v200 + (float)v201;
                  --v199;
                }
                while (v199 > 1);
                *float v196 = v200;
              }
              goto LABEL_1076;
            }
            if ((v1043 & 0xFFFFFFFD) != 1)
            {
              switch(v1043)
              {
                case 2:
                  int v632 = v1045;
                  if (v1045 - (unsigned char *)v1044 == 4)
                  {
                    uint64_t v890 = *((int *)v1045 - 1);
                    uint64_t v891 = *((void *)v1047 - 1);
                    v1045 -= 4;
                    v1047 -= 8;
                    char v892 = (*a2)[6];
                    if (v892)
                    {
                      LODWORD(v893) = 0;
                      unint64_t v894 = (*a2)[19];
                      uint64_t v895 = *(unsigned int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v891) {
                          bzero(v894, 4 * v891);
                        }
                        if ((int)v890 >= 1)
                        {
                          int v896 = 0;
                          uint64_t v897 = v895;
                          do
                          {
                            if (v891)
                            {
                              for (uint64_t i7 = 0; i7 != v891; ++i7)
                              {
                                unsigned int v899 = *v897++;
                                *(float *)&v894[i7] = *(float *)&v894[i7] + (float)v899;
                              }
                            }
                            ++v896;
                          }
                          while (v896 != v890);
                        }
                        v895 += v891 * v890;
                        v894 += v891;
                        unint64_t v893 = (int)v893 + (int)v891;
                      }
                      while (v893 < (unint64_t)v892);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  ldiv_t v910 = (*a2)[19];
                  size_t v73 = v1051;
                  int v74 = v1053;
                  if ((*a2)[6])
                  {
                    unint64_t v911 = 0;
                    uint64_t v912 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                    do
                    {
                      uint64_t v913 = 0;
                      if ((v912 & 0x80000000) == 0)
                      {
                        uint64_t v914 = v912;
                        int v915 = v911;
                        do
                        {
                          ldiv_t v916 = ldiv(v915, v73[v914]);
                          int v915 = v916.quot;
                          v913 += v74[v914--] * v916.rem;
                        }
                        while (v914 != -1);
                      }
                      LODWORD(v1038) = v913;
                      LODWORD(__b) = 0;
                      unsigned __int8 v1050 = 0;
                      uint64_t v917 = operator new(0x28uLL);
                      *uint64_t v917 = &unk_27062E6F8;
                      v917[1] = &v1037;
                      v917[2] = &__b;
                      v917[3] = &__len;
                      v917[4] = &v1038;
                      unsigned __int8 v1050 = v917;
                      uint64_t v1058 = 0;
                      int v918 = operator new(0x28uLL);
                      void *v918 = &unk_27062B578;
                      v918[1] = &v1044;
                      v918[2] = &v1046;
                      v918[3] = v1057;
                      v918[4] = v1049;
                      unsigned int v1053 = v918;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                      *v910++ = (int)__b;
                      ++v911;
                    }
                    while ((unint64_t)(*a2)[6] > v911);
                  }
                  goto LABEL_1072;
                case 4:
                  int v632 = v1045;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1037 = *((_DWORD *)v632 - 1);
              size_t v900 = *((void *)v1047 - 1);
              unint64_t v1045 = v632 - 4;
              v1047 -= 8;
              int v1038 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v900;
              __b = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              unint64_t v901 = (unint64_t)(*a2)[6];
              if (v1045 == v1044)
              {
                if (v901)
                {
                  int v1004 = 0;
                  uint64_t v1005 = (char *)__b;
                  uint64_t v1006 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                  size_t v1007 = __len;
                  unsigned int v1018 = v1038;
                  uint64_t v1034 = v1006;
                  int v1008 = v1037;
                  size_t v1009 = 4 * __len;
                  do
                  {
                    uint64_t v1010 = 0;
                    if ((v1006 & 0x80000000) == 0)
                    {
                      int v1011 = v1004;
                      do
                      {
                        ldiv_t v1012 = ldiv(v1011, v73[v1006]);
                        int v1011 = v1012.quot;
                        v1010 += v74[v1006--] * v1012.rem;
                      }
                      while (v1006 != -1);
                    }
                    if (v1007) {
                      bzero(v1005, v1009);
                    }
                    uint64_t v1006 = v1034;
                    if (v1008 >= 1)
                    {
                      int v1013 = 0;
                      int v1014 = (unsigned int *)&v1018[(int)v1010];
                      do
                      {
                        if (v1007)
                        {
                          for (uint64_t i8 = 0; i8 != v1007; ++i8)
                          {
                            unsigned int v1016 = *v1014++;
                            *(float *)&v1005[4 * i8] = *(float *)&v1005[4 * i8] + (float)v1016;
                          }
                        }
                        ++v1013;
                      }
                      while (v1013 != v1008);
                    }
                    v1005 += v1009;
                    v1004 += v1007;
                  }
                  while (v901 > v1004);
                }
              }
              else if (v901)
              {
                int v902 = 0;
                uint64_t v903 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v904 = 0;
                  if ((v903 & 0x80000000) == 0)
                  {
                    uint64_t v905 = v903;
                    int v906 = v902;
                    do
                    {
                      ldiv_t v907 = ldiv(v906, v73[v905]);
                      int v906 = v907.quot;
                      v904 += v74[v905--] * v907.rem;
                    }
                    while (v905 != -1);
                  }
                  int v1035 = v904;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  unsigned __int8 v1050 = 0;
                  uint64_t v908 = operator new(0x38uLL);
                  *uint64_t v908 = &unk_27062E678;
                  v908[1] = &v1048;
                  v908[2] = &v1038;
                  v908[3] = &v1035;
                  v908[4] = &__b;
                  v908[5] = &v1037;
                  v908[6] = &__len;
                  unsigned __int8 v1050 = v908;
                  uint64_t v1058 = 0;
                  int v909 = operator new(0x28uLL);
                  *int v909 = &unk_27062B578;
                  v909[1] = &v1044;
                  v909[2] = &v1046;
                  v909[3] = v1057;
                  v909[4] = v1049;
                  unsigned int v1053 = v909;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  __b = (char *)__b + 4 * __len;
                  v902 += __len;
                }
                while ((unint64_t)(*a2)[6] > v902);
              }
              goto LABEL_1072;
            }
            unint64_t v431 = v1045;
          }
          LODWORD(__b) = *((_DWORD *)v431 - 1);
          unint64_t v1045 = v431 - 4;
          v1047 -= 8;
          size_t v544 = *(void *)(*(void *)a1 + 152);
          int v1038 = (*a2)[19];
          __leuint64_t n = v544;
          size_t v73 = v1051;
          int v74 = v1053;
          uint64_t v545 = (*a2)[6];
          if (v1045 == v1044)
          {
            if (v545)
            {
              unsigned int v705 = 0;
              uint64_t v706 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              uint64_t v707 = (float *)v1038;
              size_t v1029 = __len;
              int v708 = (int)__b;
              int v709 = __b + 1;
              do
              {
                uint64_t v710 = 0;
                if ((v706 & 0x80000000) == 0)
                {
                  uint64_t v711 = v706;
                  int v712 = (int)v705;
                  do
                  {
                    ldiv_t v713 = ldiv(v712, v73[v711]);
                    int v712 = v713.quot;
                    v710 += v74[v711--] * v713.rem;
                  }
                  while (v711 != -1);
                }
                *uint64_t v707 = 0.0;
                if (v708 >= 1)
                {
                  uint64_t v714 = (unsigned int *)(v1029 + 4 * (int)v710);
                  float v715 = 0.0;
                  unsigned int v716 = v709;
                  do
                  {
                    unsigned int v717 = *v714++;
                    float v715 = v715 + (float)v717;
                    --v716;
                  }
                  while (v716 > 1);
                  *uint64_t v707 = v715;
                }
                unsigned int v705 = (int *)((char *)v705 + 1);
                ++v707;
              }
              while (v705 != v545);
            }
          }
          else if (v545)
          {
            unint64_t v546 = 0;
            uint64_t v547 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v548 = 0;
              if ((v547 & 0x80000000) == 0)
              {
                uint64_t v549 = v547;
                int v550 = v546;
                do
                {
                  ldiv_t v551 = ldiv(v550, v73[v549]);
                  int v550 = v551.quot;
                  v548 += v74[v549--] * v551.rem;
                }
                while (v549 != -1);
              }
              int v1037 = v548;
              *int v1038 = 0;
              unsigned __int8 v1050 = 0;
              int v552 = operator new(0x30uLL);
              *int v552 = &unk_27062E5F8;
              v552[1] = &v1035;
              v552[2] = &__len;
              v552[3] = &v1037;
              v552[4] = &v1038;
              v552[5] = &__b;
              unsigned __int8 v1050 = v552;
              uint64_t v1058 = 0;
              int v553 = operator new(0x28uLL);
              *int v553 = &unk_27062B578;
              v553[1] = &v1044;
              v553[2] = &v1046;
              v553[3] = v1057;
              v553[4] = v1049;
              unsigned int v1053 = v553;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              ++v546;
              ++v1038;
            }
            while ((unint64_t)(*a2)[6] > v546);
          }
          goto LABEL_1072;
        default:
          return;
      }
    case 3:
      unsigned int v36 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1054 = &unk_27062AEC8;
      unsigned __int8 v1055 = mlx::core::allocator::free;
      int v1056 = &v1054;
      mlx::core::array::set_data(a2, (uint64_t)v36, (uint64_t)&v1054);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
      uint64_t v1041 = 0;
      uint64_t v1042 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1041 = __p;
        operator delete(__p);
      }
      if (v1043 == 1)
      {
        int v94 = v1045;
        if (v1045 - (unsigned char *)v1044 == 4)
        {
          uint64_t v95 = (*a2)[6];
          if (v95)
          {
            unint64_t v96 = 0;
            uint64_t v97 = *(int *)v1044;
            unint64_t v98 = (*a2)[19];
            char v99 = *(int **)(*(void *)a1 + 152);
            do
            {
              *unint64_t v98 = 1;
              if ((int)v97 >= 1)
              {
                int v100 = 1;
                unsigned int v101 = v97 + 1;
                int v102 = v99;
                do
                {
                  int v103 = *v102++;
                  v100 *= v103;
                  *unint64_t v98 = v100;
                  --v101;
                }
                while (v101 > 1);
              }
              unint64_t v96 = (int *)((char *)v96 + 1);
              ++v98;
              v99 += v97;
            }
            while (v96 != v95);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1043)
        {
          int v37 = (*a2)[19];
          int *v37 = 1;
          int v38 = *(_DWORD *)(*(void *)a1 + 48);
          if (v38 >= 1)
          {
            int v39 = *(int **)(*(void *)a1 + 152);
            unsigned int v40 = v38 + 1;
            int v41 = 1;
            do
            {
              int v42 = *v39++;
              v41 *= v42;
              int *v37 = v41;
              --v40;
            }
            while (v40 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1043 & 0xFFFFFFFD) != 1)
        {
          switch(v1043)
          {
            case 2:
              int v158 = v1045;
              if (v1045 - (unsigned char *)v1044 == 4)
              {
                uint64_t v483 = *((int *)v1045 - 1);
                uint64_t v484 = *((void *)v1047 - 1);
                v1045 -= 4;
                v1047 -= 8;
                uint64_t v485 = *a2;
                int v486 = (*a2)[6];
                if (v486)
                {
                  LODWORD(v487) = 0;
                  uint64_t v488 = v485[19];
                  uint64_t v489 = *(int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v484) {
                      memset_pattern16(v488, &unk_25704DBE0, 4 * v484);
                    }
                    if ((int)v483 >= 1)
                    {
                      int v490 = 0;
                      ldiv_t v491 = v489;
                      do
                      {
                        if (v484)
                        {
                          for (uint64_t i9 = 0; i9 != v484; ++i9)
                          {
                            int v493 = *v491++;
                            v488[i9] *= v493;
                          }
                        }
                        ++v490;
                      }
                      while (v490 != v483);
                    }
                    v489 += v484 * v483;
                    v488 += v484;
                    unint64_t v487 = (int)v487 + (int)v484;
                  }
                  while (v487 < (unint64_t)v486);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              int v334 = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              if ((*a2)[6])
              {
                unint64_t v335 = 0;
                uint64_t v336 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v337 = 0;
                  if ((v336 & 0x80000000) == 0)
                  {
                    uint64_t v338 = v336;
                    int v339 = v335;
                    do
                    {
                      ldiv_t v340 = ldiv(v339, v73[v338]);
                      int v339 = v340.quot;
                      v337 += v74[v338--] * v340.rem;
                    }
                    while (v338 != -1);
                  }
                  LODWORD(v1038) = v337;
                  LODWORD(__b) = 1;
                  unsigned __int8 v1050 = 0;
                  int v341 = operator new(0x28uLL);
                  *int v341 = &unk_27062E878;
                  v341[1] = &v1037;
                  v341[2] = &__b;
                  v341[3] = &__len;
                  v341[4] = &v1038;
                  unsigned __int8 v1050 = v341;
                  uint64_t v1058 = 0;
                  unint64_t v342 = operator new(0x28uLL);
                  *unint64_t v342 = &unk_27062B578;
                  v342[1] = &v1044;
                  v342[2] = &v1046;
                  v342[3] = v1057;
                  v342[4] = v1049;
                  unsigned int v1053 = v342;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  *v334++ = (int)__b;
                  ++v335;
                }
                while ((unint64_t)(*a2)[6] > v335);
              }
              goto LABEL_1072;
            case 4:
              int v158 = v1045;
              break;
            default:
              goto LABEL_1076;
          }
          int v1037 = *((_DWORD *)v158 - 1);
          size_t v494 = *((void *)v1047 - 1);
          unint64_t v1045 = v158 - 4;
          v1047 -= 8;
          int v1038 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v494;
          __b = (*a2)[19];
          size_t v73 = v1051;
          int v74 = v1053;
          unint64_t v495 = (unint64_t)(*a2)[6];
          if (v1045 == v1044)
          {
            if (v495)
            {
              int v597 = 0;
              char v598 = (char *)__b;
              uint64_t v599 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              size_t v600 = __len;
              int v1025 = v1038;
              size_t v601 = 4 * __len;
              do
              {
                uint64_t v602 = 0;
                if ((v599 & 0x80000000) == 0)
                {
                  uint64_t v603 = v599;
                  int v604 = v597;
                  do
                  {
                    ldiv_t v605 = ldiv(v604, v73[v603]);
                    int v604 = v605.quot;
                    v602 += v74[v603--] * v605.rem;
                  }
                  while (v603 != -1);
                }
                if (v600) {
                  memset_pattern16(v598, &unk_25704DBE0, v601);
                }
                int v606 = v1037;
                if (v1037 >= 1)
                {
                  int v607 = 0;
                  int v608 = &v1025[(int)v602];
                  do
                  {
                    if (v600)
                    {
                      for (uint64_t i10 = 0; i10 != v600; ++i10)
                      {
                        int v610 = *v608++;
                        *(_DWORD *)&v598[4 * i10] *= v610;
                      }
                    }
                    ++v607;
                  }
                  while (v607 != v606);
                }
                v598 += v601;
                v597 += v600;
              }
              while (v495 > v597);
            }
          }
          else if (v495)
          {
            int v496 = 0;
            uint64_t v497 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v498 = 0;
              if ((v497 & 0x80000000) == 0)
              {
                uint64_t v499 = v497;
                int v500 = v496;
                do
                {
                  ldiv_t v501 = ldiv(v500, v73[v499]);
                  int v500 = v501.quot;
                  v498 += v74[v499--] * v501.rem;
                }
                while (v499 != -1);
              }
              int v1035 = v498;
              if (__len) {
                memset_pattern16(__b, &unk_25704DBE0, 4 * __len);
              }
              unsigned __int8 v1050 = 0;
              unsigned int v502 = operator new(0x38uLL);
              *unsigned int v502 = &unk_27062E7F8;
              v502[1] = &v1048;
              v502[2] = &v1038;
              v502[3] = &v1035;
              v502[4] = &__b;
              v502[5] = &v1037;
              v502[6] = &__len;
              unsigned __int8 v1050 = v502;
              uint64_t v1058 = 0;
              size_t v503 = operator new(0x28uLL);
              *size_t v503 = &unk_27062B578;
              v503[1] = &v1044;
              v503[2] = &v1046;
              v503[3] = v1057;
              v503[4] = v1049;
              unsigned int v1053 = v503;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              __b = (char *)__b + 4 * __len;
              v496 += __len;
            }
            while ((unint64_t)(*a2)[6] > v496);
          }
          goto LABEL_1072;
        }
        int v94 = v1045;
      }
      LODWORD(__b) = *((_DWORD *)v94 - 1);
      unint64_t v1045 = v94 - 4;
      v1047 -= 8;
      size_t v135 = *(void *)(*(void *)a1 + 152);
      int v1038 = (*a2)[19];
      __leuint64_t n = v135;
      size_t v73 = v1051;
      int v74 = v1053;
      unint64_t v136 = (*a2)[6];
      if (v1045 == v1044)
      {
        if (v136)
        {
          uint64_t v241 = 0;
          uint64_t v242 = v1038;
          size_t v243 = __len;
          uint64_t v244 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v245 = 0;
            if ((v244 & 0x80000000) == 0)
            {
              uint64_t v246 = v244;
              int v247 = (int)v241;
              do
              {
                ldiv_t v248 = ldiv(v247, v73[v246]);
                int v247 = v248.quot;
                v245 += v74[v246--] * v248.rem;
              }
              while (v246 != -1);
            }
            *uint64_t v242 = 1;
            if ((int)__b >= 1)
            {
              unsigned int v249 = (int *)(v243 + 4 * (int)v245);
              unsigned int v250 = __b + 1;
              int v251 = 1;
              do
              {
                int v252 = *v249++;
                v251 *= v252;
                *uint64_t v242 = v251;
                --v250;
              }
              while (v250 > 1);
            }
            uint64_t v241 = (int *)((char *)v241 + 1);
            ++v242;
          }
          while (v241 != v136);
        }
      }
      else if (v136)
      {
        unint64_t v137 = 0;
        uint64_t v138 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
        do
        {
          uint64_t v139 = 0;
          if ((v138 & 0x80000000) == 0)
          {
            uint64_t v140 = v138;
            int v141 = v137;
            do
            {
              ldiv_t v142 = ldiv(v141, v73[v140]);
              int v141 = v142.quot;
              v139 += v74[v140--] * v142.rem;
            }
            while (v140 != -1);
          }
          int v1037 = v139;
          *int v1038 = 1;
          unsigned __int8 v1050 = 0;
          size_t v143 = operator new(0x30uLL);
          *size_t v143 = &unk_27062E778;
          v143[1] = &v1035;
          v143[2] = &__len;
          v143[3] = &v1037;
          v143[4] = &v1038;
          v143[5] = &__b;
          unsigned __int8 v1050 = v143;
          uint64_t v1058 = 0;
          size_t v144 = operator new(0x28uLL);
          *size_t v144 = &unk_27062B578;
          v144[1] = &v1044;
          v144[2] = &v1046;
          v144[3] = v1057;
          v144[4] = v1049;
          unsigned int v1053 = v144;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
          std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
          ++v137;
          ++v1038;
        }
        while ((unint64_t)(*a2)[6] > v137);
      }
      goto LABEL_1072;
    case 4:
      int v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1054 = &unk_27062AEC8;
      unsigned __int8 v1055 = mlx::core::allocator::free;
      int v1056 = &v1054;
      mlx::core::array::set_data(a2, (uint64_t)v14, (uint64_t)&v1054);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
      uint64_t v1041 = 0;
      uint64_t v1042 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1041 = __p;
        operator delete(__p);
      }
      if (v1043 == 1)
      {
        unsigned __int8 v51 = v1045;
        if (v1045 - (unsigned char *)v1044 == 4)
        {
          unsigned int v52 = (*a2)[6];
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v54 = *(int *)v1044;
            uint64_t v55 = (unsigned int *)(*a2)[19];
            unint64_t v56 = *(unsigned int **)(*(void *)a1 + 152);
            do
            {
              *uint64_t v55 = -1;
              if ((int)v54 >= 1)
              {
                unsigned int v57 = -1;
                unsigned int v58 = v54 + 1;
                unsigned int v59 = v56;
                do
                {
                  unsigned int v61 = *v59++;
                  unsigned int v60 = v61;
                  if (v57 >= v61) {
                    unsigned int v57 = v60;
                  }
                  *uint64_t v55 = v57;
                  --v58;
                }
                while (v58 > 1);
              }
              uint64_t v53 = (int *)((char *)v53 + 1);
              ++v55;
              v56 += v54;
            }
            while (v53 != v52);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1043)
        {
          int v15 = (unsigned int *)(*a2)[19];
          *int v15 = -1;
          int v16 = *(_DWORD *)(*(void *)a1 + 48);
          if (v16 >= 1)
          {
            uint64_t v17 = *(unsigned int **)(*(void *)a1 + 152);
            unsigned int v18 = v16 + 1;
            unsigned int v19 = -1;
            do
            {
              unsigned int v21 = *v17++;
              unsigned int v20 = v21;
              if (v19 >= v21) {
                unsigned int v19 = v20;
              }
              *int v15 = v19;
              --v18;
            }
            while (v18 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1043 & 0xFFFFFFFD) != 1)
        {
          switch(v1043)
          {
            case 2:
              uint64_t v155 = v1045;
              if (v1045 - (unsigned char *)v1044 == 4)
              {
                uint64_t v286 = *((int *)v1045 - 1);
                uint64_t v287 = *((void *)v1047 - 1);
                v1045 -= 4;
                v1047 -= 8;
                int v288 = (*a2)[6];
                if (v288)
                {
                  LODWORD(v289) = 0;
                  int v290 = (*a2)[19];
                  unsigned int v291 = *(unsigned int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v287) {
                      memset(v290, 255, 4 * v287);
                    }
                    if ((int)v286 >= 1)
                    {
                      int v292 = 0;
                      BOOL v293 = v291;
                      do
                      {
                        if (v287)
                        {
                          for (uint64_t i11 = 0; i11 != v287; ++i11)
                          {
                            unsigned int v296 = *v293++;
                            int v295 = v296;
                            if (v290[i11] < v296) {
                              int v295 = v290[i11];
                            }
                            v290[i11] = v295;
                          }
                        }
                        ++v292;
                      }
                      while (v292 != v286);
                    }
                    v291 += v287 * v286;
                    v290 += v287;
                    unint64_t v289 = (int)v289 + (int)v287;
                  }
                  while (v289 < (unint64_t)v288);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              int v307 = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              if ((*a2)[6])
              {
                unint64_t v308 = 0;
                uint64_t v309 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v310 = 0;
                  if ((v309 & 0x80000000) == 0)
                  {
                    uint64_t v311 = v309;
                    int v312 = v308;
                    do
                    {
                      ldiv_t v313 = ldiv(v312, v73[v311]);
                      int v312 = v313.quot;
                      v310 += v74[v311--] * v313.rem;
                    }
                    while (v311 != -1);
                  }
                  LODWORD(v1038) = v310;
                  LODWORD(__b) = -1;
                  unsigned __int8 v1050 = 0;
                  uint64_t v314 = operator new(0x28uLL);
                  *uint64_t v314 = &unk_27062EB78;
                  v314[1] = &v1037;
                  v314[2] = &__b;
                  v314[3] = &__len;
                  v314[4] = &v1038;
                  unsigned __int8 v1050 = v314;
                  uint64_t v1058 = 0;
                  uint64_t v315 = operator new(0x28uLL);
                  void *v315 = &unk_27062B578;
                  v315[1] = &v1044;
                  v315[2] = &v1046;
                  v315[3] = v1057;
                  v315[4] = v1049;
                  unsigned int v1053 = v315;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  *v307++ = (int)__b;
                  ++v308;
                }
                while ((unint64_t)(*a2)[6] > v308);
              }
              goto LABEL_1072;
            case 4:
              uint64_t v155 = v1045;
              break;
            default:
              goto LABEL_1076;
          }
          int v1037 = *((_DWORD *)v155 - 1);
          size_t v297 = *((void *)v1047 - 1);
          unint64_t v1045 = v155 - 4;
          v1047 -= 8;
          int v1038 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v297;
          __b = (*a2)[19];
          size_t v73 = v1051;
          int v74 = v1053;
          unint64_t v298 = (unint64_t)(*a2)[6];
          if (v1045 == v1044)
          {
            if (v298)
            {
              int v554 = 0;
              uint64_t v555 = (char *)__b;
              uint64_t v556 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              size_t v557 = __len;
              char v1022 = v1038;
              size_t v558 = 4 * __len;
              do
              {
                uint64_t v559 = 0;
                if ((v556 & 0x80000000) == 0)
                {
                  uint64_t v560 = v556;
                  int v561 = v554;
                  do
                  {
                    ldiv_t v562 = ldiv(v561, v73[v560]);
                    int v561 = v562.quot;
                    v559 += v74[v560--] * v562.rem;
                  }
                  while (v560 != -1);
                }
                if (v557) {
                  memset(v555, 255, v558);
                }
                int v563 = v1037;
                if (v1037 >= 1)
                {
                  int v564 = 0;
                  int v565 = &v1022[(int)v559];
                  do
                  {
                    if (v557)
                    {
                      for (uint64_t i12 = 0; i12 != v557; ++i12)
                      {
                        unsigned int v568 = *v565++;
                        unsigned int v567 = v568;
                        if (*(_DWORD *)&v555[4 * i12] < v568) {
                          unsigned int v567 = *(_DWORD *)&v555[4 * i12];
                        }
                        *(_DWORD *)&v555[4 * i12] = v567;
                      }
                    }
                    ++v564;
                  }
                  while (v564 != v563);
                }
                v555 += v558;
                v554 += v557;
              }
              while (v298 > v554);
            }
          }
          else if (v298)
          {
            int v299 = 0;
            uint64_t v300 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v301 = 0;
              if ((v300 & 0x80000000) == 0)
              {
                uint64_t v302 = v300;
                int v303 = v299;
                do
                {
                  ldiv_t v304 = ldiv(v303, v73[v302]);
                  int v303 = v304.quot;
                  v301 += v74[v302--] * v304.rem;
                }
                while (v302 != -1);
              }
              int v1035 = v301;
              if (__len) {
                memset(__b, 255, 4 * __len);
              }
              unsigned __int8 v1050 = 0;
              uint64_t v305 = operator new(0x38uLL);
              *uint64_t v305 = &unk_27062EAF8;
              v305[1] = &v1048;
              v305[2] = &v1038;
              v305[3] = &v1035;
              v305[4] = &__b;
              v305[5] = &v1037;
              v305[6] = &__len;
              unsigned __int8 v1050 = v305;
              uint64_t v1058 = 0;
              uint64_t v306 = operator new(0x28uLL);
              *uint64_t v306 = &unk_27062B578;
              v306[1] = &v1044;
              v306[2] = &v1046;
              v306[3] = v1057;
              v306[4] = v1049;
              unsigned int v1053 = v306;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              __b = (char *)__b + 4 * __len;
              v299 += __len;
            }
            while ((unint64_t)(*a2)[6] > v299);
          }
          goto LABEL_1072;
        }
        unsigned __int8 v51 = v1045;
      }
      LODWORD(__b) = *((_DWORD *)v51 - 1);
      unint64_t v1045 = v51 - 4;
      v1047 -= 8;
      size_t v72 = *(void *)(*(void *)a1 + 152);
      int v1038 = (*a2)[19];
      __leuint64_t n = v72;
      size_t v73 = v1051;
      int v74 = v1053;
      unint64_t v75 = (*a2)[6];
      if (v1045 == v1044)
      {
        if (v75)
        {
          unint64_t v202 = 0;
          uint64_t v203 = (unsigned int *)v1038;
          size_t v204 = __len;
          uint64_t v205 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v206 = 0;
            if ((v205 & 0x80000000) == 0)
            {
              uint64_t v207 = v205;
              int v208 = (int)v202;
              do
              {
                ldiv_t v209 = ldiv(v208, v73[v207]);
                int v208 = v209.quot;
                v206 += v74[v207--] * v209.rem;
              }
              while (v207 != -1);
            }
            *uint64_t v203 = -1;
            if ((int)__b >= 1)
            {
              unsigned __int8 v210 = (unsigned int *)(v204 + 4 * (int)v206);
              unsigned int v211 = __b + 1;
              unsigned int v212 = -1;
              do
              {
                unsigned int v214 = *v210++;
                unsigned int v213 = v214;
                if (v212 >= v214) {
                  unsigned int v212 = v213;
                }
                *uint64_t v203 = v212;
                --v211;
              }
              while (v211 > 1);
            }
            unint64_t v202 = (int *)((char *)v202 + 1);
            ++v203;
          }
          while (v202 != v75);
        }
      }
      else if (v75)
      {
        unint64_t v76 = 0;
        uint64_t v77 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
        do
        {
          uint64_t v78 = 0;
          if ((v77 & 0x80000000) == 0)
          {
            uint64_t v79 = v77;
            int v80 = v76;
            do
            {
              ldiv_t v81 = ldiv(v80, v73[v79]);
              int v80 = v81.quot;
              v78 += v74[v79--] * v81.rem;
            }
            while (v79 != -1);
          }
          int v1037 = v78;
          *int v1038 = -1;
          unsigned __int8 v1050 = 0;
          ldiv_t v82 = operator new(0x30uLL);
          *ldiv_t v82 = &unk_27062EA78;
          v82[1] = &v1035;
          v82[2] = &__len;
          v82[3] = &v1037;
          v82[4] = &v1038;
          v82[5] = &__b;
          unsigned __int8 v1050 = v82;
          uint64_t v1058 = 0;
          int v83 = operator new(0x28uLL);
          *int v83 = &unk_27062B578;
          v83[1] = &v1044;
          v83[2] = &v1046;
          v83[3] = v1057;
          v83[4] = v1049;
          unsigned int v1053 = v83;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
          std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
          ++v76;
          ++v1038;
        }
        while ((unint64_t)(*a2)[6] > v76);
      }
      goto LABEL_1072;
    case 5:
      int v43 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1054 = &unk_27062AEC8;
      unsigned __int8 v1055 = mlx::core::allocator::free;
      int v1056 = &v1054;
      mlx::core::array::set_data(a2, (uint64_t)v43, (uint64_t)&v1054);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1054);
      uint64_t v1041 = 0;
      uint64_t v1042 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        uint64_t v1041 = __p;
        operator delete(__p);
      }
      if (v1043 == 1)
      {
        unint64_t v104 = v1045;
        if (v1045 - (unsigned char *)v1044 == 4)
        {
          unint64_t v105 = (*a2)[6];
          if (v105)
          {
            uint64_t v106 = 0;
            uint64_t v107 = *(int *)v1044;
            unsigned __int8 v108 = (*a2)[19];
            unsigned __int8 v109 = *(unsigned int **)(*(void *)a1 + 152);
            do
            {
              int *v108 = 0;
              if ((int)v107 >= 1)
              {
                unsigned int v110 = 0;
                unsigned int v111 = v107 + 1;
                unsigned __int8 v112 = v109;
                do
                {
                  unsigned int v114 = *v112++;
                  unsigned int v113 = v114;
                  if (v110 <= v114) {
                    unsigned int v110 = v113;
                  }
                  int *v108 = v110;
                  --v111;
                }
                while (v111 > 1);
              }
              uint64_t v106 = (int *)((char *)v106 + 1);
              ++v108;
              v109 += v107;
            }
            while (v106 != v105);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1043)
        {
          int v44 = (*a2)[19];
          *int v44 = 0;
          int v45 = *(_DWORD *)(*(void *)a1 + 48);
          if (v45 >= 1)
          {
            unsigned int v46 = 0;
            int v47 = *(unsigned int **)(*(void *)a1 + 152);
            unsigned int v48 = v45 + 1;
            do
            {
              unsigned int v50 = *v47++;
              unsigned int v49 = v50;
              if (v46 <= v50) {
                unsigned int v46 = v49;
              }
              *int v44 = v46;
              --v48;
            }
            while (v48 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1043 & 0xFFFFFFFD) != 1)
        {
          switch(v1043)
          {
            case 2:
              uint64_t v159 = v1045;
              if (v1045 - (unsigned char *)v1044 == 4)
              {
                uint64_t v504 = *((int *)v1045 - 1);
                uint64_t v505 = *((void *)v1047 - 1);
                v1045 -= 4;
                v1047 -= 8;
                uint64_t v506 = (*a2)[6];
                if (v506)
                {
                  LODWORD(v507) = 0;
                  uint64_t v508 = (*a2)[19];
                  int v509 = *(unsigned int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v505) {
                      bzero(v508, 4 * v505);
                    }
                    if ((int)v504 >= 1)
                    {
                      int v510 = 0;
                      unint64_t v511 = v509;
                      do
                      {
                        if (v505)
                        {
                          for (uint64_t i13 = 0; i13 != v505; ++i13)
                          {
                            unsigned int v514 = *v511++;
                            int v513 = v514;
                            if (v508[i13] > v514) {
                              int v513 = v508[i13];
                            }
                            v508[i13] = v513;
                          }
                        }
                        ++v510;
                      }
                      while (v510 != v504);
                    }
                    v509 += v505 * v504;
                    v508 += v505;
                    unint64_t v507 = (int)v507 + (int)v505;
                  }
                  while (v507 < (unint64_t)v506);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              uint64_t v525 = (*a2)[19];
              size_t v73 = v1051;
              int v74 = v1053;
              if ((*a2)[6])
              {
                unint64_t v526 = 0;
                uint64_t v527 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
                do
                {
                  uint64_t v528 = 0;
                  if ((v527 & 0x80000000) == 0)
                  {
                    uint64_t v529 = v527;
                    int v530 = v526;
                    do
                    {
                      ldiv_t v531 = ldiv(v530, v73[v529]);
                      int v530 = v531.quot;
                      v528 += v74[v529--] * v531.rem;
                    }
                    while (v529 != -1);
                  }
                  LODWORD(v1038) = v528;
                  LODWORD(__b) = 0;
                  unsigned __int8 v1050 = 0;
                  size_t v532 = operator new(0x28uLL);
                  *size_t v532 = &unk_27062E9F8;
                  v532[1] = &v1037;
                  v532[2] = &__b;
                  v532[3] = &__len;
                  v532[4] = &v1038;
                  unsigned __int8 v1050 = v532;
                  uint64_t v1058 = 0;
                  uint64_t v533 = operator new(0x28uLL);
                  *uint64_t v533 = &unk_27062B578;
                  v533[1] = &v1044;
                  v533[2] = &v1046;
                  v533[3] = v1057;
                  v533[4] = v1049;
                  unsigned int v1053 = v533;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
                  *v525++ = (int)__b;
                  ++v526;
                }
                while ((unint64_t)(*a2)[6] > v526);
              }
              goto LABEL_1072;
            case 4:
              uint64_t v159 = v1045;
              break;
            default:
              goto LABEL_1076;
          }
          int v1037 = *((_DWORD *)v159 - 1);
          size_t v515 = *((void *)v1047 - 1);
          unint64_t v1045 = v159 - 4;
          v1047 -= 8;
          int v1038 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v515;
          __b = (*a2)[19];
          size_t v73 = v1051;
          int v74 = v1053;
          unint64_t v516 = (unint64_t)(*a2)[6];
          if (v1045 == v1044)
          {
            if (v516)
            {
              int v611 = 0;
              int v612 = (char *)__b;
              uint64_t v613 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
              size_t v614 = __len;
              uint64_t v1026 = v1038;
              size_t v615 = 4 * __len;
              do
              {
                uint64_t v616 = 0;
                if ((v613 & 0x80000000) == 0)
                {
                  uint64_t v617 = v613;
                  int v618 = v611;
                  do
                  {
                    ldiv_t v619 = ldiv(v618, v73[v617]);
                    int v618 = v619.quot;
                    v616 += v74[v617--] * v619.rem;
                  }
                  while (v617 != -1);
                }
                if (v614) {
                  bzero(v612, v615);
                }
                int v620 = v1037;
                if (v1037 >= 1)
                {
                  int v621 = 0;
                  unint64_t v622 = &v1026[(int)v616];
                  do
                  {
                    if (v614)
                    {
                      for (uint64_t i14 = 0; i14 != v614; ++i14)
                      {
                        unsigned int v625 = *v622++;
                        unsigned int v624 = v625;
                        if (*(_DWORD *)&v612[4 * i14] > v625) {
                          unsigned int v624 = *(_DWORD *)&v612[4 * i14];
                        }
                        *(_DWORD *)&v612[4 * i14] = v624;
                      }
                    }
                    ++v621;
                  }
                  while (v621 != v620);
                }
                v612 += v615;
                v611 += v614;
              }
              while (v516 > v611);
            }
          }
          else if (v516)
          {
            int v517 = 0;
            uint64_t v518 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
            do
            {
              uint64_t v519 = 0;
              if ((v518 & 0x80000000) == 0)
              {
                uint64_t v520 = v518;
                int v521 = v517;
                do
                {
                  ldiv_t v522 = ldiv(v521, v73[v520]);
                  int v521 = v522.quot;
                  v519 += v74[v520--] * v522.rem;
                }
                while (v520 != -1);
              }
              int v1035 = v519;
              if (__len) {
                bzero(__b, 4 * __len);
              }
              unsigned __int8 v1050 = 0;
              uint64_t v523 = operator new(0x38uLL);
              *uint64_t v523 = &unk_27062E978;
              v523[1] = &v1048;
              v523[2] = &v1038;
              v523[3] = &v1035;
              v523[4] = &__b;
              v523[5] = &v1037;
              v523[6] = &__len;
              unsigned __int8 v1050 = v523;
              uint64_t v1058 = 0;
              unint64_t v524 = operator new(0x28uLL);
              *unint64_t v524 = &unk_27062B578;
              v524[1] = &v1044;
              v524[2] = &v1046;
              v524[3] = v1057;
              v524[4] = v1049;
              unsigned int v1053 = v524;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
              std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
              __b = (char *)__b + 4 * __len;
              v517 += __len;
            }
            while ((unint64_t)(*a2)[6] > v517);
          }
          goto LABEL_1072;
        }
        unint64_t v104 = v1045;
      }
      LODWORD(__b) = *((_DWORD *)v104 - 1);
      unint64_t v1045 = v104 - 4;
      v1047 -= 8;
      size_t v145 = *(void *)(*(void *)a1 + 152);
      int v1038 = (*a2)[19];
      __leuint64_t n = v145;
      size_t v73 = v1051;
      int v74 = v1053;
      unint64_t v146 = (*a2)[6];
      if (v1045 == v1044)
      {
        if (v146)
        {
          uint64_t v253 = 0;
          uint64_t v254 = v1038;
          size_t v255 = __len;
          uint64_t v256 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
          do
          {
            uint64_t v257 = 0;
            if ((v256 & 0x80000000) == 0)
            {
              uint64_t v258 = v256;
              int v259 = (int)v253;
              do
              {
                ldiv_t v260 = ldiv(v259, v73[v258]);
                int v259 = v260.quot;
                v257 += v74[v258--] * v260.rem;
              }
              while (v258 != -1);
            }
            *uint64_t v254 = 0;
            if ((int)__b >= 1)
            {
              unsigned int v261 = 0;
              unsigned int v262 = (unsigned int *)(v255 + 4 * (int)v257);
              unsigned int v263 = __b + 1;
              do
              {
                unsigned int v265 = *v262++;
                unsigned int v264 = v265;
                if (v261 <= v265) {
                  unsigned int v261 = v264;
                }
                *uint64_t v254 = v261;
                --v263;
              }
              while (v263 > 1);
            }
            uint64_t v253 = (int *)((char *)v253 + 1);
            ++v254;
          }
          while (v253 != v146);
        }
      }
      else if (v146)
      {
        unint64_t v147 = 0;
        uint64_t v148 = ((unint64_t)(v1052 - (void)v1051) >> 2) - 1;
        do
        {
          uint64_t v149 = 0;
          if ((v148 & 0x80000000) == 0)
          {
            uint64_t v150 = v148;
            int v151 = v147;
            do
            {
              ldiv_t v152 = ldiv(v151, v73[v150]);
              int v151 = v152.quot;
              v149 += v74[v150--] * v152.rem;
            }
            while (v150 != -1);
          }
          int v1037 = v149;
          *int v1038 = 0;
          unsigned __int8 v1050 = 0;
          unint64_t v153 = operator new(0x30uLL);
          *unint64_t v153 = &unk_27062E8F8;
          v153[1] = &v1035;
          v153[2] = &__len;
          v153[3] = &v1037;
          v153[4] = &v1038;
          v153[5] = &__b;
          unsigned __int8 v1050 = v153;
          uint64_t v1058 = 0;
          unint64_t v154 = operator new(0x28uLL);
          *unint64_t v154 = &unk_27062B578;
          v154[1] = &v1044;
          v154[2] = &v1046;
          v154[3] = v1057;
          v154[4] = v1049;
          unsigned int v1053 = v154;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1051, v1057);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1051);
          std::function<void ()(int,int)>::operator()((uint64_t)v1057, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1057);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1049);
          ++v147;
          ++v1038;
        }
        while ((unint64_t)(*a2)[6] > v147);
      }
      goto LABEL_1072;
    default:
      return;
  }
}

void sub_256DB4C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::anonymous namespace'::reduce_dispatch_out<int>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  uint64_t v1061 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 0:
      uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (void)(*a2)[6]));
      int v1056 = &unk_27062AEC8;
      unsigned __int8 v1057 = mlx::core::allocator::free;
      uint64_t v1058 = &v1056;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1056);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
      int v1043 = 0;
      uint64_t v1044 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        int v1043 = __p;
        operator delete(__p);
      }
      if (v1045 == 1)
      {
        unsigned int v62 = v1047;
        if (v1047 - (unsigned char *)v1046 != 4) {
          goto LABEL_113;
        }
        int v63 = (*a2)[6];
        if (v63)
        {
          uint64_t v64 = 0;
          uint64_t v65 = *(int *)v1046;
          uint64_t v66 = (char *)(*a2)[19];
          char v67 = *(int **)(*(void *)a1 + 152);
          do
          {
            *uint64_t v66 = 1;
            if ((int)v65 >= 1)
            {
              char v68 = 1;
              unsigned int v69 = v65 + 1;
              unsigned int v70 = v67;
              do
              {
                int v71 = *v70++;
                v68 &= v71 != 0;
                --v69;
              }
              while (v69 > 1);
              *uint64_t v66 = v68;
            }
            uint64_t v64 = (int *)((char *)v64 + 1);
            ++v66;
            v67 += v65;
          }
          while (v64 != v63);
        }
        goto LABEL_1076;
      }
      if (!v1045)
      {
        int v8 = (char *)(*a2)[19];
        char *v8 = 1;
        int v9 = *(_DWORD *)(*(void *)a1 + 48);
        if (v9 >= 1)
        {
          int v10 = *(int **)(*(void *)a1 + 152);
          unsigned int v11 = v9 + 1;
          char v12 = 1;
          do
          {
            int v13 = *v10++;
            v12 &= v13 != 0;
            --v11;
          }
          while (v11 > 1);
          char *v8 = v12;
        }
        goto LABEL_1076;
      }
      if ((v1045 & 0xFFFFFFFD) == 1)
      {
        unsigned int v62 = v1047;
LABEL_113:
        LODWORD(__b) = *((_DWORD *)v62 - 1);
        char v1047 = v62 - 4;
        v1049 -= 8;
        size_t v115 = *(void *)(*(void *)a1 + 152);
        uint64_t v1040 = (*a2)[19];
        __leuint64_t n = v115;
        size_t v73 = v1053;
        int v74 = v1055;
        unint64_t v116 = (*a2)[6];
        if (v1047 == v1046)
        {
          if (v116)
          {
            uint64_t v215 = 0;
            uint64_t v216 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            int v217 = (char *)v1040;
            size_t v1022 = __len;
            int v218 = (int)__b;
            int v219 = __b + 1;
            do
            {
              uint64_t v220 = 0;
              if ((v216 & 0x80000000) == 0)
              {
                uint64_t v221 = v216;
                int quot = (int)v215;
                do
                {
                  ldiv_t v223 = ldiv(quot, v73[v221]);
                  int quot = v223.quot;
                  v220 += v74[v221--] * v223.rem;
                }
                while (v221 != -1);
              }
              char *v217 = 1;
              if (v218 >= 1)
              {
                char v224 = (int *)(v1022 + 4 * (int)v220);
                char v225 = 1;
                unsigned int v226 = v219;
                do
                {
                  int v227 = *v224++;
                  v225 &= v227 != 0;
                  --v226;
                }
                while (v226 > 1);
                char *v217 = v225;
              }
              uint64_t v215 = (int *)((char *)v215 + 1);
              ++v217;
            }
            while (v215 != v116);
          }
        }
        else if (v116)
        {
          unint64_t v117 = 0;
          uint64_t v118 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v119 = 0;
            if ((v118 & 0x80000000) == 0)
            {
              uint64_t v120 = v118;
              int v121 = v117;
              do
              {
                ldiv_t v122 = ldiv(v121, v73[v120]);
                int v121 = v122.quot;
                v119 += v74[v120--] * v122.rem;
              }
              while (v120 != -1);
            }
            int v1039 = v119;
            *(unsigned char *)uint64_t v1040 = 1;
            uint64_t v1052 = 0;
            size_t v123 = operator new(0x30uLL);
            void *v123 = &unk_27062EBF8;
            v123[1] = &v1037;
            v123[2] = &__len;
            v123[3] = &v1039;
            v123[4] = &v1040;
            v123[5] = &__b;
            uint64_t v1052 = v123;
            uint64_t v1060 = 0;
            size_t v124 = operator new(0x28uLL);
            *size_t v124 = &unk_27062B578;
            v124[1] = &v1046;
            v124[2] = &v1048;
            v124[3] = v1059;
            v124[4] = v1051;
            unsigned __int8 v1055 = v124;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
            std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
            ++v117;
            uint64_t v1040 = (int *)((char *)v1040 + 1);
          }
          while ((unint64_t)(*a2)[6] > v117);
        }
        goto LABEL_1072;
      }
      if (v1045 != 2)
      {
        if (v1045 != 5)
        {
          if (v1045 != 4) {
            goto LABEL_1076;
          }
          unint64_t v156 = v1047;
          goto LABEL_456;
        }
        __leuint64_t n = *(void *)(*(void *)a1 + 152);
        unint64_t v317 = (*a2)[19];
        size_t v73 = v1053;
        int v74 = v1055;
        if ((*a2)[6])
        {
          unint64_t v318 = 0;
          uint64_t v319 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v320 = 0;
            if ((v319 & 0x80000000) == 0)
            {
              uint64_t v321 = v319;
              int v322 = v318;
              do
              {
                ldiv_t v323 = ldiv(v322, v73[v321]);
                int v322 = v323.quot;
                v320 += v74[v321--] * v323.rem;
              }
              while (v321 != -1);
            }
            LODWORD(v1040) = v320;
            LOBYTE(v1039) = 1;
            uint64_t v1052 = 0;
            uint64_t v324 = operator new(0x28uLL);
            void *v324 = &unk_27062ECF8;
            v324[1] = &__b;
            v324[2] = &v1039;
            v324[3] = &__len;
            v324[4] = &v1040;
            uint64_t v1052 = v324;
            uint64_t v1060 = 0;
            int v325 = operator new(0x28uLL);
            *int v325 = &unk_27062B578;
            v325[1] = &v1046;
            v325[2] = &v1048;
            v325[3] = v1059;
            v325[4] = v1051;
            unsigned __int8 v1055 = v325;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
            std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
            *(unsigned char *)unint64_t v317 = v1039;
            unint64_t v317 = (int *)((char *)v317 + 1);
            ++v318;
          }
          while ((unint64_t)(*a2)[6] > v318);
        }
        goto LABEL_1072;
      }
      unint64_t v156 = v1047;
      if (v1047 - (unsigned char *)v1046 != 4)
      {
LABEL_456:
        int v1039 = *((_DWORD *)v156 - 1);
        size_t v454 = *((void *)v1049 - 1);
        char v1047 = v156 - 4;
        v1049 -= 8;
        uint64_t v1040 = *(int **)(*(void *)a1 + 152);
        __leuint64_t n = v454;
        __b = (*a2)[19];
        size_t v73 = v1053;
        int v74 = v1055;
        unint64_t v455 = (unint64_t)(*a2)[6];
        if (v1047 == v1046)
        {
          if (v455)
          {
            int v571 = 0;
            size_t v572 = (char *)__b;
            uint64_t v573 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            size_t v574 = __len;
            int v1025 = v1040;
            int v575 = v1039;
            do
            {
              uint64_t v576 = 0;
              if ((v573 & 0x80000000) == 0)
              {
                uint64_t v577 = v573;
                int v578 = v571;
                do
                {
                  ldiv_t v579 = ldiv(v578, v73[v577]);
                  int v578 = v579.quot;
                  v576 += v74[v577--] * v579.rem;
                }
                while (v577 != -1);
              }
              if (v574) {
                memset(v572, 1, v574);
              }
              if (v575 >= 1)
              {
                int v580 = 0;
                int v581 = &v1025[(int)v576];
                do
                {
                  if (v574)
                  {
                    for (uint64_t i = 0; i != v574; ++i)
                    {
                      if (*v581++) {
                        BOOL v584 = v572[i] == 0;
                      }
                      else {
                        BOOL v584 = 1;
                      }
                      char v585 = !v584;
                      v572[i] = v585;
                    }
                  }
                  ++v580;
                }
                while (v580 != v575);
              }
              v572 += v574;
              v571 += v574;
            }
            while (v455 > v571);
          }
        }
        else if (v455)
        {
          int v456 = 0;
          uint64_t v457 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v458 = 0;
            if ((v457 & 0x80000000) == 0)
            {
              uint64_t v459 = v457;
              int v460 = v456;
              do
              {
                ldiv_t v461 = ldiv(v460, v73[v459]);
                int v460 = v461.quot;
                v458 += v74[v459--] * v461.rem;
              }
              while (v459 != -1);
            }
            int v1037 = v458;
            if (__len) {
              memset(__b, 1, __len);
            }
            uint64_t v1052 = 0;
            uint64_t v462 = operator new(0x38uLL);
            *uint64_t v462 = &unk_27062EC78;
            v462[1] = &v1050;
            v462[2] = &v1040;
            v462[3] = &v1037;
            v462[4] = &__b;
            v462[5] = &v1039;
            v462[6] = &__len;
            uint64_t v1052 = v462;
            uint64_t v1060 = 0;
            uint64_t v463 = operator new(0x28uLL);
            *uint64_t v463 = &unk_27062B578;
            v463[1] = &v1046;
            v463[2] = &v1048;
            v463[3] = v1059;
            v463[4] = v1051;
            unsigned __int8 v1055 = v463;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
            std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
            __b = (char *)__b + __len;
            v456 += __len;
          }
          while ((unint64_t)(*a2)[6] > v456);
        }
        goto LABEL_1072;
      }
      uint64_t v442 = *((int *)v1047 - 1);
      size_t v443 = *((void *)v1049 - 1);
      v1047 -= 4;
      v1049 -= 8;
      unint64_t v444 = (*a2)[6];
      if (v444)
      {
        LODWORD(v445) = 0;
        char v446 = (*a2)[19];
        int v447 = *(_DWORD **)(*(void *)a1 + 152);
        do
        {
          if (v443) {
            memset(v446, 1, v443);
          }
          if ((int)v442 >= 1)
          {
            int v448 = 0;
            int v449 = v447;
            do
            {
              if (v443)
              {
                for (uint64_t j = 0; j != v443; ++j)
                {
                  if (*v449++) {
                    BOOL v452 = *((unsigned char *)v446 + j) == 0;
                  }
                  else {
                    BOOL v452 = 1;
                  }
                  char v453 = !v452;
                  *((unsigned char *)v446 + j) = v453;
                }
              }
              ++v448;
            }
            while (v448 != v442);
          }
          v447 += v443 * v442;
          char v446 = (int *)((char *)v446 + v443);
          unint64_t v445 = (int)v445 + (int)v443;
        }
        while (v445 < (unint64_t)v444);
      }
      goto LABEL_1076;
    case 1:
      int v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1056 = &unk_27062AEC8;
      unsigned __int8 v1057 = mlx::core::allocator::free;
      uint64_t v1058 = &v1056;
      mlx::core::array::set_data(a2, (uint64_t)v31, (uint64_t)&v1056);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
      int v1043 = 0;
      uint64_t v1044 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        int v1043 = __p;
        operator delete(__p);
      }
      if (v1045 == 1)
      {
        uint64_t v84 = v1047;
        if (v1047 - (unsigned char *)v1046 == 4)
        {
          unint64_t v85 = (*a2)[6];
          if (v85)
          {
            uint64_t v86 = 0;
            uint64_t v87 = *(int *)v1046;
            uint64_t v88 = (*a2)[19];
            int v89 = *(int **)(*(void *)a1 + 152);
            do
            {
              *(unsigned char *)uint64_t v88 = 0;
              if ((int)v87 >= 1)
              {
                char v90 = 0;
                unsigned int v91 = v87 + 1;
                unsigned int v92 = v89;
                do
                {
                  int v93 = *v92++;
                  v90 |= v93 != 0;
                  --v91;
                }
                while (v91 > 1);
                *(unsigned char *)uint64_t v88 = v90;
              }
              uint64_t v86 = (int *)((char *)v86 + 1);
              uint64_t v88 = (int *)((char *)v88 + 1);
              v89 += v87;
            }
            while (v86 != v85);
          }
          goto LABEL_1076;
        }
LABEL_123:
        LODWORD(__b) = *((_DWORD *)v84 - 1);
        char v1047 = v84 - 4;
        v1049 -= 8;
        size_t v125 = *(void *)(*(void *)a1 + 152);
        uint64_t v1040 = (*a2)[19];
        __leuint64_t n = v125;
        size_t v73 = v1053;
        int v74 = v1055;
        unint64_t v126 = (*a2)[6];
        if (v1047 == v1046)
        {
          if (v126)
          {
            uint64_t v228 = 0;
            uint64_t v229 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            int v230 = v1040;
            size_t v1023 = __len;
            int v231 = (int)__b;
            int v232 = __b + 1;
            do
            {
              uint64_t v233 = 0;
              if ((v229 & 0x80000000) == 0)
              {
                uint64_t v234 = v229;
                int v235 = (int)v228;
                do
                {
                  ldiv_t v236 = ldiv(v235, v73[v234]);
                  int v235 = v236.quot;
                  v233 += v74[v234--] * v236.rem;
                }
                while (v234 != -1);
              }
              *(unsigned char *)int v230 = 0;
              if (v231 >= 1)
              {
                char v237 = 0;
                unsigned int v238 = (int *)(v1023 + 4 * (int)v233);
                unsigned int v239 = v232;
                do
                {
                  int v240 = *v238++;
                  v237 |= v240 != 0;
                  --v239;
                }
                while (v239 > 1);
                *(unsigned char *)int v230 = v237;
              }
              uint64_t v228 = (int *)((char *)v228 + 1);
              int v230 = (int *)((char *)v230 + 1);
            }
            while (v228 != v126);
          }
        }
        else if (v126)
        {
          unint64_t v127 = 0;
          uint64_t v128 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v129 = 0;
            if ((v128 & 0x80000000) == 0)
            {
              uint64_t v130 = v128;
              int v131 = v127;
              do
              {
                ldiv_t v132 = ldiv(v131, v73[v130]);
                int v131 = v132.quot;
                v129 += v74[v130--] * v132.rem;
              }
              while (v130 != -1);
            }
            int v1039 = v129;
            *(unsigned char *)uint64_t v1040 = 0;
            uint64_t v1052 = 0;
            size_t v133 = operator new(0x30uLL);
            *size_t v133 = &unk_27062ED78;
            v133[1] = &v1037;
            v133[2] = &__len;
            v133[3] = &v1039;
            v133[4] = &v1040;
            v133[5] = &__b;
            uint64_t v1052 = v133;
            uint64_t v1060 = 0;
            size_t v134 = operator new(0x28uLL);
            void *v134 = &unk_27062B578;
            v134[1] = &v1046;
            v134[2] = &v1048;
            v134[3] = v1059;
            v134[4] = v1051;
            unsigned __int8 v1055 = v134;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
            std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
            std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
            std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
            ++v127;
            uint64_t v1040 = (int *)((char *)v1040 + 1);
          }
          while ((unint64_t)(*a2)[6] > v127);
        }
        goto LABEL_1072;
      }
      if (!v1045)
      {
        int v25 = (*a2)[19];
        *(unsigned char *)int v25 = 0;
        int v32 = *(_DWORD *)(*(void *)a1 + 48);
        if (v32 < 1) {
          goto LABEL_1076;
        }
        unsigned __int8 v27 = 0;
        int v33 = *(int **)(*(void *)a1 + 152);
        unsigned int v34 = v32 + 1;
        do
        {
          int v35 = *v33++;
          v27 |= v35 != 0;
          --v34;
        }
        while (v34 > 1);
        goto LABEL_36;
      }
      if ((v1045 & 0xFFFFFFFD) == 1)
      {
        uint64_t v84 = v1047;
        goto LABEL_123;
      }
      switch(v1045)
      {
        case 2:
          int v157 = v1047;
          if (v1047 - (unsigned char *)v1046 == 4)
          {
            uint64_t v464 = *((int *)v1047 - 1);
            size_t v465 = *((void *)v1049 - 1);
            v1047 -= 4;
            v1049 -= 8;
            unint64_t v466 = (*a2)[6];
            if (v466)
            {
              LODWORD(v467) = 0;
              int v468 = (*a2)[19];
              int v469 = *(int **)(*(void *)a1 + 152);
              do
              {
                if (v465) {
                  bzero(v468, v465);
                }
                if ((int)v464 >= 1)
                {
                  int v470 = 0;
                  uint64_t v471 = v469;
                  do
                  {
                    if (v465)
                    {
                      for (uint64_t k = 0; k != v465; ++k)
                      {
                        int v473 = *v471++;
                        *((unsigned char *)v468 + k) |= v473 != 0;
                      }
                    }
                    ++v470;
                  }
                  while (v470 != v464);
                }
                v469 += v465 * v464;
                int v468 = (int *)((char *)v468 + v465);
                unint64_t v467 = (int)v467 + (int)v465;
              }
              while (v467 < (unint64_t)v466);
            }
            goto LABEL_1076;
          }
          break;
        case 5:
          __leuint64_t n = *(void *)(*(void *)a1 + 152);
          unint64_t v326 = (*a2)[19];
          size_t v73 = v1053;
          int v74 = v1055;
          if ((*a2)[6])
          {
            unint64_t v327 = 0;
            uint64_t v328 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v329 = 0;
              if ((v328 & 0x80000000) == 0)
              {
                uint64_t v330 = v328;
                int v331 = v327;
                do
                {
                  ldiv_t v332 = ldiv(v331, v73[v330]);
                  int v331 = v332.quot;
                  v329 += v74[v330--] * v332.rem;
                }
                while (v330 != -1);
              }
              LODWORD(v1040) = v329;
              LOBYTE(v1039) = 0;
              uint64_t v1052 = 0;
              uint64_t v333 = operator new(0x28uLL);
              *uint64_t v333 = &unk_27062EE78;
              v333[1] = &__b;
              v333[2] = &v1039;
              v333[3] = &__len;
              v333[4] = &v1040;
              uint64_t v1052 = v333;
              uint64_t v1060 = 0;
              int v334 = operator new(0x28uLL);
              *int v334 = &unk_27062B578;
              v334[1] = &v1046;
              v334[2] = &v1048;
              v334[3] = v1059;
              v334[4] = v1051;
              unsigned __int8 v1055 = v334;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              *(unsigned char *)unint64_t v326 = v1039;
              unint64_t v326 = (int *)((char *)v326 + 1);
              ++v327;
            }
            while ((unint64_t)(*a2)[6] > v327);
          }
          goto LABEL_1072;
        case 4:
          int v157 = v1047;
          break;
        default:
          goto LABEL_1076;
      }
      int v1039 = *((_DWORD *)v157 - 1);
      size_t v474 = *((void *)v1049 - 1);
      char v1047 = v157 - 4;
      v1049 -= 8;
      uint64_t v1040 = *(int **)(*(void *)a1 + 152);
      __leuint64_t n = v474;
      __b = (*a2)[19];
      size_t v73 = v1053;
      int v74 = v1055;
      unint64_t v475 = (unint64_t)(*a2)[6];
      if (v1047 == v1046)
      {
        if (v475)
        {
          int v586 = 0;
          size_t v587 = (char *)__b;
          uint64_t v588 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          size_t v589 = __len;
          uint64_t v1026 = v1040;
          int v590 = v1039;
          do
          {
            uint64_t v591 = 0;
            if ((v588 & 0x80000000) == 0)
            {
              uint64_t v592 = v588;
              int v593 = v586;
              do
              {
                ldiv_t v594 = ldiv(v593, v73[v592]);
                int v593 = v594.quot;
                v591 += v74[v592--] * v594.rem;
              }
              while (v592 != -1);
            }
            if (v589) {
              bzero(v587, v589);
            }
            if (v590 >= 1)
            {
              int v595 = 0;
              int v596 = &v1026[(int)v591];
              do
              {
                if (v589)
                {
                  for (uint64_t m = 0; m != v589; ++m)
                  {
                    int v598 = *v596++;
                    v587[m] |= v598 != 0;
                  }
                }
                ++v595;
              }
              while (v595 != v590);
            }
            v587 += v589;
            v586 += v589;
          }
          while (v475 > v586);
        }
      }
      else if (v475)
      {
        int v476 = 0;
        uint64_t v477 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
        do
        {
          uint64_t v478 = 0;
          if ((v477 & 0x80000000) == 0)
          {
            uint64_t v479 = v477;
            int v480 = v476;
            do
            {
              ldiv_t v481 = ldiv(v480, v73[v479]);
              int v480 = v481.quot;
              v478 += v74[v479--] * v481.rem;
            }
            while (v479 != -1);
          }
          int v1037 = v478;
          if (__len) {
            bzero(__b, __len);
          }
          uint64_t v1052 = 0;
          uint64_t v482 = operator new(0x38uLL);
          *uint64_t v482 = &unk_27062EDF8;
          v482[1] = &v1050;
          v482[2] = &v1040;
          v482[3] = &v1037;
          v482[4] = &__b;
          v482[5] = &v1039;
          v482[6] = &__len;
          uint64_t v1052 = v482;
          uint64_t v1060 = 0;
          uint64_t v483 = operator new(0x28uLL);
          *uint64_t v483 = &unk_27062B578;
          v483[1] = &v1046;
          v483[2] = &v1048;
          v483[3] = v1059;
          v483[4] = v1051;
          unsigned __int8 v1055 = v483;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
          std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
          __b = (char *)__b + __len;
          v476 += __len;
        }
        while ((unint64_t)(*a2)[6] > v476);
      }
      goto LABEL_1072;
    case 2:
      unint64_t v22 = *a2;
      int v23 = (*a2)[7];
      switch((int)v23)
      {
        case 0:
          int v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            uint64_t v266 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              uint64_t v267 = (*a2)[6];
              if (v267)
              {
                uint64_t v268 = 0;
                uint64_t v269 = *(int *)v1046;
                unsigned int v270 = (BOOL *)(*a2)[19];
                unsigned int v271 = *(int **)(*(void *)a1 + 152);
                do
                {
                  BOOL *v270 = 0;
                  if ((int)v269 >= 1)
                  {
                    BOOL v272 = 0;
                    unsigned int v273 = v269 + 1;
                    size_t v274 = v271;
                    do
                    {
                      int v275 = *v274++;
                      BOOL v272 = v275 + v272 != 0;
                      --v273;
                    }
                    while (v273 > 1);
                    BOOL *v270 = v272;
                  }
                  uint64_t v268 = (int *)((char *)v268 + 1);
                  ++v270;
                  v271 += v269;
                }
                while (v268 != v267);
              }
              goto LABEL_1076;
            }
LABEL_286:
            LODWORD(__b) = *((_DWORD *)v266 - 1);
            char v1047 = v266 - 4;
            v1049 -= 8;
            size_t v276 = *(void *)(*(void *)a1 + 152);
            uint64_t v1040 = (*a2)[19];
            __leuint64_t n = v276;
            size_t v73 = v1053;
            int v74 = v1055;
            uint64_t v277 = (*a2)[6];
            if (v1047 == v1046)
            {
              if (v277)
              {
                unint64_t v635 = 0;
                uint64_t v636 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                int v637 = (BOOL *)v1040;
                size_t v1029 = __len;
                int v638 = (int)__b;
                int v639 = __b + 1;
                do
                {
                  uint64_t v640 = 0;
                  if ((v636 & 0x80000000) == 0)
                  {
                    uint64_t v641 = v636;
                    int v642 = (int)v635;
                    do
                    {
                      ldiv_t v643 = ldiv(v642, v73[v641]);
                      int v642 = v643.quot;
                      v640 += v74[v641--] * v643.rem;
                    }
                    while (v641 != -1);
                  }
                  *int v637 = 0;
                  if (v638 >= 1)
                  {
                    BOOL v644 = 0;
                    int v645 = (int *)(v1029 + 4 * (int)v640);
                    unsigned int v646 = v639;
                    do
                    {
                      int v647 = *v645++;
                      BOOL v644 = v647 + v644 != 0;
                      --v646;
                    }
                    while (v646 > 1);
                    *int v637 = v644;
                  }
                  unint64_t v635 = (int *)((char *)v635 + 1);
                  ++v637;
                }
                while (v635 != v277);
              }
            }
            else if (v277)
            {
              unint64_t v278 = 0;
              uint64_t v279 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v280 = 0;
                if ((v279 & 0x80000000) == 0)
                {
                  uint64_t v281 = v279;
                  int v282 = v278;
                  do
                  {
                    ldiv_t v283 = ldiv(v282, v73[v281]);
                    int v282 = v283.quot;
                    v280 += v74[v281--] * v283.rem;
                  }
                  while (v281 != -1);
                }
                int v1039 = v280;
                *(unsigned char *)uint64_t v1040 = 0;
                uint64_t v1052 = 0;
                size_t v284 = operator new(0x30uLL);
                *size_t v284 = &unk_27062EEF8;
                v284[1] = &v1037;
                v284[2] = &__len;
                v284[3] = &v1039;
                v284[4] = &v1040;
                v284[5] = &__b;
                uint64_t v1052 = v284;
                uint64_t v1060 = 0;
                unint64_t v285 = operator new(0x28uLL);
                *unint64_t v285 = &unk_27062B578;
                v285[1] = &v1046;
                v285[2] = &v1048;
                v285[3] = v1059;
                v285[4] = v1051;
                unsigned __int8 v1055 = v285;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                ++v278;
                uint64_t v1040 = (int *)((char *)v1040 + 1);
              }
              while ((unint64_t)(*a2)[6] > v278);
            }
            goto LABEL_1072;
          }
          if (v1045)
          {
            if ((v1045 & 0xFFFFFFFD) == 1)
            {
              uint64_t v266 = v1047;
              goto LABEL_286;
            }
            switch(v1045)
            {
              case 2:
                uint64_t v628 = v1047;
                if (v1047 - (unsigned char *)v1046 == 4)
                {
                  uint64_t v720 = *((int *)v1047 - 1);
                  size_t v721 = *((void *)v1049 - 1);
                  v1047 -= 4;
                  v1049 -= 8;
                  int v722 = (*a2)[6];
                  if (v722)
                  {
                    LODWORD(v723) = 0;
                    int v724 = (*a2)[19];
                    unint64_t v725 = *(int **)(*(void *)a1 + 152);
                    do
                    {
                      if (v721) {
                        bzero(v724, v721);
                      }
                      if ((int)v720 >= 1)
                      {
                        int v726 = 0;
                        int v727 = v725;
                        do
                        {
                          if (v721)
                          {
                            for (uint64_t n = 0; n != v721; ++n)
                            {
                              int v729 = *v727++;
                              *((unsigned char *)v724 + n) = *((unsigned __int8 *)v724 + n) + v729 != 0;
                            }
                          }
                          ++v726;
                        }
                        while (v726 != v720);
                      }
                      v725 += v721 * v720;
                      int v724 = (int *)((char *)v724 + v721);
                      unint64_t v723 = (int)v723 + (int)v721;
                    }
                    while (v723 < (unint64_t)v722);
                  }
                  goto LABEL_1076;
                }
                break;
              case 5:
                __leuint64_t n = *(void *)(*(void *)a1 + 152);
                uint64_t v740 = (*a2)[19];
                size_t v73 = v1053;
                int v74 = v1055;
                if ((*a2)[6])
                {
                  unint64_t v741 = 0;
                  uint64_t v742 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  do
                  {
                    uint64_t v743 = 0;
                    if ((v742 & 0x80000000) == 0)
                    {
                      uint64_t v744 = v742;
                      int v745 = v741;
                      do
                      {
                        ldiv_t v746 = ldiv(v745, v73[v744]);
                        int v745 = v746.quot;
                        v743 += v74[v744--] * v746.rem;
                      }
                      while (v744 != -1);
                    }
                    LODWORD(v1040) = v743;
                    LOBYTE(v1039) = 0;
                    uint64_t v1052 = 0;
                    uint64_t v747 = operator new(0x28uLL);
                    *uint64_t v747 = &unk_27062EFF8;
                    v747[1] = &__b;
                    v747[2] = &v1039;
                    v747[3] = &__len;
                    v747[4] = &v1040;
                    uint64_t v1052 = v747;
                    uint64_t v1060 = 0;
                    size_t v748 = operator new(0x28uLL);
                    *size_t v748 = &unk_27062B578;
                    v748[1] = &v1046;
                    v748[2] = &v1048;
                    v748[3] = v1059;
                    v748[4] = v1051;
                    unsigned __int8 v1055 = v748;
                    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                    std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                    std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                    *(unsigned char *)uint64_t v740 = v1039;
                    uint64_t v740 = (int *)((char *)v740 + 1);
                    ++v741;
                  }
                  while ((unint64_t)(*a2)[6] > v741);
                }
                goto LABEL_1072;
              case 4:
                uint64_t v628 = v1047;
                break;
              default:
                goto LABEL_1076;
            }
            int v1039 = *((_DWORD *)v628 - 1);
            size_t v730 = *((void *)v1049 - 1);
            char v1047 = v628 - 4;
            v1049 -= 8;
            uint64_t v1040 = *(int **)(*(void *)a1 + 152);
            __leuint64_t n = v730;
            __b = (*a2)[19];
            size_t v73 = v1053;
            int v74 = v1055;
            unint64_t v731 = (unint64_t)(*a2)[6];
            if (v1047 == v1046)
            {
              if (v731)
              {
                int v921 = 0;
                size_t v922 = (unsigned __int8 *)__b;
                uint64_t v923 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                size_t v924 = __len;
                uint64_t v1032 = v1040;
                int v925 = v1039;
                do
                {
                  uint64_t v926 = 0;
                  if ((v923 & 0x80000000) == 0)
                  {
                    uint64_t v927 = v923;
                    int v928 = v921;
                    do
                    {
                      ldiv_t v929 = ldiv(v928, v73[v927]);
                      int v928 = v929.quot;
                      v926 += v74[v927--] * v929.rem;
                    }
                    while (v927 != -1);
                  }
                  if (v924) {
                    bzero(v922, v924);
                  }
                  if (v925 >= 1)
                  {
                    int v930 = 0;
                    int v931 = &v1032[(int)v926];
                    do
                    {
                      if (v924)
                      {
                        for (iuint64_t i = 0; ii != v924; ++ii)
                        {
                          int v933 = *v931++;
                          v922[ii] = v922[ii] + v933 != 0;
                        }
                      }
                      ++v930;
                    }
                    while (v930 != v925);
                  }
                  v922 += v924;
                  v921 += v924;
                }
                while (v731 > v921);
              }
            }
            else if (v731)
            {
              int v732 = 0;
              uint64_t v733 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v734 = 0;
                if ((v733 & 0x80000000) == 0)
                {
                  uint64_t v735 = v733;
                  int v736 = v732;
                  do
                  {
                    ldiv_t v737 = ldiv(v736, v73[v735]);
                    int v736 = v737.quot;
                    v734 += v74[v735--] * v737.rem;
                  }
                  while (v735 != -1);
                }
                int v1037 = v734;
                if (__len) {
                  bzero(__b, __len);
                }
                uint64_t v1052 = 0;
                unint64_t v738 = operator new(0x38uLL);
                *unint64_t v738 = &unk_27062EF78;
                v738[1] = &v1050;
                v738[2] = &v1040;
                v738[3] = &v1037;
                v738[4] = &__b;
                v738[5] = &v1039;
                v738[6] = &__len;
                uint64_t v1052 = v738;
                uint64_t v1060 = 0;
                unint64_t v739 = operator new(0x28uLL);
                *unint64_t v739 = &unk_27062B578;
                v739[1] = &v1046;
                v739[2] = &v1048;
                v739[3] = v1059;
                v739[4] = v1051;
                unsigned __int8 v1055 = v739;
                std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                __b = (char *)__b + __len;
                v732 += __len;
              }
              while ((unint64_t)(*a2)[6] > v732);
            }
LABEL_1072:
            if (v74) {
              operator delete(v74);
            }
            if (v73) {
              operator delete(v73);
            }
            goto LABEL_1076;
          }
          int v25 = (*a2)[19];
          *(unsigned char *)int v25 = 0;
          int v26 = *(_DWORD *)(*(void *)a1 + 48);
          if (v26 < 1) {
            goto LABEL_1076;
          }
          unsigned __int8 v27 = 0;
          unsigned int v28 = *(int **)(*(void *)a1 + 152);
          unsigned int v29 = v26 + 1;
          do
          {
            int v30 = *v28++;
            unsigned __int8 v27 = v30 + v27 != 0;
            --v29;
          }
          while (v29 > 1);
LABEL_36:
          *(unsigned char *)int v25 = v27;
LABEL_1076:
          if (v1048)
          {
            int v1049 = (char *)v1048;
            operator delete(v1048);
          }
          if (v1046)
          {
            char v1047 = v1046;
            operator delete(v1046);
          }
          return;
        case 1:
          int v160 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v160, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            unint64_t v344 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              if ((*a2)[6])
              {
                unint64_t v345 = 0;
                uint64_t v346 = *(int *)v1046;
                size_t v347 = (*a2)[19];
                int v348 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(unsigned char *)size_t v347 = 0;
                  if ((int)v346 >= 1)
                  {
                    int v349 = 0;
                    unsigned int v350 = v346 + 1;
                    int v351 = v348;
                    do
                    {
                      int v352 = *v351;
                      v351 += 4;
                      v349 += v352;
                      *(unsigned char *)size_t v347 = v349;
                      --v350;
                    }
                    while (v350 > 1);
                  }
                  ++v345;
                  size_t v347 = (int *)((char *)v347 + 1);
                  v348 += 4 * v346;
                }
                while ((unint64_t)(*a2)[6] > v345);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              int v161 = (*a2)[19];
              *(unsigned char *)int v161 = 0;
              int v162 = *(_DWORD *)(*(void *)a1 + 48);
              if (v162 >= 1)
              {
                int v163 = 0;
                unsigned int v164 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v165 = v162 + 1;
                do
                {
                  int v166 = *v164;
                  v164 += 4;
                  v163 += v166;
                  *(unsigned char *)int v161 = v163;
                  --v165;
                }
                while (v165 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  int v629 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v749 = *((int *)v1047 - 1);
                    size_t v750 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    if ((*a2)[6])
                    {
                      LODWORD(v751) = 0;
                      int v752 = (*a2)[19];
                      unint64_t v753 = *(char **)(*(void *)a1 + 152);
                      do
                      {
                        if (v750) {
                          bzero(v752, v750);
                        }
                        if ((int)v749 >= 1)
                        {
                          int v754 = 0;
                          char v755 = v753;
                          do
                          {
                            if (v750)
                            {
                              for (juint64_t j = 0; jj != v750; ++jj)
                              {
                                char v757 = *v755;
                                v755 += 4;
                                *((unsigned char *)v752 + jj) += v757;
                              }
                            }
                            ++v754;
                          }
                          while (v754 != v749);
                        }
                        v753 += 4 * v750 * v749;
                        int v752 = (int *)((char *)v752 + v750);
                        unint64_t v751 = (int)v751 + (int)v750;
                      }
                      while (v751 < (unint64_t)(*a2)[6]);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v768 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v769 = 0;
                    uint64_t v770 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v771 = 0;
                      if ((v770 & 0x80000000) == 0)
                      {
                        uint64_t v772 = v770;
                        int v773 = v769;
                        do
                        {
                          ldiv_t v774 = ldiv(v773, v73[v772]);
                          int v773 = v774.quot;
                          v771 += v74[v772--] * v774.rem;
                        }
                        while (v772 != -1);
                      }
                      LODWORD(v1040) = v771;
                      LOBYTE(v1039) = 0;
                      uint64_t v1052 = 0;
                      uint64_t v775 = operator new(0x28uLL);
                      *uint64_t v775 = &unk_27062F178;
                      v775[1] = &__b;
                      v775[2] = &v1039;
                      v775[3] = &__len;
                      v775[4] = &v1040;
                      uint64_t v1052 = v775;
                      uint64_t v1060 = 0;
                      uint64_t v776 = operator new(0x28uLL);
                      *uint64_t v776 = &unk_27062B578;
                      v776[1] = &v1046;
                      v776[2] = &v1048;
                      v776[3] = v1059;
                      v776[4] = v1051;
                      unsigned __int8 v1055 = v776;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *(unsigned char *)uint64_t v768 = v1039;
                      uint64_t v768 = (int *)((char *)v768 + 1);
                      ++v769;
                    }
                    while ((unint64_t)(*a2)[6] > v769);
                  }
                  goto LABEL_1072;
                case 4:
                  int v629 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v629 - 1);
              size_t v758 = *((void *)v1049 - 1);
              char v1047 = v629 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v758;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              uint64_t v759 = (*a2)[6];
              if (v1047 == v1046)
              {
                if (v759)
                {
                  int v934 = 0;
                  uint64_t v935 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  do
                  {
                    uint64_t v936 = 0;
                    if ((v935 & 0x80000000) != 0)
                    {
                      int v939 = a2;
                    }
                    else
                    {
                      uint64_t v937 = v935;
                      int v938 = v934;
                      int v939 = a2;
                      do
                      {
                        ldiv_t v940 = ldiv(v938, v73[v937]);
                        int v938 = v940.quot;
                        v936 += v74[v937--] * v940.rem;
                      }
                      while (v937 != -1);
                    }
                    int v941 = __b;
                    if (__len)
                    {
                      bzero(__b, __len);
                      size_t v942 = __len;
                      int v941 = __b;
                    }
                    else
                    {
                      size_t v942 = 0;
                    }
                    int v943 = v1039;
                    if (v1039 >= 1)
                    {
                      int v944 = 0;
                      uint64_t v945 = &v1040[(int)v936];
                      do
                      {
                        size_t v946 = v942;
                        for (kuint64_t k = v941; v946; --v946)
                        {
                          char v948 = *(unsigned char *)v945++;
                          *kk++ += v948;
                        }
                        ++v944;
                      }
                      while (v944 != v943);
                      size_t v942 = __len;
                      int v941 = __b;
                    }
                    __b = &v941[v942];
                    v934 += v942;
                  }
                  while ((unint64_t)(*v939)[6] > v934);
                }
              }
              else if (v759)
              {
                int v760 = 0;
                uint64_t v761 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v762 = 0;
                  if ((v761 & 0x80000000) == 0)
                  {
                    uint64_t v763 = v761;
                    int v764 = v760;
                    do
                    {
                      ldiv_t v765 = ldiv(v764, v73[v763]);
                      int v764 = v765.quot;
                      v762 += v74[v763--] * v765.rem;
                    }
                    while (v763 != -1);
                  }
                  int v1037 = v762;
                  if (__len) {
                    bzero(__b, __len);
                  }
                  uint64_t v1052 = 0;
                  unint64_t v766 = operator new(0x38uLL);
                  *unint64_t v766 = &unk_27062F0F8;
                  v766[1] = &v1050;
                  v766[2] = &v1040;
                  v766[3] = &v1037;
                  v766[4] = &__b;
                  v766[5] = &v1039;
                  v766[6] = &__len;
                  uint64_t v1052 = v766;
                  uint64_t v1060 = 0;
                  unint64_t v767 = operator new(0x28uLL);
                  *unint64_t v767 = &unk_27062B578;
                  v767[1] = &v1046;
                  v767[2] = &v1048;
                  v767[3] = v1059;
                  v767[4] = v1051;
                  unsigned __int8 v1055 = v767;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + __len;
                  v760 += __len;
                }
                while ((unint64_t)(*a2)[6] > v760);
              }
              goto LABEL_1072;
            }
            unint64_t v344 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v344 - 1);
          char v1047 = v344 - 4;
          v1049 -= 8;
          size_t v353 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v353;
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v354 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v354)
            {
              unint64_t v648 = 0;
              uint64_t v649 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v650 = 0;
                if ((v649 & 0x80000000) == 0)
                {
                  uint64_t v651 = v649;
                  int v652 = v648;
                  do
                  {
                    ldiv_t v653 = ldiv(v652, v73[v651]);
                    int v652 = v653.quot;
                    v650 += v74[v651--] * v653.rem;
                  }
                  while (v651 != -1);
                }
                *(unsigned char *)uint64_t v1040 = 0;
                int v654 = v1040;
                if ((int)__b >= 1)
                {
                  unsigned int v655 = (unsigned __int8 *)(__len + 4 * (int)v650);
                  int v656 = *(unsigned __int8 *)v1040;
                  unsigned int v657 = __b + 1;
                  do
                  {
                    int v658 = *v655;
                    v655 += 4;
                    v656 += v658;
                    *(unsigned char *)int v654 = v656;
                    --v657;
                  }
                  while (v657 > 1);
                  int v654 = v1040;
                }
                ++v648;
                uint64_t v1040 = (int *)((char *)v654 + 1);
              }
              while ((unint64_t)(*a2)[6] > v648);
            }
          }
          else if (v354)
          {
            unint64_t v355 = 0;
            uint64_t v356 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v357 = 0;
              if ((v356 & 0x80000000) == 0)
              {
                uint64_t v358 = v356;
                int v359 = v355;
                do
                {
                  ldiv_t v360 = ldiv(v359, v73[v358]);
                  int v359 = v360.quot;
                  v357 += v74[v358--] * v360.rem;
                }
                while (v358 != -1);
              }
              int v1039 = v357;
              *(unsigned char *)uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              uint64_t v361 = operator new(0x30uLL);
              *uint64_t v361 = &unk_27062F078;
              v361[1] = &v1037;
              v361[2] = &__len;
              v361[3] = &v1039;
              v361[4] = &v1040;
              v361[5] = &__b;
              uint64_t v1052 = v361;
              uint64_t v1060 = 0;
              uint64_t v362 = operator new(0x28uLL);
              *uint64_t v362 = &unk_27062B578;
              v362[1] = &v1046;
              v362[2] = &v1048;
              v362[3] = v1059;
              v362[4] = v1051;
              unsigned __int8 v1055 = v362;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v355;
              uint64_t v1040 = (int *)((char *)v1040 + 1);
            }
            while ((unint64_t)(*a2)[6] > v355);
          }
          goto LABEL_1072;
        case 2:
          int v167 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v167, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            int v363 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              unsigned int v364 = (*a2)[6];
              if (v364)
              {
                uint64_t v365 = 0;
                uint64_t v366 = *(int *)v1046;
                size_t v367 = (*a2)[19];
                int v368 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *size_t v367 = 0;
                  if ((int)v366 >= 1)
                  {
                    int v369 = 0;
                    unsigned int v370 = v366 + 1;
                    int v371 = v368;
                    do
                    {
                      int v372 = *v371++;
                      v369 += v372;
                      *size_t v367 = v369;
                      --v370;
                    }
                    while (v370 > 1);
                  }
                  uint64_t v365 = (int *)((char *)v365 + 1);
                  ++v367;
                  v368 += v366;
                }
                while (v365 != v364);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              int v168 = (*a2)[19];
              *int v168 = 0;
              int v169 = *(_DWORD *)(*(void *)a1 + 48);
              if (v169 >= 1)
              {
                int v170 = 0;
                unsigned int v171 = *(int **)(*(void *)a1 + 152);
                unsigned int v172 = v169 + 1;
                do
                {
                  int v173 = *v171++;
                  v170 += v173;
                  *int v168 = v170;
                  --v172;
                }
                while (v172 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  ldiv_t v630 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v777 = *((int *)v1047 - 1);
                    uint64_t v778 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    ldiv_t v779 = (*a2)[6];
                    if (v779)
                    {
                      LODWORD(v780) = 0;
                      int v781 = (*a2)[19];
                      unint64_t v782 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v778) {
                          bzero(v781, 4 * v778);
                        }
                        if ((int)v777 >= 1)
                        {
                          int v783 = 0;
                          int v784 = v782;
                          do
                          {
                            if (v778)
                            {
                              for (muint64_t m = 0; mm != v778; ++mm)
                              {
                                int v786 = *v784++;
                                v781[mm] += v786;
                              }
                            }
                            ++v783;
                          }
                          while (v783 != v777);
                        }
                        v782 += v778 * v777;
                        v781 += v778;
                        unint64_t v780 = (int)v780 + (int)v778;
                      }
                      while (v780 < (unint64_t)v779);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v797 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v798 = 0;
                    uint64_t v799 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v800 = 0;
                      if ((v799 & 0x80000000) == 0)
                      {
                        uint64_t v801 = v799;
                        int v802 = v798;
                        do
                        {
                          ldiv_t v803 = ldiv(v802, v73[v801]);
                          int v802 = v803.quot;
                          v800 += v74[v801--] * v803.rem;
                        }
                        while (v801 != -1);
                      }
                      LODWORD(v1040) = v800;
                      LODWORD(__b) = 0;
                      uint64_t v1052 = 0;
                      uint64_t v804 = operator new(0x28uLL);
                      void *v804 = &unk_27062F2F8;
                      v804[1] = &v1039;
                      v804[2] = &__b;
                      v804[3] = &__len;
                      v804[4] = &v1040;
                      uint64_t v1052 = v804;
                      uint64_t v1060 = 0;
                      size_t v805 = operator new(0x28uLL);
                      *size_t v805 = &unk_27062B578;
                      v805[1] = &v1046;
                      v805[2] = &v1048;
                      v805[3] = v1059;
                      v805[4] = v1051;
                      unsigned __int8 v1055 = v805;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *v797++ = (int)__b;
                      ++v798;
                    }
                    while ((unint64_t)(*a2)[6] > v798);
                  }
                  goto LABEL_1072;
                case 4:
                  ldiv_t v630 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v630 - 1);
              size_t v787 = *((void *)v1049 - 1);
              char v1047 = v630 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v787;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              unint64_t v788 = (unint64_t)(*a2)[6];
              if (v1047 == v1046)
              {
                if (v788)
                {
                  int v949 = 0;
                  size_t v950 = (char *)__b;
                  uint64_t v951 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  size_t v952 = __len;
                  unint64_t v1033 = v1040;
                  size_t v953 = 4 * __len;
                  do
                  {
                    uint64_t v954 = 0;
                    if ((v951 & 0x80000000) == 0)
                    {
                      uint64_t v955 = v951;
                      int v956 = v949;
                      do
                      {
                        ldiv_t v957 = ldiv(v956, v73[v955]);
                        int v956 = v957.quot;
                        v954 += v74[v955--] * v957.rem;
                      }
                      while (v955 != -1);
                    }
                    if (v952) {
                      bzero(v950, v953);
                    }
                    int v958 = v1039;
                    if (v1039 >= 1)
                    {
                      int v959 = 0;
                      int v960 = &v1033[(int)v954];
                      do
                      {
                        if (v952)
                        {
                          for (nuint64_t n = 0; nn != v952; ++nn)
                          {
                            int v962 = *v960++;
                            *(_DWORD *)&v950[4 * nn] += v962;
                          }
                        }
                        ++v959;
                      }
                      while (v959 != v958);
                    }
                    v950 += v953;
                    v949 += v952;
                  }
                  while (v788 > v949);
                }
              }
              else if (v788)
              {
                int v789 = 0;
                uint64_t v790 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v791 = 0;
                  if ((v790 & 0x80000000) == 0)
                  {
                    uint64_t v792 = v790;
                    int v793 = v789;
                    do
                    {
                      ldiv_t v794 = ldiv(v793, v73[v792]);
                      int v793 = v794.quot;
                      v791 += v74[v792--] * v794.rem;
                    }
                    while (v792 != -1);
                  }
                  int v1037 = v791;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  uint64_t v1052 = 0;
                  int v795 = operator new(0x38uLL);
                  *int v795 = &unk_27062F278;
                  v795[1] = &v1050;
                  v795[2] = &v1040;
                  v795[3] = &v1037;
                  v795[4] = &__b;
                  v795[5] = &v1039;
                  v795[6] = &__len;
                  uint64_t v1052 = v795;
                  uint64_t v1060 = 0;
                  unint64_t v796 = operator new(0x28uLL);
                  *unint64_t v796 = &unk_27062B578;
                  v796[1] = &v1046;
                  v796[2] = &v1048;
                  v796[3] = v1059;
                  v796[4] = v1051;
                  unsigned __int8 v1055 = v796;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + 4 * __len;
                  v789 += __len;
                }
                while ((unint64_t)(*a2)[6] > v789);
              }
              goto LABEL_1072;
            }
            int v363 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v363 - 1);
          char v1047 = v363 - 4;
          v1049 -= 8;
          size_t v373 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v373;
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v374 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v374)
            {
              size_t v659 = 0;
              uint64_t v660 = v1040;
              size_t v661 = __len;
              uint64_t v662 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v663 = 0;
                if ((v662 & 0x80000000) == 0)
                {
                  uint64_t v664 = v662;
                  int v665 = (int)v659;
                  do
                  {
                    ldiv_t v666 = ldiv(v665, v73[v664]);
                    int v665 = v666.quot;
                    v663 += v74[v664--] * v666.rem;
                  }
                  while (v664 != -1);
                }
                int *v660 = 0;
                if ((int)__b >= 1)
                {
                  int v667 = 0;
                  int v668 = (int *)(v661 + 4 * (int)v663);
                  unsigned int v669 = __b + 1;
                  do
                  {
                    int v670 = *v668++;
                    v667 += v670;
                    int *v660 = v667;
                    --v669;
                  }
                  while (v669 > 1);
                }
                size_t v659 = (int *)((char *)v659 + 1);
                ++v660;
              }
              while (v659 != v374);
            }
          }
          else if (v374)
          {
            unint64_t v375 = 0;
            uint64_t v376 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v377 = 0;
              if ((v376 & 0x80000000) == 0)
              {
                uint64_t v378 = v376;
                int v379 = v375;
                do
                {
                  ldiv_t v380 = ldiv(v379, v73[v378]);
                  int v379 = v380.quot;
                  v377 += v74[v378--] * v380.rem;
                }
                while (v378 != -1);
              }
              int v1039 = v377;
              *uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              unint64_t v381 = operator new(0x30uLL);
              *unint64_t v381 = &unk_27062F1F8;
              v381[1] = &v1037;
              v381[2] = &__len;
              v381[3] = &v1039;
              v381[4] = &v1040;
              v381[5] = &__b;
              uint64_t v1052 = v381;
              uint64_t v1060 = 0;
              int v382 = operator new(0x28uLL);
              *int v382 = &unk_27062B578;
              v382[1] = &v1046;
              v382[2] = &v1048;
              v382[3] = v1059;
              v382[4] = v1051;
              unsigned __int8 v1055 = v382;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v375;
              ++v1040;
            }
            while ((unint64_t)(*a2)[6] > v375);
          }
          goto LABEL_1072;
        case 3:
          int v174 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v174, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            unint64_t v383 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              if ((*a2)[6])
              {
                unint64_t v384 = 0;
                uint64_t v385 = *(int *)v1046;
                size_t v386 = (*a2)[19];
                int v387 = *(unsigned __int8 **)(*(void *)a1 + 152);
                do
                {
                  *(unsigned char *)size_t v386 = 0;
                  if ((int)v385 >= 1)
                  {
                    int v388 = 0;
                    unsigned int v389 = v385 + 1;
                    int v390 = v387;
                    do
                    {
                      int v391 = *v390;
                      v390 += 4;
                      v388 += v391;
                      *(unsigned char *)size_t v386 = v388;
                      --v389;
                    }
                    while (v389 > 1);
                  }
                  ++v384;
                  size_t v386 = (int *)((char *)v386 + 1);
                  v387 += 4 * v385;
                }
                while ((unint64_t)(*a2)[6] > v384);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              int v175 = (*a2)[19];
              *(unsigned char *)int v175 = 0;
              int v176 = *(_DWORD *)(*(void *)a1 + 48);
              if (v176 >= 1)
              {
                int v177 = 0;
                unsigned int v178 = *(unsigned __int8 **)(*(void *)a1 + 152);
                unsigned int v179 = v176 + 1;
                do
                {
                  int v180 = *v178;
                  v178 += 4;
                  v177 += v180;
                  *(unsigned char *)int v175 = v177;
                  --v179;
                }
                while (v179 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  BOOL v631 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v806 = *((int *)v1047 - 1);
                    size_t v807 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    if ((*a2)[6])
                    {
                      LODWORD(v808) = 0;
                      int v809 = (*a2)[19];
                      uint64_t v810 = *(char **)(*(void *)a1 + 152);
                      do
                      {
                        if (v807) {
                          bzero(v809, v807);
                        }
                        if ((int)v806 >= 1)
                        {
                          int v811 = 0;
                          char v812 = v810;
                          do
                          {
                            if (v807)
                            {
                              for (uint64_t i1 = 0; i1 != v807; ++i1)
                              {
                                char v814 = *v812;
                                v812 += 4;
                                *((unsigned char *)v809 + i1) += v814;
                              }
                            }
                            ++v811;
                          }
                          while (v811 != v806);
                        }
                        v810 += 4 * v807 * v806;
                        int v809 = (int *)((char *)v809 + v807);
                        unint64_t v808 = (int)v808 + (int)v807;
                      }
                      while (v808 < (unint64_t)(*a2)[6]);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v825 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v826 = 0;
                    uint64_t v827 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v828 = 0;
                      if ((v827 & 0x80000000) == 0)
                      {
                        uint64_t v829 = v827;
                        int v830 = v826;
                        do
                        {
                          ldiv_t v831 = ldiv(v830, v73[v829]);
                          int v830 = v831.quot;
                          v828 += v74[v829--] * v831.rem;
                        }
                        while (v829 != -1);
                      }
                      LODWORD(v1040) = v828;
                      LOBYTE(v1039) = 0;
                      uint64_t v1052 = 0;
                      uint64_t v832 = operator new(0x28uLL);
                      *uint64_t v832 = &unk_27062F478;
                      v832[1] = &__b;
                      v832[2] = &v1039;
                      v832[3] = &__len;
                      v832[4] = &v1040;
                      uint64_t v1052 = v832;
                      uint64_t v1060 = 0;
                      uint64_t v833 = operator new(0x28uLL);
                      *uint64_t v833 = &unk_27062B578;
                      v833[1] = &v1046;
                      v833[2] = &v1048;
                      v833[3] = v1059;
                      v833[4] = v1051;
                      unsigned __int8 v1055 = v833;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *(unsigned char *)uint64_t v825 = v1039;
                      uint64_t v825 = (int *)((char *)v825 + 1);
                      ++v826;
                    }
                    while ((unint64_t)(*a2)[6] > v826);
                  }
                  goto LABEL_1072;
                case 4:
                  BOOL v631 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v631 - 1);
              size_t v815 = *((void *)v1049 - 1);
              char v1047 = v631 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v815;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              uint64_t v816 = (*a2)[6];
              if (v1047 == v1046)
              {
                if (v816)
                {
                  int v963 = 0;
                  uint64_t v964 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  do
                  {
                    uint64_t v965 = 0;
                    if ((v964 & 0x80000000) != 0)
                    {
                      int v968 = a2;
                    }
                    else
                    {
                      uint64_t v966 = v964;
                      int v967 = v963;
                      int v968 = a2;
                      do
                      {
                        ldiv_t v969 = ldiv(v967, v73[v966]);
                        int v967 = v969.quot;
                        v965 += v74[v966--] * v969.rem;
                      }
                      while (v966 != -1);
                    }
                    int v970 = __b;
                    if (__len)
                    {
                      bzero(__b, __len);
                      size_t v971 = __len;
                      int v970 = __b;
                    }
                    else
                    {
                      size_t v971 = 0;
                    }
                    int v972 = v1039;
                    if (v1039 >= 1)
                    {
                      int v973 = 0;
                      int v974 = &v1040[(int)v965];
                      do
                      {
                        size_t v975 = v971;
                        for (uint64_t i2 = v970; v975; --v975)
                        {
                          char v977 = *(unsigned char *)v974++;
                          *i2++ += v977;
                        }
                        ++v973;
                      }
                      while (v973 != v972);
                      size_t v971 = __len;
                      int v970 = __b;
                    }
                    __b = &v970[v971];
                    v963 += v971;
                  }
                  while ((unint64_t)(*v968)[6] > v963);
                }
              }
              else if (v816)
              {
                int v817 = 0;
                uint64_t v818 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v819 = 0;
                  if ((v818 & 0x80000000) == 0)
                  {
                    uint64_t v820 = v818;
                    int v821 = v817;
                    do
                    {
                      ldiv_t v822 = ldiv(v821, v73[v820]);
                      int v821 = v822.quot;
                      v819 += v74[v820--] * v822.rem;
                    }
                    while (v820 != -1);
                  }
                  int v1037 = v819;
                  if (__len) {
                    bzero(__b, __len);
                  }
                  uint64_t v1052 = 0;
                  int v823 = operator new(0x38uLL);
                  void *v823 = &unk_27062F3F8;
                  v823[1] = &v1050;
                  v823[2] = &v1040;
                  v823[3] = &v1037;
                  v823[4] = &__b;
                  v823[5] = &v1039;
                  v823[6] = &__len;
                  uint64_t v1052 = v823;
                  uint64_t v1060 = 0;
                  unint64_t v824 = operator new(0x28uLL);
                  *unint64_t v824 = &unk_27062B578;
                  v824[1] = &v1046;
                  v824[2] = &v1048;
                  v824[3] = v1059;
                  v824[4] = v1051;
                  unsigned __int8 v1055 = v824;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + __len;
                  v817 += __len;
                }
                while ((unint64_t)(*a2)[6] > v817);
              }
              goto LABEL_1072;
            }
            unint64_t v383 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v383 - 1);
          char v1047 = v383 - 4;
          v1049 -= 8;
          size_t v392 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v392;
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v393 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v393)
            {
              unint64_t v671 = 0;
              uint64_t v672 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v673 = 0;
                if ((v672 & 0x80000000) == 0)
                {
                  uint64_t v674 = v672;
                  int v675 = v671;
                  do
                  {
                    ldiv_t v676 = ldiv(v675, v73[v674]);
                    int v675 = v676.quot;
                    v673 += v74[v674--] * v676.rem;
                  }
                  while (v674 != -1);
                }
                *(unsigned char *)uint64_t v1040 = 0;
                int v677 = v1040;
                if ((int)__b >= 1)
                {
                  unsigned int v678 = (unsigned __int8 *)(__len + 4 * (int)v673);
                  int v679 = *(unsigned __int8 *)v1040;
                  unsigned int v680 = __b + 1;
                  do
                  {
                    int v681 = *v678;
                    v678 += 4;
                    v679 += v681;
                    *(unsigned char *)int v677 = v679;
                    --v680;
                  }
                  while (v680 > 1);
                  int v677 = v1040;
                }
                ++v671;
                uint64_t v1040 = (int *)((char *)v677 + 1);
              }
              while ((unint64_t)(*a2)[6] > v671);
            }
          }
          else if (v393)
          {
            unint64_t v394 = 0;
            uint64_t v395 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v396 = 0;
              if ((v395 & 0x80000000) == 0)
              {
                uint64_t v397 = v395;
                int v398 = v394;
                do
                {
                  ldiv_t v399 = ldiv(v398, v73[v397]);
                  int v398 = v399.quot;
                  v396 += v74[v397--] * v399.rem;
                }
                while (v397 != -1);
              }
              int v1039 = v396;
              *(unsigned char *)uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              int v400 = operator new(0x30uLL);
              *int v400 = &unk_27062F378;
              v400[1] = &v1037;
              v400[2] = &__len;
              v400[3] = &v1039;
              v400[4] = &v1040;
              v400[5] = &__b;
              uint64_t v1052 = v400;
              uint64_t v1060 = 0;
              unint64_t v401 = operator new(0x28uLL);
              *unint64_t v401 = &unk_27062B578;
              v401[1] = &v1046;
              v401[2] = &v1048;
              v401[3] = v1059;
              v401[4] = v1051;
              unsigned __int8 v1055 = v401;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v394;
              uint64_t v1040 = (int *)((char *)v1040 + 1);
            }
            while ((unint64_t)(*a2)[6] > v394);
          }
          goto LABEL_1072;
        case 4:
          char v181 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v181, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            int v402 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              unsigned int v403 = (*a2)[6];
              if (v403)
              {
                uint64_t v404 = 0;
                uint64_t v405 = *(int *)v1046;
                size_t v406 = (*a2)[19];
                int v407 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *size_t v406 = 0;
                  if ((int)v405 >= 1)
                  {
                    int v408 = 0;
                    unsigned int v409 = v405 + 1;
                    int v410 = v407;
                    do
                    {
                      int v411 = *v410++;
                      v408 += v411;
                      *size_t v406 = v408;
                      --v409;
                    }
                    while (v409 > 1);
                  }
                  uint64_t v404 = (int *)((char *)v404 + 1);
                  ++v406;
                  v407 += v405;
                }
                while (v404 != v403);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              int v182 = (*a2)[19];
              *int v182 = 0;
              int v183 = *(_DWORD *)(*(void *)a1 + 48);
              if (v183 >= 1)
              {
                int v184 = 0;
                unsigned int v185 = *(int **)(*(void *)a1 + 152);
                unsigned int v186 = v183 + 1;
                do
                {
                  int v187 = *v185++;
                  v184 += v187;
                  *int v182 = v184;
                  --v186;
                }
                while (v186 > 1);
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  int v632 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v834 = *((int *)v1047 - 1);
                    uint64_t v835 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    uint64_t v836 = (*a2)[6];
                    if (v836)
                    {
                      LODWORD(v837) = 0;
                      int v838 = (*a2)[19];
                      uint64_t v839 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v835) {
                          bzero(v838, 4 * v835);
                        }
                        if ((int)v834 >= 1)
                        {
                          int v840 = 0;
                          int v841 = v839;
                          do
                          {
                            if (v835)
                            {
                              for (uint64_t i3 = 0; i3 != v835; ++i3)
                              {
                                int v843 = *v841++;
                                v838[i3] += v843;
                              }
                            }
                            ++v840;
                          }
                          while (v840 != v834);
                        }
                        v839 += v835 * v834;
                        v838 += v835;
                        unint64_t v837 = (int)v837 + (int)v835;
                      }
                      while (v837 < (unint64_t)v836);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v854 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v855 = 0;
                    uint64_t v856 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v857 = 0;
                      if ((v856 & 0x80000000) == 0)
                      {
                        uint64_t v858 = v856;
                        int v859 = v855;
                        do
                        {
                          ldiv_t v860 = ldiv(v859, v73[v858]);
                          int v859 = v860.quot;
                          v857 += v74[v858--] * v860.rem;
                        }
                        while (v858 != -1);
                      }
                      LODWORD(v1040) = v857;
                      LODWORD(__b) = 0;
                      uint64_t v1052 = 0;
                      uint64_t v861 = operator new(0x28uLL);
                      *uint64_t v861 = &unk_27062F5F8;
                      v861[1] = &v1039;
                      v861[2] = &__b;
                      v861[3] = &__len;
                      v861[4] = &v1040;
                      uint64_t v1052 = v861;
                      uint64_t v1060 = 0;
                      unint64_t v862 = operator new(0x28uLL);
                      *unint64_t v862 = &unk_27062B578;
                      v862[1] = &v1046;
                      v862[2] = &v1048;
                      v862[3] = v1059;
                      v862[4] = v1051;
                      unsigned __int8 v1055 = v862;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *v854++ = (int)__b;
                      ++v855;
                    }
                    while ((unint64_t)(*a2)[6] > v855);
                  }
                  goto LABEL_1072;
                case 4:
                  int v632 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v632 - 1);
              size_t v844 = *((void *)v1049 - 1);
              char v1047 = v632 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v844;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              unint64_t v845 = (unint64_t)(*a2)[6];
              if (v1047 == v1046)
              {
                if (v845)
                {
                  int v978 = 0;
                  size_t v979 = (char *)__b;
                  uint64_t v980 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  size_t v981 = __len;
                  uint64_t v1034 = v1040;
                  size_t v982 = 4 * __len;
                  do
                  {
                    uint64_t v983 = 0;
                    if ((v980 & 0x80000000) == 0)
                    {
                      uint64_t v984 = v980;
                      int v985 = v978;
                      do
                      {
                        ldiv_t v986 = ldiv(v985, v73[v984]);
                        int v985 = v986.quot;
                        v983 += v74[v984--] * v986.rem;
                      }
                      while (v984 != -1);
                    }
                    if (v981) {
                      bzero(v979, v982);
                    }
                    int v987 = v1039;
                    if (v1039 >= 1)
                    {
                      int v988 = 0;
                      int v989 = &v1034[(int)v983];
                      do
                      {
                        if (v981)
                        {
                          for (uint64_t i4 = 0; i4 != v981; ++i4)
                          {
                            int v991 = *v989++;
                            *(_DWORD *)&v979[4 * i4] += v991;
                          }
                        }
                        ++v988;
                      }
                      while (v988 != v987);
                    }
                    v979 += v982;
                    v978 += v981;
                  }
                  while (v845 > v978);
                }
              }
              else if (v845)
              {
                int v846 = 0;
                uint64_t v847 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v848 = 0;
                  if ((v847 & 0x80000000) == 0)
                  {
                    uint64_t v849 = v847;
                    int v850 = v846;
                    do
                    {
                      ldiv_t v851 = ldiv(v850, v73[v849]);
                      int v850 = v851.quot;
                      v848 += v74[v849--] * v851.rem;
                    }
                    while (v849 != -1);
                  }
                  int v1037 = v848;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  uint64_t v1052 = 0;
                  ldiv_t v852 = operator new(0x38uLL);
                  *ldiv_t v852 = &unk_27062F578;
                  v852[1] = &v1050;
                  v852[2] = &v1040;
                  v852[3] = &v1037;
                  v852[4] = &__b;
                  v852[5] = &v1039;
                  v852[6] = &__len;
                  uint64_t v1052 = v852;
                  uint64_t v1060 = 0;
                  unint64_t v853 = operator new(0x28uLL);
                  *unint64_t v853 = &unk_27062B578;
                  v853[1] = &v1046;
                  v853[2] = &v1048;
                  v853[3] = v1059;
                  v853[4] = v1051;
                  unsigned __int8 v1055 = v853;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + 4 * __len;
                  v846 += __len;
                }
                while ((unint64_t)(*a2)[6] > v846);
              }
              goto LABEL_1072;
            }
            int v402 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v402 - 1);
          char v1047 = v402 - 4;
          v1049 -= 8;
          size_t v412 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v412;
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v413 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v413)
            {
              size_t v682 = 0;
              uint64_t v683 = v1040;
              size_t v684 = __len;
              uint64_t v685 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              do
              {
                uint64_t v686 = 0;
                if ((v685 & 0x80000000) == 0)
                {
                  uint64_t v687 = v685;
                  int v688 = (int)v682;
                  do
                  {
                    ldiv_t v689 = ldiv(v688, v73[v687]);
                    int v688 = v689.quot;
                    v686 += v74[v687--] * v689.rem;
                  }
                  while (v687 != -1);
                }
                *uint64_t v683 = 0;
                if ((int)__b >= 1)
                {
                  int v690 = 0;
                  int v691 = (int *)(v684 + 4 * (int)v686);
                  unsigned int v692 = __b + 1;
                  do
                  {
                    int v693 = *v691++;
                    v690 += v693;
                    *uint64_t v683 = v690;
                    --v692;
                  }
                  while (v692 > 1);
                }
                size_t v682 = (int *)((char *)v682 + 1);
                ++v683;
              }
              while (v682 != v413);
            }
          }
          else if (v413)
          {
            unint64_t v414 = 0;
            uint64_t v415 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v416 = 0;
              if ((v415 & 0x80000000) == 0)
              {
                uint64_t v417 = v415;
                int v418 = v414;
                do
                {
                  ldiv_t v419 = ldiv(v418, v73[v417]);
                  int v418 = v419.quot;
                  v416 += v74[v417--] * v419.rem;
                }
                while (v417 != -1);
              }
              int v1039 = v416;
              *uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              uint64_t v420 = operator new(0x30uLL);
              *uint64_t v420 = &unk_27062F4F8;
              v420[1] = &v1037;
              v420[2] = &__len;
              v420[3] = &v1039;
              v420[4] = &v1040;
              v420[5] = &__b;
              uint64_t v1052 = v420;
              uint64_t v1060 = 0;
              uint64_t v421 = operator new(0x28uLL);
              *uint64_t v421 = &unk_27062B578;
              v421[1] = &v1046;
              v421[2] = &v1048;
              v421[3] = v1059;
              v421[4] = v1051;
              unsigned __int8 v1055 = v421;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v414;
              ++v1040;
            }
            while ((unint64_t)(*a2)[6] > v414);
          }
          goto LABEL_1072;
        case 5:
          int v188 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v188, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            uint64_t v422 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              unsigned int v423 = (*a2)[6];
              if (v423)
              {
                uint64_t v424 = 0;
                uint64_t v425 = *(int *)v1046;
                unsigned int v426 = (*a2)[19];
                uint64_t v427 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *(void *)unsigned int v426 = 0;
                  if ((int)v425 >= 1)
                  {
                    uint64_t v428 = 0;
                    unsigned int v429 = v425 + 1;
                    unsigned int v430 = v427;
                    do
                    {
                      uint64_t v431 = *v430++;
                      v428 += v431;
                      --v429;
                    }
                    while (v429 > 1);
                    *(void *)unsigned int v426 = v428;
                  }
                  uint64_t v424 = (int *)((char *)v424 + 1);
                  v426 += 2;
                  v427 += v425;
                }
                while (v424 != v423);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              int v189 = (*a2)[19];
              *(void *)int v189 = 0;
              int v190 = *(_DWORD *)(*(void *)a1 + 48);
              if (v190 >= 1)
              {
                uint64_t v191 = 0;
                unsigned int v192 = *(int **)(*(void *)a1 + 152);
                unsigned int v193 = v190 + 1;
                do
                {
                  uint64_t v194 = *v192++;
                  v191 += v194;
                  --v193;
                }
                while (v193 > 1);
                *(void *)int v189 = v191;
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  unsigned int v633 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v872 = *((int *)v1047 - 1);
                    uint64_t v873 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    uint64_t v874 = (*a2)[6];
                    if (v874)
                    {
                      LODWORD(v875) = 0;
                      int v876 = (*a2)[19];
                      unint64_t v877 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v873) {
                          bzero(v876, 8 * v873);
                        }
                        if ((int)v872 >= 1)
                        {
                          int v878 = 0;
                          unsigned int v879 = v877;
                          do
                          {
                            if (v873)
                            {
                              for (uint64_t i5 = 0; i5 != v873; ++i5)
                              {
                                uint64_t v881 = *v879++;
                                *(void *)&v876[2 * i5] += v881;
                              }
                            }
                            ++v878;
                          }
                          while (v878 != v872);
                        }
                        v877 += v873 * v872;
                        v876 += 2 * v873;
                        unint64_t v875 = (int)v875 + (int)v873;
                      }
                      while (v875 < (unint64_t)v874);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v863 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v864 = 0;
                    uint64_t v865 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v866 = 0;
                      if ((v865 & 0x80000000) == 0)
                      {
                        uint64_t v867 = v865;
                        int v868 = v864;
                        do
                        {
                          ldiv_t v869 = ldiv(v868, v73[v867]);
                          int v868 = v869.quot;
                          v866 += v74[v867--] * v869.rem;
                        }
                        while (v867 != -1);
                      }
                      LODWORD(__b) = v866;
                      uint64_t v1040 = 0;
                      uint64_t v1052 = 0;
                      uint64_t v870 = operator new(0x28uLL);
                      *uint64_t v870 = &unk_27062F778;
                      v870[1] = &v1039;
                      v870[2] = &v1040;
                      v870[3] = &__len;
                      v870[4] = &__b;
                      uint64_t v1052 = v870;
                      uint64_t v1060 = 0;
                      uint64_t v871 = operator new(0x28uLL);
                      void *v871 = &unk_27062B578;
                      v871[1] = &v1046;
                      v871[2] = &v1048;
                      v871[3] = v1059;
                      v871[4] = v1051;
                      unsigned __int8 v1055 = v871;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *(void *)uint64_t v863 = v1040;
                      v863 += 2;
                      ++v864;
                    }
                    while ((unint64_t)(*a2)[6] > v864);
                  }
                  goto LABEL_1072;
                case 4:
                  unsigned int v633 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v633 - 1);
              size_t v882 = *((void *)v1049 - 1);
              char v1047 = v633 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v882;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              uint64_t v883 = (*a2)[6];
              if (v1047 == v1046)
              {
                if (v883)
                {
                  int v992 = 0;
                  size_t v993 = (char *)__b;
                  uint64_t v994 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  size_t v995 = __len;
                  int v1019 = v1040;
                  unint64_t v1035 = (unint64_t)(*a2)[6];
                  int v996 = v1039;
                  size_t v997 = 8 * __len;
                  do
                  {
                    uint64_t v998 = 0;
                    if ((v994 & 0x80000000) == 0)
                    {
                      uint64_t v999 = v994;
                      int v1000 = v992;
                      do
                      {
                        ldiv_t v1001 = ldiv(v1000, v73[v999]);
                        int v1000 = v1001.quot;
                        v998 += v74[v999--] * v1001.rem;
                      }
                      while (v999 != -1);
                    }
                    if (v995) {
                      bzero(v993, v997);
                    }
                    if (v996 >= 1)
                    {
                      int v1002 = 0;
                      unsigned int v1003 = &v1019[(int)v998];
                      do
                      {
                        if (v995)
                        {
                          for (uint64_t i6 = 0; i6 != v995; ++i6)
                          {
                            uint64_t v1005 = *v1003++;
                            *(void *)&v993[8 * i6] += v1005;
                          }
                        }
                        ++v1002;
                      }
                      while (v1002 != v996);
                    }
                    v993 += v997;
                    v992 += v995;
                  }
                  while (v1035 > v992);
                }
              }
              else if (v883)
              {
                int v884 = 0;
                uint64_t v885 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v886 = 0;
                  if ((v885 & 0x80000000) == 0)
                  {
                    uint64_t v887 = v885;
                    int v888 = v884;
                    do
                    {
                      ldiv_t v889 = ldiv(v888, v73[v887]);
                      int v888 = v889.quot;
                      v886 += v74[v887--] * v889.rem;
                    }
                    while (v887 != -1);
                  }
                  int v1037 = v886;
                  if (__len) {
                    bzero(__b, 8 * __len);
                  }
                  uint64_t v1052 = 0;
                  uint64_t v890 = operator new(0x38uLL);
                  void *v890 = &unk_27062F6F8;
                  v890[1] = &v1050;
                  v890[2] = &v1040;
                  v890[3] = &v1037;
                  v890[4] = &__b;
                  v890[5] = &v1039;
                  v890[6] = &__len;
                  uint64_t v1052 = v890;
                  uint64_t v1060 = 0;
                  uint64_t v891 = operator new(0x28uLL);
                  *uint64_t v891 = &unk_27062B578;
                  v891[1] = &v1046;
                  v891[2] = &v1048;
                  v891[3] = v1059;
                  v891[4] = v1051;
                  unsigned __int8 v1055 = v891;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + 8 * __len;
                  v884 += __len;
                }
                while ((unint64_t)(*a2)[6] > v884);
              }
              goto LABEL_1072;
            }
            uint64_t v422 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v422 - 1);
          char v1047 = v422 - 4;
          v1049 -= 8;
          size_t v536 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v536;
          size_t v73 = v1053;
          int v74 = v1055;
          uint64_t v537 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v537)
            {
              uint64_t v694 = 0;
              uint64_t v695 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              int v696 = v1040;
              size_t v1030 = __len;
              int v697 = (int)__b;
              int v698 = __b + 1;
              do
              {
                uint64_t v699 = 0;
                if ((v695 & 0x80000000) == 0)
                {
                  uint64_t v700 = v695;
                  int v701 = (int)v694;
                  do
                  {
                    ldiv_t v702 = ldiv(v701, v73[v700]);
                    int v701 = v702.quot;
                    v699 += v74[v700--] * v702.rem;
                  }
                  while (v700 != -1);
                }
                *(void *)int v696 = 0;
                if (v697 >= 1)
                {
                  uint64_t v703 = 0;
                  unsigned int v704 = (int *)(v1030 + 4 * (int)v699);
                  unsigned int v705 = v698;
                  do
                  {
                    uint64_t v706 = *v704++;
                    v703 += v706;
                    --v705;
                  }
                  while (v705 > 1);
                  *(void *)int v696 = v703;
                }
                uint64_t v694 = (int *)((char *)v694 + 1);
                v696 += 2;
              }
              while (v694 != v537);
            }
          }
          else if (v537)
          {
            unint64_t v538 = 0;
            uint64_t v539 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v540 = 0;
              if ((v539 & 0x80000000) == 0)
              {
                uint64_t v541 = v539;
                int v542 = v538;
                do
                {
                  ldiv_t v543 = ldiv(v542, v73[v541]);
                  int v542 = v543.quot;
                  v540 += v74[v541--] * v543.rem;
                }
                while (v541 != -1);
              }
              int v1039 = v540;
              *(void *)uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              size_t v544 = operator new(0x30uLL);
              *size_t v544 = &unk_27062F678;
              v544[1] = &v1037;
              v544[2] = &__len;
              v544[3] = &v1039;
              v544[4] = &v1040;
              v544[5] = &__b;
              uint64_t v1052 = v544;
              uint64_t v1060 = 0;
              uint64_t v545 = operator new(0x28uLL);
              *uint64_t v545 = &unk_27062B578;
              v545[1] = &v1046;
              v545[2] = &v1048;
              v545[3] = v1059;
              v545[4] = v1051;
              unsigned __int8 v1055 = v545;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v538;
              v1040 += 2;
            }
            while ((unint64_t)(*a2)[6] > v538);
          }
          goto LABEL_1072;
        case 6:
          float v195 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)v22[6] * BYTE4(v23)));
          int v1056 = &unk_27062AEC8;
          unsigned __int8 v1057 = mlx::core::allocator::free;
          uint64_t v1058 = &v1056;
          mlx::core::array::set_data(a2, (uint64_t)v195, (uint64_t)&v1056);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
          int v1043 = 0;
          uint64_t v1044 = 0;
          __n128 __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
          if (__p)
          {
            int v1043 = __p;
            operator delete(__p);
          }
          if (v1045 == 1)
          {
            float v432 = v1047;
            if (v1047 - (unsigned char *)v1046 == 4)
            {
              unsigned int v433 = (*a2)[6];
              if (v433)
              {
                uint64_t v434 = 0;
                uint64_t v435 = *(int *)v1046;
                uint64_t v436 = (float *)(*a2)[19];
                float v437 = *(int **)(*(void *)a1 + 152);
                do
                {
                  *uint64_t v436 = 0.0;
                  if ((int)v435 >= 1)
                  {
                    float v438 = 0.0;
                    unsigned int v439 = v435 + 1;
                    unsigned int v440 = v437;
                    do
                    {
                      int v441 = *v440++;
                      float v438 = v438 + (float)v441;
                      --v439;
                    }
                    while (v439 > 1);
                    *uint64_t v436 = v438;
                  }
                  uint64_t v434 = (int *)((char *)v434 + 1);
                  ++v436;
                  v437 += v435;
                }
                while (v434 != v433);
              }
              goto LABEL_1076;
            }
          }
          else
          {
            if (!v1045)
            {
              float v196 = (float *)(*a2)[19];
              *float v196 = 0.0;
              int v197 = *(_DWORD *)(*(void *)a1 + 48);
              if (v197 >= 1)
              {
                float v198 = *(int **)(*(void *)a1 + 152);
                unsigned int v199 = v197 + 1;
                float v200 = 0.0;
                do
                {
                  int v201 = *v198++;
                  float v200 = v200 + (float)v201;
                  --v199;
                }
                while (v199 > 1);
                *float v196 = v200;
              }
              goto LABEL_1076;
            }
            if ((v1045 & 0xFFFFFFFD) != 1)
            {
              switch(v1045)
              {
                case 2:
                  uint64_t v634 = v1047;
                  if (v1047 - (unsigned char *)v1046 == 4)
                  {
                    uint64_t v892 = *((int *)v1047 - 1);
                    uint64_t v893 = *((void *)v1049 - 1);
                    v1047 -= 4;
                    v1049 -= 8;
                    unint64_t v894 = (*a2)[6];
                    if (v894)
                    {
                      LODWORD(v895) = 0;
                      int v896 = (*a2)[19];
                      uint64_t v897 = *(int **)(*(void *)a1 + 152);
                      do
                      {
                        if (v893) {
                          bzero(v896, 4 * v893);
                        }
                        if ((int)v892 >= 1)
                        {
                          int v898 = 0;
                          unsigned int v899 = v897;
                          do
                          {
                            if (v893)
                            {
                              for (uint64_t i7 = 0; i7 != v893; ++i7)
                              {
                                int v901 = *v899++;
                                *(float *)&v896[i7] = *(float *)&v896[i7] + (float)v901;
                              }
                            }
                            ++v898;
                          }
                          while (v898 != v892);
                        }
                        v897 += v893 * v892;
                        v896 += v893;
                        unint64_t v895 = (int)v895 + (int)v893;
                      }
                      while (v895 < (unint64_t)v894);
                    }
                    goto LABEL_1076;
                  }
                  break;
                case 5:
                  __leuint64_t n = *(void *)(*(void *)a1 + 152);
                  uint64_t v912 = (*a2)[19];
                  size_t v73 = v1053;
                  int v74 = v1055;
                  if ((*a2)[6])
                  {
                    unint64_t v913 = 0;
                    uint64_t v914 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                    do
                    {
                      uint64_t v915 = 0;
                      if ((v914 & 0x80000000) == 0)
                      {
                        uint64_t v916 = v914;
                        int v917 = v913;
                        do
                        {
                          ldiv_t v918 = ldiv(v917, v73[v916]);
                          int v917 = v918.quot;
                          v915 += v74[v916--] * v918.rem;
                        }
                        while (v916 != -1);
                      }
                      LODWORD(v1040) = v915;
                      LODWORD(__b) = 0;
                      uint64_t v1052 = 0;
                      int v919 = operator new(0x28uLL);
                      *int v919 = &unk_27062F8F8;
                      v919[1] = &v1039;
                      v919[2] = &__b;
                      v919[3] = &__len;
                      v919[4] = &v1040;
                      uint64_t v1052 = v919;
                      uint64_t v1060 = 0;
                      ldiv_t v920 = operator new(0x28uLL);
                      *ldiv_t v920 = &unk_27062B578;
                      v920[1] = &v1046;
                      v920[2] = &v1048;
                      v920[3] = v1059;
                      v920[4] = v1051;
                      unsigned __int8 v1055 = v920;
                      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                      std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                      std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                      std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                      *v912++ = (int)__b;
                      ++v913;
                    }
                    while ((unint64_t)(*a2)[6] > v913);
                  }
                  goto LABEL_1072;
                case 4:
                  uint64_t v634 = v1047;
                  break;
                default:
                  goto LABEL_1076;
              }
              int v1039 = *((_DWORD *)v634 - 1);
              size_t v902 = *((void *)v1049 - 1);
              char v1047 = v634 - 4;
              v1049 -= 8;
              uint64_t v1040 = *(int **)(*(void *)a1 + 152);
              __leuint64_t n = v902;
              __b = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              unint64_t v903 = (unint64_t)(*a2)[6];
              if (v1047 == v1046)
              {
                if (v903)
                {
                  int v1006 = 0;
                  size_t v1007 = (char *)__b;
                  uint64_t v1008 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                  size_t v1009 = __len;
                  size_t v1020 = v1040;
                  uint64_t v1036 = v1008;
                  int v1010 = v1039;
                  size_t v1011 = 4 * __len;
                  do
                  {
                    uint64_t v1012 = 0;
                    if ((v1008 & 0x80000000) == 0)
                    {
                      int v1013 = v1006;
                      do
                      {
                        ldiv_t v1014 = ldiv(v1013, v73[v1008]);
                        int v1013 = v1014.quot;
                        v1012 += v74[v1008--] * v1014.rem;
                      }
                      while (v1008 != -1);
                    }
                    if (v1009) {
                      bzero(v1007, v1011);
                    }
                    uint64_t v1008 = v1036;
                    if (v1010 >= 1)
                    {
                      int v1015 = 0;
                      unsigned int v1016 = &v1020[(int)v1012];
                      do
                      {
                        if (v1009)
                        {
                          for (uint64_t i8 = 0; i8 != v1009; ++i8)
                          {
                            int v1018 = *v1016++;
                            *(float *)&v1007[4 * i8] = *(float *)&v1007[4 * i8] + (float)v1018;
                          }
                        }
                        ++v1015;
                      }
                      while (v1015 != v1010);
                    }
                    v1007 += v1011;
                    v1006 += v1009;
                  }
                  while (v903 > v1006);
                }
              }
              else if (v903)
              {
                int v904 = 0;
                uint64_t v905 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v906 = 0;
                  if ((v905 & 0x80000000) == 0)
                  {
                    uint64_t v907 = v905;
                    int v908 = v904;
                    do
                    {
                      ldiv_t v909 = ldiv(v908, v73[v907]);
                      int v908 = v909.quot;
                      v906 += v74[v907--] * v909.rem;
                    }
                    while (v907 != -1);
                  }
                  int v1037 = v906;
                  if (__len) {
                    bzero(__b, 4 * __len);
                  }
                  uint64_t v1052 = 0;
                  ldiv_t v910 = operator new(0x38uLL);
                  *ldiv_t v910 = &unk_27062F878;
                  v910[1] = &v1050;
                  v910[2] = &v1040;
                  v910[3] = &v1037;
                  v910[4] = &__b;
                  v910[5] = &v1039;
                  v910[6] = &__len;
                  uint64_t v1052 = v910;
                  uint64_t v1060 = 0;
                  unint64_t v911 = operator new(0x28uLL);
                  *unint64_t v911 = &unk_27062B578;
                  v911[1] = &v1046;
                  v911[2] = &v1048;
                  v911[3] = v1059;
                  v911[4] = v1051;
                  unsigned __int8 v1055 = v911;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  __b = (char *)__b + 4 * __len;
                  v904 += __len;
                }
                while ((unint64_t)(*a2)[6] > v904);
              }
              goto LABEL_1072;
            }
            float v432 = v1047;
          }
          LODWORD(__b) = *((_DWORD *)v432 - 1);
          char v1047 = v432 - 4;
          v1049 -= 8;
          size_t v546 = *(void *)(*(void *)a1 + 152);
          uint64_t v1040 = (*a2)[19];
          __leuint64_t n = v546;
          size_t v73 = v1053;
          int v74 = v1055;
          uint64_t v547 = (*a2)[6];
          if (v1047 == v1046)
          {
            if (v547)
            {
              uint64_t v707 = 0;
              uint64_t v708 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              int v709 = (float *)v1040;
              size_t v1031 = __len;
              int v710 = (int)__b;
              int v711 = __b + 1;
              do
              {
                uint64_t v712 = 0;
                if ((v708 & 0x80000000) == 0)
                {
                  uint64_t v713 = v708;
                  int v714 = (int)v707;
                  do
                  {
                    ldiv_t v715 = ldiv(v714, v73[v713]);
                    int v714 = v715.quot;
                    v712 += v74[v713--] * v715.rem;
                  }
                  while (v713 != -1);
                }
                *int v709 = 0.0;
                if (v710 >= 1)
                {
                  unsigned int v716 = (int *)(v1031 + 4 * (int)v712);
                  float v717 = 0.0;
                  unsigned int v718 = v711;
                  do
                  {
                    int v719 = *v716++;
                    float v717 = v717 + (float)v719;
                    --v718;
                  }
                  while (v718 > 1);
                  *int v709 = v717;
                }
                uint64_t v707 = (int *)((char *)v707 + 1);
                ++v709;
              }
              while (v707 != v547);
            }
          }
          else if (v547)
          {
            unint64_t v548 = 0;
            uint64_t v549 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v550 = 0;
              if ((v549 & 0x80000000) == 0)
              {
                uint64_t v551 = v549;
                int v552 = v548;
                do
                {
                  ldiv_t v553 = ldiv(v552, v73[v551]);
                  int v552 = v553.quot;
                  v550 += v74[v551--] * v553.rem;
                }
                while (v551 != -1);
              }
              int v1039 = v550;
              *uint64_t v1040 = 0;
              uint64_t v1052 = 0;
              int v554 = operator new(0x30uLL);
              *int v554 = &unk_27062F7F8;
              v554[1] = &v1037;
              v554[2] = &__len;
              v554[3] = &v1039;
              v554[4] = &v1040;
              v554[5] = &__b;
              uint64_t v1052 = v554;
              uint64_t v1060 = 0;
              uint64_t v555 = operator new(0x28uLL);
              *uint64_t v555 = &unk_27062B578;
              v555[1] = &v1046;
              v555[2] = &v1048;
              v555[3] = v1059;
              v555[4] = v1051;
              unsigned __int8 v1055 = v555;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              ++v548;
              ++v1040;
            }
            while ((unint64_t)(*a2)[6] > v548);
          }
          goto LABEL_1072;
        default:
          return;
      }
    case 3:
      unsigned int v36 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1056 = &unk_27062AEC8;
      unsigned __int8 v1057 = mlx::core::allocator::free;
      uint64_t v1058 = &v1056;
      mlx::core::array::set_data(a2, (uint64_t)v36, (uint64_t)&v1056);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
      int v1043 = 0;
      uint64_t v1044 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        int v1043 = __p;
        operator delete(__p);
      }
      if (v1045 == 1)
      {
        int v94 = v1047;
        if (v1047 - (unsigned char *)v1046 == 4)
        {
          uint64_t v95 = (*a2)[6];
          if (v95)
          {
            unint64_t v96 = 0;
            uint64_t v97 = *(int *)v1046;
            unint64_t v98 = (*a2)[19];
            char v99 = *(int **)(*(void *)a1 + 152);
            do
            {
              *unint64_t v98 = 1;
              if ((int)v97 >= 1)
              {
                int v100 = 1;
                unsigned int v101 = v97 + 1;
                int v102 = v99;
                do
                {
                  int v103 = *v102++;
                  v100 *= v103;
                  *unint64_t v98 = v100;
                  --v101;
                }
                while (v101 > 1);
              }
              unint64_t v96 = (int *)((char *)v96 + 1);
              ++v98;
              v99 += v97;
            }
            while (v96 != v95);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1045)
        {
          int v37 = (*a2)[19];
          int *v37 = 1;
          int v38 = *(_DWORD *)(*(void *)a1 + 48);
          if (v38 >= 1)
          {
            int v39 = *(int **)(*(void *)a1 + 152);
            unsigned int v40 = v38 + 1;
            int v41 = 1;
            do
            {
              int v42 = *v39++;
              v41 *= v42;
              int *v37 = v41;
              --v40;
            }
            while (v40 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1045 & 0xFFFFFFFD) != 1)
        {
          switch(v1045)
          {
            case 2:
              int v158 = v1047;
              if (v1047 - (unsigned char *)v1046 == 4)
              {
                uint64_t v484 = *((int *)v1047 - 1);
                uint64_t v485 = *((void *)v1049 - 1);
                v1047 -= 4;
                v1049 -= 8;
                int v486 = *a2;
                unint64_t v487 = (*a2)[6];
                if (v487)
                {
                  LODWORD(v488) = 0;
                  uint64_t v489 = v486[19];
                  int v490 = *(int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v485) {
                      memset_pattern16(v489, &unk_25704DBE0, 4 * v485);
                    }
                    if ((int)v484 >= 1)
                    {
                      int v491 = 0;
                      unint64_t v492 = v490;
                      do
                      {
                        if (v485)
                        {
                          for (uint64_t i9 = 0; i9 != v485; ++i9)
                          {
                            int v494 = *v492++;
                            v489[i9] *= v494;
                          }
                        }
                        ++v491;
                      }
                      while (v491 != v484);
                    }
                    v490 += v485 * v484;
                    v489 += v485;
                    unint64_t v488 = (int)v488 + (int)v485;
                  }
                  while (v488 < (unint64_t)v487);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              unint64_t v335 = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              if ((*a2)[6])
              {
                unint64_t v336 = 0;
                uint64_t v337 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v338 = 0;
                  if ((v337 & 0x80000000) == 0)
                  {
                    uint64_t v339 = v337;
                    int v340 = v336;
                    do
                    {
                      ldiv_t v341 = ldiv(v340, v73[v339]);
                      int v340 = v341.quot;
                      v338 += v74[v339--] * v341.rem;
                    }
                    while (v339 != -1);
                  }
                  LODWORD(v1040) = v338;
                  LODWORD(__b) = 1;
                  uint64_t v1052 = 0;
                  unint64_t v342 = operator new(0x28uLL);
                  *unint64_t v342 = &unk_27062FA78;
                  v342[1] = &v1039;
                  v342[2] = &__b;
                  v342[3] = &__len;
                  v342[4] = &v1040;
                  uint64_t v1052 = v342;
                  uint64_t v1060 = 0;
                  int v343 = operator new(0x28uLL);
                  *int v343 = &unk_27062B578;
                  v343[1] = &v1046;
                  v343[2] = &v1048;
                  v343[3] = v1059;
                  v343[4] = v1051;
                  unsigned __int8 v1055 = v343;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  *v335++ = (int)__b;
                  ++v336;
                }
                while ((unint64_t)(*a2)[6] > v336);
              }
              goto LABEL_1072;
            case 4:
              int v158 = v1047;
              break;
            default:
              goto LABEL_1076;
          }
          int v1039 = *((_DWORD *)v158 - 1);
          size_t v495 = *((void *)v1049 - 1);
          char v1047 = v158 - 4;
          v1049 -= 8;
          uint64_t v1040 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v495;
          __b = (*a2)[19];
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v496 = (unint64_t)(*a2)[6];
          if (v1047 == v1046)
          {
            if (v496)
            {
              int v599 = 0;
              size_t v600 = (char *)__b;
              uint64_t v601 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              size_t v602 = __len;
              size_t v1027 = v1040;
              size_t v603 = 4 * __len;
              do
              {
                uint64_t v604 = 0;
                if ((v601 & 0x80000000) == 0)
                {
                  uint64_t v605 = v601;
                  int v606 = v599;
                  do
                  {
                    ldiv_t v607 = ldiv(v606, v73[v605]);
                    int v606 = v607.quot;
                    v604 += v74[v605--] * v607.rem;
                  }
                  while (v605 != -1);
                }
                if (v602) {
                  memset_pattern16(v600, &unk_25704DBE0, v603);
                }
                int v608 = v1039;
                if (v1039 >= 1)
                {
                  int v609 = 0;
                  int v610 = &v1027[(int)v604];
                  do
                  {
                    if (v602)
                    {
                      for (uint64_t i10 = 0; i10 != v602; ++i10)
                      {
                        int v612 = *v610++;
                        *(_DWORD *)&v600[4 * i10] *= v612;
                      }
                    }
                    ++v609;
                  }
                  while (v609 != v608);
                }
                v600 += v603;
                v599 += v602;
              }
              while (v496 > v599);
            }
          }
          else if (v496)
          {
            int v497 = 0;
            uint64_t v498 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v499 = 0;
              if ((v498 & 0x80000000) == 0)
              {
                uint64_t v500 = v498;
                int v501 = v497;
                do
                {
                  ldiv_t v502 = ldiv(v501, v73[v500]);
                  int v501 = v502.quot;
                  v499 += v74[v500--] * v502.rem;
                }
                while (v500 != -1);
              }
              int v1037 = v499;
              if (__len) {
                memset_pattern16(__b, &unk_25704DBE0, 4 * __len);
              }
              uint64_t v1052 = 0;
              size_t v503 = operator new(0x38uLL);
              *size_t v503 = &unk_27062F9F8;
              v503[1] = &v1050;
              v503[2] = &v1040;
              v503[3] = &v1037;
              v503[4] = &__b;
              v503[5] = &v1039;
              v503[6] = &__len;
              uint64_t v1052 = v503;
              uint64_t v1060 = 0;
              uint64_t v504 = operator new(0x28uLL);
              *uint64_t v504 = &unk_27062B578;
              v504[1] = &v1046;
              v504[2] = &v1048;
              v504[3] = v1059;
              v504[4] = v1051;
              unsigned __int8 v1055 = v504;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              __b = (char *)__b + 4 * __len;
              v497 += __len;
            }
            while ((unint64_t)(*a2)[6] > v497);
          }
          goto LABEL_1072;
        }
        int v94 = v1047;
      }
      LODWORD(__b) = *((_DWORD *)v94 - 1);
      char v1047 = v94 - 4;
      v1049 -= 8;
      size_t v135 = *(void *)(*(void *)a1 + 152);
      uint64_t v1040 = (*a2)[19];
      __leuint64_t n = v135;
      size_t v73 = v1053;
      int v74 = v1055;
      unint64_t v136 = (*a2)[6];
      if (v1047 == v1046)
      {
        if (v136)
        {
          uint64_t v241 = 0;
          uint64_t v242 = v1040;
          size_t v243 = __len;
          uint64_t v244 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v245 = 0;
            if ((v244 & 0x80000000) == 0)
            {
              uint64_t v246 = v244;
              int v247 = (int)v241;
              do
              {
                ldiv_t v248 = ldiv(v247, v73[v246]);
                int v247 = v248.quot;
                v245 += v74[v246--] * v248.rem;
              }
              while (v246 != -1);
            }
            *uint64_t v242 = 1;
            if ((int)__b >= 1)
            {
              unsigned int v249 = (int *)(v243 + 4 * (int)v245);
              unsigned int v250 = __b + 1;
              int v251 = 1;
              do
              {
                int v252 = *v249++;
                v251 *= v252;
                *uint64_t v242 = v251;
                --v250;
              }
              while (v250 > 1);
            }
            uint64_t v241 = (int *)((char *)v241 + 1);
            ++v242;
          }
          while (v241 != v136);
        }
      }
      else if (v136)
      {
        unint64_t v137 = 0;
        uint64_t v138 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
        do
        {
          uint64_t v139 = 0;
          if ((v138 & 0x80000000) == 0)
          {
            uint64_t v140 = v138;
            int v141 = v137;
            do
            {
              ldiv_t v142 = ldiv(v141, v73[v140]);
              int v141 = v142.quot;
              v139 += v74[v140--] * v142.rem;
            }
            while (v140 != -1);
          }
          int v1039 = v139;
          *uint64_t v1040 = 1;
          uint64_t v1052 = 0;
          size_t v143 = operator new(0x30uLL);
          *size_t v143 = &unk_27062F978;
          v143[1] = &v1037;
          v143[2] = &__len;
          v143[3] = &v1039;
          v143[4] = &v1040;
          v143[5] = &__b;
          uint64_t v1052 = v143;
          uint64_t v1060 = 0;
          size_t v144 = operator new(0x28uLL);
          *size_t v144 = &unk_27062B578;
          v144[1] = &v1046;
          v144[2] = &v1048;
          v144[3] = v1059;
          v144[4] = v1051;
          unsigned __int8 v1055 = v144;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
          std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
          ++v137;
          ++v1040;
        }
        while ((unint64_t)(*a2)[6] > v137);
      }
      goto LABEL_1072;
    case 4:
      int v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1056 = &unk_27062AEC8;
      unsigned __int8 v1057 = mlx::core::allocator::free;
      uint64_t v1058 = &v1056;
      mlx::core::array::set_data(a2, (uint64_t)v14, (uint64_t)&v1056);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
      int v1043 = 0;
      uint64_t v1044 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        int v1043 = __p;
        operator delete(__p);
      }
      if (v1045 == 1)
      {
        unsigned __int8 v51 = v1047;
        if (v1047 - (unsigned char *)v1046 == 4)
        {
          unsigned int v52 = (*a2)[6];
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v54 = *(int *)v1046;
            uint64_t v55 = (*a2)[19];
            unint64_t v56 = *(int **)(*(void *)a1 + 152);
            do
            {
              *uint64_t v55 = 0x7FFFFFFF;
              if ((int)v54 >= 1)
              {
                int v57 = 0x7FFFFFFF;
                unsigned int v58 = v54 + 1;
                unsigned int v59 = v56;
                do
                {
                  int v61 = *v59++;
                  int v60 = v61;
                  if (v57 >= v61) {
                    int v57 = v60;
                  }
                  *uint64_t v55 = v57;
                  --v58;
                }
                while (v58 > 1);
              }
              uint64_t v53 = (int *)((char *)v53 + 1);
              ++v55;
              v56 += v54;
            }
            while (v53 != v52);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1045)
        {
          int v15 = (*a2)[19];
          *int v15 = 0x7FFFFFFF;
          int v16 = *(_DWORD *)(*(void *)a1 + 48);
          if (v16 >= 1)
          {
            uint64_t v17 = *(int **)(*(void *)a1 + 152);
            unsigned int v18 = v16 + 1;
            int v19 = 0x7FFFFFFF;
            do
            {
              int v21 = *v17++;
              int v20 = v21;
              if (v19 >= v21) {
                int v19 = v20;
              }
              *int v15 = v19;
              --v18;
            }
            while (v18 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1045 & 0xFFFFFFFD) != 1)
        {
          switch(v1045)
          {
            case 2:
              uint64_t v155 = v1047;
              if (v1047 - (unsigned char *)v1046 == 4)
              {
                uint64_t v286 = *((int *)v1047 - 1);
                uint64_t v287 = *((void *)v1049 - 1);
                v1047 -= 4;
                v1049 -= 8;
                int v288 = *a2;
                unint64_t v289 = (*a2)[6];
                if (v289)
                {
                  LODWORD(v290) = 0;
                  unsigned int v291 = v288[19];
                  int v292 = *(int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v287) {
                      memset_pattern16(v291, &unk_25704DC20, 4 * v287);
                    }
                    if ((int)v286 >= 1)
                    {
                      int v293 = 0;
                      int v294 = v292;
                      do
                      {
                        if (v287)
                        {
                          for (uint64_t i11 = 0; i11 != v287; ++i11)
                          {
                            int v297 = *v294++;
                            int v296 = v297;
                            if (v291[i11] < v297) {
                              int v296 = v291[i11];
                            }
                            v291[i11] = v296;
                          }
                        }
                        ++v293;
                      }
                      while (v293 != v286);
                    }
                    v292 += v287 * v286;
                    v291 += v287;
                    unint64_t v290 = (int)v290 + (int)v287;
                  }
                  while (v290 < (unint64_t)v289);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              unint64_t v308 = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              if ((*a2)[6])
              {
                unint64_t v309 = 0;
                uint64_t v310 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v311 = 0;
                  if ((v310 & 0x80000000) == 0)
                  {
                    uint64_t v312 = v310;
                    int v313 = v309;
                    do
                    {
                      ldiv_t v314 = ldiv(v313, v73[v312]);
                      int v313 = v314.quot;
                      v311 += v74[v312--] * v314.rem;
                    }
                    while (v312 != -1);
                  }
                  LODWORD(v1040) = v311;
                  LODWORD(__b) = 0x7FFFFFFF;
                  uint64_t v1052 = 0;
                  uint64_t v315 = operator new(0x28uLL);
                  void *v315 = &unk_27062FD78;
                  v315[1] = &v1039;
                  v315[2] = &__b;
                  v315[3] = &__len;
                  v315[4] = &v1040;
                  uint64_t v1052 = v315;
                  uint64_t v1060 = 0;
                  int v316 = operator new(0x28uLL);
                  void *v316 = &unk_27062B578;
                  v316[1] = &v1046;
                  v316[2] = &v1048;
                  v316[3] = v1059;
                  v316[4] = v1051;
                  unsigned __int8 v1055 = v316;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  *v308++ = (int)__b;
                  ++v309;
                }
                while ((unint64_t)(*a2)[6] > v309);
              }
              goto LABEL_1072;
            case 4:
              uint64_t v155 = v1047;
              break;
            default:
              goto LABEL_1076;
          }
          int v1039 = *((_DWORD *)v155 - 1);
          size_t v298 = *((void *)v1049 - 1);
          char v1047 = v155 - 4;
          v1049 -= 8;
          uint64_t v1040 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v298;
          __b = (*a2)[19];
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v299 = (unint64_t)(*a2)[6];
          if (v1047 == v1046)
          {
            if (v299)
            {
              int v556 = 0;
              size_t v557 = (char *)__b;
              uint64_t v558 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              size_t v559 = __len;
              uint64_t v1024 = v1040;
              size_t v560 = 4 * __len;
              do
              {
                uint64_t v561 = 0;
                if ((v558 & 0x80000000) == 0)
                {
                  uint64_t v562 = v558;
                  int v563 = v556;
                  do
                  {
                    ldiv_t v564 = ldiv(v563, v73[v562]);
                    int v563 = v564.quot;
                    v561 += v74[v562--] * v564.rem;
                  }
                  while (v562 != -1);
                }
                if (v559) {
                  memset_pattern16(v557, &unk_25704DC20, v560);
                }
                int v565 = v1039;
                if (v1039 >= 1)
                {
                  int v566 = 0;
                  unsigned int v567 = &v1024[(int)v561];
                  do
                  {
                    if (v559)
                    {
                      for (uint64_t i12 = 0; i12 != v559; ++i12)
                      {
                        int v570 = *v567++;
                        int v569 = v570;
                        if (*(_DWORD *)&v557[4 * i12] < v570) {
                          int v569 = *(_DWORD *)&v557[4 * i12];
                        }
                        *(_DWORD *)&v557[4 * i12] = v569;
                      }
                    }
                    ++v566;
                  }
                  while (v566 != v565);
                }
                v557 += v560;
                v556 += v559;
              }
              while (v299 > v556);
            }
          }
          else if (v299)
          {
            int v300 = 0;
            uint64_t v301 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v302 = 0;
              if ((v301 & 0x80000000) == 0)
              {
                uint64_t v303 = v301;
                int v304 = v300;
                do
                {
                  ldiv_t v305 = ldiv(v304, v73[v303]);
                  int v304 = v305.quot;
                  v302 += v74[v303--] * v305.rem;
                }
                while (v303 != -1);
              }
              int v1037 = v302;
              if (__len) {
                memset_pattern16(__b, &unk_25704DC20, 4 * __len);
              }
              uint64_t v1052 = 0;
              uint64_t v306 = operator new(0x38uLL);
              *uint64_t v306 = &unk_27062FCF8;
              v306[1] = &v1050;
              v306[2] = &v1040;
              v306[3] = &v1037;
              v306[4] = &__b;
              v306[5] = &v1039;
              v306[6] = &__len;
              uint64_t v1052 = v306;
              uint64_t v1060 = 0;
              int v307 = operator new(0x28uLL);
              void *v307 = &unk_27062B578;
              v307[1] = &v1046;
              v307[2] = &v1048;
              v307[3] = v1059;
              v307[4] = v1051;
              unsigned __int8 v1055 = v307;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              __b = (char *)__b + 4 * __len;
              v300 += __len;
            }
            while ((unint64_t)(*a2)[6] > v300);
          }
          goto LABEL_1072;
        }
        unsigned __int8 v51 = v1047;
      }
      LODWORD(__b) = *((_DWORD *)v51 - 1);
      char v1047 = v51 - 4;
      v1049 -= 8;
      size_t v72 = *(void *)(*(void *)a1 + 152);
      uint64_t v1040 = (*a2)[19];
      __leuint64_t n = v72;
      size_t v73 = v1053;
      int v74 = v1055;
      unint64_t v75 = (*a2)[6];
      if (v1047 == v1046)
      {
        if (v75)
        {
          unint64_t v202 = 0;
          uint64_t v203 = v1040;
          size_t v204 = __len;
          uint64_t v205 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v206 = 0;
            if ((v205 & 0x80000000) == 0)
            {
              uint64_t v207 = v205;
              int v208 = (int)v202;
              do
              {
                ldiv_t v209 = ldiv(v208, v73[v207]);
                int v208 = v209.quot;
                v206 += v74[v207--] * v209.rem;
              }
              while (v207 != -1);
            }
            *uint64_t v203 = 0x7FFFFFFF;
            if ((int)__b >= 1)
            {
              unsigned __int8 v210 = (int *)(v204 + 4 * (int)v206);
              unsigned int v211 = __b + 1;
              int v212 = 0x7FFFFFFF;
              do
              {
                int v214 = *v210++;
                int v213 = v214;
                if (v212 >= v214) {
                  int v212 = v213;
                }
                *uint64_t v203 = v212;
                --v211;
              }
              while (v211 > 1);
            }
            unint64_t v202 = (int *)((char *)v202 + 1);
            ++v203;
          }
          while (v202 != v75);
        }
      }
      else if (v75)
      {
        unint64_t v76 = 0;
        uint64_t v77 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
        do
        {
          uint64_t v78 = 0;
          if ((v77 & 0x80000000) == 0)
          {
            uint64_t v79 = v77;
            int v80 = v76;
            do
            {
              ldiv_t v81 = ldiv(v80, v73[v79]);
              int v80 = v81.quot;
              v78 += v74[v79--] * v81.rem;
            }
            while (v79 != -1);
          }
          int v1039 = v78;
          *uint64_t v1040 = 0x7FFFFFFF;
          uint64_t v1052 = 0;
          ldiv_t v82 = operator new(0x30uLL);
          *ldiv_t v82 = &unk_27062FC78;
          v82[1] = &v1037;
          v82[2] = &__len;
          v82[3] = &v1039;
          v82[4] = &v1040;
          v82[5] = &__b;
          uint64_t v1052 = v82;
          uint64_t v1060 = 0;
          int v83 = operator new(0x28uLL);
          *int v83 = &unk_27062B578;
          v83[1] = &v1046;
          v83[2] = &v1048;
          v83[3] = v1059;
          v83[4] = v1051;
          unsigned __int8 v1055 = v83;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
          std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
          ++v76;
          ++v1040;
        }
        while ((unint64_t)(*a2)[6] > v76);
      }
      goto LABEL_1072;
    case 5:
      int v43 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (void)(*a2)[6]));
      int v1056 = &unk_27062AEC8;
      unsigned __int8 v1057 = mlx::core::allocator::free;
      uint64_t v1058 = &v1056;
      mlx::core::array::set_data(a2, (uint64_t)v43, (uint64_t)&v1056);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v1056);
      int v1043 = 0;
      uint64_t v1044 = 0;
      __n128 __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      if (__p)
      {
        int v1043 = __p;
        operator delete(__p);
      }
      if (v1045 == 1)
      {
        unint64_t v104 = v1047;
        if (v1047 - (unsigned char *)v1046 == 4)
        {
          unint64_t v105 = (*a2)[6];
          if (v105)
          {
            uint64_t v106 = 0;
            uint64_t v107 = *(int *)v1046;
            unsigned __int8 v108 = (*a2)[19];
            unsigned __int8 v109 = *(signed int **)(*(void *)a1 + 152);
            do
            {
              signed int *v108 = 0x80000000;
              if ((int)v107 >= 1)
              {
                signed int v110 = 0x80000000;
                unsigned int v111 = v107 + 1;
                unsigned __int8 v112 = v109;
                do
                {
                  signed int v114 = *v112++;
                  signed int v113 = v114;
                  if (v110 <= v114) {
                    signed int v110 = v113;
                  }
                  signed int *v108 = v110;
                  --v111;
                }
                while (v111 > 1);
              }
              uint64_t v106 = (int *)((char *)v106 + 1);
              ++v108;
              v109 += v107;
            }
            while (v106 != v105);
          }
          goto LABEL_1076;
        }
      }
      else
      {
        if (!v1045)
        {
          int v44 = (*a2)[19];
          *int v44 = 0x80000000;
          int v45 = *(_DWORD *)(*(void *)a1 + 48);
          if (v45 >= 1)
          {
            unsigned int v46 = *(signed int **)(*(void *)a1 + 152);
            unsigned int v47 = v45 + 1;
            signed int v48 = 0x80000000;
            do
            {
              signed int v50 = *v46++;
              signed int v49 = v50;
              if (v48 <= v50) {
                signed int v48 = v49;
              }
              *int v44 = v48;
              --v47;
            }
            while (v47 > 1);
          }
          goto LABEL_1076;
        }
        if ((v1045 & 0xFFFFFFFD) != 1)
        {
          switch(v1045)
          {
            case 2:
              uint64_t v159 = v1047;
              if (v1047 - (unsigned char *)v1046 == 4)
              {
                uint64_t v505 = *((int *)v1047 - 1);
                uint64_t v506 = *((void *)v1049 - 1);
                v1047 -= 4;
                v1049 -= 8;
                unint64_t v507 = *a2;
                uint64_t v508 = (*a2)[6];
                if (v508)
                {
                  LODWORD(v509) = 0;
                  int v510 = v507[19];
                  unint64_t v511 = *(int **)(*(void *)a1 + 152);
                  do
                  {
                    if (v506) {
                      memset_pattern16(v510, &unk_25706ABB0, 4 * v506);
                    }
                    if ((int)v505 >= 1)
                    {
                      int v512 = 0;
                      int v513 = v511;
                      do
                      {
                        if (v506)
                        {
                          for (uint64_t i13 = 0; i13 != v506; ++i13)
                          {
                            int v516 = *v513++;
                            int v515 = v516;
                            if (v510[i13] > v516) {
                              int v515 = v510[i13];
                            }
                            v510[i13] = v515;
                          }
                        }
                        ++v512;
                      }
                      while (v512 != v505);
                    }
                    v511 += v506 * v505;
                    v510 += v506;
                    unint64_t v509 = (int)v509 + (int)v506;
                  }
                  while (v509 < (unint64_t)v508);
                }
                goto LABEL_1076;
              }
              break;
            case 5:
              __leuint64_t n = *(void *)(*(void *)a1 + 152);
              uint64_t v527 = (*a2)[19];
              size_t v73 = v1053;
              int v74 = v1055;
              if ((*a2)[6])
              {
                unint64_t v528 = 0;
                uint64_t v529 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
                do
                {
                  uint64_t v530 = 0;
                  if ((v529 & 0x80000000) == 0)
                  {
                    uint64_t v531 = v529;
                    int v532 = v528;
                    do
                    {
                      ldiv_t v533 = ldiv(v532, v73[v531]);
                      int v532 = v533.quot;
                      v530 += v74[v531--] * v533.rem;
                    }
                    while (v531 != -1);
                  }
                  LODWORD(v1040) = v530;
                  LODWORD(__b) = 0x80000000;
                  uint64_t v1052 = 0;
                  size_t v534 = operator new(0x28uLL);
                  *size_t v534 = &unk_27062FBF8;
                  v534[1] = &v1039;
                  v534[2] = &__b;
                  v534[3] = &__len;
                  v534[4] = &v1040;
                  uint64_t v1052 = v534;
                  uint64_t v1060 = 0;
                  uint64_t v535 = operator new(0x28uLL);
                  *uint64_t v535 = &unk_27062B578;
                  v535[1] = &v1046;
                  v535[2] = &v1048;
                  v535[3] = v1059;
                  v535[4] = v1051;
                  unsigned __int8 v1055 = v535;
                  std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
                  std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
                  std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
                  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
                  *v527++ = (int)__b;
                  ++v528;
                }
                while ((unint64_t)(*a2)[6] > v528);
              }
              goto LABEL_1072;
            case 4:
              uint64_t v159 = v1047;
              break;
            default:
              goto LABEL_1076;
          }
          int v1039 = *((_DWORD *)v159 - 1);
          size_t v517 = *((void *)v1049 - 1);
          char v1047 = v159 - 4;
          v1049 -= 8;
          uint64_t v1040 = *(int **)(*(void *)a1 + 152);
          __leuint64_t n = v517;
          __b = (*a2)[19];
          size_t v73 = v1053;
          int v74 = v1055;
          unint64_t v518 = (unint64_t)(*a2)[6];
          if (v1047 == v1046)
          {
            if (v518)
            {
              int v613 = 0;
              size_t v614 = (char *)__b;
              uint64_t v615 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
              size_t v616 = __len;
              size_t v1028 = v1040;
              size_t v617 = 4 * __len;
              do
              {
                uint64_t v618 = 0;
                if ((v615 & 0x80000000) == 0)
                {
                  uint64_t v619 = v615;
                  int v620 = v613;
                  do
                  {
                    ldiv_t v621 = ldiv(v620, v73[v619]);
                    int v620 = v621.quot;
                    v618 += v74[v619--] * v621.rem;
                  }
                  while (v619 != -1);
                }
                if (v616) {
                  memset_pattern16(v614, &unk_25706ABB0, v617);
                }
                int v622 = v1039;
                if (v1039 >= 1)
                {
                  int v623 = 0;
                  unsigned int v624 = &v1028[(int)v618];
                  do
                  {
                    if (v616)
                    {
                      for (uint64_t i14 = 0; i14 != v616; ++i14)
                      {
                        int v627 = *v624++;
                        int v626 = v627;
                        if (*(_DWORD *)&v614[4 * i14] > v627) {
                          int v626 = *(_DWORD *)&v614[4 * i14];
                        }
                        *(_DWORD *)&v614[4 * i14] = v626;
                      }
                    }
                    ++v623;
                  }
                  while (v623 != v622);
                }
                v614 += v617;
                v613 += v616;
              }
              while (v518 > v613);
            }
          }
          else if (v518)
          {
            int v519 = 0;
            uint64_t v520 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
            do
            {
              uint64_t v521 = 0;
              if ((v520 & 0x80000000) == 0)
              {
                uint64_t v522 = v520;
                int v523 = v519;
                do
                {
                  ldiv_t v524 = ldiv(v523, v73[v522]);
                  int v523 = v524.quot;
                  v521 += v74[v522--] * v524.rem;
                }
                while (v522 != -1);
              }
              int v1037 = v521;
              if (__len) {
                memset_pattern16(__b, &unk_25706ABB0, 4 * __len);
              }
              uint64_t v1052 = 0;
              uint64_t v525 = operator new(0x38uLL);
              *uint64_t v525 = &unk_27062FB78;
              v525[1] = &v1050;
              v525[2] = &v1040;
              v525[3] = &v1037;
              v525[4] = &__b;
              v525[5] = &v1039;
              v525[6] = &__len;
              uint64_t v1052 = v525;
              uint64_t v1060 = 0;
              unint64_t v526 = operator new(0x28uLL);
              *unint64_t v526 = &unk_27062B578;
              v526[1] = &v1046;
              v526[2] = &v1048;
              v526[3] = v1059;
              v526[4] = v1051;
              unsigned __int8 v1055 = v526;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
              std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
              std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
              std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
              __b = (char *)__b + 4 * __len;
              v519 += __len;
            }
            while ((unint64_t)(*a2)[6] > v519);
          }
          goto LABEL_1072;
        }
        unint64_t v104 = v1047;
      }
      LODWORD(__b) = *((_DWORD *)v104 - 1);
      char v1047 = v104 - 4;
      v1049 -= 8;
      size_t v145 = *(void *)(*(void *)a1 + 152);
      uint64_t v1040 = (*a2)[19];
      __leuint64_t n = v145;
      size_t v73 = v1053;
      int v74 = v1055;
      unint64_t v146 = (*a2)[6];
      if (v1047 == v1046)
      {
        if (v146)
        {
          uint64_t v253 = 0;
          uint64_t v254 = v1040;
          size_t v255 = __len;
          uint64_t v256 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
          do
          {
            uint64_t v257 = 0;
            if ((v256 & 0x80000000) == 0)
            {
              uint64_t v258 = v256;
              int v259 = (int)v253;
              do
              {
                ldiv_t v260 = ldiv(v259, v73[v258]);
                int v259 = v260.quot;
                v257 += v74[v258--] * v260.rem;
              }
              while (v258 != -1);
            }
            *uint64_t v254 = 0x80000000;
            if ((int)__b >= 1)
            {
              unsigned int v261 = (signed int *)(v255 + 4 * (int)v257);
              unsigned int v262 = __b + 1;
              signed int v263 = 0x80000000;
              do
              {
                signed int v265 = *v261++;
                signed int v264 = v265;
                if (v263 <= v265) {
                  signed int v263 = v264;
                }
                *uint64_t v254 = v263;
                --v262;
              }
              while (v262 > 1);
            }
            uint64_t v253 = (int *)((char *)v253 + 1);
            ++v254;
          }
          while (v253 != v146);
        }
      }
      else if (v146)
      {
        unint64_t v147 = 0;
        uint64_t v148 = ((unint64_t)(v1054 - (void)v1053) >> 2) - 1;
        do
        {
          uint64_t v149 = 0;
          if ((v148 & 0x80000000) == 0)
          {
            uint64_t v150 = v148;
            int v151 = v147;
            do
            {
              ldiv_t v152 = ldiv(v151, v73[v150]);
              int v151 = v152.quot;
              v149 += v74[v150--] * v152.rem;
            }
            while (v150 != -1);
          }
          int v1039 = v149;
          *uint64_t v1040 = 0x80000000;
          uint64_t v1052 = 0;
          unint64_t v153 = operator new(0x30uLL);
          *unint64_t v153 = &unk_27062FAF8;
          v153[1] = &v1037;
          v153[2] = &__len;
          v153[3] = &v1039;
          v153[4] = &v1040;
          v153[5] = &__b;
          uint64_t v1052 = v153;
          uint64_t v1060 = 0;
          unint64_t v154 = operator new(0x28uLL);
          *unint64_t v154 = &unk_27062B578;
          v154[1] = &v1046;
          v154[2] = &v1048;
          v154[3] = v1059;
          v154[4] = v1051;
          unsigned __int8 v1055 = v154;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1053, v1059);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](&v1053);
          std::function<void ()(int,int)>::operator()((uint64_t)v1059, 0, 0);
          std::__function::__value_func<void ()(int,int)>::~__value_func[abi:ne180100](v1059);
          std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v1051);
          ++v147;
          ++v1040;
        }
        while ((unint64_t)(*a2)[6] > v147);
      }
      goto LABEL_1072;
    default:
      return;
  }
}